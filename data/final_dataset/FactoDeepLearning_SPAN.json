{"home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.SignFlipping.__init__": [[52, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.SignFlipping.__call__": [[55, 57], ["PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "ImageOps", ".", "invert", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.DPIAdjusting.__init__": [[64, 66], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "factor", ")", ":", "\n", "        ", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.DPIAdjusting.__call__": [[67, 70], ["x.resize", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", ",", "h", "=", "x", ".", "size", "\n", "return", "x", ".", "resize", "(", "(", "int", "(", "np", ".", "ceil", "(", "w", "*", "self", ".", "factor", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "h", "*", "self", ".", "factor", ")", ")", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.Dilation.__init__": [[77, 80], ["numpy.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "kernel", ",", "iterations", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "np", ".", "ones", "(", "kernel", ",", "np", ".", "uint8", ")", "\n", "self", ".", "iterations", "=", "iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.Dilation.__call__": [[81, 83], ["PIL.Image.fromarray", "cv2.dilate", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "Image", ".", "fromarray", "(", "dilate", "(", "np", ".", "array", "(", "x", ")", ",", "self", ".", "kernel", ",", "iterations", "=", "self", ".", "iterations", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.Erosion.__init__": [[90, 93], ["numpy.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "kernel", ",", "iterations", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "np", ".", "ones", "(", "kernel", ",", "np", ".", "uint8", ")", "\n", "self", ".", "iterations", "=", "iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.Erosion.__call__": [[94, 96], ["PIL.Image.fromarray", "cv2.erode", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "Image", ".", "fromarray", "(", "erode", "(", "np", ".", "array", "(", "x", ")", ",", "self", ".", "kernel", ",", "iterations", "=", "self", ".", "iterations", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.ElasticDistortion.__init__": [[104, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "grid", ",", "magnitude", ",", "min_sep", ")", ":", "\n", "\n", "        ", "self", ".", "grid_width", ",", "self", ".", "grid_height", "=", "grid", "\n", "self", ".", "xmagnitude", ",", "self", ".", "ymagnitude", "=", "magnitude", "\n", "self", ".", "min_h_sep", ",", "self", ".", "min_v_sep", "=", "min_sep", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.ElasticDistortion.__call__": [[110, 209], ["int", "int", "range", "list", "range", "range", "range", "enumerate", "range", "x.transform", "numpy.floor", "numpy.floor", "range", "itertools.chain.from_iterable", "last_column.append", "polygons.append", "len", "generated_mesh.append", "range", "numpy.random.randint", "numpy.random.randint", "polygon_indices.append", "float", "float", "range", "dimensions.append", "min", "min", "dimensions.append", "dimensions.append", "dimensions.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", ",", "h", "=", "x", ".", "size", "\n", "\n", "horizontal_tiles", "=", "self", ".", "grid_width", "\n", "vertical_tiles", "=", "self", ".", "grid_height", "\n", "\n", "width_of_square", "=", "int", "(", "floor", "(", "w", "/", "float", "(", "horizontal_tiles", ")", ")", ")", "\n", "height_of_square", "=", "int", "(", "floor", "(", "h", "/", "float", "(", "vertical_tiles", ")", ")", ")", "\n", "\n", "width_of_last_square", "=", "w", "-", "(", "width_of_square", "*", "(", "horizontal_tiles", "-", "1", ")", ")", "\n", "height_of_last_square", "=", "h", "-", "(", "height_of_square", "*", "(", "vertical_tiles", "-", "1", ")", ")", "\n", "\n", "dimensions", "=", "[", "]", "\n", "shift", "=", "[", "[", "(", "0", ",", "0", ")", "for", "x", "in", "range", "(", "horizontal_tiles", ")", "]", "for", "y", "in", "range", "(", "vertical_tiles", ")", "]", "\n", "\n", "for", "vertical_tile", "in", "range", "(", "vertical_tiles", ")", ":", "\n", "            ", "for", "horizontal_tile", "in", "range", "(", "horizontal_tiles", ")", ":", "\n", "                ", "if", "vertical_tile", "==", "(", "vertical_tiles", "-", "1", ")", "and", "horizontal_tile", "==", "(", "horizontal_tiles", "-", "1", ")", ":", "\n", "                    ", "dimensions", ".", "append", "(", "[", "horizontal_tile", "*", "width_of_square", ",", "\n", "vertical_tile", "*", "height_of_square", ",", "\n", "width_of_last_square", "+", "(", "horizontal_tile", "*", "width_of_square", ")", ",", "\n", "height_of_last_square", "+", "(", "height_of_square", "*", "vertical_tile", ")", "]", ")", "\n", "", "elif", "vertical_tile", "==", "(", "vertical_tiles", "-", "1", ")", ":", "\n", "                    ", "dimensions", ".", "append", "(", "[", "horizontal_tile", "*", "width_of_square", ",", "\n", "vertical_tile", "*", "height_of_square", ",", "\n", "width_of_square", "+", "(", "horizontal_tile", "*", "width_of_square", ")", ",", "\n", "height_of_last_square", "+", "(", "height_of_square", "*", "vertical_tile", ")", "]", ")", "\n", "", "elif", "horizontal_tile", "==", "(", "horizontal_tiles", "-", "1", ")", ":", "\n", "                    ", "dimensions", ".", "append", "(", "[", "horizontal_tile", "*", "width_of_square", ",", "\n", "vertical_tile", "*", "height_of_square", ",", "\n", "width_of_last_square", "+", "(", "horizontal_tile", "*", "width_of_square", ")", ",", "\n", "height_of_square", "+", "(", "height_of_square", "*", "vertical_tile", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "dimensions", ".", "append", "(", "[", "horizontal_tile", "*", "width_of_square", ",", "\n", "vertical_tile", "*", "height_of_square", ",", "\n", "width_of_square", "+", "(", "horizontal_tile", "*", "width_of_square", ")", ",", "\n", "height_of_square", "+", "(", "height_of_square", "*", "vertical_tile", ")", "]", ")", "\n", "\n", "", "sm_h", "=", "min", "(", "self", ".", "xmagnitude", ",", "width_of_square", "-", "(", "self", ".", "min_h_sep", "+", "shift", "[", "vertical_tile", "]", "[", "horizontal_tile", "-", "1", "]", "[", "\n", "0", "]", ")", ")", "if", "horizontal_tile", ">", "0", "else", "self", ".", "xmagnitude", "\n", "sm_v", "=", "min", "(", "self", ".", "ymagnitude", ",", "height_of_square", "-", "(", "self", ".", "min_v_sep", "+", "shift", "[", "vertical_tile", "-", "1", "]", "[", "horizontal_tile", "]", "[", "\n", "1", "]", ")", ")", "if", "vertical_tile", ">", "0", "else", "self", ".", "ymagnitude", "\n", "\n", "dx", "=", "random", ".", "randint", "(", "-", "sm_h", ",", "self", ".", "xmagnitude", ")", "\n", "dy", "=", "random", ".", "randint", "(", "-", "sm_v", ",", "self", ".", "ymagnitude", ")", "\n", "shift", "[", "vertical_tile", "]", "[", "horizontal_tile", "]", "=", "(", "dx", ",", "dy", ")", "\n", "\n", "", "", "shift", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "shift", ")", ")", "\n", "\n", "last_column", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "vertical_tiles", ")", ":", "\n", "            ", "last_column", ".", "append", "(", "(", "horizontal_tiles", "-", "1", ")", "+", "horizontal_tiles", "*", "i", ")", "\n", "\n", "", "last_row", "=", "range", "(", "(", "horizontal_tiles", "*", "vertical_tiles", ")", "-", "horizontal_tiles", ",", "horizontal_tiles", "*", "vertical_tiles", ")", "\n", "\n", "polygons", "=", "[", "]", "\n", "for", "x1", ",", "y1", ",", "x2", ",", "y2", "in", "dimensions", ":", "\n", "            ", "polygons", ".", "append", "(", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", ")", "\n", "\n", "", "polygon_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "(", "vertical_tiles", "*", "horizontal_tiles", ")", "-", "1", ")", ":", "\n", "            ", "if", "i", "not", "in", "last_row", "and", "i", "not", "in", "last_column", ":", "\n", "                ", "polygon_indices", ".", "append", "(", "[", "i", ",", "i", "+", "1", ",", "i", "+", "horizontal_tiles", ",", "i", "+", "1", "+", "horizontal_tiles", "]", ")", "\n", "\n", "", "", "for", "id", ",", "(", "a", ",", "b", ",", "c", ",", "d", ")", "in", "enumerate", "(", "polygon_indices", ")", ":", "\n", "            ", "dx", "=", "shift", "[", "id", "]", "[", "0", "]", "\n", "dy", "=", "shift", "[", "id", "]", "[", "1", "]", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "polygons", "[", "a", "]", "\n", "polygons", "[", "a", "]", "=", "[", "x1", ",", "y1", ",", "\n", "x2", ",", "y2", ",", "\n", "x3", "+", "dx", ",", "y3", "+", "dy", ",", "\n", "x4", ",", "y4", "]", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "polygons", "[", "b", "]", "\n", "polygons", "[", "b", "]", "=", "[", "x1", ",", "y1", ",", "\n", "x2", "+", "dx", ",", "y2", "+", "dy", ",", "\n", "x3", ",", "y3", ",", "\n", "x4", ",", "y4", "]", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "polygons", "[", "c", "]", "\n", "polygons", "[", "c", "]", "=", "[", "x1", ",", "y1", ",", "\n", "x2", ",", "y2", ",", "\n", "x3", ",", "y3", ",", "\n", "x4", "+", "dx", ",", "y4", "+", "dy", "]", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "polygons", "[", "d", "]", "\n", "polygons", "[", "d", "]", "=", "[", "x1", "+", "dx", ",", "y1", "+", "dy", ",", "\n", "x2", ",", "y2", ",", "\n", "x3", ",", "y3", ",", "\n", "x4", ",", "y4", "]", "\n", "\n", "", "generated_mesh", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dimensions", ")", ")", ":", "\n", "            ", "generated_mesh", ".", "append", "(", "[", "dimensions", "[", "i", "]", ",", "polygons", "[", "i", "]", "]", ")", "\n", "\n", "", "self", ".", "generated_mesh", "=", "generated_mesh", "\n", "\n", "return", "x", ".", "transform", "(", "x", ".", "size", ",", "Image", ".", "MESH", ",", "self", ".", "generated_mesh", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.RandomTransform.__init__": [[217, 220], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "val", ")", ":", "\n", "\n", "        ", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.transforms.RandomTransform.__call__": [[221, 285], ["transforms.RandomTransform.__call__.rd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", ",", "h", "=", "x", ".", "size", "\n", "\n", "dw", ",", "dh", "=", "(", "self", ".", "val", ",", "0", ")", "if", "random", ".", "randint", "(", "0", ",", "2", ")", "==", "0", "else", "(", "0", ",", "self", ".", "val", ")", "\n", "\n", "def", "rd", "(", "d", ")", ":", "\n", "            ", "return", "random", ".", "uniform", "(", "-", "d", ",", "d", ")", "\n", "\n", "", "def", "fd", "(", "d", ")", ":", "\n", "            ", "return", "random", ".", "uniform", "(", "-", "dw", ",", "d", ")", "\n", "\n", "# generate a random projective transform", "\n", "# adapted from https://navoshta.com/traffic-signs-classification/", "\n", "", "tl_top", "=", "rd", "(", "dh", ")", "\n", "tl_left", "=", "fd", "(", "dw", ")", "\n", "bl_bottom", "=", "rd", "(", "dh", ")", "\n", "bl_left", "=", "fd", "(", "dw", ")", "\n", "tr_top", "=", "rd", "(", "dh", ")", "\n", "tr_right", "=", "fd", "(", "min", "(", "w", "*", "3", "/", "4", "-", "tl_left", ",", "dw", ")", ")", "\n", "br_bottom", "=", "rd", "(", "dh", ")", "\n", "br_right", "=", "fd", "(", "min", "(", "w", "*", "3", "/", "4", "-", "bl_left", ",", "dw", ")", ")", "\n", "\n", "tform", "=", "stf", ".", "ProjectiveTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "np", ".", "array", "(", "(", "\n", "(", "tl_left", ",", "tl_top", ")", ",", "\n", "(", "bl_left", ",", "h", "-", "bl_bottom", ")", ",", "\n", "(", "w", "-", "br_right", ",", "h", "-", "br_bottom", ")", ",", "\n", "(", "w", "-", "tr_right", ",", "tr_top", ")", "\n", ")", ")", ",", "np", ".", "array", "(", "(", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "h", "-", "1", "]", ",", "\n", "[", "w", "-", "1", ",", "h", "-", "1", "]", ",", "\n", "[", "w", "-", "1", ",", "0", "]", "\n", ")", ")", ")", "\n", "\n", "# determine shape of output image, to preserve size", "\n", "# trick take from the implementation of skimage.transform.rotate", "\n", "corners", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "h", "-", "1", "]", ",", "\n", "[", "w", "-", "1", ",", "h", "-", "1", "]", ",", "\n", "[", "w", "-", "1", ",", "0", "]", "\n", "]", ")", "\n", "\n", "corners", "=", "tform", ".", "inverse", "(", "corners", ")", "\n", "minc", "=", "corners", "[", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "minr", "=", "corners", "[", ":", ",", "1", "]", ".", "min", "(", ")", "\n", "maxc", "=", "corners", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "maxr", "=", "corners", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "out_rows", "=", "maxr", "-", "minr", "+", "1", "\n", "out_cols", "=", "maxc", "-", "minc", "+", "1", "\n", "output_shape", "=", "np", ".", "around", "(", "(", "out_rows", ",", "out_cols", ")", ")", "\n", "\n", "# fit output image in new shape", "\n", "translation", "=", "(", "minc", ",", "minr", ")", "\n", "tform4", "=", "stf", ".", "SimilarityTransform", "(", "translation", "=", "translation", ")", "\n", "tform", "=", "tform4", "+", "tform", "\n", "# normalize", "\n", "tform", ".", "params", "/=", "tform", ".", "params", "[", "2", ",", "2", "]", "\n", "\n", "x", "=", "stf", ".", "warp", "(", "np", ".", "array", "(", "x", ")", ",", "tform", ",", "output_shape", "=", "output_shape", ",", "cval", "=", "255", ",", "preserve_range", "=", "True", ")", "\n", "x", "=", "stf", ".", "resize", "(", "x", ",", "(", "h", ",", "w", ")", ",", "preserve_range", "=", "True", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "Image", ".", "fromarray", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.DepthSepConv2D.__init__": [[44, 63], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "int"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "activation", "=", "None", ",", "padding", "=", "True", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "        ", "super", "(", "DepthSepConv2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "padding", "=", "None", "\n", "\n", "if", "padding", ":", "\n", "            ", "if", "padding", "is", "True", ":", "\n", "                ", "padding", "=", "[", "int", "(", "(", "k", "-", "1", ")", "/", "2", ")", "for", "k", "in", "kernel_size", "]", "\n", "if", "kernel_size", "[", "0", "]", "%", "2", "==", "0", "or", "kernel_size", "[", "1", "]", "%", "2", "==", "0", ":", "\n", "                    ", "padding_h", "=", "kernel_size", "[", "1", "]", "-", "1", "\n", "padding_w", "=", "kernel_size", "[", "0", "]", "-", "1", "\n", "self", ".", "padding", "=", "[", "padding_h", "//", "2", ",", "padding_h", "-", "padding_h", "//", "2", ",", "padding_w", "//", "2", ",", "padding_w", "-", "padding_w", "//", "2", "]", "\n", "padding", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "padding", "=", "(", "0", ",", "0", ")", "\n", "", "self", ".", "depth_conv", "=", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "kernel_size", ",", "dilation", "=", "dilation", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "in_channels", ")", "\n", "self", ".", "point_conv", "=", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "dilation", "=", "dilation", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.DepthSepConv2D.forward": [[64, 72], ["models.DepthSepConv2D.depth_conv", "models.DepthSepConv2D.point_conv", "torch.nn.functional.pad", "models.DepthSepConv2D.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "depth_conv", "(", "x", ")", "\n", "if", "self", ".", "padding", ":", "\n", "            ", "x", "=", "pad", "(", "x", ",", "self", ".", "padding", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "x", "=", "self", ".", "point_conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.MixDropout.__init__": [[75, 80], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout_proba", "=", "0.4", ",", "dropout2d_proba", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "MixDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout_proba", ")", "\n", "self", ".", "dropout2d", "=", "Dropout2d", "(", "dropout2d_proba", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.MixDropout.forward": [[81, 85], ["models.MixDropout.dropout2d", "random.random", "models.MixDropout.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "self", ".", "dropout", "(", "x", ")", "\n", "", "return", "self", ".", "dropout2d", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.ConvBlock.__init__": [[89, 98], ["torch.nn.Module.__init__", "activation", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "models.MixDropout"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_", ",", "out_", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "k", "=", "3", ",", "activation", "=", "ReLU", ",", "dropout", "=", "0.4", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "(", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "in_channels", "=", "in_", ",", "out_channels", "=", "out_", ",", "kernel_size", "=", "k", ",", "padding", "=", "k", "//", "2", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "in_channels", "=", "out_", ",", "out_channels", "=", "out_", ",", "kernel_size", "=", "k", ",", "padding", "=", "k", "//", "2", ")", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "out_", ",", "out_", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ")", "\n", "self", ".", "norm_layer", "=", "InstanceNorm2d", "(", "out_", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.99", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "dropout", "=", "MixDropout", "(", "dropout_proba", "=", "dropout", ",", "dropout2d_proba", "=", "dropout", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.ConvBlock.forward": [[99, 120], ["random.randint", "models.ConvBlock.conv1", "models.ConvBlock.activation", "models.ConvBlock.conv2", "models.ConvBlock.activation", "models.ConvBlock.norm_layer", "models.ConvBlock.conv3", "models.ConvBlock.activation", "models.ConvBlock.dropout", "models.ConvBlock.dropout", "models.ConvBlock.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pos", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "pos", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "pos", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "pos", "==", "3", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.DSCBlock.__init__": [[124, 133], ["torch.nn.Module.__init__", "activation", "models.DepthSepConv2D", "models.DepthSepConv2D", "models.DepthSepConv2D", "torch.nn.InstanceNorm2d", "models.MixDropout"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_", ",", "out_", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "activation", "=", "ReLU", ",", "dropout", "=", "0.4", ")", ":", "\n", "        ", "super", "(", "DSCBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "(", ")", "\n", "self", ".", "conv1", "=", "DepthSepConv2D", "(", "in_", ",", "out_", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", "\n", "self", ".", "conv2", "=", "DepthSepConv2D", "(", "out_", ",", "out_", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", "\n", "self", ".", "conv3", "=", "DepthSepConv2D", "(", "out_", ",", "out_", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "stride", ")", "\n", "self", ".", "norm_layer", "=", "InstanceNorm2d", "(", "out_", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.99", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "dropout", "=", "MixDropout", "(", "dropout_proba", "=", "dropout", ",", "dropout2d_proba", "=", "dropout", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.DSCBlock.forward": [[134, 154], ["random.randint", "models.DSCBlock.conv1", "models.DSCBlock.activation", "models.DSCBlock.conv2", "models.DSCBlock.activation", "models.DSCBlock.norm_layer", "models.DSCBlock.conv3", "models.DSCBlock.dropout", "models.DSCBlock.dropout", "models.DSCBlock.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pos", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "pos", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "pos", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "\n", "if", "pos", "==", "3", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.FCN_Encoder.__init__": [[157, 174], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "models.ConvBlock", "models.ConvBlock", "models.ConvBlock", "models.ConvBlock", "models.ConvBlock", "models.ConvBlock", "models.DSCBlock", "models.DSCBlock", "models.DSCBlock", "models.DSCBlock"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "FCN_Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "params", "[", "\"dropout\"", "]", "\n", "self", ".", "amp", "=", "params", "[", "\"use_amp\"", "]", "\n", "self", ".", "init_blocks", "=", "ModuleList", "(", "[", "\n", "ConvBlock", "(", "params", "[", "\"input_channels\"", "]", ",", "32", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "ConvBlock", "(", "32", ",", "64", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "ConvBlock", "(", "64", ",", "128", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "ConvBlock", "(", "128", ",", "256", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "ConvBlock", "(", "256", ",", "512", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "ConvBlock", "(", "512", ",", "512", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "]", ")", "\n", "self", ".", "blocks", "=", "ModuleList", "(", "[", "\n", "DSCBlock", "(", "512", ",", "512", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "DSCBlock", "(", "512", ",", "512", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "DSCBlock", "(", "512", ",", "512", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "DSCBlock", "(", "512", ",", "512", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "self", ".", "dropout", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.models.FCN_Encoder.forward": [[176, 184], ["torch.cuda.amp.autocast", "b", "b", "b.size", "b.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "autocast", "(", "self", ".", "amp", ")", ":", "\n", "            ", "for", "b", "in", "self", ".", "init_blocks", ":", "\n", "                ", "x", "=", "b", "(", "x", ")", "\n", "", "for", "b", "in", "self", ".", "blocks", ":", "\n", "                ", "xt", "=", "b", "(", "x", ")", "\n", "x", "=", "x", "+", "xt", "if", "x", ".", "size", "(", ")", "==", "xt", ".", "size", "(", ")", "else", "xt", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.__init__": [[55, 83], ["dict", "dict", "list", "generic_training_manager.GenericTrainingManager.init_hardware_config", "generic_training_manager.GenericTrainingManager.init_paths", "generic_training_manager.GenericTrainingManager.load_dataset", "generic_training_manager.GenericTrainingManager.load_model"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_hardware_config", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_paths", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_dataset", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_model"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "type", "=", "None", "\n", "self", ".", "is_master", "=", "False", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "models", "=", "{", "}", "\n", "self", ".", "begin_time", "=", "None", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "paths", "=", "None", "\n", "self", ".", "latest_epoch", "=", "-", "1", "\n", "self", ".", "latest_batch", "=", "0", "\n", "self", ".", "total_batch", "=", "0", "\n", "self", ".", "latest_train_metrics", "=", "dict", "(", ")", "\n", "self", ".", "latest_valid_metrics", "=", "dict", "(", ")", "\n", "self", ".", "phase", "=", "None", "\n", "self", ".", "max_mem_usage_by_epoch", "=", "list", "(", ")", "\n", "\n", "self", ".", "scaler", "=", "None", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "lr_scheduler", "=", "None", "\n", "self", ".", "best", "=", "None", "\n", "self", ".", "writer", "=", "None", "\n", "\n", "reset_optimizer", "=", "\"reset_optimizer\"", "in", "self", ".", "params", "[", "\"training_params\"", "]", "and", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"reset_optimizer\"", "]", "\n", "\n", "self", ".", "init_hardware_config", "(", ")", "\n", "self", ".", "init_paths", "(", ")", "\n", "self", ".", "load_dataset", "(", ")", "\n", "self", ".", "load_model", "(", "reset_optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_paths": [[84, 97], ["os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs"], "methods", ["None"], ["", "def", "init_paths", "(", "self", ")", ":", "\n", "## Create output folders", "\n", "        ", "output_path", "=", "os", ".", "path", ".", "join", "(", "\"outputs\"", ",", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"output_folder\"", "]", ")", "\n", "os", ".", "makedirs", "(", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "checkpoints_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"checkpoints\"", ")", "\n", "os", ".", "makedirs", "(", "checkpoints_path", ",", "exist_ok", "=", "True", ")", "\n", "results_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"results\"", ")", "\n", "os", ".", "makedirs", "(", "results_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "paths", "=", "{", "\n", "\"results\"", ":", "results_path", ",", "\n", "\"checkpoints\"", ":", "checkpoints_path", ",", "\n", "\"output_folder\"", ":", "output_path", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_dataset": [[99, 106], ["basic.generic_dataset_manager.DatasetManager", "len"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "[", "\"dataset_params\"", "]", "[", "\"use_ddp\"", "]", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", "\n", "self", ".", "params", "[", "\"dataset_params\"", "]", "[", "\"batch_size\"", "]", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"batch_size\"", "]", "\n", "self", ".", "params", "[", "\"dataset_params\"", "]", "[", "\"num_gpu\"", "]", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"nb_gpu\"", "]", "\n", "self", ".", "dataset", "=", "DatasetManager", "(", "self", ".", "params", "[", "\"dataset_params\"", "]", ")", "\n", "if", "self", ".", "dataset", ".", "charset", ":", "\n", "            ", "self", ".", "params", "[", "\"model_params\"", "]", "[", "\"vocab_size\"", "]", "=", "len", "(", "self", ".", "dataset", ".", "charset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_hardware_config": [[107, 148], ["print", "print", "print", "print", "range", "print", "print", "print", "generic_training_manager.GenericTrainingManager.params[].keys", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "generic_training_manager.GenericTrainingManager.launch_ddp", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "generic_training_manager.GenericTrainingManager.params[].keys", "generic_training_manager.GenericTrainingManager.params[].keys", "generic_training_manager.GenericTrainingManager.params[].keys", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties", "torch.cuda.get_device_properties"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.launch_ddp"], ["", "", "def", "init_hardware_config", "(", "self", ")", ":", "\n", "# Debug mode", "\n", "        ", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"force_cpu\"", "]", ":", "\n", "            ", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", "=", "False", "\n", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_amp\"", "]", "=", "False", "\n", "# Manage Distributed Data Parallel & GPU usage", "\n", "", "self", ".", "manual_seed", "=", "1111", "if", "\"manual_seed\"", "not", "in", "self", ".", "params", "[", "\"training_params\"", "]", ".", "keys", "(", ")", "else", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"manual_seed\"", "]", "\n", "self", ".", "ddp_config", "=", "{", "\n", "\"master\"", ":", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", "and", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"ddp_rank\"", "]", "==", "0", ",", "\n", "\"address\"", ":", "\"localhost\"", "if", "\"ddp_addr\"", "not", "in", "self", ".", "params", "[", "\"training_params\"", "]", ".", "keys", "(", ")", "else", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"ddp_addr\"", "]", ",", "\n", "\"port\"", ":", "\"11111\"", "if", "\"ddp_port\"", "not", "in", "self", ".", "params", "[", "\"training_params\"", "]", ".", "keys", "(", ")", "else", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"ddp_port\"", "]", ",", "\n", "\"backend\"", ":", "\"nccl\"", "if", "\"ddp_backend\"", "not", "in", "self", ".", "params", "[", "\"training_params\"", "]", ".", "keys", "(", ")", "else", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"ddp_backend\"", "]", ",", "\n", "\"rank\"", ":", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"ddp_rank\"", "]", ",", "\n", "}", "\n", "self", ".", "is_master", "=", "self", ".", "ddp_config", "[", "\"master\"", "]", "or", "not", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"force_cpu\"", "]", ":", "\n", "            ", "self", ".", "device", "=", "\"cpu\"", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", ":", "\n", "                ", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "ddp_config", "[", "\"rank\"", "]", ")", "\n", "self", ".", "params", "[", "\"dataset_params\"", "]", "[", "\"ddp_rank\"", "]", "=", "self", ".", "ddp_config", "[", "\"rank\"", "]", "\n", "self", ".", "launch_ddp", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# Print GPU info", "\n", "# global", "\n", "", "", "if", "(", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", "and", "self", ".", "ddp_config", "[", "\"master\"", "]", ")", "or", "not", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", ":", "\n", "            ", "print", "(", "\"##################\"", ")", "\n", "print", "(", "\"Available GPUS: {}\"", ".", "format", "(", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"nb_gpu\"", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"nb_gpu\"", "]", ")", ":", "\n", "                ", "print", "(", "\"Rank {}: {} {}\"", ".", "format", "(", "i", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "i", ")", ",", "torch", ".", "cuda", ".", "get_device_properties", "(", "i", ")", ")", ")", "\n", "", "print", "(", "\"##################\"", ")", "\n", "# local", "\n", "", "print", "(", "\"Local GPU:\"", ")", "\n", "if", "self", ".", "device", "!=", "\"cpu\"", ":", "\n", "            ", "print", "(", "\"Rank {}: {} {}\"", ".", "format", "(", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"ddp_rank\"", "]", ",", "torch", ".", "cuda", ".", "get_device_name", "(", ")", ",", "torch", ".", "cuda", ".", "get_device_properties", "(", "self", ".", "device", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"WORKING ON CPU !\\n\"", ")", "\n", "", "print", "(", "\"##################\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_model": [[149, 227], ["[].keys", "generic_training_manager.GenericTrainingManager.reset_optimizer", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "generic_training_manager.GenericTrainingManager.models[].to", "os.listdir", "print", "generic_training_manager.GenericTrainingManager.models.keys", "generic_training_manager.GenericTrainingManager.models[].apply", "[].keys", "generic_training_manager.GenericTrainingManager.models.keys", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "generic_training_manager.GenericTrainingManager.load_save_info", "generic_training_manager.GenericTrainingManager.scaler.load_state_dict", "generic_training_manager.GenericTrainingManager.models.keys", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "generic_training_manager.GenericTrainingManager.models.keys", "generic_training_manager.GenericTrainingManager.models[].load_state_dict", "generic_training_manager.GenericTrainingManager.optimizer.load_state_dict", "generic_training_manager.GenericTrainingManager.lr_scheduler.load_state_dict", "generic_training_manager.GenericTrainingManager.models[].load_state_dict", "print", "generic_training_manager.GenericTrainingManager.set_model_learnable", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load.keys", "torch.load.keys", "torch.load.keys", "print", "checkpoint[].keys", "generic_training_manager.GenericTrainingManager.models[].load_state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.reset_optimizer", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_save_info", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.set_model_learnable"], ["", "def", "load_model", "(", "self", ",", "reset_optimizer", "=", "False", ")", ":", "\n", "        ", "self", ".", "params", "[", "\"model_params\"", "]", "[", "\"use_amp\"", "]", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_amp\"", "]", "\n", "# Instanciate Model", "\n", "for", "model_name", "in", "self", ".", "params", "[", "\"model_params\"", "]", "[", "\"models\"", "]", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "models", "[", "model_name", "]", "=", "self", ".", "params", "[", "\"model_params\"", "]", "[", "\"models\"", "]", "[", "model_name", "]", "(", "self", ".", "params", "[", "\"model_params\"", "]", ")", "\n", "self", ".", "models", "[", "model_name", "]", ".", "to", "(", "self", ".", "device", ")", "# To GPU or CPU", "\n", "\n", "# Instanciate optimizer", "\n", "", "self", ".", "reset_optimizer", "(", ")", "\n", "if", "\"lr_scheduler\"", "in", "self", ".", "params", "[", "\"training_params\"", "]", "and", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"lr_scheduler\"", "]", ":", "\n", "            ", "self", ".", "lr_scheduler", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"lr_scheduler\"", "]", "[", "\"type\"", "]", "(", "self", ".", "optimizer", ",", "gamma", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"lr_scheduler\"", "]", "[", "\"gamma\"", "]", ")", "\n", "\n", "", "self", ".", "scaler", "=", "GradScaler", "(", "enabled", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_amp\"", "]", ")", "\n", "\n", "# Load previous weights", "\n", "checkpoint", "=", "None", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"load_epoch\"", "]", "in", "(", "\"best\"", ",", "\"last\"", ")", ":", "\n", "            ", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "paths", "[", "\"checkpoints\"", "]", ")", ":", "\n", "# Continue training", "\n", "                ", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"load_epoch\"", "]", "in", "filename", ":", "\n", "                    ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"checkpoints\"", "]", ",", "filename", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "self", ".", "load_save_info", "(", "checkpoint", ")", "\n", "self", ".", "latest_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "self", ".", "best", "=", "checkpoint", "[", "\"best\"", "]", "\n", "self", ".", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scaler_state_dict\"", "]", ")", "\n", "# Make model compatible with Distributed Data Parallel if used", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", ":", "\n", "                        ", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "                            ", "self", ".", "models", "[", "model_name", "]", "=", "DDP", "(", "self", ".", "models", "[", "model_name", "]", ",", "[", "self", ".", "ddp_config", "[", "\"rank\"", "]", "]", ")", "\n", "# Load model weights from past training", "\n", "", "", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "models", "[", "model_name", "]", ".", "load_state_dict", "(", "checkpoint", "[", "\"{}_state_dict\"", ".", "format", "(", "model_name", ")", "]", ")", "\n", "# Load optimizer state from past training", "\n", "", "if", "not", "reset_optimizer", ":", "\n", "                        ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer_state_dict\"", "]", ")", "\n", "# Load optimizer scheduler config from past training if used", "\n", "", "if", "\"lr_scheduler\"", "in", "self", ".", "params", "[", "\"training_params\"", "]", "and", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"lr_scheduler\"", "]", "and", "\"lr_scheduler_state_dict\"", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"lr_scheduler_state_dict\"", "]", ")", "\n", "", "break", "\n", "\n", "# Print the number of trained epoch so far with the model", "\n", "", "", "", "if", "self", ".", "is_master", ":", "\n", "            ", "print", "(", "\"LOADED EPOCH: {}\\n\"", ".", "format", "(", "self", ".", "latest_epoch", ")", ",", "flush", "=", "True", ")", "\n", "\n", "# New training", "\n", "", "if", "not", "checkpoint", ":", "\n", "# Weights initialization", "\n", "            ", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "models", "[", "model_name", "]", ".", "apply", "(", "self", ".", "weights_init", ")", "\n", "# Handle transfer learning instructions", "\n", "", "if", "self", ".", "params", "[", "\"model_params\"", "]", "[", "\"transfer_learning\"", "]", ":", "\n", "# Iterates over models", "\n", "                ", "for", "model_name", "in", "self", ".", "params", "[", "\"model_params\"", "]", "[", "\"transfer_learning\"", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "state_dict_name", ",", "path", ",", "learnable", ",", "strict", "=", "self", ".", "params", "[", "\"model_params\"", "]", "[", "\"transfer_learning\"", "]", "[", "model_name", "]", "\n", "# Loading pretrained weights file", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "try", ":", "\n", "# Load pretrained weights for model", "\n", "                        ", "self", ".", "models", "[", "model_name", "]", ".", "load_state_dict", "(", "checkpoint", "[", "\"{}_state_dict\"", ".", "format", "(", "state_dict_name", ")", "]", ",", "strict", "=", "strict", ")", "\n", "print", "(", "\"transfered weights for {}\"", ".", "format", "(", "state_dict_name", ")", ",", "flush", "=", "True", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                        ", "print", "(", "e", ",", "flush", "=", "True", ")", "\n", "# if error, try to load each parts of the model (useful if only few layers are different)", "\n", "for", "key", "in", "checkpoint", "[", "\"{}_state_dict\"", ".", "format", "(", "state_dict_name", ")", "]", ".", "keys", "(", ")", ":", "\n", "                            ", "try", ":", "\n", "                                ", "self", ".", "models", "[", "model_name", "]", ".", "load_state_dict", "(", "{", "key", ":", "checkpoint", "[", "\"{}_state_dict\"", ".", "format", "(", "state_dict_name", ")", "]", "[", "key", "]", "}", ",", "strict", "=", "False", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                                ", "print", "(", "e", ",", "flush", "=", "True", ")", "\n", "# Set parameters no trainable", "\n", "", "", "", "if", "not", "learnable", ":", "\n", "                        ", "self", ".", "set_model_learnable", "(", "self", ".", "models", "[", "model_name", "]", ",", "False", ")", "\n", "\n", "# make the model compatible with Distributed Data Parallel if used", "\n", "", "", "", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", ":", "\n", "                ", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "models", "[", "model_name", "]", "=", "DDP", "(", "self", ".", "models", "[", "model_name", "]", ",", "[", "self", ".", "ddp_config", "[", "\"rank\"", "]", "]", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.set_model_learnable": [[228, 232], ["list", "model.parameters"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "set_model_learnable", "(", "model", ",", "learnable", "=", "True", ")", ":", "\n", "        ", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "learnable", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.save_model": [[233, 260], ["os.listdir", "os.path.join", "generic_training_manager.GenericTrainingManager.add_save_info", "generic_training_manager.GenericTrainingManager.models.keys", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "generic_training_manager.GenericTrainingManager.optimizer.state_dict", "generic_training_manager.GenericTrainingManager.scaler.state_dict", "generic_training_manager.GenericTrainingManager.lr_scheduler.state_dict", "generic_training_manager.GenericTrainingManager.models[].state_dict", "to_del.append", "os.path.join", "os.remove"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.add_save_info"], ["", "", "def", "save_model", "(", "self", ",", "epoch", ",", "name", ",", "keep_weights", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Save model weights\n        \"\"\"", "\n", "if", "not", "self", ".", "is_master", ":", "\n", "            ", "return", "\n", "", "to_del", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "paths", "[", "\"checkpoints\"", "]", ")", ":", "\n", "            ", "if", "name", "in", "filename", ":", "\n", "                ", "to_del", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"checkpoints\"", "]", ",", "filename", ")", ")", "\n", "", "", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"checkpoints\"", "]", ",", "\"{}_{}.pt\"", ".", "format", "(", "name", ",", "epoch", ")", ")", "\n", "content", "=", "{", "\n", "'optimizer_state_dict'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "\"scaler_state_dict\"", ":", "self", ".", "scaler", ".", "state_dict", "(", ")", ",", "\n", "'best'", ":", "self", ".", "best", ",", "\n", "}", "\n", "if", "self", ".", "lr_scheduler", ":", "\n", "            ", "content", "[", "\"lr_scheduler_state_dict\"", "]", "=", "self", ".", "lr_scheduler", ".", "state_dict", "(", ")", "\n", "", "content", "=", "self", ".", "add_save_info", "(", "content", ")", "\n", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "            ", "content", "[", "\"{}_state_dict\"", ".", "format", "(", "model_name", ")", "]", "=", "self", ".", "models", "[", "model_name", "]", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "content", ",", "path", ")", "\n", "if", "not", "keep_weights", ":", "\n", "            ", "for", "path_to_del", "in", "to_del", ":", "\n", "                ", "if", "path_to_del", "!=", "path", ":", "\n", "                    ", "os", ".", "remove", "(", "path_to_del", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.reset_optimizer": [[261, 270], ["list", "generic_training_manager.GenericTrainingManager.models.keys", "list", "generic_training_manager.GenericTrainingManager.models[].parameters"], "methods", ["None"], ["", "", "", "", "def", "reset_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset optimizer learning rate\n        \"\"\"", "\n", "parameters", "=", "list", "(", ")", "\n", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "            ", "parameters", "+=", "list", "(", "self", ".", "models", "[", "model_name", "]", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "optimizer", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"optimizer\"", "]", "[", "\"class\"", "]", "(", "parameters", ",", "**", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"optimizer\"", "]", "[", "\"args\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.weights_init": [[272, 287], ["isinstance", "isinstance", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "weights_init", "(", "m", ")", ":", "\n", "        ", "\"\"\"\n        Weights initialization for model training from scratch\n        \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "Linear", ")", ":", "\n", "            ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "kaiming_uniform_", "(", "m", ".", "weight", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "InstanceNorm2d", ")", ":", "\n", "            ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "ones_", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.save_params": [[288, 325], ["os.path.join", "os.path.isfile", "copy.deepcopy", "generic_training_manager.GenericTrainingManager.save_params.class_to_str_dict"], "methods", ["None"], ["", "", "", "def", "save_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Output text file containing a summary of all hyperparameters chosen for the training\n        \"\"\"", "\n", "def", "compute_nb_params", "(", "module", ")", ":", "\n", "            ", "return", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "list", "(", "module", ".", "parameters", "(", ")", ")", "]", ")", "\n", "\n", "", "def", "class_to_str_dict", "(", "my_dict", ")", ":", "\n", "            ", "for", "key", "in", "my_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "callable", "(", "my_dict", "[", "key", "]", ")", ":", "\n", "                    ", "my_dict", "[", "key", "]", "=", "my_dict", "[", "key", "]", ".", "__name__", "\n", "", "elif", "isinstance", "(", "my_dict", "[", "key", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "my_dict", "[", "key", "]", "=", "my_dict", "[", "key", "]", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "my_dict", "[", "key", "]", ",", "dict", ")", ":", "\n", "                    ", "my_dict", "[", "key", "]", "=", "class_to_str_dict", "(", "my_dict", "[", "key", "]", ")", "\n", "", "", "return", "my_dict", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"results\"", "]", ",", "\"params\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "return", "\n", "", "params", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "params", "=", "class_to_str_dict", "(", "params", ")", "\n", "total_params", "=", "0", "\n", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "            ", "current_params", "=", "compute_nb_params", "(", "self", ".", "models", "[", "model_name", "]", ")", "\n", "params", "[", "\"model_params\"", "]", "[", "\"models\"", "]", "[", "model_name", "]", "=", "[", "params", "[", "\"model_params\"", "]", "[", "\"models\"", "]", "[", "model_name", "]", ",", "\"{:,}\"", ".", "format", "(", "current_params", ")", "]", "\n", "total_params", "+=", "current_params", "\n", "", "params", "[", "\"model_params\"", "]", "[", "\"total_params\"", "]", "=", "\"{:,}\"", ".", "format", "(", "total_params", ")", "\n", "\n", "params", "[", "\"hardware\"", "]", "=", "dict", "(", ")", "\n", "if", "self", ".", "device", "!=", "\"cpu\"", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"nb_gpu\"", "]", ")", ":", "\n", "                ", "params", "[", "\"hardware\"", "]", "[", "str", "(", "i", ")", "]", "=", "\"{} {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "get_device_name", "(", "i", ")", ",", "torch", ".", "cuda", ".", "get_device_properties", "(", "i", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "params", "[", "\"hardware\"", "]", "[", "\"0\"", "]", "=", "\"CPU\"", "\n", "", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "params", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.update_memory_consumption": [[326, 337], ["generic_training_manager.GenericTrainingManager.max_mem_usage_by_epoch.append", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.reset_max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "open", "round", "round", "round", "round", "round", "f.write", "os.path.join", "numpy.max", "numpy.min", "numpy.median", "numpy.mean"], "methods", ["None"], ["", "", "def", "update_memory_consumption", "(", "self", ")", ":", "\n", "        ", "self", ".", "max_mem_usage_by_epoch", ".", "append", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", ")", "\n", "torch", ".", "cuda", ".", "reset_max_memory_allocated", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"results\"", "]", ",", "\"memory.txt\"", ")", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "current", "=", "round", "(", "self", ".", "max_mem_usage_by_epoch", "[", "-", "1", "]", "/", "1e9", ",", "2", ")", "\n", "max", "=", "round", "(", "np", ".", "max", "(", "self", ".", "max_mem_usage_by_epoch", ")", "/", "1e9", ",", "2", ")", "\n", "min", "=", "round", "(", "np", ".", "min", "(", "self", ".", "max_mem_usage_by_epoch", ")", "/", "1e9", ",", "2", ")", "\n", "median", "=", "round", "(", "np", ".", "median", "(", "self", ".", "max_mem_usage_by_epoch", ")", "/", "1e9", ",", "2", ")", "\n", "mean", "=", "round", "(", "np", ".", "mean", "(", "self", ".", "max_mem_usage_by_epoch", ")", "/", "1e9", ",", "2", ")", "\n", "f", ".", "write", "(", "\"E{} - Current: {} Go - Max: {} Go - Min: {} Go - Mean: {} Go - Median: {} Go\\n\"", ".", "format", "(", "\n", "self", ".", "latest_epoch", ",", "current", ",", "max", ",", "min", ",", "mean", ",", "median", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_metrics": [[338, 364], ["list", "list", "list", "list"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "init_metrics", "(", "metrics_name", ")", ":", "\n", "        ", "\"\"\"\n        Initialization of the metrics specified in metrics_name\n        \"\"\"", "\n", "metrics", "=", "{", "\n", "\"nb_samples\"", ":", "0", ",", "\n", "\"weights\"", ":", "0", ",", "\n", "\"names\"", ":", "list", "(", ")", ",", "\n", "\"ids\"", ":", "list", "(", ")", ",", "\n", "}", "\n", "for", "metric_name", "in", "metrics_name", ":", "\n", "            ", "if", "metric_name", "==", "\"cer\"", ":", "\n", "                ", "metrics", "[", "\"nb_chars\"", "]", "=", "0", "\n", "metrics", "[", "metric_name", "]", "=", "list", "(", ")", "\n", "continue", "\n", "", "elif", "metric_name", "==", "\"wer\"", ":", "\n", "                ", "metrics", "[", "\"nb_words\"", "]", "=", "0", "\n", "", "elif", "metric_name", "in", "[", "\"pred\"", ",", "\"proba\"", ",", "\"cer_force_len\"", "]", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "list", "(", ")", "\n", "continue", "\n", "", "elif", "metric_name", "==", "\"diff_len\"", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "None", "\n", "continue", "\n", "", "metrics", "[", "metric_name", "]", "=", "0", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.update_metrics": [[365, 385], ["batch_metrics.keys", "numpy.concatenate", "len", "range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "update_metrics", "(", "metrics", ",", "batch_metrics", ")", ":", "\n", "        ", "\"\"\"\n        Add batch metrics to the metrics\n        \"\"\"", "\n", "for", "key", "in", "batch_metrics", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "in", "[", "\"diff_len\"", ",", "]", ":", "\n", "                ", "if", "metrics", "[", "key", "]", "is", "None", ":", "\n", "                    ", "metrics", "[", "key", "]", "=", "batch_metrics", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "metrics", "[", "key", "]", "=", "np", ".", "concatenate", "(", "[", "metrics", "[", "key", "]", ",", "batch_metrics", "[", "key", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "", "elif", "key", "in", "[", "\"pred\"", ",", "]", ":", "\n", "                ", "if", "len", "(", "metrics", "[", "key", "]", ")", "==", "0", ":", "\n", "                    ", "metrics", "[", "key", "]", "=", "batch_metrics", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "metrics", "[", "key", "]", ")", ")", ":", "\n", "                        ", "metrics", "[", "key", "]", "[", "i", "]", "+=", "batch_metrics", "[", "key", "]", "[", "i", "]", "\n", "", "", "", "else", ":", "\n", "                ", "metrics", "[", "key", "]", "+=", "batch_metrics", "[", "key", "]", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.get_display_values": [[386, 408], ["numpy.sum", "round", "round", "round", "numpy.round", "numpy.mean", "numpy.abs", "round", "round"], "methods", ["None"], ["", "def", "get_display_values", "(", "self", ",", "metrics", ",", "metrics_name", ",", "num_batch", ")", ":", "\n", "        ", "\"\"\"\n        format metrics values for shell display purposes\n        \"\"\"", "\n", "display_values", "=", "{", "}", "\n", "for", "metric_name", "in", "metrics_name", ":", "\n", "            ", "if", "metric_name", "in", "[", "\"cer\"", ",", "\"cer_force_len\"", ",", "]", ":", "\n", "                ", "edit", "=", "np", ".", "sum", "(", "metrics", "[", "metric_name", "]", ")", "\n", "display_values", "[", "metric_name", "]", "=", "round", "(", "edit", "/", "metrics", "[", "\"nb_chars\"", "]", ",", "4", ")", "\n", "", "elif", "metric_name", "==", "\"wer\"", ":", "\n", "                ", "display_values", "[", "metric_name", "]", "=", "round", "(", "metrics", "[", "metric_name", "]", "/", "metrics", "[", "\"nb_words\"", "]", ",", "4", ")", "\n", "", "elif", "metric_name", "in", "[", "\"f_measure\"", ",", "\"precision\"", ",", "\"recall\"", ",", "\"IoU\"", ",", "\"mAP\"", ",", "\"pp_f_measure\"", ",", "\"pp_precision\"", ",", "\"pp_recall\"", ",", "\"pp_IoU\"", ",", "\"pp_mAP\"", "]", ":", "\n", "                ", "display_values", "[", "metric_name", "]", "=", "round", "(", "metrics", "[", "metric_name", "]", "/", "metrics", "[", "\"weights\"", "]", ",", "4", ")", "\n", "", "elif", "metric_name", "in", "[", "\"diff_len\"", ",", "]", ":", "\n", "                ", "display_values", "[", "metric_name", "]", "=", "np", ".", "round", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "metrics", "[", "metric_name", "]", ")", ")", ",", "3", ")", "\n", "", "elif", "metric_name", "in", "[", "\"time\"", ",", "\"pred\"", ",", "\"probas\"", ",", "\"nb_max_len\"", ",", "\"worst_cer\"", ",", "]", ":", "\n", "                ", "continue", "\n", "", "elif", "metric_name", "in", "[", "\"loss\"", ",", "\"loss_ctc\"", ",", "\"loss_ce\"", ",", "\"loss_ce_end\"", ",", "\"loss_mse\"", "]", ":", "\n", "                ", "display_values", "[", "metric_name", "]", "=", "round", "(", "metrics", "[", "metric_name", "]", "/", "self", ".", "latest_batch", ",", "4", ")", "\n", "", "else", ":", "\n", "                ", "display_values", "[", "metric_name", "]", "=", "round", "(", "metrics", "[", "metric_name", "]", "/", "metrics", "[", "\"nb_samples\"", "]", ",", "4", ")", "\n", "", "", "return", "display_values", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.backward_loss": [[409, 411], ["generic_training_manager.GenericTrainingManager.scaler.scale().backward", "generic_training_manager.GenericTrainingManager.scaler.scale"], "methods", ["None"], ["", "def", "backward_loss", "(", "self", ",", "loss", ",", "retain_graph", "=", "False", ")", ":", "\n", "        ", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.step_optimizer": [[412, 415], ["generic_training_manager.GenericTrainingManager.scaler.step", "generic_training_manager.GenericTrainingManager.scaler.update"], "methods", ["None"], ["", "def", "step_optimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.train": [[416, 489], ["time.time.time", "range", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "generic_training_manager.GenericTrainingManager.save_params", "generic_training_manager.GenericTrainingManager.models.keys", "generic_training_manager.GenericTrainingManager.init_metrics", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "enumerate", "generic_training_manager.GenericTrainingManager.models[].train", "generic_training_manager.GenericTrainingManager.train_batch", "generic_training_manager.GenericTrainingManager.update_metrics", "generic_training_manager.GenericTrainingManager.get_display_values", "tqdm.tqdm.tqdm.set_postfix", "generic_training_manager.GenericTrainingManager.keys", "generic_training_manager.GenericTrainingManager.dataset.valid_loaders.keys", "generic_training_manager.GenericTrainingManager.save_model", "generic_training_manager.GenericTrainingManager.update_memory_consumption", "generic_training_manager.GenericTrainingManager.writer.flush", "generic_training_manager.GenericTrainingManager.merge_ddp_metrics", "generic_training_manager.GenericTrainingManager.lr_scheduler.step", "generic_training_manager.GenericTrainingManager.writer.add_scalar", "generic_training_manager.GenericTrainingManager.evaluate", "generic_training_manager.GenericTrainingManager.save_model", "time.time.time", "str", "generic_training_manager.GenericTrainingManager.keys", "generic_training_manager.GenericTrainingManager.writer.add_scalar", "generic_training_manager.GenericTrainingManager.save_model"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.save_params", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_metrics", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.train", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.train_batch", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.update_metrics", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.get_display_values", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.save_model", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.update_memory_consumption", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.merge_ddp_metrics", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.evaluate", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.save_model", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.save_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "# init tensorboard file and output param summary file", "\n", "        ", "if", "self", ".", "is_master", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "paths", "[", "\"results\"", "]", ")", "\n", "self", ".", "save_params", "(", ")", "\n", "# init variables", "\n", "", "self", ".", "begin_time", "=", "time", "(", ")", "\n", "focus_metric_name", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"focus_metric\"", "]", "\n", "nb_epochs", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"max_nb_epochs\"", "]", "\n", "interval_save_weights", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"interval_save_weights\"", "]", "\n", "metrics_name", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"train_metrics\"", "]", "\n", "display_values", "=", "None", "\n", "# perform epochs", "\n", "for", "num_epoch", "in", "range", "(", "self", ".", "latest_epoch", "+", "1", ",", "nb_epochs", ")", ":", "\n", "            ", "self", ".", "phase", "=", "\"train\"", "\n", "# Check maximum training time stop condition", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"max_training_time\"", "]", "and", "time", "(", ")", "-", "self", ".", "begin_time", ">", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"max_training_time\"", "]", ":", "\n", "                ", "break", "\n", "# set models trainable", "\n", "", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "models", "[", "model_name", "]", ".", "train", "(", ")", "\n", "", "self", ".", "latest_epoch", "=", "num_epoch", "\n", "# init epoch metrics values", "\n", "metrics", "=", "self", ".", "init_metrics", "(", "metrics_name", ")", "\n", "t", "=", "tqdm", "(", "self", ".", "dataset", ".", "train_loader", ")", "\n", "t", ".", "set_description", "(", "\"EPOCH {}/{}\"", ".", "format", "(", "num_epoch", ",", "nb_epochs", ")", ")", "\n", "# iterates over mini-batch data", "\n", "for", "ind_batch", ",", "batch_data", "in", "enumerate", "(", "t", ")", ":", "\n", "                ", "self", ".", "latest_batch", "=", "ind_batch", "+", "1", "\n", "self", ".", "total_batch", "+=", "1", "\n", "# train on batch data and compute metrics", "\n", "batch_metrics", "=", "self", ".", "train_batch", "(", "batch_data", ",", "metrics_name", ")", "\n", "batch_metrics", "[", "\"names\"", "]", "=", "batch_data", "[", "\"names\"", "]", "\n", "batch_metrics", "[", "\"ids\"", "]", "=", "batch_data", "[", "\"ids\"", "]", "\n", "# Merge metrics if Distributed Data Parallel is used", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", ":", "\n", "                    ", "batch_metrics", "=", "self", ".", "merge_ddp_metrics", "(", "batch_metrics", ")", "\n", "# Update learning rate via scheduler if one is used", "\n", "", "if", "self", ".", "lr_scheduler", "and", "ind_batch", "%", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"lr_scheduler\"", "]", "[", "\"step_interval\"", "]", "==", "0", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "# Add batch metrics values to epoch metrics values", "\n", "", "metrics", "=", "self", ".", "update_metrics", "(", "metrics", ",", "batch_metrics", ")", "\n", "display_values", "=", "self", ".", "get_display_values", "(", "metrics", ",", "metrics_name", ",", "ind_batch", ")", "\n", "t", ".", "set_postfix", "(", "values", "=", "str", "(", "display_values", ")", ")", "\n", "# log metrics in tensorboard file", "\n", "", "if", "self", ".", "is_master", ":", "\n", "                ", "for", "key", "in", "display_values", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'{}_{}'", ".", "format", "(", "self", ".", "params", "[", "\"dataset_params\"", "]", "[", "\"train\"", "]", "[", "\"name\"", "]", ",", "key", ")", ",", "display_values", "[", "key", "]", ",", "num_epoch", ")", "\n", "", "", "self", ".", "latest_train_metrics", "=", "display_values", "\n", "\n", "# evaluate and compute metrics for valid sets", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"eval_on_valid\"", "]", "and", "num_epoch", "%", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"eval_on_valid_interval\"", "]", "==", "0", ":", "\n", "                ", "for", "valid_set_name", "in", "self", ".", "dataset", ".", "valid_loaders", ".", "keys", "(", ")", ":", "\n", "# evaluate set and compute metrics", "\n", "                    ", "eval_values", "=", "self", ".", "evaluate", "(", "valid_set_name", ")", "\n", "self", ".", "latest_valid_metrics", "=", "eval_values", "\n", "# log valid metrics in tensorboard file", "\n", "if", "self", ".", "is_master", ":", "\n", "                        ", "for", "key", "in", "eval_values", ".", "keys", "(", ")", ":", "\n", "                            ", "self", ".", "writer", ".", "add_scalar", "(", "'{}_{}'", ".", "format", "(", "valid_set_name", ",", "key", ")", ",", "eval_values", "[", "key", "]", ",", "num_epoch", ")", "\n", "", "if", "valid_set_name", "==", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"set_name_focus_metric\"", "]", "and", "(", "self", ".", "best", "is", "None", "or", "(", "eval_values", "[", "focus_metric_name", "]", "<", "self", ".", "best", "and", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"expected_metric_value\"", "]", "==", "\"low\"", ")", "or", "(", "eval_values", "[", "focus_metric_name", "]", ">", "self", ".", "best", "and", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"expected_metric_value\"", "]", "==", "\"high\"", ")", ")", ":", "\n", "                            ", "self", ".", "save_model", "(", "epoch", "=", "num_epoch", ",", "name", "=", "\"best\"", ")", "\n", "self", ".", "best", "=", "eval_values", "[", "focus_metric_name", "]", "\n", "\n", "## save model weights", "\n", "", "", "", "", "if", "self", ".", "is_master", ":", "\n", "                ", "self", ".", "save_model", "(", "epoch", "=", "num_epoch", ",", "name", "=", "\"last\"", ")", "\n", "self", ".", "update_memory_consumption", "(", ")", "\n", "if", "interval_save_weights", "and", "num_epoch", "%", "interval_save_weights", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "epoch", "=", "num_epoch", ",", "name", "=", "\"weigths\"", ",", "keep_weights", "=", "True", ")", "\n", "", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.evaluate": [[490, 518], ["generic_training_manager.GenericTrainingManager.models.keys", "generic_training_manager.GenericTrainingManager.init_metrics", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "generic_training_manager.GenericTrainingManager.models[].eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "generic_training_manager.GenericTrainingManager.evaluate_batch", "generic_training_manager.GenericTrainingManager.update_metrics", "generic_training_manager.GenericTrainingManager.get_display_values", "tqdm.tqdm.tqdm.set_postfix", "generic_training_manager.GenericTrainingManager.merge_ddp_metrics", "str"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_metrics", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.evaluate_batch", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.update_metrics", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.get_display_values", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.merge_ddp_metrics"], ["", "", "", "def", "evaluate", "(", "self", ",", "set_name", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "phase", "=", "\"eval\"", "\n", "loader", "=", "self", ".", "dataset", ".", "valid_loaders", "[", "set_name", "]", "\n", "# Set models in eval mode", "\n", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "models", "[", "model_name", "]", ".", "eval", "(", ")", "\n", "", "metrics_name", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"eval_metrics\"", "]", "\n", "display_values", "=", "None", "\n", "# initialize epoch metrics", "\n", "metrics", "=", "self", ".", "init_metrics", "(", "metrics_name", ")", "\n", "t", "=", "tqdm", "(", "loader", ")", "\n", "t", ".", "set_description", "(", "\"Evaluation E{}\"", ".", "format", "(", "self", ".", "latest_epoch", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# iterate over batch data", "\n", "            ", "for", "ind_batch", ",", "batch_data", "in", "enumerate", "(", "t", ")", ":", "\n", "                ", "self", ".", "latest_batch", "=", "ind_batch", "+", "1", "\n", "# eval batch data and compute metrics", "\n", "batch_metrics", "=", "self", ".", "evaluate_batch", "(", "batch_data", ",", "metrics_name", ")", "\n", "batch_metrics", "[", "\"names\"", "]", "=", "batch_data", "[", "\"names\"", "]", "\n", "batch_metrics", "[", "\"ids\"", "]", "=", "batch_data", "[", "\"ids\"", "]", "\n", "# merge metrics values if Distributed Data Parallel is used", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", ":", "\n", "                    ", "batch_metrics", "=", "self", ".", "merge_ddp_metrics", "(", "batch_metrics", ")", "\n", "# add batch metrics to epoch metrics", "\n", "", "metrics", "=", "self", ".", "update_metrics", "(", "metrics", ",", "batch_metrics", ")", "\n", "display_values", "=", "self", ".", "get_display_values", "(", "metrics", ",", "metrics_name", ",", "ind_batch", ")", "\n", "t", ".", "set_postfix", "(", "values", "=", "str", "(", "display_values", ")", ")", "\n", "", "", "return", "display_values", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.predict": [[519, 566], ["metrics_name.copy.copy.copy", "generic_training_manager.GenericTrainingManager.dataset.generate_test_loader", "generic_training_manager.GenericTrainingManager.models.keys", "generic_training_manager.GenericTrainingManager.init_metrics", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "time.time.time", "generic_training_manager.GenericTrainingManager.models[].eval", "metrics_name.copy.copy.remove", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "time.time.time", "numpy.round", "numpy.round", "generic_training_manager.GenericTrainingManager.output", "generic_training_manager.GenericTrainingManager.evaluate_batch", "generic_training_manager.GenericTrainingManager.update_metrics", "generic_training_manager.GenericTrainingManager.get_display_values", "tqdm.tqdm.tqdm.set_postfix", "generic_training_manager.GenericTrainingManager.merge_ddp_metrics", "len", "generic_training_manager.GenericTrainingManager.keys", "os.path.join", "str", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.generate_test_loader", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.init_metrics", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.output", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.evaluate_batch", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.update_metrics", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.get_display_values", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.merge_ddp_metrics"], ["", "def", "predict", "(", "self", ",", "custom_name", ",", "sets_list", ",", "metrics_name", ",", "output", "=", "False", ")", ":", "\n", "        ", "self", ".", "phase", "=", "\"predict\"", "\n", "metrics_name", "=", "metrics_name", ".", "copy", "(", ")", "\n", "self", ".", "dataset", ".", "generate_test_loader", "(", "custom_name", ",", "sets_list", ")", "\n", "loader", "=", "self", ".", "dataset", ".", "test_loaders", "[", "custom_name", "]", "\n", "# Set models in eval mode", "\n", "for", "model_name", "in", "self", ".", "models", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "models", "[", "model_name", "]", ".", "eval", "(", ")", "\n", "", "pred_time_metric", "=", "False", "\n", "if", "\"time\"", "in", "metrics_name", ":", "\n", "            ", "metrics_name", ".", "remove", "(", "\"time\"", ")", "\n", "pred_time_metric", "=", "True", "\n", "# initialize epoch metrics", "\n", "", "metrics", "=", "self", ".", "init_metrics", "(", "metrics_name", ")", "\n", "t", "=", "tqdm", "(", "loader", ")", "\n", "t", ".", "set_description", "(", "\"Prediction\"", ")", "\n", "begin_time", "=", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "ind_batch", ",", "batch_data", "in", "enumerate", "(", "t", ")", ":", "\n", "# iterates over batch data", "\n", "                ", "self", ".", "latest_batch", "=", "ind_batch", "+", "1", "\n", "# eval batch data and compute metrics", "\n", "batch_metrics", "=", "self", ".", "evaluate_batch", "(", "batch_data", ",", "metrics_name", ")", "\n", "batch_metrics", "[", "\"names\"", "]", "=", "batch_data", "[", "\"names\"", "]", "\n", "batch_metrics", "[", "\"ids\"", "]", "=", "batch_data", "[", "\"ids\"", "]", "\n", "# merge batch metrics if Distributed Data Parallel is used", "\n", "if", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_ddp\"", "]", ":", "\n", "                    ", "batch_metrics", "=", "self", ".", "merge_ddp_metrics", "(", "batch_metrics", ")", "\n", "# add batch metrics to epoch metrics", "\n", "", "metrics", "=", "self", ".", "update_metrics", "(", "metrics", ",", "batch_metrics", ")", "\n", "display_values", "=", "self", ".", "get_display_values", "(", "metrics", ",", "metrics_name", ",", "ind_batch", ")", "\n", "t", ".", "set_postfix", "(", "values", "=", "str", "(", "display_values", ")", ")", "\n", "", "", "pred_time", "=", "time", "(", ")", "-", "begin_time", "\n", "# add time metric values if requested", "\n", "if", "pred_time_metric", ":", "\n", "            ", "metrics", "[", "\"total_time\"", "]", "=", "np", ".", "round", "(", "pred_time", ",", "3", ")", "\n", "metrics", "[", "\"sample_time\"", "]", "=", "np", ".", "round", "(", "pred_time", "/", "len", "(", "self", ".", "dataset", ".", "test_datasets", "[", "custom_name", "]", ")", ",", "4", ")", "\n", "# output metrics values if requested", "\n", "", "if", "output", ":", "\n", "            ", "for", "name", "in", "[", "\"probas\"", ",", "]", ":", "\n", "                ", "if", "name", "in", "metrics", ".", "keys", "(", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"results\"", "]", ",", "\"{}_{}_{}.txt\"", ".", "format", "(", "name", ",", "custom_name", ",", "self", ".", "latest_epoch", ")", ")", "\n", "info", "=", "\"\\n\"", ".", "join", "(", "metrics", "[", "name", "]", ")", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "info", ")", "\n", "", "del", "metrics", "[", "name", "]", "\n", "", "", "self", ".", "output", "(", "metrics", ",", "custom_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.launch_ddp": [[567, 580], ["torch.set_start_method", "torch.set_start_method", "torch.set_start_method", "str", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "methods", ["None"], ["", "", "def", "launch_ddp", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize Distributed Data Parallel system\n        \"\"\"", "\n", "mp", ".", "set_start_method", "(", "'fork'", ",", "force", "=", "True", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "self", ".", "ddp_config", "[", "\"address\"", "]", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "self", ".", "ddp_config", "[", "\"port\"", "]", ")", "\n", "dist", ".", "init_process_group", "(", "self", ".", "ddp_config", "[", "\"backend\"", "]", ",", "rank", "=", "self", ".", "ddp_config", "[", "\"rank\"", "]", ",", "world_size", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"nb_gpu\"", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "ddp_config", "[", "\"rank\"", "]", ")", "\n", "random", ".", "seed", "(", "self", ".", "manual_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "manual_seed", ")", "\n", "torch", ".", "manual_seed", "(", "self", ".", "manual_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "manual_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.merge_ddp_metrics": [[581, 594], ["metrics.keys", "generic_training_manager.GenericTrainingManager.sum_ddp_metric", "generic_training_manager.GenericTrainingManager.sum_ddp_metric", "generic_training_manager.GenericTrainingManager.cat_ddp_metric"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.sum_ddp_metric", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.sum_ddp_metric", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.cat_ddp_metric"], ["", "def", "merge_ddp_metrics", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"\n        Merge metrics when Distributed Data Parallel is used\n        \"\"\"", "\n", "for", "metric_name", "in", "metrics", ".", "keys", "(", ")", ":", "\n", "            ", "if", "metric_name", "in", "[", "\"wer\"", ",", "\"wer_force_len\"", ",", "\"nb_samples\"", ",", "\"nb_words\"", ",", "\"nb_chars\"", ",", "\"nb_max_len\"", ",", "\n", "\"f_measure\"", ",", "\"precision\"", ",", "\"recall\"", ",", "\"IoU\"", ",", "\"mAP\"", ",", "\"pp_f_measure\"", ",", "\"pp_precision\"", ",", "\"pp_recall\"", ",", "\"pp_IoU\"", ",", "\"pp_mAP\"", "]", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "self", ".", "sum_ddp_metric", "(", "metrics", "[", "metric_name", "]", ")", "\n", "", "elif", "metric_name", "in", "[", "\"loss\"", ",", "\"loss_ce\"", ",", "\"loss_ctc\"", ",", "\"loss_ce_end\"", "]", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "self", ".", "sum_ddp_metric", "(", "metrics", "[", "metric_name", "]", ",", "average", "=", "True", ")", "\n", "", "elif", "metric_name", "in", "[", "\"diff_len\"", ",", "\"cer\"", ",", "\"cer_force_len\"", ",", "\"ids\"", "]", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "self", ".", "cat_ddp_metric", "(", "metrics", "[", "metric_name", "]", ")", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.sum_ddp_metric": [[595, 604], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.true_divide", "torch.tensor().to.true_divide", "torch.tensor().to.true_divide", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["", "def", "sum_ddp_metric", "(", "self", ",", "metric", ",", "average", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Sum metrics for Distributed Data Parallel\n        \"\"\"", "\n", "sum", "=", "torch", ".", "tensor", "(", "metric", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "dist", ".", "all_reduce", "(", "sum", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "if", "average", ":", "\n", "            ", "sum", ".", "true_divide", "(", "dist", ".", "get_world_size", "(", ")", ")", "\n", "", "return", "sum", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.cat_ddp_metric": [[605, 613], ["torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.all_gather", "torch.all_gather", "torch.all_gather", "list", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.cat().flatten().cpu().numpy", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "range", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.cat().flatten().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.tensor().unsqueeze().to.size", "torch.tensor().unsqueeze().to.size", "torch.tensor().unsqueeze().to.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "cat_ddp_metric", "(", "self", ",", "metric", ")", ":", "\n", "        ", "\"\"\"\n        Concatenate metrics for Distributed Data Parallel\n        \"\"\"", "\n", "tensor", "=", "torch", ".", "tensor", "(", "metric", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "res", "=", "[", "torch", ".", "zeros", "(", "tensor", ".", "size", "(", ")", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "res", ",", "tensor", ")", "\n", "return", "list", "(", "torch", ".", "cat", "(", "res", ",", "dim", "=", "0", ")", ".", "flatten", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.cleanup": [[614, 617], ["torch.destroy_process_group", "torch.destroy_process_group", "torch.destroy_process_group"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cleanup", "(", ")", ":", "\n", "        ", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.train_batch": [[618, 620], ["None"], "methods", ["None"], ["", "def", "train_batch", "(", "self", ",", "batch_data", ",", "metric_names", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.evaluate_batch": [[621, 623], ["None"], "methods", ["None"], ["", "def", "evaluate_batch", "(", "self", ",", "batch_data", ",", "metric_names", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.output_pred": [[624, 626], ["None"], "methods", ["None"], ["", "def", "output_pred", "(", "self", ",", "pred", ",", "set_name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.add_checkpoint_info": [[627, 637], ["os.listdir", "generic_training_manager.GenericTrainingManager.save_model", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "kwargs.keys", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.save_model"], ["", "def", "add_checkpoint_info", "(", "self", ",", "load_mode", "=", "\"last\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "paths", "[", "\"checkpoints\"", "]", ")", ":", "\n", "            ", "if", "load_mode", "in", "filename", ":", "\n", "                ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"checkpoints\"", "]", ",", "filename", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "for", "key", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "                    ", "checkpoint", "[", "key", "]", "=", "kwargs", "[", "key", "]", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_path", ")", "\n", "", "return", "\n", "", "self", ".", "save_model", "(", "self", ".", "latest_epoch", ",", "\"last\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.output": [[638, 668], ["os.path.join", "open", "metrics.keys", "f.write", "numpy.sum", "round", "round", "round", "f.write", "f.write", "sorted", "sorted", "numpy.mean", "metric_name.split", "list", "numpy.abs", "zip"], "methods", ["None"], ["", "def", "output", "(", "self", ",", "metrics", ",", "set_name", ")", ":", "\n", "        ", "\"\"\"\n        Output metrics in text file\n        \"\"\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "\"results\"", "]", ",", "\"predict_{}_{}.txt\"", ".", "format", "(", "set_name", ",", "self", ".", "latest_epoch", ")", ")", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "metric_name", "in", "metrics", ".", "keys", "(", ")", ":", "\n", "                ", "if", "metric_name", "in", "[", "\"cer\"", ",", "\"cer_force_len\"", "]", ":", "\n", "                    ", "edit", "=", "np", ".", "sum", "(", "metrics", "[", "metric_name", "]", ")", "\n", "value", "=", "round", "(", "edit", "/", "metrics", "[", "\"nb_chars\"", "]", ",", "4", ")", "\n", "", "elif", "metric_name", "in", "[", "\"wer\"", ",", "]", ":", "\n", "                    ", "value", "=", "round", "(", "metrics", "[", "metric_name", "]", "/", "metrics", "[", "\"nb_words\"", "]", ",", "4", ")", "\n", "", "elif", "metric_name", "in", "[", "\"loss_ce\"", ",", "]", ":", "\n", "                    ", "value", "=", "round", "(", "metrics", "[", "metric_name", "]", "/", "metrics", "[", "\"nb_samples\"", "]", ",", "4", ")", "\n", "", "elif", "metric_name", "in", "[", "\"total_time\"", ",", "\"sample_time\"", ",", "\"total_output_time\"", ",", "\"sample_output_time\"", "]", ":", "\n", "                    ", "value", "=", "metrics", "[", "metric_name", "]", "\n", "", "elif", "metric_name", "in", "[", "\"nb_samples\"", ",", "\"nb_words\"", ",", "\"nb_chars\"", ",", "\"nb_max_len\"", "]", ":", "\n", "                    ", "value", "=", "metrics", "[", "metric_name", "]", "\n", "", "elif", "metric_name", "in", "[", "\"diff_len\"", ",", "]", ":", "\n", "                    ", "f", ".", "write", "(", "\"{}: {}\\n\"", ".", "format", "(", "metric_name", ",", "sorted", "(", "list", "(", "metrics", "[", "metric_name", "]", ")", ")", ")", ")", "\n", "f", ".", "write", "(", "\"{}-mean_abs: {}\\n\"", ".", "format", "(", "metric_name", ",", "np", ".", "mean", "(", "np", ".", "abs", "(", "metrics", "[", "metric_name", "]", ")", ")", ")", ")", "\n", "continue", "\n", "", "elif", "metric_name", "in", "[", "\"worst_cer\"", ",", "]", ":", "\n", "                    ", "m", "=", "metric_name", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "\n", "value", "=", "[", "[", "c", ",", "id", "]", "for", "c", ",", "id", "in", "zip", "(", "metrics", "[", "m", "]", ",", "metrics", "[", "\"ids\"", "]", ")", "]", "\n", "value", "=", "sorted", "(", "value", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "value", "=", "value", "[", ":", "50", "]", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "f", ".", "write", "(", "\"{}: {}\\n\"", ".", "format", "(", "metric_name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_save_info": [[669, 675], ["info_dict.keys"], "methods", ["None"], ["", "", "", "def", "load_save_info", "(", "self", ",", "info_dict", ")", ":", "\n", "        ", "\"\"\"\n        Load curriculum info from saved model info\n        \"\"\"", "\n", "if", "\"curriculum_config\"", "in", "info_dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "dataset", ".", "train_dataset", ".", "curriculum_config", "=", "info_dict", "[", "\"curriculum_config\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.add_save_info": [[676, 682], ["None"], "methods", ["None"], ["", "", "def", "add_save_info", "(", "self", ",", "info_dict", ")", ":", "\n", "        ", "\"\"\"\n        Add curriculum info to model info to be saved\n        \"\"\"", "\n", "info_dict", "[", "\"curriculum_config\"", "]", "=", "self", ".", "dataset", ".", "train_dataset", ".", "curriculum_config", "\n", "return", "info_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.__init__": [[53, 94], ["dict", "dict", "dict", "dict", "dict", "dict", "generic_dataset_manager.DatasetManager.get_merged_charsets", "generic_dataset_manager.DatasetManager.load_datasets", "generic_dataset_manager.DatasetManager.update_charset", "generic_dataset_manager.OCRCollateFunction", "generic_dataset_manager.DatasetManager.load_ddp_samplers", "generic_dataset_manager.DatasetManager.load_dataloaders", "[].lower", "len", "len", "len", "len", "len", "params[].keys"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.get_merged_charsets", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.load_datasets", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.update_charset", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.load_ddp_samplers", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.load_dataloaders"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "self", ".", "img_padding_value", "=", "params", "[", "\"config\"", "]", "[", "\"padding_value\"", "]", "\n", "self", ".", "dataset_class", "=", "params", "[", "\"dataset_class\"", "]", "\n", "self", ".", "tokens", "=", "{", "\n", "\"pad\"", ":", "params", "[", "\"config\"", "]", "[", "\"padding_token\"", "]", ",", "\n", "}", "\n", "\n", "self", ".", "train_dataset", "=", "None", "\n", "self", ".", "valid_datasets", "=", "dict", "(", ")", "\n", "self", ".", "test_datasets", "=", "dict", "(", ")", "\n", "\n", "self", ".", "train_loader", "=", "None", "\n", "self", ".", "valid_loaders", "=", "dict", "(", ")", "\n", "self", ".", "test_loaders", "=", "dict", "(", ")", "\n", "\n", "self", ".", "train_sampler", "=", "None", "\n", "self", ".", "valid_samplers", "=", "dict", "(", ")", "\n", "self", ".", "test_samplers", "=", "dict", "(", ")", "\n", "\n", "self", ".", "charset", "=", "self", ".", "get_merged_charsets", "(", ")", "\n", "self", ".", "load_datasets", "(", ")", "\n", "\n", "# token configuration", "\n", "if", "params", "[", "\"config\"", "]", "[", "\"charset_mode\"", "]", ".", "lower", "(", ")", "==", "\"ctc\"", ":", "\n", "            ", "self", ".", "tokens", "[", "\"blank\"", "]", "=", "len", "(", "self", ".", "charset", ")", "\n", "self", ".", "tokens", "[", "\"pad\"", "]", "=", "self", ".", "tokens", "[", "\"pad\"", "]", "if", "self", ".", "tokens", "[", "\"pad\"", "]", "else", "len", "(", "self", ".", "charset", ")", "+", "1", "\n", "params", "[", "\"config\"", "]", "[", "\"padding_token\"", "]", "=", "self", ".", "tokens", "[", "\"pad\"", "]", "\n", "", "elif", "params", "[", "\"config\"", "]", "[", "\"charset_mode\"", "]", "==", "\"attention\"", ":", "\n", "            ", "self", ".", "tokens", "[", "\"end\"", "]", "=", "len", "(", "self", ".", "charset", ")", "\n", "self", ".", "tokens", "[", "\"start\"", "]", "=", "len", "(", "self", ".", "charset", ")", "+", "1", "\n", "self", ".", "tokens", "[", "\"pad\"", "]", "=", "self", ".", "tokens", "[", "\"pad\"", "]", "if", "self", ".", "tokens", "[", "\"pad\"", "]", "else", "len", "(", "self", ".", "charset", ")", "+", "2", "\n", "if", "\"pad_label_with_end_token\"", "in", "params", "[", "\"config\"", "]", ".", "keys", "(", ")", "and", "params", "[", "\"config\"", "]", "[", "\"pad_label_with_end_token\"", "]", ":", "\n", "                ", "params", "[", "\"config\"", "]", "[", "\"padding_token\"", "]", "=", "self", ".", "tokens", "[", "\"end\"", "]", "\n", "", "else", ":", "\n", "                ", "params", "[", "\"config\"", "]", "[", "\"padding_token\"", "]", "=", "self", ".", "tokens", "[", "\"pad\"", "]", "\n", "", "", "self", ".", "update_charset", "(", ")", "\n", "self", ".", "my_collate_function", "=", "OCRCollateFunction", "(", "self", ".", "params", "[", "\"config\"", "]", ")", "\n", "\n", "self", ".", "load_ddp_samplers", "(", ")", "\n", "self", ".", "load_dataloaders", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.get_merged_charsets": [[96, 110], ["set", "datasets.keys", "sorted", "charset.union.union.remove", "charset.union.union.remove", "charset.union.union.remove", "list", "open", "pickle.load", "charset.union.union.union", "os.path.join", "set"], "methods", ["None"], ["", "def", "get_merged_charsets", "(", "self", ")", ":", "\n", "        ", "datasets", "=", "self", ".", "params", "[", "\"datasets\"", "]", "\n", "charset", "=", "set", "(", ")", "\n", "for", "key", "in", "datasets", ".", "keys", "(", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "datasets", "[", "key", "]", ",", "\"labels.pkl\"", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "charset", "=", "charset", ".", "union", "(", "set", "(", "info", "[", "\"charset\"", "]", ")", ")", "\n", "", "", "if", "\"\\n\"", "in", "charset", ":", "\n", "            ", "charset", ".", "remove", "(", "\"\\n\"", ")", "\n", "", "if", "\"\u00ac\"", "in", "charset", ":", "\n", "            ", "charset", ".", "remove", "(", "\"\u00ac\"", ")", "\n", "", "if", "\"\"", "in", "charset", ":", "\n", "            ", "charset", ".", "remove", "(", "\"\"", ")", "\n", "", "return", "sorted", "(", "list", "(", "charset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.load_datasets": [[111, 117], ["generic_dataset_manager.DatasetManager.dataset_class", "generic_dataset_manager.DatasetManager.train_dataset.compute_std_mean", "generic_dataset_manager.DatasetManager.params[].keys", "generic_dataset_manager.DatasetManager.get_paths_and_sets", "generic_dataset_manager.DatasetManager.dataset_class", "generic_dataset_manager.DatasetManager.get_paths_and_sets"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.compute_std_mean", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.get_paths_and_sets", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.get_paths_and_sets"], ["", "def", "load_datasets", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_dataset", "=", "self", ".", "dataset_class", "(", "self", ".", "params", ",", "\"train\"", ",", "self", ".", "params", "[", "\"train\"", "]", "[", "\"name\"", "]", ",", "self", ".", "get_paths_and_sets", "(", "\"train\"", ",", "self", ".", "params", "[", "\"train\"", "]", "[", "\"datasets\"", "]", ")", ")", "\n", "self", ".", "params", "[", "\"config\"", "]", "[", "\"mean\"", "]", ",", "self", ".", "params", "[", "\"config\"", "]", "[", "\"std\"", "]", "=", "self", ".", "train_dataset", ".", "compute_std_mean", "(", ")", "\n", "\n", "for", "custom_name", "in", "self", ".", "params", "[", "\"valid\"", "]", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "valid_datasets", "[", "custom_name", "]", "=", "self", ".", "dataset_class", "(", "self", ".", "params", ",", "\"valid\"", ",", "custom_name", ",", "self", ".", "get_paths_and_sets", "(", "\"valid\"", ",", "self", ".", "params", "[", "\"valid\"", "]", "[", "custom_name", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.update_charset": [[118, 126], ["generic_dataset_manager.DatasetManager.train_dataset.convert_labels", "generic_dataset_manager.DatasetManager.valid_datasets[].convert_labels"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.convert_labels", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.convert_labels"], ["", "", "def", "update_charset", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_dataset", ".", "charset", "=", "self", ".", "charset", "\n", "self", ".", "train_dataset", ".", "tokens", "=", "self", ".", "tokens", "\n", "self", ".", "train_dataset", ".", "convert_labels", "(", ")", "\n", "for", "key", "in", "self", ".", "valid_datasets", ":", "\n", "            ", "self", ".", "valid_datasets", "[", "key", "]", ".", "charset", "=", "self", ".", "charset", "\n", "self", ".", "valid_datasets", "[", "key", "]", ".", "tokens", "=", "self", ".", "tokens", "\n", "self", ".", "valid_datasets", "[", "key", "]", ".", "convert_labels", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.load_ddp_samplers": [[127, 135], ["torch.utils.data.distributed.DistributedSampler", "generic_dataset_manager.DatasetManager.valid_datasets.keys", "generic_dataset_manager.DatasetManager.valid_datasets.keys", "torch.utils.data.distributed.DistributedSampler"], "methods", ["None"], ["", "", "def", "load_ddp_samplers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "params", "[", "\"use_ddp\"", "]", ":", "\n", "            ", "self", ".", "train_sampler", "=", "DistributedSampler", "(", "self", ".", "train_dataset", ",", "num_replicas", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "rank", "=", "self", ".", "params", "[", "\"ddp_rank\"", "]", ",", "shuffle", "=", "True", ")", "\n", "for", "custom_name", "in", "self", ".", "valid_datasets", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "valid_samplers", "[", "custom_name", "]", "=", "DistributedSampler", "(", "self", ".", "valid_datasets", "[", "custom_name", "]", ",", "num_replicas", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "rank", "=", "self", ".", "params", "[", "\"ddp_rank\"", "]", ",", "shuffle", "=", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "custom_name", "in", "self", ".", "valid_datasets", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "valid_samplers", "[", "custom_name", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.load_dataloaders": [[136, 148], ["torch.utils.data.DataLoader", "generic_dataset_manager.DatasetManager.valid_datasets.keys", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "", "", "def", "load_dataloaders", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_loader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "params", "[", "\"batch_size\"", "]", ",", "\n", "shuffle", "=", "True", "if", "not", "self", ".", "train_sampler", "else", "False", ",", "\n", "sampler", "=", "self", ".", "train_sampler", ",", "\n", "num_workers", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ",", "\n", "collate_fn", "=", "self", ".", "my_collate_function", ")", "\n", "\n", "for", "key", "in", "self", ".", "valid_datasets", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "valid_loaders", "[", "key", "]", "=", "DataLoader", "(", "self", ".", "valid_datasets", "[", "key", "]", ",", "batch_size", "=", "self", ".", "params", "[", "\"batch_size\"", "]", ",", "\n", "sampler", "=", "self", ".", "valid_samplers", "[", "key", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "collate_fn", "=", "self", ".", "my_collate_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.generate_test_loader": [[149, 171], ["list", "generic_dataset_manager.DatasetManager.dataset_class", "torch.utils.data.DataLoader", "generic_dataset_manager.DatasetManager.test_loaders.keys", "list.append", "generic_dataset_manager.DatasetManager.test_datasets[].convert_labels", "torch.utils.data.distributed.DistributedSampler"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.convert_labels"], ["", "", "def", "generate_test_loader", "(", "self", ",", "custom_name", ",", "sets_list", ")", ":", "\n", "        ", "if", "custom_name", "in", "self", ".", "test_loaders", ".", "keys", "(", ")", ":", "\n", "            ", "return", "\n", "", "paths_and_sets", "=", "list", "(", ")", "\n", "for", "set_info", "in", "sets_list", ":", "\n", "            ", "paths_and_sets", ".", "append", "(", "{", "\n", "\"path\"", ":", "self", ".", "params", "[", "\"datasets\"", "]", "[", "set_info", "[", "0", "]", "]", ",", "\n", "\"set_name\"", ":", "set_info", "[", "1", "]", "\n", "}", ")", "\n", "", "self", ".", "test_datasets", "[", "custom_name", "]", "=", "self", ".", "dataset_class", "(", "self", ".", "params", ",", "\"test\"", ",", "custom_name", ",", "paths_and_sets", ")", "\n", "if", "self", ".", "dataset_class", "is", "OCRDataset", ":", "\n", "            ", "self", ".", "test_datasets", "[", "custom_name", "]", ".", "charset", "=", "self", ".", "charset", "\n", "self", ".", "test_datasets", "[", "custom_name", "]", ".", "tokens", "=", "self", ".", "tokens", "\n", "self", ".", "test_datasets", "[", "custom_name", "]", ".", "convert_labels", "(", ")", "\n", "", "self", ".", "test_samplers", "[", "custom_name", "]", "=", "DistributedSampler", "(", "self", ".", "test_datasets", "[", "custom_name", "]", ",", "\n", "num_replicas", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "\n", "rank", "=", "self", ".", "params", "[", "\"ddp_rank\"", "]", ",", "shuffle", "=", "False", ")", "if", "self", ".", "params", "[", "\"use_ddp\"", "]", "else", "None", "\n", "self", ".", "test_loaders", "[", "custom_name", "]", "=", "DataLoader", "(", "self", ".", "test_datasets", "[", "custom_name", "]", ",", "batch_size", "=", "self", ".", "params", "[", "\"batch_size\"", "]", ",", "\n", "sampler", "=", "self", ".", "test_samplers", "[", "custom_name", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "collate_fn", "=", "self", ".", "my_collate_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.generate_test_loader_from_segmentation": [[172, 188], ["generic_dataset_manager.DatasetManager.dataset_class", "torch.utils.data.DataLoader", "generic_dataset_manager.DatasetManager.test_loaders.keys", "generic_dataset_manager.DatasetManager.test_datasets[].convert_labels", "torch.utils.data.distributed.DistributedSampler"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.convert_labels"], ["", "def", "generate_test_loader_from_segmentation", "(", "self", ",", "custom_name", ",", "path", ")", ":", "\n", "        ", "if", "custom_name", "in", "self", ".", "test_loaders", ".", "keys", "(", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "test_datasets", "[", "custom_name", "]", "=", "self", ".", "dataset_class", "(", "self", ".", "params", ",", "\"test\"", ",", "custom_name", ",", "path", ",", "from_segmentation", "=", "True", ")", "\n", "if", "self", ".", "dataset_class", "is", "OCRDataset", ":", "\n", "            ", "self", ".", "test_datasets", "[", "custom_name", "]", ".", "charset", "=", "self", ".", "charset", "\n", "self", ".", "test_datasets", "[", "custom_name", "]", ".", "tokens", "=", "self", ".", "tokens", "\n", "self", ".", "test_datasets", "[", "custom_name", "]", ".", "convert_labels", "(", ")", "\n", "", "self", ".", "test_samplers", "[", "custom_name", "]", "=", "DistributedSampler", "(", "self", ".", "test_datasets", "[", "custom_name", "]", ",", "\n", "num_replicas", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "\n", "rank", "=", "self", ".", "params", "[", "\"ddp_rank\"", "]", ",", "shuffle", "=", "False", ")", "if", "self", ".", "params", "[", "\"use_ddp\"", "]", "else", "None", "\n", "self", ".", "test_loaders", "[", "custom_name", "]", "=", "DataLoader", "(", "self", ".", "test_datasets", "[", "custom_name", "]", ",", "batch_size", "=", "self", ".", "params", "[", "\"batch_size\"", "]", ",", "\n", "sampler", "=", "self", ".", "test_samplers", "[", "custom_name", "]", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "params", "[", "\"num_gpu\"", "]", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "collate_fn", "=", "self", ".", "my_collate_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.DatasetManager.get_paths_and_sets": [[189, 198], ["list", "list.append"], "methods", ["None"], ["", "def", "get_paths_and_sets", "(", "self", ",", "set_name", ",", "dataset_names", ")", ":", "\n", "        ", "paths_and_sets", "=", "list", "(", ")", "\n", "for", "dataset_name", "in", "dataset_names", ":", "\n", "            ", "path", "=", "self", ".", "params", "[", "\"datasets\"", "]", "[", "dataset_name", "]", "\n", "paths_and_sets", ".", "append", "(", "{", "\n", "\"path\"", ":", "path", ",", "\n", "\"set_name\"", ":", "set_name", "\n", "}", ")", "\n", "", "return", "paths_and_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.__init__": [[202, 223], ["generic_dataset_manager.GenericDataset.apply_preprocessing", "generic_dataset_manager.GenericDataset.load_segmented_samples", "generic_dataset_manager.GenericDataset.load_samples", "params[].keys", "params[].keys", "generic_dataset_manager.GenericDataset.compute_std_mean"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.apply_preprocessing", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.load_segmented_samples", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.load_samples", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.compute_std_mean"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "set_name", ",", "custom_name", ",", "paths_and_sets", ",", "from_segmentation", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "custom_name", "\n", "self", ".", "set_name", "=", "set_name", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "mean", "=", "params", "[", "\"config\"", "]", "[", "\"mean\"", "]", "if", "\"mean\"", "in", "params", "[", "\"config\"", "]", ".", "keys", "(", ")", "else", "None", "\n", "self", ".", "std", "=", "params", "[", "\"config\"", "]", "[", "\"std\"", "]", "if", "\"std\"", "in", "params", "[", "\"config\"", "]", ".", "keys", "(", ")", "else", "None", "\n", "if", "from_segmentation", ":", "\n", "            ", "self", ".", "samples", "=", "self", ".", "load_segmented_samples", "(", "paths_and_sets", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "samples", "=", "self", ".", "load_samples", "(", "paths_and_sets", ")", "\n", "\n", "", "self", ".", "apply_preprocessing", "(", "params", "[", "\"config\"", "]", "[", "\"preprocessings\"", "]", ")", "\n", "\n", "self", ".", "padding_value", "=", "params", "[", "\"config\"", "]", "[", "\"padding_value\"", "]", "\n", "if", "self", ".", "padding_value", "==", "\"mean\"", ":", "\n", "            ", "if", "self", ".", "mean", "is", "None", ":", "\n", "                ", "_", ",", "_", "=", "self", ".", "compute_std_mean", "(", ")", "\n", "", "self", ".", "padding_value", "=", "self", ".", "mean", "\n", "self", ".", "params", "[", "\"config\"", "]", "[", "\"padding_value\"", "]", "=", "self", ".", "padding_value", "\n", "\n", "", "self", ".", "curriculum_config", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.__len__": [[224, 226], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.load_samples": [[227, 259], ["list", "open", "pickle.load", "gt.keys", "os.path.join", "os.path.join", "list.append", "os.path.basename", "type", "PIL.Image.open", "numpy.array", "os.path.join", "len", "numpy.expand_dims", "label.replace", "type", "gt[].keys"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_samples", "(", "paths_and_sets", ")", ":", "\n", "        ", "\"\"\"\n        Load images and labels\n        \"\"\"", "\n", "samples", "=", "list", "(", ")", "\n", "for", "path_and_set", "in", "paths_and_sets", ":", "\n", "            ", "path", "=", "path_and_set", "[", "\"path\"", "]", "\n", "set_name", "=", "path_and_set", "[", "\"set_name\"", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"labels.pkl\"", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "gt", "=", "info", "[", "\"ground_truth\"", "]", "[", "set_name", "]", "\n", "for", "filename", "in", "gt", ".", "keys", "(", ")", ":", "\n", "                    ", "name", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ",", "set_name", ",", "filename", ")", "\n", "if", "type", "(", "gt", "[", "filename", "]", ")", "is", "str", ":", "\n", "                        ", "label", "=", "gt", "[", "filename", "]", "\n", "", "else", ":", "\n", "                        ", "label", "=", "gt", "[", "filename", "]", "[", "\"text\"", "]", "\n", "", "with", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "set_name", ",", "filename", ")", ")", "as", "pil_img", ":", "\n", "                        ", "img", "=", "np", ".", "array", "(", "pil_img", ")", "\n", "## grayscale images", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "                            ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "", "samples", ".", "append", "(", "{", "\n", "\"name\"", ":", "name", ",", "\n", "\"label\"", ":", "label", ".", "replace", "(", "\"\u00ac\"", ",", "\"\"", ")", ",", "\n", "\"img\"", ":", "img", ",", "\n", "\"unchanged_label\"", ":", "label", ",", "\n", "}", ")", "\n", "if", "type", "(", "gt", "[", "filename", "]", ")", "is", "dict", "and", "\"lines\"", "in", "gt", "[", "filename", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "samples", "[", "-", "1", "]", "[", "\"raw_line_seg_label\"", "]", "=", "gt", "[", "filename", "]", "[", "\"lines\"", "]", "\n", "", "", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.load_segmented_samples": [[260, 281], ["list", "os.listdir", "os.listdir", "os.path.join", "os.path.isdir", "list.append", "PIL.Image.open", "numpy.array", "os.path.join", "len", "numpy.expand_dims", "filename.split"], "methods", ["None"], ["", "def", "load_segmented_samples", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Load images and labels\n        \"\"\"", "\n", "samples", "=", "list", "(", ")", "\n", "img_folder_path", "=", "None", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "filepath", ")", ":", "\n", "                ", "img_folder_path", "=", "filepath", "\n", "", "", "for", "filename", "in", "os", ".", "listdir", "(", "img_folder_path", ")", ":", "\n", "            ", "with", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "img_folder_path", ",", "filename", ")", ")", "as", "pil_img", ":", "\n", "                ", "img", "=", "np", ".", "array", "(", "pil_img", ")", "\n", "# grayscale images", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "                    ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "\n", "", "", "samples", ".", "append", "(", "{", "\n", "\"name\"", ":", "filename", ".", "split", "(", "\".\"", ")", "[", "0", "]", ",", "\n", "\"img\"", ":", "img", ",", "\n", "}", ")", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.apply_preprocessing": [[282, 328], ["range", "len", "cv2.resize", "min", "min", "cv2.resize", "len", "numpy.expand_dims", "numpy.expand_dims().astype", "numpy.concatenate", "min", "int", "int", "len", "numpy.expand_dims", "int", "int", "numpy.ceil", "numpy.ceil", "numpy.expand_dims"], "methods", ["None"], ["", "def", "apply_preprocessing", "(", "self", ",", "preprocessings", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ":", "\n", "            ", "self", ".", "samples", "[", "i", "]", "[", "\"resize_ratio\"", "]", "=", "[", "1", ",", "1", "]", "\n", "for", "preprocessing", "in", "preprocessings", ":", "\n", "\n", "                ", "if", "preprocessing", "[", "\"type\"", "]", "==", "\"dpi\"", ":", "\n", "                    ", "ratio", "=", "preprocessing", "[", "\"target\"", "]", "/", "preprocessing", "[", "\"source\"", "]", "\n", "temp_img", "=", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "\n", "h", ",", "w", ",", "c", "=", "temp_img", ".", "shape", "\n", "temp_img", "=", "cv2", ".", "resize", "(", "temp_img", ",", "(", "int", "(", "np", ".", "ceil", "(", "w", "*", "ratio", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "h", "*", "ratio", ")", ")", ")", ")", "\n", "if", "len", "(", "temp_img", ".", "shape", ")", "==", "2", ":", "\n", "                        ", "temp_img", "=", "np", ".", "expand_dims", "(", "temp_img", ",", "axis", "=", "2", ")", "\n", "", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "=", "temp_img", "\n", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"resize_ratio\"", "]", "=", "[", "ratio", ",", "ratio", "]", "\n", "\n", "", "if", "preprocessing", "[", "\"type\"", "]", "==", "\"to_grayscaled\"", ":", "\n", "                    ", "temp_img", "=", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "\n", "h", ",", "w", ",", "c", "=", "temp_img", ".", "shape", "\n", "if", "c", "==", "3", ":", "\n", "                        ", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "=", "np", ".", "expand_dims", "(", "0.2125", "*", "temp_img", "[", ":", ",", ":", ",", "0", "]", "+", "0.7154", "*", "temp_img", "[", ":", ",", ":", ",", "1", "]", "+", "0.0721", "*", "temp_img", "[", ":", ",", ":", ",", "2", "]", ",", "axis", "=", "2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "", "if", "preprocessing", "[", "\"type\"", "]", "==", "\"to_RGB\"", ":", "\n", "                    ", "temp_img", "=", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "\n", "h", ",", "w", ",", "c", "=", "temp_img", ".", "shape", "\n", "if", "c", "==", "1", ":", "\n", "                        ", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "=", "np", ".", "concatenate", "(", "[", "temp_img", ",", "temp_img", ",", "temp_img", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "if", "preprocessing", "[", "\"type\"", "]", "==", "\"resize\"", ":", "\n", "                    ", "pad_val", ",", "keep_ratio", "=", "preprocessing", "[", "\"padding_value\"", "]", ",", "preprocessing", "[", "\"keep_ratio\"", "]", "\n", "max_h", ",", "max_w", "=", "preprocessing", "[", "\"max_height\"", "]", ",", "preprocessing", "[", "\"max_width\"", "]", "\n", "temp_img", "=", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "\n", "h", ",", "w", ",", "c", "=", "temp_img", ".", "shape", "\n", "\n", "ratio_h", "=", "max_h", "/", "h", "if", "max_h", "else", "1", "\n", "ratio_w", "=", "max_w", "/", "w", "if", "max_w", "else", "1", "\n", "if", "keep_ratio", ":", "\n", "                        ", "ratio_h", "=", "ratio_w", "=", "min", "(", "ratio_w", ",", "ratio_h", ")", "\n", "", "new_h", "=", "min", "(", "max_h", ",", "int", "(", "h", "*", "ratio_h", ")", ")", "\n", "new_w", "=", "min", "(", "max_w", ",", "int", "(", "w", "*", "ratio_w", ")", ")", "\n", "temp_img", "=", "cv2", ".", "resize", "(", "temp_img", ",", "(", "new_w", ",", "new_h", ")", ")", "\n", "if", "len", "(", "temp_img", ".", "shape", ")", "==", "2", ":", "\n", "                        ", "temp_img", "=", "np", ".", "expand_dims", "(", "temp_img", ",", "axis", "=", "2", ")", "\n", "\n", "", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "=", "temp_img", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"resize_ratio\"", "]", "=", "[", "ratio_h", ",", "ratio_w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.compute_std_mean": [[329, 348], ["numpy.zeros", "range", "numpy.zeros", "range", "numpy.sqrt", "len", "numpy.sum", "numpy.prod", "len", "numpy.sum", "range"], "methods", ["None"], ["", "", "", "", "def", "compute_std_mean", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mean", "is", "not", "None", "and", "self", ".", "std", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "mean", ",", "self", ".", "std", "\n", "", "_", ",", "_", ",", "c", "=", "self", ".", "samples", "[", "0", "]", "[", "\"img\"", "]", ".", "shape", "\n", "sum", "=", "np", ".", "zeros", "(", "(", "c", ",", ")", ")", "\n", "nb_pixels", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ":", "\n", "            ", "img", "=", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "\n", "sum", "+=", "np", ".", "sum", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "nb_pixels", "+=", "np", ".", "prod", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "", "mean", "=", "sum", "/", "nb_pixels", "\n", "diff", "=", "np", ".", "zeros", "(", "(", "c", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ":", "\n", "            ", "img", "=", "self", ".", "samples", "[", "i", "]", "[", "\"img\"", "]", "\n", "diff", "+=", "[", "np", ".", "sum", "(", "(", "img", "[", ":", ",", ":", ",", "k", "]", "-", "mean", "[", "k", "]", ")", "**", "2", ")", "for", "k", "in", "range", "(", "c", ")", "]", "\n", "", "std", "=", "np", ".", "sqrt", "(", "diff", "/", "nb_pixels", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.GenericDataset.apply_data_augmentation": [[349, 355], ["zip", "list", "generic_dataset_manager.GenericDataset.apply_data_augmentation"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.apply_data_augmentation"], ["", "def", "apply_data_augmentation", "(", "self", ",", "img", ")", ":", "\n", "        ", "augs", "=", "[", "self", ".", "params", "[", "\"config\"", "]", "[", "key", "]", "if", "key", "in", "self", ".", "params", "[", "\"config\"", "]", ".", "keys", "(", ")", "else", "None", "for", "key", "in", "[", "\"augmentation\"", ",", "\"valid_augmentation\"", ",", "\"eval_augmentation\"", "]", "]", "\n", "for", "aug", ",", "set_name", "in", "zip", "(", "augs", ",", "[", "\"train\"", ",", "\"valid\"", ",", "\"test\"", "]", ")", ":", "\n", "            ", "if", "aug", "and", "self", ".", "set_name", "==", "set_name", ":", "\n", "                ", "return", "apply_data_augmentation", "(", "img", ",", "aug", ")", "\n", "", "", "return", "img", ",", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.__init__": [[359, 364], ["generic_dataset_manager.GenericDataset.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "set_name", ",", "custom_name", ",", "paths_and_sets", ")", ":", "\n", "        ", "super", "(", "OCRDataset", ",", "self", ")", ".", "__init__", "(", "params", ",", "set_name", ",", "custom_name", ",", "paths_and_sets", ")", "\n", "self", ".", "charset", "=", "None", "\n", "self", ".", "tokens", "=", "None", "\n", "self", ".", "reduce_dims_factor", "=", "np", ".", "array", "(", "[", "params", "[", "\"config\"", "]", "[", "\"height_divisor\"", "]", ",", "params", "[", "\"config\"", "]", "[", "\"width_divisor\"", "]", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.__getitem__": [[365, 409], ["copy.deepcopy", "generic_dataset_manager.OCRDataset.apply_data_augmentation", "numpy.floor().astype", "max", "max", "generic_dataset_manager.pad_image_width_right", "numpy.floor().astype", "max", "len", "numpy.floor", "int", "generic_dataset_manager.pad_image_height_bottom", "generic_dataset_manager.pad_image_width_right", "numpy.floor", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.apply_data_augmentation", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_image_width_right", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_image_height_bottom", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_image_width_right"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "copy", ".", "deepcopy", "(", "self", ".", "samples", "[", "idx", "]", ")", "\n", "\n", "# Curriculum learning", "\n", "if", "self", ".", "curriculum_config", ":", "\n", "            ", "if", "self", ".", "curriculum_config", "[", "\"mode\"", "]", "==", "\"char\"", ":", "\n", "                ", "sample", "[", "\"label\"", "]", "=", "sample", "[", "\"label\"", "]", "[", ":", "self", ".", "curriculum_config", "[", "\"nb_chars\"", "]", "]", "\n", "sample", "[", "\"token_label\"", "]", "=", "sample", "[", "\"token_label\"", "]", "[", ":", "self", ".", "curriculum_config", "[", "\"nb_chars\"", "]", "]", "\n", "sample", "[", "\"label_len\"", "]", "=", "len", "(", "sample", "[", "\"label\"", "]", ")", "\n", "\n", "# Data augmentation", "\n", "", "", "sample", "[", "\"img\"", "]", ",", "sample", "[", "\"applied_da\"", "]", "=", "self", ".", "apply_data_augmentation", "(", "sample", "[", "\"img\"", "]", ")", "\n", "\n", "# Normalization if requested", "\n", "if", "\"normalize\"", "in", "self", ".", "params", "[", "\"config\"", "]", "[", "\"constraints\"", "]", ":", "\n", "            ", "sample", "[", "\"img\"", "]", "=", "(", "sample", "[", "\"img\"", "]", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n", "", "sample", "[", "\"img_shape\"", "]", "=", "sample", "[", "\"img\"", "]", ".", "shape", "\n", "sample", "[", "\"img_reduced_shape\"", "]", "=", "np", ".", "floor", "(", "sample", "[", "\"img_shape\"", "]", "/", "self", ".", "reduce_dims_factor", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# Padding to handle CTC requirements", "\n", "max_label_len", "=", "0", "\n", "height", "=", "1", "\n", "if", "\"CTC_line\"", "in", "self", ".", "params", "[", "\"config\"", "]", "[", "\"constraints\"", "]", ":", "\n", "            ", "max_label_len", "=", "sample", "[", "\"label_len\"", "]", "\n", "", "if", "\"CTC_va\"", "in", "self", ".", "params", "[", "\"config\"", "]", "[", "\"constraints\"", "]", ":", "\n", "            ", "max_label_len", "=", "max", "(", "sample", "[", "\"line_label_len\"", "]", ")", "\n", "", "if", "\"CTC_pg\"", "in", "self", ".", "params", "[", "\"config\"", "]", "[", "\"constraints\"", "]", ":", "\n", "            ", "max_label_len", "=", "sample", "[", "\"label_len\"", "]", "\n", "height", "=", "max", "(", "sample", "[", "\"img_reduced_shape\"", "]", "[", "0", "]", ",", "1", ")", "\n", "", "if", "2", "*", "max_label_len", "+", "1", ">", "sample", "[", "\"img_reduced_shape\"", "]", "[", "1", "]", "*", "height", ":", "\n", "            ", "sample", "[", "\"img\"", "]", "=", "pad_image_width_right", "(", "sample", "[", "\"img\"", "]", ",", "int", "(", "np", ".", "ceil", "(", "(", "2", "*", "max_label_len", "+", "1", ")", "/", "height", ")", "*", "self", ".", "reduce_dims_factor", "[", "1", "]", ")", ",", "self", ".", "padding_value", ")", "\n", "sample", "[", "\"img_shape\"", "]", "=", "sample", "[", "\"img\"", "]", ".", "shape", "\n", "sample", "[", "\"img_reduced_shape\"", "]", "=", "np", ".", "floor", "(", "sample", "[", "\"img_shape\"", "]", "/", "self", ".", "reduce_dims_factor", ")", ".", "astype", "(", "int", ")", "\n", "", "sample", "[", "\"img_reduced_shape\"", "]", "=", "[", "max", "(", "1", ",", "t", ")", "for", "t", "in", "sample", "[", "\"img_reduced_shape\"", "]", "]", "\n", "\n", "# Padding constraints to handle model needs", "\n", "if", "\"padding\"", "in", "self", ".", "params", "[", "\"config\"", "]", "[", "\"constraints\"", "]", ":", "\n", "            ", "if", "sample", "[", "\"img_shape\"", "]", "[", "0", "]", "<", "self", ".", "params", "[", "\"config\"", "]", "[", "\"padding\"", "]", "[", "\"min_height\"", "]", ":", "\n", "                ", "sample", "[", "\"img\"", "]", "=", "pad_image_height_bottom", "(", "sample", "[", "\"img\"", "]", ",", "self", ".", "params", "[", "\"config\"", "]", "[", "\"padding\"", "]", "[", "\"min_height\"", "]", ",", "self", ".", "padding_value", ")", "\n", "", "if", "sample", "[", "\"img_shape\"", "]", "[", "1", "]", "<", "self", ".", "params", "[", "\"config\"", "]", "[", "\"padding\"", "]", "[", "\"min_width\"", "]", ":", "\n", "                ", "sample", "[", "\"img\"", "]", "=", "pad_image_width_right", "(", "sample", "[", "\"img\"", "]", ",", "self", ".", "params", "[", "\"config\"", "]", "[", "\"padding\"", "]", "[", "\"min_width\"", "]", ",", "self", ".", "padding_value", ")", "\n", "\n", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.get_charset": [[410, 415], ["set", "range", "len", "charset.union.union.union", "set"], "methods", ["None"], ["", "def", "get_charset", "(", "self", ")", ":", "\n", "        ", "charset", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ":", "\n", "            ", "charset", "=", "charset", ".", "union", "(", "set", "(", "self", ".", "samples", "[", "i", "]", "[", "\"label\"", "]", ")", ")", "\n", "", "return", "charset", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRDataset.convert_labels": [[416, 441], ["range", "len", "label.split", "label.replace().replace", "label.replace().replace.split", "basic.utils.LM_str_to_ind", "len", "len", "len", "[].append", "basic.utils.LM_str_to_ind", "len", "basic.utils.LM_str_to_ind", "len", "label.replace"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_str_to_ind", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_str_to_ind", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_str_to_ind"], ["", "def", "convert_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Label str to token at character level\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "samples", ")", ")", ":", "\n", "            ", "label", "=", "self", ".", "samples", "[", "i", "]", "[", "\"label\"", "]", "\n", "line_labels", "=", "label", ".", "split", "(", "\"\\n\"", ")", "\n", "full_label", "=", "label", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"  \"", ",", "\" \"", ")", "\n", "word_labels", "=", "full_label", ".", "split", "(", "\" \"", ")", "\n", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"label\"", "]", "=", "full_label", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"token_label\"", "]", "=", "LM_str_to_ind", "(", "self", ".", "charset", ",", "full_label", ")", "\n", "if", "\"add_eot\"", "in", "self", ".", "params", "[", "\"config\"", "]", "[", "\"constraints\"", "]", ":", "\n", "                ", "self", ".", "samples", "[", "i", "]", "[", "\"token_label\"", "]", ".", "append", "(", "self", ".", "tokens", "[", "\"end\"", "]", ")", "\n", "", "self", ".", "samples", "[", "i", "]", "[", "\"label_len\"", "]", "=", "len", "(", "self", ".", "samples", "[", "i", "]", "[", "\"token_label\"", "]", ")", "\n", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"line_label\"", "]", "=", "line_labels", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"token_line_label\"", "]", "=", "[", "LM_str_to_ind", "(", "self", ".", "charset", ",", "l", ")", "for", "l", "in", "line_labels", "]", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"line_label_len\"", "]", "=", "[", "len", "(", "l", ")", "for", "l", "in", "line_labels", "]", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"nb_lines\"", "]", "=", "len", "(", "line_labels", ")", "\n", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"word_label\"", "]", "=", "word_labels", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"token_word_label\"", "]", "=", "[", "LM_str_to_ind", "(", "self", ".", "charset", ",", "l", ")", "for", "l", "in", "word_labels", "]", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"word_label_len\"", "]", "=", "[", "len", "(", "l", ")", "for", "l", "in", "word_labels", "]", "\n", "self", ".", "samples", "[", "i", "]", "[", "\"nb_words\"", "]", "=", "len", "(", "word_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRCollateFunction.__init__": [[448, 452], ["float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "img_padding_value", "=", "float", "(", "config", "[", "\"padding_value\"", "]", ")", "\n", "self", ".", "label_padding_value", "=", "config", "[", "\"padding_token\"", "]", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.OCRCollateFunction.__call__": [[453, 519], ["generic_dataset_manager.pad_sequences_1D", "torch.tensor().long", "list", "range", "list", "range", "generic_dataset_manager.pad_images", "torch.tensor().float().permute", "int", "max", "list.append", "range", "max", "list.append", "range", "range", "range", "range", "range", "torch.tensor", "range", "range", "range", "range", "range", "range", "range", "torch.tensor().long", "len", "zip", "range", "range", "range", "range", "torch.tensor().long", "len", "zip", "range", "range", "range", "torch.tensor().float", "len", "[].split", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "range", "line_len[].append", "len", "len", "len", "len", "range", "word_len[].append", "len", "len", "len", "len", "torch.tensor", "len", "torch.tensor", "torch.tensor", "generic_dataset_manager.pad_sequences_1D", "generic_dataset_manager.pad_sequences_1D", "[].split", "[].split"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_sequences_1D", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_images", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_sequences_1D", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_sequences_1D"], ["", "def", "__call__", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "names", "=", "[", "batch_data", "[", "i", "]", "[", "\"name\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "ids", "=", "[", "int", "(", "batch_data", "[", "i", "]", "[", "\"name\"", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "applied_da", "=", "[", "batch_data", "[", "i", "]", "[", "\"applied_da\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "\n", "labels", "=", "[", "batch_data", "[", "i", "]", "[", "\"token_label\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "labels", "=", "pad_sequences_1D", "(", "labels", ",", "padding_value", "=", "self", ".", "label_padding_value", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", ".", "long", "(", ")", "\n", "labels_len", "=", "[", "batch_data", "[", "i", "]", "[", "\"label_len\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "\n", "raw_labels", "=", "[", "batch_data", "[", "i", "]", "[", "\"label\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "unchanged_labels", "=", "[", "batch_data", "[", "i", "]", "[", "\"unchanged_label\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "\n", "nb_lines", "=", "[", "batch_data", "[", "i", "]", "[", "\"nb_lines\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "line_raw", "=", "[", "batch_data", "[", "i", "]", "[", "\"line_label\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "line_token", "=", "[", "batch_data", "[", "i", "]", "[", "\"token_line_label\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "pad_line_token", "=", "list", "(", ")", "\n", "line_len", "=", "[", "batch_data", "[", "i", "]", "[", "\"line_label_len\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "max", "(", "nb_lines", ")", ")", ":", "\n", "            ", "current_lines", "=", "[", "line_token", "[", "j", "]", "[", "i", "]", "if", "i", "<", "nb_lines", "[", "j", "]", "else", "[", "self", ".", "label_padding_value", "]", "for", "j", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "pad_line_token", ".", "append", "(", "torch", ".", "tensor", "(", "pad_sequences_1D", "(", "current_lines", ",", "padding_value", "=", "self", ".", "label_padding_value", ")", ")", ".", "long", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "batch_data", ")", ")", ":", "\n", "                ", "if", "i", ">=", "nb_lines", "[", "j", "]", ":", "\n", "                    ", "line_len", "[", "j", "]", ".", "append", "(", "0", ")", "\n", "", "", "", "line_len", "=", "[", "i", "for", "i", "in", "zip", "(", "*", "line_len", ")", "]", "\n", "\n", "nb_words", "=", "[", "batch_data", "[", "i", "]", "[", "\"nb_words\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "word_raw", "=", "[", "batch_data", "[", "i", "]", "[", "\"word_label\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "word_token", "=", "[", "batch_data", "[", "i", "]", "[", "\"token_word_label\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "pad_word_token", "=", "list", "(", ")", "\n", "word_len", "=", "[", "batch_data", "[", "i", "]", "[", "\"word_label_len\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "max", "(", "nb_words", ")", ")", ":", "\n", "            ", "current_words", "=", "[", "word_token", "[", "j", "]", "[", "i", "]", "if", "i", "<", "nb_words", "[", "j", "]", "else", "[", "self", ".", "label_padding_value", "]", "for", "j", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "pad_word_token", ".", "append", "(", "torch", ".", "tensor", "(", "pad_sequences_1D", "(", "current_words", ",", "padding_value", "=", "self", ".", "label_padding_value", ")", ")", ".", "long", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "batch_data", ")", ")", ":", "\n", "                ", "if", "i", ">=", "nb_words", "[", "j", "]", ":", "\n", "                    ", "word_len", "[", "j", "]", ".", "append", "(", "0", ")", "\n", "", "", "", "word_len", "=", "[", "i", "for", "i", "in", "zip", "(", "*", "word_len", ")", "]", "\n", "\n", "imgs", "=", "[", "batch_data", "[", "i", "]", "[", "\"img\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "imgs_shape", "=", "[", "batch_data", "[", "i", "]", "[", "\"img_shape\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "imgs_reduced_shape", "=", "[", "batch_data", "[", "i", "]", "[", "\"img_reduced_shape\"", "]", "for", "i", "in", "range", "(", "len", "(", "batch_data", ")", ")", "]", "\n", "imgs", "=", "pad_images", "(", "imgs", ",", "padding_value", "=", "self", ".", "img_padding_value", ")", "\n", "imgs", "=", "torch", ".", "tensor", "(", "imgs", ")", ".", "float", "(", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "formatted_batch_data", "=", "{", "\n", "\"names\"", ":", "names", ",", "\n", "\"ids\"", ":", "ids", ",", "\n", "\"nb_lines\"", ":", "nb_lines", ",", "\n", "\"labels\"", ":", "labels", ",", "\n", "\"raw_labels\"", ":", "raw_labels", ",", "\n", "\"unchanged_labels\"", ":", "unchanged_labels", ",", "\n", "\"labels_len\"", ":", "labels_len", ",", "\n", "\"imgs\"", ":", "imgs", ",", "\n", "\"imgs_shape\"", ":", "imgs_shape", ",", "\n", "\"imgs_reduced_shape\"", ":", "imgs_reduced_shape", ",", "\n", "\"line_raw\"", ":", "line_raw", ",", "\n", "\"line_labels\"", ":", "pad_line_token", ",", "\n", "\"line_labels_len\"", ":", "line_len", ",", "\n", "\"nb_words\"", ":", "nb_words", ",", "\n", "\"word_raw\"", ":", "word_raw", ",", "\n", "\"word_labels\"", ":", "pad_word_token", ",", "\n", "\"word_labels_len\"", ":", "word_len", ",", "\n", "\"applied_da\"", ":", "applied_da", "\n", "}", "\n", "\n", "return", "formatted_batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_sequences_1D": [[520, 530], ["max", "enumerate", "len", "numpy.ones().astype", "numpy.ones", "len"], "function", ["None"], ["", "", "def", "pad_sequences_1D", "(", "data", ",", "padding_value", ")", ":", "\n", "    ", "\"\"\"\n    Pad data with padding_value to get same length\n    \"\"\"", "\n", "x_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "data", "]", "\n", "longest_x", "=", "max", "(", "x_lengths", ")", "\n", "padded_data", "=", "np", ".", "ones", "(", "(", "len", "(", "data", ")", ",", "longest_x", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "*", "padding_value", "\n", "for", "i", ",", "x_len", "in", "enumerate", "(", "x_lengths", ")", ":", "\n", "        ", "padded_data", "[", "i", ",", ":", "x_len", "]", "=", "data", "[", "i", "]", "[", ":", "x_len", "]", "\n", "", "return", "padded_data", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_images": [[532, 545], ["max", "max", "enumerate", "numpy.ones", "zip", "len"], "function", ["None"], ["", "def", "pad_images", "(", "data", ",", "padding_value", ")", ":", "\n", "    ", "\"\"\"\n    data: list of numpy array\n    \"\"\"", "\n", "x_lengths", "=", "[", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "data", "]", "\n", "y_lengths", "=", "[", "x", ".", "shape", "[", "1", "]", "for", "x", "in", "data", "]", "\n", "longest_x", "=", "max", "(", "x_lengths", ")", "\n", "longest_y", "=", "max", "(", "y_lengths", ")", "\n", "padded_data", "=", "np", ".", "ones", "(", "(", "len", "(", "data", ")", ",", "longest_x", ",", "longest_y", ",", "data", "[", "0", "]", ".", "shape", "[", "2", "]", ")", ")", "*", "padding_value", "\n", "for", "i", ",", "xy_len", "in", "enumerate", "(", "zip", "(", "x_lengths", ",", "y_lengths", ")", ")", ":", "\n", "        ", "x_len", ",", "y_len", "=", "xy_len", "\n", "padded_data", "[", "i", ",", ":", "x_len", ",", ":", "y_len", ",", "...", "]", "=", "data", "[", "i", "]", "[", ":", "x_len", ",", ":", "y_len", ",", "...", "]", "\n", "", "return", "padded_data", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_image_width_right": [[547, 556], ["max", "numpy.concatenate", "numpy.ones"], "function", ["None"], ["", "def", "pad_image_width_right", "(", "img", ",", "new_width", ",", "padding_value", ")", ":", "\n", "    ", "\"\"\"\n    Pad img to right side with padding value to reach new_width as width\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "pad_width", "=", "max", "(", "(", "new_width", "-", "w", ")", ",", "0", ")", "\n", "pad_right", "=", "np", ".", "ones", "(", "(", "h", ",", "pad_width", ",", "c", ")", ")", "*", "padding_value", "\n", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "pad_right", "]", ",", "axis", "=", "1", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.pad_image_height_bottom": [[558, 567], ["max", "numpy.concatenate", "numpy.ones"], "function", ["None"], ["", "def", "pad_image_height_bottom", "(", "img", ",", "new_height", ",", "padding_value", ")", ":", "\n", "    ", "\"\"\"\n    Pad img to bottom side with padding value to reach new_height as height\n    \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "pad_height", "=", "max", "(", "(", "new_height", "-", "h", ")", ",", "0", ")", "\n", "pad_bottom", "=", "np", ".", "ones", "(", "(", "pad_height", ",", "w", ",", "c", ")", ")", "*", "padding_value", "\n", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "pad_bottom", "]", ",", "axis", "=", "0", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_dataset_manager.apply_data_augmentation": [[569, 643], ["list", "PIL.Image.fromarray", "numpy.array", "list.append", "numpy.random.uniform", "list.append", "numpy.random.randint", "numpy.random.randint", "numpy.random.uniform", "torchvision.transforms.functional.adjust_contrast", "list.append", "numpy.random.uniform", "torchvision.transforms.functional.adjust_brightness", "list.append", "list.append", "list.append", "list.append", "numpy.expand_dims", "da_config.keys", "numpy.random.rand", "numpy.random.uniform", "basic.transforms.DPIAdjusting", "da_config.keys", "numpy.random.rand", "torchvision.transforms.RandomPerspective", "numpy.random.randint", "numpy.random.randint", "list.append", "da_config.keys", "numpy.random.rand", "numpy.random.randint", "list.append", "list.append", "da_config.keys", "numpy.random.rand", "da_config.keys", "numpy.random.rand", "da_config.keys", "numpy.random.rand", "torchvision.transforms.ColorJitter", "da_config.keys", "numpy.random.rand", "basic.transforms.SignFlipping", "da_config.keys", "numpy.random.rand", "int", "torchvision.transforms.RandomCrop", "list.append", "len", "da_config.keys", "numpy.random.rand", "basic.transforms.ElasticDistortion", "list.append", "basic.transforms.Erosion", "basic.transforms.Dilation", "da_config.keys", "numpy.random.rand", "torchvision.transforms.RandomCrop", "numpy.random.randint", "da_config.keys", "numpy.random.rand", "basic.transforms.RandomTransform", "da_config[].keys", "da_config[].keys", "da_config[].keys", "da_config[].keys"], "function", ["None"], ["", "def", "apply_data_augmentation", "(", "img", ",", "da_config", ")", ":", "\n", "    ", "applied_da", "=", "list", "(", ")", "\n", "# Convert to PIL Image", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "0", "]", "if", "img", ".", "shape", "[", "2", "]", "==", "1", "else", "img", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "# Apply data augmentation", "\n", "if", "\"dpi\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"dpi\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "valid_factor", "=", "False", "\n", "while", "not", "valid_factor", ":", "\n", "            ", "factor", "=", "np", ".", "random", ".", "uniform", "(", "da_config", "[", "\"dpi\"", "]", "[", "\"min_factor\"", "]", ",", "da_config", "[", "\"dpi\"", "]", "[", "\"max_factor\"", "]", ")", "\n", "valid_factor", "=", "True", "\n", "if", "(", "\"max_width\"", "in", "da_config", "[", "\"dpi\"", "]", ".", "keys", "(", ")", "and", "factor", "*", "img", ".", "size", "[", "0", "]", ">", "da_config", "[", "\"dpi\"", "]", "[", "\"max_width\"", "]", ")", "or", "(", "\"max_height\"", "in", "da_config", "[", "\"dpi\"", "]", ".", "keys", "(", ")", "and", "factor", "*", "img", ".", "size", "[", "1", "]", ">", "da_config", "[", "\"dpi\"", "]", "[", "\"max_height\"", "]", ")", ":", "\n", "                ", "valid_factor", "=", "False", "\n", "", "if", "(", "\"min_width\"", "in", "da_config", "[", "\"dpi\"", "]", ".", "keys", "(", ")", "and", "factor", "*", "img", ".", "size", "[", "0", "]", "<", "da_config", "[", "\"dpi\"", "]", "[", "\"min_width\"", "]", ")", "or", "(", "\"min_height\"", "in", "da_config", "[", "\"dpi\"", "]", ".", "keys", "(", ")", "and", "factor", "*", "img", ".", "size", "[", "1", "]", "<", "da_config", "[", "\"dpi\"", "]", "[", "\"min_height\"", "]", ")", ":", "\n", "                ", "valid_factor", "=", "False", "\n", "", "", "img", "=", "DPIAdjusting", "(", "factor", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"dpi: factor {}\"", ".", "format", "(", "factor", ")", ")", "\n", "", "if", "\"perspective\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"perspective\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "scale", "=", "np", ".", "random", ".", "uniform", "(", "da_config", "[", "\"perspective\"", "]", "[", "\"min_factor\"", "]", ",", "da_config", "[", "\"perspective\"", "]", "[", "\"max_factor\"", "]", ")", "\n", "img", "=", "RandomPerspective", "(", "distortion_scale", "=", "scale", ",", "p", "=", "1", ",", "interpolation", "=", "Image", ".", "BILINEAR", ",", "fill", "=", "255", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"perspective: scale {}\"", ".", "format", "(", "scale", ")", ")", "\n", "", "elif", "\"elastic_distortion\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"elastic_distortion\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "magnitude", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "da_config", "[", "\"elastic_distortion\"", "]", "[", "\"max_magnitude\"", "]", "+", "1", ")", "\n", "kernel", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "da_config", "[", "\"elastic_distortion\"", "]", "[", "\"max_kernel\"", "]", "+", "1", ")", "\n", "magnitude_w", ",", "magnitude_h", "=", "(", "magnitude", ",", "1", ")", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "0", "else", "(", "1", ",", "magnitude", ")", "\n", "img", "=", "ElasticDistortion", "(", "grid", "=", "(", "kernel", ",", "kernel", ")", ",", "magnitude", "=", "(", "magnitude_w", ",", "magnitude_h", ")", ",", "min_sep", "=", "(", "1", ",", "1", ")", ")", "(", "\n", "img", ")", "\n", "applied_da", ".", "append", "(", "\"elastic_distortion: magnitude ({}, {})  - kernel ({}, {})\"", ".", "format", "(", "magnitude_w", ",", "magnitude_h", ",", "kernel", ",", "kernel", ")", ")", "\n", "", "elif", "\"random_transform\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"random_transform\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "img", "=", "RandomTransform", "(", "da_config", "[", "\"random_transform\"", "]", "[", "\"max_val\"", "]", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"random_transform\"", ")", "\n", "", "if", "\"dilation_erosion\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"dilation_erosion\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "kernel_h", "=", "np", ".", "random", ".", "randint", "(", "da_config", "[", "\"dilation_erosion\"", "]", "[", "\"min_kernel\"", "]", ",", "\n", "da_config", "[", "\"dilation_erosion\"", "]", "[", "\"max_kernel\"", "]", "+", "1", ")", "\n", "kernel_w", "=", "np", ".", "random", ".", "randint", "(", "da_config", "[", "\"dilation_erosion\"", "]", "[", "\"min_kernel\"", "]", ",", "\n", "da_config", "[", "\"dilation_erosion\"", "]", "[", "\"max_kernel\"", "]", "+", "1", ")", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "0", ":", "\n", "            ", "img", "=", "Erosion", "(", "(", "kernel_w", ",", "kernel_h", ")", ",", "da_config", "[", "\"dilation_erosion\"", "]", "[", "\"iterations\"", "]", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"erosion:  kernel ({}, {})\"", ".", "format", "(", "kernel_w", ",", "kernel_h", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "Dilation", "(", "(", "kernel_w", ",", "kernel_h", ")", ",", "da_config", "[", "\"dilation_erosion\"", "]", "[", "\"iterations\"", "]", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"dilation:  kernel ({}, {})\"", ".", "format", "(", "kernel_w", ",", "kernel_h", ")", ")", "\n", "\n", "", "", "if", "\"contrast\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"contrast\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "factor", "=", "np", ".", "random", ".", "uniform", "(", "da_config", "[", "\"contrast\"", "]", "[", "\"min_factor\"", "]", ",", "da_config", "[", "\"contrast\"", "]", "[", "\"max_factor\"", "]", ")", "\n", "img", "=", "adjust_contrast", "(", "img", ",", "factor", ")", "\n", "applied_da", ".", "append", "(", "\"contrast: factor {}\"", ".", "format", "(", "factor", ")", ")", "\n", "", "if", "\"brightness\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"brightness\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "factor", "=", "np", ".", "random", ".", "uniform", "(", "da_config", "[", "\"brightness\"", "]", "[", "\"min_factor\"", "]", ",", "da_config", "[", "\"brightness\"", "]", "[", "\"max_factor\"", "]", ")", "\n", "img", "=", "adjust_brightness", "(", "img", ",", "factor", ")", "\n", "applied_da", ".", "append", "(", "\"brightness: factor {}\"", ".", "format", "(", "factor", ")", ")", "\n", "", "if", "\"color_jittering\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"color_jittering\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "img", "=", "ColorJitter", "(", "contrast", "=", "da_config", "[", "\"color_jittering\"", "]", "[", "\"factor_contrast\"", "]", ",", "\n", "brightness", "=", "da_config", "[", "\"color_jittering\"", "]", "[", "\"factor_brightness\"", "]", ",", "\n", "saturation", "=", "da_config", "[", "\"color_jittering\"", "]", "[", "\"factor_saturation\"", "]", ",", "\n", "hue", "=", "da_config", "[", "\"color_jittering\"", "]", "[", "\"factor_hue\"", "]", ",", "\n", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"jittering\"", ")", "\n", "", "if", "\"sign_flipping\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"sign_flipping\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "img", "=", "SignFlipping", "(", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"sign_flipping\"", ")", "\n", "", "if", "\"crop\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"crop\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "new_w", ",", "new_h", "=", "[", "int", "(", "t", "*", "da_config", "[", "\"crop\"", "]", "[", "\"ratio\"", "]", ")", "for", "t", "in", "img", ".", "size", "]", "\n", "img", "=", "RandomCrop", "(", "(", "new_h", ",", "new_w", ")", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"random_crop\"", ")", "\n", "", "elif", "\"fixed_crop\"", "in", "da_config", ".", "keys", "(", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "da_config", "[", "\"fixed_crop\"", "]", "[", "\"proba\"", "]", ":", "\n", "        ", "img", "=", "RandomCrop", "(", "(", "da_config", "[", "\"fixed_crop\"", "]", "[", "\"h\"", "]", ",", "da_config", "[", "\"fixed_crop\"", "]", "[", "\"w\"", "]", ")", ")", "(", "img", ")", "\n", "applied_da", ".", "append", "(", "\"fixed_crop\"", ")", "\n", "# convert to numpy array", "\n", "", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "if", "len", "(", "img", ".", "shape", ")", "==", "2", "else", "img", "\n", "return", "img", ",", "applied_da", "", "", ""]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_str_to_ind": [[48, 50], ["labels.index"], "function", ["None"], ["def", "LM_str_to_ind", "(", "labels", ",", "str", ")", ":", "\n", "    ", "return", "[", "labels", ".", "index", "(", "c", ")", "for", "c", "in", "str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_ind_to_str": [[52, 63], ["len", "res.append", "res.append"], "function", ["None"], ["", "def", "LM_ind_to_str", "(", "labels", ",", "ind", ",", "oov_symbol", "=", "None", ")", ":", "\n", "    ", "if", "oov_symbol", "is", "not", "None", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "i", "in", "ind", ":", "\n", "            ", "if", "i", "<", "len", "(", "labels", ")", ":", "\n", "                ", "res", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "res", ".", "append", "(", "oov_symbol", ")", "\n", "", "", "", "else", ":", "\n", "        ", "res", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "ind", "]", "\n", "", "return", "\"\"", ".", "join", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.edit_cer_from_list": [[67, 72], ["zip", "editdistance.eval"], "function", ["None"], ["", "def", "edit_cer_from_list", "(", "truth", ",", "pred", ")", ":", "\n", "    ", "edit", "=", "0", "\n", "for", "t", ",", "p", "in", "zip", "(", "truth", ",", "pred", ")", ":", "\n", "        ", "edit", "+=", "editdistance", ".", "eval", "(", "t", ",", "p", ")", "\n", "", "return", "edit", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.edit_wer_from_list": [[74, 89], ["zip", "gt.split.split", "pred.split.split", "editdistance.eval", "gt.split.replace", "pred.split.replace", "gt.split.remove", "pred.split.remove"], "function", ["None"], ["", "def", "edit_wer_from_list", "(", "truth", ",", "pred", ")", ":", "\n", "    ", "edit", "=", "0", "\n", "separation_marks", "=", "[", "\"?\"", ",", "\".\"", ",", "\";\"", ",", "\",\"", ",", "\"!\"", ",", "\"\\n\"", "]", "\n", "for", "pred", ",", "gt", "in", "zip", "(", "pred", ",", "truth", ")", ":", "\n", "        ", "for", "mark", "in", "separation_marks", ":", "\n", "            ", "gt", ".", "replace", "(", "mark", ",", "\" {} \"", ".", "format", "(", "mark", ")", ")", "\n", "pred", ".", "replace", "(", "mark", ",", "\" {} \"", ".", "format", "(", "mark", ")", ")", "\n", "", "gt", "=", "gt", ".", "split", "(", "\" \"", ")", "\n", "pred", "=", "pred", ".", "split", "(", "\" \"", ")", "\n", "while", "''", "in", "gt", ":", "\n", "            ", "gt", ".", "remove", "(", "''", ")", "\n", "", "while", "''", "in", "pred", ":", "\n", "            ", "pred", ".", "remove", "(", "''", ")", "\n", "", "edit", "+=", "editdistance", ".", "eval", "(", "gt", ",", "pred", ")", "\n", "", "return", "edit", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.nb_words_from_list": [[91, 102], ["gt.split.split", "len", "gt.split.replace", "gt.split.remove"], "function", ["None"], ["", "def", "nb_words_from_list", "(", "list_gt", ")", ":", "\n", "    ", "separation_marks", "=", "[", "\"?\"", ",", "\".\"", ",", "\";\"", ",", "\",\"", ",", "\"!\"", ",", "\"\\n\"", "]", "\n", "len_", "=", "0", "\n", "for", "gt", "in", "list_gt", ":", "\n", "        ", "for", "mark", "in", "separation_marks", ":", "\n", "            ", "gt", ".", "replace", "(", "mark", ",", "\" {} \"", ".", "format", "(", "mark", ")", ")", "\n", "", "gt", "=", "gt", ".", "split", "(", "\" \"", ")", "\n", "while", "''", "in", "gt", ":", "\n", "            ", "gt", ".", "remove", "(", "''", ")", "\n", "", "len_", "+=", "len", "(", "gt", ")", "\n", "", "return", "len_", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.nb_chars_from_list": [[104, 106], ["sum", "len"], "function", ["None"], ["", "def", "nb_chars_from_list", "(", "list_gt", ")", ":", "\n", "    ", "return", "sum", "(", "[", "len", "(", "t", ")", "for", "t", "in", "list_gt", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.cer_from_list_str": [[108, 116], ["zip", "editdistance.eval", "len"], "function", ["None"], ["", "def", "cer_from_list_str", "(", "str_gt", ",", "str_pred", ")", ":", "\n", "        ", "len_", "=", "0", "\n", "edit", "=", "0", "\n", "for", "pred", ",", "gt", "in", "zip", "(", "str_pred", ",", "str_gt", ")", ":", "\n", "            ", "edit", "+=", "editdistance", ".", "eval", "(", "gt", ",", "pred", ")", "\n", "len_", "+=", "len", "(", "gt", ")", "\n", "", "cer", "=", "edit", "/", "len_", "\n", "return", "cer", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.wer_from_list_str": [[118, 136], ["zip", "gt.split.split", "pred.split.split", "editdistance.eval", "len", "gt.split.replace", "pred.split.replace", "gt.split.remove", "pred.split.remove"], "function", ["None"], ["", "def", "wer_from_list_str", "(", "str_gt", ",", "str_pred", ")", ":", "\n", "    ", "separation_marks", "=", "[", "\"?\"", ",", "\".\"", ",", "\";\"", ",", "\",\"", ",", "\"!\"", ",", "\"\\n\"", "]", "\n", "len_", "=", "0", "\n", "edit", "=", "0", "\n", "for", "pred", ",", "gt", "in", "zip", "(", "str_pred", ",", "str_gt", ")", ":", "\n", "        ", "for", "mark", "in", "separation_marks", ":", "\n", "            ", "gt", ".", "replace", "(", "mark", ",", "\" {} \"", ".", "format", "(", "mark", ")", ")", "\n", "pred", ".", "replace", "(", "mark", ",", "\" {} \"", ".", "format", "(", "mark", ")", ")", "\n", "", "gt", "=", "gt", ".", "split", "(", "\" \"", ")", "\n", "pred", "=", "pred", ".", "split", "(", "\" \"", ")", "\n", "while", "''", "in", "gt", ":", "\n", "            ", "gt", ".", "remove", "(", "''", ")", "\n", "", "while", "''", "in", "pred", ":", "\n", "            ", "pred", ".", "remove", "(", "''", ")", "\n", "", "edit", "+=", "editdistance", ".", "eval", "(", "gt", ",", "pred", ")", "\n", "len_", "+=", "len", "(", "gt", ")", "\n", "", "cer", "=", "edit", "/", "len_", "\n", "return", "cer", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.cer_from_files": [[138, 144], ["utils.cer_from_list_str", "open", "f_p.readlines", "open", "f_gt.readlines"], "function", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.cer_from_list_str"], ["", "def", "cer_from_files", "(", "file_gt", ",", "file_pred", ")", ":", "\n", "        ", "with", "open", "(", "file_pred", ",", "\"r\"", ")", "as", "f_p", ":", "\n", "            ", "str_pred", "=", "f_p", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "file_gt", ",", "\"r\"", ")", "as", "f_gt", ":", "\n", "            ", "str_gt", "=", "f_gt", ".", "readlines", "(", ")", "\n", "", "return", "cer_from_list_str", "(", "str_gt", ",", "str_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.wer_from_files": [[146, 152], ["utils.wer_from_list_str", "open", "f_p.readlines", "open", "f_gt.readlines"], "function", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.wer_from_list_str"], ["", "def", "wer_from_files", "(", "file_gt", ",", "file_pred", ")", ":", "\n", "    ", "with", "open", "(", "file_pred", ",", "\"r\"", ")", "as", "f_p", ":", "\n", "        ", "str_pred", "=", "f_p", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "file_gt", ",", "\"r\"", ")", "as", "f_gt", ":", "\n", "        ", "str_gt", "=", "f_gt", ".", "readlines", "(", ")", "\n", "", "return", "wer_from_list_str", "(", "str_gt", ",", "str_pred", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.main_line_ctc.train_and_test": [[50, 65], ["OCR.line_OCR.ctc.trainer_line_ctc.TrainerLineCTC", "OCR.line_OCR.ctc.trainer_line_ctc.TrainerLineCTC.train", "OCR.line_OCR.ctc.trainer_line_ctc.TrainerLineCTC.load_model", "[].keys", "OCR.line_OCR.ctc.trainer_line_ctc.TrainerLineCTC.predict"], "function", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.train", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_model", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.predict"], ["def", "train_and_test", "(", "rank", ",", "params", ")", ":", "\n", "    ", "params", "[", "\"training_params\"", "]", "[", "\"ddp_rank\"", "]", "=", "rank", "\n", "model", "=", "TrainerLineCTC", "(", "params", ")", "\n", "# Model is trained until max_time_training or max_nb_epochs is reached", "\n", "model", ".", "train", "(", ")", "\n", "\n", "## load weights giving best CER on valid set", "\n", "model", ".", "params", "[", "\"training_params\"", "]", "[", "\"load_epoch\"", "]", "=", "\"best\"", "\n", "model", ".", "load_model", "(", ")", "\n", "\n", "## compute metrics on train, valid and test sets (in eval conditions)", "\n", "metrics", "=", "[", "\"cer\"", ",", "\"wer\"", "]", "\n", "for", "dataset_name", "in", "params", "[", "\"dataset_params\"", "]", "[", "\"datasets\"", "]", ".", "keys", "(", ")", ":", "\n", "        ", "for", "set_name", "in", "[", "\"train\"", ",", "\"valid\"", ",", "\"test\"", ",", "]", ":", "\n", "            ", "model", ".", "predict", "(", "\"{}-{}\"", ".", "format", "(", "dataset_name", ",", "set_name", ")", ",", "[", "(", "dataset_name", ",", "set_name", ")", ",", "]", ",", "metrics", ",", "output", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_line_ctc.TrainerLineCTC.__init__": [[45, 47], ["basic.generic_training_manager.GenericTrainingManager.__init__"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "TrainerLineCTC", ",", "self", ")", ".", "__init__", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_line_ctc.TrainerLineCTC.ctc_remove_successives_identical_ind": [[48, 55], ["res.append"], "methods", ["None"], ["", "def", "ctc_remove_successives_identical_ind", "(", "self", ",", "ind", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "i", "in", "ind", ":", "\n", "            ", "if", "res", "and", "res", "[", "-", "1", "]", "==", "i", ":", "\n", "                ", "continue", "\n", "", "res", ".", "append", "(", "i", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_line_ctc.TrainerLineCTC.train_batch": [[56, 76], ["batch_data[].to", "batch_data[].to", "torch.nn.CTCLoss", "trainer_line_ctc.TrainerLineCTC.optimizer.zero_grad", "torch.nn.CTCLoss.", "trainer_line_ctc.TrainerLineCTC.backward_loss", "trainer_line_ctc.TrainerLineCTC.step_optimizer", "torch.argmax().cpu().numpy", "trainer_line_ctc.TrainerLineCTC.compute_metrics", "torch.cuda.amp.autocast", "global_pred.permute", "batch_data[].to.cpu().numpy", "torch.argmax().cpu", "torch.nn.CTCLoss.item", "batch_data[].to.cpu", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.backward_loss", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.step_optimizer", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.compute_metrics"], ["", "def", "train_batch", "(", "self", ",", "batch_data", ",", "metric_names", ")", ":", "\n", "        ", "x", "=", "batch_data", "[", "\"imgs\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "batch_data", "[", "\"labels\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "x_reduced_len", "=", "[", "s", "[", "1", "]", "for", "s", "in", "batch_data", "[", "\"imgs_reduced_shape\"", "]", "]", "\n", "y_len", "=", "batch_data", "[", "\"labels_len\"", "]", "\n", "\n", "loss_ctc", "=", "CTCLoss", "(", "blank", "=", "self", ".", "dataset", ".", "tokens", "[", "\"blank\"", "]", ",", "reduction", "=", "\"sum\"", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_amp\"", "]", ")", ":", "\n", "            ", "x", "=", "self", ".", "models", "[", "\"encoder\"", "]", "(", "x", ")", "\n", "global_pred", "=", "self", ".", "models", "[", "\"decoder\"", "]", "(", "x", ")", "\n", "\n", "", "loss", "=", "loss_ctc", "(", "global_pred", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "y", ",", "x_reduced_len", ",", "y_len", ")", "\n", "self", ".", "backward_loss", "(", "loss", ")", "\n", "self", ".", "step_optimizer", "(", ")", "\n", "pred", "=", "torch", ".", "argmax", "(", "global_pred", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "metrics", "=", "self", ".", "compute_metrics", "(", "pred", ",", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "x_reduced_len", ",", "y_len", ",", "loss", "=", "loss", ".", "item", "(", ")", ",", "metric_names", "=", "metric_names", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_line_ctc.TrainerLineCTC.evaluate_batch": [[77, 95], ["batch_data[].to", "batch_data[].to", "torch.nn.CTCLoss", "torch.nn.CTCLoss.", "torch.argmax().cpu().numpy", "trainer_line_ctc.TrainerLineCTC.compute_metrics", "torch.cuda.amp.autocast", "global_pred.permute", "batch_data[].to.cpu().numpy", "metrics[].extend", "torch.argmax().cpu", "torch.nn.CTCLoss.item", "batch_data[].to.cpu", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.compute_metrics"], ["", "def", "evaluate_batch", "(", "self", ",", "batch_data", ",", "metric_names", ")", ":", "\n", "        ", "x", "=", "batch_data", "[", "\"imgs\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "batch_data", "[", "\"labels\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "x_reduced_len", "=", "[", "s", "[", "1", "]", "for", "s", "in", "batch_data", "[", "\"imgs_reduced_shape\"", "]", "]", "\n", "y_len", "=", "batch_data", "[", "\"labels_len\"", "]", "\n", "\n", "loss_ctc", "=", "CTCLoss", "(", "blank", "=", "self", ".", "dataset", ".", "tokens", "[", "\"blank\"", "]", ",", "reduction", "=", "\"sum\"", ")", "\n", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_amp\"", "]", ")", ":", "\n", "            ", "x", "=", "self", ".", "models", "[", "\"encoder\"", "]", "(", "x", ")", "\n", "global_pred", "=", "self", ".", "models", "[", "\"decoder\"", "]", "(", "x", ")", "\n", "\n", "", "loss", "=", "loss_ctc", "(", "global_pred", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "y", ",", "x_reduced_len", ",", "y_len", ")", "\n", "pred", "=", "torch", ".", "argmax", "(", "global_pred", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "metrics", "=", "self", ".", "compute_metrics", "(", "pred", ",", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "x_reduced_len", ",", "y_len", ",", "loss", "=", "loss", ".", "item", "(", ")", ",", "metric_names", "=", "metric_names", ")", "\n", "if", "\"pred\"", "in", "metric_names", ":", "\n", "            ", "metrics", "[", "\"pred\"", "]", ".", "extend", "(", "[", "batch_data", "[", "\"unchanged_labels\"", "]", ",", "batch_data", "[", "\"names\"", "]", "]", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_line_ctc.TrainerLineCTC.compute_metrics": [[96, 117], ["list", "dict", "len", "trainer_line_ctc.TrainerLineCTC.ctc_remove_successives_identical_ind", "basic.utils.LM_ind_to_str", "basic.utils.LM_ind_to_str", "range", "range", "basic.utils.nb_chars_from_list", "editdistance.eval", "basic.utils.edit_wer_from_list", "basic.utils.nb_words_from_list", "zip"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.ctc_remove_successives_identical_ind", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_ind_to_str", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_ind_to_str", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.nb_chars_from_list", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.edit_wer_from_list", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.nb_words_from_list"], ["", "def", "compute_metrics", "(", "self", ",", "x", ",", "y", ",", "x_len", ",", "y_len", ",", "loss", "=", "None", ",", "metric_names", "=", "list", "(", ")", ")", ":", "\n", "        ", "batch_size", "=", "y", ".", "shape", "[", "0", "]", "\n", "ind_x", "=", "[", "x", "[", "i", "]", "[", ":", "x_len", "[", "i", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "ind_y", "=", "[", "y", "[", "i", "]", "[", ":", "y_len", "[", "i", "]", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "ind_x", "=", "[", "self", ".", "ctc_remove_successives_identical_ind", "(", "t", ")", "for", "t", "in", "ind_x", "]", "\n", "str_x", "=", "[", "LM_ind_to_str", "(", "self", ".", "dataset", ".", "charset", ",", "t", ",", "oov_symbol", "=", "\"\"", ")", "for", "t", "in", "ind_x", "]", "\n", "str_y", "=", "[", "LM_ind_to_str", "(", "self", ".", "dataset", ".", "charset", ",", "t", ")", "for", "t", "in", "ind_y", "]", "\n", "metrics", "=", "dict", "(", ")", "\n", "for", "metric_name", "in", "metric_names", ":", "\n", "            ", "if", "metric_name", "==", "\"cer\"", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "[", "editdistance", ".", "eval", "(", "u", ",", "v", ")", "for", "u", ",", "v", "in", "zip", "(", "str_y", ",", "str_x", ")", "]", "\n", "metrics", "[", "\"nb_chars\"", "]", "=", "nb_chars_from_list", "(", "str_y", ")", "\n", "", "elif", "metric_name", "==", "\"wer\"", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "edit_wer_from_list", "(", "str_y", ",", "str_x", ")", "\n", "metrics", "[", "\"nb_words\"", "]", "=", "nb_words_from_list", "(", "str_y", ")", "\n", "", "elif", "metric_name", "==", "\"pred\"", ":", "\n", "                ", "metrics", "[", "\"pred\"", "]", "=", "[", "str_x", ",", "]", "\n", "", "", "if", "\"loss_ctc\"", "in", "metric_names", ":", "\n", "            ", "metrics", "[", "\"loss_ctc\"", "]", "=", "loss", "/", "metrics", "[", "\"nb_chars\"", "]", "\n", "", "metrics", "[", "\"nb_samples\"", "]", "=", "len", "(", "x", ")", "\n", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_line_ctc.Decoder.__init__": [[42, 49], ["torch.nn.Module.__init__", "torch.nn.AdaptiveMaxPool2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab_size", "=", "params", "[", "\"vocab_size\"", "]", "\n", "\n", "self", ".", "ada_pool", "=", "AdaptiveMaxPool2d", "(", "(", "1", ",", "None", ")", ")", "\n", "self", ".", "end_conv", "=", "Conv2d", "(", "in_channels", "=", "params", "[", "\"enc_size\"", "]", ",", "out_channels", "=", "self", ".", "vocab_size", "+", "1", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_line_ctc.Decoder.forward": [[50, 55], ["models_line_ctc.Decoder.ada_pool", "models_line_ctc.Decoder.end_conv", "torch.squeeze", "torch.nn.functional.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "ada_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "end_conv", "(", "x", ")", "\n", "x", "=", "torch", ".", "squeeze", "(", "x", ",", "dim", "=", "2", ")", "\n", "return", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.__init__": [[45, 47], ["basic.generic_training_manager.GenericTrainingManager.__init__"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "TrainerPGCTC", ",", "self", ")", ".", "__init__", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.ctc_remove_successives_identical_ind": [[48, 55], ["res.append"], "methods", ["None"], ["", "def", "ctc_remove_successives_identical_ind", "(", "self", ",", "ind", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "i", "in", "ind", ":", "\n", "            ", "if", "res", "and", "res", "[", "-", "1", "]", "==", "i", ":", "\n", "                ", "continue", "\n", "", "res", ".", "append", "(", "i", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.train_batch": [[56, 86], ["batch_data[].to", "batch_data[].to", "torch.nn.CTCLoss", "trainer_pg_ctc.TrainerPGCTC.optimizer.zero_grad", "trainer_pg_ctc.TrainerPGCTC.backward_loss", "trainer_pg_ctc.TrainerPGCTC.step_optimizer", "trainer_pg_ctc.TrainerPGCTC.compute_metrics", "torch.cuda.amp.autocast", "list", "global_pred.size", "range", "pred.reshape.reshape.reshape", "torch.nn.CTCLoss.", "list.append", "loss.item", "pred.reshape.reshape.permute", "y[].unsqueeze", "torch.argmax().cpu().numpy", "torch.argmax().cpu", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.backward_loss", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.step_optimizer", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.compute_metrics"], ["", "def", "train_batch", "(", "self", ",", "batch_data", ",", "metric_names", ")", ":", "\n", "        ", "x", "=", "batch_data", "[", "\"imgs\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "batch_data", "[", "\"labels\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y_len", "=", "batch_data", "[", "\"labels_len\"", "]", "\n", "str_y", "=", "batch_data", "[", "\"raw_labels\"", "]", "\n", "loss", "=", "0", "\n", "\n", "loss_ctc", "=", "CTCLoss", "(", "blank", "=", "self", ".", "dataset", ".", "tokens", "[", "\"blank\"", "]", ",", "reduction", "=", "\"mean\"", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_amp\"", "]", ")", ":", "\n", "            ", "global_pred", "=", "self", ".", "models", "[", "\"decoder\"", "]", "(", "self", ".", "models", "[", "\"encoder\"", "]", "(", "x", ")", ")", "\n", "\n", "ind_x", "=", "list", "(", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "global_pred", ".", "size", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "                ", "x_h", ",", "x_w", "=", "batch_data", "[", "\"imgs_reduced_shape\"", "]", "[", "i", "]", "[", ":", "2", "]", "\n", "pred", "=", "global_pred", "[", "i", ",", ":", ",", ":", "x_h", ",", ":", "x_w", "]", "\n", "pred", "=", "pred", ".", "reshape", "(", "1", ",", "c", ",", "x_h", "*", "x_w", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "loss", "+=", "loss_ctc", "(", "pred", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "y", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "[", "x_h", "*", "x_w", ",", "]", ",", "[", "y_len", "[", "i", "]", ",", "]", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "ind_x", ".", "append", "(", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "", "del", "global_pred", "\n", "self", ".", "backward_loss", "(", "loss", ")", "\n", "self", ".", "step_optimizer", "(", ")", "\n", "metrics", "=", "self", ".", "compute_metrics", "(", "ind_x", ",", "str_y", ",", "loss", "=", "loss", ".", "item", "(", ")", ",", "metric_names", "=", "metric_names", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.evaluate_batch": [[87, 112], ["batch_data[].to", "batch_data[].to", "torch.nn.CTCLoss", "trainer_pg_ctc.TrainerPGCTC.compute_metrics", "torch.cuda.amp.autocast", "list", "global_pred.size", "range", "metrics[].extend", "pred.reshape.reshape.reshape", "torch.nn.CTCLoss.", "list.append", "loss.item", "pred.reshape.reshape.permute", "y[].unsqueeze", "torch.argmax().cpu().numpy", "torch.argmax().cpu", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.compute_metrics"], ["", "def", "evaluate_batch", "(", "self", ",", "batch_data", ",", "metric_names", ")", ":", "\n", "        ", "x", "=", "batch_data", "[", "\"imgs\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "batch_data", "[", "\"labels\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y_len", "=", "batch_data", "[", "\"labels_len\"", "]", "\n", "str_y", "=", "batch_data", "[", "\"raw_labels\"", "]", "\n", "loss", "=", "0", "\n", "\n", "loss_ctc", "=", "CTCLoss", "(", "blank", "=", "self", ".", "dataset", ".", "tokens", "[", "\"blank\"", "]", ",", "reduction", "=", "\"mean\"", ")", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "params", "[", "\"training_params\"", "]", "[", "\"use_amp\"", "]", ")", ":", "\n", "            ", "x", "=", "self", ".", "models", "[", "\"encoder\"", "]", "(", "x", ")", "\n", "global_pred", "=", "self", ".", "models", "[", "\"decoder\"", "]", "(", "x", ")", "\n", "\n", "ind_x", "=", "list", "(", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "global_pred", ".", "size", "(", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "                ", "x_h", ",", "x_w", "=", "batch_data", "[", "\"imgs_reduced_shape\"", "]", "[", "i", "]", "[", ":", "2", "]", "\n", "pred", "=", "global_pred", "[", "i", ",", ":", ",", ":", "x_h", ",", ":", "x_w", "]", "\n", "pred", "=", "pred", ".", "reshape", "(", "1", ",", "c", ",", "x_h", "*", "x_w", ")", "\n", "loss", "+=", "loss_ctc", "(", "pred", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "y", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "[", "x_h", "*", "x_w", ",", "]", ",", "[", "y_len", "[", "i", "]", ",", "]", ")", "\n", "ind_x", ".", "append", "(", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "", "metrics", "=", "self", ".", "compute_metrics", "(", "ind_x", ",", "str_y", ",", "loss", "=", "loss", ".", "item", "(", ")", ",", "metric_names", "=", "metric_names", ")", "\n", "if", "\"pred\"", "in", "metric_names", ":", "\n", "            ", "metrics", "[", "\"pred\"", "]", ".", "extend", "(", "[", "batch_data", "[", "\"unchanged_labels\"", "]", ",", "batch_data", "[", "\"names\"", "]", "]", ")", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.compute_metrics": [[113, 130], ["list", "dict", "len", "trainer_pg_ctc.TrainerPGCTC.ctc_remove_successives_identical_ind", "basic.utils.LM_ind_to_str", "basic.utils.nb_chars_from_list", "editdistance.eval", "basic.utils.edit_wer_from_list", "basic.utils.nb_words_from_list", "zip"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.trainer_pg_ctc.TrainerPGCTC.ctc_remove_successives_identical_ind", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.LM_ind_to_str", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.nb_chars_from_list", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.edit_wer_from_list", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.utils.nb_words_from_list"], ["", "def", "compute_metrics", "(", "self", ",", "ind_x", ",", "str_y", ",", "loss", "=", "None", ",", "metric_names", "=", "list", "(", ")", ")", ":", "\n", "        ", "ind_x", "=", "[", "self", ".", "ctc_remove_successives_identical_ind", "(", "t", ")", "for", "t", "in", "ind_x", "]", "\n", "str_x", "=", "[", "LM_ind_to_str", "(", "self", ".", "dataset", ".", "charset", ",", "t", ",", "oov_symbol", "=", "\"\"", ")", "for", "t", "in", "ind_x", "]", "\n", "metrics", "=", "dict", "(", ")", "\n", "for", "metric_name", "in", "metric_names", ":", "\n", "            ", "if", "metric_name", "==", "\"cer\"", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "[", "editdistance", ".", "eval", "(", "u", ",", "v", ")", "for", "u", ",", "v", "in", "zip", "(", "str_y", ",", "str_x", ")", "]", "\n", "metrics", "[", "\"nb_chars\"", "]", "=", "nb_chars_from_list", "(", "str_y", ")", "\n", "", "elif", "metric_name", "==", "\"wer\"", ":", "\n", "                ", "metrics", "[", "metric_name", "]", "=", "edit_wer_from_list", "(", "str_y", ",", "str_x", ")", "\n", "metrics", "[", "\"nb_words\"", "]", "=", "nb_words_from_list", "(", "str_y", ")", "\n", "", "elif", "metric_name", "==", "\"pred\"", ":", "\n", "                ", "metrics", "[", "\"pred\"", "]", "=", "[", "str_x", ",", "]", "\n", "", "", "if", "\"loss_ctc\"", "in", "metric_names", ":", "\n", "            ", "metrics", "[", "\"loss_ctc\"", "]", "=", "loss", "\n", "", "metrics", "[", "\"nb_samples\"", "]", "=", "len", "(", "str_y", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__": [[42, 48], ["torch.nn.Module.__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "amp", "=", "params", "[", "\"use_amp\"", "]", "\n", "\n", "self", ".", "vocab_size", "=", "params", "[", "\"vocab_size\"", "]", "\n", "self", ".", "end_conv", "=", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "self", ".", "vocab_size", "+", "1", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.models_pg_ctc.Decoder.forward": [[49, 53], ["torch.cuda.amp.autocast", "models_pg_ctc.Decoder.end_conv", "torch.nn.functional.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "autocast", "(", "self", ".", "amp", ")", ":", "\n", "            ", "x", "=", "self", ".", "end_conv", "(", "x", ")", "\n", "return", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.ctc.main_pg_ctc.train_and_test": [[50, 66], ["OCR.document_OCR.ctc.trainer_pg_ctc.TrainerPGCTC", "OCR.document_OCR.ctc.trainer_pg_ctc.TrainerPGCTC.train", "OCR.document_OCR.ctc.trainer_pg_ctc.TrainerPGCTC.load_model", "[].keys", "OCR.document_OCR.ctc.trainer_pg_ctc.TrainerPGCTC.predict"], "function", ["home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.train", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.load_model", "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.basic.generic_training_manager.GenericTrainingManager.predict"], ["def", "train_and_test", "(", "rank", ",", "params", ")", ":", "\n", "    ", "params", "[", "\"training_params\"", "]", "[", "\"ddp_rank\"", "]", "=", "rank", "\n", "model", "=", "TrainerPGCTC", "(", "params", ")", "\n", "# Model is trained until max_time_training or max_nb_epochs is reached", "\n", "model", ".", "train", "(", ")", "\n", "\n", "## load weights giving best CER on valid set", "\n", "model", ".", "params", "[", "\"training_params\"", "]", "[", "\"load_epoch\"", "]", "=", "\"best\"", "\n", "model", ".", "load_model", "(", ")", "\n", "\n", "\n", "## compute metrics on train, valid and test sets (in eval conditions)", "\n", "metrics", "=", "[", "\"cer\"", ",", "\"wer\"", "]", "\n", "for", "dataset_name", "in", "params", "[", "\"dataset_params\"", "]", "[", "\"datasets\"", "]", ".", "keys", "(", ")", ":", "\n", "        ", "for", "set_name", "in", "[", "\"train\"", ",", "\"valid\"", ",", "\"test\"", "]", ":", "\n", "            ", "model", ".", "predict", "(", "\"{}-{}\"", ".", "format", "(", "dataset_name", ",", "set_name", ")", ",", "[", "(", "dataset_name", ",", "set_name", ")", ",", "]", ",", "metrics", ",", "output", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.Datasets.format_datasets.format_IAM_line": [[44, 98], ["os.path.join", "os.path.join", "os.makedirs", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "set", "shutil.rmtree", "os.path.isfile", "print", "exit", "dict", "dict", "dict", "os.path.join", "os.makedirs", "os.path.join", "xml.parse().getroot", "open", "pickle.dump", "os.path.join", "enumerate", "os.path.join", "xml.parse", "[].split", "os.path.join", "line.attrib.get", "charset.union.union", "os.path.join", "os.replace", "sorted", "name.split", "sorted", "set", "list", "os.listdir", "page.attrib.get().split", "page.attrib.get"], "function", ["None"], ["def", "format_IAM_line", "(", ")", ":", "\n", "    ", "\"\"\"\n    Format the IAM dataset at line level with the commonly used split (6,482 for train, 976 for validation and 2,915 for test)\n    \"\"\"", "\n", "source_folder", "=", "\"raw/IAM\"", "\n", "target_folder", "=", "\"formatted/IAM_lines\"", "\n", "tar_filename", "=", "\"lines.tgz\"", "\n", "line_folder_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"lines\"", ")", "\n", "\n", "tar_path", "=", "os", ".", "path", ".", "join", "(", "source_folder", ",", "tar_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "tar_path", ")", ":", "\n", "        ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "tar_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "target_folder", ",", "exist_ok", "=", "True", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "line_folder_path", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "set_names", "=", "[", "\"train\"", ",", "\"valid\"", ",", "\"test\"", "]", "\n", "gt", "=", "{", "\n", "\"train\"", ":", "dict", "(", ")", ",", "\n", "\"valid\"", ":", "dict", "(", ")", ",", "\n", "\"test\"", ":", "dict", "(", ")", "\n", "}", "\n", "charset", "=", "set", "(", ")", "\n", "\n", "for", "set_name", "in", "set_names", ":", "\n", "        ", "id", "=", "0", "\n", "current_folder", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ")", "\n", "os", ".", "makedirs", "(", "current_folder", ",", "exist_ok", "=", "True", ")", "\n", "xml_path", "=", "os", ".", "path", ".", "join", "(", "source_folder", ",", "\"{}.xml\"", ".", "format", "(", "set_name", ")", ")", "\n", "xml_root", "=", "ET", ".", "parse", "(", "xml_path", ")", ".", "getroot", "(", ")", "\n", "for", "page", "in", "xml_root", ":", "\n", "            ", "name", "=", "page", ".", "attrib", ".", "get", "(", "\"FileName\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img_fold_path", "=", "os", ".", "path", ".", "join", "(", "line_folder_path", ",", "name", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ",", "name", ")", "\n", "img_paths", "=", "[", "os", ".", "path", ".", "join", "(", "img_fold_path", ",", "p", ")", "for", "p", "in", "sorted", "(", "os", ".", "listdir", "(", "img_fold_path", ")", ")", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "page", "[", "2", "]", ")", ":", "\n", "                ", "label", "=", "line", ".", "attrib", ".", "get", "(", "\"Value\"", ")", "\n", "img_name", "=", "\"{}_{}.png\"", ".", "format", "(", "set_name", ",", "id", ")", "\n", "gt", "[", "set_name", "]", "[", "img_name", "]", "=", "{", "\n", "\"text\"", ":", "label", ",", "\n", "}", "\n", "charset", "=", "charset", ".", "union", "(", "set", "(", "label", ")", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "current_folder", ",", "img_name", ")", "\n", "os", ".", "replace", "(", "img_paths", "[", "i", "]", ",", "new_path", ")", "\n", "id", "+=", "1", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "line_folder_path", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"labels.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "         ", "pickle", ".", "dump", "(", "{", "\n", "\"ground_truth\"", ":", "gt", ",", "\n", "\"charset\"", ":", "sorted", "(", "list", "(", "charset", ")", ")", ",", "\n", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.Datasets.format_datasets.format_IAM_paragraph": [[100, 181], ["os.path.join", "os.makedirs", "set", "shutil.rmtree", "os.path.join", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "dict", "dict", "dict", "os.path.join", "os.makedirs", "os.path.join", "xml.parse().getroot", "open", "pickle.dump", "os.path.isfile", "print", "exit", "os.path.join", "os.path.join", "os.path.join", "xml.parse", "[].split", "len", "enumerate", "charset.union.union", "PIL.Image.fromarray().save", "sorted", "os.listdir", "int", "int", "int", "int", "lines.append", "set", "PIL.Image.open", "numpy.array", "list", "section.attrib.get", "section.attrib.get", "section.attrib.get", "section.attrib.get", "words.append", "PIL.Image.fromarray", "page.attrib.get().split", "line.attrib.get", "word.attrib.get", "int", "int", "int", "int", "page.attrib.get", "int", "int", "int", "int", "line.attrib.get", "line.attrib.get", "line.attrib.get", "line.attrib.get", "word.attrib.get", "word.attrib.get", "word.attrib.get", "word.attrib.get"], "function", ["None"], ["", "", "def", "format_IAM_paragraph", "(", ")", ":", "\n", "    ", "\"\"\"\n    Format the IAM dataset at paragraph level with the commonly used split (747 for train, 116 for validation and 336 for test)\n    \"\"\"", "\n", "source_folder", "=", "\"raw/IAM\"", "\n", "target_folder", "=", "\"formatted/IAM_paragraph\"", "\n", "img_folder_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"images\"", ")", "\n", "\n", "os", ".", "makedirs", "(", "target_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "tar_filenames", "=", "[", "\"formsA-D.tgz\"", ",", "\"formsE-H.tgz\"", ",", "\"formsI-Z.tgz\"", "]", "\n", "tar_paths", "=", "[", "os", ".", "path", ".", "join", "(", "source_folder", ",", "name", ")", "for", "name", "in", "tar_filenames", "]", "\n", "for", "tar_path", "in", "tar_paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "tar_path", ")", ":", "\n", "            ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "tar_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "img_folder_path", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "gt", "=", "{", "\n", "\"train\"", ":", "dict", "(", ")", ",", "\n", "\"valid\"", ":", "dict", "(", ")", ",", "\n", "\"test\"", ":", "dict", "(", ")", "\n", "}", "\n", "charset", "=", "set", "(", ")", "\n", "\n", "for", "set_name", "in", "[", "\"train\"", ",", "\"valid\"", ",", "\"test\"", "]", ":", "\n", "        ", "new_folder", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ")", "\n", "os", ".", "makedirs", "(", "new_folder", ",", "exist_ok", "=", "True", ")", "\n", "xml_path", "=", "os", ".", "path", ".", "join", "(", "source_folder", ",", "\"{}.xml\"", ".", "format", "(", "set_name", ")", ")", "\n", "xml_root", "=", "ET", ".", "parse", "(", "xml_path", ")", ".", "getroot", "(", ")", "\n", "for", "page", "in", "xml_root", ":", "\n", "            ", "name", "=", "page", ".", "attrib", ".", "get", "(", "\"FileName\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_folder_path", ",", "name", "+", "\".png\"", ")", "\n", "new_name", "=", "\"{}_{}.png\"", ".", "format", "(", "set_name", ",", "len", "(", "os", ".", "listdir", "(", "new_folder", ")", ")", ")", "\n", "new_img_path", "=", "os", ".", "path", ".", "join", "(", "new_folder", ",", "new_name", ")", "\n", "lines", "=", "[", "]", "\n", "full_text", "=", "\"\"", "\n", "for", "section", "in", "page", ":", "\n", "                ", "if", "section", ".", "tag", "!=", "\"Paragraph\"", ":", "\n", "                    ", "continue", "\n", "", "p_left", ",", "p_right", "=", "int", "(", "section", ".", "attrib", ".", "get", "(", "\"Left\"", ")", ")", ",", "int", "(", "section", ".", "attrib", ".", "get", "(", "\"Right\"", ")", ")", "\n", "p_bottom", ",", "p_top", "=", "int", "(", "section", ".", "attrib", ".", "get", "(", "\"Bottom\"", ")", ")", ",", "int", "(", "section", ".", "attrib", ".", "get", "(", "\"Top\"", ")", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "section", ")", ":", "\n", "                    ", "words", "=", "[", "]", "\n", "for", "word", "in", "line", ":", "\n", "                        ", "words", ".", "append", "(", "{", "\n", "\"text\"", ":", "word", ".", "attrib", ".", "get", "(", "\"Value\"", ")", ",", "\n", "\"left\"", ":", "int", "(", "word", ".", "attrib", ".", "get", "(", "\"Left\"", ")", ")", "-", "p_left", ",", "\n", "\"bottom\"", ":", "int", "(", "word", ".", "attrib", ".", "get", "(", "\"Bottom\"", ")", ")", "-", "p_top", ",", "\n", "\"right\"", ":", "int", "(", "word", ".", "attrib", ".", "get", "(", "\"Right\"", ")", ")", "-", "p_left", ",", "\n", "\"top\"", ":", "int", "(", "word", ".", "attrib", ".", "get", "(", "\"Top\"", ")", ")", "-", "p_top", "\n", "}", ")", "\n", "", "lines", ".", "append", "(", "{", "\n", "\"text\"", ":", "line", ".", "attrib", ".", "get", "(", "\"Value\"", ")", ",", "\n", "\"left\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Left\"", ")", ")", "-", "p_left", ",", "\n", "\"bottom\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Bottom\"", ")", ")", "-", "p_top", ",", "\n", "\"right\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Right\"", ")", ")", "-", "p_left", ",", "\n", "\"top\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Top\"", ")", ")", "-", "p_top", ",", "\n", "\"words\"", ":", "words", "\n", "}", ")", "\n", "full_text", "=", "\"{}{}\\n\"", ".", "format", "(", "full_text", ",", "lines", "[", "-", "1", "]", "[", "\"text\"", "]", ")", "\n", "", "paragraph", "=", "{", "\n", "\"text\"", ":", "full_text", "[", ":", "-", "1", "]", ",", "\n", "\"lines\"", ":", "lines", "\n", "}", "\n", "gt", "[", "set_name", "]", "[", "new_name", "]", "=", "paragraph", "\n", "charset", "=", "charset", ".", "union", "(", "set", "(", "full_text", ")", ")", "\n", "\n", "with", "Image", ".", "open", "(", "img_path", ")", "as", "pil_img", ":", "\n", "                    ", "img", "=", "np", ".", "array", "(", "pil_img", ")", "\n", "", "img", "=", "img", "[", "p_top", ":", "p_bottom", "+", "1", ",", "p_left", ":", "p_right", "+", "1", "]", "\n", "Image", ".", "fromarray", "(", "img", ")", ".", "save", "(", "new_img_path", ")", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "img_folder_path", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"labels.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "         ", "pickle", ".", "dump", "(", "{", "\n", "\"ground_truth\"", ":", "gt", ",", "\n", "\"charset\"", ":", "sorted", "(", "list", "(", "charset", ")", ")", ",", "\n", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.Datasets.format_datasets.format_RIMES_line": [[183, 261], ["os.path.join", "os.makedirs", "os.path.join", "os.path.join", "sum", "gt.keys", "set", "zip", "shutil.rmtree", "os.path.join", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "dict", "dict", "dict", "os.makedirs", "xml.parse().getroot", "open", "pickle.dump", "os.path.isfile", "print", "exit", "os.path.isfile", "print", "exit", "os.path.join", "os.path.join", "numpy.array", "os.path.join", "enumerate", "os.path.join", "os.listdir", "xml.parse", "[].split", "PIL.Image.open", "line.attrib.get", "os.path.join", "max", "int", "int", "max", "charset.union.union", "sorted", "len", "int", "line.attrib.get", "line.attrib.get", "int", "PIL.Image.fromarray().save", "set", "list", "int", "os.listdir", "line.attrib.get", "line.attrib.get", "print", "page.attrib.get().split", "PIL.Image.fromarray", "name.split", "page.attrib.get"], "function", ["None"], ["", "", "def", "format_RIMES_line", "(", ")", ":", "\n", "    ", "\"\"\"\n    Format the RIMES dataset at line level with the commonly used split (the last 100 paragraph training samples are taken for the valid set)\n    resulting in: 10,532 for training, 801 for validation and 778 for test.\n    \"\"\"", "\n", "source_folder", "=", "\"raw/RIMES\"", "\n", "target_folder", "=", "\"formatted/RIMES_lines\"", "\n", "img_folder_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"images_gray\"", ")", "\n", "os", ".", "makedirs", "(", "target_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "eval_xml_path", "=", "os", ".", "path", ".", "join", "(", "source_folder", ",", "\"eval_2011_annotated.xml\"", ")", "\n", "train_xml_path", "=", "os", ".", "path", ".", "join", "(", "source_folder", ",", "\"training_2011.xml\"", ")", "\n", "for", "label_path", "in", "[", "eval_xml_path", ",", "train_xml_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "label_path", ")", ":", "\n", "            ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "label_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "", "tar_filenames", "=", "[", "\"eval_2011_gray.tar\"", ",", "\"training_2011_gray.tar\"", "]", "\n", "tar_paths", "=", "[", "os", ".", "path", ".", "join", "(", "source_folder", ",", "name", ")", "for", "name", "in", "tar_filenames", "]", "\n", "for", "tar_path", "in", "tar_paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "tar_path", ")", ":", "\n", "            ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "tar_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "target_folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "nb_training_samples", "=", "sum", "(", "[", "1", "if", "\"train\"", "in", "name", "else", "0", "for", "name", "in", "os", ".", "listdir", "(", "img_folder_path", ")", "]", ")", "\n", "nb_valid_samples", "=", "100", "\n", "begin_valid_ind", "=", "nb_training_samples", "-", "nb_valid_samples", "\n", "\n", "gt", "=", "{", "\n", "\"train\"", ":", "dict", "(", ")", ",", "\n", "\"valid\"", ":", "dict", "(", ")", ",", "\n", "\"test\"", ":", "dict", "(", ")", "\n", "}", "\n", "\n", "for", "set_name", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "charset", "=", "set", "(", ")", "\n", "for", "set_name", ",", "xml_path", "in", "zip", "(", "[", "\"train\"", ",", "\"eval\"", "]", ",", "[", "train_xml_path", ",", "eval_xml_path", "]", ")", ":", "\n", "        ", "xml_root", "=", "ET", ".", "parse", "(", "xml_path", ")", ".", "getroot", "(", ")", "\n", "for", "page", "in", "xml_root", ":", "\n", "            ", "name", "=", "page", ".", "attrib", ".", "get", "(", "\"FileName\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_folder_path", ",", "name", "+", "\".png\"", ")", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "img_path", ",", "\"r\"", ")", ")", "\n", "if", "set_name", "==", "\"train\"", ":", "\n", "                ", "new_set_name", "=", "\"train\"", "if", "int", "(", "name", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", "<", "begin_valid_ind", "else", "\"valid\"", "\n", "", "else", ":", "\n", "                ", "new_set_name", "=", "\"test\"", "\n", "", "fold", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "new_set_name", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "page", "[", "0", "]", ")", ":", "\n", "                ", "label", "=", "line", ".", "attrib", ".", "get", "(", "\"Value\"", ")", "\n", "new_name", "=", "\"{}_{}.png\"", ".", "format", "(", "new_set_name", ",", "len", "(", "os", ".", "listdir", "(", "fold", ")", ")", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "fold", ",", "new_name", ")", "\n", "left", "=", "max", "(", "0", ",", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Left\"", ")", ")", ")", "\n", "bottom", "=", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Bottom\"", ")", ")", "\n", "right", "=", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Right\"", ")", ")", "\n", "top", "=", "max", "(", "0", ",", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Top\"", ")", ")", ")", "\n", "line_img", "=", "img", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "try", ":", "\n", "                    ", "Image", ".", "fromarray", "(", "line_img", ")", ".", "save", "(", "new_path", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"problem\"", ")", "\n", "", "paragraph", "=", "{", "\n", "\"text\"", ":", "label", ",", "\n", "}", "\n", "charset", "=", "charset", ".", "union", "(", "set", "(", "label", ")", ")", "\n", "gt", "[", "new_set_name", "]", "[", "new_name", "]", "=", "paragraph", "\n", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"labels.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "         ", "pickle", ".", "dump", "(", "{", "\n", "\"ground_truth\"", ":", "gt", ",", "\n", "\"charset\"", ":", "sorted", "(", "list", "(", "charset", ")", ")", ",", "\n", "}", ",", "f", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "img_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.Datasets.format_datasets.format_RIMES_paragraph": [[263, 343], ["os.path.join", "os.makedirs", "os.path.join", "os.path.join", "sum", "gt.keys", "set", "zip", "shutil.rmtree", "os.path.join", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "dict", "dict", "dict", "os.makedirs", "xml.parse().getroot", "open", "pickle.dump", "os.path.isfile", "print", "exit", "os.path.isfile", "print", "exit", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.replace", "enumerate", "charset.union.union", "os.path.join", "os.listdir", "xml.parse", "[].split", "len", "lines.append", "set", "sorted", "os.listdir", "list", "int", "line.attrib.get", "int", "int", "int", "int", "page.attrib.get().split", "line.attrib.get", "line.attrib.get", "line.attrib.get", "line.attrib.get", "name.split", "page.attrib.get"], "function", ["None"], ["", "def", "format_RIMES_paragraph", "(", ")", ":", "\n", "    ", "\"\"\"\n    Format the RIMES dataset at paragraph level with the official split (the last 100 training samples are taken for the valid set)\n    resulting in 1,400 for training, 100 for validation and 100 for test\n    \"\"\"", "\n", "source_folder", "=", "\"raw/RIMES\"", "\n", "target_folder", "=", "\"formatted/RIMES_paragraph\"", "\n", "img_folder_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"images_gray\"", ")", "\n", "os", ".", "makedirs", "(", "target_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "eval_xml_path", "=", "os", ".", "path", ".", "join", "(", "source_folder", ",", "\"eval_2011_annotated.xml\"", ")", "\n", "train_xml_path", "=", "os", ".", "path", ".", "join", "(", "source_folder", ",", "\"training_2011.xml\"", ")", "\n", "for", "label_path", "in", "[", "eval_xml_path", ",", "train_xml_path", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "label_path", ")", ":", "\n", "            ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "label_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "", "tar_filenames", "=", "[", "\"eval_2011_gray.tar\"", ",", "\"training_2011_gray.tar\"", "]", "\n", "tar_paths", "=", "[", "os", ".", "path", ".", "join", "(", "source_folder", ",", "name", ")", "for", "name", "in", "tar_filenames", "]", "\n", "for", "tar_path", "in", "tar_paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "tar_path", ")", ":", "\n", "            ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "tar_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "target_folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "nb_training_samples", "=", "sum", "(", "[", "1", "if", "\"train\"", "in", "name", "else", "0", "for", "name", "in", "os", ".", "listdir", "(", "img_folder_path", ")", "]", ")", "\n", "nb_valid_samples", "=", "100", "\n", "begin_valid_ind", "=", "nb_training_samples", "-", "nb_valid_samples", "\n", "\n", "gt", "=", "{", "\n", "\"train\"", ":", "dict", "(", ")", ",", "\n", "\"valid\"", ":", "dict", "(", ")", ",", "\n", "\"test\"", ":", "dict", "(", ")", "\n", "}", "\n", "\n", "for", "set_name", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "charset", "=", "set", "(", ")", "\n", "for", "set_name", ",", "xml_path", "in", "zip", "(", "[", "\"train\"", ",", "\"eval\"", "]", ",", "[", "train_xml_path", ",", "eval_xml_path", "]", ")", ":", "\n", "        ", "xml_root", "=", "ET", ".", "parse", "(", "xml_path", ")", ".", "getroot", "(", ")", "\n", "for", "page", "in", "xml_root", ":", "\n", "            ", "name", "=", "page", ".", "attrib", ".", "get", "(", "\"FileName\"", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_folder_path", ",", "name", "+", "\".png\"", ")", "\n", "if", "set_name", "==", "\"train\"", ":", "\n", "                ", "new_set_name", "=", "\"train\"", "if", "int", "(", "name", ".", "split", "(", "\"-\"", ")", "[", "-", "1", "]", ")", "<", "begin_valid_ind", "else", "\"valid\"", "\n", "", "else", ":", "\n", "                ", "new_set_name", "=", "\"test\"", "\n", "", "fold", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "new_set_name", ")", "\n", "new_name", "=", "\"{}_{}.png\"", ".", "format", "(", "new_set_name", ",", "len", "(", "os", ".", "listdir", "(", "fold", ")", ")", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "fold", ",", "new_name", ")", "\n", "os", ".", "replace", "(", "img_path", ",", "new_path", ")", "\n", "lines", "=", "[", "]", "\n", "full_text", "=", "\"\"", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "page", "[", "0", "]", ")", ":", "\n", "\n", "                ", "lines", ".", "append", "(", "{", "\n", "\"text\"", ":", "line", ".", "attrib", ".", "get", "(", "\"Value\"", ")", ",", "\n", "\"left\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Left\"", ")", ")", ",", "\n", "\"bottom\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Bottom\"", ")", ")", ",", "\n", "\"right\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Right\"", ")", ")", ",", "\n", "\"top\"", ":", "int", "(", "line", ".", "attrib", ".", "get", "(", "\"Top\"", ")", ")", ",", "\n", "}", ")", "\n", "full_text", "=", "\"{}{}\\n\"", ".", "format", "(", "full_text", ",", "lines", "[", "-", "1", "]", "[", "\"text\"", "]", ")", "\n", "", "paragraph", "=", "{", "\n", "\"text\"", ":", "full_text", "[", ":", "-", "1", "]", ",", "\n", "\"lines\"", ":", "lines", "\n", "}", "\n", "charset", "=", "charset", ".", "union", "(", "set", "(", "full_text", ")", ")", "\n", "gt", "[", "new_set_name", "]", "[", "new_name", "]", "=", "paragraph", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"labels.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "         ", "pickle", ".", "dump", "(", "{", "\n", "\"ground_truth\"", ":", "gt", ",", "\n", "\"charset\"", ":", "sorted", "(", "list", "(", "charset", ")", ")", ",", "\n", "}", ",", "f", ")", "\n", "\n", "", "shutil", ".", "rmtree", "(", "img_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.Datasets.format_datasets.format_READ2016_line": [[345, 429], ["os.path.isdir", "os.makedirs", "os.rename", "os.rename", "os.rename", "os.rmdir", "set", "shutil.rmtree", "os.path.join", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.rmdir", "dict", "dict", "dict", "os.path.join", "os.path.join", "sorted", "shutil.rmtree", "open", "pickle.dump", "os.path.isfile", "print", "exit", "os.path.join", "os.path.join", "os.path.isfile", "os.path.join", "os.listdir", "os.path.join", "os.path.join", "xml.parse().getroot", "numpy.array", "os.remove", "os.path.join", "os.rename", "xml_file_name.split", "PIL.Image.open", "sorted", "os.path.join", "xml_file_name.split", "xml.parse", "os.path.join", "PIL.Image.fromarray().save", "charset.union.union", "list", "text_region.tag.split", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "balise.tag.split", "sub.attrib[].split", "PIL.Image.fromarray", "sub.tag.split", "list", "list", "y_points.append", "x_points.append", "int", "int", "sub.tag.split", "p.split", "p.split"], "function", ["None"], ["", "def", "format_READ2016_line", "(", ")", ":", "\n", "    ", "\"\"\"\n    Format the READ 2016 dataset at line level with the official split (8,349 for training, 1,040 for validation and 1,138 for test)\n    \"\"\"", "\n", "source_folder", "=", "\"raw/READ_2016\"", "\n", "target_folder", "=", "\"formatted/READ_2016_lines\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "target_folder", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "target_folder", ")", "\n", "", "os", ".", "makedirs", "(", "target_folder", ")", "\n", "\n", "tar_filenames", "=", "[", "\"Test-ICFHR-2016.tgz\"", ",", "\"Train-And-Val-ICFHR-2016.tgz\"", "]", "\n", "tar_paths", "=", "[", "os", ".", "path", ".", "join", "(", "source_folder", ",", "name", ")", "for", "name", "in", "tar_filenames", "]", "\n", "for", "tar_path", "in", "tar_paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "tar_path", ")", ":", "\n", "            ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "tar_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "target_folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"PublicData\"", ",", "\"Training\"", ")", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"train\"", ")", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"PublicData\"", ",", "\"Validation\"", ")", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"valid\"", ")", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"Test-ICFHR-2016\"", ")", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"test\"", ")", ")", "\n", "os", ".", "rmdir", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"PublicData\"", ")", ")", "\n", "for", "set_name", "in", "[", "\"train\"", ",", "\"valid\"", ",", "]", ":", "\n", "        ", "for", "filename", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"Images\"", ")", ")", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"Images\"", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "                ", "os", ".", "rename", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "filename", ")", ")", "\n", "", "", "os", ".", "rmdir", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"Images\"", ")", ")", "\n", "\n", "", "gt", "=", "{", "\n", "\"train\"", ":", "dict", "(", ")", ",", "\n", "\"valid\"", ":", "dict", "(", ")", ",", "\n", "\"test\"", ":", "dict", "(", ")", "\n", "}", "\n", "\n", "charset", "=", "set", "(", ")", "\n", "for", "set_name", "in", "[", "\"train\"", ",", "\"valid\"", ",", "\"test\"", "]", ":", "\n", "        ", "img_fold_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ")", "\n", "xml_fold_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"page\"", ")", "\n", "i", "=", "0", "\n", "for", "xml_file_name", "in", "sorted", "(", "os", ".", "listdir", "(", "xml_fold_path", ")", ")", ":", "\n", "            ", "if", "xml_file_name", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "!=", "\"xml\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "xml_file_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_fold_path", ",", "filename", "+", "\".JPG\"", ")", "\n", "xml_file_path", "=", "os", ".", "path", ".", "join", "(", "xml_fold_path", ",", "xml_file_name", ")", "\n", "xml_root", "=", "ET", ".", "parse", "(", "xml_file_path", ")", ".", "getroot", "(", ")", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "img_path", ")", ")", "\n", "for", "text_region", "in", "xml_root", "[", "1", "]", "[", "1", ":", "]", ":", "\n", "                ", "if", "text_region", ".", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "!=", "\"TextRegion\"", ":", "\n", "                    ", "continue", "\n", "", "for", "balise", "in", "text_region", ":", "\n", "                    ", "if", "balise", ".", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "!=", "\"TextLine\"", ":", "\n", "                        ", "continue", "\n", "", "for", "sub", "in", "balise", ":", "\n", "                        ", "if", "sub", ".", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "==", "\"Coords\"", ":", "\n", "                            ", "points", "=", "sub", ".", "attrib", "[", "\"points\"", "]", ".", "split", "(", "\" \"", ")", "\n", "x_points", ",", "y_points", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "p", "in", "points", ":", "\n", "                                ", "y_points", ".", "append", "(", "int", "(", "p", ".", "split", "(", "\",\"", ")", "[", "1", "]", ")", ")", "\n", "x_points", ".", "append", "(", "int", "(", "p", ".", "split", "(", "\",\"", ")", "[", "0", "]", ")", ")", "\n", "", "", "elif", "sub", ".", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "==", "\"TextEquiv\"", ":", "\n", "                            ", "line_label", "=", "sub", "[", "0", "]", ".", "text", "\n", "", "", "if", "line_label", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "top", ",", "bottom", ",", "left", ",", "right", "=", "np", ".", "min", "(", "y_points", ")", ",", "np", ".", "max", "(", "y_points", ")", ",", "np", ".", "min", "(", "x_points", ")", ",", "np", ".", "max", "(", "x_points", ")", "\n", "new_img_name", "=", "\"{}_{}.jpeg\"", ".", "format", "(", "set_name", ",", "i", ")", "\n", "new_img_path", "=", "os", ".", "path", ".", "join", "(", "img_fold_path", ",", "new_img_name", ")", "\n", "curr_img", "=", "img", "[", "top", ":", "bottom", "+", "1", ",", "left", ":", "right", "+", "1", "]", "\n", "Image", ".", "fromarray", "(", "curr_img", ")", ".", "save", "(", "new_img_path", ")", "\n", "gt", "[", "set_name", "]", "[", "new_img_name", "]", "=", "{", "\"text\"", ":", "line_label", ",", "}", "\n", "charset", "=", "charset", ".", "union", "(", "line_label", ")", "\n", "i", "+=", "1", "\n", "line_label", "=", "None", "\n", "", "", "os", ".", "remove", "(", "img_path", ")", "\n", "", "shutil", ".", "rmtree", "(", "xml_fold_path", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"labels.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "\n", "\"ground_truth\"", ":", "gt", ",", "\n", "\"charset\"", ":", "sorted", "(", "list", "(", "charset", ")", ")", ",", "\n", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FactoDeepLearning_SPAN.Datasets.format_datasets.format_READ2016_paragraph": [[431, 512], ["os.path.isdir", "os.makedirs", "os.rename", "os.rename", "os.rename", "os.rmdir", "set", "shutil.rmtree", "os.path.join", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.rmdir", "dict", "dict", "dict", "os.path.join", "os.path.join", "os.listdir", "shutil.rmtree", "open", "pickle.dump", "os.path.isfile", "print", "exit", "os.path.join", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "os.path.join", "xml.parse().getroot", "numpy.array", "os.remove", "os.path.join", "os.rename", "xml_file_name.split", "PIL.Image.open", "os.path.join", "PIL.Image.fromarray().save", "charset.union.union", "sorted", "os.path.join", "xml_file_name.split", "xml.parse", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "list", "text_region.tag.split", "balise.attrib[].split", "PIL.Image.fromarray", "balise.tag.split", "list", "list", "y_points.append", "x_points.append", "balise.tag.split", "int", "int", "p.split", "p.split"], "function", ["None"], ["", "", "def", "format_READ2016_paragraph", "(", ")", ":", "\n", "    ", "\"\"\"\n    Format the READ 2016 dataset at paragraph level with the official split (1,584 for training 179, for validation and 197 for test)\n    \"\"\"", "\n", "source_folder", "=", "\"raw/READ_2016\"", "\n", "target_folder", "=", "\"formatted/READ_2016_paragraph\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "target_folder", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "target_folder", ")", "\n", "", "os", ".", "makedirs", "(", "target_folder", ")", "\n", "\n", "tar_filenames", "=", "[", "\"Test-ICFHR-2016.tgz\"", ",", "\"Train-And-Val-ICFHR-2016.tgz\"", "]", "\n", "tar_paths", "=", "[", "os", ".", "path", ".", "join", "(", "source_folder", ",", "name", ")", "for", "name", "in", "tar_filenames", "]", "\n", "for", "tar_path", "in", "tar_paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "tar_path", ")", ":", "\n", "            ", "print", "(", "\"error - {} not found\"", ".", "format", "(", "tar_path", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "tar", "=", "tarfile", ".", "open", "(", "tar_path", ")", "\n", "tar", ".", "extractall", "(", "target_folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"PublicData\"", ",", "\"Training\"", ")", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"train\"", ")", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"PublicData\"", ",", "\"Validation\"", ")", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"valid\"", ")", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"Test-ICFHR-2016\"", ")", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"test\"", ")", ")", "\n", "os", ".", "rmdir", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"PublicData\"", ")", ")", "\n", "for", "set_name", "in", "[", "\"train\"", ",", "\"valid\"", ",", "]", ":", "\n", "        ", "for", "filename", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"Images\"", ")", ")", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"Images\"", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "                ", "os", ".", "rename", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "filename", ")", ")", "\n", "", "", "os", ".", "rmdir", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"Images\"", ")", ")", "\n", "\n", "", "gt", "=", "{", "\n", "\"train\"", ":", "dict", "(", ")", ",", "\n", "\"valid\"", ":", "dict", "(", ")", ",", "\n", "\"test\"", ":", "dict", "(", ")", "\n", "}", "\n", "\n", "charset", "=", "set", "(", ")", "\n", "for", "set_name", "in", "[", "\"train\"", ",", "\"valid\"", ",", "\"test\"", "]", ":", "\n", "        ", "img_fold_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ")", "\n", "xml_fold_path", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "set_name", ",", "\"page\"", ")", "\n", "i", "=", "0", "\n", "for", "xml_file_name", "in", "os", ".", "listdir", "(", "xml_fold_path", ")", ":", "\n", "            ", "if", "xml_file_name", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "!=", "\"xml\"", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "xml_file_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_fold_path", ",", "filename", "+", "\".JPG\"", ")", "\n", "xml_file_path", "=", "os", ".", "path", ".", "join", "(", "xml_fold_path", ",", "xml_file_name", ")", "\n", "xml_root", "=", "ET", ".", "parse", "(", "xml_file_path", ")", ".", "getroot", "(", ")", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "img_path", ")", ")", "\n", "for", "text_region", "in", "xml_root", "[", "1", "]", "[", "1", ":", "]", ":", "\n", "                ", "if", "text_region", ".", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "!=", "\"TextRegion\"", ":", "\n", "                    ", "continue", "\n", "", "for", "balise", "in", "text_region", ":", "\n", "                    ", "if", "balise", ".", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "==", "\"Coords\"", ":", "\n", "                        ", "points", "=", "balise", ".", "attrib", "[", "\"points\"", "]", ".", "split", "(", "\" \"", ")", "\n", "x_points", ",", "y_points", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "p", "in", "points", ":", "\n", "                            ", "y_points", ".", "append", "(", "int", "(", "p", ".", "split", "(", "\",\"", ")", "[", "1", "]", ")", ")", "\n", "x_points", ".", "append", "(", "int", "(", "p", ".", "split", "(", "\",\"", ")", "[", "0", "]", ")", ")", "\n", "", "", "if", "balise", ".", "tag", ".", "split", "(", "\"}\"", ")", "[", "-", "1", "]", "==", "\"TextEquiv\"", ":", "\n", "                        ", "pg_label", "=", "balise", "[", "0", "]", ".", "text", "\n", "", "", "if", "pg_label", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "top", ",", "bottom", ",", "left", ",", "right", "=", "np", ".", "min", "(", "y_points", ")", ",", "np", ".", "max", "(", "y_points", ")", ",", "np", ".", "min", "(", "x_points", ")", ",", "np", ".", "max", "(", "x_points", ")", "\n", "new_img_name", "=", "\"{}_{}.jpeg\"", ".", "format", "(", "set_name", ",", "i", ")", "\n", "new_img_path", "=", "os", ".", "path", ".", "join", "(", "img_fold_path", ",", "new_img_name", ")", "\n", "curr_img", "=", "img", "[", "top", ":", "bottom", "+", "1", ",", "left", ":", "right", "+", "1", "]", "\n", "Image", ".", "fromarray", "(", "curr_img", ")", ".", "save", "(", "new_img_path", ")", "\n", "gt", "[", "set_name", "]", "[", "new_img_name", "]", "=", "{", "\"text\"", ":", "pg_label", ",", "}", "\n", "charset", "=", "charset", ".", "union", "(", "pg_label", ")", "\n", "i", "+=", "1", "\n", "pg_label", "=", "None", "\n", "", "os", ".", "remove", "(", "img_path", ")", "\n", "", "shutil", ".", "rmtree", "(", "xml_fold_path", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "target_folder", ",", "\"labels.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "\n", "\"ground_truth\"", ":", "gt", ",", "\n", "\"charset\"", ":", "sorted", "(", "list", "(", "charset", ")", ")", ",", "\n", "}", ",", "f", ")", "\n", "\n"]]}