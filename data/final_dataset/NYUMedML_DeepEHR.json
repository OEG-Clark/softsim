{"home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text.__init__": [[18, 48], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "list", "embedding.size", "embedding.size", "models2.CNN_Text.fc.parameters", "list", "list", "list", "range", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "c.parameters", "b.parameters", "models2.CNN_Text.embed.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "CNN_Text", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "filters", "=", "args", ".", "h", "\n", "\n", "Ks", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "args", ".", "kernels", "+", "1", ")", "]", "\n", "C", "=", "args", ".", "n_out", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "emb_dim", ",", "filters", ",", "K", ")", "for", "K", "in", "Ks", "]", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "filters", ")", "for", "K", "in", "Ks", "]", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "len", "(", "Ks", ")", "*", "filters", ",", "C", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "b", "in", "self", ".", "bn", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "b", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "train_embed", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text.fc_layer": [[50, 61], ["layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "batch_norm", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "args", ".", "dropout", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text.encoder": [[62, 69], ["models2.CNN_Text.embed", "x.transpose.transpose.transpose", "models2.CNN_Text.fc_layer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "h", "=", "[", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "convs", "[", "i", "]", ",", "self", ".", "bn", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", "]", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text.forward": [[70, 80], ["models2.CNN_Text.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models2.CNN_Text.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.encoder"], ["", "def", "forward", "(", "self", ",", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", ":", "\n", "\n", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "Note", ")", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "h", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Dense.__init__": [[84, 120], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "list", "embedding.size", "embedding.size", "models2.CNN_Dense.fc.parameters", "list", "list", "list", "models2.CNN_Dense.dense.parameters", "models2.CNN_Dense.dense2.parameters", "range", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "len", "c.parameters", "b.parameters", "models2.CNN_Dense.embed.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "CNN_Dense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "filters", "=", "args", ".", "h", "\n", "\n", "Ks", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "args", ".", "kernels", "+", "1", ")", "]", "\n", "C", "=", "3", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "emb_dim", ",", "filters", ",", "K", ")", "for", "K", "in", "Ks", "]", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "filters", ")", "for", "K", "in", "Ks", "]", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "filters", ",", "C", ")", "\n", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "len", "(", "Ks", ")", "*", "filters", ",", "filters", ")", "\n", "self", ".", "dense2", "=", "nn", ".", "Linear", "(", "len", "(", "Ks", ")", "*", "filters", ",", "filters", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "b", "in", "self", ".", "bn", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "b", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "train_embed", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n", "", "self", ".", "params", "+=", "list", "(", "self", ".", "dense", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "dense2", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Dense.fc_layer": [[122, 133], ["layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "batch_norm", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "args", ".", "dropout", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Dense.encoder": [[134, 141], ["models2.CNN_Dense.embed", "x.transpose.transpose.transpose", "models2.CNN_Dense.fc_layer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "h", "=", "[", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "convs", "[", "i", "]", ",", "self", ".", "bn", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", "]", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Dense.forward": [[142, 158], ["models2.CNN_Dense.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "models2.CNN_Dense.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "models2.CNN_Dense.dense", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.encoder"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "x", "[", ":", ",", ":", "3000", "]", ")", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "h", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "dense", "(", "x", ")", ")", "\n", "#x = torch.cat([x,d],1)", "\n", "#x = self.dense2(x) + d", "\n", "#x = d", "\n", "#x = F.dropout(x , .3)", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text_Demo.__init__": [[164, 196], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "embedding.size", "embedding.size", "models2.CNN_Text_Demo.fc.parameters", "list", "list", "list", "models2.CNN_Text_Demo.dense.parameters", "range", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "c.parameters", "b.parameters", "models2.CNN_Text_Demo.embed.parameters", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "CNN_Text_Demo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "filters", "=", "args", ".", "h", "\n", "self", ".", "n_demo_feat", "=", "args", ".", "n_demo_feat", "\n", "\n", "Ks", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "args", ".", "kernels", "+", "1", ")", "]", "\n", "C", "=", "3", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "emb_dim", ",", "filters", ",", "K", ")", "for", "K", "in", "Ks", "]", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "filters", ")", "for", "K", "in", "Ks", "]", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "len", "(", "Ks", ")", "*", "filters", "+", "self", ".", "n_demo_feat", ",", "filters", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "filters", ",", "C", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "b", "in", "self", ".", "bn", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "b", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "train_embed", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n", "", "self", ".", "params", "+=", "list", "(", "self", ".", "dense", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text_Demo.fc_layer": [[197, 207], ["layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "if", "self", ".", "args", ".", "batch_norm", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "args", ".", "dropout", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text_Demo.encoder": [[208, 215], ["models2.CNN_Text_Demo.embed", "x.transpose.transpose.transpose", "models2.CNN_Text_Demo.fc_layer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "h", "=", "[", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "convs", "[", "i", "]", ",", "self", ".", "bn", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", "]", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_Text_Demo.forward": [[216, 232], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models2.CNN_Text_Demo.encoder", "torch.relu.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "models2.CNN_Text_Demo.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "models2.CNN_Text_Demo.dense", "Age[].float", "Demo[].float", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.encoder"], ["", "def", "forward", "(", "self", ",", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", ":", "\n", "\n", "        ", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "\n", "text", "=", "Note", "\n", "demo", "=", "torch", ".", "cat", "(", "[", "Num", ",", "Age", "[", ":", ",", "0", "]", ".", "float", "(", ")", ",", "Demo", "[", ":", ",", "0", "]", ".", "float", "(", ")", "]", ",", "1", ")", "\n", "\n", "h", "=", "self", ".", "encoder", "(", "text", ")", "\n", "h", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "h", "]", "\n", "\n", "h", ".", "append", "(", "demo", ")", "\n", "h", "=", "torch", ".", "cat", "(", "h", ",", "1", ")", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "dense", "(", "h", ")", ")", "\n", "y_hat", "=", "self", ".", "fc", "(", "h", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_H.__init__": [[238, 281], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "list", "embedding.size", "embedding.size", "models2.CNN_H.fc.parameters", "list", "list", "range", "c.parameters", "models2.CNN_H.embed.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "CNN_H", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "filters", "=", "args", ".", "h", "\n", "\n", "Ks", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "args", ".", "kernels", ")", "]", "\n", "C", "=", "1", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "emb_dim", ",", "filters", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "filters", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "filters", ",", "filters", ",", "2", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "filters", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "filters", ",", "filters", ",", "2", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "filters", ")", "\n", "\n", "#self.convs = nn.ModuleList([nn.Conv1d(filters, filters, 2 ) for K in Ks])", "\n", "#self.bn = nn.ModuleList([nn.BatchNorm1d(filters) for K in Ks])", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "3", "*", "filters", ",", "C", ")", "\n", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "c", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "bn1", ",", "self", ".", "bn2", ",", "self", ".", "bn3", "]", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "\n", "#for c in self.convs:", "\n", "#    self.params += list(c.parameters())", "\n", "\n", "#for b in self.bn:", "\n", "#    self.params += list(b.parameters())", "\n", "\n", "", "if", "args", ".", "train_embed", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_H.fc_layer": [[283, 294], ["layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "batch_norm", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "args", ".", "dropout", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_H.encoder": [[295, 309], ["models2.CNN_H.embed", "x.transpose.transpose.transpose", "models2.CNN_H.fc_layer", "models2.CNN_H.fc_layer", "models2.CNN_H.fc_layer"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "h1", "=", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "conv1", ",", "self", ".", "bn1", ")", "\n", "h2", "=", "self", ".", "fc_layer", "(", "h1", ",", "self", ".", "conv2", ",", "self", ".", "bn2", ")", "\n", "h3", "=", "self", ".", "fc_layer", "(", "h2", ",", "self", ".", "conv3", ",", "self", ".", "bn3", ")", "\n", "\n", "#h1 = F.max_pool1d(h1,h1.size(2)).squeeze(2)", "\n", "#h2 = F.max_pool1d(h2,h2.size(2)).squeeze(2)", "\n", "#h3 = F.max_pool1d(h3,h3.size(2)).squeeze(2)", "\n", "\n", "#h = [ self.fc_layer( x, self.convs[i], self.bn[i]) for i in range(len(self.convs) )]", "\n", "return", "[", "h1", ",", "h2", ",", "h3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_H.forward": [[310, 322], ["models2.CNN_H.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models2.CNN_H.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.encoder"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "h", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.__init__": [[325, 360], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "list", "embedding.size", "embedding.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models2.CNN_NonNeg.conv1.parameters", "list", "list", "list", "range", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "c.parameters", "b.parameters", "models2.CNN_NonNeg.embed.parameters", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "CNN_NonNeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "filters", "=", "args", ".", "h", "\n", "\n", "Ks", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "args", ".", "kernels", "+", "1", ")", "]", "\n", "C", "=", "1", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "emb_dim", ",", "filters", ",", "1", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "filters", ",", "filters", ",", "K", ")", "for", "K", "in", "Ks", "]", ")", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "filters", ")", "for", "K", "in", "Ks", "]", ")", "\n", "\n", "self", ".", "params", "=", "[", "]", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", ".01", "*", "torch", ".", "randn", "(", "len", "(", "Ks", ")", "*", "filters", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "params", "+=", "[", "self", ".", "W", ",", "self", ".", "b", "]", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "conv1", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "b", "in", "self", ".", "bn", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "b", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "train_embed", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.fc_layer": [[362, 373], ["layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "if", "self", ".", "args", ".", "batch_norm", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "args", ".", "dropout", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.encoder": [[374, 382], ["models2.CNN_NonNeg.embed", "torch.relu.transpose", "torch.relu", "torch.relu", "torch.relu", "models2.CNN_NonNeg.conv1", "models2.CNN_NonNeg.fc_layer", "range", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n", "h", "=", "[", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "convs", "[", "i", "]", ",", "self", ".", "bn", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", "]", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.forward": [[383, 395], ["models2.CNN_NonNeg.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "models2.CNN_NonNeg.b.expand_as", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.CNN_NonNeg.encoder"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "h", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "\n", "x", "=", "torch", ".", "matmul", "(", "x", ",", "torch", ".", "abs", "(", "self", ".", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "b", ".", "expand_as", "(", "x", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.DWAN.__init__": [[401, 429], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "embedding.size", "embedding.size", "list", "list", "models2.DWAN.bn0.parameters", "list", "models2.DWAN.bn2.parameters", "list", "models2.DWAN.bn1.parameters", "list", "list", "models2.DWAN.fc4.parameters", "models2.DWAN.fc1.parameters", "models2.DWAN.fc2.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "DWAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "self", ".", "args", "=", "args", "\n", "h", "=", "args", ".", "h", "\n", "C", "=", "1", "\n", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "h", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "h", ",", "h", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "h", ",", "h", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "h", ",", "C", ")", "\n", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "h", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "h", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "h", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "h", ")", "\n", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "fc1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "fc2", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "fc4", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "bn1", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "bn2", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "bn0", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.DWAN.fc_layer": [[432, 443], ["layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "if", "self", ".", "args", ".", "batch_norm", ":", "\n", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "args", ".", "dropout", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.DWAN.forward": [[445, 458], ["models2.DWAN.embed", "models2.DWAN.transpose", "models2.DWAN.mean", "models2.DWAN.fc_layer", "models2.DWAN.fc_layer", "models2.DWAN.fc_layer", "models2.DWAN.fc4", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "mean", "(", "2", ")", "\n", "\n", "x", "=", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "fc1", ",", "self", ".", "bn1", ")", "\n", "x", "=", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "fc2", ",", "self", ".", "bn2", ")", "\n", "x", "=", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "fc3", ",", "self", ".", "bn3", ")", "\n", "\n", "x", "=", "self", ".", "fc4", "(", "x", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.LSTM_Text.__init__": [[462, 486], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GRU", "torch.GRU", "torch.GRU", "list", "embedding.size", "embedding.size", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "models2.LSTM_Text.dense.parameters", "models2.LSTM_Text.lstm.parameters", "models2.LSTM_Text.fc.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "LSTM_Text", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "n_demo_feat", "=", "61", "\n", "self", ".", "args", "=", "args", "\n", "\n", "C", "=", "3", "\n", "h", "=", "args", ".", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "512", "+", "self", ".", "n_demo_feat", ",", "256", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "GRU", "(", "emb_dim", ",", "h", ",", "1", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "args", ".", "bidir", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "\n", "if", "args", ".", "bidir", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "h", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "h", ",", "C", ")", "\n", "\n", "", "self", ".", "params", "=", "list", "(", "self", ".", "lstm", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "dense", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.LSTM_Text.forward": [[487, 513], ["models2.LSTM_Text.embed", "x[].float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "models2.LSTM_Text.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "models2.LSTM_Text.dense", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "h0.cuda.cuda.cuda", "models2.LSTM_Text.lstm", "torch.relu.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "h0.cuda.cuda.cuda", "models2.LSTM_Text.lstm", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "E", "=", "self", ".", "embed", "(", "x", "[", ":", ",", ":", "3000", "]", ")", "\n", "demo", "=", "x", "[", ":", ",", "3000", ":", "3061", "]", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "bidir", ":", "\n", "            ", "h0", "=", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "x", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "h", ")", ")", "\n", "if", "self", ".", "args", ".", "gpu", ":", "\n", "                ", "h0", "=", "h0", ".", "cuda", "(", ")", "\n", "\n", "", "z", "=", "self", ".", "lstm", "(", "E", ",", "h0", ")", "[", "0", "]", "\n", "z", "=", "z", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "h0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "x", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "h", ")", ")", "\n", "if", "self", ".", "args", ".", "gpu", ":", "\n", "                ", "h0", "=", "h0", ".", "cuda", "(", ")", "\n", "\n", "", "z", "=", "self", ".", "lstm", "(", "E", ",", "h0", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "", "z", "=", "torch", ".", "cat", "(", "[", "z", ",", "demo", "]", ",", "1", ")", "\n", "z", "=", "F", ".", "relu", "(", "self", ".", "dense", "(", "z", ")", ")", "\n", "\n", "y_hat", "=", "self", ".", "fc", "(", "z", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.LSTM_TR.__init__": [[517, 536], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "embedding.size", "embedding.size", "list", "list", "models2.LSTM_TR.lstm.parameters", "models2.LSTM_TR.fc.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ")", ":", "\n", "\n", "        ", "super", "(", "LSTM_TR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "C", "=", "1", "\n", "h", "=", "128", "\n", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "GRU", "(", "emb_dim", ",", "h", ",", "1", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Conv1d", "(", "h", ",", "C", ",", "1", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "lstm", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.LSTM_TR.forward": [[537, 551], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "models2.LSTM_TR.embed", "z.transpose.transpose.transpose", "models2.LSTM_TR.fc", "torch.sigmoid.mean().squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models2.LSTM_TR.lstm", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.sigmoid.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "h0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "x", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "h", ")", ")", ".", "cuda", "(", ")", "\n", "E", "=", "self", ".", "embed", "(", "x", ")", "\n", "z", "=", "self", ".", "lstm", "(", "E", ",", "h0", ")", "[", "0", "]", "\n", "z", "=", "z", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "y_hat", "=", "self", ".", "fc", "(", "z", ")", "\n", "\n", "y_hat", "=", "y_hat", ".", "mean", "(", "2", ")", ".", "squeeze", "(", ")", "\n", "\n", "y_hat", "=", "F", ".", "sigmoid", "(", "y_hat", ")", "\n", "\n", "return", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.LSTM_TR.predict": [[553, 558], ["models2.LSTM_TR.forward", "models2.LSTM_TR.mean().squeeze", "models2.LSTM_TR.mean"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.forward"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "y_hat", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "return", "y_hat", ".", "mean", "(", "2", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.SentCNN.__init__": [[563, 597], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "list", "torch.GRU", "torch.GRU", "torch.GRU", "list", "embedding.size", "embedding.size", "models2.SentCNN.fc.parameters", "list", "list", "models2.SentCNN.gru.parameters", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "c.parameters", "b.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "sent_len", ",", "doc_len", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "SentCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sent_len", "=", "sent_len", "\n", "self", ".", "doc_len", "=", "doc_len", "\n", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "\n", "self", ".", "args", "=", "args", "\n", "filters", "=", "128", "\n", "Ks", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "#self.convs = nn.ModuleList([nn.Conv1d(emb_dim, filters, K ) for K in Ks])", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "filters", ",", "filters", ",", "K", ")", "for", "K", "in", "Ks", "]", ")", "\n", "self", ".", "h", "=", "filters", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "filters", ")", "for", "K", "in", "Ks", "]", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "len", "(", "Ks", ")", "*", "filters", ",", "1", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "b", "in", "self", ".", "bn", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "b", ".", "parameters", "(", ")", ")", "\n", "\n", "\n", "\n", "", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "emb_dim", ",", "filters", ",", "1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "gru", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.SentCNN.fc_layer": [[598, 609], ["layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "if", "self", ".", "args", ".", "batch_norm", ":", "\n", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "args", ".", "dropout", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.SentCNN.forward": [[611, 637], ["models2.SentCNN.view", "models2.SentCNN.embed", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "models2.SentCNN.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models2.SentCNN.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "models2.SentCNN.size", "models2.SentCNN.gru", "models2.SentCNN.fc_layer", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size", "torch.stack.size", "torch.stack.size", "torch.stack.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "sent_len", ")", "\n", "\n", "E", "=", "self", ".", "embed", "(", "x", ")", "\n", "h0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "E", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "h", ")", ")", ".", "cuda", "(", ")", "\n", "E", "=", "self", ".", "gru", "(", "E", ",", "h0", ")", "[", "1", "]", "\n", "E", "=", "torch", ".", "squeeze", "(", "E", ")", "\n", "E", "=", "torch", ".", "chunk", "(", "E", ",", "batch_size", ",", "0", ")", "\n", "E", "=", "torch", ".", "stack", "(", "E", ")", "\n", "\n", "x", "=", "E", "\n", "#x = E.sum(2)", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "\n", "x", "=", "[", "self", ".", "fc_layer", "(", "x", ",", "self", ".", "convs", "[", "i", "]", ",", "self", ".", "bn", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", "]", "\n", "\n", "#x = [F.relu(conv(x)) for conv in self.convs]", "\n", "#x = [ fc_layer( self, x,  self.convs[i], self.bn[i] for i in range(3)]", "\n", "x", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "x", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.SentLSTM.__init__": [[642, 667], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.GRU", "torch.GRU", "torch.GRU", "embedding.size", "embedding.size", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "models2.SentLSTM.lstm.parameters", "models2.SentLSTM.fc.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "sent_len", ",", "doc_len", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "SentLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sent_len", "=", "sent_len", "\n", "self", ".", "doc_len", "=", "doc_len", "\n", "\n", "self", ".", "args", "=", "args", "\n", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_words", ",", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "\n", "h", "=", "128", "\n", "self", ".", "h", "=", "h", "\n", "C", "=", "1", "\n", "self", ".", "lstm", "=", "nn", ".", "GRU", "(", "emb_dim", ",", "h", ",", "1", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "args", ".", "bidir", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "\n", "if", "args", ".", "bidir", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2", "*", "h", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "h", ",", "C", ")", "\n", "\n", "", "self", ".", "params", "=", "list", "(", "self", ".", "lstm", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.SentLSTM.forward": [[669, 702], ["x.view.view.view", "models2.SentLSTM.embed", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "E.sum.sum.sum", "models2.SentLSTM.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x.view.view.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "h0.cuda.cuda.cuda", "models2.SentLSTM.lstm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "h0.cuda.cuda.cuda", "z[].squeeze", "z[].squeeze", "models2.SentLSTM.lstm", "E.sum.sum.size", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "sent_len", ")", "\n", "\n", "E", "=", "self", ".", "embed", "(", "x", ")", "\n", "\n", "E", "=", "torch", ".", "chunk", "(", "E", ",", "batch_size", ",", "0", ")", "\n", "E", "=", "torch", ".", "stack", "(", "E", ")", "\n", "\n", "E", "=", "E", ".", "sum", "(", "2", ")", "\n", "#x = x.transpose(1,2)", "\n", "\n", "if", "self", ".", "args", ".", "bidir", ":", "\n", "\n", "            ", "h0", "=", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "E", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "h", ")", ")", "\n", "if", "self", ".", "args", ".", "gpu", ":", "\n", "                ", "h0", "=", "h0", ".", "cuda", "(", ")", "\n", "\n", "", "z", "=", "self", ".", "lstm", "(", "E", ",", "h0", ")", "[", "0", "]", "\n", "#z = F.max_pool1d(z, x.shape[1])", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", "[", "0", "]", ".", "squeeze", "(", ")", ",", "z", "[", "1", "]", ".", "squeeze", "(", ")", "]", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "h0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "x", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "h", ")", ")", "\n", "if", "self", ".", "args", ".", "gpu", ":", "\n", "                ", "h0", "=", "h0", ".", "cuda", "(", ")", "\n", "\n", "", "z", "=", "self", ".", "lstm", "(", "E", ",", "h0", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "", "y_hat", "=", "self", ".", "fc", "(", "z", ")", "\n", "\n", "return", "F", ".", "sigmoid", "(", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel.__init__": [[705, 729], ["train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_paras", ",", "train_loader_pos", ",", "test_loader", ",", "model", ",", "optimizer", ",", "train_loader_neg", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_loader", "=", "train_loader_pos", "# If no train_loader_neg, then pass the train_loader here; otherwise split _pos and _neg", "\n", "self", ".", "train_loader_neg", "=", "train_loader_neg", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "#self.train_paras = train_paras", "\n", "self", ".", "n_iter", "=", "train_paras", ".", "get", "(", "'n_iter'", ",", "1", ")", "\n", "self", ".", "log_interval", "=", "train_paras", ".", "get", "(", "'log_interval'", ",", "5", ")", "# list of two numbers: [log_per_n_epoch, log_per_n_batch]", "\n", "self", ".", "flg_cuda", "=", "train_paras", ".", "get", "(", "'flg_cuda'", ",", "False", ")", "\n", "\n", "self", ".", "max_len", "=", "train_paras", ".", "get", "(", "'max_len'", ",", "2000", ")", "# Max length of input", "\n", "self", ".", "lr_decay", "=", "train_paras", ".", "get", "(", "'lr_decay'", ",", "None", ")", "# List of 4 numbers: [init_lr, lr_decay_rate, lr_decay_interval, min_lr]", "\n", "self", ".", "flgSave", "=", "train_paras", ".", "get", "(", "'flgSave'", ",", "False", ")", "# Set to true if save model", "\n", "self", ".", "savePath", "=", "train_paras", ".", "get", "(", "'savePath'", ",", "'./'", ")", "\n", "self", ".", "posThres", "=", "train_paras", ".", "get", "(", "'posThres'", ",", "0.5", ")", "\n", "self", ".", "alpha_wneg", "=", "train_paras", ".", "get", "(", "'alpha_wneg'", ",", "0.0", ")", "# Regularization coefficient on negative weights", "\n", "\n", "if", "self", ".", "lr_decay", ":", "\n", "            ", "assert", "len", "(", "self", ".", "lr_decay", ")", "==", "4", "# Elements include: [starting_lr, decay_multiplier, decay_per_?_epoch, min_lr]", "\n", "#self.criterion = torch.nn.CrossEntropyLoss()", "\n", "", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "cnt_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel.run": [[730, 746], ["range", "models2.trainModel._train", "models2.trainModel._test", "models2.trainModel._drawAUC", "models2.trainModel._saveModel"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._train", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._test", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._drawAUC", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._saveModel"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "lsTrainAccuracy", "=", "[", "]", "\n", "lsTestAccuracy", "=", "[", "]", "\n", "self", ".", "bestAccuracy", "=", "0.0", "\n", "self", ".", "auc", "=", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "            ", "self", ".", "_train", "(", "epoch", ",", "lsTrainAccuracy", ")", "\n", "self", ".", "_test", "(", "epoch", ",", "lsTestAccuracy", ")", "\n", "if", "self", ".", "auc", ">", "self", ".", "bestAccuracy", ":", "\n", "                ", "self", ".", "bestAccuracy", "=", "self", ".", "auc", "\n", "self", ".", "_drawAUC", "(", "self", ".", "Y_hat", ",", "self", ".", "Y", ")", "\n", "if", "self", ".", "flgSave", ":", "\n", "                    ", "self", ".", "_saveModel", "(", ")", "\n", "\n", "", "", "", "return", "self", ".", "model", ",", "lsTrainAccuracy", ",", "lsTestAccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel._train": [[747, 808], ["models2.trainModel.model.train", "min", "models2.trainModel.optimizer.zero_grad", "models2.trainModel.model", "models2.trainModel.criterion", "models2.trainModel.backward", "models2.trainModel.optimizer.step", "models2.trainModel._getAccuracy", "lsTrainAccuracy.append", "print", "models2.trainModel.train_loader_neg.__iter__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "print", "models2.trainModel.train_iter_neg.__next__", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.L1Loss.", "torch.cat.size", "torch.cat.size", "torch.cat.size", "models2.trainModel.train_loader_neg.__iter__", "models2.trainModel.train_iter_neg.__next__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "w_pos.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "w_pos.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAccuracy"], ["", "def", "_train", "(", "self", ",", "epoch", ",", "lsTrainAccuracy", ")", ":", "\n", "        ", "correct", ",", "train_loss", "=", "0", ",", "0", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "lr_decay", ":", "\n", "            ", "lr", "=", "min", "(", "self", ".", "lr_decay", "[", "0", "]", "*", "(", "self", ".", "lr_decay", "[", "1", "]", "**", "(", "epoch", "//", "self", ".", "lr_decay", "[", "2", "]", ")", ")", ",", "self", ".", "lr_decay", "[", "3", "]", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "#pdb.set_trace()", "\n", "", "", "j", ",", "nRec", "=", "0", ",", "0", "\n", "if", "epoch", "==", "0", ":", "\n", "            ", "if", "self", ".", "train_loader_neg", "is", "not", "None", ":", "\n", "                ", "self", ".", "train_iter_neg", "=", "self", ".", "train_loader_neg", ".", "__iter__", "(", ")", "\n", "\n", "", "", "for", "data", ",", "target", "in", "self", ".", "train_loader", ":", "\n", "            ", "if", "self", ".", "train_loader_neg", "is", "not", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "data_neg", ",", "target_neg", "=", "self", ".", "train_iter_neg", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "self", ".", "train_iter_neg", "=", "self", ".", "train_loader_neg", ".", "__iter__", "(", ")", "\n", "data_neg", ",", "target_neg", "=", "self", ".", "train_iter_neg", ".", "__next__", "(", ")", "\n", "\n", "", "data", "=", "torch", ".", "cat", "(", "[", "data", ",", "data_neg", "]", ",", "0", ")", "\n", "target", "=", "torch", ".", "cat", "(", "[", "target", ",", "target_neg", "]", ",", "0", ")", "\n", "\n", "", "data", "=", "data", "[", ":", ",", "-", "self", ".", "max_len", ":", "]", "\n", "nRec", "+=", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "data", ",", "target", "=", "Variable", "(", "data", ")", ".", "long", "(", ")", ",", "Variable", "(", "target", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "cnt_iter", "+=", "1", "\n", "\n", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "if", "self", ".", "alpha_wneg", ">", "0", ":", "\n", "                ", "l1_crit", "=", "nn", ".", "L1Loss", "(", "size_average", "=", "False", ")", "\n", "w_pos", "=", "self", ".", "model", ".", "fc", ".", "weight", "+", "torch", ".", "abs", "(", "self", ".", "model", ".", "fc", ".", "weight", ")", "\n", "if", "self", ".", "flg_cuda", ":", "\n", "                    ", "target_reg", "=", "Variable", "(", "torch", ".", "zeros", "(", "w_pos", ".", "size", "(", ")", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "target_reg", "=", "Variable", "(", "torch", ".", "zeros", "(", "w_pos", ".", "size", "(", ")", ")", ")", "\n", "", "loss", "+=", "l1_crit", "(", "w_pos", ",", "target_reg", ")", "*", "self", ".", "alpha_wneg", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "correct", "+=", "self", ".", "_getAccuracy", "(", "output", ",", "target", ")", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "*", "data", ".", "size", "(", ")", "[", "0", "]", "\n", "j", "+=", "1", "\n", "if", "(", "j", "%", "self", ".", "log_interval", "[", "1", "]", "==", "0", ")", ":", "\n", "                ", "print", "(", "'Train Epoch: {}, Batch: {}, Loss: {:.4f}'", ".", "format", "(", "epoch", ",", "j", ",", "train_loss", "/", "nRec", ")", ")", "\n", "\n", "", "", "if", "(", "epoch", "==", "0", ")", "|", "(", "epoch", "%", "self", ".", "log_interval", "[", "0", "]", "==", "0", ")", "|", "(", "epoch", "==", "self", ".", "n_iter", "-", "1", ")", ":", "\n", "            ", "trainAccuracy", "=", "100.", "*", "correct", "/", "nRec", "\n", "train_loss", "/=", "nRec", "\n", "lsTrainAccuracy", ".", "append", "(", "trainAccuracy", ")", "\n", "\n", "print", "(", "'Train Epoch: {} Loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)'", ".", "format", "(", "\n", "epoch", ",", "train_loss", ",", "correct", ",", "nRec", ",", "trainAccuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel._test": [[809, 839], ["models2.trainModel.model.eval", "len", "models2.trainModel._getAucF1", "print", "lsTestAccuracy.append", "models2.trainModel.model", "models2.trainModel._getAccuracy", "models2.trainModel.Y_hat.append", "models2.trainModel.Y.append", "len", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "models2.trainModel.cpu().data.numpy", "numpy.expand_dims", "data.cuda", "target.cuda", "models2.trainModel.criterion", "target.cpu().data.numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "target.unsqueeze", "models2.trainModel.cpu", "target.cpu"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAucF1", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAccuracy"], ["", "", "def", "_test", "(", "self", ",", "epoch", ",", "lsTestAccuracy", ")", ":", "\n", "        ", "if", "(", "epoch", "==", "0", ")", "|", "(", "epoch", "%", "self", ".", "log_interval", "[", "0", "]", "==", "0", ")", "|", "(", "epoch", "==", "self", ".", "n_iter", "-", "1", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "self", ".", "Y_hat", "=", "[", "]", "\n", "self", ".", "Y", "=", "[", "]", "\n", "\n", "for", "data", ",", "target", "in", "self", ".", "test_loader", ":", "\n", "                ", "data", "=", "data", "[", ":", ",", "-", "self", ".", "max_len", ":", "]", "\n", "data", ",", "target", "=", "Variable", "(", "data", ")", ".", "long", "(", ")", ",", "Variable", "(", "target", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "flg_cuda", ":", "\n", "                    ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "test_loss", "+=", "self", ".", "criterion", "(", "output", ",", "target", ")", ".", "data", "[", "0", "]", "\n", "correct", "+=", "self", ".", "_getAccuracy", "(", "output", ",", "target", ")", "\n", "\n", "self", ".", "Y_hat", ".", "append", "(", "output", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "self", ".", "Y", ".", "append", "(", "np", ".", "expand_dims", "(", "target", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "1", ")", ")", "\n", "\n", "", "testAccuracy", "=", "100.", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", "\n", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ")", "# loss function already averages over batch size", "\n", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "=", "self", ".", "_getAucF1", "(", "self", ".", "Y_hat", ",", "self", ".", "Y", ")", "\n", "self", ".", "auc", "=", "auc", "\n", "print", "(", "'Test set: Average loss: {:.4f}, Accuracy: pos_{}/{}, neg_{}/{} ({:.2f}%, AUC: {:.4f}, F1: {:.4f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "tp", ",", "p", ",", "tn", ",", "n", ",", "testAccuracy", ",", "auc", ",", "f1", "*", "100", ")", ")", "\n", "lsTestAccuracy", ".", "append", "(", "[", "testAccuracy", ",", "auc", ",", "f1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel._getAccuracy": [[840, 844], ["pred.eq().cpu().sum", "pred.eq().cpu", "pred.eq"], "methods", ["None"], ["", "", "def", "_getAccuracy", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "pred", "=", "(", "output", ".", "data", ">", "0.5", ")", ".", "float", "(", ")", "\n", "accuracy", "=", "pred", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel._getAucF1": [[845, 859], ["numpy.vstack().reshape", "numpy.vstack().reshape", "sum", "sum", "sum", "sum", "len", "sklearn.metrics.roc_auc_score", "sklearn.metrics.f1_score", "numpy.vstack", "numpy.vstack", "numpy.unique"], "methods", ["None"], ["", "def", "_getAucF1", "(", "self", ",", "Y_hat", ",", "Y", ")", ":", "\n", "        ", "Y_hat", "=", "np", ".", "vstack", "(", "Y_hat", ")", ".", "reshape", "(", "-", "1", ")", "\n", "Y", "=", "np", ".", "vstack", "(", "Y", ")", ".", "reshape", "(", "-", "1", ")", "\n", "tp", "=", "sum", "(", "(", "Y", "==", "1", ")", "&", "(", "Y_hat", ">=", "self", ".", "posThres", ")", ")", "\n", "tn", "=", "sum", "(", "(", "Y", "==", "0", ")", "&", "(", "Y_hat", "<", "self", ".", "posThres", ")", ")", "\n", "p", "=", "sum", "(", "Y", "==", "1", ")", "\n", "n", "=", "sum", "(", "Y", "==", "0", ")", "\n", "if", "len", "(", "np", ".", "unique", "(", "Y", ")", ")", "==", "1", ":", "\n", "            ", "auc", "=", "0", "\n", "f1", "=", "0", "\n", "", "else", ":", "\n", "            ", "auc", "=", "metrics", ".", "roc_auc_score", "(", "Y", ",", "Y_hat", ")", "\n", "f1", "=", "metrics", ".", "f1_score", "(", "Y", ",", "1", "*", "(", "Y_hat", ">", "self", ".", "posThres", ")", ")", "\n", "", "return", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel._saveModel": [[860, 862], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "_saveModel", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "model", ",", "self", ".", "savePath", "+", "'_model.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.models2.trainModel._drawAUC": [[863, 899], ["numpy.vstack().reshape", "numpy.vstack().reshape", "pickle.dump", "open", "numpy.vstack", "numpy.vstack"], "methods", ["None"], ["", "def", "_drawAUC", "(", "self", ",", "Y_hat", ",", "Y", ")", ":", "\n", "        ", "Y_hat", "=", "np", ".", "vstack", "(", "Y_hat", ")", ".", "reshape", "(", "-", "1", ")", "\n", "Y", "=", "np", ".", "vstack", "(", "Y", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pickle", ".", "dump", "(", "[", "Y_hat", ",", "Y", "]", ",", "open", "(", "self", ".", "savePath", "+", "'_pred.p'", ",", "'wb'", ")", ")", "\n", "\"\"\"\n        fpr, tpr, thresholds = metrics.roc_curve(Y, Y_hat, pos_label=1)\n        prec, recall, thresholds = metrics.precision_recall_curve(Y, Y_hat, pos_label= 1)\n\n        # Print ROC curve\n        pp = PdfPages(self.savePath + '_plots.pdf')\n\n        figure1 = plt.figure(figsize=(16, 6))\n        gs1 = gridspec.GridSpec(1, 2)\n\n        ax1 = figure1.add_subplot(gs1[0])\n        ax1.plot(fpr, tpr, 'g-')\n        ax1.plot([0, 1], [0, 1], ls=\"--\")\n        ax1.set_xlim([0, 1])\n        ax1.set_ylim([0, 1])\n        ax1.set_ylabel('True positive rate', fontsize=12)\n        ax1.set_xlabel('False positive rate', fontsize=12)\n        ax1.set_title('ROC curve', fontsize=16)\n\n        ax2 = figure1.add_subplot(gs1[1])\n        ax2.plot(prec, recall, 'b-')\n        ax2.plot([0, 1], [0, 1], ls=\"--\")\n        ax2.set_xlim([0, 1])\n        ax2.set_ylim([0, 1])\n        ax2.set_ylabel('Recall', fontsize=12)\n        ax2.set_xlabel('Precision', fontsize=12)\n        ax2.set_title('Precision-recall curve', fontsize=16)\n\n        pp.savefig(figure1)\n        plt.close(figure1)\n        pp.close()\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negation_tag_demo.parse_sent": [[15, 30], ["tok", "any", "text.replace.replace", "ast.literal_eval", "nlp.parse"], "function", ["None"], ["def", "parse_sent", "(", "text", ",", "nlp", ",", "tok", ",", "neg_words", ")", ":", "\n", "\n", "#tokens = word_tokenize(text)", "\n", "    ", "tokens", "=", "tok", "(", "text", ")", "\n", "\n", "if", "any", "(", "[", "w", "in", "neg_words", "for", "w", "in", "tokens", "]", ")", ":", "\n", "        ", "tags", "=", "ast", ".", "literal_eval", "(", "nlp", ".", "parse", "(", "text", ")", ")", "[", "'sentences'", "]", "[", "0", "]", "[", "'dependencies'", "]", "\n", "\n", "for", "tag", "in", "tags", ":", "\n", "            ", "if", "tag", "[", "0", "]", "==", "'neg'", ":", "\n", "                ", "text", "=", "text", ".", "replace", "(", "tag", "[", "1", "]", ",", "tag", "[", "1", "]", "+", "'_NEG'", ")", "\n", "\n", "", "", "return", "text", "\n", "", "else", ":", "\n", "        ", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negation_tag_demo.split_sent": [[31, 34], ["re.split", "str"], "function", ["None"], ["", "", "def", "split_sent", "(", "text", ")", ":", "\n", "\n", "    ", "return", "re", ".", "split", "(", "r'[:?.]+'", ",", "str", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negation_tag_demo.negate": [[35, 53], ["list", "negation_tag_demo.split_sent", "negex.negTagger().getNegTaggedSentence", "tagged.append", "negex.negTagger"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negation_tag_demo.split_sent", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.getNegTaggedSentence"], ["", "def", "negate", "(", "text", ",", "irules", ",", "conditions", ")", ":", "\n", "\n", "#cond = [c for c in conditions if c in text]", "\n", "\n", "    ", "sentences", "=", "list", "(", "split_sent", "(", "text", ")", ")", "\n", "\n", "tagged", "=", "[", "]", "\n", "filter_conds", "=", "0", "\n", "tag", "=", "0", "\n", "\n", "for", "s", "in", "sentences", ":", "\n", "        ", "cond", "=", "[", "c", "for", "c", "in", "conditions", "if", "c", "in", "s", "]", "\n", "\n", "t", "=", "negTagger", "(", "sentence", "=", "s", ",", "phrases", "=", "cond", ",", "rules", "=", "irules", ",", "negP", "=", "False", ")", ".", "getNegTaggedSentence", "(", ")", "\n", "\n", "tagged", ".", "append", "(", "t", ")", "\n", "\n", "", "return", "' '", ".", "join", "(", "tagged", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.encDataset.__init__": [[31, 37], ["json.load", "print", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "dsName", ",", "nClassGender", ",", "nClassRace", ",", "nClassEthnic", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "ds", "=", "json", ".", "load", "(", "open", "(", "root_dir", "+", "dsName", ",", "'r'", ")", ")", "\n", "print", "(", "'Loaded: '", ",", "dsName", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "nClass", "=", "[", "nClassGender", ",", "nClassRace", ",", "nClassEthnic", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.encDataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.encDataset.__getitem__": [[41, 69], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "enc_model.encDataset._idx2onehot", "enc_model.encDataset._idx2onehot", "enc_model.encDataset._idx2onehot", "numpy.concatenate", "enc_model.encDataset.transform"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset._idx2onehot", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset._idx2onehot", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset._idx2onehot"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Shape of the inputs:\n            - Note: 1 x n_enc x noteLength\n            - Num: 1 x n_enc x dimNum\n            - Disease: 1 x 3\n            - Mask: 1 x 3\n            - Age: 1\n            - Demo ([Gender, race, eth]): 1 x 3\n        \"\"\"", "\n", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "gender", ",", "race", ",", "eth", "=", "self", ".", "ds", "[", "idx", "]", "\n", "\n", "Num", "=", "np", ".", "asarray", "(", "Num", ",", "dtype", "=", "'float32'", ")", "\n", "Disease", "=", "np", ".", "asarray", "(", "Disease", ",", "dtype", "=", "'int'", ")", "\n", "Mask", "=", "np", ".", "asarray", "(", "Mask", ",", "dtype", "=", "'int'", ")", "\n", "Age", "=", "np", ".", "asarray", "(", "Age", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "gender2", "=", "self", ".", "_idx2onehot", "(", "gender", ",", "self", ".", "nClass", "[", "0", "]", ")", "\n", "race2", "=", "self", ".", "_idx2onehot", "(", "race", ",", "self", ".", "nClass", "[", "1", "]", ")", "\n", "eth2", "=", "self", ".", "_idx2onehot", "(", "eth", ",", "self", ".", "nClass", "[", "2", "]", ")", "\n", "\n", "Demo", "=", "np", ".", "concatenate", "(", "[", "gender2", ",", "race2", ",", "eth2", "]", ")", "\n", "sample", "=", "{", "'Note'", ":", "Note", ",", "'Num'", ":", "Num", ",", "'Disease'", ":", "Disease", ",", "'Mask'", ":", "Mask", ",", "'Age'", ":", "Age", ",", "'Demo'", ":", "Demo", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.encDataset._idx2onehot": [[70, 75], ["numpy.zeros"], "methods", ["None"], ["", "def", "_idx2onehot", "(", "self", ",", "value_idx", ",", "max_idx", ")", ":", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "max_idx", ")", "\n", "if", "value_idx", ">", "0", ":", "\n", "            ", "temp", "[", "value_idx", "-", "1", "]", "=", "1", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.concatNote.__init__": [[82, 85], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "enc_len", ",", "doc_len", ")", ":", "\n", "        ", "self", ".", "enc_len", "=", "enc_len", "\n", "self", ".", "doc_len", "=", "doc_len", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.concatNote.__call__": [[86, 90], ["enc_model.concatNote._run"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.padOrTruncateToTensor._run"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "sample", "[", "'Note'", "]", ",", "sample", "[", "'Num'", "]", ",", "sample", "[", "'Disease'", "]", ",", "sample", "[", "'Mask'", "]", ",", "sample", "[", "\n", "'Age'", "]", ",", "sample", "[", "'Demo'", "]", "\n", "return", "self", ".", "_run", "(", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.concatNote._run": [[91, 111], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "Disease.reshape", "Mask.reshape", "Age.reshape", "Demo.reshape", "len"], "methods", ["None"], ["", "def", "_run", "(", "self", ",", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", ":", "\n", "# Pad / truncate notes", "\n", "        ", "if", "len", "(", "Note", ")", ">", "self", ".", "enc_len", ":", "\n", "            ", "Num", "=", "Num", "[", "-", "self", ".", "enc_len", ":", ",", ":", "]", "\n", "", "padded_Num", "=", "torch", ".", "zeros", "(", "self", ".", "enc_len", ",", "Num", ".", "shape", "[", "1", "]", ")", "\n", "padded_Num", "[", "-", "Num", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "Num", ")", ".", "float", "(", ")", "\n", "\n", "note_all", "=", "[", "w", "for", "note", "in", "Note", "for", "w", "in", "note", "]", "\n", "if", "len", "(", "note_all", ")", ">", "self", ".", "doc_len", ":", "\n", "            ", "note_all", "=", "note_all", "[", "-", "self", ".", "doc_len", ":", "]", "\n", "", "padded_Note", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "doc_len", ")", "\n", "if", "len", "(", "note_all", ")", ">", "0", ":", "\n", "            ", "padded_Note", "[", ":", ",", "-", "len", "(", "note_all", ")", ":", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "note_all", ")", ")", ".", "long", "(", ")", "\n", "\n", "", "return", "{", "'Note'", ":", "padded_Note", ",", "\n", "'Num'", ":", "padded_Num", ",", "\n", "'Disease'", ":", "torch", ".", "from_numpy", "(", "Disease", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Mask'", ":", "torch", ".", "from_numpy", "(", "Mask", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Age'", ":", "torch", ".", "from_numpy", "(", "Age", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Demo'", ":", "torch", ".", "from_numpy", "(", "Demo", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset.__init__": [[116, 123], ["json.load", "print", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "dsName", ",", "nClassGender", ",", "nClassRace", ",", "nClassEthnic", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "ds", "=", "json", ".", "load", "(", "open", "(", "root_dir", "+", "dsName", ",", "'r'", ")", ")", "\n", "print", "(", "'Loaded: '", ",", "dsName", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "nClass", "=", "[", "nClassGender", ",", "nClassRace", ",", "nClassEthnic", "]", "\n", "self", ".", "max_len", "=", "3000", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset.__getitem__": [[128, 169], ["numpy.asarray", "numpy.asarray().mean", "numpy.asarray", "numpy.asarray", "numpy.asarray", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "enc_model.staticDataset._idx2onehot", "enc_model.staticDataset._idx2onehot", "enc_model.staticDataset._idx2onehot", "numpy.concatenate", "len", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.asarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray.reshape", "numpy.asarray.reshape", "numpy.asarray.reshape", "numpy.concatenate.reshape"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset._idx2onehot", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset._idx2onehot", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset._idx2onehot"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Shape of the inputs:\n            - Note: 1 x n_enc x noteLength\n            - Num: 1 x n_enc x dimNum\n            - Disease: 1 x 3\n            - Mask: 1 x 3\n            - Age: 1\n            - Demo ([Gender, race, eth]): 1 x 3\n        \"\"\"", "\n", "\n", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "gender", ",", "race", ",", "eth", "=", "self", ".", "ds", "[", "idx", "]", "\n", "\n", "Note", "=", "np", ".", "asarray", "(", "[", "item", "for", "sublist", "in", "Note", "for", "item", "in", "sublist", "]", ")", "\n", "Num", "=", "np", ".", "asarray", "(", "Num", ",", "dtype", "=", "'float32'", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "Disease", "=", "np", ".", "asarray", "(", "Disease", ",", "dtype", "=", "'int'", ")", "\n", "Mask", "=", "np", ".", "asarray", "(", "Mask", ",", "dtype", "=", "'int'", ")", "\n", "Age", "=", "np", ".", "asarray", "(", "Age", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "if", "len", "(", "Note", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "Note", "=", "Note", "[", ":", "self", ".", "max_len", "]", "\n", "\n", "", "else", ":", "\n", "            ", "Note", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "self", ".", "max_len", "-", "Note", ".", "shape", "[", "0", "]", ")", ",", "Note", "]", ")", "\n", "\n", "", "Note", "=", "torch", ".", "from_numpy", "(", "Note", ")", ".", "long", "(", ")", "\n", "\n", "gender2", "=", "self", ".", "_idx2onehot", "(", "gender", ",", "self", ".", "nClass", "[", "0", "]", ")", "\n", "race2", "=", "self", ".", "_idx2onehot", "(", "race", ",", "self", ".", "nClass", "[", "1", "]", ")", "\n", "eth2", "=", "self", ".", "_idx2onehot", "(", "eth", ",", "self", ".", "nClass", "[", "2", "]", ")", "\n", "\n", "Demo", "=", "np", ".", "concatenate", "(", "[", "gender2", ",", "race2", ",", "eth2", "]", ")", "\n", "sample", "=", "{", "'Note'", ":", "Note", ",", "'Num'", ":", "Num", ",", "'Disease'", ":", "Disease", ",", "'Mask'", ":", "Mask", ",", "'Age'", ":", "Age", ",", "'Demo'", ":", "Demo", "}", "\n", "\n", "return", "{", "'Note'", ":", "Note", ",", "\n", "'Num'", ":", "Num", ",", "\n", "'Disease'", ":", "torch", ".", "from_numpy", "(", "Disease", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Mask'", ":", "torch", ".", "from_numpy", "(", "Mask", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Age'", ":", "torch", ".", "from_numpy", "(", "Age", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Demo'", ":", "torch", ".", "from_numpy", "(", "Demo", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.staticDataset._idx2onehot": [[171, 177], ["numpy.zeros"], "methods", ["None"], ["", "def", "_idx2onehot", "(", "self", ",", "value_idx", ",", "max_idx", ")", ":", "\n", "\n", "        ", "temp", "=", "np", ".", "zeros", "(", "max_idx", ")", "\n", "if", "value_idx", ">", "0", ":", "\n", "            ", "temp", "[", "value_idx", "-", "1", "]", "=", "1", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.padOrTruncateToTensor.__init__": [[187, 190], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "enc_len", ",", "doc_len", ")", ":", "\n", "        ", "self", ".", "enc_len", "=", "enc_len", "\n", "self", ".", "doc_len", "=", "doc_len", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.padOrTruncateToTensor.__call__": [[191, 195], ["enc_model.padOrTruncateToTensor._run"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.padOrTruncateToTensor._run"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "sample", "[", "'Note'", "]", ",", "sample", "[", "'Num'", "]", ",", "sample", "[", "'Disease'", "]", ",", "sample", "[", "'Mask'", "]", ",", "sample", "[", "\n", "'Age'", "]", ",", "sample", "[", "'Demo'", "]", "\n", "return", "self", ".", "_run", "(", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.padOrTruncateToTensor._run": [[196, 211], ["enc_model.padOrTruncateToTensor._pad_doc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Disease.reshape", "Mask.reshape", "Age.reshape", "Demo.reshape"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.padOrTruncateToTensor._pad_doc"], ["", "def", "_run", "(", "self", ",", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", ":", "\n", "# Pad / truncate notes", "\n", "        ", "if", "len", "(", "Note", ")", ">", "self", ".", "enc_len", ":", "\n", "            ", "Note", "=", "Note", "[", "-", "self", ".", "enc_len", ":", "]", "\n", "Num", "=", "Num", "[", "-", "self", ".", "enc_len", ":", ",", ":", "]", "\n", "", "padded_Note", "=", "self", ".", "_pad_doc", "(", "Note", ",", "self", ".", "doc_len", ",", "self", ".", "enc_len", ")", "\n", "padded_Num", "=", "torch", ".", "zeros", "(", "self", ".", "enc_len", ",", "Num", ".", "shape", "[", "1", "]", ")", "\n", "padded_Num", "[", "-", "Num", ".", "shape", "[", "0", "]", ":", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "Num", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "'Note'", ":", "padded_Note", ",", "\n", "'Num'", ":", "padded_Num", ",", "\n", "'Disease'", ":", "torch", ".", "from_numpy", "(", "Disease", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Mask'", ":", "torch", ".", "from_numpy", "(", "Mask", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Age'", ":", "torch", ".", "from_numpy", "(", "Age", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ",", "\n", "'Demo'", ":", "torch", ".", "from_numpy", "(", "Demo", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.padOrTruncateToTensor._pad_doc": [[213, 224], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "len", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "numpy.asarray", "len"], "methods", ["None"], ["", "def", "_pad_doc", "(", "self", ",", "seq", ",", "max_len", ",", "n", ")", ":", "\n", "        ", "padded_seq", "=", "torch", ".", "zeros", "(", "n", ",", "max_len", ")", "\n", "start", "=", "0", "if", "len", "(", "seq", ")", ">=", "n", "else", "n", "-", "len", "(", "seq", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "seq", ")", ":", "\n", "            ", "if", "len", "(", "s", ")", ">", "max_len", ":", "\n", "                ", "padded_seq", "[", "start", "+", "i", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "s", "[", ":", "max_len", "]", ")", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "s", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "padded_seq", "[", "start", "+", "i", ",", "-", "len", "(", "s", ")", ":", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "s", ")", ")", ".", "long", "(", ")", "\n", "", "", "return", "padded_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_SumLSTM.__init__": [[230, 281], ["torch.Module.__init__", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_paras.get", "model_paras.get", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "getattr", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "list", "embedding.size", "embedding.size", "enc_model.Enc_SumLSTM.lstm.parameters", "enc_model.Enc_SumLSTM.fc.parameters", "enc_model.Enc_SumLSTM.embed.parameters"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_paras", ",", "embedding", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        model_paras:\n            - enc_len: max number of encounters in each sample\n            - doc_len: max number of words in each enc, input dimension should be [batchSize, enc_len, doc_len]\n            - flg_updateEmb: whether to train embeddings or not\n            - batchSize: batch size\n            - rnnType: 'GRU' or 'LSTM'\n            - bidir: whether to train bi-directional RNN or not\n            - p_dropOut: dropOut percentage\n            - lsDim: dimensions of [hidden_state, linear dimension 1, linear dimension 2...]\n            - flg_cuda: use GPU or not\n            - emb_dim: embedding dimension, do not need if provide embedding\n            - n_words: vocabulary size,  do not need if provide embedding\n        To-do:\n            expand to handle more than 1 linear layers\n        \"\"\"", "\n", "\n", "super", "(", "Enc_SumLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.enc_len = model_paras.get('enc_len', 15)", "\n", "self", ".", "doc_len", "=", "model_paras", ".", "get", "(", "'doc_len'", ",", "20", ")", "\n", "flg_updateEmb", "=", "model_paras", ".", "get", "(", "'flg_updateEmb'", ",", "False", ")", "\n", "self", ".", "model_paras", "=", "model_paras", "\n", "self", ".", "rnnType", "=", "model_paras", ".", "get", "(", "'rnnType'", ",", "'GRU'", ")", "\n", "self", ".", "bidir", "=", "model_paras", ".", "get", "(", "'bidir'", ",", "False", ")", "\n", "self", ".", "p_dropOut", "=", "model_paras", ".", "get", "(", "'p_dropOut'", ",", "0.8", ")", "\n", "self", ".", "lsDim", "=", "model_paras", ".", "get", "(", "'lsDim'", ",", "[", "128", ",", "1", "]", ")", "\n", "self", ".", "flg_cuda", "=", "model_paras", ".", "get", "(", "'flg_cuda'", ",", "True", ")", "\n", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "self", ".", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "flg_updateEmb", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_words", "=", "model_paras", ".", "get", "(", "'n_words'", ",", "20000", ")", "\n", "self", ".", "emb_dim", "=", "model_paras", ".", "get", "(", "'emb_dim'", ",", "300", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "emb_dim", ")", "\n", "\n", "", "self", ".", "lstm", "=", "getattr", "(", "nn", ",", "self", ".", "rnnType", ")", "(", "self", ".", "emb_dim", ",", "self", ".", "lsDim", "[", "0", "]", ",", "1", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "self", ".", "bidir", ",", "dropout", "=", "self", ".", "p_dropOut", ")", "\n", "\n", "if", "self", ".", "bidir", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "lsDim", "[", "0", "]", ",", "self", ".", "lsDim", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "lsDim", "[", "0", "]", ",", "self", ".", "lsDim", "[", "1", "]", ")", "\n", "\n", "", "self", ".", "params", "=", "list", "(", "self", ".", "lstm", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "fc", ".", "parameters", "(", ")", ")", "\n", "if", "flg_updateEmb", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_SumLSTM.init_hidden": [[283, 298], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "init_hidden", "(", "self", ",", "batchSize", ",", "nlayer", "=", "1", ")", ":", "\n", "# Before we've done anything, we dont have any hidden state.", "\n", "# Refer to the Pytorch documentation to see exactly", "\n", "# why they have this dimensionality.", "\n", "# The axes semantics are (num_layers, minibatch_size, hidden_dim)", "\n", "        ", "if", "self", ".", "rnnType", "==", "'LSTM'", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "lsDim", "[", "0", "]", ")", ")", ".", "cuda", "(", ")", ",", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "lsDim", "[", "0", "]", ")", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "lsDim", "[", "0", "]", ")", ")", ",", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "lsDim", "[", "0", "]", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "lsDim", "[", "0", "]", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "lsDim", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_SumLSTM.forward": [[299, 321], ["x.view.view.view", "enc_model.Enc_SumLSTM.embed", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "E.sum.sum.sum", "enc_model.Enc_SumLSTM.fc", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x.view.view.size", "enc_model.Enc_SumLSTM.init_hidden", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enc_model.Enc_SumLSTM.init_hidden", "enc_model.Enc_SumLSTM.lstm", "z[].squeeze", "z[].squeeze", "enc_model.Enc_SumLSTM.lstm"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchSize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "doc_len", ")", "\n", "\n", "E", "=", "self", ".", "embed", "(", "x", ")", "\n", "\n", "E", "=", "torch", ".", "chunk", "(", "E", ",", "batchSize", ",", "0", ")", "\n", "E", "=", "torch", ".", "stack", "(", "E", ")", "\n", "E", "=", "E", ".", "sum", "(", "2", ")", "\n", "#x = x.transpose(1,2)", "\n", "\n", "if", "self", ".", "bidir", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "2", ")", "\n", "z", "=", "self", ".", "lstm", "(", "E", ",", "h0", ")", "[", "1", "]", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", "[", "0", "]", ".", "squeeze", "(", ")", ",", "z", "[", "1", "]", ".", "squeeze", "(", ")", "]", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "1", ")", "\n", "z", "=", "self", ".", "lstm", "(", "E", ",", "h0", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "", "y_hat", "=", "self", ".", "fc", "(", "z", ")", "\n", "return", "F", ".", "sigmoid", "(", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM.__init__": [[325, 406], ["torch.Module.__init__", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "list", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_paras.get", "model_paras.get", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "getattr", "enc_model.Enc_CNN_LSTM.lstm.parameters", "list", "list", "list", "list", "list", "embedding.size", "embedding.size", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "c.parameters", "b.parameters", "fc.parameters", "bn.parameters", "enc_model.Enc_CNN_LSTM.embed.parameters", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_paras", ",", "embedding", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        CNN on word, then LSTM with enc\n        model_paras:\n        - enc_len: max number of encounters in each sample\n        - doc_len: max number of words in each enc, input dimension should be [batchSize, enc_len, doc_len]\n        - flg_updateEmb: whether to train embeddings or not\n        - batchSize: batch size\n        - rnnType: 'GRU' or 'LSTM'\n        - bidir: whether to train bi-directional RNN or not\n        - p_dropOut: dropOut percentage\n        - lsDim: dimensions of [hidden_state, multi-event dimension, 1]\n        - flg_cuda: use GPU or not\n        - emb_dim: embedding dimension, do not need if provide embedding\n        - n_words: vocabulary size,  do not need if provide embedding\n        - filters: dimension of CNN output\n        - Ks: kernels\n        - randn_std: std of random noise on embedding\n        \"\"\"", "\n", "\n", "super", "(", "Enc_CNN_LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.enc_len = model_paras.get('enc_len', 30)", "\n", "self", ".", "doc_len", "=", "model_paras", ".", "get", "(", "'doc_len'", ",", "800", ")", "\n", "flg_updateEmb", "=", "model_paras", ".", "get", "(", "'flg_updateEmb'", ",", "False", ")", "\n", "self", ".", "model_paras", "=", "model_paras", "\n", "self", ".", "rnnType", "=", "model_paras", ".", "get", "(", "'rnnType'", ",", "'GRU'", ")", "\n", "self", ".", "dimLSTM", "=", "model_paras", ".", "get", "(", "'dimLSTM'", ",", "128", ")", "# LSTM hidden layer dimension", "\n", "self", ".", "bidir", "=", "model_paras", ".", "get", "(", "'bidir'", ",", "False", ")", "\n", "self", ".", "p_dropOut", "=", "model_paras", ".", "get", "(", "'p_dropOut'", ",", "0.8", ")", "\n", "self", ".", "lsDim", "=", "model_paras", ".", "get", "(", "'lsDim'", ")", "\n", "self", ".", "flg_cuda", "=", "model_paras", ".", "get", "(", "'flg_cuda'", ",", "True", ")", "\n", "self", ".", "filters", "=", "model_paras", ".", "get", "(", "'filters'", ",", "128", ")", "\n", "self", ".", "Ks", "=", "model_paras", ".", "get", "(", "'Ks'", ",", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "randn_std", "=", "model_paras", ".", "get", "(", "'randn_std'", ",", "None", ")", "\n", "self", ".", "lastRelu", "=", "model_paras", ".", "get", "(", "'lastRelu'", ",", "False", ")", "\n", "self", ".", "isViz", "=", "model_paras", ".", "get", "(", "'isViz'", ",", "False", ")", "\n", "self", ".", "flgBias", "=", "model_paras", ".", "get", "(", "'flgBias'", ",", "True", ")", "\n", "self", ".", "flg_AllLSTM", "=", "model_paras", ".", "get", "(", "'flg_AllLSTM'", ",", "False", ")", "\n", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "self", ".", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "flg_updateEmb", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_words", "=", "model_paras", ".", "get", "(", "'n_words'", ",", "20000", ")", "\n", "self", ".", "emb_dim", "=", "model_paras", ".", "get", "(", "'emb_dim'", ",", "300", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "emb_dim", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "self", ".", "emb_dim", ",", "self", ".", "filters", ",", "K", ")", "for", "K", "in", "self", ".", "Ks", "]", ")", "\n", "self", ".", "bn_conv", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "self", ".", "filters", ")", "for", "K", "in", "self", ".", "Ks", "]", ")", "\n", "\n", "self", ".", "lstm", "=", "getattr", "(", "nn", ",", "self", ".", "rnnType", ")", "(", "self", ".", "filters", "*", "len", "(", "self", ".", "Ks", ")", ",", "self", ".", "dimLSTM", ",", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "self", ".", "bidir", ",", "\n", "dropout", "=", "self", ".", "p_dropOut", ",", "bias", "=", "self", ".", "flgBias", ")", "\n", "\n", "self", ".", "FCs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "lsDim", "[", "i", "]", ",", "self", ".", "lsDim", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "1", ")", "]", ")", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "self", ".", "lsDim", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "2", ")", "]", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "lstm", ".", "parameters", "(", ")", ")", "\n", "# self.lstm.weight.data.normal_(0.0, 0.02)", "\n", "# self.lstm.bias.data.normal_(0.0, 0.01)", "\n", "# self.reg_params = list(self.lstm.)", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "# n = c.kernel_size[0] * c.out_channels", "\n", "# c.weight.data.normal_(0, np.sqrt(2. / n))", "\n", "\n", "", "for", "b", "in", "self", ".", "bn_conv", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "b", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "fc", "in", "self", ".", "FCs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "fc", ".", "parameters", "(", ")", ")", "\n", "# fc.weight.data.normal_(0.0, 0.02)", "\n", "\n", "", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "bn", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "flg_updateEmb", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM.fc_layer": [[407, 418], ["enc_model.Enc_CNN_LSTM.model_paras.get", "enc_model.Enc_CNN_LSTM.model_paras.get", "layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "flg_bn", "=", "self", ".", "model_paras", ".", "get", "(", "'flg_bn'", ",", "True", ")", "\n", "p_dropOut", "=", "self", ".", "model_paras", ".", "get", "(", "'p_dropOut'", ",", "0.5", ")", "\n", "\n", "x", "=", "layer", "(", "x", ")", "\n", "if", "flg_bn", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p_dropOut", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM.init_hidden": [[419, 432], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batchSize", ",", "nlayer", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "rnnType", "==", "'LSTM'", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM.forward": [[433, 477], ["Note.view", "enc_model.Enc_CNN_LSTM.embed", "enc_model.Enc_CNN_LSTM.E.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "Note.size", "enc_model.Enc_CNN_LSTM.fc_layer", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "enc_model.Enc_CNN_LSTM.init_hidden", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enc_model.Enc_CNN_LSTM.init_hidden", "len", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "enc_model.Enc_CNN_LSTM.lstm", "[].contiguous().view", "enc_model.Enc_CNN_LSTM.fc_layer", "len", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "z[].squeeze", "z[].squeeze", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "i.size", "[].contiguous", "enc_model.Enc_CNN_LSTM.lstm", "enc_model.Enc_CNN_LSTM.size", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "enc_model.Enc_CNN_LSTM.size", "enc_model.Enc_CNN_LSTM.lstm"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "", "", "def", "forward", "(", "self", ",", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", ":", "\n", "\n", "        ", "batchSize", "=", "Note", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "x", "=", "Note", ".", "view", "(", "-", "1", ",", "self", ".", "doc_len", ")", "\n", "\n", "self", ".", "E", "=", "self", ".", "embed", "(", "self", ".", "x", ")", "# Size: [batch * enc, doc_len, emb_dim]", "\n", "E", "=", "self", ".", "E", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "(", "self", ".", "randn_std", "is", "not", "None", ")", "&", "(", "self", ".", "training", "==", "True", ")", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "noise", "=", "Variable", "(", "torch", ".", "randn", "(", "E", ".", "size", "(", ")", ")", "*", "self", ".", "randn_std", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "noise", "=", "Variable", "(", "torch", ".", "randn", "(", "E", ".", "size", "(", ")", ")", "*", "self", ".", "randn_std", ")", "\n", "", "E", "=", "E", "+", "noise", "\n", "\n", "# CNN on words", "\n", "", "h_CNN", "=", "[", "self", ".", "fc_layer", "(", "E", ",", "self", ".", "convs", "[", "i", "]", ",", "self", ".", "bn_conv", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", "]", "\n", "h_CNN", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "h_CNN", "]", "\n", "h_CNN", "=", "torch", ".", "cat", "(", "h_CNN", ",", "1", ")", "\n", "\n", "E2", "=", "torch", ".", "chunk", "(", "h_CNN", ",", "batchSize", ",", "0", ")", "\n", "E2", "=", "torch", ".", "stack", "(", "E2", ")", "\n", "\n", "if", "self", ".", "bidir", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "2", ")", "\n", "z", "=", "self", ".", "lstm", "(", "E2", ",", "h0", ")", "[", "1", "]", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", "[", "0", "]", ".", "squeeze", "(", ")", ",", "z", "[", "1", "]", ".", "squeeze", "(", ")", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "1", ")", "\n", "if", "self", ".", "flg_AllLSTM", ":", "\n", "                ", "z", "=", "self", ".", "lstm", "(", "E2", ",", "h0", ")", "[", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "z", "=", "self", ".", "lstm", "(", "E2", ",", "h0", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "", "", "if", "len", "(", "self", ".", "lsDim", ")", ">", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "2", ")", ":", "\n", "                ", "z", "=", "self", ".", "fc_layer", "(", "z", ",", "self", ".", "FCs", "[", "i", "]", ",", "self", ".", "bns", "[", "i", "]", ")", "\n", "\n", "", "", "self", ".", "y_hat", "=", "self", ".", "FCs", "[", "-", "1", "]", "(", "z", ")", "\n", "\n", "if", "self", ".", "isViz", ":", "\n", "            ", "return", "self", ".", "y_hat", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "sigmoid", "(", "self", ".", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.DemoLab.__init__": [[480, 531], ["torch.Module.__init__", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "list", "getattr", "enc_model.DemoLab.lstm.parameters", "list", "list", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "fc.parameters", "bn.parameters", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_paras", ",", "embedding", ")", ":", "\n", "        ", "\"\"\"\n        LSTM with lab and concatenate demographics\n        model_paras:\n        - enc_len: max number of encounters in each sample\n        - flg_updateEmb: whether to train embeddings or not\n        - batchSize: batch size\n        - rnnType: 'GRU' or 'LSTM'\n        - bidir: whether to train bi-directional RNN or not\n        - p_dropOut: dropOut percentage\n        - lsDim: dimensions of [hidden_state, multi-event dimension, 1]\n        - flg_cuda: use GPU or not\n        - emb_dim: embedding dimension, do not need if provide embedding\n        - randn_std: std of random noise on embedding\n        \"\"\"", "\n", "\n", "super", "(", "DemoLab", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc_len", "=", "model_paras", ".", "get", "(", "'enc_len'", ",", "30", ")", "\n", "flg_updateEmb", "=", "model_paras", ".", "get", "(", "'flg_updateEmb'", ",", "True", ")", "# Embedding for demographics", "\n", "self", ".", "model_paras", "=", "model_paras", "\n", "self", ".", "rnnType", "=", "model_paras", ".", "get", "(", "'rnnType'", ",", "'GRU'", ")", "\n", "self", ".", "dimLSTM", "=", "model_paras", ".", "get", "(", "'dimLSTM'", ",", "128", ")", "# LSTM hidden layer dimension", "\n", "self", ".", "bidir", "=", "model_paras", ".", "get", "(", "'bidir'", ",", "False", ")", "\n", "self", ".", "p_dropOut", "=", "model_paras", ".", "get", "(", "'p_dropOut'", ",", "0.8", ")", "\n", "self", ".", "lsDim", "=", "model_paras", ".", "get", "(", "'lsDim'", ")", "\n", "self", ".", "flg_cuda", "=", "model_paras", ".", "get", "(", "'flg_cuda'", ",", "True", ")", "\n", "self", ".", "randn_std", "=", "model_paras", ".", "get", "(", "'randn_std'", ",", "None", ")", "\n", "self", ".", "lastRelu", "=", "model_paras", ".", "get", "(", "'lastRelu'", ",", "False", ")", "\n", "self", ".", "isViz", "=", "model_paras", ".", "get", "(", "'isViz'", ",", "False", ")", "\n", "self", ".", "flgBias", "=", "model_paras", ".", "get", "(", "'flgBias'", ",", "True", ")", "\n", "self", ".", "inSize", "=", "151", "+", "56", "+", "1", "# Dimension of input", "\n", "self", ".", "flg_AllLSTM", "=", "model_paras", ".", "get", "(", "'flg_AllLSTM'", ",", "False", ")", "\n", "\n", "#self.embed = nn.Embedding(self.n_words, self.emb_dim)", "\n", "\n", "self", ".", "lstm", "=", "getattr", "(", "nn", ",", "self", ".", "rnnType", ")", "(", "self", ".", "inSize", ",", "self", ".", "dimLSTM", ",", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "self", ".", "bidir", ",", "\n", "dropout", "=", "self", ".", "p_dropOut", ",", "bias", "=", "self", ".", "flgBias", ")", "\n", "\n", "self", ".", "FCs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "lsDim", "[", "i", "]", ",", "self", ".", "lsDim", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "1", ")", "]", ")", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "self", ".", "lsDim", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "2", ")", "]", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "lstm", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "fc", "in", "self", ".", "FCs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "fc", ".", "parameters", "(", ")", ")", "\n", "# fc.weight.data.normal_(0.0, 0.02)", "\n", "\n", "", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "bn", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.DemoLab.fc_layer": [[532, 543], ["enc_model.DemoLab.model_paras.get", "enc_model.DemoLab.model_paras.get", "layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "flg_bn", "=", "self", ".", "model_paras", ".", "get", "(", "'flg_bn'", ",", "True", ")", "\n", "p_dropOut", "=", "self", ".", "model_paras", ".", "get", "(", "'p_dropOut'", ",", "0.5", ")", "\n", "\n", "x", "=", "layer", "(", "x", ")", "\n", "if", "flg_bn", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p_dropOut", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.DemoLab.init_hidden": [[544, 557], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batchSize", ",", "nlayer", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "rnnType", "==", "'LSTM'", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.DemoLab.forward": [[558, 585], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Note.size", "enc_model.DemoLab.init_hidden", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enc_model.DemoLab.init_hidden", "len", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "enc_model.DemoLab.lstm", "[].contiguous().view", "enc_model.DemoLab.fc_layer", "z[].squeeze", "z[].squeeze", "len", "[].contiguous", "enc_model.DemoLab.lstm", "enc_model.DemoLab.lstm"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "", "", "def", "forward", "(", "self", ",", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", ":", "\n", "\n", "        ", "batchSize", "=", "Note", ".", "size", "(", ")", "[", "0", "]", "\n", "demo", "=", "torch", ".", "cat", "(", "[", "Age", ",", "Demo", "]", ",", "dim", "=", "2", ")", "\n", "self", ".", "x", "=", "torch", ".", "cat", "(", "[", "Num", ",", "demo", ".", "repeat", "(", "1", ",", "self", ".", "enc_len", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n", "if", "self", ".", "bidir", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "2", ")", "\n", "z", "=", "self", ".", "lstm", "(", "self", ".", "x", ",", "h0", ")", "[", "1", "]", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", "[", "0", "]", ".", "squeeze", "(", ")", ",", "z", "[", "1", "]", ".", "squeeze", "(", ")", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "1", ")", "\n", "if", "self", ".", "flg_AllLSTM", ":", "\n", "                ", "z", "=", "self", ".", "lstm", "(", "self", ".", "x", ",", "h0", ")", "[", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "z", "=", "self", ".", "lstm", "(", "self", ".", "x", ",", "h0", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "", "", "if", "len", "(", "self", ".", "lsDim", ")", ">", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "2", ")", ":", "\n", "                ", "z", "=", "self", ".", "fc_layer", "(", "z", ",", "self", ".", "FCs", "[", "i", "]", ",", "self", ".", "bns", "[", "i", "]", ")", "\n", "\n", "", "", "self", ".", "y_hat", "=", "self", ".", "FCs", "[", "-", "1", "]", "(", "z", ")", "\n", "\n", "if", "self", ".", "isViz", ":", "\n", "            ", "return", "self", ".", "y_hat", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "sigmoid", "(", "self", ".", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.__init__": [[591, 673], ["torch.Module.__init__", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "model_paras.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "list", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_paras.get", "model_paras.get", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "getattr", "enc_model.Enc_CNN_LSTM_DemoLab.lstm.parameters", "list", "list", "list", "list", "list", "embedding.size", "embedding.size", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "c.parameters", "b.parameters", "fc.parameters", "bn.parameters", "enc_model.Enc_CNN_LSTM_DemoLab.embed.parameters", "len", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_paras", ",", "embedding", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        CNN on word, then LSTM with enc\n        model_paras:\n        - enc_len: max number of encounters in each sample\n        - doc_len: max number of words in each enc, input dimension should be [batchSize, enc_len, doc_len]\n        - flg_updateEmb: whether to train embeddings or not\n        - batchSize: batch size\n        - rnnType: 'GRU' or 'LSTM'\n        - bidir: whether to train bi-directional RNN or not\n        - p_dropOut: dropOut percentage\n        - lsDim: dimensions of [hidden_state, multi-event dimension, 1]\n        - flg_cuda: use GPU or not\n        - emb_dim: embedding dimension, do not need if provide embedding\n        - n_words: vocabulary size,  do not need if provide embedding\n        - filters: dimension of CNN output\n        - Ks: kernels\n        - randn_std: std of random noise on embedding\n        \"\"\"", "\n", "\n", "super", "(", "Enc_CNN_LSTM_DemoLab", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.enc_len = model_paras.get('enc_len', 30)", "\n", "self", ".", "doc_len", "=", "model_paras", ".", "get", "(", "'doc_len'", ",", "800", ")", "\n", "flg_updateEmb", "=", "model_paras", ".", "get", "(", "'flg_updateEmb'", ",", "False", ")", "\n", "self", ".", "model_paras", "=", "model_paras", "\n", "self", ".", "rnnType", "=", "model_paras", ".", "get", "(", "'rnnType'", ",", "'GRU'", ")", "\n", "self", ".", "dimLSTM", "=", "model_paras", ".", "get", "(", "'dimLSTM'", ",", "128", ")", "# LSTM hidden layer dimension", "\n", "self", ".", "bidir", "=", "model_paras", ".", "get", "(", "'bidir'", ",", "False", ")", "\n", "self", ".", "p_dropOut", "=", "model_paras", ".", "get", "(", "'p_dropOut'", ",", "0.8", ")", "\n", "self", ".", "lsDim", "=", "model_paras", ".", "get", "(", "'lsDim'", ")", "\n", "self", ".", "flg_cuda", "=", "model_paras", ".", "get", "(", "'flg_cuda'", ",", "True", ")", "\n", "self", ".", "filters", "=", "model_paras", ".", "get", "(", "'filters'", ",", "128", ")", "\n", "self", ".", "Ks", "=", "model_paras", ".", "get", "(", "'Ks'", ",", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "randn_std", "=", "model_paras", ".", "get", "(", "'randn_std'", ",", "None", ")", "\n", "self", ".", "lastRelu", "=", "model_paras", ".", "get", "(", "'lastRelu'", ",", "False", ")", "\n", "self", ".", "isViz", "=", "model_paras", ".", "get", "(", "'isViz'", ",", "False", ")", "\n", "self", ".", "flgBias", "=", "model_paras", ".", "get", "(", "'flgBias'", ",", "True", ")", "\n", "self", ".", "flg_AllLSTM", "=", "model_paras", ".", "get", "(", "'flg_AllLSTM'", ",", "False", ")", "\n", "self", ".", "flg_useNum", "=", "model_paras", ".", "get", "(", "'flg_useNum'", ",", "False", ")", "\n", "if", "self", ".", "flg_useNum", ":", "\n", "            ", "self", ".", "inSize", "=", "151", "+", "56", "+", "1", "# Use lab + demo", "\n", "", "else", ":", "\n", "            ", "self", ".", "inSize", "=", "56", "+", "1", "# Demo only", "\n", "\n", "", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "self", ".", "n_words", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "\n", "self", ".", "emb_dim", "=", "embedding", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "emb_dim", ")", "\n", "self", ".", "embed", ".", "weight", "=", "nn", ".", "Parameter", "(", "embedding", ",", "requires_grad", "=", "flg_updateEmb", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_words", "=", "model_paras", ".", "get", "(", "'n_words'", ",", "20000", ")", "\n", "self", ".", "emb_dim", "=", "model_paras", ".", "get", "(", "'emb_dim'", ",", "300", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "emb_dim", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "self", ".", "emb_dim", ",", "self", ".", "filters", ",", "K", ")", "for", "K", "in", "self", ".", "Ks", "]", ")", "\n", "self", ".", "bn_conv", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "self", ".", "filters", ")", "for", "K", "in", "self", ".", "Ks", "]", ")", "\n", "\n", "self", ".", "lstm", "=", "getattr", "(", "nn", ",", "self", ".", "rnnType", ")", "(", "self", ".", "filters", "*", "len", "(", "self", ".", "Ks", ")", "+", "self", ".", "inSize", ",", "self", ".", "dimLSTM", ",", "1", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "self", ".", "bidir", ",", "\n", "dropout", "=", "self", ".", "p_dropOut", ",", "bias", "=", "self", ".", "flgBias", ")", "\n", "\n", "self", ".", "FCs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "lsDim", "[", "i", "]", ",", "self", ".", "lsDim", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "1", ")", "]", ")", "\n", "self", ".", "bns", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "self", ".", "lsDim", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "2", ")", "]", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "lstm", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "c", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "b", "in", "self", ".", "bn_conv", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "b", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "fc", "in", "self", ".", "FCs", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "fc", ".", "parameters", "(", ")", ")", "\n", "\n", "", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "bn", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "flg_updateEmb", ":", "\n", "            ", "self", ".", "params", "+=", "list", "(", "self", ".", "embed", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer": [[674, 685], ["enc_model.Enc_CNN_LSTM_DemoLab.model_paras.get", "enc_model.Enc_CNN_LSTM_DemoLab.model_paras.get", "layer", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "bn"], "methods", ["None"], ["", "", "def", "fc_layer", "(", "self", ",", "x", ",", "layer", ",", "bn", "=", "None", ")", ":", "\n", "        ", "flg_bn", "=", "self", ".", "model_paras", ".", "get", "(", "'flg_bn'", ",", "True", ")", "\n", "p_dropOut", "=", "self", ".", "model_paras", ".", "get", "(", "'p_dropOut'", ",", "0.5", ")", "\n", "\n", "x", "=", "layer", "(", "x", ")", "\n", "if", "flg_bn", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "bn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p_dropOut", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden": [[686, 699], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batchSize", ",", "nlayer", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "rnnType", "==", "'LSTM'", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "Variable", "(", "torch", ".", "zeros", "(", "nlayer", ",", "batchSize", ",", "self", ".", "dimLSTM", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.forward": [[700, 750], ["Note.view", "enc_model.Enc_CNN_LSTM_DemoLab.embed", "enc_model.Enc_CNN_LSTM_DemoLab.E.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "len", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "Note.size", "Note.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "enc_model.Enc_CNN_LSTM_DemoLab.lstm", "[].contiguous().view", "enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "len", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "z[].squeeze", "z[].squeeze", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "i.size", "[].contiguous", "enc_model.Enc_CNN_LSTM_DemoLab.lstm", "enc_model.Enc_CNN_LSTM_DemoLab.size", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "enc_model.Enc_CNN_LSTM_DemoLab.size", "enc_model.Enc_CNN_LSTM_DemoLab.lstm"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.init_hidden", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.Enc_CNN_LSTM_DemoLab.fc_layer"], ["", "", "", "def", "forward", "(", "self", ",", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", ":", "\n", "\n", "        ", "batchSize", ",", "enc_len", "=", "Note", ".", "size", "(", ")", "[", "0", "]", ",", "Note", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "x", "=", "Note", ".", "view", "(", "-", "1", ",", "self", ".", "doc_len", ")", "\n", "\n", "self", ".", "E", "=", "self", ".", "embed", "(", "self", ".", "x", ")", "# Size: [batch * enc, doc_len, emb_dim]", "\n", "E", "=", "self", ".", "E", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "(", "self", ".", "randn_std", "is", "not", "None", ")", "&", "(", "self", ".", "training", "==", "True", ")", ":", "\n", "            ", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "noise", "=", "Variable", "(", "torch", ".", "randn", "(", "E", ".", "size", "(", ")", ")", "*", "self", ".", "randn_std", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "noise", "=", "Variable", "(", "torch", ".", "randn", "(", "E", ".", "size", "(", ")", ")", "*", "self", ".", "randn_std", ")", "\n", "", "E", "=", "E", "+", "noise", "\n", "\n", "# CNN on words", "\n", "", "h_CNN", "=", "[", "self", ".", "fc_layer", "(", "E", ",", "self", ".", "convs", "[", "i", "]", ",", "self", ".", "bn_conv", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", "]", "\n", "h_CNN", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "h_CNN", "]", "\n", "h_CNN", "=", "torch", ".", "cat", "(", "h_CNN", ",", "1", ")", "\n", "\n", "E2", "=", "torch", ".", "chunk", "(", "h_CNN", ",", "batchSize", ",", "0", ")", "\n", "E2", "=", "torch", ".", "stack", "(", "E2", ")", "\n", "\n", "demo", "=", "torch", ".", "cat", "(", "[", "Age", ",", "Demo", "]", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "flg_useNum", ":", "\n", "            ", "E2", "=", "torch", ".", "cat", "(", "[", "E2", ",", "Num", ",", "demo", ".", "repeat", "(", "1", ",", "enc_len", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "E2", "=", "torch", ".", "cat", "(", "[", "E2", ",", "demo", ".", "repeat", "(", "1", ",", "enc_len", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n", "", "if", "self", ".", "bidir", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "2", ")", "\n", "z", "=", "self", ".", "lstm", "(", "E2", ",", "h0", ")", "[", "1", "]", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z", "[", "0", "]", ".", "squeeze", "(", ")", ",", "z", "[", "1", "]", ".", "squeeze", "(", ")", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "h0", "=", "self", ".", "init_hidden", "(", "batchSize", "=", "batchSize", ",", "nlayer", "=", "1", ")", "\n", "if", "self", ".", "flg_AllLSTM", ":", "\n", "                ", "z", "=", "self", ".", "lstm", "(", "E2", ",", "h0", ")", "[", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "z", "=", "self", ".", "lstm", "(", "E2", ",", "h0", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "", "", "if", "len", "(", "self", ".", "lsDim", ")", ">", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "lsDim", ")", "-", "2", ")", ":", "\n", "                ", "z", "=", "self", ".", "fc_layer", "(", "z", ",", "self", ".", "FCs", "[", "i", "]", ",", "self", ".", "bns", "[", "i", "]", ")", "\n", "\n", "", "", "self", ".", "y_hat", "=", "self", ".", "FCs", "[", "-", "1", "]", "(", "z", ")", "\n", "\n", "if", "self", ".", "isViz", ":", "\n", "            ", "return", "self", ".", "y_hat", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "sigmoid", "(", "self", ".", "y_hat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel.__init__": [[756, 783], ["train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "train_paras.get", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_paras", ",", "train_loader_pos", ",", "test_loader", ",", "model", ",", "optimizer", ",", "train_loader_neg", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_loader", "=", "train_loader_pos", "# If no train_loader_neg, then pass the train_loader here; otherwise split _pos and _neg", "\n", "self", ".", "train_loader_neg", "=", "train_loader_neg", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "# self.train_paras = train_paras", "\n", "self", ".", "n_iter", "=", "train_paras", ".", "get", "(", "'n_iter'", ",", "1", ")", "\n", "self", ".", "log_interval", "=", "train_paras", ".", "get", "(", "'log_interval'", ",", "\n", "1", ")", "# list of two numbers: [log_per_n_epoch, log_per_n_batch]", "\n", "self", ".", "flg_cuda", "=", "train_paras", ".", "get", "(", "'flg_cuda'", ",", "False", ")", "\n", "# self.max_len = train_paras.get('max_len', 2000) # Max length of input", "\n", "self", ".", "lr_decay", "=", "train_paras", ".", "get", "(", "'lr_decay'", ",", "\n", "None", ")", "# List of 4 numbers: [init_lr, lr_decay_rate, lr_decay_interval, min_lr]", "\n", "self", ".", "flgSave", "=", "train_paras", ".", "get", "(", "'flgSave'", ",", "False", ")", "# Set to true if save model", "\n", "self", ".", "savePath", "=", "train_paras", ".", "get", "(", "'savePath'", ",", "'./'", ")", "\n", "self", ".", "posThres", "=", "train_paras", ".", "get", "(", "'posThres'", ",", "0.5", ")", "\n", "self", ".", "alpha_L1", "=", "train_paras", ".", "get", "(", "'alpha_L1'", ",", "0.0", ")", "# Regularization coefficient on fully connected weights", "\n", "self", ".", "flg_gradClip", "=", "train_paras", ".", "get", "(", "'flg_gradClip'", ",", "False", ")", "# Whether to clip gradient or not", "\n", "\n", "if", "self", ".", "lr_decay", ":", "\n", "            ", "assert", "len", "(", "\n", "self", ".", "lr_decay", ")", "==", "4", "# Elements include: [starting_lr, decay_multiplier, decay_per_?_epoch, min_lr]", "\n", "", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "# self.criterion = torch.nn.MultiLabelSoftMarginLoss() # For multi-class prediction", "\n", "self", ".", "cnt_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel.run": [[784, 799], ["range", "enc_model.trainModel._train", "enc_model.trainModel._test", "enc_model.trainModel._drawAUC", "enc_model.trainModel._saveModel"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._train", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._test", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._drawAUC", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._saveModel"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "lsTrainAccuracy", "=", "[", "]", "\n", "lsTestAccuracy", "=", "[", "]", "\n", "self", ".", "bestAccuracy", "=", "0.0", "\n", "self", ".", "auc", "=", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "            ", "self", ".", "_train", "(", "epoch", ",", "lsTrainAccuracy", ")", "\n", "self", ".", "_test", "(", "epoch", ",", "lsTestAccuracy", ")", "\n", "if", "self", ".", "auc", ">", "self", ".", "bestAccuracy", ":", "\n", "                ", "self", ".", "bestAccuracy", "=", "self", ".", "auc", "\n", "self", ".", "_drawAUC", "(", "self", ".", "Y_multi", ",", "self", ".", "target_multi", ",", "self", ".", "mask", ")", "\n", "if", "self", ".", "flgSave", ":", "\n", "                    ", "self", ".", "_saveModel", "(", ")", "\n", "", "", "", "return", "self", ".", "model", ",", "lsTrainAccuracy", ",", "lsTestAccuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._train": [[800, 900], ["enc_model.trainModel.model.train", "numpy.zeros", "min", "numpy.zeros", "enc_model.trainModel.train_loader.__iter__", "enc_model.trainModel.optimizer.zero_grad", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "enc_model.trainModel.model", "enc_model.trainModel.criterion", "enc_model.trainModel.backward", "enc_model.trainModel.optimizer.step", "enc_model.trainModel.Y_multi_train.append", "enc_model.trainModel.target_multi_train.append", "enc_model.trainModel.mask_train.append", "enc_model.trainModel._getAccuracy", "numpy.sum", "lsTrainAccuracy.append", "print", "enc_model.trainModel._aucAll", "range", "enc_model.trainModel.train_loader_neg.__iter__", "enc_model.trainModel.train_iter.__next__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "enc_model.trainModel.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "print", "len", "print", "enc_model.trainModel.train_loader.__iter__", "enc_model.trainModel.train_iter.__next__", "enc_model.trainModel.train_iter_neg.__next__", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "numpy.sum", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "numpy.sum", "enc_model.trainModel.train_loader_neg.__iter__", "enc_model.trainModel.train_iter_neg.__next__", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.L1Loss.", "enc_model.trainModel.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "fc.weight.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fc.weight.size"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAccuracy", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._aucAll"], ["", "def", "_train", "(", "self", ",", "epoch", ",", "lsTrainAccuracy", ")", ":", "\n", "        ", "correct", ",", "train_loss", "=", "np", ".", "zeros", "(", "3", ")", ",", "0", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "lr_decay", ":", "\n", "            ", "lr", "=", "min", "(", "self", ".", "lr_decay", "[", "0", "]", "*", "(", "self", ".", "lr_decay", "[", "1", "]", "**", "(", "epoch", "//", "self", ".", "lr_decay", "[", "2", "]", ")", ")", ",", "self", ".", "lr_decay", "[", "3", "]", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "j", ",", "nRec", "=", "0", ",", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "self", ".", "Y_multi_train", "=", "[", "]", "\n", "self", ".", "target_multi_train", "=", "[", "]", "\n", "self", ".", "mask_train", "=", "[", "]", "\n", "\n", "if", "epoch", "==", "0", ":", "\n", "            ", "self", ".", "train_iter", "=", "self", ".", "train_loader", ".", "__iter__", "(", ")", "\n", "if", "self", ".", "train_loader_neg", "is", "not", "None", ":", "\n", "                ", "self", ".", "train_iter_neg", "=", "self", ".", "train_loader_neg", ".", "__iter__", "(", ")", "\n", "\n", "", "", "while", "(", "j", "<=", "1000", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "sample", "=", "self", ".", "train_iter", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "self", ".", "train_iter", "=", "self", ".", "train_loader", ".", "__iter__", "(", ")", "\n", "sample", "=", "self", ".", "train_iter", ".", "__next__", "(", ")", "\n", "\n", "", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "sample", "[", "'Note'", "]", ",", "sample", "[", "'Num'", "]", ",", "sample", "[", "'Disease'", "]", ",", "sample", "[", "'Mask'", "]", ",", "sample", "[", "'Age'", "]", ",", "sample", "[", "'Demo'", "]", "\n", "if", "self", ".", "train_loader_neg", "is", "not", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "sample_neg", "=", "self", ".", "train_iter_neg", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "self", ".", "train_iter_neg", "=", "self", ".", "train_loader_neg", ".", "__iter__", "(", ")", "\n", "sample_neg", "=", "self", ".", "train_iter_neg", ".", "__next__", "(", ")", "\n", "\n", "", "Note_neg", ",", "Num_neg", ",", "Disease_neg", ",", "Mask_neg", ",", "Age_neg", ",", "Demo_neg", "=", "sample_neg", "[", "'Note'", "]", ",", "sample_neg", "[", "'Num'", "]", ",", "sample_neg", "[", "'Disease'", "]", ",", "sample_neg", "[", "'Mask'", "]", ",", "sample_neg", "[", "'Age'", "]", ",", "sample_neg", "[", "'Demo'", "]", "\n", "\n", "Note", "=", "torch", ".", "cat", "(", "[", "Note", ",", "Note_neg", "]", ",", "0", ")", "\n", "Num", "=", "torch", ".", "cat", "(", "[", "Num", ",", "Num_neg", "]", ",", "0", ")", "\n", "Disease", "=", "torch", ".", "cat", "(", "[", "Disease", ",", "Disease_neg", "]", ",", "0", ")", "\n", "Mask", "=", "torch", ".", "cat", "(", "[", "Mask", ",", "Mask_neg", "]", ",", "0", ")", "\n", "Age", "=", "torch", ".", "cat", "(", "[", "Age", ",", "Age_neg", "]", ",", "0", ")", "\n", "Demo", "=", "torch", ".", "cat", "(", "[", "Demo", ",", "Demo_neg", "]", ",", "0", ")", "\n", "\n", "", "nRec", "+=", "Note", ".", "size", "(", ")", "[", "0", "]", "-", "np", ".", "sum", "(", "Mask", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "[", "0", "]", "\n", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "Variable", "(", "Note", ")", ".", "long", "(", ")", ",", "Variable", "(", "Num", ")", ".", "float", "(", ")", ",", "Variable", "(", "\n", "Disease", ")", ".", "float", "(", ")", ",", "Variable", "(", "Mask", ")", ".", "float", "(", ")", ",", "Variable", "(", "Age", ")", ".", "float", "(", ")", ",", "Variable", "(", "Demo", ")", ".", "float", "(", ")", "\n", "\n", "\n", "self", ".", "cnt_iter", "+=", "1", "\n", "\n", "if", "self", ".", "flg_cuda", ":", "\n", "                ", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "Note", ".", "cuda", "(", ")", ",", "Num", ".", "cuda", "(", ")", ",", "Disease", ".", "cuda", "(", ")", ",", "Mask", ".", "cuda", "(", ")", ",", "Age", ".", "cuda", "(", ")", ",", "Demo", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "Disease", "=", "Disease", ".", "squeeze", "(", "1", ")", "\n", "Mask", "=", "Mask", ".", "squeeze", "(", "1", ")", "\n", "output", "=", "self", ".", "model", "(", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", "\n", "output", "=", "output", "*", "(", "1.0", "-", "Mask", ")", "\n", "Disease", "=", "Disease", "*", "(", "1.0", "-", "Mask", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "Disease", ")", "\n", "\n", "if", "self", ".", "alpha_L1", ">", "0", ":", "\n", "                ", "l1_crit", "=", "nn", ".", "L1Loss", "(", "size_average", "=", "False", ")", "\n", "for", "fc", "in", "self", ".", "model", ".", "FCs", ":", "\n", "                    ", "if", "self", ".", "flg_cuda", ":", "\n", "                        ", "target_reg", "=", "Variable", "(", "torch", ".", "zeros", "(", "fc", ".", "weight", ".", "size", "(", ")", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                        ", "target_reg", "=", "Variable", "(", "torch", ".", "zeros", "(", "fc", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "", "loss", "+=", "l1_crit", "(", "fc", ".", "weight", ",", "target_reg", ")", "*", "self", ".", "alpha_L1", "\n", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "flg_gradClip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "self", ".", "model", ".", "params", ",", "0.5", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "Y_multi_train", ".", "append", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "target_multi_train", ".", "append", "(", "Disease", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "mask_train", ".", "append", "(", "Mask", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "correct", "+=", "self", ".", "_getAccuracy", "(", "output", ",", "Disease", ",", "Mask", ")", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "j", "+=", "1", "\n", "if", "(", "j", "%", "self", ".", "log_interval", "[", "1", "]", "==", "0", ")", ":", "\n", "                ", "train_loss_temp", "=", "train_loss", "/", "np", ".", "sum", "(", "nRec", ")", "\n", "print", "(", "'Train Epoch: {}, Batch: {}, Loss: {:.4f}'", ".", "format", "(", "epoch", ",", "j", ",", "train_loss_temp", ")", ")", "\n", "\n", "", "", "if", "(", "epoch", "==", "0", ")", "|", "(", "epoch", "%", "self", ".", "log_interval", "[", "0", "]", "==", "0", ")", "|", "(", "epoch", "==", "self", ".", "n_iter", "-", "1", ")", ":", "\n", "            ", "trainAccuracy", "=", "100.", "*", "correct", "/", "nRec", "\n", "train_loss", "/=", "np", ".", "sum", "(", "nRec", ")", "\n", "lsTrainAccuracy", ".", "append", "(", "trainAccuracy", ")", "\n", "\n", "# print('\\nTrain Epoch: {} Loss: {:.4f}, Accuracy: {}, {}, {}/{} ({:.2f}%, {:.2f}%, {:.2f}%)'.format(epoch, train_loss, correct[0], correct[1], correct[2], nRec, trainAccuracy[0], trainAccuracy[1], trainAccuracy[2]))", "\n", "print", "(", "'\\nTrain Epoch: {} Loss: {:.4f}'", ".", "format", "(", "epoch", ",", "train_loss", ")", ")", "\n", "\n", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "=", "self", ".", "_aucAll", "(", "self", ".", "Y_multi_train", ",", "self", ".", "target_multi_train", ",", "self", ".", "mask_train", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "auc", ")", ")", ":", "\n", "                ", "print", "(", "str", "(", "i", ")", "+", "' Train set: Accuracy: pos_{}/{}, neg_{}/{} ({:.2f}%, AUC: {:.4f}, F1: {:.4f}%)'", ".", "format", "(", "\n", "tp", "[", "i", "]", ",", "p", "[", "i", "]", ",", "tn", "[", "i", "]", ",", "n", "[", "i", "]", ",", "trainAccuracy", "[", "i", "]", ",", "auc", "[", "i", "]", ",", "f1", "[", "i", "]", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._test": [[901, 948], ["enc_model.trainModel.model.eval", "enumerate", "numpy.sum", "enc_model.trainModel._aucAll", "numpy.mean", "print", "range", "lsTestAccuracy.append", "numpy.zeros", "numpy.zeros", "enc_model.trainModel.Y_multi.append", "enc_model.trainModel.target_multi.append", "enc_model.trainModel.mask.append", "len", "print", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.autograd.Variable().float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enc_model.trainModel.model", "Disease.squeeze.squeeze.squeeze", "Mask.squeeze.squeeze.squeeze", "enc_model.trainModel._getAccuracy", "enc_model.trainModel.data.cpu().numpy", "Disease.squeeze.squeeze.data.cpu().numpy", "Mask.squeeze.squeeze.data.cpu().numpy", "Note.size", "numpy.sum", "Note.cuda", "Num.cuda", "Disease.squeeze.squeeze.cuda", "Mask.squeeze.squeeze.cuda", "Age.cuda", "Demo.cuda", "str", "Mask.squeeze.squeeze.numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "enc_model.trainModel.criterion", "enc_model.trainModel.data.cpu", "Disease.squeeze.squeeze.data.cpu", "Mask.squeeze.squeeze.data.cpu"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._aucAll", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAccuracy"], ["", "", "", "def", "_test", "(", "self", ",", "epoch", ",", "lsTestAccuracy", ")", ":", "\n", "        ", "if", "(", "epoch", "==", "0", ")", "|", "(", "epoch", "%", "self", ".", "log_interval", "[", "0", "]", "==", "0", ")", "|", "(", "epoch", "==", "self", ".", "n_iter", "-", "1", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", ",", "nRec", "=", "np", ".", "zeros", "(", "3", ")", ",", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "self", ".", "Y_multi", "=", "[", "]", "\n", "self", ".", "target_multi", "=", "[", "]", "\n", "self", ".", "mask", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "sample", "in", "enumerate", "(", "self", ".", "test_loader", ")", ":", "\n", "                ", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "sample", "[", "'Note'", "]", ",", "sample", "[", "'Num'", "]", ",", "sample", "[", "'Disease'", "]", ",", "sample", "[", "'Mask'", "]", ",", "sample", "[", "'Age'", "]", ",", "sample", "[", "'Demo'", "]", "\n", "nRec", "+=", "Note", ".", "size", "(", ")", "[", "0", "]", "-", "np", ".", "sum", "(", "Mask", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "[", "0", "]", "\n", "\n", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "Variable", "(", "Note", ",", "volatile", "=", "True", ")", ".", "long", "(", ")", ",", "Variable", "(", "Num", ",", "\n", "volatile", "=", "True", ")", ".", "float", "(", ")", ",", "Variable", "(", "\n", "Disease", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ",", "Variable", "(", "Mask", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", ",", "Variable", "(", "Age", ",", "\n", "volatile", "=", "True", ")", ".", "float", "(", ")", ",", "Variable", "(", "\n", "Demo", ",", "volatile", "=", "True", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "flg_cuda", ":", "\n", "                    ", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", "=", "Note", ".", "cuda", "(", ")", ",", "Num", ".", "cuda", "(", ")", ",", "Disease", ".", "cuda", "(", ")", ",", "Mask", ".", "cuda", "(", ")", ",", "Age", ".", "cuda", "(", ")", ",", "Demo", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "Note", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Demo", ")", "\n", "Disease", "=", "Disease", ".", "squeeze", "(", "1", ")", "\n", "Mask", "=", "Mask", ".", "squeeze", "(", "1", ")", "\n", "output", "=", "output", "*", "(", "1.0", "-", "Mask", ")", "\n", "Disease", "=", "Disease", "*", "(", "1.0", "-", "Mask", ")", "\n", "\n", "test_loss", "+=", "(", "self", ".", "criterion", "(", "output", ",", "Disease", ")", ")", ".", "data", "[", "0", "]", "\n", "correct", "+=", "self", ".", "_getAccuracy", "(", "output", ",", "Disease", ",", "Mask", ")", "\n", "\n", "", "self", ".", "Y_multi", ".", "append", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "target_multi", ".", "append", "(", "Disease", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "mask", ".", "append", "(", "Mask", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "testAccuracy", "=", "100.", "*", "correct", "/", "nRec", "\n", "test_loss", "/=", "np", ".", "sum", "(", "nRec", ")", "# loss function already averages over batch size", "\n", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "=", "self", ".", "_aucAll", "(", "self", ".", "Y_multi", ",", "self", ".", "target_multi", ",", "self", ".", "mask", ")", "\n", "self", ".", "auc", "=", "np", ".", "mean", "(", "auc", ")", "\n", "print", "(", "'Test set: Average loss: {:.4f}'", ".", "format", "(", "test_loss", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "auc", ")", ")", ":", "\n", "                ", "print", "(", "str", "(", "i", ")", "+", "' Test set: Accuracy: pos_{}/{}, neg_{}/{} ({:.2f}%, AUC: {:.4f}, F1: {:.4f}%)'", ".", "format", "(", "\n", "tp", "[", "i", "]", ",", "p", "[", "i", "]", ",", "tn", "[", "i", "]", ",", "n", "[", "i", "]", ",", "testAccuracy", "[", "i", "]", ",", "auc", "[", "i", "]", ",", "f1", "[", "i", "]", "*", "100", ")", ")", "\n", "", "lsTestAccuracy", ".", "append", "(", "[", "testAccuracy", ",", "auc", ",", "f1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAccuracy": [[949, 954], ["numpy.sum", "pred.eq().cpu().float", "mask.data.cpu", "pred.eq().cpu", "pred.eq"], "methods", ["None"], ["", "", "def", "_getAccuracy", "(", "self", ",", "output", ",", "target", ",", "mask", ")", ":", "\n", "        ", "pred", "=", "(", "output", ".", "data", ">", "0.5", ")", ".", "float", "(", ")", "\n", "accuracy", "=", "(", "pred", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", "*", "(", "1.0", "-", "mask", ".", "data", ".", "cpu", "(", ")", ")", ")", ".", "numpy", "(", ")", "\n", "accuracy", "=", "np", ".", "sum", "(", "accuracy", ",", "axis", "=", "0", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._aucAll": [[955, 966], ["numpy.vstack", "numpy.vstack", "numpy.vstack", "range", "enc_model.trainModel._getAucF1", "range", "len", "[].append"], "methods", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAucF1"], ["", "def", "_aucAll", "(", "self", ",", "Y_hat", ",", "Y", ",", "mask", ")", ":", "\n", "# Multi-task, inputs are multiple dimensions", "\n", "        ", "Y_hat", "=", "np", ".", "vstack", "(", "Y_hat", ")", "\n", "Y", "=", "np", ".", "vstack", "(", "Y", ")", "\n", "mask", "=", "np", ".", "vstack", "(", "mask", ")", "\n", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "Y_hat", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "result", "=", "self", ".", "_getAucF1", "(", "Y_hat", "[", ":", ",", "i", "]", ",", "Y", "[", ":", ",", "i", "]", ",", "mask", "[", ":", ",", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "result", ")", ")", ":", "\n", "                ", "[", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "]", "[", "j", "]", ".", "append", "(", "result", "[", "j", "]", ")", "\n", "", "", "return", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._getAucF1": [[967, 982], ["sum", "sum", "sum", "sum", "len", "sklearn.metrics.roc_auc_score", "sklearn.metrics.f1_score", "numpy.unique"], "methods", ["None"], ["", "def", "_getAucF1", "(", "self", ",", "Y_hat", ",", "Y", ",", "mask", ")", ":", "\n", "# Single task", "\n", "        ", "Y_hat", "=", "Y_hat", "[", "mask", "==", "0", "]", "\n", "Y", "=", "Y", "[", "mask", "==", "0", "]", "\n", "tp", "=", "sum", "(", "(", "Y", "==", "1", ")", "&", "(", "Y_hat", ">=", "self", ".", "posThres", ")", ")", "\n", "tn", "=", "sum", "(", "(", "Y", "==", "0", ")", "&", "(", "Y_hat", "<", "self", ".", "posThres", ")", ")", "\n", "p", "=", "sum", "(", "Y", "==", "1", ")", "\n", "n", "=", "sum", "(", "Y", "==", "0", ")", "\n", "if", "len", "(", "np", ".", "unique", "(", "Y", ")", ")", "==", "1", ":", "\n", "            ", "auc", "=", "0", "\n", "f1", "=", "0", "\n", "", "else", ":", "\n", "            ", "auc", "=", "metrics", ".", "roc_auc_score", "(", "Y", ",", "Y_hat", ")", "\n", "f1", "=", "metrics", ".", "f1_score", "(", "Y", ",", "1", "*", "(", "Y_hat", ">", "self", ".", "posThres", ")", ")", "\n", "", "return", "auc", ",", "f1", ",", "tp", ",", "p", ",", "tn", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._saveModel": [[983, 985], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "_saveModel", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "model", ",", "self", ".", "savePath", "+", "'_model.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.enc_model.trainModel._drawAUC": [[986, 1024], ["numpy.vstack", "numpy.vstack", "numpy.vstack", "pickle.dump", "open"], "methods", ["None"], ["", "def", "_drawAUC", "(", "self", ",", "Y_multi", ",", "target_multi", ",", "mask", ")", ":", "\n", "        ", "Y_multi", "=", "np", ".", "vstack", "(", "Y_multi", ")", "\n", "target_multi", "=", "np", ".", "vstack", "(", "target_multi", ")", "\n", "mask", "=", "np", ".", "vstack", "(", "mask", ")", "\n", "pickle", ".", "dump", "(", "[", "Y_multi", ",", "target_multi", ",", "mask", "]", ",", "open", "(", "self", ".", "savePath", "+", "'_pred.p'", ",", "'wb'", ")", ")", "\n", "\"\"\"\n        # Uncomment if matplotlib is available\n        fpr, tpr, thresholds = metrics.roc_curve(Y, Y_hat, pos_label=1)\n        prec, recall, thresholds = metrics.precision_recall_curve(Y, Y_hat, pos_label= 1)\n\n        # Print ROC curve\n        pp = PdfPages(self.savePath + '_plots.pdf')\n\n        figure1 = plt.figure(figsize=(16, 6))\n        gs1 = gridspec.GridSpec(1, 2)\n\n        ax1 = figure1.add_subplot(gs1[0])\n        ax1.plot(fpr, tpr, 'g-')\n        ax1.plot([0, 1], [0, 1], ls=\"--\")\n        ax1.set_xlim([0, 1])\n        ax1.set_ylim([0, 1])\n        ax1.set_ylabel('True positive rate', fontsize=12)\n        ax1.set_xlabel('False positive rate', fontsize=12)\n        ax1.set_title('ROC curve', fontsize=16)\n\n        ax2 = figure1.add_subplot(gs1[1])\n        ax2.plot(prec, recall, 'b-')\n        ax2.plot([0, 1], [0, 1], ls=\"--\")\n        ax2.set_xlim([0, 1])\n        ax2.set_ylim([0, 1])\n        ax2.set_ylabel('Recall', fontsize=12)\n        ax2.set_xlabel('Precision', fontsize=12)\n        ax2.set_title('Precision-recall curve', fontsize=16)\n\n        pp.savefig(figure1)\n        plt.close(figure1)\n        pp.close()\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeNotes": [[36, 46], ["list", "numpy.random.choice", "numpy.random.choice", "int"], "function", ["None"], ["def", "makeNotes", "(", "maxIdx", "=", "1000", ",", "maxDocLen", "=", "800", ")", ":", "\n", "    ", "'''\n    Generate synthetic data of word indexes in one encounter's note.\n    :param maxIdx: maximum number of word index\n    :param maxDocLen: maximum note length\n    '''", "\n", "docLen", "=", "np", ".", "random", ".", "choice", "(", "maxDocLen", "-", "1", ")", "+", "1", "\n", "note", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "maxIdx", ",", "size", "=", "docLen", ")", ")", "\n", "note", "=", "[", "int", "(", "x", ")", "for", "x", "in", "note", "]", "\n", "return", "note", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeNum": [[48, 57], ["list", "numpy.random.choice", "list.append", "numpy.random.normal"], "function", ["None"], ["", "def", "makeNum", "(", "maxDays", "=", "50", ")", ":", "\n", "    ", "'''\n    Generate synthetic data of the numerical values of one encounter\n    :param maxDays: maximum days between two encounters\n    '''", "\n", "labs", "=", "list", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "150", ")", ")", "\n", "days", "=", "np", ".", "random", ".", "choice", "(", "maxDays", ")", "\n", "labs", ".", "append", "(", "days", ")", "\n", "return", "labs", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeBinary": [[58, 68], ["range", "out.append", "numpy.random.choice"], "function", ["None"], ["", "def", "makeBinary", "(", "ndim", ",", "lsPosPct", ")", ":", "\n", "    ", "'''\n    Generate a list of binary values\n    :param ndim: number of binary values to generate\n    :param lsPosPct: positive percentage of each value\n    '''", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "        ", "out", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "2", ",", "p", "=", "[", "1", "-", "lsPosPct", "[", "i", "]", ",", "lsPosPct", "[", "i", "]", "]", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeRecord": [[69, 88], ["range", "makeData.makeBinary", "makeData.makeBinary", "numpy.random.normal", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "Notes.append", "Num.append", "makeData.makeNotes", "makeData.makeNum"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeBinary", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeBinary", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeNotes", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.makeNum"], ["", "def", "makeRecord", "(", "maxWordIdx", ",", "maxEncounter", "=", "30", ")", ":", "\n", "    ", "'''\n    Generate synthetic data of each record\n    :param maxEncounter: maximum number of encounters\n    '''", "\n", "nEncounter", "=", "np", ".", "random", ".", "choice", "(", "maxEncounter", "-", "1", ")", "+", "1", "# minimum 1 encounter", "\n", "Notes", ",", "Num", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "nEncounter", ")", ":", "\n", "        ", "Notes", ".", "append", "(", "makeNotes", "(", "maxIdx", "=", "maxWordIdx", ")", ")", "\n", "Num", ".", "append", "(", "makeNum", "(", ")", ")", "\n", "\n", "", "Disease", "=", "makeBinary", "(", "ndim", "=", "3", ",", "lsPosPct", "=", "[", "0.1", ",", "0.1", ",", "0.1", "]", ")", "\n", "Mask", "=", "makeBinary", "(", "ndim", "=", "3", ",", "lsPosPct", "=", "[", "0.05", ",", "0.05", ",", "0.05", "]", ")", "\n", "\n", "Age", "=", "np", ".", "random", ".", "normal", "(", ")", "\n", "Gender", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "\n", "Race", "=", "np", ".", "random", ".", "choice", "(", "25", ")", "\n", "Ethnic", "=", "np", ".", "random", ".", "choice", "(", "29", ")", "\n", "return", "[", "Notes", ",", "Num", ",", "Disease", ",", "Mask", ",", "Age", ",", "Gender", ",", "Race", ",", "Ethnic", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.makeData.splitPos": [[89, 97], ["max", "dfTrainPos.append", "dfTrainNeg.append"], "function", ["None"], ["", "def", "splitPos", "(", "dfTrain", ")", ":", "\n", "    ", "dfTrainPos", ",", "dfTrainNeg", "=", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "dfTrain", ":", "\n", "        ", "if", "max", "(", "row", "[", "2", "]", ")", ">", "0", ":", "\n", "            ", "dfTrainPos", ".", "append", "(", "row", ")", "\n", "", "else", ":", "\n", "            ", "dfTrainNeg", ".", "append", "(", "row", ")", "\n", "", "", "return", "dfTrainPos", ",", "dfTrainNeg", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__init__": [[31, 209], ["negex.negTagger.__sentence.split", "range", "sentencePortion.strip", "sb.reverse", "range", "sentencePortion.strip", "negex.negTagger.__negTaggedSentence.replace", "re.sub", "rule[].sub", "re.sub", "re.sub.split", "re.compile", "re.compile.search", "len", "sb.append", "aScopes.append", "len", "sb2.insert", "aScopes.append", "range", "sentencePortion.strip", "sb3.reverse", "range", "sentencePortion.strip", "line.split", "negex.negTagger.__scopesToReturn.append", "rule[].strip", "negex.negTagger.__sentence.replace", "len", "sentenceTokens[].replace", "sentencePortion.strip", "len", "sentenceTokens[].replace", "sentencePortion.strip", "len", "aScopes.append", "len", "sb4.insert", "aScopes.append", "joiner.join", "re.compile.search.group", "sentencePortion.strip", "sentencePortion.strip", "len", "sentenceTokens[].replace", "sentencePortion.strip", "len", "sentenceTokens[].replace", "sentencePortion.strip", "tokensToReturn.append", "rule[].strip", "aScopes.append", "aScopes.append", "sentencePortion.strip", "sentencePortion.strip", "re.sub", "sentencePortion.strip", "sentencePortion.strip", "aScopes.append", "aScopes.append", "rule[].strip", "re.compile.search.group().strip", "sentencePortion.strip", "sentencePortion.strip", "re.compile.search.group"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sentence", "=", "''", ",", "phrases", "=", "None", ",", "rules", "=", "None", ",", "\n", "negP", "=", "True", ")", ":", "\n", "        ", "self", ".", "__sentence", "=", "sentence", "\n", "self", ".", "__phrases", "=", "phrases", "\n", "self", ".", "__rules", "=", "rules", "\n", "self", ".", "__negTaggedSentence", "=", "''", "\n", "self", ".", "__scopesToReturn", "=", "[", "]", "\n", "self", ".", "__negationFlag", "=", "None", "\n", "\n", "filler", "=", "'_'", "\n", "\n", "for", "rule", "in", "self", ".", "__rules", ":", "\n", "            ", "reformatRule", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "filler", ",", "rule", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "self", ".", "__sentence", "=", "rule", "[", "3", "]", ".", "sub", "(", "' '", "+", "rule", "[", "2", "]", ".", "strip", "(", ")", "\n", "+", "reformatRule", "\n", "+", "rule", "[", "2", "]", ".", "strip", "(", ")", "+", "' '", ",", "self", ".", "__sentence", ")", "\n", "", "for", "phrase", "in", "self", ".", "__phrases", ":", "\n", "            ", "phrase", "=", "re", ".", "sub", "(", "r'([.^$*+?{\\\\|()[\\]])'", ",", "r'\\\\\\1'", ",", "phrase", ")", "\n", "splitPhrase", "=", "phrase", ".", "split", "(", ")", "\n", "joiner", "=", "r'\\W+'", "\n", "joinedPattern", "=", "r'\\b'", "+", "joiner", ".", "join", "(", "splitPhrase", ")", "+", "r'\\b'", "\n", "reP", "=", "re", ".", "compile", "(", "joinedPattern", ",", "re", ".", "IGNORECASE", ")", "\n", "m", "=", "reP", ".", "search", "(", "self", ".", "__sentence", ")", "\n", "if", "m", ":", "\n", "                ", "self", ".", "__sentence", "=", "self", ".", "__sentence", ".", "replace", "(", "m", ".", "group", "(", "0", ")", ",", "'[PHRASE]'", "\n", "+", "re", ".", "sub", "(", "r'\\s+'", ",", "filler", ",", "m", ".", "group", "(", "0", ")", ".", "strip", "(", ")", ")", "\n", "+", "'[PHRASE]'", ")", "\n", "\n", "#        Exchanges the [PHRASE] ... [PHRASE] tags for [NEGATED] ... [NEGATED] ", "\n", "#        based on PREN, POST rules and if negPoss is set to True then based on ", "\n", "#        PREP and POSP, as well.", "\n", "#        Because PRENEGATION [PREN} is checked first it takes precedent over", "\n", "#        POSTNEGATION [POST]. Similarly POSTNEGATION [POST] takes precedent over", "\n", "#        POSSIBLE PRENEGATION [PREP] and [PREP] takes precedent over POSSIBLE ", "\n", "#        POSTNEGATION [POSP].", "\n", "\n", "", "", "overlapFlag", "=", "0", "\n", "prenFlag", "=", "0", "\n", "postFlag", "=", "0", "\n", "prePossibleFlag", "=", "0", "\n", "postPossibleFlag", "=", "0", "\n", "\n", "sentenceTokens", "=", "self", ".", "__sentence", ".", "split", "(", ")", "\n", "sentencePortion", "=", "''", "\n", "aScopes", "=", "[", "]", "\n", "sb", "=", "[", "]", "\n", "#check for [PREN]", "\n", "for", "i", "in", "range", "(", "len", "(", "sentenceTokens", ")", ")", ":", "\n", "            ", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "==", "'[PREN]'", ":", "\n", "                ", "prenFlag", "=", "1", "\n", "overlapFlag", "=", "0", "\n", "\n", "", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "in", "[", "'[CONJ]'", ",", "'[PSEU]'", ",", "'[POST]'", ",", "'[PREP]'", ",", "'[POSP]'", "]", ":", "\n", "                ", "overlapFlag", "=", "1", "\n", "\n", "", "if", "i", "+", "1", "<", "len", "(", "sentenceTokens", ")", ":", "\n", "                ", "if", "sentenceTokens", "[", "i", "+", "1", "]", "[", ":", "6", "]", "==", "'[PREN]'", ":", "\n", "                    ", "overlapFlag", "=", "1", "\n", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "                        ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "", "sentencePortion", "=", "''", "\n", "\n", "", "", "if", "prenFlag", "==", "1", "and", "overlapFlag", "==", "0", ":", "\n", "                ", "sentenceTokens", "[", "i", "]", "=", "sentenceTokens", "[", "i", "]", ".", "replace", "(", "'[PHRASE]'", ",", "'[NEGATED]'", ")", "\n", "sentencePortion", "=", "sentencePortion", "+", "' '", "+", "sentenceTokens", "[", "i", "]", "\n", "\n", "", "sb", ".", "append", "(", "sentenceTokens", "[", "i", "]", ")", "\n", "\n", "", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "            ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "\n", "", "sentencePortion", "=", "''", "\n", "sb", ".", "reverse", "(", ")", "\n", "sentenceTokens", "=", "sb", "\n", "sb2", "=", "[", "]", "\n", "# Check for [POST]", "\n", "for", "i", "in", "range", "(", "len", "(", "sentenceTokens", ")", ")", ":", "\n", "            ", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "==", "'[POST]'", ":", "\n", "                ", "postFlag", "=", "1", "\n", "overlapFlag", "=", "0", "\n", "\n", "", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "in", "[", "'[CONJ]'", ",", "'[PSEU]'", ",", "'[PREN]'", ",", "'[PREP]'", ",", "'[POSP]'", "]", ":", "\n", "                ", "overlapFlag", "=", "1", "\n", "\n", "", "if", "i", "+", "1", "<", "len", "(", "sentenceTokens", ")", ":", "\n", "                ", "if", "sentenceTokens", "[", "i", "+", "1", "]", "[", ":", "6", "]", "==", "'[POST]'", ":", "\n", "                    ", "overlapFlag", "=", "1", "\n", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "                        ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "", "sentencePortion", "=", "''", "\n", "\n", "", "", "if", "postFlag", "==", "1", "and", "overlapFlag", "==", "0", ":", "\n", "                ", "sentenceTokens", "[", "i", "]", "=", "sentenceTokens", "[", "i", "]", ".", "replace", "(", "'[PHRASE]'", ",", "'[NEGATED]'", ")", "\n", "sentencePortion", "=", "sentenceTokens", "[", "i", "]", "+", "' '", "+", "sentencePortion", "\n", "\n", "", "sb2", ".", "insert", "(", "0", ",", "sentenceTokens", "[", "i", "]", ")", "\n", "\n", "", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "            ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "\n", "", "sentencePortion", "=", "''", "\n", "self", ".", "__negTaggedSentence", "=", "' '", ".", "join", "(", "sb2", ")", "\n", "\n", "if", "negP", ":", "\n", "            ", "sentenceTokens", "=", "sb2", "\n", "sb3", "=", "[", "]", "\n", "# Check for [PREP]", "\n", "for", "i", "in", "range", "(", "len", "(", "sentenceTokens", ")", ")", ":", "\n", "                ", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "==", "'[PREP]'", ":", "\n", "                    ", "prePossibleFlag", "=", "1", "\n", "overlapFlag", "=", "0", "\n", "\n", "", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "in", "[", "'[CONJ]'", ",", "'[PSEU]'", ",", "'[POST]'", ",", "'[PREN]'", ",", "'[POSP]'", "]", ":", "\n", "                    ", "overlapFlag", "=", "1", "\n", "\n", "", "if", "i", "+", "1", "<", "len", "(", "sentenceTokens", ")", ":", "\n", "                    ", "if", "sentenceTokens", "[", "i", "+", "1", "]", "[", ":", "6", "]", "==", "'[PREP]'", ":", "\n", "                        ", "overlapFlag", "=", "1", "\n", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "                            ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "", "sentencePortion", "=", "''", "\n", "\n", "", "", "if", "prePossibleFlag", "==", "1", "and", "overlapFlag", "==", "0", ":", "\n", "                    ", "sentenceTokens", "[", "i", "]", "=", "sentenceTokens", "[", "i", "]", ".", "replace", "(", "'[PHRASE]'", ",", "'[POSSIBLE]'", ")", "\n", "sentencePortion", "=", "sentencePortion", "+", "' '", "+", "sentenceTokens", "[", "i", "]", "\n", "\n", "", "sb3", "=", "sb3", "+", "' '", "+", "sentenceTokens", "[", "i", "]", "\n", "\n", "", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "                ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "\n", "", "sentencePortion", "=", "''", "\n", "sb3", ".", "reverse", "(", ")", "\n", "sentenceTokens", "=", "sb3", "\n", "sb4", "=", "[", "]", "\n", "# Check for [POSP]", "\n", "for", "i", "in", "range", "(", "len", "(", "sentenceTokens", ")", ")", ":", "\n", "                ", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "==", "'[POSP]'", ":", "\n", "                    ", "postPossibleFlag", "=", "1", "\n", "overlapFlag", "=", "0", "\n", "\n", "", "if", "sentenceTokens", "[", "i", "]", "[", ":", "6", "]", "in", "[", "'[CONJ]'", ",", "'[PSEU]'", ",", "'[PREN]'", ",", "'[PREP]'", ",", "'[POST]'", "]", ":", "\n", "                    ", "overlapFlag", "=", "1", "\n", "\n", "", "if", "i", "+", "1", "<", "len", "(", "sentenceTokens", ")", ":", "\n", "                    ", "if", "sentenceTokens", "[", "i", "+", "1", "]", "[", ":", "6", "]", "==", "'[POSP]'", ":", "\n", "                        ", "overlapFlag", "=", "1", "\n", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "                            ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "", "sentencePortion", "=", "''", "\n", "\n", "", "", "if", "postPossibleFlag", "==", "1", "and", "overlapFlag", "==", "0", ":", "\n", "                    ", "sentenceTokens", "[", "i", "]", "=", "sentenceTokens", "[", "i", "]", ".", "replace", "(", "'[PHRASE]'", ",", "'[POSSIBLE]'", ")", "\n", "sentencePortion", "=", "sentenceTokens", "[", "i", "]", "+", "' '", "+", "sentencePortion", "\n", "\n", "", "sb4", ".", "insert", "(", "0", ",", "sentenceTokens", "[", "i", "]", ")", "\n", "\n", "", "if", "sentencePortion", ".", "strip", "(", ")", ":", "\n", "                ", "aScopes", ".", "append", "(", "sentencePortion", ".", "strip", "(", ")", ")", "\n", "\n", "", "self", ".", "__negTaggedSentence", "=", "' '", ".", "join", "(", "sb4", ")", "\n", "\n", "", "if", "'[NEGATED]'", "in", "self", ".", "__negTaggedSentence", ":", "\n", "            ", "self", ".", "__negationFlag", "=", "'negated'", "\n", "", "elif", "'[POSSIBLE]'", "in", "self", ".", "__negTaggedSentence", ":", "\n", "            ", "self", ".", "__negationFlag", "=", "'possible'", "\n", "", "else", ":", "\n", "            ", "self", ".", "__negationFlag", "=", "'affirmed'", "\n", "\n", "", "self", ".", "__negTaggedSentence", "=", "self", ".", "__negTaggedSentence", ".", "replace", "(", "filler", ",", "' '", ")", "\n", "\n", "for", "line", "in", "aScopes", ":", "\n", "            ", "tokensToReturn", "=", "[", "]", "\n", "thisLineTokens", "=", "line", ".", "split", "(", ")", "\n", "for", "token", "in", "thisLineTokens", ":", "\n", "                ", "if", "token", "[", ":", "6", "]", "not", "in", "[", "'[PREN]'", ",", "'[PREP]'", ",", "'[POST]'", ",", "'[POSP]'", "]", ":", "\n", "                    ", "tokensToReturn", ".", "append", "(", "token", ")", "\n", "", "", "self", ".", "__scopesToReturn", ".", "append", "(", "' '", ".", "join", "(", "tokensToReturn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.getNegTaggedSentence": [[210, 212], ["None"], "methods", ["None"], ["", "", "def", "getNegTaggedSentence", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__negTaggedSentence", "\n", "", "def", "getNegationFlag", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.getNegationFlag": [[212, 214], ["None"], "methods", ["None"], ["", "def", "getNegationFlag", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__negationFlag", "\n", "", "def", "getScopes", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.getScopes": [[214, 216], ["None"], "methods", ["None"], ["", "def", "getScopes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__scopesToReturn", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.negTagger.__str__": [[217, 221], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "text", "=", "self", ".", "__negTaggedSentence", "\n", "text", "+=", "'\\t'", "+", "self", ".", "__negationFlag", "\n", "text", "+=", "'\\t'", "+", "'\\t'", ".", "join", "(", "self", ".", "__scopesToReturn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.negex.sortRules": [[3, 22], ["ruleList.sort", "rule.strip", "s.split.split", "s[].split", "s.split.append", "sortedList.append", "re.compile"], "function", ["None"], ["def", "sortRules", "(", "ruleList", ")", ":", "\n", "    ", "\"\"\"Return sorted list of rules.\n    \n    Rules should be in a tab-delimited format: 'rule\\t\\t[four letter negation tag]'\n    Sorts list of rules descending based on length of the rule, \n    splits each rule into components, converts pattern to regular expression,\n    and appends it to the end of the rule. \"\"\"", "\n", "ruleList", ".", "sort", "(", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "sortedList", "=", "[", "]", "\n", "for", "rule", "in", "ruleList", ":", "\n", "        ", "s", "=", "rule", ".", "strip", "(", ")", "\n", "s", "=", "s", ".", "split", "(", "'\\t'", ")", "\n", "\n", "splitTrig", "=", "s", "[", "0", "]", ".", "split", "(", ")", "\n", "trig", "=", "r'\\s+'", ".", "join", "(", "splitTrig", ")", "\n", "pattern", "=", "r'\\b('", "+", "trig", "+", "r')\\b'", "\n", "s", ".", "append", "(", "re", ".", "compile", "(", "pattern", ",", "re", ".", "IGNORECASE", ")", ")", "\n", "sortedList", ".", "append", "(", "s", ")", "\n", "", "return", "sortedList", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.dataProcess_LabExample.getNum": [[28, 83], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "Valx_core.preprocessing", "Valx_core.extract_candidates_numeric", "len", "Valx_core.formalize_expressions", "Valx_core.identify_variable", "re.sub", "re.sub", "re.sub.split", "Valx_core.associate_variable_values", "range", "len", "len", "Valx_core.context_validation", "Valx_core.normalization", "len", "Valx_core.hr_validation", "float", "float"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.preprocessing", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.extract_candidates_numeric", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.formalize_expressions", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.identify_variable", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.associate_variable_values", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.context_validation", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.normalization", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.hr_validation"], ["def", "getNum", "(", "s", ",", "feature_dict_dk", ",", "feature_dict_umls", ")", ":", "\n", "    ", "\"\"\"\n    Clean text input and run valx\n    \"\"\"", "\n", "all_exps", "=", "[", "]", "\n", "s", "=", "re", ".", "sub", "(", "r'(\\d+)(,)(\\d+)'", ",", "r'\\1\\2'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r'(\\()(.*(m|g|n)(/|\\\\|\\^)*\\d.*)(\\))'", ",", "r'\\2'", ",", "s", ")", "# keep units in parenthesis", "\n", "s", "=", "re", ".", "sub", "(", "r'\\([^\\)]*?\\)'", ",", "''", ",", "s", ")", "# remove parenthesis", "\n", "s", "=", "re", ".", "sub", "(", "' '", ",", "'  '", ",", "s", ")", "# for next step", "\n", "s", "=", "re", ".", "sub", "(", "r'(^|\\s)(((0|1)\\d{3})|(2(0|1|2|3|4)\\d{2}))(\\s|$)'", ",", "''", ",", "s", ")", "# remove time stamp", "\n", "s", "=", "re", ".", "sub", "(", "'(^|\\s)\\d+((E|e)ncounter(s?)|hrs|HRS|(R|r)eading(s?))\\s'", ",", "' '", ",", "s", ")", "# remove encounter counts", "\n", "s", "=", "re", ".", "sub", "(", "r'(\\d+)(\\s*)\\'(\\s*)((\\d+)(\\s*)\\\")?'", ",", "r'\\1.\\5 feet'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r'\\?C'", ",", "'Celsius'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r'\\?F'", ",", "'Fahrenheit'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "'[:,]'", ",", "' '", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r'([^0-9])(\\s*)(\\.)(\\s*)([^0-9])'", ",", "r'\\1 \\5'", ",", "s", ")", "# Remove . not between digits", "\n", "s", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "s", ")", "\n", "t", "=", "v", ".", "preprocessing", "(", "s", ")", "\n", "sections_num", ",", "t2", "=", "v", ".", "extract_candidates_numeric", "(", "t", ")", "\n", "if", "len", "(", "t2", ")", ">", "0", ":", "\n", "        ", "for", "t3", "in", "t2", ":", "\n", "            ", "flg_longStr", "=", "False", "\n", "t3", "=", "v", ".", "formalize_expressions", "(", "t3", ")", "\n", "exp_text", ",", "key_ngrams", "=", "v", ".", "identify_variable", "(", "t3", ",", "feature_dict_dk", ",", "feature_dict_umls", ")", "\n", "for", "ngram", "in", "key_ngrams", ":", "# Remove cases like 'BP Temp Temp src Pulse Resp SpO2 Height Weight 2.1 ?C (98.7 ?F) Oral 97 17 97 %'", "\n", "                ", "ngram", "=", "re", ".", "sub", "(", "'[^a-zA-Z0-9\\\\/]'", ",", "' '", ",", "ngram", ")", "\n", "ngram", "=", "re", ".", "sub", "(", "'\\s+'", ",", "' '", ",", "ngram", ")", "\n", "lsNgram", "=", "ngram", ".", "split", "(", ")", "\n", "if", "len", "(", "lsNgram", ")", ">", "2", ":", "\n", "                    ", "cntMatch", "=", "0", "\n", "for", "gram", "in", "lsNgram", ":", "\n", "                        ", "if", "gram", "in", "feature_dict_dk", ":", "\n", "                            ", "cntMatch", "+=", "1", "\n", "", "", "if", "cntMatch", ">=", "2", ":", "\n", "                        ", "flg_longStr", "=", "True", "\n", "break", "\n", "\n", "", "", "", "if", "not", "flg_longStr", ":", "\n", "                ", "variables", ",", "vars_values", "=", "v", ".", "associate_variable_values", "(", "exp_text", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "variables", ")", ")", ":", "\n", "                    ", "curr_var", "=", "variables", "[", "k", "]", "\n", "curr_exps", "=", "vars_values", "[", "k", "]", "\n", "if", "curr_var", "in", "features", ":", "\n", "# pdb.set_trace()", "\n", "                        ", "fea_list", "=", "features", "[", "curr_var", "]", "\n", "curr_exps", "=", "v", ".", "context_validation", "(", "curr_exps", ",", "fea_list", "[", "1", "]", ",", "fea_list", "[", "2", "]", ")", "\n", "curr_exps", "=", "v", ".", "normalization", "(", "fea_list", "[", "3", "]", ",", "curr_exps", ")", "# unit conversion and value normalization", "\n", "if", "(", "fea_list", "[", "4", "]", "!=", "''", ")", "&", "(", "fea_list", "[", "5", "]", "!=", "''", ")", ":", "\n", "                            ", "curr_exps", "=", "v", ".", "hr_validation", "(", "curr_exps", ",", "float", "(", "fea_list", "[", "4", "]", ")", ",", "\n", "float", "(", "fea_list", "[", "5", "]", ")", ")", "# heuristic rule-based validation", "\n", "", "", "if", "len", "(", "curr_exps", ")", ">", "0", ":", "\n", "                        ", "all_exps", "+=", "curr_exps", "\n", "\n", "", "", "", "", "", "return", "all_exps", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.dataProcess_LabExample.exp2DF": [[84, 97], ["len", "pandas.DataFrame", "pandas.DataFrame.from_records", "numpy.arange", "len", "len"], "function", ["None"], ["", "def", "exp2DF", "(", "exp", ",", "ID", ")", ":", "\n", "    ", "\"\"\"\n    Convert expression to data frame\n    :param exp:\n    :return:\n    \"\"\"", "\n", "if", "len", "(", "exp", ")", "==", "0", ":", "\n", "        ", "dfOut", "=", "pd", ".", "DataFrame", "(", "{", "'ItemName'", ":", "''", ",", "'Relationship'", ":", "''", ",", "'Value'", ":", "None", ",", "'Unit'", ":", "''", ",", "'PAT_ENC_CSN_ID'", ":", "ID", ",", "'Sequence'", ":", "0", "}", ",", "index", "=", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "dfOut", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "exp", ",", "columns", "=", "[", "'ItemName'", ",", "'Relationship'", ",", "'Value'", ",", "'Unit'", "]", ")", "\n", "dfOut", "[", "'PAT_ENC_CSN_ID'", "]", "=", "[", "ID", "]", "*", "len", "(", "dfOut", ")", "\n", "dfOut", "[", "'Sequence'", "]", "=", "np", ".", "arange", "(", "len", "(", "dfOut", ")", ")", "\n", "", "return", "dfOut", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.dataProcess_LabExample.main": [[101, 134], ["dfNote.iterrows", "dfNote3[].value_counts", "dfNote4.reset_index.reset_index", "dfNote4.reset_index.groupby().apply().reset_index", "util_noTorch.getNumBlock", "pandas.DataFrame.from_records", "dataProcess_LabExample.exp2DF", "pandas.concat", "dataProcess_LabExample.getNum", "dfNote4.reset_index.groupby().apply", "dfNote3[].isin", "dfNote4.reset_index.groupby"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.getNumBlock", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.dataProcess_LabExample.exp2DF", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.dataProcess_LabExample.getNum"], ["", "def", "main", "(", "dfNote", ")", ":", "\n", "#===== Split note types =======", "\n", "\n", "    ", "dictKeyWords", "=", "{", "'lab results'", ":", "'labs'", ",", "'labs'", ":", "'labs'", ",", "'blood'", ":", "'labs'", ",", "\n", "'vital signs'", ":", "'vitals'", ",", "'vitals'", ":", "'vitals'", ",", "'wt reading'", ":", "'vitals'", ",", "'temp'", ":", "'vitals'", ",", "\n", "'value ref range'", ":", "'value with ref'", ",", "'value date/time'", ":", "'value with date/time'", ",", "'value date'", ":", "'value with date'", "}", "\n", "# Lab format remove reference; vital format remove date time", "\n", "\n", "dfNote3", "=", "None", "\n", "for", "row", "in", "dfNote", ".", "iterrows", "(", ")", ":", "\n", "        ", "row", "=", "row", "[", "1", "]", "\n", "out", "=", "util", ".", "getNumBlock", "(", "row", "[", "'NOTE_TEXT'", "]", ",", "dictKeyWords", ",", "[", "0.1", ",", "0.5", "]", ",", "[", "1", ",", "3", "]", ")", "\n", "dfOut", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "out", ",", "columns", "=", "[", "'Type'", ",", "'Text'", "]", ")", "\n", "#dfOut['NOTE_ID'] = row['NOTE_ID']", "\n", "dfOut", "[", "'PAT_ENC_CSN_ID'", "]", "=", "row", "[", "'PAT_ENC_CSN_ID'", "]", "\n", "if", "dfNote3", "is", "None", ":", "\n", "            ", "dfNote3", "=", "dfOut", "\n", "", "else", ":", "\n", "            ", "dfNote3", "=", "pd", ".", "concat", "(", "[", "dfNote3", ",", "dfOut", "]", ")", "\n", "#pdb.set_trace()", "\n", "\n", "", "", "dfNote3", "[", "'Type'", "]", ".", "value_counts", "(", ")", "\n", "dfNote4", "=", "dfNote3", "[", "~", "dfNote3", "[", "'Type'", "]", ".", "isin", "(", "[", "'text'", ",", "'num_prev'", "]", ")", "]", "\n", "\n", "def", "f_temp", "(", "group", ")", ":", "\n", "        ", "i", "=", "group", ".", "index", "[", "0", "]", "\n", "return", "exp2DF", "(", "getNum", "(", "group", ".", "loc", "[", "i", ",", "'Text'", "]", ",", "feature_dict_dk", ",", "feature_dict_umls", ")", ",", "group", ".", "loc", "[", "i", ",", "'PAT_ENC_CSN_ID'", "]", ")", "\n", "\n", "", "dfNote4", "=", "dfNote4", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "dfLab", "=", "dfNote4", ".", "groupby", "(", "dfNote4", ".", "index", ",", "group_keys", "=", "False", ")", ".", "apply", "(", "f_temp", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "dfLab", "=", "dfLab", "[", "dfLab", "[", "'ItemName'", "]", "!=", "''", "]", "\n", "\n", "return", "dfLab", ",", "dfNote4", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.readTarFile": [[25, 39], ["f_tar.extractfile", "f_tar.extractfile.read", "content.decode.decode"], "function", ["None"], ["def", "readTarFile", "(", "f_tar", ",", "file", ",", "toString", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Given key = [NoteID, NoteCSNID, LineID], output string\n    Assume key is unique\n    f_tar, dictNotes are output from the tarFile2Dict function\n    \"\"\"", "\n", "f", "=", "f_tar", ".", "extractfile", "(", "file", ")", "\n", "if", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "if", "toString", ":", "\n", "            ", "content", "=", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "", "else", ":", "\n", "        ", "content", "=", "''", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.load_data": [[40, 49], ["pandas.concat", "pandas.read_csv", "pandas.read_csv", "df.append"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv"], ["", "def", "load_data", "(", "path", ",", "isCompress", "=", "True", ")", ":", "\n", "    ", "if", "isCompress", ":", "\n", "        ", "X", "=", "pd", ".", "read_csv", "(", "path", ",", "chunksize", "=", "10000", ",", "compression", "=", "\"gzip\"", ",", "error_bad_lines", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "X", "=", "pd", ".", "read_csv", "(", "path", ",", "chunksize", "=", "10000", ",", "error_bad_lines", "=", "False", ")", "\n", "", "df", "=", "[", "]", "\n", "for", "x", "in", "X", ":", "\n", "        ", "df", ".", "append", "(", "x", ")", "\n", "", "return", "pd", ".", "concat", "(", "df", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.splitSentence": [[50, 67], ["pandas.notnull", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.split"], "function", ["None"], ["", "def", "splitSentence", "(", "content", ")", ":", "\n", "    ", "\"\"\"\n    Given block of text, split into sentence\n    Output: list of sentences\n    \"\"\"", "\n", "# Multiple space to single space, remove separators like - and _", "\n", "if", "pd", ".", "notnull", "(", "content", ")", ":", "\n", "        ", "content", "=", "re", ".", "sub", "(", "'\\s*\\t\\t\\t'", ",", "' '", ",", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "'--+|==+|__+'", ",", "' '", ",", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "'\\.\\s+'", ",", "'. '", ",", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "':\\s+'", ",", "': '", ",", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "'\\s+\\[\\*'", ",", "' [*'", ",", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "' \\s+'", ",", "'. '", ",", "content", ")", "\n", "lsS", "=", "content", ".", "split", "(", "'. '", ")", "\n", "", "else", ":", "\n", "        ", "lsS", "=", "[", "]", "\n", "", "return", "lsS", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.update": [[69, 83], ["re.sub", "re.sub", "re.sub", "re.sub"], "function", ["None"], ["", "def", "update", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    #- replace number to <num> (keep number right after text, as typically are certain clinical names)\n    #- replace time to <time>\n    - replace digits to <N> token\n    - add space before/after non-character\n    \"\"\"", "\n", "s", "=", "re", ".", "sub", "(", "'\\d'", ",", "'N'", ",", "s", ")", "\n", "#s = re.sub('\\d+:\\d+(:\\d+)?\\s*((a|A)|(p|P))(m|M)(\\s*est|EST)?', ' <time> ', s)", "\n", "#s = re.sub('( |^|\\(|:|\\+|-|\\?|\\.|/)\\d+((,\\d+)*|(\\.\\d+)?|(/\\d+)?)', ' <num> ', s) # cases like: 12,23,345; 12.12; .23, 12/12;", "\n", "s", "=", "re", ".", "sub", "(", "r'([a-zA-Z->])([<\\),!:;\\+\\?\\\"])'", ",", "r'\\1 \\2 '", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r'([\\(,!:;\\+>\\?\\\"])([a-zA-Z<-])'", ",", "r' \\1 \\2'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "'\\s+'", ",", "' '", ",", "s", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.replcDeid": [[85, 95], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "function", ["None"], ["", "def", "replcDeid", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    replace de-identified elements in the sentence (date, name, address, hospital, phone)\n    \"\"\"", "\n", "s", "=", "re", ".", "sub", "(", "'\\[\\*\\*\\d{4}-\\d{2}-\\d{2}\\*\\*\\]'", ",", "'<date>'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "'\\[\\*\\*.*?Name.*?\\*\\*\\]'", ",", "'<name>'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "'\\[\\*\\*.*?(phone|number).*?\\*\\*\\]'", ",", "'<phone>'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "'\\[\\*\\*.*?(Hospital|Location|State|Address|Country|Wardname|PO|Company).*?\\*\\*\\]'", ",", "'<loc>'", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "'\\[\\*\\*.*?\\*\\*\\]'", ",", "'<deidother>'", ",", "s", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.tag_negation": [[96, 100], ["mark_negation", "doc.split"], "function", ["None"], ["", "def", "tag_negation", "(", "doc", ")", ":", "\n", "\n", "    ", "from", "nltk", ".", "sentiment", ".", "util", "import", "mark_negation", "\n", "return", "' '", ".", "join", "(", "mark_negation", "(", "doc", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.cleanString": [[101, 107], ["util.replcDeid", "util.update", "s.lower.lower"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.replcDeid", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.update"], ["", "def", "cleanString", "(", "s", ",", "lower", "=", "True", ")", ":", "\n", "    ", "s", "=", "replcDeid", "(", "s", ")", "\n", "s", "=", "update", "(", "s", ")", "\n", "if", "lower", ":", "\n", "        ", "s", "=", "s", ".", "lower", "(", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.replaceContractions": [[109, 114], ["s.replace.replace"], "function", ["None"], ["", "def", "replaceContractions", "(", "s", ")", ":", "\n", "    ", "contractions", "=", "[", "\"don't\"", ",", "\"wouldn't\"", ",", "\"couldn't\"", ",", "\"shouldn't\"", ",", "\"weren't\"", ",", "\"hadn't\"", ",", "\"wasn't\"", ",", "\"didn't\"", ",", "\"doesn't\"", ",", "\"haven't\"", ",", "\"isn't\"", ",", "\"hasn't\"", "]", "\n", "for", "c", "in", "contractions", ":", "\n", "        ", "s", "=", "s", ".", "replace", "(", "c", ",", "c", "[", ":", "-", "3", "]", "+", "' not'", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.preprocess_string": [[115, 119], ["util.cleanString", "util.replaceContractions"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.cleanString", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.replaceContractions"], ["", "def", "preprocess_string", "(", "s", ")", ":", "\n", "    ", "s", "=", "cleanString", "(", "s", ",", "True", ")", "\n", "s", "=", "replaceContractions", "(", "s", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.cleanNotes": [[121, 138], ["str", "len", "util.splitSentence", "len", "util.cleanString", "util.replaceContractions", "lsOut.append"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.splitSentence", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.cleanString", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.replaceContractions"], ["", "def", "cleanNotes", "(", "content", ")", ":", "\n", "    ", "\"\"\"\n    Process a chunk of text \n    \"\"\"", "\n", "lsOut", "=", "[", "]", "\n", "content", "=", "str", "(", "content", ")", "\n", "if", "len", "(", "content", ")", ">", "0", ":", "\n", "        ", "lsS", "=", "splitSentence", "(", "content", ")", "\n", "for", "s", "in", "lsS", ":", "\n", "            ", "if", "len", "(", "s", ")", ">", "0", ":", "\n", "                ", "s", "=", "cleanString", "(", "s", ",", "lower", "=", "True", ")", "\n", "s", "=", "replaceContractions", "(", "s", ")", "\n", "lsOut", ".", "append", "(", "s", ")", "\n", "", "", "out", "=", "' '", ".", "join", "(", "lsOut", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "''", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.load_star_space": [[140, 150], ["pandas.read_csv", "list", "dict", "numpy.array", "torch.from_numpy", "enumerate"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv"], ["", "def", "load_star_space", "(", "fn", ",", "torch", "=", "True", ")", ":", "\n", "#ss = pd.read_csv(fn,sep='\\t')", "\n", "    ", "ss", "=", "pd", ".", "read_csv", "(", "fn", ",", "sep", "=", "'\\t'", ",", "quoting", "=", "3", ",", "header", "=", "None", ")", "\n", "\n", "keys", "=", "list", "(", "ss", ".", "iloc", "[", ":", ",", "0", "]", ")", "\n", "keys", "=", "dict", "(", "[", "(", "k", ",", "i", ")", "for", "i", ",", "k", "in", "enumerate", "(", "keys", ")", "]", ")", "\n", "params", "=", "np", ".", "array", "(", "ss", ".", "iloc", "[", ":", ",", "1", ":", "]", ")", "\n", "if", "torch", ":", "\n", "        ", "params", "=", "torch", ".", "from_numpy", "(", "params", ")", "\n", "", "return", "keys", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.stopwords": [[151, 154], ["pickle.load", "open"], "function", ["None"], ["", "def", "stopwords", "(", ")", ":", "\n", "\n", "    ", "return", "pickle", ".", "load", "(", "open", "(", "'./data/stop_words.p'", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.stopwords2": [[155, 162], ["open", "line.split", "lsW.extend"], "function", ["None"], ["", "def", "stopwords2", "(", "fileName", ")", ":", "\n", "    ", "lsW", "=", "[", "]", "\n", "with", "open", "(", "fileName", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "data", "=", "line", ".", "split", "(", ")", "\n", "lsW", ".", "extend", "(", "data", ")", "\n", "", "", "return", "lsW", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.difDays": [[164, 170], ["pandas.notnull", "pandas.notnull", "datetime.datetime.strptime().date", "datetime.datetime.strptime().date", "datetime.datetime.strptime", "datetime.datetime.strptime"], "function", ["None"], ["", "def", "difDays", "(", "d1", ",", "d2", ",", "dateFormat1", ",", "dateFormat2", ")", ":", "\n", "    ", "if", "(", "pd", ".", "notnull", "(", "d1", ")", "&", "pd", ".", "notnull", "(", "d2", ")", ")", ":", "\n", "        ", "d1", "=", "dt", ".", "strptime", "(", "d1", ",", "dateFormat1", ")", ".", "date", "(", ")", "\n", "d2", "=", "dt", ".", "strptime", "(", "d2", ",", "dateFormat2", ")", ".", "date", "(", ")", "\n", "return", "(", "d1", "-", "d2", ")", ".", "days", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.normalize": [[171, 178], ["df.mean", "df.std", "pandas.isnull"], "function", ["None"], ["", "def", "normalize", "(", "df", ",", "isTrain", ",", "meanValue", "=", "None", ",", "stdValue", "=", "None", ")", ":", "\n", "    ", "if", "isTrain", ":", "\n", "        ", "meanValue", "=", "df", ".", "mean", "(", "axis", "=", "0", ")", "\n", "stdValue", "=", "df", ".", "std", "(", "axis", "=", "0", ")", "\n", "stdValue", "[", "pd", ".", "isnull", "(", "stdValue", ")", "]", "=", "1.0", "\n", "", "df", "=", "(", "df", "-", "meanValue", ")", "/", "stdValue", "\n", "return", "df", ",", "meanValue", ",", "stdValue", "\n", "#===== Helper functions to extract labs ======", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.getNumPct": [[179, 190], ["pandas.notnull", "str", "re.sub", "len", "len", "re.sub().split", "re.sub().split", "re.sub", "re.sub"], "function", ["None"], ["", "def", "getNumPct", "(", "content", ")", ":", "\n", "# Compute percentage of numerical values in a string", "\n", "    ", "out", ",", "nNum", "=", "0", ",", "0", "\n", "if", "pd", ".", "notnull", "(", "content", ")", ":", "\n", "        ", "content2", "=", "str", "(", "content", ")", "\n", "content2", "=", "re", ".", "sub", "(", "'[^0-9A-Za-z\\s]'", ",", "''", ",", "content2", ")", "\n", "nNum", "=", "len", "(", "re", ".", "sub", "(", "'[^0-9\\s]'", ",", "''", ",", "content2", ")", ".", "split", "(", ")", ")", "\n", "nText", "=", "len", "(", "re", ".", "sub", "(", "'[^A-Za-z\\s]'", ",", "''", ",", "content2", ")", ".", "split", "(", ")", ")", "\n", "if", "(", "nNum", "+", "nText", ")", ">", "0", ":", "\n", "            ", "out", "=", "nNum", "/", "(", "nNum", "+", "nText", ")", "\n", "", "", "return", "out", ",", "nNum", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.getNumBlock": [[192, 246], ["pandas.notnull", "str", "re.sub", "re.sub", "re.sub", "re.sub.split", "str().strip", "re.sub", "re.sub", "re.sub.lower", "len", "re.search", "str", "lsOut.append", "lsOut.append", "util.getNumPct", "re.search.start", "util.getNumPct", "re.search.start", "util.getNumPct", "lsOut.append", "lsOut.append", "lsOut.append", "lsOut.append", "re.search.end"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.getNumPct", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.getNumPct", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.getNumPct"], ["", "def", "getNumBlock", "(", "content", ",", "dictKeyWords", ",", "numPct", ",", "numCount", ",", "split", "=", "'     '", ")", ":", "\n", "\n", "    ", "\"\"\"\n    Split paragraph by multiple space into blocks, keep blocks with keywords and number\n    :param content: input string\n    :param lsKeyWords:\n    :return: lsOut\n    \"\"\"", "\n", "lsOut", "=", "[", "]", "\n", "if", "pd", ".", "notnull", "(", "content", ")", ":", "\n", "        ", "content", "=", "str", "(", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "'\\t'", ",", "split", ",", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "'--+|==+|__+'", ",", "split", ",", "content", ")", "\n", "content", "=", "re", ".", "sub", "(", "r'([^0-9])(\\s+)([><=0-9])'", ",", "r'\\1 \\3'", ",", "content", ")", "# Remove multiple space before numbers", "\n", "content2", "=", "content", ".", "split", "(", "split", ")", "\n", "\n", "for", "s", "in", "content2", ":", "\n", "            ", "s", "=", "str", "(", "s", ")", ".", "strip", "(", ")", "\n", "s", "=", "re", ".", "sub", "(", "r'\\s*\\[\\*\\*.*?\\*\\*\\]\\s*'", ",", "' '", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "'\\d+:\\d+(:\\d+)?\\s*((a|A)|(p|P))(m|M)(\\s*est|EST)?'", ",", "''", ",", "s", ")", "\n", "s2", "=", "s", ".", "lower", "(", ")", "\n", "flgNum", "=", "0", "\n", "n_pos_start", "=", "len", "(", "s", ")", "\n", "\n", "for", "w", "in", "dictKeyWords", ":", "# Look for the first starting position of lab values", "\n", "                ", "n_pos", "=", "re", ".", "search", "(", "w", ",", "s2", ")", "\n", "if", "n_pos", "is", "not", "None", ":", "\n", "                    ", "if", "n_pos", ".", "start", "(", ")", "<", "n_pos_start", ":", "\n", "                        ", "pctNum", ",", "nNum", "=", "getNumPct", "(", "s2", "[", "n_pos", ".", "end", "(", ")", ":", "]", ")", "\n", "n_pos_start", "=", "n_pos", ".", "start", "(", ")", "\n", "type", "=", "dictKeyWords", "[", "w", "]", "\n", "flgNum", "=", "1", "\n", "\n", "", "", "", "if", "flgNum", "==", "1", ":", "\n", "                ", "if", "(", "pctNum", ">", "numPct", "[", "0", "]", ")", "&", "(", "nNum", ">", "numCount", "[", "0", "]", ")", ":", "\n", "                    ", "lsOut", ".", "append", "(", "(", "type", ",", "s", "[", "n_pos_start", ":", "]", ")", ")", "\n", "if", "n_pos_start", "!=", "0", ":", "\n", "                        ", "pctNum", ",", "nNum", "=", "getNumPct", "(", "s", "[", "0", ":", "n_pos_start", "]", ")", "\n", "if", "(", "pctNum", ">", "numPct", "[", "1", "]", ")", "&", "(", "nNum", ">", "numCount", "[", "1", "]", ")", ":", "\n", "                            ", "lsOut", ".", "append", "(", "(", "'numOther'", ",", "s", "[", "0", ":", "n_pos_start", "]", ")", ")", "\n", "", "else", ":", "\n", "                            ", "lsOut", ".", "append", "(", "(", "'num_prev'", ",", "s", "[", "0", ":", "n_pos_start", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "lsOut", ".", "append", "(", "(", "'text'", ",", "s", ")", ")", "\n", "\n", "", "", "elif", "flgNum", "==", "0", ":", "\n", "                ", "pctNum", ",", "nNum", "=", "getNumPct", "(", "s", ")", "\n", "if", "(", "pctNum", ">=", "numPct", "[", "1", "]", ")", "&", "(", "nNum", ">=", "numCount", "[", "1", "]", ")", "&", "(", "pctNum", "<", "1", ")", ":", "\n", "                    ", "lsOut", ".", "append", "(", "(", "'numOther'", ",", "s", ")", ")", "\n", "", "else", ":", "\n", "                    ", "lsOut", ".", "append", "(", "(", "'text'", ",", "s", ")", ")", "\n", "\n", "#pdb.set_trace()", "\n", "", "", "", "", "return", "lsOut", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.build_vocab": [[248, 296], ["util.load_star_space", "util.stopwords2", "sklearn.feature_extraction.text.CountVectorizer", "sklearn.feature_extraction.text.CountVectorizer.fit", "print", "print", "dict", "dict", "dict.items", "len", "torch.zeros", "numpy.zeros", "dict.items", "sklearn.feature_extraction.text.CountVectorizer.vocabulary_.keys", "torch.cat", "numpy.concatenate", "sklearn.feature_extraction.text.CountVectorizer.vocabulary_.keys", "enumerate", "len", "np.concatenate.size", "dict.keys", "len"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.load_star_space", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.stopwords2"], ["", "def", "build_vocab", "(", "text", ",", "negation", "=", "False", ",", "max_df", "=", ".7", ",", "max_features", "=", "20000", ",", "vecPath", "=", "'/ifs/data/razavianlab/ehr_ssp_embedding/word2CurDiag_ge5_5.tsv'", ",", "\n", "stopWordPath", "=", "'/ifs/data/razavianlab/stop_words.txt'", ",", "torch", "=", "True", ")", ":", "\n", "    ", "'''\n    Fit vocabulary and create PubMed w2v matrix\n    :param text: list of documents for creating vocabulary\n    :return: embedding matrix and vectorizer\n    '''", "\n", "#import torchwordemb", "\n", "\n", "#load w2v", "\n", "#w2v_vocab, vec = torchwordemb.load_word2vec_bin(\"./data/PubMed-and-PMC-w2v.bin\")", "\n", "w2v_vocab", ",", "vec", "=", "load_star_space", "(", "vecPath", ",", "torch", ")", "\n", "\n", "#vect = CountVectorizer(stop_words = 'english',max_df = max_df,  max_features = max_features)", "\n", "stopWords", "=", "stopwords2", "(", "stopWordPath", ")", "\n", "vect", "=", "CountVectorizer", "(", "stop_words", "=", "stopWords", ",", "max_df", "=", "max_df", ",", "max_features", "=", "max_features", ")", "\n", "\n", "vect", ".", "fit", "(", "text", ")", "\n", "\n", "no_embedding", "=", "[", "k", "for", "k", "in", "vect", ".", "vocabulary_", ".", "keys", "(", ")", "if", "k", "not", "in", "w2v_vocab", "]", "\n", "print", "(", "\"No Embeddings for: \"", ")", "\n", "print", "(", "len", "(", "no_embedding", ")", ")", "\n", "\n", "vocab", "=", "dict", "(", "[", "(", "k", ",", "w2v_vocab", "[", "k", "]", ")", "for", "k", "in", "vect", ".", "vocabulary_", ".", "keys", "(", ")", "if", "k", "in", "w2v_vocab", "]", ")", "\n", "new_vocab", "=", "dict", "(", "[", "(", "k", ",", "i", "+", "1", ")", "for", "i", ",", "k", "in", "enumerate", "(", "vocab", ".", "keys", "(", ")", ")", "]", ")", "# Set 0 to be the padding index", "\n", "\n", "if", "torch", ":", "\n", "        ", "embedding", "=", "torch", ".", "zeros", "(", "len", "(", "new_vocab", ")", "+", "1", ",", "vec", ".", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "embedding", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "new_vocab", ")", "+", "1", ",", "vec", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "for", "k", ",", "i", "in", "new_vocab", ".", "items", "(", ")", ":", "\n", "        ", "embedding", "[", "i", "]", "=", "vec", "[", "vocab", "[", "k", "]", "]", "\n", "\n", "", "if", "negation", ":", "\n", "        ", "n_emb", "=", "embedding", ".", "size", "(", ")", "[", "0", "]", "-", "1", "\n", "neg_emb", "=", "-", "1", "*", "embedding", "\n", "if", "torch", ":", "\n", "            ", "embedding", "=", "torch", ".", "cat", "(", "[", "embedding", ",", "neg_emb", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "np", ".", "concatenate", "(", "[", "embedding", ",", "neg_emb", "]", ",", "0", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "new_vocab", ".", "items", "(", ")", ":", "\n", "            ", "new_vocab", "[", "k", "+", "'_NEG'", "]", "=", "v", "+", "n_emb", "\n", "\n", "", "", "vect", ".", "vocabulary_", "=", "new_vocab", "\n", "\n", "return", "embedding", ",", "vect", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.pad_doc": [[298, 314], ["torch.zeros", "enumerate", "len", "len", "len", "torch.Tensor().long", "torch.Tensor().long", "len", "torch.Tensor", "torch.Tensor", "len"], "function", ["None"], ["", "def", "pad_doc", "(", "seq", ",", "max_len", ",", "n", ")", ":", "\n", "    ", "padded_seq", "=", "torch", ".", "zeros", "(", "n", ",", "max_len", ")", "\n", "\n", "start", "=", "0", "if", "len", "(", "seq", ")", ">=", "n", "else", "n", "-", "len", "(", "seq", ")", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "seq", ")", ":", "\n", "\n", "        ", "if", "len", "(", "s", ")", ">", "max_len", ":", "\n", "            ", "padded_seq", "[", "start", "+", "i", "]", "=", "torch", ".", "Tensor", "(", "s", "[", ":", "max_len", "]", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "s", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "padded_seq", "[", "start", "+", "i", ",", "-", "len", "(", "s", ")", ":", "]", "=", "torch", ".", "Tensor", "(", "s", ")", ".", "long", "(", ")", "\n", "\n", "", "", "return", "padded_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.prepare": [[316, 335], ["vectorizer.build_tokenizer", "numpy.array", "print", "print", "util.pad_doc", "np.array.mean", "numpy.percentile", "len", "list", "len", "set", "vectorizer.build_tokenizer.", "vectorizer.build_tokenizer."], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.pad_doc"], ["", "def", "prepare", "(", "text", ",", "vectorizer", ",", "max_len", ",", "unique", "=", "False", ")", ":", "\n", "\n", "    ", "vocab", "=", "vectorizer", ".", "vocabulary_", "\n", "tokenizer", "=", "vectorizer", ".", "build_tokenizer", "(", ")", "\n", "\n", "if", "unique", ":", "\n", "        ", "seq", "=", "[", "list", "(", "set", "(", "[", "vocab", "[", "y", "]", "for", "y", "in", "tokenizer", "(", "x", ")", "if", "y", "in", "vocab", "]", ")", ")", "for", "x", "in", "text", "]", "\n", "", "else", ":", "\n", "        ", "seq", "=", "[", "[", "vocab", "[", "y", "]", "for", "y", "in", "tokenizer", "(", "x", ")", "if", "y", "in", "vocab", "]", "for", "x", "in", "text", "]", "\n", "\n", "\n", "", "lengths", "=", "np", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "seq", "]", ")", "\n", "\n", "print", "(", "\"Average Sequnce Length: \"", ",", "lengths", ".", "mean", "(", ")", ")", "\n", "print", "(", "\"90% Length: \"", ",", "np", ".", "percentile", "(", "lengths", ",", "90", ")", ")", "\n", "\n", "padded_seq", "=", "pad_doc", "(", "seq", ",", "max_len", ",", "len", "(", "seq", ")", ")", "\n", "\n", "return", "padded_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.sentence_prepare": [[337, 389], ["vectorizer.build_tokenizer", "numpy.array", "numpy.array", "print", "print", "print", "print", "torch.zeros", "enumerate", "list", "seq.append", "np.array.append", "np.array.mean", "numpy.percentile", "np.array.mean", "numpy.percentile", "len", "split_multi", "doc_tok.append", "np.array.append", "len", "len", "util.pad_doc", "util.pad_doc", "len", "len", "len", "vectorizer.build_tokenizer."], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.pad_doc", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.pad_doc"], ["", "def", "sentence_prepare", "(", "text", ",", "vectorizer", ",", "sent_len", ",", "doc_len", ",", "unique", "=", "False", ")", ":", "\n", "\n", "#from nltk.tokenize import sent_tokenize", "\n", "    ", "from", "segtok", ".", "segmenter", "import", "split_multi", "\n", "\n", "vocab", "=", "vectorizer", ".", "vocabulary_", "\n", "tokenizer", "=", "vectorizer", ".", "build_tokenizer", "(", ")", "\n", "\n", "#text = [sent_tokenize(doc) for doc in text  ]", "\n", "text", "=", "[", "list", "(", "split_multi", "(", "doc", ")", ")", "for", "doc", "in", "text", "]", "\n", "\n", "seq", "=", "[", "]", "\n", "sent_l", "=", "[", "]", "\n", "doc_l", "=", "[", "]", "\n", "for", "doc", "in", "text", ":", "\n", "        ", "doc_tok", "=", "[", "]", "\n", "for", "sent", "in", "doc", ":", "\n", "            ", "sent_toks", "=", "[", "vocab", "[", "y", "]", "for", "y", "in", "tokenizer", "(", "sent", ")", "if", "y", "in", "vocab", "]", "\n", "doc_tok", ".", "append", "(", "sent_toks", ")", "\n", "sent_l", ".", "append", "(", "len", "(", "sent_toks", ")", ")", "\n", "\n", "", "seq", ".", "append", "(", "doc_tok", ")", "\n", "doc_l", ".", "append", "(", "len", "(", "doc_tok", ")", ")", "\n", "\n", "", "sent_l", "=", "np", ".", "array", "(", "sent_l", ")", "\n", "doc_l", "=", "np", ".", "array", "(", "doc_l", ")", "\n", "\n", "print", "(", "\"Average Sent Length: \"", ",", "sent_l", ".", "mean", "(", ")", ")", "\n", "print", "(", "\"90% Length: \"", ",", "np", ".", "percentile", "(", "sent_l", ",", "90", ")", ")", "\n", "\n", "print", "(", "\"Average Doc Length: \"", ",", "doc_l", ".", "mean", "(", ")", ")", "\n", "print", "(", "\"90% Length: \"", ",", "np", ".", "percentile", "(", "doc_l", ",", "90", ")", ")", "\n", "\n", "#sent_len = np.percentile(sent_l, 90)", "\n", "#doc_len = np.percentile(doc_l, 90)", "\n", "\n", "padded_docs", "=", "torch", ".", "zeros", "(", "len", "(", "seq", ")", ",", "doc_len", ",", "sent_len", ")", "\n", "\n", "for", "i", ",", "_doc", "in", "enumerate", "(", "seq", ")", ":", "\n", "\n", "        ", "if", "len", "(", "_doc", ")", ">", "doc_len", ":", "\n", "            ", "_doc", "=", "_doc", "[", ":", "doc_len", "]", "\n", "padded_seq", "=", "pad_doc", "(", "_doc", ",", "sent_len", ",", "len", "(", "_doc", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "_doc", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "padded_seq", "=", "pad_doc", "(", "_doc", ",", "sent_len", ",", "doc_len", ")", "\n", "\n", "", "padded_docs", "[", "i", "]", "=", "padded_seq", "\n", "\n", "", "return", "padded_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.None.util.softmax": [[394, 399], ["numpy.exp", "numpy.expand_dims", "numpy.expand_dims", "np.exp.sum", "numpy.max"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "\n", "    ", "\"\"\"Compute softmax values for each sets of scores in x.\"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "expand_dims", "(", "np", ".", "max", "(", "x", ",", "axis", "=", "1", ")", ",", "1", ")", ")", "\n", "return", "e_x", "/", "np", ".", "expand_dims", "(", "e_x", ".", "sum", "(", "axis", "=", "1", ")", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.word2num.WordsToNumbers.parseWord": [[69, 137], ["words.lower.lower.lower", "WordsToNumbers.__groups_re__.findall", "WordsToNumbers.__hundreds_re__.match", "WordsToNumbers.__tens_and_ones_re__.match", "WordsToNumbers.__hundreds_re__.match.group", "WordsToNumbers.__hundreds_re__.match.group", "WordsToNumbers.__tens_and_ones_re__.match.group", "WordsToNumbers.__tens_and_ones_re__.match.group", "WordsToNumbers.__hundreds_re__.match.group", "WordsToNumbers.__tens_and_ones_re__.match.group"], "methods", ["None"], ["def", "parseWord", "(", "self", ",", "words", ")", ":", "\n", "        ", "\"\"\"Parses words to the number they describe\"\"\"", "\n", "# to avoid case mismatch, everything is reduced to the lower", "\n", "# case", "\n", "words", "=", "words", ".", "lower", "(", ")", "\n", "# create a list to hold the number groups as we find them within", "\n", "# the word string", "\n", "groups", "=", "{", "}", "\n", "# create the variable to hold the number that shall eventually", "\n", "# return to the caller", "\n", "num", "=", "0", "\n", "# using the 'groups' expression, find all of the number group", "\n", "# an loop through them", "\n", "for", "group", "in", "WordsToNumbers", ".", "__groups_re__", ".", "findall", "(", "words", ")", ":", "\n", "## determine the position of this number group", "\n", "## within the entire number", "\n", "# assume that the group index is the first/ones group", "\n", "# until it is determined that it's a higher group", "\n", "            ", "group_multiplier", "=", "1", "\n", "if", "group", "[", "1", "]", "in", "WordsToNumbers", ".", "__groups__", ":", "\n", "                ", "group_multiplier", "=", "WordsToNumbers", ".", "__groups__", "[", "group", "[", "1", "]", "]", "\n", "## determine the value of this number group", "\n", "# create the variable to hold this number group's value", "\n", "", "group_num", "=", "0", "\n", "# get the hundreds for this group", "\n", "hundreds_match", "=", "WordsToNumbers", ".", "__hundreds_re__", ".", "match", "(", "group", "[", "0", "]", ")", "\n", "# and create a variable to hold what's left when the", "\n", "# \"hundreds\" are removed (ie. the tens- and ones-place values)", "\n", "tens_and_ones", "=", "None", "\n", "# if there is a string in this group matching the 'n hundred'", "\n", "# pattern", "\n", "if", "hundreds_match", "is", "not", "None", "and", "hundreds_match", ".", "group", "(", "1", ")", "is", "not", "None", ":", "\n", "# multiply the 'n' value by 100 and increment this group's", "\n", "# running tally", "\n", "                ", "group_num", "=", "group_num", "+", "(", "WordsToNumbers", ".", "__ones__", "[", "hundreds_match", ".", "group", "(", "1", ")", "]", "*", "100", ")", "\n", "# the tens- and ones-place value is whatever is left", "\n", "tens_and_ones", "=", "hundreds_match", ".", "group", "(", "2", ")", "\n", "", "else", ":", "\n", "# if there was no string matching the 'n hundred' pattern,", "\n", "# assume that the entire string contains only tens- and ones-", "\n", "# place values", "\n", "                ", "tens_and_ones", "=", "group", "[", "0", "]", "\n", "# if the 'tens and ones' string is empty, it is time to", "\n", "# move along to the next group", "\n", "", "if", "tens_and_ones", "is", "None", ":", "\n", "# increment the total number by the current group number, times", "\n", "# its multiplier", "\n", "                ", "num", "=", "num", "+", "(", "group_num", "*", "group_multiplier", ")", "\n", "continue", "\n", "# look for the tens and ones ('tn1' to shorten the code a bit)", "\n", "", "tn1_match", "=", "WordsToNumbers", ".", "__tens_and_ones_re__", ".", "match", "(", "tens_and_ones", ")", "\n", "# if the pattern is matched, there is a 'tens' place value", "\n", "if", "tn1_match", "is", "not", "None", ":", "\n", "# add the tens", "\n", "                ", "group_num", "=", "group_num", "+", "WordsToNumbers", ".", "__tens__", "[", "tn1_match", ".", "group", "(", "1", ")", "]", "\n", "# add the ones", "\n", "if", "tn1_match", ".", "group", "(", "2", ")", "is", "not", "None", ":", "\n", "                    ", "group_num", "=", "group_num", "+", "WordsToNumbers", ".", "__ones__", "[", "tn1_match", ".", "group", "(", "2", ")", "]", "\n", "", "", "else", ":", "\n", "# assume that the 'tens and ones' actually contained only the ones-", "\n", "# place values", "\n", "                ", "group_num", "=", "group_num", "+", "WordsToNumbers", ".", "__ones__", "[", "tens_and_ones", "]", "\n", "# increment the total number by the current group number, times", "\n", "# its multiplier", "\n", "", "num", "=", "num", "+", "(", "group_num", "*", "group_multiplier", ")", "\n", "# the loop is complete, return the result", "\n", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.word2num.WordsToNumbers.parseText": [[139, 206], ["WordsToNumbers.__groups_re__.findall", "WordsToNumbers.__hundreds_re__.match", "WordsToNumbers.__tens_and_ones_re__.match", "WordsToNumbers.__hundreds_re__.match.group", "WordsToNumbers.__hundreds_re__.match.group", "WordsToNumbers.__tens_and_ones_re__.match.group", "WordsToNumbers.__tens_and_ones_re__.match.group", "WordsToNumbers.__hundreds_re__.match.group", "WordsToNumbers.__tens_and_ones_re__.match.group"], "methods", ["None"], ["", "def", "parseText", "(", "self", ",", "text", ")", ":", "\n", "# case", "\n", "#text = text.lower()", "\n", "# create a list to hold the number groups as we find them within", "\n", "# the word string", "\n", "        ", "groups", "=", "{", "}", "\n", "# create the variable to hold the number that shall eventually", "\n", "# return to the caller", "\n", "num", "=", "0", "\n", "# using the 'groups' expression, find all of the number group", "\n", "# an loop through them", "\n", "\n", "for", "group", "in", "WordsToNumbers", ".", "__groups_re__", ".", "findall", "(", "text", ")", ":", "\n", "## determine the position of this number group", "\n", "## within the entire number", "\n", "# assume that the group index is the first/ones group", "\n", "# until it is determined that it's a higher group", "\n", "            ", "group_multiplier", "=", "1", "\n", "if", "group", "[", "1", "]", "in", "WordsToNumbers", ".", "__groups__", ":", "\n", "                ", "group_multiplier", "=", "WordsToNumbers", ".", "__groups__", "[", "group", "[", "1", "]", "]", "\n", "## determine the value of this number group", "\n", "# create the variable to hold this number group's value", "\n", "", "group_num", "=", "0", "\n", "# get the hundreds for this group", "\n", "hundreds_match", "=", "WordsToNumbers", ".", "__hundreds_re__", ".", "match", "(", "group", "[", "0", "]", ")", "\n", "# and create a variable to hold what's left when the", "\n", "# \"hundreds\" are removed (ie. the tens- and ones-place values)", "\n", "tens_and_ones", "=", "None", "\n", "# if there is a string in this group matching the 'n hundred'", "\n", "# pattern", "\n", "if", "hundreds_match", "is", "not", "None", "and", "hundreds_match", ".", "group", "(", "1", ")", "is", "not", "None", ":", "\n", "# multiply the 'n' value by 100 and increment this group's", "\n", "# running tally", "\n", "                ", "group_num", "=", "group_num", "+", "(", "WordsToNumbers", ".", "__ones__", "[", "hundreds_match", ".", "group", "(", "1", ")", "]", "*", "100", ")", "\n", "# the tens- and ones-place value is whatever is left", "\n", "tens_and_ones", "=", "hundreds_match", ".", "group", "(", "2", ")", "\n", "", "else", ":", "\n", "# if there was no string matching the 'n hundred' pattern,", "\n", "# assume that the entire string contains only tens- and ones-", "\n", "# place values", "\n", "                ", "tens_and_ones", "=", "group", "[", "0", "]", "\n", "# if the 'tens and ones' string is empty, it is time to", "\n", "# move along to the next group", "\n", "", "if", "tens_and_ones", "is", "None", ":", "\n", "# increment the total number by the current group number, times", "\n", "# its multiplier", "\n", "                ", "num", "=", "num", "+", "(", "group_num", "*", "group_multiplier", ")", "\n", "continue", "\n", "# look for the tens and ones ('tn1' to shorten the code a bit)", "\n", "", "tn1_match", "=", "WordsToNumbers", ".", "__tens_and_ones_re__", ".", "match", "(", "tens_and_ones", ")", "\n", "# if the pattern is matched, there is a 'tens' place value", "\n", "if", "tn1_match", "is", "not", "None", ":", "\n", "# add the tens", "\n", "                ", "group_num", "=", "group_num", "+", "WordsToNumbers", ".", "__tens__", "[", "tn1_match", ".", "group", "(", "1", ")", "]", "\n", "# add the ones", "\n", "if", "tn1_match", ".", "group", "(", "2", ")", "is", "not", "None", ":", "\n", "                    ", "group_num", "=", "group_num", "+", "WordsToNumbers", ".", "__ones__", "[", "tn1_match", ".", "group", "(", "2", ")", "]", "\n", "", "", "else", ":", "\n", "# assume that the 'tens and ones' actually contained only the ones-", "\n", "# place values", "\n", "                ", "group_num", "=", "group_num", "+", "WordsToNumbers", ".", "__ones__", "[", "tens_and_ones", "]", "\n", "# increment the total number by the current group number, times", "\n", "# its multiplier", "\n", "", "num", "=", "num", "+", "(", "group_num", "*", "group_multiplier", ")", "\n", "# the loop is complete, return the result", "\n", "", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_CTgov.extract_variables": [[11, 84], ["W_utility.read_csv", "print", "print", "W_utility.read_csv_as_dict_with_multiple_items", "ufile.read_csv_as_dict_with_multiple_items.iteritems", "W_utility.read_csv_as_dict", "Valx_core.init_features", "range", "W_utility.write_csv", "print", "print", "print", "print", "print", "print", "value[].lower().split", "print", "print", "len", "Valx_core.preprocessing", "Valx_core.extract_candidates_numeric", "range", "len", "len", "len", "len", "print", "len", "Valx_core.formalize_expressions", "Valx_core.identify_variable", "Valx_core.associate_variable_values", "range", "os.path.splitext", "value[].lower", "name.strip", "len", "len", "output.append", "Valx_core.context_validation", "Valx_core.normalization", "Valx_core.hr_validation", "len", "name.strip", "float", "float", "str().replace", "var.lower", "curr_var.lower", "var.lower", "curr_var.lower", "str"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv_as_dict_with_multiple_items", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv_as_dict", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.init_features", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_csv", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.preprocessing", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.extract_candidates_numeric", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.formalize_expressions", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.identify_variable", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.associate_variable_values", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.context_validation", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.normalization", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.hr_validation"], ["def", "extract_variables", "(", "fdin", ",", "ffea", ",", "ffea2", ",", "var", ")", ":", "\n", "# read input data", "\n", "    ", "if", "fdin", "is", "None", "or", "fdin", "==", "\"\"", ":", "return", "False", "\n", "trials", "=", "ufile", ".", "read_csv", "(", "fdin", ")", "\n", "if", "trials", "is", "None", "or", "len", "(", "trials", ")", "<=", "0", ":", "\n", "        ", "print", "(", "ext_print", ")", "\n", "print", "(", "'input data error, please check either no such file or no data --- interrupting'", ")", "\n", "return", "False", "\n", "", "print", "(", "ext_print", ")", "\n", "print", "(", "'found a total of %d data items'", "%", "len", "(", "trials", ")", ")", "\n", "\n", "# read feature list - domain knowledge", "\n", "if", "ffea", "is", "None", "or", "ffea", "==", "\"\"", ":", "return", "False", "\n", "fea_dict_dk", "=", "ufile", ".", "read_csv_as_dict_with_multiple_items", "(", "ffea", ")", "\n", "if", "fea_dict_dk", "is", "None", "or", "len", "(", "fea_dict_dk", ")", "<=", "0", ":", "\n", "        ", "print", "(", "ext_print", ")", "\n", "print", "(", "'no feature data available --- interrupting'", ")", "\n", "return", "False", "\n", "\n", "# get feature info", "\n", "", "features", ",", "feature_dict_dk", "=", "{", "}", ",", "{", "}", "\n", "if", "var", "==", "\"All\"", ":", "\n", "        ", "features", "=", "fea_dict_dk", "\n", "del", "features", "[", "\"Variable name\"", "]", "\n", "", "elif", "var", "in", "fea_dict_dk", ":", "\n", "        ", "features", "=", "{", "var", ":", "fea_dict_dk", "[", "var", "]", "}", "\n", "", "for", "key", ",", "value", "in", "fea_dict_dk", ".", "iteritems", "(", ")", ":", "\n", "        ", "names", "=", "value", "[", "0", "]", ".", "lower", "(", ")", ".", "split", "(", "'|'", ")", "\n", "for", "name", "in", "names", ":", "\n", "            ", "if", "name", ".", "strip", "(", ")", "!=", "''", ":", "feature_dict_dk", "[", "name", ".", "strip", "(", ")", "]", "=", "key", "\n", "\n", "# read feature list - UMLS (can be replaced by full UMLS)", "\n", "", "", "if", "ffea2", "is", "None", "or", "ffea2", "==", "\"\"", ":", "return", "False", "\n", "fea_dict_umls", "=", "ufile", ".", "read_csv_as_dict", "(", "ffea2", ")", "\n", "if", "fea_dict_umls", "is", "None", "or", "len", "(", "fea_dict_umls", ")", "<=", "0", ":", "\n", "        ", "print", "(", "ext_print", ")", "\n", "print", "(", "'no feature data available --- interrupting'", ")", "\n", "return", "False", "\n", "\n", "#load numeric feature list", "\n", "", "Valx_core", ".", "init_features", "(", ")", "\n", "\n", "output", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "trials", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'processing %d'", "%", "i", ")", "\n", "# pre-processing eligibility criteria text", "\n", "", "text", "=", "Valx_core", ".", "preprocessing", "(", "trials", "[", "i", "]", "[", "1", "]", ")", "# trials[i][1] is the eligibility criteria text", "\n", "(", "sections_num", ",", "candidates_num", ")", "=", "Valx_core", ".", "extract_candidates_numeric", "(", "text", ")", "# extract candidates containing numeric features", "\n", "for", "j", "in", "range", "(", "len", "(", "candidates_num", ")", ")", ":", "# for each candidate", "\n", "            ", "exp_text", "=", "Valx_core", ".", "formalize_expressions", "(", "candidates_num", "[", "j", "]", ")", "# identify and formalize values", "\n", "(", "exp_text", ",", "key_ngrams", ")", "=", "Valx_core", ".", "identify_variable", "(", "exp_text", ",", "feature_dict_dk", ",", "fea_dict_umls", ")", "# identify variable mentions and map them to names", "\n", "(", "variables", ",", "vars_values", ")", "=", "Valx_core", ".", "associate_variable_values", "(", "exp_text", ")", "\n", "all_exps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "variables", ")", ")", ":", "\n", "                ", "curr_var", "=", "variables", "[", "k", "]", "\n", "curr_exps", "=", "vars_values", "[", "k", "]", "\n", "if", "curr_var", "in", "features", ":", "\n", "                    ", "fea_list", "=", "features", "[", "curr_var", "]", "\n", "curr_exps", "=", "Valx_core", ".", "context_validation", "(", "curr_exps", ",", "fea_list", "[", "1", "]", ",", "fea_list", "[", "2", "]", ")", "\n", "curr_exps", "=", "Valx_core", ".", "normalization", "(", "fea_list", "[", "3", "]", ",", "curr_exps", ")", "# unit conversion and value normalization", "\n", "curr_exps", "=", "Valx_core", ".", "hr_validation", "(", "curr_exps", ",", "float", "(", "fea_list", "[", "4", "]", ")", ",", "float", "(", "fea_list", "[", "5", "]", ")", ")", "# heuristic rule-based validation", "\n", "", "if", "len", "(", "curr_exps", ")", ">", "0", ":", "\n", "                    ", "if", "var", "==", "\"All\"", "or", "var", ".", "lower", "(", ")", "==", "curr_var", ".", "lower", "(", ")", "or", "var", ".", "lower", "(", ")", "in", "curr_var", ".", "lower", "(", ")", ":", "all_exps", "+=", "curr_exps", "\n", "\n", "", "", "if", "len", "(", "all_exps", ")", ">", "0", ":", "output", ".", "append", "(", "(", "trials", "[", "i", "]", "[", "0", "]", ",", "sections_num", "[", "j", "]", ",", "candidates_num", "[", "j", "]", ",", "exp_text", ",", "str", "(", "all_exps", ")", ".", "replace", "(", "\"u'\"", ",", "\"'\"", ")", ")", ")", "# output result", "\n", "\n", "# output result", "\n", "", "", "fout", "=", "os", ".", "path", ".", "splitext", "(", "fdin", ")", "[", "0", "]", "+", "\"_exp_%s.csv\"", "%", "var", "\n", "ufile", ".", "write_csv", "(", "fout", ",", "output", ")", "\n", "print", "(", "ext_print", ")", "\n", "print", "(", "'saved processed results into: %s'", "%", "fout", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_CTgov._process_args": [[88, 95], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "_process_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "default", "=", "r\"D:\\_My_programs\\_CUMC\\Extract_Variables\\_GitHub\\data\\example data diabetes_Type 1.csv\"", ",", "help", "=", "'input: a specific disease'", ")", "\n", "parser", ".", "add_argument", "(", "'-f1'", ",", "default", "=", "r\"D:\\_My_programs\\_CUMC\\Extract_Variables\\_GitHub\\data\\variable_features_dk.csv\"", ",", "help", "=", "'input: a feature list'", ")", "\n", "parser", ".", "add_argument", "(", "'-f2'", ",", "default", "=", "r\"D:\\_My_programs\\_CUMC\\Extract_Variables\\_GitHub\\data\\variable_features_umls.csv\"", ",", "help", "=", "'input: a feature list'", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "default", "=", "\"HBA1C\"", ",", "help", "=", "'Variable name: All, HBA1C, BMI, Glucose, Creatinine, BP-Systolic, BP-Diastolic'", ")", "# 'All' means to detect all variables", "\n", "return", "parser", ".", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.init_features": [[39, 46], ["W_utility.read_csv_as_dict", "temporal.replace", "unit_ori_s.replace"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv_as_dict"], ["def", "init_features", "(", ")", ":", "\n", "    ", "feature_set", "=", "ufile", ".", "read_csv_as_dict", "(", "srcDir", "+", "'/data/numeric_features.csv'", ",", "0", ",", "1", ",", "True", ")", "\n", "global", "greater", ",", "greater_equal", ",", "greater_equal2", ",", "lower", ",", "lower_equal", ",", "lower_equal2", ",", "equal", ",", "between", ",", "selects", ",", "connect", ",", "features", ",", "temporal", ",", "temporal_con", ",", "error1", ",", "error2", ",", "symbols", ",", "numbers", ",", "unit_special", ",", "unit_ori", ",", "unit_ori_s", ",", "unit_exp", ",", "negation", "\n", "greater", ",", "greater_equal", ",", "greater_equal2", ",", "lower", ",", "lower_equal", ",", "lower_equal2", ",", "equal", ",", "between", ",", "selects", ",", "connect", ",", "features", ",", "temporal", ",", "temporal_con", ",", "error1", ",", "error2", ",", "symbols", ",", "numbers", ",", "unit_special", ",", "unit_ori", ",", "unit_ori_s", ",", "unit_exp", ",", "negation", "=", "feature_set", "[", "\"greater\"", "]", ",", "feature_set", "[", "\"greater_equal\"", "]", ",", "feature_set", "[", "\"greater_equal2\"", "]", ",", "feature_set", "[", "\"lower\"", "]", ",", "feature_set", "[", "\"lower_equal\"", "]", ",", "feature_set", "[", "\"lower_equal2\"", "]", ",", "feature_set", "[", "\"equal\"", "]", ",", "feature_set", "[", "\"between\"", "]", ",", "feature_set", "[", "\"selects\"", "]", ",", "feature_set", "[", "\"connect\"", "]", ",", "feature_set", "[", "\"features\"", "]", ",", "feature_set", "[", "\"temporal\"", "]", ",", "feature_set", "[", "\"temporal_con\"", "]", ",", "feature_set", "[", "\"error1\"", "]", ",", "feature_set", "[", "\"error2\"", "]", ",", "feature_set", "[", "\"symbols\"", "]", ",", "feature_set", "[", "\"numbers\"", "]", ",", "feature_set", "[", "\"unit_special\"", "]", ",", "feature_set", "[", "\"unit_ori\"", "]", ",", "feature_set", "[", "\"unit_ori_s\"", "]", ",", "feature_set", "[", "\"unit_exp\"", "]", ",", "feature_set", "[", "\"negation\"", "]", "\n", "temporal", "=", "temporal", "+", "'|'", "+", "temporal", ".", "replace", "(", "'|'", ",", "'s|'", ")", "+", "'s'", "\n", "unit", "=", "(", "unit_ori", "+", "\"|\"", "+", "unit_ori_s", ".", "replace", "(", "\"|\"", ",", "\"s|\"", ")", "+", "\"s|\"", "+", "unit_ori_s", "+", "\"|\"", "+", "temporal", ")", "\n", "#return \"\"", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.preprocessing": [[48, 68], ["text.replace.strip().replace", "text.replace.replace", "text.replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace.replace().replace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "text.replace.lower", "text.replace.replace", "text.replace.strip", "text.replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace.replace", "text.replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace.replace().replace().replace().replace().replace().replace().replace().replace().replace", "text.replace.replace().replace().replace().replace().replace().replace().replace().replace", "text.replace.replace().replace().replace().replace().replace().replace().replace", "text.replace.replace().replace().replace().replace().replace().replace", "text.replace.replace().replace().replace().replace().replace", "text.replace.replace().replace().replace().replace", "text.replace.replace().replace().replace", "text.replace.replace().replace", "text.replace.replace"], "function", ["None"], ["", "def", "preprocessing", "(", "text", ")", ":", "\n", "# handle special characters", "\n", "#text = text.decode('ascii', 'ignore')", "\n", "\n", "    ", "text", "=", "text", ".", "strip", "(", ")", ".", "replace", "(", "'\\n\\n'", ",", "'#'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "text", "=", "text", ".", "replace", "(", "u'\uff1d'", ",", "'='", ")", ".", "replace", "(", "u'\uff1e'", ",", "'>'", ")", ".", "replace", "(", "u'\uff1c'", ",", "'<'", ")", ".", "replace", "(", "u'\u2264'", ",", "'<='", ")", ".", "replace", "(", "u'\u2265'", ",", "'>='", ")", ".", "replace", "(", "u'\u2266'", ",", "'<='", ")", ".", "replace", "(", "u'\u2267'", ",", "'>='", ")", ".", "replace", "(", "u'mm\u00b3'", ",", "'mm^3'", ")", ".", "replace", "(", "u'\u00b5l'", ",", "'ul'", ")", ".", "replace", "(", "u'\u00b5L'", ",", "'ul'", ")", ".", "replace", "(", "u'\u00b7'", ",", "''", ")", ".", "replace", "(", "u'\u2010'", ",", "'-'", ")", ".", "replace", "(", "u'\u2014'", ",", "'-'", ")", "\n", "\n", "text", "=", "text", ".", "replace", "(", "'(('", ",", "'('", ")", ".", "replace", "(", "'))'", ",", "')'", ")", "\n", "text", "=", "re", ".", "sub", "(", "'(\\d+)( |)(~|/|&|\\|)( |)(\\d+)'", ",", "r'\\1 - \\5'", ",", "text", ")", "# e.g., '10~20' to '10 ~ 20'", "\n", "text", "=", "re", ".", "sub", "(", "r\"(\\d+),(\\d{3})\"", ",", "r'\\1\\2'", ",", "text", ")", "# 10,123 to 10123", "\n", "text", "=", "re", ".", "sub", "(", "r\"(\\d+),(\\d{1,2})\"", ",", "r'\\1.\\2'", ",", "text", ")", "# 10,1 to 10.1", "\n", "text", "=", "re", ".", "sub", "(", "r\"between (\\d+), (\\d{1,2}) (and|or) \"", ",", "r'between \\1.\\2 \\3 '", ",", "text", ")", "# 'between 7, 5 and ' to 'between 7.5 and '", "\n", "text", "=", "re", ".", "sub", "(", "r\"(\\d+) (y(\\.|/)?o)\"", ",", "r'age is \\1 years'", ",", "text", ")", "# Process age", "\n", "while", "'  '", "in", "text", ":", "\n", "        ", "text", "=", "text", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "# avoid connected values separated by splitting, e.g., \", but below 10%\"", "\n", "", "text", "=", "re", ".", "sub", "(", "\", (\"", "+", "connect", "+", "\") \"", ",", "r' \\1 '", ",", "text", ")", "# ", "\n", "\n", "return", "text", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.split_text_inclusion_exclusion": [[70, 101], ["text.lower.lower", "sections_text.append", "sections_text.append", "re.search", "re.search", "re.search.start", "re.search.start", "re.search.start", "re.search.start"], "function", ["None"], ["", "def", "split_text_inclusion_exclusion", "(", "text", ")", ":", "\n", "    ", "in_fea", "=", "'inclusion criteria:|key inclusion criteria|inclusion criteria [^:#;\\.]+:|inclusion:|(?<!(\\w| ))inclusion criteria\\W\\W|inclusion for'", "\n", "ex_fea", "=", "'exclusion criteria:|key exclusion criteria|exclusion criteria [^:#;\\.]+:|exclusion:|(?<!(\\w| ))exclusion criteria\\W\\W|exclusion for'", "\n", "\n", "in_text", ",", "ex_text", "=", "''", ",", "''", "\n", "in_bool", "=", "True", "\n", "\n", "text", "=", "text", ".", "lower", "(", ")", "\n", "while", "text", "!=", "''", ":", "\n", "        ", "if", "in_bool", ":", "\n", "            ", "n_pos", "=", "re", ".", "search", "(", "'('", "+", "ex_fea", "+", "')'", ",", "text", ")", "\n", "if", "n_pos", "is", "not", "None", ":", "\n", "                ", "in_text", "+=", "text", "[", "0", ":", "n_pos", ".", "start", "(", ")", "]", "\n", "text", "=", "text", "[", "n_pos", ".", "start", "(", ")", ":", "]", "\n", "", "else", ":", "\n", "                ", "in_text", "+=", "text", "[", "0", ":", "]", "\n", "text", "=", "''", "\n", "", "", "else", ":", "\n", "            ", "n_pos", "=", "re", ".", "search", "(", "'('", "+", "in_fea", "+", "')'", ",", "text", ")", "\n", "if", "n_pos", "is", "not", "None", ":", "\n", "                ", "ex_text", "+=", "text", "[", "0", ":", "n_pos", ".", "start", "(", ")", "]", "\n", "text", "=", "text", "[", "n_pos", ".", "start", "(", ")", ":", "]", "\n", "", "else", ":", "\n", "                ", "ex_text", "+=", "text", "[", "0", ":", "]", "\n", "text", "=", "''", "\n", "", "", "in_bool", "=", "False", "if", "in_bool", "else", "True", "\n", "\n", "", "sections_text", "=", "[", "]", "\n", "if", "in_text", "!=", "''", ":", "sections_text", ".", "append", "(", "[", "\"Inclusion\"", ",", "in_text", "]", ")", "\n", "if", "ex_text", "!=", "''", ":", "sections_text", ".", "append", "(", "[", "\"Exclusion\"", ",", "ex_text", "]", ")", "\n", "return", "sections_text", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.extract_candidates_numeric": [[104, 124], ["Valx_core.split_text_inclusion_exclusion", "NLP.sentence.sentence_splitting_symbols", "sent.strip().strip.strip().strip", "re.search", "sections_num.append", "candidates_num.append", "sent.strip().strip.strip"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.split_text_inclusion_exclusion", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.sentence_splitting_symbols"], ["", "def", "extract_candidates_numeric", "(", "text", ")", ":", "\n", "# process text", "\n", "    ", "sections_text", "=", "split_text_inclusion_exclusion", "(", "text", ")", "\n", "\n", "sections_num", "=", "[", "]", "\n", "candidates_num", "=", "[", "]", "\n", "\n", "for", "section_text", "in", "sections_text", ":", "\n", "        ", "sentences", "=", "sentence", ".", "sentence_splitting_symbols", "(", "section_text", "[", "1", "]", ",", "\"[#!?.;]\\s\"", ",", "1", ")", "\n", "for", "sent", "in", "sentences", ":", "\n", "            ", "sent", "=", "sent", ".", "strip", "(", ")", ".", "strip", "(", "'- '", ")", "\n", "if", "sent", "==", "''", ":", "\n", "                ", "continue", "\n", "\n", "", "digit", "=", "re", ".", "search", "(", "\"(?<!(\\w))\\d+\"", ",", "sent", ")", "\n", "if", "digit", ":", "\n", "                ", "sections_num", ".", "append", "(", "section_text", "[", "0", "]", ")", "\n", "candidates_num", ".", "append", "(", "sent", ")", "\n", "\n", "", "", "", "return", "(", "sections_num", ",", "candidates_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.extract_candidates_name": [[126, 138], ["name_list.split", "range", "len", "sections.append", "candidates.append"], "function", ["None"], ["", "def", "extract_candidates_name", "(", "sections_num", ",", "candidates_num", ",", "name_list", ")", ":", "\n", "    ", "sections", "=", "[", "]", "\n", "candidates", "=", "[", "]", "\n", "names", "=", "name_list", ".", "split", "(", "'|'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "candidates_num", ")", ")", ":", "\n", "        ", "for", "name", "in", "names", ":", "\n", "           ", "if", "name", "in", "candidates_num", "[", "i", "]", ":", "\n", "                ", "sections", ".", "append", "(", "sections_num", "[", "i", "]", ")", "\n", "candidates", ".", "append", "(", "candidates_num", "[", "i", "]", ")", "\n", "break", "\n", "\n", "", "", "", "return", "(", "sections", ",", "candidates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.formalize_expressions": [[141, 178], ["open", "csv.reader", "enumerate", "open.close", "re.sub", "re.findall", "selects.split", "between.split", "re.sub.replace", "selec.replace.replace", "re.sub", "betw.replace.replace", "re.sub", "match.replace().replace", "match.replace"], "function", ["None"], ["", "def", "formalize_expressions", "(", "candidate", ")", ":", "\n", "    ", "text", "=", "candidate", "\n", "#csvfile = open(srcDir + '/data/rules.csv', 'rb')", "\n", "#srcDir = '/Users/jshliu/Google Drive/NYUProjects/CapStone/code/Valx'", "\n", "csvfile", "=", "open", "(", "srcDir", "+", "'/data/rules.csv'", ",", "'r'", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "csvfile", ")", "\n", "now_pattern", "=", "\"preprocessing\"", "\n", "\n", "for", "i", ",", "pattern", "in", "enumerate", "(", "reader", ")", ":", "\n", "        ", "source_pattern", "=", "pattern", "[", "0", "]", "\n", "target_pattern", "=", "pattern", "[", "1", "]", "\n", "pattern_function", "=", "pattern", "[", "2", "]", "\n", "#pdb.set_trace()", "\n", "if", "(", "pattern_function", "==", "\"process_numerical_values\"", "and", "pattern_function", "!=", "now_pattern", ")", ":", "\n", "            ", "matchs", "=", "re", ".", "findall", "(", "'<Unit>([^<>]+)</Unit>'", ",", "text", ")", "\n", "for", "match", "in", "matchs", ":", "text", "=", "text", ".", "replace", "(", "match", ",", "match", ".", "replace", "(", "' / '", ",", "'/'", ")", ".", "replace", "(", "' - '", ",", "'-'", ")", ")", "\n", "\n", "", "if", "(", "pattern_function", "==", "\"process_special_logics\"", "and", "pattern_function", "!=", "now_pattern", ")", ":", "\n", "# process 'select' expression, use the first one", "\n", "            ", "global", "selects", "\n", "aselect", "=", "selects", ".", "split", "(", "'|'", ")", "\n", "for", "selec", "in", "aselect", ":", "\n", "                ", "selec", "=", "selec", ".", "replace", "(", "'X'", ",", "'<VML Unit([^<>]+)>([^<>]+)</VML>'", ")", "\n", "#pdb.set_trace()", "\n", "text", "=", "re", ".", "sub", "(", "selec", ",", "r'<VML Unit\\1>\\2</VML>'", ",", "text", ")", "#", "\n", "\n", "#  process 'between' expressions", "\n", "", "global", "between", "\n", "betweens", "=", "between", ".", "split", "(", "'|'", ")", "\n", "for", "betw", "in", "betweens", ":", "\n", "                ", "betw", "=", "betw", ".", "replace", "(", "'X'", ",", "'<VML Unit([^<>]+)>([^<>]+)</VML>'", ")", "\n", "text", "=", "re", ".", "sub", "(", "betw", ",", "r'<VML Logic=greater_equal Unit\\1>\\2</VML> - <VML Logic=lower_equal Unit\\3>\\4</VML>'", ",", "text", ")", "#", "\n", "", "", "text", "=", "re", ".", "sub", "(", "source_pattern", ",", "target_pattern", ",", "text", ")", "\n", "now_pattern", "=", "pattern_function", "\n", "\n", "", "csvfile", ".", "close", "(", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.identify_variable": [[182, 235], ["re.findall", "re.sub", "re.sub", "re.sub", "re.sub.find", "re.findall", "len", "cantext[].split", "NLP.sentence_keywords.keywords_ngrams_reverse", "len", "max", "key_ngrams.append", "re.sub", "cantext[].split", "cantext[].strip", "x.replace", "re.sub", "re.sub", "key_ngrams.remove", "re.sub", "key_ngrams.remove"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.keywords_ngrams_reverse"], ["def", "identify_variable", "(", "exp_text", ",", "feature_dict_dk", ",", "feature_dict_umls", ")", ":", "\n", "#exp_text = 'pulse: <VML Logic=equal Unit=>88</VML> '", "\n", "# find candidate string", "\n", "    ", "if", "exp_text", ".", "find", "(", "'<VML'", ")", "==", "-", "1", ":", "\n", "        ", "return", "(", "exp_text", ",", "[", "]", ")", "\n", "#exp_text = re.sub(r'(\\\\|/)hr', 'hour', exp_text) # Typically means heart rate in EHR", "\n", "", "can_texts", "=", "re", ".", "findall", "(", "'(\\A|VML>)(.+?)(<VML|\\Z)'", ",", "exp_text", ")", "\n", "\n", "# generate n-grams", "\n", "first_ngram", ",", "key_ngrams", "=", "''", ",", "[", "]", "# first ngram; key ngrams are the ngrams except the ngrams match with domain knowledge and umls", "\n", "match", "=", "False", "\n", "for", "cantext", "in", "can_texts", ":", "\n", "        ", "if", "'<VL Label'", "in", "cantext", "[", "1", "]", ":", "\n", "            ", "ngrams", "=", "re", ".", "findall", "(", "'<VL Label=([^<>]+) Source'", ",", "cantext", "[", "1", "]", ")", "\n", "for", "ngram", "in", "ngrams", ":", "# judge if they are potential variables", "\n", "                ", "if", "ngram", "in", "feature_dict_dk", ":", "\n", "                    ", "exp_text", "=", "re", ".", "sub", "(", "r'<VL Label='", "+", "ngram", "+", "' Source='", ",", "r\"<VL Label=%s Source=\"", "%", "feature_dict_dk", "[", "ngram", "]", ",", "exp_text", ")", "\n", "", "elif", "ngram", "in", "feature_dict_umls", ":", "\n", "                    ", "exp_text", "=", "re", ".", "sub", "(", "r'<VL Label='", "+", "ngram", "+", "' Source='", ",", "r\"<VL Label=%s Source=\"", "%", "feature_dict_umls", "[", "ngram", "]", ",", "exp_text", ")", "\n", "", "", "match", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "cantext", "[", "1", "]", ".", "split", "(", ")", ")", "==", "1", ":", "# Add to avoid removal single character by nltk", "\n", "                ", "ngrams", "=", "cantext", "[", "1", "]", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "#ngrams = sentence_keywords.keywords_ngrams_reverse(cantext[1].replace(' - ', '-').strip())", "\n", "                ", "ngrams", "=", "sentence_keywords", ".", "keywords_ngrams_reverse", "(", "cantext", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "", "if", "len", "(", "ngrams", ")", ">", "0", ":", "\n", "                ", "ngrams", "=", "[", "x", ".", "replace", "(", "' - '", ",", "'-'", ")", "for", "x", "in", "ngrams", "]", "\n", "longest_str", "=", "max", "(", "ngrams", ",", "key", "=", "len", ")", "\n", "key_ngrams", ".", "append", "(", "longest_str", ")", "\n", "if", "first_ngram", "==", "''", ":", "first_ngram", "=", "longest_str", "\n", "", "for", "ngram", "in", "ngrams", ":", "# judge if they are potential variables", "\n", "                ", "if", "ngram", "in", "feature_dict_dk", ":", "\n", "                    ", "if", "ngram", "in", "key_ngrams", ":", "key_ngrams", ".", "remove", "(", "ngram", ")", "\n", "exp_text", "=", "re", ".", "sub", "(", "r'(?<!(\\w|<|>))'", "+", "ngram", "+", "'(?!(\\w|<|>))'", ",", "r\"<VL Label=%s Source=DK>%s</VL>\"", "%", "(", "feature_dict_dk", "[", "ngram", "]", ",", "ngram", ")", ",", "exp_text", ",", "1", ")", "\n", "match", "=", "True", "\n", "break", "\n", "", "elif", "ngram", "in", "feature_dict_umls", ":", "\n", "                    ", "if", "ngram", "in", "key_ngrams", ":", "key_ngrams", ".", "remove", "(", "ngram", ")", "\n", "exp_text", "=", "re", ".", "sub", "(", "r'(?<!(\\w|<|>))'", "+", "ngram", "+", "'(?!(\\w|<|>))'", ",", "r\"<VL Label=%s Source=UMLS>%s</VL>\"", "%", "(", "feature_dict_umls", "[", "ngram", "]", ",", "ngram", ")", ",", "exp_text", ",", "1", ")", "\n", "match", "=", "True", "\n", "break", "\n", "\n", "", "", "", "", "exp_text", "=", "re", ".", "sub", "(", "r'<VL ([^>]+)<VL Label=[^<>]+>([^<>]+)</VL>'", ",", "r'<VL \\1\\2'", ",", "exp_text", ")", "\n", "exp_text", "=", "re", ".", "sub", "(", "r'(?<!(\\w|<|>|=))('", "+", "add_mentions_front", "+", "') <VL Label=([^<>]+) Source=([^<>]+)>([^<>]+)</VL>'", ",", "r\"<VL Label=\\2 \\3 Source=\\4>\\2 \\5</VL>\"", ",", "exp_text", ")", "\n", "exp_text", "=", "re", ".", "sub", "(", "r'</VL>'", "+", "' ('", "+", "add_mentions_back", "+", "r')(?!(\\w|<|>))'", ",", "r\" \\1</VL>\"", ",", "exp_text", ")", "\n", "\n", "# Remove guesses for now", "\n", "#if len(can_texts)>0 and not match and first_ngram.strip() != '': #guess variable", "\n", "#    exp_text = exp_text.replace(first_ngram, \"<VL Label=%s Source=ngram>%s</VL>\" % (first_ngram, first_ngram), 1)", "\n", "#     marks =re.findall(r'<VL Label=([^<>]+)>[^<>]+</VL>', exp_text)", "\n", "\n", "return", "(", "exp_text", ",", "key_ngrams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.associate_variable_values": [[237, 270], ["re.sub", "re.sub", "re.sub", "re.sub.find", "re.sub.find", "re.findall", "re.findall", "re.sub.find", "re.sub.find", "variables.append", "vars_values.append", "len", "len", "value[].replace().replace().replace().replace", "var_values.append", "value[].replace().replace().replace", "value[].strip", "value[].replace().replace", "value[].replace"], "function", ["None"], ["", "def", "associate_variable_values", "(", "exp_text", ")", ":", "\n", "# reorder exp_text to arrange variable values in order", "\n", "    ", "can_str", "=", "exp_text", "\n", "can_str", "=", "re", ".", "sub", "(", "r'<VL ([^<>]+)>([^<>]+)</VL> <VML ([^<>]+)>([^<>]+)</VML> <VL ([^<>]+)>([^<>]+)</VL>'", ",", "r'<VL \\1>\\2</VL> <VML \\3>\\4</VML>; <VL \\5>\\6</VL>'", ",", "can_str", ")", "\n", "can_str", "=", "re", ".", "sub", "(", "r'<VML ([^<>]+)>([^<>]+)</VML> (-|to|and) <VML ([^<>]+)>([^<>]+)</VML>( of| for) <VL ([^<>]+)>([^<>]+)</VL>'", ",", "r'<VL \\7>\\8</VL> <VML \\1>\\2</VML> \\3 <VML \\4>\\5</VML>'", ",", "can_str", ")", "\n", "can_str", "=", "re", ".", "sub", "(", "r'<VML ([^<>]+)>([^<>]+)</VML>( of| for) <VL ([^<>]+)>([^<>]+)</VL>'", ",", "r'<VL \\4>\\5</VL> <VML \\1>\\2</VML>'", ",", "can_str", ")", "\n", "\n", "# find association    ", "\n", "variables", ",", "vars_values", "=", "[", "]", ",", "[", "]", "\n", "start", "=", "0", "\n", "while", "can_str", ".", "find", "(", "'<VL'", ")", ">", "-", "1", "and", "can_str", ".", "find", "(", "'<VML'", ")", ">", "-", "1", ":", "\n", "        ", "con1", "=", "can_str", ".", "find", "(", "'<VL'", ")", "\n", "start", "=", "con1", "# In EHR only map to items on dictionary", "\n", "#start = 0 if start == 0 else con1", "\n", "end", "=", "can_str", ".", "find", "(", "'<VL'", ",", "con1", "+", "1", ")", "\n", "if", "end", ">", "-", "1", ":", "\n", "            ", "text", "=", "can_str", "[", "start", ":", "end", "]", "# pos could be -1 so curr_str always ends with a space", "\n", "can_str", "=", "can_str", "[", "end", ":", "]", "\n", "", "else", ":", "\n", "            ", "text", "=", "can_str", "[", "start", ":", "]", "# pos could be -1 so curr_str always ends with a space", "\n", "can_str", "=", "''", "\n", "# get all values in the range", "\n", "", "var", "=", "re", ".", "findall", "(", "r'<VL Label=([^<>]+) Source=([^<>]+)>([^<>]+)</VL>'", ",", "text", ")", "# get last VL label as variable", "\n", "values", "=", "re", ".", "findall", "(", "r'<VML Logic=([^<>]+) Unit=([^<>]*)>([^<>]+)</VML>'", ",", "text", ")", "\n", "if", "len", "(", "var", ")", ">", "0", "and", "len", "(", "values", ")", ">", "0", ":", "\n", "            ", "variables", ".", "append", "(", "var", "[", "0", "]", "[", "0", "]", ")", "\n", "var_values", "=", "[", "]", "\n", "for", "value", "in", "values", ":", "\n", "                ", "logic_for_view", "=", "value", "[", "0", "]", ".", "replace", "(", "'greater'", ",", "'>'", ")", ".", "replace", "(", "'lower'", ",", "'<'", ")", ".", "replace", "(", "'equal'", ",", "'='", ")", ".", "replace", "(", "'_'", ",", "''", ")", "\n", "var_values", ".", "append", "(", "[", "var", "[", "0", "]", "[", "0", "]", ",", "logic_for_view", ",", "value", "[", "2", "]", ",", "value", "[", "1", "]", ".", "strip", "(", ")", "]", ")", "\n", "", "vars_values", ".", "append", "(", "var_values", ")", "\n", "\n", "", "", "return", "(", "variables", ",", "vars_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.context_validation": [[272, 289], ["str().replace().split", "str().replace().split", "str().replace", "str().replace", "exp[].startswith", "exp[].startswith", "curr_exps.append", "str", "str"], "function", ["None"], ["", "def", "context_validation", "(", "var_values", ",", "allow_units", ",", "error_units", ")", ":", "\n", "\n", "# unit based validation", "\n", "    ", "curr_exps", "=", "[", "]", "\n", "allow_units", "=", "(", "str", "(", "allow_units", ")", ".", "replace", "(", "\"TEMPORAL\"", ",", "temporal", ")", ")", ".", "split", "(", "'|'", ")", "\n", "error_units", "=", "(", "str", "(", "error_units", ")", ".", "replace", "(", "\"TEMPORAL\"", ",", "temporal", ")", ")", ".", "split", "(", "'|'", ")", "\n", "for", "exp", "in", "var_values", ":", "\n", "        ", "if", "exp", "[", "3", "]", ".", "startswith", "(", "'x '", ")", "or", "exp", "[", "3", "]", ".", "startswith", "(", "'times'", ")", ":", "\n", "            ", "condition", "=", "True", "\n", "", "elif", "error_units", "==", "[", "'ALL_OTHER'", "]", ":", "\n", "            ", "condition", "=", "(", "exp", "[", "3", "]", "==", "''", "or", "exp", "[", "3", "]", "in", "allow_units", ")", "\n", "", "else", ":", "\n", "            ", "condition", "=", "(", "exp", "[", "3", "]", "==", "''", "or", "exp", "[", "3", "]", "in", "allow_units", "or", "exp", "[", "3", "]", "not", "in", "error_units", ")", "\n", "", "if", "condition", ":", "\n", "            ", "curr_exps", ".", "append", "(", "exp", ")", "\n", "\n", "", "", "return", "curr_exps", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.normalization": [[293, 367], ["round", "exp_temp.append", "exp[].strip().split", "exp[].split", "math.pow", "float", "exp[].startswith", "exp[].startswith", "exp[].strip", "float", "float", "float", "exp[].startswith", "exp[].startswith", "temp[].strip", "temp[].strip", "exp[].startswith", "exp[].startswith", "exp[].startswith", "exp[].startswith", "str().split", "str", "int", "int"], "function", ["None"], ["", "def", "normalization", "(", "nor_unit", ",", "exps", ")", ":", "\n", "#     for i in xrange(len(exps)):", "\n", "    ", "exp_temp", "=", "[", "]", "\n", "for", "exp", "in", "exps", ":", "\n", "        ", "if", "' x '", "in", "exp", "[", "2", "]", ":", "\n", "            ", "temp", "=", "exp", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", "' x '", ")", "\n", "exp", "[", "2", "]", "=", "1", "\n", "for", "tem", "in", "temp", ":", "\n", "                ", "exp", "[", "2", "]", "=", "exp", "[", "2", "]", "*", "float", "(", "tem", ")", "\n", "", "", "elif", "'^'", "in", "exp", "[", "2", "]", ":", "\n", "            ", "temp", "=", "exp", "[", "2", "]", ".", "split", "(", "'^'", ")", "\n", "x", ",", "y", "=", "float", "(", "temp", "[", "0", "]", ".", "strip", "(", ")", ")", ",", "float", "(", "temp", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "exp", "[", "2", "]", "=", "math", ".", "pow", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "exp", "[", "2", "]", "=", "float", "(", "exp", "[", "2", "]", ")", "\n", "# start define unit conversion", "\n", "", "if", "nor_unit", "==", "'%'", ":", "\n", "            ", "if", "exp", "[", "3", "]", "==", "''", "and", "exp", "[", "2", "]", "<", "1", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "*", "100.0", ",", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", ".", "startswith", "(", "'percent'", ")", ":", "\n", "                ", "exp", "[", "3", "]", "=", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", ".", "startswith", "(", "'mmol/mol'", ")", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "/", "10.0", ",", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", "==", "''", ":", "\n", "                ", "exp", "[", "3", "]", "=", "nor_unit", "\n", "", "", "elif", "nor_unit", "==", "'mmol/l'", ":", "\n", "            ", "if", "exp", "[", "3", "]", "==", "''", "and", "exp", "[", "2", "]", ">=", "60", ":", "\n", "                ", "exp", "[", "3", "]", "=", "'mg'", "\n", "", "if", "exp", "[", "3", "]", ".", "startswith", "(", "'mg'", ")", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "/", "18.0", ",", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", ".", "startswith", "(", "'g/l'", ")", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "*", "7.745", ",", "nor_unit", "\n", "", "", "elif", "nor_unit", "==", "'kg/m2'", ":", "\n", "            ", "if", "exp", "[", "3", "]", "!=", "''", "and", "exp", "[", "3", "]", "!=", "'kg/m2'", ":", "\n", "                ", "exp", "[", "3", "]", "=", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", "==", "''", ":", "\n", "                ", "exp", "[", "3", "]", "=", "nor_unit", "\n", "", "", "elif", "nor_unit", "==", "'mg/dl'", ":", "\n", "            ", "if", "exp", "[", "3", "]", "==", "''", "and", "exp", "[", "2", "]", ">=", "100", ":", "\n", "                ", "exp", "[", "3", "]", "=", "'mol'", "\n", "", "if", "exp", "[", "3", "]", ".", "startswith", "(", "'umol'", ")", "or", "exp", "[", "3", "]", ".", "startswith", "(", "'mol'", ")", "or", "exp", "[", "3", "]", ".", "startswith", "(", "'micromol'", ")", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "/", "88.4", ",", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", "==", "'mmol/l'", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "*", "18.0", ",", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", ".", "startswith", "(", "'mg/g'", ")", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "/", "1000.0", ",", "nor_unit", "\n", "", "", "elif", "nor_unit", "==", "'kg'", ":", "\n", "            ", "if", "exp", "[", "3", "]", "==", "'grams'", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "/", "1000.0", ",", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", "==", "'lb'", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "0.453592", "*", "exp", "[", "2", "]", ",", "nor_unit", "\n", "", "", "elif", "nor_unit", "==", "'m'", ":", "\n", "            ", "if", "exp", "[", "3", "]", "==", "'cm'", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "/", "100.0", ",", "nor_unit", "\n", "", "elif", "exp", "[", "3", "]", "==", "'feet'", ":", "\n", "                ", "temp", "=", "str", "(", "exp", "[", "2", "]", ")", ".", "split", "(", "'.'", ")", "\n", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "(", "int", "(", "temp", "[", "0", "]", ")", "+", "int", "(", "temp", "[", "1", "]", ")", "/", "12", ")", "*", "0.3048", ",", "nor_unit", "\n", "", "", "elif", "nor_unit", "==", "'celsius'", ":", "\n", "            ", "if", "(", "exp", "[", "3", "]", "in", "[", "'celsius'", ",", "'degrees c'", "]", ")", "|", "(", "exp", "[", "2", "]", "<", "50", ")", ":", "\n", "                ", "exp", "[", "3", "]", "=", "nor_unit", "\n", "", "elif", "(", "exp", "[", "3", "]", "in", "[", "'fahrenheit'", ",", "'degrees f'", "]", ")", "|", "(", "exp", "[", "2", "]", ">=", "50", ")", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "(", "exp", "[", "2", "]", "-", "32", ")", "/", "9", "*", "5", ",", "nor_unit", "\n", "", "", "elif", "nor_unit", "==", "'seconds'", ":", "\n", "            ", "if", "(", "exp", "[", "3", "]", "in", "[", "'sec'", ",", "'s'", ",", "'second'", ",", "'seconds'", "]", ")", ":", "\n", "                ", "exp", "[", "3", "]", "=", "nor_unit", "\n", "", "elif", "(", "exp", "[", "3", "]", "in", "[", "'m'", ",", "'min'", ",", "'minute'", ",", "'minutes'", "]", ")", ":", "\n", "                ", "exp", "[", "2", "]", ",", "exp", "[", "3", "]", "=", "exp", "[", "2", "]", "*", "60", ",", "nor_unit", "\n", "\n", "", "", "elif", "exp", "[", "3", "]", "==", "''", "and", "nor_unit", "!=", "\"\"", ":", "\n", "            ", "exp", "[", "3", "]", "=", "nor_unit", "\n", "", "exp", "[", "2", "]", "=", "round", "(", "exp", "[", "2", "]", ",", "2", ")", "\n", "exp_temp", ".", "append", "(", "exp", ")", "\n", "#         exps[i] = exp_temp", "\n", "", "return", "exp_temp", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.hr_validation": [[370, 396], ["tagg_temp.append", "exp[].startswith", "exp[].startswith", "tagg_temp.append", "float", "float"], "function", ["None"], ["", "def", "hr_validation", "(", "exps_temp", ",", "min_value", ",", "max_value", ")", ":", "\n", "# ------------------ judge an exp by its value comparing with average value. 100 mg/dl, 1 (day), in this case, 1 (day) will be removed", "\n", "    ", "exps", "=", "[", "]", "\n", "tagg_temp", "=", "[", "]", "\n", "# validation by comparing with average value step1. This has been tested to be not as valid as the previous validation method", "\n", "#     total, num = 0.0, 0.0", "\n", "#     for exp in exps_temp:", "\n", "#         if exp[3] <> '':", "\n", "#            total += float(exp[2])", "\n", "#            num += 1", "\n", "\n", "thre1", ",", "thre2", "=", "2.0", ",", "8.0", "\n", "for", "exp", "in", "exps_temp", ":", "\n", "        ", "if", "exp", "[", "3", "]", ".", "startswith", "(", "'x '", ")", "or", "exp", "[", "3", "]", ".", "startswith", "(", "'times'", ")", ":", "\n", "            ", "tagg_temp", ".", "append", "(", "exp", ")", "\n", "continue", "\n", "# validation by heuristic rules", "\n", "", "if", "float", "(", "exp", "[", "2", "]", ")", "<", "min_value", "/", "thre1", "or", "float", "(", "exp", "[", "2", "]", ")", ">", "max_value", "*", "thre1", ":", "\n", "            ", "continue", "\n", "\n", "# validation by comparing with average value step2. This has been tested to be not as valid as the previous validation method            ", "\n", "#         if exp[3] == '' and num > 0 and (total/num >= thre2*float(exp[2]) or float(exp[2]) >= thre2*total/num):", "\n", "#             continue", "\n", "\n", "", "tagg_temp", ".", "append", "(", "exp", ")", "\n", "", "return", "tagg_temp", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_CTgov_multiCPUcores.worker": [[12, 39], ["Valx_core.init_features", "range", "Valx_core.preprocessing", "Valx_core.extract_candidates_numeric", "range", "print", "len", "Valx_core.formalize_expressions", "Valx_core.identify_variable", "Valx_core.associate_variable_values", "range", "len", "len", "output.append", "Valx_core.context_validation", "Valx_core.normalization", "Valx_core.hr_validation", "len", "float", "float", "str().replace", "var.lower", "curr_var.lower", "var.lower", "curr_var.lower", "str"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.init_features", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.preprocessing", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.extract_candidates_numeric", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.formalize_expressions", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.identify_variable", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.associate_variable_values", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.context_validation", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.normalization", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_core.hr_validation"], ["def", "worker", "(", "trials", ",", "start", ",", "end", ",", "var", ",", "features", ",", "feature_dict_dk", ",", "fea_dict_umls", ",", "output", ")", ":", "\n", "#load numeric feature list", "\n", "    ", "Valx_core", ".", "init_features", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "start", ",", "end", "+", "1", ")", ":", "\n", "        ", "if", "i", "%", "200", "==", "0", ":", "#define output frequency", "\n", "            ", "print", "(", "'processing %d'", "%", "i", ")", "\n", "# pre-processing text,", "\n", "", "text", "=", "Valx_core", ".", "preprocessing", "(", "trials", "[", "i", "]", "[", "1", "]", ")", "# trials[i][1] is eligibility criteria text", "\n", "(", "sections_num", ",", "candidates_num", ")", "=", "Valx_core", ".", "extract_candidates_numeric", "(", "text", ")", "# extract candidates containing numeric features", "\n", "for", "j", "in", "range", "(", "len", "(", "candidates_num", ")", ")", ":", "# for each candidate", "\n", "            ", "exp_text", "=", "Valx_core", ".", "formalize_expressions", "(", "candidates_num", "[", "j", "]", ")", "# identify and formalize values", "\n", "(", "exp_text", ",", "key_ngrams", ")", "=", "Valx_core", ".", "identify_variable", "(", "exp_text", ",", "feature_dict_dk", ",", "fea_dict_umls", ")", "# identify variable mentions and map to names", "\n", "(", "variables", ",", "vars_values", ")", "=", "Valx_core", ".", "associate_variable_values", "(", "exp_text", ")", "\n", "all_exps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "variables", ")", ")", ":", "\n", "                ", "curr_var", "=", "variables", "[", "k", "]", "\n", "curr_exps", "=", "vars_values", "[", "k", "]", "\n", "if", "curr_var", "in", "features", ":", "\n", "                    ", "fea_list", "=", "features", "[", "curr_var", "]", "\n", "curr_exps", "=", "Valx_core", ".", "context_validation", "(", "curr_exps", ",", "fea_list", "[", "1", "]", ",", "fea_list", "[", "2", "]", ")", "\n", "curr_exps", "=", "Valx_core", ".", "normalization", "(", "fea_list", "[", "3", "]", ",", "curr_exps", ")", "# unit conversion and value normalization", "\n", "curr_exps", "=", "Valx_core", ".", "hr_validation", "(", "curr_exps", ",", "float", "(", "fea_list", "[", "4", "]", ")", ",", "float", "(", "fea_list", "[", "5", "]", ")", ")", "# heuristic rule-based validation", "\n", "", "if", "len", "(", "curr_exps", ")", ">", "0", ":", "\n", "                    ", "if", "var", "==", "\"All\"", "or", "var", ".", "lower", "(", ")", "==", "curr_var", ".", "lower", "(", ")", "or", "var", ".", "lower", "(", ")", "in", "curr_var", ".", "lower", "(", ")", ":", "all_exps", "+=", "curr_exps", "\n", "\n", "", "", "if", "len", "(", "all_exps", ")", ">", "0", ":", "output", ".", "append", "(", "(", "trials", "[", "i", "]", "[", "0", "]", ",", "sections_num", "[", "j", "]", ",", "candidates_num", "[", "j", "]", ",", "exp_text", ",", "str", "(", "all_exps", ")", ".", "replace", "(", "\"u'\"", ",", "\"'\"", ")", ")", ")", "# output result", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_CTgov_multiCPUcores.extract_variables": [[42, 95], ["W_utility.read_csv", "print", "print", "W_utility.read_csv_as_dict_with_multiple_items", "ufile.read_csv_as_dict_with_multiple_items.iteritems", "W_utility.read_csv_as_dict", "multiprocessing.Manager().list", "range", "W_utility.write_csv", "print", "print", "print", "print", "print", "print", "value[].lower().split", "print", "print", "multiprocessing.Process", "jobs.append", "multiprocessing.Process.start", "j.join", "len", "len", "len", "len", "multiprocessing.Manager", "os.path.splitext", "value[].lower", "name.strip", "name.strip", "len", "len"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv_as_dict_with_multiple_items", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv_as_dict", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_csv"], ["", "", "", "def", "extract_variables", "(", "fdin", ",", "ffea", ",", "ffea2", ",", "var", ",", "cores", ")", ":", "\n", "# read input dataset", "\n", "    ", "if", "fdin", "is", "None", "or", "fdin", "==", "\"\"", ":", "return", "False", "\n", "trials", "=", "ufile", ".", "read_csv", "(", "fdin", ")", "\n", "if", "trials", "is", "None", "or", "len", "(", "trials", ")", "<=", "0", ":", "\n", "        ", "print", "(", "ext_print", ")", "\n", "print", "(", "'input data error, please check either no such file or no data --- interrupting'", ")", "\n", "return", "False", "\n", "", "print", "(", "ext_print", ")", "\n", "print", "(", "'found a total of %d data items'", "%", "len", "(", "trials", ")", ")", "\n", "\n", "# read feature list - domain knowledge", "\n", "if", "ffea", "is", "None", "or", "ffea", "==", "\"\"", ":", "return", "False", "\n", "fea_dict_dk", "=", "ufile", ".", "read_csv_as_dict_with_multiple_items", "(", "ffea", ")", "\n", "if", "fea_dict_dk", "is", "None", "or", "len", "(", "fea_dict_dk", ")", "<=", "0", ":", "\n", "        ", "print", "(", "ext_print", ")", "\n", "print", "(", "'no feature data available --- interrupting'", ")", "\n", "return", "False", "\n", "\n", "# get feature info", "\n", "", "features", ",", "feature_dict_dk", "=", "{", "}", ",", "{", "}", "\n", "if", "var", "==", "\"All\"", ":", "\n", "        ", "features", "=", "fea_dict_dk", "\n", "del", "features", "[", "\"Variable name\"", "]", "\n", "", "elif", "var", "in", "fea_dict_dk", ":", "\n", "        ", "features", "=", "{", "var", ":", "fea_dict_dk", "[", "var", "]", "}", "\n", "", "for", "key", ",", "value", "in", "fea_dict_dk", ".", "iteritems", "(", ")", ":", "\n", "        ", "names", "=", "value", "[", "0", "]", ".", "lower", "(", ")", ".", "split", "(", "'|'", ")", "\n", "for", "name", "in", "names", ":", "\n", "            ", "if", "name", ".", "strip", "(", ")", "!=", "''", ":", "feature_dict_dk", "[", "name", ".", "strip", "(", ")", "]", "=", "key", "\n", "\n", "# read feature list - umls", "\n", "", "", "if", "ffea2", "is", "None", "or", "ffea2", "==", "\"\"", ":", "return", "False", "\n", "fea_dict_umls", "=", "ufile", ".", "read_csv_as_dict", "(", "ffea2", ")", "\n", "if", "fea_dict_umls", "is", "None", "or", "len", "(", "fea_dict_umls", ")", "<=", "0", ":", "\n", "        ", "print", "(", "ext_print", ")", "\n", "print", "(", "'no feature data available --- interrupting'", ")", "\n", "return", "False", "\n", "\n", "\n", "", "output", "=", "Manager", "(", ")", ".", "list", "(", ")", "\n", "jobs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "cores", "+", "1", ")", ":", "\n", "        ", "t", "=", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "trials", ",", "len", "(", "trials", ")", "*", "(", "i", "-", "1", ")", "/", "cores", ",", "len", "(", "trials", ")", "*", "i", "/", "cores", "-", "1", ",", "var", ",", "features", ",", "feature_dict_dk", ",", "fea_dict_umls", ",", "output", ")", ")", "\n", "jobs", ".", "append", "(", "t", ")", "\n", "t", ".", "start", "(", ")", "\n", "", "for", "j", "in", "jobs", ":", "j", ".", "join", "(", ")", "\n", "\n", "fout", "=", "os", ".", "path", ".", "splitext", "(", "fdin", ")", "[", "0", "]", "+", "\"_exp_%s.csv\"", "%", "var", "\n", "ufile", ".", "write_csv", "(", "fout", ",", "output", ")", "\n", "print", "(", "ext_print", ")", "\n", "print", "(", "'saved processed results into: %s'", "%", "fout", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.Valx_modified.Valx_CTgov_multiCPUcores._process_args": [[99, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "_process_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "default", "=", "r\"D:\\_My_programs\\_CUMC\\Extract_Variables\\_GitHub\\data\\example data diabetes_Type 1.csv\"", ",", "help", "=", "'input: a specific disease'", ")", "\n", "parser", ".", "add_argument", "(", "'-f1'", ",", "default", "=", "r\"D:\\_My_programs\\_CUMC\\Extract_Variables\\_GitHub\\data\\variable_features_dk.csv\"", ",", "help", "=", "'input: a feature list'", ")", "\n", "parser", ".", "add_argument", "(", "'-f2'", ",", "default", "=", "r\"D:\\_My_programs\\_CUMC\\Extract_Variables\\_GitHub\\data\\variable_features_umls.csv\"", ",", "help", "=", "'input: a feature list'", ")", "\n", "parser", ".", "add_argument", "(", "'-v'", ",", "default", "=", "\"HBA1C\"", ",", "help", "=", "'Variable name: All, HBA1C, BMI, Glucose, Creatinine, BP-Systolic, BP-Diastolic'", ")", "# 'All' means to detect all variables", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "' define the number of used CPU cores'", ")", "#", "\n", "return", "parser", ".", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.sentence_splitting": [[11, 28], ["nltk.sent_tokenize", "len", "len", "sent.strip().split.strip().split", "sen.split", "sent.strip().split.strip", "NLP.words_counting", "sentences.append"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.words_counting"], ["def", "sentence_splitting", "(", "texts", ",", "slen", "=", "1", ")", ":", "\n", "\t", "if", "len", "(", "texts", ")", "<=", "0", ":", "\n", "\t\t", "return", "[", "]", "\n", "\n", "# splitting", "\n", "", "sentences", "=", "[", "]", "\n", "text_sents", "=", "sent_tokenize", "(", "texts", ")", "\n", "if", "(", "text_sents", "!=", "[", "''", "]", "and", "len", "(", "text_sents", ")", ">", "0", ")", ":", "\n", "\t\t", "for", "sent", "in", "text_sents", ":", "\n", "\t\t\t", "sent", "=", "sent", ".", "strip", "(", ")", ".", "split", "(", "'\\r'", ")", "# split strings that contains \"\\r\"", "\n", "for", "sen", "in", "sent", ":", "\n", "\t\t\t\t", "se", "=", "sen", ".", "split", "(", "'. '", ")", "\n", "for", "s", "in", "se", ":", "\n", "\t\t\t\t\t", "if", "(", "NLP_word", ".", "words_counting", "(", "s", ")", ">=", "slen", ")", ":", "\n", "\t\t\t\t\t\t", "sentences", ".", "append", "(", "s", ")", "\n", "\n", "", "", "", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.sentence_splitting_symbols": [[31, 48], ["re.split", "len", "len", "sent.strip().split.strip().split", "sent.strip().split.strip", "NLP.words_counting", "sentences.append", "sen.strip().strip", "sen.strip"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.words_counting"], ["", "def", "sentence_splitting_symbols", "(", "texts", ",", "splitter", "=", "None", ",", "slen", "=", "1", ")", ":", "\n", "\t", "if", "len", "(", "texts", ")", "<=", "0", ":", "\n", "\t\t", "return", "[", "]", "\n", "\n", "", "if", "splitter", "is", "None", ":", "\n", "\t\t", "splitter", "=", "\"[#!?.]\\s\"", "\n", "# splitting", "\n", "", "sentences", "=", "[", "]", "\n", "text_sents", "=", "re", ".", "split", "(", "splitter", ",", "texts", ")", "\n", "if", "(", "text_sents", "!=", "[", "''", "]", "and", "len", "(", "text_sents", ")", ">", "0", ")", ":", "\n", "\t\t", "for", "sent", "in", "text_sents", ":", "\n", "\t\t\t", "sent", "=", "sent", ".", "strip", "(", ")", ".", "split", "(", "'\\r'", ")", "# split strings that contains \"\\r\"", "\n", "for", "sen", "in", "sent", ":", "\n", "\t\t\t\t", "if", "(", "NLP_word", ".", "words_counting", "(", "sen", ")", ">=", "slen", ")", ":", "\n", "\t\t\t\t\t", "sentences", ".", "append", "(", "sen", ".", "strip", "(", "'-'", ")", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.phrase_splitting": [[51, 60], ["re.compile", "re.compile.split", "sentence.phrase_cleaning", "len", "phrases.append"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.phrase_cleaning"], ["", "def", "phrase_splitting", "(", "sentence", ")", ":", "\n", "\t", "phrases", "=", "[", "]", "\n", "splitter", "=", "re", ".", "compile", "(", "'[\\(\\){}\\[\\]?!,:;]'", ")", "\n", "can_phrs", "=", "splitter", ".", "split", "(", "sentence", ")", "\n", "for", "can_phr", "in", "can_phrs", ":", "\n", "\t\t", "can_phr", "=", "phrase_cleaning", "(", "can_phr", ")", "\n", "if", "len", "(", "can_phr", ")", ">", "0", ":", "\n", "\t\t\t", "phrases", ".", "append", "(", "can_phr", ")", "\n", "", "", "return", "phrases", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.phrase_cleaning": [[62, 88], ["txt.replace.strip", "len", "txt.replace.replace", "txt.replace.strip", "txt.replace.split", "txts[].startswith", "txt.replace.strip", "txt.replace.replace", "txt.replace.replace", "len", "len"], "function", ["None"], ["", "def", "phrase_cleaning", "(", "txt", ")", ":", "\n", "\t", "if", "len", "(", "txt", ".", "strip", "(", ")", ")", ">", "0", ":", "\n", "\t\t", "txt", "=", "txt", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "remove", "=", "'\"\u201c\u201d#$&|*'", "\n", "for", "r", "in", "remove", ":", "\n", "\t\t\t", "if", "r", "in", "txt", ":", "\n", "\t\t\t\t", "txt", "=", "txt", ".", "replace", "(", "r", ",", "''", ")", "\n", "\n", "# \tremove = '\\/'", "\n", "# \tfor r in remove:", "\n", "# \t\tif r in txt:", "\n", "# \t\t\ttxt = txt.replace (r, ' '+r+' ')", "\n", "\n", "", "", "while", "'  '", "in", "txt", ":", "\n", "\t\t\t", "txt", "=", "txt", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "\n", "", "txt", "=", "txt", ".", "strip", "(", ")", "\n", "if", "len", "(", "txt", ")", ">", "0", "and", "txt", "[", "0", "]", "in", "string", ".", "punctuation", ":", "\n", "\t\t\t", "txt", "=", "txt", "[", "1", ":", "]", "\n", "", "if", "len", "(", "txt", ")", ">", "0", "and", "txt", "[", "-", "1", "]", "in", "string", ".", "punctuation", ":", "\n", "\t\t\t", "txt", "=", "txt", "[", "0", ":", "-", "1", "]", "\n", "\n", "", "txts", "=", "txt", ".", "split", "(", "' '", ")", "\n", "if", "txts", "[", "0", "]", ".", "startswith", "(", "'\\\\'", ")", ":", "\n", "\t\t\t", "txt", "=", "' '", ".", "join", "(", "txts", "[", "1", ":", "]", ")", "\n", "", "", "return", "txt", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.stem_phrase": [[89, 95], ["phrase.split", "range", "len", "porter2.stem"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.stem"], ["", "def", "stem_phrase", "(", "phrase", ")", ":", "\n", "\t", "words", "=", "phrase", ".", "split", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "words", ")", ")", ":", "\n", "\t\t", "words", "[", "i", "]", "=", "porter2", ".", "stem", "(", "words", "[", "i", "]", ")", "\n", "\n", "", "return", "' '", ".", "join", "(", "words", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.get_r1": [[20, 32], ["word.startswith", "r_exp.match", "len", "word.startswith", "word.startswith", "r_exp.match.start"], "function", ["None"], ["def", "get_r1", "(", "word", ")", ":", "\n", "# exceptional forms", "\n", "    ", "if", "word", ".", "startswith", "(", "'gener'", ")", "or", "word", ".", "startswith", "(", "'arsen'", ")", ":", "\n", "        ", "return", "5", "\n", "", "if", "word", ".", "startswith", "(", "'commun'", ")", ":", "\n", "        ", "return", "6", "\n", "\n", "# normal form", "\n", "", "match", "=", "r_exp", ".", "match", "(", "word", ")", "\n", "if", "match", ":", "\n", "        ", "return", "match", ".", "start", "(", "1", ")", "\n", "", "return", "len", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.get_r2": [[33, 38], ["r_exp.match", "len", "porter2.get_r1", "r_exp.match.start"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.get_r1"], ["", "def", "get_r2", "(", "word", ")", ":", "\n", "    ", "match", "=", "r_exp", ".", "match", "(", "word", ",", "get_r1", "(", "word", ")", ")", "\n", "if", "match", ":", "\n", "        ", "return", "match", ".", "start", "(", "1", ")", "\n", "", "return", "len", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.ends_with_short_syllable": [[39, 46], ["ewss_exp2.match", "len", "ewss_exp1.match"], "function", ["None"], ["", "def", "ends_with_short_syllable", "(", "word", ")", ":", "\n", "    ", "if", "len", "(", "word", ")", "==", "2", ":", "\n", "        ", "if", "ewss_exp1", ".", "match", "(", "word", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "if", "ewss_exp2", ".", "match", "(", "word", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.is_short_word": [[47, 52], ["porter2.ends_with_short_syllable", "porter2.get_r1", "len"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.ends_with_short_syllable", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.get_r1"], ["", "def", "is_short_word", "(", "word", ")", ":", "\n", "    ", "if", "ends_with_short_syllable", "(", "word", ")", ":", "\n", "        ", "if", "get_r1", "(", "word", ")", "==", "len", "(", "word", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.remove_initial_apostrophe": [[53, 57], ["word.startswith"], "function", ["None"], ["", "def", "remove_initial_apostrophe", "(", "word", ")", ":", "\n", "    ", "if", "word", ".", "startswith", "(", "\"'\"", ")", ":", "\n", "        ", "return", "word", "[", "1", ":", "]", "\n", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.capitalize_consonant_ys": [[58, 62], ["word.startswith", "ccy_exp.sub"], "function", ["None"], ["", "def", "capitalize_consonant_ys", "(", "word", ")", ":", "\n", "    ", "if", "word", ".", "startswith", "(", "'y'", ")", ":", "\n", "        ", "word", "=", "'Y'", "+", "word", "[", "1", ":", "]", "\n", "", "return", "ccy_exp", ".", "sub", "(", "'\\g<1>Y'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_0": [[63, 71], ["word.endswith", "word.endswith", "word.endswith"], "function", ["None"], ["", "def", "step_0", "(", "word", ")", ":", "\n", "    ", "if", "word", ".", "endswith", "(", "\"'s'\"", ")", ":", "\n", "        ", "return", "word", "[", ":", "-", "3", "]", "\n", "", "if", "word", ".", "endswith", "(", "\"'s\"", ")", ":", "\n", "        ", "return", "word", "[", ":", "-", "2", "]", "\n", "", "if", "word", ".", "endswith", "(", "\"'\"", ")", ":", "\n", "        ", "return", "word", "[", ":", "-", "1", "]", "\n", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1a": [[72, 88], ["word.endswith", "word.endswith", "word.endswith", "word.endswith", "word.endswith", "word.endswith", "s1a_exp.search", "len"], "function", ["None"], ["", "def", "step_1a", "(", "word", ")", ":", "\n", "    ", "if", "word", ".", "endswith", "(", "'sses'", ")", ":", "\n", "        ", "return", "word", "[", ":", "-", "4", "]", "+", "'ss'", "\n", "", "if", "word", ".", "endswith", "(", "'ied'", ")", "or", "word", ".", "endswith", "(", "'ies'", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", ">", "4", ":", "\n", "            ", "return", "word", "[", ":", "-", "3", "]", "+", "'i'", "\n", "", "else", ":", "\n", "            ", "return", "word", "[", ":", "-", "3", "]", "+", "'ie'", "\n", "", "", "if", "word", ".", "endswith", "(", "'us'", ")", "or", "word", ".", "endswith", "(", "'ss'", ")", ":", "\n", "        ", "return", "word", "\n", "", "if", "word", ".", "endswith", "(", "'s'", ")", ":", "\n", "        ", "preceding", "=", "word", "[", ":", "-", "1", "]", "\n", "if", "s1a_exp", ".", "search", "(", "preceding", ")", ":", "\n", "            ", "return", "preceding", "\n", "", "return", "word", "\n", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.ends_with_double": [[90, 95], ["word.endswith"], "function", ["None"], ["def", "ends_with_double", "(", "word", ")", ":", "\n", "    ", "for", "double", "in", "doubles", ":", "\n", "        ", "if", "word", ".", "endswith", "(", "double", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "", "def", "step_1b_helper", "(", "word", ")", ":", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1b_helper": [[95, 103], ["porter2.ends_with_double", "porter2.is_short_word", "word.endswith", "word.endswith", "word.endswith"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.ends_with_double", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.is_short_word"], ["", "def", "step_1b_helper", "(", "word", ")", ":", "\n", "    ", "if", "word", ".", "endswith", "(", "'at'", ")", "or", "word", ".", "endswith", "(", "'bl'", ")", "or", "word", ".", "endswith", "(", "'iz'", ")", ":", "\n", "        ", "return", "word", "+", "'e'", "\n", "", "if", "ends_with_double", "(", "word", ")", ":", "\n", "        ", "return", "word", "[", ":", "-", "1", "]", "\n", "", "if", "is_short_word", "(", "word", ")", ":", "\n", "        ", "return", "word", "+", "'e'", "\n", "", "return", "word", "\n", "", "s1b_suffixes", "=", "(", "'ed'", ",", "'edly'", ",", "'ing'", ",", "'ingly'", ")", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1b": [[105, 123], ["word.endswith", "word.endswith", "word.endswith", "s1b_exp.search", "len", "len", "porter2.step_1b_helper", "len"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1b_helper"], ["def", "step_1b", "(", "word", ",", "r1", ")", ":", "\n", "    ", "if", "word", ".", "endswith", "(", "'eedly'", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", "-", "5", ">=", "r1", ":", "\n", "            ", "return", "word", "[", ":", "-", "3", "]", "\n", "", "return", "word", "\n", "", "if", "word", ".", "endswith", "(", "'eed'", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", "-", "3", ">=", "r1", ":", "\n", "            ", "return", "word", "[", ":", "-", "1", "]", "\n", "", "return", "word", "\n", "\n", "", "for", "suffix", "in", "s1b_suffixes", ":", "\n", "        ", "if", "word", ".", "endswith", "(", "suffix", ")", ":", "\n", "            ", "preceding", "=", "word", "[", ":", "-", "len", "(", "suffix", ")", "]", "\n", "if", "s1b_exp", ".", "search", "(", "preceding", ")", ":", "\n", "                ", "return", "step_1b_helper", "(", "preceding", ")", "\n", "", "return", "word", "\n", "\n", "", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1c": [[124, 130], ["word.endswith", "word.endswith", "len", "len"], "function", ["None"], ["", "def", "step_1c", "(", "word", ")", ":", "\n", "    ", "if", "word", ".", "endswith", "(", "'y'", ")", "or", "word", ".", "endswith", "(", "'Y'", ")", "and", "len", "(", "word", ")", ">", "1", ":", "\n", "        ", "if", "word", "[", "-", "2", "]", "not", "in", "'aeiouy'", ":", "\n", "            ", "if", "len", "(", "word", ")", ">", "2", ":", "\n", "                ", "return", "word", "[", ":", "-", "1", "]", "+", "'i'", "\n", "", "", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_2_helper": [[131, 141], ["word.endswith", "len", "len", "word[].endswith", "len", "len", "len"], "function", ["None"], ["", "def", "step_2_helper", "(", "word", ",", "r1", ",", "end", ",", "repl", ",", "prev", ")", ":", "\n", "        ", "if", "word", ".", "endswith", "(", "end", ")", ":", "\n", "            ", "if", "len", "(", "word", ")", "-", "len", "(", "end", ")", ">=", "r1", ":", "\n", "                ", "if", "prev", "==", "[", "]", ":", "\n", "                    ", "return", "word", "[", ":", "-", "len", "(", "end", ")", "]", "+", "repl", "\n", "", "for", "p", "in", "prev", ":", "\n", "                    ", "if", "word", "[", ":", "-", "len", "(", "end", ")", "]", ".", "endswith", "(", "p", ")", ":", "\n", "                        ", "return", "word", "[", ":", "-", "len", "(", "end", ")", "]", "+", "repl", "\n", "", "", "", "return", "word", "\n", "", "return", "None", "\n", "", "s2_triples", "=", "(", "(", "'ization'", ",", "'ize'", ",", "[", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_2": [[166, 172], ["porter2.step_2_helper"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_2_helper"], ["def", "step_2", "(", "word", ",", "r1", ")", ":", "\n", "    ", "for", "trip", "in", "s2_triples", ":", "\n", "        ", "attempt", "=", "step_2_helper", "(", "word", ",", "r1", ",", "trip", "[", "0", "]", ",", "trip", "[", "1", "]", ",", "trip", "[", "2", "]", ")", "\n", "if", "attempt", ":", "\n", "            ", "return", "attempt", "\n", "", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_3_helper": [[173, 183], ["word.endswith", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "step_3_helper", "(", "word", ",", "r1", ",", "r2", ",", "end", ",", "repl", ",", "r2_necessary", ")", ":", "\n", "    ", "if", "word", ".", "endswith", "(", "end", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", "-", "len", "(", "end", ")", ">=", "r1", ":", "\n", "            ", "if", "not", "r2_necessary", ":", "\n", "                ", "return", "word", "[", ":", "-", "len", "(", "end", ")", "]", "+", "repl", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "word", ")", "-", "len", "(", "end", ")", ">=", "r2", ":", "\n", "                    ", "return", "word", "[", ":", "-", "len", "(", "end", ")", "]", "+", "repl", "\n", "", "", "", "return", "word", "\n", "", "return", "None", "\n", "", "s3_triples", "=", "(", "(", "'ational'", ",", "'ate'", ",", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_3": [[192, 198], ["porter2.step_3_helper"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_3_helper"], ["def", "step_3", "(", "word", ",", "r1", ",", "r2", ")", ":", "\n", "    ", "for", "trip", "in", "s3_triples", ":", "\n", "        ", "attempt", "=", "step_3_helper", "(", "word", ",", "r1", ",", "r2", ",", "trip", "[", "0", "]", ",", "trip", "[", "1", "]", ",", "trip", "[", "2", "]", ")", "\n", "if", "attempt", ":", "\n", "            ", "return", "attempt", "\n", "", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_4": [[202, 214], ["word.endswith", "word.endswith", "word.endswith", "len", "len", "len", "len"], "function", ["None"], ["def", "step_4", "(", "word", ",", "r2", ")", ":", "\n", "    ", "for", "end", "in", "s4_delete_list", ":", "\n", "        ", "if", "word", ".", "endswith", "(", "end", ")", ":", "\n", "            ", "if", "len", "(", "word", ")", "-", "len", "(", "end", ")", ">=", "r2", ":", "\n", "                ", "return", "word", "[", ":", "-", "len", "(", "end", ")", "]", "\n", "", "return", "word", "\n", "\n", "", "", "if", "word", ".", "endswith", "(", "'sion'", ")", "or", "word", ".", "endswith", "(", "'tion'", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", "-", "3", ">=", "r2", ":", "\n", "            ", "return", "word", "[", ":", "-", "3", "]", "\n", "\n", "", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_5": [[215, 228], ["word.endswith", "word.endswith", "len", "porter2.ends_with_short_syllable", "len", "len"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.ends_with_short_syllable"], ["", "def", "step_5", "(", "word", ",", "r1", ",", "r2", ")", ":", "\n", "    ", "if", "word", ".", "endswith", "(", "'l'", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", "-", "1", ">=", "r2", "and", "word", "[", "-", "2", "]", "==", "'l'", ":", "\n", "            ", "return", "word", "[", ":", "-", "1", "]", "\n", "", "return", "word", "\n", "\n", "", "if", "word", ".", "endswith", "(", "'e'", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", "-", "1", ">=", "r2", ":", "\n", "            ", "return", "word", "[", ":", "-", "1", "]", "\n", "", "if", "len", "(", "word", ")", "-", "1", ">=", "r1", "and", "not", "ends_with_short_syllable", "(", "word", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "return", "word", "[", ":", "-", "1", "]", "\n", "\n", "", "", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.normalize_ys": [[229, 231], ["word.replace"], "function", ["None"], ["", "def", "normalize_ys", "(", "word", ")", ":", "\n", "    ", "return", "word", ".", "replace", "(", "'Y'", ",", "'y'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.stem": [[255, 283], ["porter2.remove_initial_apostrophe", "porter2.capitalize_consonant_ys", "porter2.get_r1", "porter2.get_r2", "porter2.step_0", "porter2.step_1a", "porter2.step_1b", "porter2.step_1c", "porter2.step_2", "porter2.step_3", "porter2.step_4", "porter2.step_5", "porter2.normalize_ys", "len"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.remove_initial_apostrophe", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.capitalize_consonant_ys", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.get_r1", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.get_r2", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_0", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1a", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1b", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_1c", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_2", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_3", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_4", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.step_5", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.porter2.normalize_ys"], ["def", "stem", "(", "word", ")", ":", "\n", "    ", "if", "len", "(", "word", ")", "<=", "2", ":", "\n", "        ", "return", "word", "\n", "", "word", "=", "remove_initial_apostrophe", "(", "word", ")", "\n", "\n", "# handle some exceptional forms", "\n", "if", "word", "in", "exceptional_forms", ":", "\n", "        ", "return", "exceptional_forms", "[", "word", "]", "\n", "\n", "", "word", "=", "capitalize_consonant_ys", "(", "word", ")", "\n", "r1", "=", "get_r1", "(", "word", ")", "\n", "r2", "=", "get_r2", "(", "word", ")", "\n", "word", "=", "step_0", "(", "word", ")", "\n", "word", "=", "step_1a", "(", "word", ")", "\n", "\n", "# handle some more exceptional forms", "\n", "if", "word", "in", "exceptional_early_exit_post_1a", ":", "\n", "        ", "return", "word", "\n", "\n", "", "word", "=", "step_1b", "(", "word", ",", "r1", ")", "\n", "word", "=", "step_1c", "(", "word", ")", "\n", "word", "=", "step_2", "(", "word", ",", "r1", ")", "\n", "word", "=", "step_3", "(", "word", ",", "r1", ",", "r2", ")", "\n", "word", "=", "step_4", "(", "word", ",", "r2", ")", "\n", "word", "=", "step_5", "(", "word", ",", "r1", ",", "r2", ")", "\n", "word", "=", "normalize_ys", "(", "word", ")", "\n", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.keywords_syntax_nltk": [[11, 49], ["NLP.phrase_splitting", "len", "NLP.word_splitting", "NLP.word_pos_tagging", "nltk.RegexpParser", "nltk.RegexpParser.parse", "sentence_keywords.get_terms", "len", "keywords.append", "phrase.lower"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.phrase_splitting", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.word_splitting", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.word_pos_tagging", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.get_terms"], ["def", "keywords_syntax_nltk", "(", "sentence", ")", ":", "\n", "\t", "global", "text_terms", "\n", "terms", "=", "[", "]", "\n", "phrases", "=", "NLP_sent", ".", "phrase_splitting", "(", "sentence", ")", "\n", "for", "phrase", "in", "phrases", ":", "\n", "\t\t", "if", "len", "(", "phrase", ")", "<=", "2", ":", "# e.g.'ii'", "\n", "\t\t\t", "continue", "\n", "", "if", "phrase", "in", "text_terms", ":", "\n", "\t\t\t", "phrase_terms", "=", "text_terms", "[", "phrase", "]", "\n", "", "else", ":", "\n", "#-------------------POS tagging output", "\n", "\t\t\t", "words", "=", "NLP_word", ".", "word_splitting", "(", "phrase", ".", "lower", "(", ")", ")", "\n", "pos_tags", "=", "NLP_word", ".", "word_pos_tagging", "(", "words", ")", "\n", "\n", "#-------------------parsed tree", "\n", "grammar", "=", "r\"\"\"\n\t\t\t\tNBAR:\n\t\t\t\t\t# Nouns and Adjectives, terminated with Nouns\n\t\t\t\t\t{<NN.*|JJ>*<NN.*>}\n\t\t\t\n\t\t\t\tNP:\n\t\t\t\t\t{<NBAR>}\n\t\t\t\t\t# Above, connected with in/of/etc...\n\t\t\t\t\t{<NBAR><IN><NBAR>}\n\t\t\t\"\"\"", "\n", "\n", "cp", "=", "nltk", ".", "RegexpParser", "(", "grammar", ",", "loop", "=", "2", ")", "\n", "cp_tree", "=", "cp", ".", "parse", "(", "pos_tags", ")", "\n", "phrase_terms", "=", "get_terms", "(", "cp_tree", ")", "\n", "text_terms", "[", "phrase", "]", "=", "phrase_terms", "\n", "\n", "", "terms", "+=", "phrase_terms", "\n", "\n", "", "keywords", "=", "[", "]", "\n", "for", "term", "in", "terms", ":", "\n", "\t\t", "if", "len", "(", "term", ")", ">", "0", ":", "\n", "\t\t\t", "keywords", ".", "append", "(", "' '", ".", "join", "(", "term", ")", ")", "\n", "", "", "return", "keywords", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.normalise": [[58, 64], ["lemmatizer.lemmatize.lower", "lemmatizer.lemmatize"], "function", ["None"], ["def", "normalise", "(", "word", ")", ":", "\n", "    ", "\"\"\"Normalises words to lowercase and stems and lemmatizes it.\"\"\"", "\n", "word", "=", "word", ".", "lower", "(", ")", "\n", "#    word = stemmer.stem_word(word)", "\n", "word", "=", "lemmatizer", ".", "lemmatize", "(", "word", ")", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.acceptable_word": [[65, 70], ["bool", "len", "word.lower"], "function", ["None"], ["", "def", "acceptable_word", "(", "word", ")", ":", "\n", "    ", "\"\"\"Checks conditions for acceptable word: length, stopword.\"\"\"", "\n", "accepted", "=", "bool", "(", "2", "<=", "len", "(", "word", ")", "<=", "40", "\n", "and", "word", ".", "lower", "(", ")", "not", "in", "stopwords", ")", "\n", "return", "accepted", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.leaves": [[71, 75], ["tree.subtrees", "subtree.leaves"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.leaves"], ["", "def", "leaves", "(", "tree", ")", ":", "\n", "    ", "\"\"\"Finds NP (nounphrase) leaf nodes of a chunk tree.\"\"\"", "\n", "for", "subtree", "in", "tree", ".", "subtrees", "(", "filter", "=", "lambda", "t", ":", "t", ".", "node", "==", "'NP'", ")", ":", "\n", "        ", "yield", "subtree", ".", "leaves", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.get_terms": [[76, 81], ["sentence_keywords.leaves", "sentence_keywords.normalise", "sentence_keywords.acceptable_word"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.leaves", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.normalise", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.acceptable_word"], ["", "", "def", "get_terms", "(", "tree", ")", ":", "\n", "    ", "for", "leaf", "in", "leaves", "(", "tree", ")", ":", "\n", "        ", "term", "=", "[", "normalise", "(", "word", ")", "for", "word", ",", "tag", "in", "leaf", "\n", "if", "acceptable_word", "(", "word", ")", "]", "\n", "yield", "term", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.keywords_ngrams": [[84, 108], ["NLP.phrase_splitting", "NLP.word_splitting", "range", "range", "len", "phrase.lower", "len", "sentence_keywords.word_checking_stop", "stop_pos.append", "len", "reversed", "range", "len", "ngrams.append", "min", "len"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence.phrase_splitting", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.word_splitting", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.word_checking_stop"], ["", "", "def", "keywords_ngrams", "(", "sentence", ")", ":", "\n", "\t", "ngrams", "=", "[", "]", "\n", "phrases", "=", "NLP_sent", ".", "phrase_splitting", "(", "sentence", ")", "\n", "for", "phrase", "in", "phrases", ":", "\n", "\t\t", "if", "len", "(", "phrase", ")", "<=", "2", ":", "# e.g.'ii'", "\n", "\t\t\t", "continue", "\n", "", "words", "=", "NLP_word", ".", "word_splitting", "(", "phrase", ".", "lower", "(", ")", ")", "\n", "stop_pos", "=", "[", "]", "# record all positions of stop  or non-preferred (POS) words in the phrase to increase efficiency", "\n", "for", "i", "in", "range", "(", "len", "(", "words", ")", ")", ":", "\n", "\t\t\t", "type", "=", "word_checking_stop", "(", "words", "[", "i", "]", ")", "\n", "stop_pos", ".", "append", "(", "type", ")", "\n", "\n", "# Generate n-gram", "\n", "", "for", "i", "in", "range", "(", "len", "(", "words", ")", ")", ":", "\n", "\t\t\t", "if", "0", "<", "stop_pos", "[", "i", "]", ":", "\n", "\t\t\t\t", "continue", "\n", "", "for", "j", "in", "reversed", "(", "range", "(", "i", "+", "1", ",", "min", "(", "len", "(", "words", ")", ",", "i", "+", "4", ")", "+", "1", ")", ")", ":", "# the maximum length of a ngram is 5", "\n", "\t\t\t\t", "if", "0", "<", "stop_pos", "[", "j", "-", "1", "]", ":", "# check validity", "\n", "\t\t\t\t\t", "continue", "\n", "", "ngram", "=", "' '", ".", "join", "(", "words", "[", "i", ":", "j", "]", ")", "\n", "if", "len", "(", "ngram", ")", ">", "2", ":", "# at least two characters", "\n", "\t\t\t\t\t", "ngrams", ".", "append", "(", "ngram", ")", "\n", "\n", "", "", "", "", "return", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.keywords_ngrams_reverse": [[110, 138], ["re.compile", "re.compile.split", "reversed", "re.compile", "re.compile.split", "range", "reversed", "len", "len", "sentence_keywords.word_checking_stop", "stop_pos.append", "range", "range", "len", "max", "len", "ngrams.append"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.word_checking_stop"], ["", "def", "keywords_ngrams_reverse", "(", "sentence", ")", ":", "\n", "\t", "ngrams", "=", "[", "]", "\n", "splitter", "=", "re", ".", "compile", "(", "'[\\(\\){}\\[\\]?!,:;]'", ")", "\n", "phrases", "=", "splitter", ".", "split", "(", "sentence", ")", "\n", "for", "phrase", "in", "reversed", "(", "phrases", ")", ":", "\n", "\t\t", "if", "len", "(", "phrase", ")", "<=", "1", ":", "# e.g.'ii'", "\n", "\t\t\t", "continue", "\n", "# \twords = NLP_word.word_splitting(sentence.lower()) # method 1: NLP", "\n", "", "splitter", "=", "re", ".", "compile", "(", "'[^a-zA-Z0-9_-]'", ")", "# method 2: splitters", "\n", "words", "=", "splitter", ".", "split", "(", "phrase", ")", "\n", "\n", "stop_pos", "=", "[", "]", "# record all positions of stop  or non-preferred (POS) words in the phrase to increase efficiency", "\n", "for", "i", "in", "range", "(", "len", "(", "words", ")", ")", ":", "\n", "\t\t\t", "type", "=", "word_checking_stop", "(", "words", "[", "i", "]", ")", "\n", "stop_pos", ".", "append", "(", "type", ")", "\n", "\n", "# Generate n-gram", "\n", "", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "words", ")", ")", ")", ":", "\n", "\t\t\t", "if", "0", "<", "stop_pos", "[", "i", "]", ":", "\n", "\t\t\t\t", "continue", "\n", "", "for", "j", "in", "range", "(", "max", "(", "0", ",", "i", "-", "98", ")", ",", "i", "+", "1", ")", ":", "# the maximum length of a ngram is 10", "\n", "\t\t\t\t", "if", "0", "<", "stop_pos", "[", "j", "]", ":", "# check validity", "\n", "\t\t\t\t\t", "continue", "\n", "", "ngram", "=", "' '", ".", "join", "(", "words", "[", "j", ":", "i", "+", "1", "]", ")", "\n", "if", "len", "(", "ngram", ")", ">", "1", ":", "# at least two characters", "\n", "\t\t\t\t\t", "ngrams", ".", "append", "(", "ngram", ")", "\n", "\n", "", "", "", "", "return", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.sentence_keywords.word_checking_stop": [[141, 154], ["len", "word[].isdigit"], "function", ["None"], ["def", "word_checking_stop", "(", "word", ")", ":", "\n", "\t", "if", "len", "(", "word", ")", "<", "1", ":", "\n", "\t\t", "return", "1", "\n", "", "elif", "word", "[", "0", "]", "in", "string", ".", "punctuation", ":", "\n", "\t\t", "return", "2", "\n", "", "elif", "word", "[", "0", "]", ".", "isdigit", "(", ")", ":", "\n", "\t\t", "return", "3", "\n", "", "elif", "word", "in", "stopwords", ":", "\n", "\t\t", "return", "4", "\n", "", "elif", "word", "in", "add_stopwords", ":", "\n", "\t\t", "return", "5", "\n", "", "else", ":", "\n", "\t\t", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.word_splitting": [[10, 13], ["nltk.word_tokenize"], "function", ["None"], ["def", "word_splitting", "(", "phrase", ")", ":", "\n", "\t", "words", "=", "word_tokenize", "(", "phrase", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.word_pos_tagging": [[16, 19], ["nltk.pos_tag"], "function", ["None"], ["", "def", "word_pos_tagging", "(", "words", ")", ":", "\n", "\t", "pos", "=", "pos_tag", "(", "words", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.words_counting": [[22, 24], ["len", "sentence.split"], "function", ["None"], ["", "def", "words_counting", "(", "sentence", ")", ":", "\n", "\t", "return", "len", "(", "sentence", ".", "split", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.NLP.word.words_counting2": [[27, 36], ["re.compile", "re.compile.split", "len", "singleWord.strip", "len", "words.append"], "function", ["None"], ["", "def", "words_counting2", "(", "sentence", ")", ":", "\n", "\t", "splitter", "=", "re", ".", "compile", "(", "'[^a-zA-Z0-9\\\\+\\\\-]'", ")", "\n", "words", "=", "[", "]", "\n", "for", "singleWord", "in", "splitter", ".", "split", "(", "sentence", ")", ":", "\n", "\t\t", "currWord", "=", "singleWord", ".", "strip", "(", ")", "\n", "if", "len", "(", "currWord", ")", ">", "1", ":", "# at least 2 character", "\n", "\t\t\t", "words", ".", "append", "(", "currWord", ")", "\n", "\n", "", "", "return", "len", "(", "words", ")", "", "", ""]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.file_exist": [[15, 21], ["open"], "function", ["None"], ["def", "file_exist", "(", "fname", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "open", "(", "fname", ",", "'r'", ")", "\n", "return", "True", "\n", "", "except", "IOError", ":", "\n", "\t\t", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.mkdir": [[24, 33], ["os.makedirs", "log.error"], "function", ["None"], ["", "", "def", "mkdir", "(", "dirname", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "except", "OSError", ":", "\n", "\t\t", "pass", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "log", ".", "error", "(", "e", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.mk_new_dir": [[36, 46], ["os.makedirs", "shutil.rmtree", "os.makedirs", "log.error"], "function", ["None"], ["", "def", "mk_new_dir", "(", "dirname", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "except", "OSError", ":", "\n", "\t\t", "shutil", ".", "rmtree", "(", "dirname", ")", "\n", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "log", ".", "error", "(", "e", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.fcopy": [[49, 56], ["shutil.copy2", "log.error"], "function", ["None"], ["", "def", "fcopy", "(", "source", ",", "destination", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "shutil", ".", "copy2", "(", "source", ",", "destination", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "log", ".", "error", "(", "e", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.flist": [[59, 71], ["os.chdir", "glob.glob", "data.append", "log.error", "f.strip"], "function", ["None"], ["", "def", "flist", "(", "directory", ",", "ext", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "os", ".", "chdir", "(", "directory", ")", "\n", "if", "ext", "[", "0", ":", "2", "]", "!=", "'*.'", ":", "\n", "\t\t\t", "ext", "=", "'*.'", "+", "ext", "\n", "", "data", "=", "[", "]", "\n", "for", "f", "in", "glob", ".", "glob", "(", "ext", ")", ":", "\n", "\t\t\t", "data", ".", "append", "(", "f", ".", "strip", "(", ")", ")", "\n", "", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "log", ".", "error", "(", "e", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_file": [[77, 101], ["open", "open.close", "set", "open.read", "log.error", "len", "fid.read.add", "line.strip", "len", "fid.read.append", "line.strip"], "function", ["None"], ["", "", "def", "read_file", "(", "filename", ",", "struct", "=", "1", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "fid", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "if", "struct", "==", "2", ":", "\n", "# set", "\n", "\t\t\t", "data", "=", "set", "(", ")", "\n", "for", "line", "in", "fid", ":", "\n", "\t\t\t\t", "if", "len", "(", "line", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "data", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "", "elif", "struct", "==", "1", ":", "\n", "# default - list", "\n", "\t\t\t", "data", "=", "[", "]", "\n", "for", "line", "in", "fid", ":", "\n", "\t\t\t\t", "if", "len", "(", "line", ")", ">", "0", ":", "\n", "\t\t\t\t\t", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "", "else", ":", "\n", "\t\t\t", "data", "=", "fid", ".", "read", "(", ")", "\n", "\n", "", "fid", ".", "close", "(", ")", "\n", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_file_tokenized": [[104, 117], ["open", "open.close", "line.strip.strip", "data.append", "line.strip.split", "log.error"], "function", ["None"], ["", "", "def", "read_file_tokenized", "(", "filename", ",", "skip", "=", "' '", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "data", "=", "[", "]", "\n", "fid", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "for", "line", "in", "fid", ":", "\n", "\t\t\t", "line", "=", "line", ".", "strip", "(", ")", "\n", "data", ".", "append", "(", "line", ".", "split", "(", "skip", ")", ")", "\n", "", "fid", ".", "close", "(", ")", "\n", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_text": [[119, 131], ["open", "open.read", "data.replace().replace.replace().replace", "open.close", "data.replace().replace.replace", "log.error", "data.replace().replace.split"], "function", ["None"], ["", "", "def", "read_text", "(", "filename", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "fid", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "data", "=", "fid", ".", "read", "(", ")", "\n", "data", "=", "data", ".", "replace", "(", "'\\n'", ",", "' '", ")", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "data", "=", "' '", ".", "join", "(", "data", ".", "split", "(", ")", ")", ".", "strip", "(", ")", "\n", "fid", ".", "close", "(", ")", "\n", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv": [[133, 144], ["csv.reader", "open", "data.append", "log.error"], "function", ["None"], ["", "", "def", "read_csv", "(", "filename", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "reader", "=", "csv", ".", "reader", "(", "open", "(", "filename", ",", "\"r\"", ")", ")", "\n", "data", "=", "[", "]", "\n", "for", "r", "in", "reader", ":", "\n", "\t\t\t", "data", ".", "append", "(", "r", ")", "\n", "", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv_as_dict": [[148, 159], ["csv.reader", "open", "r[].strip", "log.error", "r[].strip"], "function", ["None"], ["", "", "def", "read_csv_as_dict", "(", "filename", ",", "iKey", "=", "0", ",", "iData", "=", "1", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "reader", "=", "csv", ".", "reader", "(", "open", "(", "filename", ",", "\"r\"", ")", ")", "\n", "data", "=", "{", "}", "\n", "for", "r", "in", "reader", ":", "\n", "\t\t\t", "data", "[", "r", "[", "iKey", "]", ".", "strip", "(", ")", "]", "=", "r", "[", "iData", "]", ".", "strip", "(", ")", "\n", "", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv_as_dict_with_multiple_items": [[161, 173], ["csv.reader", "open", "len", "log.error", "r[].strip", "len"], "function", ["None"], ["", "", "def", "read_csv_as_dict_with_multiple_items", "(", "filename", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "reader", "=", "csv", ".", "reader", "(", "open", "(", "filename", ",", "\"r\"", ")", ")", "\n", "data", "=", "{", "}", "\n", "for", "r", "in", "reader", ":", "\n", "\t\t\t", "if", "len", "(", "r", ")", ">=", "2", ":", "\n", "\t\t\t\t", "data", "[", "r", "[", "0", "]", ".", "strip", "(", ")", "]", "=", "r", "[", "1", ":", "len", "(", "r", ")", "]", "\n", "", "", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_obj": [[175, 183], ["pickle.load", "open", "log.error"], "function", ["None"], ["", "", "def", "read_obj", "(", "filename", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "data", "=", "pickle", ".", "load", "(", "open", "(", "filename", ",", "'rb'", ")", ")", "\n", "return", "data", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_csv": [[188, 198], ["csv.writer", "open", "csv.writer.writerow", "log.error"], "function", ["None"], ["", "", "def", "write_csv", "(", "filename", ",", "data", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "doc", "=", "csv", ".", "writer", "(", "open", "(", "filename", ",", "'wb'", ")", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "quoting", "=", "csv", ".", "QUOTE_ALL", ")", "\n", "for", "d", "in", "data", ":", "\n", "\t\t\t", "doc", ".", "writerow", "(", "d", ")", "\n", "", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_csv_list": [[201, 210], ["csv.writer", "csv.writer.writerows", "open", "log.error"], "function", ["None"], ["", "", "def", "write_csv_list", "(", "filename", ",", "data", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "doc", "=", "csv", ".", "writer", "(", "open", "(", "filename", ",", "'wb'", ")", ")", "\n", "doc", ".", "writerows", "(", "data", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_file": [[213, 225], ["open", "open.close", "open.write", "log.error"], "function", ["None"], ["", "", "def", "write_file", "(", "filename", ",", "data", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "fid", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "for", "d", "in", "data", ":", "\n", "#fid.write('%s\\n' % d.encode('utf-8'))", "\n", "\t\t\t", "fid", ".", "write", "(", "'%s\\n'", "%", "d", ")", "\n", "", "fid", ".", "close", "(", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_text": [[227, 237], ["open", "open.write", "open.close", "data.encode", "log.error"], "function", ["None"], ["", "", "def", "write_text", "(", "filename", ",", "data", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "fid", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "fid", ".", "write", "(", "'%s'", "%", "data", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "fid", ".", "close", "(", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_dict_to_csv": [[241, 251], ["open", "csv.writer().writerows", "open.close", "csv.writer", "log.error", "data.iteritems"], "function", ["None"], ["", "", "def", "write_dict_to_csv", "(", "filename", ",", "data", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "csv", ".", "writer", "(", "f", ")", ".", "writerows", "(", "(", "k", ",", ")", "+", "v", "for", "k", ",", "v", "in", "data", ".", "iteritems", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_dict_to_csv_2items": [[253, 260], ["open", "csv.writer", "data.iteritems", "open.close", "csv.writer.writerow"], "function", ["None"], ["", "", "def", "write_dict_to_csv_2items", "(", "filename", ",", "data", ")", ":", "\n", "\t", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "w", "=", "csv", ".", "writer", "(", "f", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "iteritems", "(", ")", ":", "\n", "\t   ", "w", ".", "writerow", "(", "[", "key", ",", "value", "[", "0", "]", ",", "value", "[", "1", "]", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_obj": [[263, 271], ["pickle.dump", "open", "log.error"], "function", ["None"], ["", "def", "write_obj", "(", "filename", ",", "data", ",", "logout", "=", "True", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "data", ",", "open", "(", "filename", ",", "'wb'", ")", ")", "\n", "return", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "if", "logout", "is", "True", ":", "\n", "\t\t\t", "log", ".", "error", "(", "e", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.load_files": [[276, 297], ["fin.endswith", "file.read_file", "fin.endswith", "file.read_csv", "os.walk", "os.path.join", "filename.endswith", "read_csv.extend", "file.read_file", "filename.endswith", "file.read_csv"], "function", ["home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_file", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_file", "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_csv"], ["", "", "def", "load_files", "(", "fin", ")", ":", "\n", "\t", "texts", "=", "[", "]", "\n", "# judge a single file or a directory", "\n", "if", "fin", ".", "endswith", "(", "'.txt'", ")", ":", "\n", "\t\t", "texts", "=", "read_file", "(", "fin", ",", "1", ",", "False", ")", "\n", "", "elif", "fin", ".", "endswith", "(", "'.csv'", ")", ":", "\n", "\t\t", "texts", "=", "read_csv", "(", "fin", ",", "False", ")", "\n", "\n", "", "else", ":", "# is a directory", "\n", "\t\t", "for", "root", ",", "dir", ",", "files", "in", "os", ".", "walk", "(", "fin", ")", ":", "\n", "\t\t   ", "for", "filename", "in", "files", ":", "\n", "\t\t     ", "f", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "'.txt'", ")", ":", "\n", "\t\t     \t", "text", "=", "read_file", "(", "f", ",", "1", ",", "False", ")", "\n", "", "elif", "filename", ".", "endswith", "(", "'.csv'", ")", ":", "\n", "\t     \t\t", "text", "=", "read_csv", "(", "f", ",", "False", ")", "\n", "", "else", ":", "\n", "\t     \t\t", "continue", "\n", "", "texts", ".", "extend", "(", "text", ")", "\n", "\n", "", "", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.read_settings": [[300, 317], ["open", "open.close", "line.strip.strip", "line.strip.startswith", "map", "line.strip.split"], "function", ["None"], ["", "def", "read_settings", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Read the content of filename and put flags and values in a\n    dictionary. Each line in the file is either an empty line, a line\n    starting with '#' or a attribute-value pair separated by a '='\n    sign. Returns the dictionary.\"\"\"", "\n", "file", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "settings", "=", "{", "}", "\n", "for", "line", "in", "file", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "not", "line", ":", "\n", "            ", "continue", "\n", "", "if", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "            ", "continue", "\n", "", "(", "flag", ",", "value", ")", "=", "map", "(", "string", ".", "strip", ",", "line", ".", "split", "(", "'='", ")", ")", "\n", "settings", "[", "flag", "]", "=", "value", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "settings", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.file.write_settings": [[318, 326], ["os.rename", "open", "settings.items", "open.close", "open.write"], "function", ["None"], ["", "def", "write_settings", "(", "settings", ",", "filename", ")", ":", "\n", "    ", "\"\"\"Write a dictionary to a file, with one line per entry and with the\n    key and value separated by an '=' sign.\"\"\"", "\n", "os", ".", "rename", "(", "filename", ",", "filename", "+", "'.org'", ")", "\n", "file", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "for", "(", "flag", ",", "value", ")", "in", "settings", ".", "items", "(", ")", ":", "\n", "        ", "file", ".", "write", "(", "\"%s=%s\\n\"", "%", "(", "flag", ",", "value", ")", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.log.ext_print": [[7, 11], ["datetime.datetime.now", "str"], "function", ["None"], ["def", "ext_print", "(", "name", ")", ":", "\n", "\t", "tnow", "=", "datetime", ".", "now", "(", ")", "\n", "name", "=", "'['", "+", "str", "(", "tnow", ")", "+", "'] '", "+", "name", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.NYUMedML_DeepEHR.W_utility.log.strd_logger": [[22, 31], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "strd_logger", "(", "name", ")", ":", "\n", "\t", "log", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "log", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "#formatter = logging.Formatter('[%(asctime)s %(levelname)s] %(message)s', \"%Y-%m-%d %H:%M:%S\")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s.%(msecs)d %(levelname)s] %(message)s'", ",", "'%Y-%m-%d,%H:%M:%S'", ")", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "log", ".", "addHandler", "(", "handler", ")", "\n", "return", "log", "\n", "", ""]]}