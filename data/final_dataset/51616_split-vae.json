{"home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.__init__": [[13, 31], ["tensorflow.eye", "augmentation.Augmentator.gaussian_kernel", "tensorflow.tile", "tensorflow.eye"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.gaussian_kernel"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "size", "=", "1", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "type", "==", "'scramble'", ":", "\n", "            ", "self", ".", "augment", "=", "self", ".", "scramble", "\n", "", "elif", "type", "==", "'mix_scramble'", ":", "\n", "            ", "self", ".", "augment", "=", "self", ".", "mix_scramble", "\n", "", "elif", "type", "==", "'blur'", ":", "\n", "            ", "self", ".", "augment", "=", "self", ".", "gaussian_blur", "\n", "self", ".", "pointwise_filter", "=", "tf", ".", "eye", "(", "3", ",", "batch_shape", "=", "[", "1", ",", "1", "]", ")", "\n", "\n", "", "elif", "type", "==", "'high_low_pass'", ":", "\n", "            ", "self", ".", "augment", "=", "self", ".", "high_low_pass", "\n", "self", ".", "kernel", "=", "self", ".", "gaussian_kernel", "(", "size", ",", "mean", ",", "std", ")", "\n", "self", ".", "kernel", "=", "tf", ".", "tile", "(", "self", ".", "kernel", "[", ":", ",", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "3", ",", "1", "]", ")", "\n", "self", ".", "pointwise_filter", "=", "tf", ".", "eye", "(", "3", ",", "batch_shape", "=", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "paddings", "=", "[", "[", "size", ",", "size", "]", ",", "[", "size", ",", "size", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "", "elif", "type", "==", "'no_op'", ":", "\n", "            ", "self", ".", "augment", "=", "self", ".", "no_op", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.gaussian_kernel": [[33, 39], ["tensorflow_probability.distributions.Normal", "tensorflow_probability.distributions.Normal.prob", "tensorflow.einsum", "tensorflow.range", "tensorflow.reduce_sum"], "methods", ["None"], ["", "", "def", "gaussian_kernel", "(", "self", ",", "size", ",", "mean", ",", "std", ")", ":", "\n", "        ", "\"\"\"Makes 2D gaussian Kernel for convolution.\"\"\"", "\n", "d", "=", "tfp", ".", "distributions", ".", "Normal", "(", "mean", ",", "std", ")", "\n", "vals", "=", "d", ".", "prob", "(", "tf", ".", "range", "(", "start", "=", "-", "size", ",", "limit", "=", "size", "+", "1", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "gauss_kernel", "=", "tf", ".", "einsum", "(", "'i,j->ij'", ",", "vals", ",", "vals", ")", "\n", "return", "gauss_kernel", "/", "tf", ".", "reduce_sum", "(", "gauss_kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.get_random_patch_size": [[40, 42], ["numpy.random.choice"], "methods", ["None"], ["", "def", "get_random_patch_size", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.scramble": [[43, 58], ["tensorflow.image.extract_patches", "tensorflow.reshape", "tensorflow.random.shuffle", "tensorflow.split", "tensorflow.concat", "tensorflow.convert_to_tensor", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.unstack"], "methods", ["None"], ["", "def", "scramble", "(", "self", ",", "x", ")", ":", "\n", "# assume square patch", "\n", "        ", "n_row", ",", "n_col", ",", "n_channel", "=", "x", ".", "shape", "\n", "n_patch", "=", "n_row", "*", "n_col", "//", "(", "self", ".", "size", "**", "2", ")", "\n", "patches", "=", "tf", ".", "image", ".", "extract_patches", "(", "tf", ".", "expand_dims", "(", "x", ",", "0", ")", ",", "sizes", "=", "[", "1", ",", "self", ".", "size", ",", "self", ".", "size", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "self", ".", "size", ",", "self", ".", "size", ",", "1", "]", ",", "rates", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "patches", "=", "tf", ".", "reshape", "(", "patches", ",", "[", "n_patch", ",", "self", ".", "size", ",", "self", ".", "size", ",", "n_channel", "]", ")", "\n", "patches", "=", "tf", ".", "random", ".", "shuffle", "(", "patches", ")", "\n", "# rand_idx = tf.reshape(tf.random.shuffle(tf.range(0,n_patch)),[n_patch])", "\n", "# patches = tf.gather(patches, rand_idx, axis=0)", "\n", "rows", "=", "tf", ".", "split", "(", "patches", ",", "n_col", "//", "self", ".", "size", ",", "axis", "=", "0", ")", "\n", "rows", "=", "[", "tf", ".", "concat", "(", "tf", ".", "unstack", "(", "x", ")", ",", "axis", "=", "1", ")", "for", "x", "in", "rows", "]", "\n", "x_aug", "=", "tf", ".", "concat", "(", "rows", ",", "axis", "=", "0", ")", "\n", "\n", "x_aug", "=", "tf", ".", "convert_to_tensor", "(", "x_aug", ")", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_aug", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.mix_scramble": [[59, 82], ["augmentation.Augmentator.get_random_patch_size", "print", "print", "tensorflow.image.extract_patches", "tensorflow.reshape", "tensorflow.random.shuffle", "tensorflow.split", "tensorflow.concat", "tensorflow.convert_to_tensor", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.unstack"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.get_random_patch_size"], ["", "def", "mix_scramble", "(", "self", ",", "x", ")", ":", "\n", "# assume square patch", "\n", "# sizes = tf.convert_to_tensor([1,2,4,8])", "\n", "# idx = tf.random.categorical([tf.ones_like(sizes)], 1)", "\n", "# print(idx)", "\n", "# patch_size = int(sizes[idx[0][0]])", "\n", "        ", "patch_size", "=", "self", ".", "get_random_patch_size", "(", ")", "\n", "print", "(", "'Patch size:'", ",", "patch_size", ")", "\n", "window", "=", "[", "1", ",", "patch_size", ",", "patch_size", ",", "1", "]", "\n", "print", "(", "'Window:'", ",", "window", ")", "\n", "\n", "n_row", ",", "n_col", ",", "n_channel", "=", "x", ".", "shape", "\n", "n_patch", "=", "n_row", "*", "n_col", "//", "(", "patch_size", "**", "2", ")", "\n", "patches", "=", "tf", ".", "image", ".", "extract_patches", "(", "tf", ".", "expand_dims", "(", "x", ",", "0", ")", ",", "sizes", "=", "window", ",", "strides", "=", "window", ",", "rates", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "patches", "=", "tf", ".", "reshape", "(", "patches", ",", "[", "n_patch", ",", "patch_size", ",", "patch_size", ",", "n_channel", "]", ")", "\n", "patches", "=", "tf", ".", "random", ".", "shuffle", "(", "patches", ")", "\n", "rows", "=", "tf", ".", "split", "(", "patches", ",", "n_col", "//", "patch_size", ",", "axis", "=", "0", ")", "\n", "rows", "=", "[", "tf", ".", "concat", "(", "tf", ".", "unstack", "(", "x", ")", ",", "axis", "=", "1", ")", "for", "x", "in", "rows", "]", "\n", "x_aug", "=", "tf", ".", "concat", "(", "rows", ",", "axis", "=", "0", ")", "\n", "\n", "x_aug", "=", "tf", ".", "convert_to_tensor", "(", "x_aug", ")", "\n", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_aug", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.gaussian_blur": [[83, 95], ["tensorflow.random.uniform", "tensorflow.random.uniform", "augmentation.Augmentator.gaussian_kernel", "tensorflow.tile", "tensorflow.convert_to_tensor", "tensorflow.nn.separable_conv2d", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.pad"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.gaussian_kernel"], ["", "def", "gaussian_blur", "(", "self", ",", "x", ")", ":", "\n", "#create random gaussian blur filter", "\n", "        ", "mean", "=", "0", "\n", "std", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ",", "minval", "=", "5", ",", "maxval", "=", "10", ",", "dtype", "=", "tf", ".", "float32", ")", "# std [5-10]", "\n", "size", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "]", ",", "minval", "=", "3", ",", "maxval", "=", "7", ",", "dtype", "=", "tf", ".", "int32", ")", "# size [7-15]", "\n", "\n", "self", ".", "kernel", "=", "self", ".", "gaussian_kernel", "(", "size", ",", "mean", ",", "std", ")", "\n", "self", ".", "kernel", "=", "tf", ".", "tile", "(", "self", ".", "kernel", "[", ":", ",", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "3", ",", "1", "]", ")", "\n", "self", ".", "paddings", "=", "tf", ".", "convert_to_tensor", "(", "[", "[", "size", ",", "size", "]", ",", "[", "size", ",", "size", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x_aug", "=", "tf", ".", "nn", ".", "separable_conv2d", "(", "tf", ".", "expand_dims", "(", "tf", ".", "pad", "(", "x", ",", "self", ".", "paddings", ",", "'SYMMETRIC'", ")", ",", "0", ")", ",", "self", ".", "kernel", ",", "self", ".", "pointwise_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "x_aug", "=", "tf", ".", "squeeze", "(", "x_aug", ")", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_aug", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.high_low_pass": [[97, 102], ["tensorflow.nn.separable_conv2d", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.pad"], "methods", ["None"], ["", "def", "high_low_pass", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_low", "=", "tf", ".", "nn", ".", "separable_conv2d", "(", "tf", ".", "expand_dims", "(", "tf", ".", "pad", "(", "x", ",", "self", ".", "paddings", ",", "'SYMMETRIC'", ")", ",", "0", ")", ",", "self", ".", "kernel", ",", "self", ".", "pointwise_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "x_low", "=", "tf", ".", "squeeze", "(", "x_low", ")", "\n", "x_high", "=", "x", "-", "x_low", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_high", ",", "x_low", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.None.augmentation.Augmentator.no_op": [[103, 105], ["None"], "methods", ["None"], ["", "def", "no_op", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.visualizer.reconstruction_test": [[14, 82], ["test_dataset.take().shuffle", "min", "model", "matplotlib.subplots", "ax[].set_xticks", "ax[].set_yticks", "ax[].set_xticks", "ax[].set_yticks", "ax[].set_xticks", "ax[].set_yticks", "tensorflow.reshape", "tensorflow.reshape", "numpy.empty", "numpy.empty", "numpy.empty", "range", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "tensorflow.round", "x_recon[].numpy().reshape", "obj_recon[].numpy().reshape", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "matplotlib.savefig", "matplotlib.savefig", "test_dataset.take", "tensorflow.sigmoid", "x_recon[].numpy", "obj_recon[].numpy", "tensorflow.nn.sigmoid", "tensorflow.ones"], "function", ["None"], ["def", "reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "#Get a batch of test images", "\n", "\t", "test_ds", "=", "test_dataset", ".", "take", "(", "n", ")", ".", "shuffle", "(", "n", ",", "seed", "=", "1", ")", "\n", "for", "test_data", "in", "test_ds", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "x_test", ")", "\n", "\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "n", ",", "w", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "n", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "n", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "# num_channel = x_recon.shape[-1]", "\n", "\n", "obj_recon", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "channel", "]", "\n", "obj_alpha", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", "channel", ":", "]", "\n", "\n", "z_depth", "=", "tf", ".", "reshape", "(", "z_depth", ",", "[", "n", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "tf", ".", "round", "(", "tf", ".", "sigmoid", "(", "z_pres_logits", ")", ")", ",", "[", "n", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "canvas", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "canvas_weighted", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "canvas_weights_only", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "n", ",", "channel", ")", ")", "# only weights of that part", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_weights_only", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "canvas_weights_only", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "\n", "canvas", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "obj_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weighted", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "(", "obj_recon", "[", "i", "]", "*", "obj_alpha", "[", "i", "]", "*", "z_pres", "[", "i", "]", "*", "tf", ".", "nn", ".", "sigmoid", "(", "-", "z_depth", "[", "i", "]", ")", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weights_only", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", "0", "]", "=", "(", "tf", ".", "ones", "(", "shape", "=", "obj_alpha", "[", "i", "]", ".", "shape", ")", "*", "z_pres", "[", "i", "]", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ")", ")", "# *tf.nn.sigmoid(-z_depth[i])", "\n", "\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'reconstruction'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weighted", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'reconstruction weighted'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weights_only", ")", ",", "cmap", "=", "'inferno'", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "'weights'", ")", "\n", "ax", "[", "2", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "2", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_test_spair.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_test'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "# plt.close()", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.visualizer.reconstruction_bbox": [[84, 138], ["test_dataset.take().shuffle", "min", "model", "tensorflow.reshape", "tensorflow.constant", "tensorflow.image.draw_bounding_boxes", "tensorflow.image.draw_bounding_boxes", "numpy.empty", "range", "matplotlib.imshow", "tensorflow.round", "img_w_bbox[].numpy().reshape", "x_recon_w_bbox[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "test_dataset.take", "tensorflow.sigmoid", "img_w_bbox[].numpy", "x_recon_w_bbox[].numpy"], "function", ["None"], ["", "def", "reconstruction_bbox", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "#Get a batch of test images", "\n", "\t", "test_ds", "=", "test_dataset", ".", "take", "(", "n", ")", ".", "shuffle", "(", "n", ",", "seed", "=", "1", ")", "\n", "for", "test_data", "in", "test_ds", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "x_test", ")", "\n", "\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "# f, ax = plt.subplots(1, 1)", "\n", "# ax[0].set_xticks(np.arange(0, h*n, w))", "\n", "# ax[0].set_yticks(np.arange(0, h*(num_cells+2), w))", "\n", "# num_channel = x_recon.shape[-1]", "\n", "# print(obj_bbox_mask.numpy())", "\n", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "tf", ".", "round", "(", "tf", ".", "sigmoid", "(", "z_pres_logits", ")", ")", ",", "[", "n", ",", "num_cells", ",", "1", "]", ")", "\n", "colors", "=", "tf", ".", "constant", "(", "[", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", "]", ")", "\n", "obj_bbox_mask", "=", "obj_bbox_mask", "*", "z_pres", "\n", "x_recon_w_bbox", "=", "tf", ".", "image", ".", "draw_bounding_boxes", "(", "x_recon", ",", "obj_bbox_mask", ",", "colors", ")", "\n", "img_w_bbox", "=", "tf", ".", "image", ".", "draw_bounding_boxes", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "obj_bbox_mask", ",", "colors", ")", "\n", "\n", "\n", "canvas", "=", "np", ".", "empty", "(", "(", "h", "*", "3", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "canvas", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "img_w_bbox", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "# canvas[h*2:h*3, i*w:(i+1)*w, :] = x_recon[i].numpy().reshape((h,w,channel))", "\n", "canvas", "[", "h", "*", "2", ":", "h", "*", "3", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_recon_w_bbox", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "\n", "\n", "# ax[0].imshow(np.squeeze(canvas),cmap='gray')", "\n", "# ax[0].set_title('reconstruction')", "\n", "# ax[0].grid(b=True, which='major', color='#ffffff', linestyle='-')", "\n", "# ax[0].tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=False)", "\n", "\n", "", "plt", ".", "imshow", "(", "canvas", ")", "\n", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_bbox.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_bbox'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "# plt.close()", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.visualizer.glimpses_reconstruction_test": [[140, 203], ["min", "model", "matplotlib.subplots", "ax[].set_xticks", "ax[].set_yticks", "ax[].set_xticks", "ax[].set_yticks", "ax[].set_xticks", "ax[].set_yticks", "numpy.empty", "numpy.empty", "numpy.zeros", "range", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "all_glimpses[].numpy().reshape", "obj_recon_unnorm[].numpy().reshape", "obj_recon_alpha[].numpy().reshape", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "matplotlib.savefig", "matplotlib.savefig", "all_glimpses[].numpy", "obj_recon_unnorm[].numpy", "obj_recon_alpha[].numpy"], "function", ["None"], ["", "def", "glimpses_reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "# Glimpses", "\n", "\t", "for", "test_data", "in", "test_dataset", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "x_test", ")", "\n", "\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "object_size", "=", "obj_recon_alpha", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "ax", "[", "2", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "# plot glimpses", "\n", "canvas_glimpses", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "canvas_glimpses_alpha", "=", "np", ".", "zeros", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_glimpses", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "all_glimpses", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "obj_recon_unnorm", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "canvas_glimpses_alpha", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", "]", "=", "obj_recon_alpha", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ")", ")", "\n", "\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'Glimpses'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses_recon", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'Glimpses reconstruction'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses_alpha", ")", ",", "cmap", "=", "'viridis'", ")", "#,cmap='gray'", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "'Glimpses alpha'", ")", "\n", "ax", "[", "2", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "2", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "# plt.close()", "\n", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.visualizer.glimpses_local_reconstruction_test": [[204, 258], ["min", "model", "matplotlib.subplots", "ax[].set_xticks", "ax[].set_yticks", "ax[].set_xticks", "ax[].set_yticks", "numpy.empty", "numpy.empty", "range", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "ax[].imshow", "ax[].set_title", "ax[].grid", "ax[].tick_params", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "x_hat[].numpy().reshape", "x_hat_recon[].numpy().reshape", "numpy.squeeze", "numpy.squeeze", "matplotlib.savefig", "matplotlib.savefig", "x_hat[].numpy", "x_hat_recon[].numpy"], "function", ["None"], ["", "def", "glimpses_local_reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "# Glimpses", "\n", "\t", "for", "test_data", "in", "test_dataset", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ",", "x_hat", ")", "=", "model", "(", "x_test", ")", "\n", "\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "object_size", "=", "obj_recon_alpha", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "2", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "# plot glimpses", "\n", "canvas_glimpses", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_glimpses", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "x_hat", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "x_hat_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'Glimpses'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses_recon", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'Glimpses reconstruction'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses_local.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses_local'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "# plt.close()", "\n", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.visualizer.x_hat_reconstruction_test": [[259, 286], ["min", "model", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.close", "x_hat_recon[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "x_hat_recon[].numpy"], "function", ["None"], ["", "def", "x_hat_reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "\t", "for", "test_data", "in", "test_dataset", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "_", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ")", "=", "model", "(", "x_test", ")", "\n", "canvas_x_hat", "=", "np", ".", "empty", "(", "(", "h", "*", "2", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_x_hat", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_hat_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_x_hat", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "2", "*", "n", ",", "2", ")", ")", "\n", "plt", ".", "imshow", "(", "canvas_x_hat", ")", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_hat_reconstrcution_test_lg_vae.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_hat_reconstrcution_test'", "+", "filename", "+", "'.png'", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "return", "canvas_x_hat", "\n", "", ""]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.kl_divergence": [[13, 22], ["trainer.tf_safe_log", "tensorflow.square", "len", "tensorflow.reduce_mean", "len", "tensorflow.reduce_mean", "NotImplementedError", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.exp", "tensorflow.square", "tensorflow.exp", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log"], ["def", "kl_divergence", "(", "z_mean", ",", "z_sig", ")", ":", "\n", "    ", "z_log_var", "=", "tf_safe_log", "(", "tf", ".", "square", "(", "z_sig", ")", ")", "\n", "if", "(", "len", "(", "z_mean", ".", "shape", ")", "==", "2", ")", ":", "\n", "        ", "kl_loss", "=", "tf", ".", "reduce_mean", "(", "-", "0.5", "*", "tf", ".", "reduce_sum", "(", "1", "+", "z_log_var", "-", "tf", ".", "square", "(", "z_mean", ")", "-", "tf", ".", "exp", "(", "z_log_var", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "elif", "(", "len", "(", "z_mean", ".", "shape", ")", "==", "4", ")", ":", "\n", "        ", "kl_loss", "=", "tf", ".", "reduce_mean", "(", "-", "0.5", "*", "tf", ".", "reduce_sum", "(", "1", "+", "z_log_var", "-", "tf", ".", "square", "(", "z_mean", ")", "-", "tf", ".", "exp", "(", "z_log_var", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'This KL shape is not implemented'", ")", "\n", "", "return", "kl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.kl_divergence_two_gauss": [[23, 25], ["tensorflow.reduce_mean", "tensorflow.reduce_sum", "trainer.tf_safe_log", "trainer.tf_safe_log", "tensorflow.math.square", "tensorflow.math.square", "tensorflow.math.square"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log", "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log"], ["", "def", "kl_divergence_two_gauss", "(", "mean1", ",", "sig1", ",", "mean2", ",", "sig2", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf_safe_log", "(", "sig2", ")", "-", "tf_safe_log", "(", "sig1", ")", "+", "(", "(", "tf", ".", "math", ".", "square", "(", "sig1", ")", "+", "tf", ".", "math", ".", "square", "(", "mean1", "-", "mean2", ")", ")", "/", "(", "2", "*", "tf", ".", "math", ".", "square", "(", "sig2", ")", ")", ")", "-", "0.5", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.concrete_binary_sample_kl": [[28, 43], ["tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.exp", "tensorflow.exp"], "function", ["None"], ["", "def", "concrete_binary_sample_kl", "(", "pre_sigmoid_sample", ",", "\n", "prior_log_odds", ",", "prior_temperature", ",", "\n", "posterior_log_odds", ",", "posterior_temperature", ",", "\n", "eps", "=", "1e-8", ")", ":", "\n", "    ", "y", "=", "pre_sigmoid_sample", "\n", "\n", "y_times_prior_temp", "=", "y", "*", "prior_temperature", "\n", "log_prior", "=", "tf", ".", "math", ".", "log", "(", "prior_temperature", "+", "eps", ")", "-", "y_times_prior_temp", "+", "prior_log_odds", "-", "2.0", "*", "tf", ".", "math", ".", "log", "(", "1.0", "+", "tf", ".", "exp", "(", "-", "y_times_prior_temp", "+", "prior_log_odds", ")", "+", "eps", ")", "\n", "\n", "y_times_posterior_temp", "=", "y", "*", "posterior_temperature", "\n", "log_posterior", "=", "tf", ".", "math", ".", "log", "(", "posterior_temperature", "+", "eps", ")", "-", "y_times_posterior_temp", "+", "posterior_log_odds", "-", "2.0", "*", "tf", ".", "math", ".", "log", "(", "1.0", "+", "tf", ".", "exp", "(", "-", "y_times_posterior_temp", "+", "posterior_log_odds", ")", "+", "eps", ")", "\n", "\n", "return", "log_posterior", "-", "log_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.compute_z_pres_kl_yolo_air": [[45, 95], ["tensorflow.range", "tensorflow.reduce_sum", "tensorflow.tile", "tensorflow.zeros", "range", "trainer.tf_mean_sum", "tensorflow.maximum", "range", "tensorflow.transpose", "trainer.concrete_binary_sample_kl", "obj_kl.append", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.squeeze", "tensorflow.maximum", "tensorflow.matmul", "trainer.tf_safe_log", "trainer.tf_safe_log", "tensorflow.stack"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_mean_sum", "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.concrete_binary_sample_kl", "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log", "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log"], ["", "def", "compute_z_pres_kl_yolo_air", "(", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "prior_prob", ",", "temperature", ")", ":", "\n", "    ", "H", "=", "z_pres", ".", "shape", "[", "1", "]", "\n", "W", "=", "z_pres", ".", "shape", "[", "2", "]", "\n", "\n", "batch_size", "=", "z_pres", ".", "shape", "[", "0", "]", "\n", "count_support", "=", "tf", ".", "range", "(", "H", "*", "W", "+", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "count_prior_prob", "=", "1", "-", "prior_prob", "# tf.nn.sigmoid(self.count_prior_log_odds)", "\n", "count_distribution", "=", "(", "1", "-", "count_prior_prob", ")", "*", "(", "count_prior_prob", "**", "count_support", ")", "\n", "\n", "normalizer", "=", "tf", ".", "reduce_sum", "(", "count_distribution", ")", "\n", "count_distribution", "=", "count_distribution", "/", "tf", ".", "maximum", "(", "normalizer", ",", "1e-6", ")", "\n", "count_distribution", "=", "tf", ".", "tile", "(", "count_distribution", "[", "None", ",", ":", "]", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "count_so_far", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "i", "=", "0", "\n", "\n", "obj_kl", "=", "[", "]", "\n", "max_n_objects", "=", "H", "*", "W", "\n", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "p_z_given_Cz", "=", "tf", ".", "maximum", "(", "count_support", "[", "None", ",", ":", "]", "-", "count_so_far", ",", "0", ")", "/", "(", "max_n_objects", "-", "i", ")", "\n", "\n", "# Reshape for batch matmul", "\n", "_count_distribution", "=", "count_distribution", "[", ":", ",", "None", ",", ":", "]", "\n", "_p_z_given_Cz", "=", "p_z_given_Cz", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "p_z", "=", "tf", ".", "matmul", "(", "_count_distribution", ",", "_p_z_given_Cz", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "prior_log_odds", "=", "tf_safe_log", "(", "p_z", ")", "-", "tf_safe_log", "(", "1", "-", "p_z", ")", "\n", "_obj_kl", "=", "concrete_binary_sample_kl", "(", "\n", "z_pres_pre_sigmoid", "[", ":", ",", "h", ",", "w", ",", ":", "]", ",", "\n", "prior_log_odds", ",", "temperature", ",", "\n", "z_pres_logits", "[", ":", ",", "h", ",", "w", ",", ":", "]", ",", "temperature", "\n", ")", "\n", "\n", "obj_kl", ".", "append", "(", "_obj_kl", ")", "\n", "\n", "sample", "=", "tf", ".", "cast", "(", "z_pres", "[", ":", ",", "h", ",", "w", ",", ":", "]", ">", "0.5", ",", "tf", ".", "float32", ")", "\n", "mult", "=", "sample", "*", "p_z_given_Cz", "+", "(", "1", "-", "sample", ")", "*", "(", "1", "-", "p_z_given_Cz", ")", "\n", "count_distribution", "=", "mult", "*", "count_distribution", "\n", "normalizer", "=", "tf", ".", "reduce_sum", "(", "count_distribution", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "normalizer", "=", "tf", ".", "maximum", "(", "normalizer", ",", "1e-6", ")", "\n", "count_distribution", "=", "count_distribution", "/", "normalizer", "\n", "\n", "count_so_far", "+=", "sample", "\n", "\n", "i", "+=", "1", "\n", "\n", "", "", "return", "tf_mean_sum", "(", "tf", ".", "transpose", "(", "tf", ".", "squeeze", "(", "tf", ".", "stack", "(", "[", "obj_kl", "]", ")", ")", ",", "[", "1", ",", "0", "]", ")", ")", "#[cells, batch] -> [batch,cells]", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log": [[97, 102], ["tensorflow.math.log", "tensorflow.logical_or", "tensorflow.where", "tensorflow.math.is_nan", "tensorflow.math.is_inf", "tensorflow.ones_like"], "function", ["None"], ["", "def", "tf_safe_log", "(", "value", ",", "replacement_value", "=", "-", "100.0", ")", ":", "\n", "    ", "log_value", "=", "tf", ".", "math", ".", "log", "(", "value", "+", "1e-8", ")", "\n", "replace", "=", "tf", ".", "logical_or", "(", "tf", ".", "math", ".", "is_nan", "(", "log_value", ")", ",", "tf", ".", "math", ".", "is_inf", "(", "log_value", ")", ")", "\n", "log_value", "=", "tf", ".", "where", "(", "replace", ",", "replacement_value", "*", "tf", ".", "ones_like", "(", "log_value", ")", ",", "log_value", ")", "\n", "return", "log_value", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.xent_loss": [[103, 105], ["trainer.tf_safe_log", "trainer.tf_safe_log"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log", "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_safe_log"], ["", "def", "xent_loss", "(", "label", ",", "pred", ")", ":", "\n", "    ", "return", "-", "(", "label", "*", "tf_safe_log", "(", "pred", ")", "+", "(", "1.", "-", "label", ")", "*", "tf_safe_log", "(", "1.", "-", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_mean_sum": [[107, 110], ["tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reduce_prod"], "function", ["None"], ["", "def", "tf_mean_sum", "(", "t", ")", ":", "\n", "    ", "\"\"\" Average over batch dimension, sum over all other dimensions \"\"\"", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "reshape", "(", "t", ",", "[", "t", ".", "shape", "[", "0", "]", ",", "tf", ".", "reduce_prod", "(", "t", ".", "shape", "[", "1", ":", "]", ")", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.train_spair": [[112, 425], ["datetime.datetime.now().strftime", "os.path.join", "os.mkdir", "tensorflow.keras.metrics.Accuracy", "time.time", "enumerate", "model.save_weights", "os.path.dirname", "os.path.exists", "print", "os.mkdir", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tape.gradient", "optimizer.apply_gradients", "zip", "model", "trainer.tf_mean_sum", "tensorflow.constant", "trainer.compute_z_pres_kl_yolo_air", "tensorflow.constant", "tensorflow.constant", "trainer.kl_divergence_two_gauss", "trainer.kl_divergence", "trainer.kl_divergence", "trainer.kl_divergence", "zip", "trainer.train_spair.train_step"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.tf_mean_sum", "home.repos.pwc.inspect_result.51616_split-vae.spair.trainer.compute_z_pres_kl_yolo_air", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence"], ["", "def", "train_spair", "(", "model", ",", "optimizer", ",", "dataset", ",", "train_dataset", ",", "test_dataset", ",", "config", ")", ":", "\n", "    ", "RUN_NAME", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'output/'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "print", "(", "'data folder doesn\\'t exist, create data folder'", ")", "\n", "os", ".", "mkdir", "(", "data_path", ")", "\n", "\n", "", "RUN_DIR", "=", "data_path", "+", "RUN_NAME", "+", "'/'", "\n", "os", ".", "mkdir", "(", "RUN_DIR", ")", "\n", "\n", "train_metric_names", "=", "[", "'x_recon_train_loss'", ",", "'z_zoom_kl_train_loss'", ",", "'z_what_kl_train_loss'", ",", "'z_where_kl_train_loss'", ",", "\n", "'z_depth_kl_train_loss'", ",", "'z_pres_kl_train_loss'", ",", "'z_bg_kl_train_loss'", ",", "'z_l_kl_train_loss'", ",", "'x_hat_recon_train_loss'", "]", "\n", "\n", "test_metric_names", "=", "[", "'x_recon_test_loss'", ",", "'z_zoom_kl_test_loss'", ",", "'z_what_kl_test_loss'", ",", "'z_where_kl_test_loss'", ",", "\n", "'z_depth_kl_test_loss'", ",", "'z_pres_kl_test_loss'", ",", "'z_bg_kl_test_loss'", ",", "'z_l_kl_test_loss'", ",", "'x_hat_recon_test_loss'", ",", "'MAE test'", ",", "'MAPE test'", "]", "\n", "\n", "train_metrics", "=", "[", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", "name", "=", "loss", ")", "for", "loss", "in", "train_metric_names", "]", "\n", "test_metrics", "=", "[", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", "name", "=", "loss", ")", "for", "loss", "in", "test_metric_names", "]", "\n", "\n", "count_acc_test", "=", "tf", ".", "keras", ".", "metrics", ".", "Accuracy", "(", ")", "\n", "\n", "\n", "\n", "@", "tf", ".", "function", "\n", "def", "train_step", "(", "model", ",", "images", ",", "optimizer", ",", "step", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "images", ",", "training", "=", "True", ")", "\n", "\n", "if", "config", ".", "model", "==", "'lg_spair'", ":", "\n", "                ", "x", ",", "x_hat", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "images", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "images", "\n", "\n", "", "x_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x", ",", "x_recon", ")", ")", "\n", "\n", "prior_z_pres_prob", "=", "tf", ".", "constant", "(", "0.99", ")", "*", "tf", ".", "minimum", "(", "1.0", ",", "(", "step", "+", "1", ")", "/", "config", ".", "z_pres_anneal_step", ")", "# anneal from 0 to 0.99", "\n", "z_pres_kl_loss", "=", "compute_z_pres_kl_yolo_air", "(", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "prior_z_pres_prob", ",", "config", ".", "tau", ")", "\n", "\n", "prior_z_zoom_mean", "=", "tf", ".", "constant", "(", "config", ".", "prior_z_zoom", ",", "shape", "=", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "+", "(", "config", ".", "prior_z_zoom_start", "*", "(", "1", "-", "(", "tf", ".", "minimum", "(", "(", "step", "+", "1", ")", "/", "config", ".", "z_pres_anneal_step", ",", "1.0", ")", ")", ")", ")", "# anneal from 10 to prior_z_zoom", "\n", "prior_z_zoom_sig", "=", "tf", ".", "constant", "(", "0.5", ",", "shape", "=", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "\n", "\n", "z_where_zoom_kl_loss", "=", "kl_divergence_two_gauss", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "prior_z_zoom_mean", ",", "prior_z_zoom_sig", ")", "\n", "z_what_kl_loss", "=", "kl_divergence", "(", "z_what_mean", ",", "z_what_sigma", ")", "\n", "\n", "z_where_kl_loss", "=", "kl_divergence", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "z_depth_kl_loss", "=", "kl_divergence", "(", "z_depth_mean", ",", "z_depth_sigma", ")", "\n", "\n", "losses", "=", "[", "x_recon_loss", ",", "z_where_zoom_kl_loss", ",", "z_what_kl_loss", ",", "z_where_kl_loss", ",", "z_depth_kl_loss", ",", "z_pres_kl_loss", "]", "\n", "\n", "total_loss", "=", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "tf", ".", "minimum", "(", "config", ".", "beta", ",", "config", ".", "beta", "*", "(", "step", "+", "1.0", ")", "/", "config", ".", "anneal_until", ")", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "if", "config", ".", "model", "==", "'lg_spair'", ":", "\n", "                ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", "=", "more_outputs", "\n", "if", "not", "config", ".", "split_z_l", ":", "\n", "\n", "                    ", "if", "config", ".", "concat_z_bg", ":", "\n", "                        ", "z_bg_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_bg_mean", ",", "z_l_mean", "]", ",", "axis", "=", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_bg_sig", ",", "z_l_sig", "]", ",", "axis", "=", "1", ")", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "", "else", ":", "\n", "                        ", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "\n", "", "if", "config", ".", "concat_z_what", ":", "\n", "                        ", "z_what_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_what_mean", ",", "tf", ".", "tile", "(", "z_l_mean", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_what_sigma", ",", "tf", ".", "tile", "(", "z_l_sig", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "# z_what_concat_kl_loss = kl_divergence(tf.concat([z_what_mean,z_l_mean],axis=-1),tf.concat([z_what_sigma,z_l_sig],axis=-1))", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x_hat", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "config", ".", "beta", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "+", "x_hat_recon_loss", "# + z_l_kl_loss", "\n", "\n", "", "else", ":", "\n", "                    ", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "# z_what_concat_kl_loss = kl_divergence(tf.concat([z_what_mean,z_l_mean],axis=-1),tf.concat([z_what_sigma,z_l_sig],axis=-1))", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x_hat", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "config", ".", "z_l_beta", "*", "z_l_kl_loss", "+", "x_hat_recon_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "config", ".", "beta", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "\n", "", "", "elif", "config", ".", "model", "==", "'lg_glimpse_spair'", ":", "\n", "                ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ",", "x_hat", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "z_what_concat_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_what_mean", ",", "z_l_mean", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_what_sigma", ",", "z_l_sig", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "tf", ".", "stop_gradient", "(", "x_hat", ")", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "x_hat_recon_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "config", ".", "beta", "*", "(", "config", ".", "z_what_beta", "*", "z_what_concat_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "\n", "", "elif", "config", ".", "model", "==", "'bg_spair'", ":", "\n", "                ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "tf", ".", "minimum", "(", "config", ".", "beta", ",", "config", ".", "beta", "*", "(", "step", "+", "1.0", ")", "/", "config", ".", "anneal_until", ")", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "", "", "gradients", "=", "tape", ".", "gradient", "(", "total_loss", ",", "model", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "model", ".", "trainable_variables", ")", ")", "\n", "\n", "for", "(", "metric", ",", "loss", ")", "in", "zip", "(", "train_metrics", ",", "losses", ")", ":", "\n", "            ", "metric", "(", "loss", ")", "\n", "\n", "", "return", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "*", "more_outputs", ")", "\n", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "test_step", "(", "model", ",", "images", ",", "labels", "=", "None", ")", ":", "\n", "        ", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "images", ",", "training", "=", "True", ")", "\n", "\n", "if", "config", ".", "model", "!=", "'spair'", ":", "\n", "            ", "x", ",", "x_hat", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "images", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "images", "\n", "\n", "", "x_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x", ",", "x_recon", ")", ")", "\n", "\n", "prior_z_pres_prob", "=", "tf", ".", "constant", "(", "0.99", ")", "\n", "z_pres_kl_loss", "=", "compute_z_pres_kl_yolo_air", "(", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "prior_z_pres_prob", ",", "config", ".", "tau", ")", "\n", "\n", "prior_z_zoom_mean", "=", "tf", ".", "constant", "(", "config", ".", "prior_z_zoom", ",", "shape", "=", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "\n", "prior_z_zoom_sig", "=", "tf", ".", "constant", "(", "0.5", ",", "shape", "=", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "\n", "\n", "z_where_zoom_kl_loss", "=", "kl_divergence_two_gauss", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "prior_z_zoom_mean", ",", "prior_z_zoom_sig", ")", "\n", "z_what_kl_loss", "=", "kl_divergence", "(", "z_what_mean", ",", "z_what_sigma", ")", "\n", "z_where_kl_loss", "=", "kl_divergence", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "z_depth_kl_loss", "=", "kl_divergence", "(", "z_depth_mean", ",", "z_depth_sigma", ")", "\n", "\n", "losses", "=", "[", "x_recon_loss", ",", "z_where_zoom_kl_loss", ",", "z_what_kl_loss", ",", "z_where_kl_loss", ",", "z_depth_kl_loss", ",", "z_pres_kl_loss", "]", "\n", "\n", "if", "config", ".", "model", "==", "'lg_spair'", ":", "\n", "            ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", "=", "more_outputs", "\n", "# z_bg_kl_loss = kl_divergence(z_bg_mean, z_bg_sig)", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_bg_mean", ",", "z_l_mean", "]", ",", "axis", "=", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_bg_sig", ",", "z_l_sig", "]", ",", "axis", "=", "1", ")", ")", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x_hat", ",", "x_hat_recon", ")", ")", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "\n", "", "elif", "config", ".", "model", "==", "'lg_glimpse_spair'", ":", "\n", "            ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ",", "x_hat", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "z_what_concat_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_what_mean", ",", "z_l_mean", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_what_sigma", ",", "z_l_sig", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "tf", ".", "stop_gradient", "(", "x_hat", ")", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "\n", "", "elif", "config", ".", "model", "==", "'bg_spair'", ":", "\n", "            ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "losses", ".", "append", "(", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "\n", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "            ", "print", "(", "'image shape:'", ",", "images", ".", "shape", ")", "\n", "pred_count", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "round", "(", "tf", ".", "sigmoid", "(", "z_pres_logits", ")", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "#[B,]", "\n", "print", "(", "'pred count shape:'", ",", "pred_count", ".", "shape", ")", "\n", "print", "(", "'label shape:'", ",", "labels", ".", "shape", ")", "\n", "mae", "=", "tf", ".", "metrics", ".", "mean_absolute_error", "(", "labels", ",", "pred_count", ")", "\n", "mape", "=", "tf", ".", "metrics", ".", "mean_absolute_percentage_error", "(", "labels", ",", "pred_count", ")", "\n", "losses", ".", "append", "(", "mae", ")", "\n", "losses", ".", "append", "(", "mape", ")", "\n", "count_acc_test", ".", "update_state", "(", "labels", ",", "pred_count", ")", "\n", "\n", "", "for", "(", "metric", ",", "loss", ")", "in", "zip", "(", "test_metrics", ",", "losses", ")", ":", "\n", "            ", "metric", "(", "loss", ")", "\n", "\n", "", "return", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "*", "more_outputs", ")", "\n", "\n", "\n", "\n", "# Train", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "step", ",", "images", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "*", "more_outputs", ")", "=", "train_step", "(", "model", ",", "images", ",", "optimizer", ",", "tf", ".", "constant", "(", "step", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n", "if", "(", "step", "%", "1000", "==", "0", ")", ":", "\n", "            ", "print", "(", "'Training time: {:.2f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "training_log", "=", "dict", "(", "zip", "(", "train_metric_names", ",", "[", "metric", ".", "result", "(", ")", ".", "numpy", "(", ")", "for", "metric", "in", "train_metrics", "]", ")", ")", "\n", "print", "(", "'Training step:'", ",", "step", ")", "\n", "print", "(", "training_log", ")", "\n", "print", "(", ")", "\n", "\n", "\n", "for", "metric", "in", "train_metrics", ":", "\n", "                ", "metric", ".", "reset_states", "(", ")", "\n", "\n", "", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ")", "\n", "h", ",", "w", ",", "channel", "=", "images", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "10", ",", "w", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "10", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "10", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "\n", "\n", "obj_recon", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "channel", "]", "\n", "obj_alpha", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", "channel", ":", "]", "\n", "\n", "z_depth", "=", "tf", ".", "reshape", "(", "z_depth", ",", "[", "32", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "z_pres", ",", "[", "32", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "canvas", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "10", ",", "channel", ")", ")", "\n", "canvas_weighted", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "10", ",", "channel", ")", ")", "\n", "canvas_weights_only", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "10", ",", "channel", ")", ")", "# only weights of that part", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "canvas_weights_only", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "canvas_weights_only", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "\n", "canvas", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "obj_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weighted", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "(", "obj_recon", "[", "i", "]", "*", "obj_alpha", "[", "i", "]", "*", "z_pres", "[", "i", "]", "*", "tf", ".", "nn", ".", "sigmoid", "(", "-", "z_depth", "[", "i", "]", ")", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weights_only", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", "0", "]", "=", "(", "tf", ".", "ones", "(", "shape", "=", "obj_alpha", "[", "i", "]", ".", "shape", ")", "*", "z_pres", "[", "i", "]", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ")", ")", "# *tf.nn.sigmoid(-z_depth[i])", "\n", "\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'reconstruction'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weighted", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'reconstruction weighted'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weights_only", ")", ",", "cmap", "=", "'inferno'", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "'weights'", ")", "\n", "ax", "[", "2", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "2", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "plt", ".", "savefig", "(", "RUN_DIR", "+", "'train_recon_it_'", "+", "str", "(", "step", ")", "+", "'.png'", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "test_num", ",", "test_ds", "in", "enumerate", "(", "test_dataset", ")", ":", "\n", "# Evaluation", "\n", "                ", "for", "test_data", "in", "test_ds", ":", "\n", "                    ", "if", "config", ".", "label", ":", "\n", "                        ", "test_images", ",", "labels", "=", "test_data", "[", "0", "]", ",", "test_data", "[", "1", "]", "\n", "test_step", "(", "model", ",", "test_images", ",", "labels", ")", "\n", "", "else", ":", "\n", "                        ", "test_images", "=", "test_data", "\n", "test_step", "(", "model", ",", "test_images", ")", "\n", "\n", "", "", "print", "(", "'Testing time: {:.2f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "test_log", "=", "dict", "(", "zip", "(", "[", "name", "+", "str", "(", "test_num", ")", "for", "name", "in", "test_metric_names", "]", ",", "[", "metric", ".", "result", "(", ")", ".", "numpy", "(", ")", "for", "metric", "in", "test_metrics", "]", ")", ")", "\n", "print", "(", "'Count accuracy'", "+", "str", "(", "test_num", ")", "+", "': '", "+", "str", "(", "count_acc_test", ".", "result", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "print", "(", "test_log", ")", "\n", "print", "(", ")", "\n", "\n", "count_acc_test", ".", "reset_states", "(", ")", "\n", "for", "metric", "in", "train_metrics", ":", "\n", "                    ", "metric", ".", "reset_states", "(", ")", "\n", "\n", "\n", "", "x_recon_plt", "=", "visualizer", ".", "reconstruction_test", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "x_recon_plt", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "visualizer", ".", "reconstruction_bbox", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "\n", "\n", "glimpses_recon_plt", "=", "visualizer", ".", "glimpses_reconstruction_test", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "glimpses_recon_plt", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "if", "isinstance", "(", "model", ",", "LGSPAIR", ")", ":", "\n", "                    ", "visualizer", ".", "x_hat_reconstruction_test", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "if", "(", "step", ">=", "config", ".", "training_steps", ")", ":", "\n", "            ", "print", "(", "'Training done!'", ")", "\n", "break", "\n", "\n", "", "", "model", ".", "save_weights", "(", "'models/'", "+", "RUN_NAME", "+", "'.h5'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.MultiCUB.__init__": [[40, 58], ["glob.glob.glob", "tensorflow.image.resize().numpy", "tensorflow.image.resize().numpy", "tensorflow.image.resize", "tensorflow.image.resize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "reshape", "=", "True", ")", ":", "\n", "        ", "self", ".", "num_channel", "=", "data", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "train_x", "=", "data", "[", "0", "]", "\n", "self", ".", "train_y", "=", "data", "[", "1", "]", "\n", "self", ".", "test_x", "=", "data", "[", "2", "]", "\n", "self", ".", "test_y", "=", "data", "[", "3", "]", "\n", "if", "reshape", ":", "\n", "            ", "self", ".", "train_x", "=", "tf", ".", "image", ".", "resize", "(", "self", ".", "train_x", ",", "(", "14", ",", "14", ")", ")", ".", "numpy", "(", ")", "#[28,28] -> [14,14]", "\n", "self", ".", "test_x", "=", "tf", ".", "image", ".", "resize", "(", "self", ".", "test_x", ",", "(", "14", ",", "14", ")", ")", ".", "numpy", "(", ")", "\n", "", "self", ".", "bg_list", "=", "glob", "(", "'data/kylberg/*.png'", ")", "\n", "\n", "#triad hard", "\n", "self", ".", "train_colors_triad", "=", "[", "(", "195", ",", "135", ",", "255", ")", ",", "(", "193", ",", "255", ",", "135", ")", ",", "(", "255", ",", "165", ",", "135", ")", ",", "(", "81", ",", "197", ",", "255", ")", ",", "(", "255", ",", "229", ",", "81", ")", ",", "(", "255", ",", "81", ",", "139", ")", "]", "\n", "self", ".", "test_colors_triad", "=", "[", "(", "255", ",", "125", ",", "227", ")", ",", "(", "125", ",", "255", ",", "184", ")", ",", "(", "255", ",", "205", ",", "125", ")", "]", "\n", "\n", "#easy colors", "\n", "self", ".", "train_colors", "=", "[", "(", "100", ",", "209", ",", "72", ")", ",", "(", "209", ",", "72", ",", "100", ")", ",", "(", "209", ",", "127", ",", "72", ")", ",", "(", "72", ",", "129", ",", "209", ")", ",", "(", "84", ",", "184", ",", "209", ")", ",", "(", "209", ",", "109", ",", "84", ")", ",", "(", "184", ",", "209", ",", "84", ")", ",", "(", "109", ",", "84", ",", "209", ")", "]", "\n", "self", ".", "test_colors", "=", "[", "(", "222", ",", "222", ",", "102", ")", ",", "(", "100", ",", "100", ",", "219", ")", ",", "(", "219", ",", "100", ",", "219", ")", ",", "(", "100", ",", "219", ",", "100", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.MultiCUB.create_sample": [[59, 159], ["numpy.zeros", "range", "random.randint", "numpy.zeros", "int", "range", "tensorflow_addons.image.rotate", "tensorflow.image.central_crop().numpy", "numpy.random.randint", "numpy.random.randint", "data.calculate_overlap", "drawn_boxes.append", "numpy.where", "random.randint", "random.randint", "random.randint", "random.choice", "random.shuffle", "random.shuffle", "range", "tensorflow.convert_to_tensor", "tensorflow.constant", "int", "range", "numpy.random.randint", "numpy.random.randint", "random.choice", "tensorflow.image.central_crop", "random.shuffle", "random.shuffle", "range", "numpy.max", "numpy.ones_like", "numpy.random.randint", "numpy.random.randint", "numpy.random.choice", "numpy.tile", "tensorflow.image.resize", "tensorflow.random.uniform", "numpy.array", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.calculate_overlap"], ["", "def", "create_sample", "(", "self", ",", "n", ",", "width", ",", "height", ",", "bg", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "canvas", "=", "np", ".", "zeros", "(", "[", "width", ",", "height", ",", "self", ".", "num_channel", "]", ",", "np", ".", "float32", ")", "\n", "if", "bg", "==", "'solid_random'", ":", "\n", "            ", "brightness", "=", "randint", "(", "0", ",", "255", ")", "\n", "r", "=", "randint", "(", "0", ",", "brightness", ")", "/", "255.", "\n", "g", "=", "randint", "(", "0", ",", "brightness", ")", "/", "255.", "\n", "b", "=", "randint", "(", "0", ",", "brightness", ")", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "0", "]", "=", "r", "\n", "canvas", "[", ":", ",", ":", ",", "1", "]", "=", "g", "\n", "canvas", "[", ":", ",", ":", ",", "2", "]", "=", "b", "\n", "", "elif", "bg", "==", "'solid_fixed'", ":", "\n", "            ", "color", "=", "choice", "(", "self", ".", "train_colors", ")", "\n", "canvas", "[", ":", ",", ":", ",", "0", "]", "=", "color", "[", "0", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "1", "]", "=", "color", "[", "1", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "2", "]", "=", "color", "[", "2", "]", "/", "255.", "\n", "", "elif", "bg", "==", "'unseen_solid_fixed'", ":", "\n", "            ", "color", "=", "choice", "(", "self", ".", "test_colors", ")", "\n", "canvas", "[", ":", ",", ":", ",", "0", "]", "=", "color", "[", "0", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "1", "]", "=", "color", "[", "1", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "2", "]", "=", "color", "[", "2", "]", "/", "255.", "\n", "", "elif", "bg", "==", "'white'", ":", "\n", "            ", "canvas", "[", ":", ",", ":", ",", ":", "]", "=", "np", ".", "ones_like", "(", "canvas", ")", "\n", "", "elif", "bg", "==", "'texture'", ":", "\n", "            ", "img_name", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "bg_list", ")", "\n", "# print(img_name)", "\n", "img", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "img_name", ")", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "/", "255.", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "# print(img.shape)", "\n", "canvas", "[", ":", ",", ":", ",", ":", "]", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "size", "=", "[", "width", ",", "height", "]", ")", "\n", "\n", "", "if", "'rot'", "in", "bg", ":", "#ckb_rot_6", "\n", "            ", "temp_canvas", "=", "np", ".", "zeros", "(", "[", "width", "*", "4", ",", "height", "*", "4", ",", "self", ".", "num_channel", "]", ",", "np", ".", "float32", ")", "\n", "if", "'unseen'", "in", "bg", ":", "\n", "                ", "shuffle", "(", "self", ".", "test_colors_triad", ")", "\n", "colors", "=", "self", ".", "test_colors_triad", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                ", "shuffle", "(", "self", ".", "train_colors_triad", ")", "\n", "colors", "=", "self", ".", "train_colors_triad", "[", ":", "2", "]", "\n", "", "cell_size", "=", "int", "(", "bg", "[", "-", "1", "]", ")", "\n", "num_ckb", "=", "(", "height", "*", "4", ")", "//", "cell_size", "\n", "for", "i", "in", "range", "(", "num_ckb", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_ckb", ")", ":", "\n", "                    ", "temp_canvas", "[", "i", "*", "cell_size", ":", "(", "i", "+", "1", ")", "*", "cell_size", ",", "j", "*", "cell_size", ":", "(", "j", "+", "1", ")", "*", "cell_size", ",", "0", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "0", "]", "/", "255.", "\n", "temp_canvas", "[", "i", "*", "cell_size", ":", "(", "i", "+", "1", ")", "*", "cell_size", ",", "j", "*", "cell_size", ":", "(", "j", "+", "1", ")", "*", "cell_size", ",", "1", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "1", "]", "/", "255.", "\n", "temp_canvas", "[", "i", "*", "cell_size", ":", "(", "i", "+", "1", ")", "*", "cell_size", ",", "j", "*", "cell_size", ":", "(", "j", "+", "1", ")", "*", "cell_size", ",", "2", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "2", "]", "/", "255.", "\n", "", "", "rot_image", "=", "tfa", ".", "image", ".", "rotate", "(", "tf", ".", "convert_to_tensor", "(", "temp_canvas", ")", ",", "tf", ".", "constant", "(", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "-", "1", ",", "1", ")", "*", "math", ".", "pi", "/", "2", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "interpolation", "=", "'BILINEAR'", ")", "\n", "canvas", "=", "tf", ".", "image", ".", "central_crop", "(", "rot_image", ",", "0.25", ")", ".", "numpy", "(", ")", "\n", "# plt.imshow(canvas)", "\n", "# plt.show()", "\n", "\n", "", "elif", "'ckb'", "in", "bg", ":", "\n", "            ", "if", "'unseen'", "in", "bg", ":", "\n", "                ", "shuffle", "(", "self", ".", "test_colors", ")", "\n", "colors", "=", "self", ".", "test_colors", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                ", "shuffle", "(", "self", ".", "train_colors", ")", "\n", "colors", "=", "self", ".", "train_colors", "[", ":", "2", "]", "\n", "", "num_ckb", "=", "int", "(", "bg", "[", "0", "]", ")", "\n", "h", "=", "height", "//", "num_ckb", ";", "w", "=", "width", "//", "num_ckb", "\n", "for", "i", "in", "range", "(", "num_ckb", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_ckb", ")", ":", "\n", "                    ", "canvas", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", "0", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "0", "]", "/", "255.", "\n", "canvas", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", "1", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "1", "]", "/", "255.", "\n", "canvas", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", "2", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "2", "]", "/", "255.", "\n", "\n", "", "", "", "drawn_boxes", "=", "[", "]", "#x,y", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "rand_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "width", "-", "14", ")", "\n", "rand_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "height", "-", "14", ")", "\n", "while", "calculate_overlap", "(", "rand_x", ",", "rand_y", ",", "drawn_boxes", ")", ":", "\n", "                ", "rand_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "width", "-", "14", ")", "\n", "rand_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "height", "-", "14", ")", "\n", "", "drawn_boxes", ".", "append", "(", "(", "rand_x", ",", "rand_y", ")", ")", "\n", "\n", "if", "not", "test", ":", "\n", "                ", "rand_img", "=", "self", ".", "train_x", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "train_x", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "else", ":", "\n", "                ", "rand_img", "=", "self", ".", "test_x", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "test_x", ".", "shape", "[", "0", "]", ")", "]", "\n", "# rand_img = rand_img/255.", "\n", "# print(rand_img)", "\n", "# plt.imshow(rand_img)", "\n", "# plt.show()", "\n", "# rand_img = cv2.cvtColor(rand_img, cv2.COLOR_RGB2RGBA)", "\n", "", "alpha_img", "=", "np", ".", "where", "(", "np", ".", "max", "(", "rand_img", ",", "axis", "=", "-", "1", ")", ">", "0", ",", "1.0", ",", "0.0", ")", "\n", "rand_img", "=", "rand_img", "/", "255.", "\n", "\n", "alpha_bg", "=", "1.0", "-", "alpha_img", "\n", "alpha_img", "=", "alpha_img", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "alpha_bg", "=", "alpha_bg", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "# print('alpha_img.shape',alpha_img.shape)", "\n", "# print('alpha_bg.shape',alpha_bg.shape)", "\n", "\n", "canvas", "[", "rand_x", ":", "rand_x", "+", "14", ",", "rand_y", ":", "rand_y", "+", "14", "]", "=", "alpha_img", "*", "rand_img", "+", "alpha_bg", "*", "canvas", "[", "rand_x", ":", "rand_x", "+", "14", ",", "rand_y", ":", "rand_y", "+", "14", "]", "\n", "# plt.imshow(canvas)", "\n", "# plt.show()", "\n", "# canvas[rand_x:rand_x+14 , rand_y:rand_y+14, :] = \\", "\n", "#         np.clip(canvas[rand_x:rand_x+14 , rand_y:rand_y+14, :] + rand_img/255. , 0., 1.)", "\n", "\n", "", "return", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.MultiCUB.create_dataset": [[160, 175], ["numpy.zeros", "range", "numpy.zeros.astype", "numpy.zeros", "numpy.random.randint", "data.MultiCUB.create_sample", "numpy.zeros.astype"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.MultiCUB.create_sample"], ["", "def", "create_dataset", "(", "self", ",", "nsamples", ",", "digits", ",", "size", ",", "bg", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "        ", "dataset_buffer", "=", "np", ".", "zeros", "(", "[", "nsamples", ",", "size", ",", "size", ",", "self", ".", "num_channel", "]", ")", "\n", "if", "test", ":", "\n", "            ", "count", "=", "np", ".", "zeros", "(", "[", "nsamples", "]", ")", "\n", "", "for", "i", "in", "range", "(", "nsamples", ")", ":", "\n", "# print('sample no:',i)", "\n", "            ", "rand_n", "=", "np", ".", "random", ".", "randint", "(", "digits", "[", "0", "]", ",", "digits", "[", "1", "]", "+", "1", ")", "\n", "# print('rand_n:',rand_n)", "\n", "if", "test", ":", "\n", "                ", "count", "[", "i", "]", "=", "rand_n", "\n", "", "sample", "=", "self", ".", "create_sample", "(", "rand_n", ",", "size", ",", "size", ",", "bg", ",", "test", ")", "\n", "dataset_buffer", "[", "i", "]", "=", "sample", "\n", "", "if", "test", ":", "\n", "            ", "return", "dataset_buffer", ".", "astype", "(", "np", ".", "float32", ")", ",", "count", "\n", "", "return", "dataset_buffer", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.load_cub_masked": [[13, 17], ["numpy.load", "numpy.load"], "function", ["None"], ["def", "load_cub_masked", "(", ")", ":", "\n", "    ", "train_images", "=", "np", ".", "load", "(", "'data/cub_train_seg_14x14_pad_20_masked.npy'", ")", "\n", "test_images", "=", "np", ".", "load", "(", "'data/cub_test_seg_14x14_pad_20_masked.npy'", ")", "\n", "return", "train_images", ",", "None", ",", "test_images", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.calculateIntersection": [[18, 30], ["None"], "function", ["None"], ["", "def", "calculateIntersection", "(", "a0", ",", "a1", ",", "b0", ",", "b1", ")", ":", "\n", "    ", "if", "a0", ">=", "b0", "and", "a1", "<=", "b1", ":", "# Contained", "\n", "        ", "intersection", "=", "a1", "-", "a0", "\n", "", "elif", "a0", "<", "b0", "and", "a1", ">", "b1", ":", "# Contains", "\n", "        ", "intersection", "=", "b1", "-", "b0", "\n", "", "elif", "a0", "<", "b0", "and", "a1", ">", "b0", ":", "# Intersects right", "\n", "        ", "intersection", "=", "a1", "-", "b0", "\n", "", "elif", "a1", ">", "b1", "and", "a0", "<", "b1", ":", "# Intersects left", "\n", "        ", "intersection", "=", "b1", "-", "a0", "\n", "", "else", ":", "# No intersection (either side)", "\n", "        ", "intersection", "=", "0", "\n", "", "return", "intersection", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.calculate_overlap": [[31, 38], ["data.calculateIntersection", "data.calculateIntersection"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.calculateIntersection", "home.repos.pwc.inspect_result.51616_split-vae.spair.data.calculateIntersection"], ["", "def", "calculate_overlap", "(", "rand_x", ",", "rand_y", ",", "drawn_boxes", ")", ":", "\n", "# check if a new box is overlapped with drawn boxes more than 15% or not", "\n", "    ", "for", "box", "in", "drawn_boxes", ":", "\n", "        ", "x", ",", "y", "=", "box", "[", "0", "]", ",", "box", "[", "1", "]", "\n", "if", "calculateIntersection", "(", "rand_x", ",", "rand_x", "+", "14", ",", "x", ",", "x", "+", "14", ")", "*", "calculateIntersection", "(", "rand_y", ",", "rand_y", "+", "14", ",", "y", ",", "y", "+", "14", ")", "/", "14", "**", "2", ">", "0.15", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.random_crop": [[177, 181], ["tensorflow.image.random_crop"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.random_crop"], ["", "", "def", "random_crop", "(", "input_image", ",", "crop_size", ")", ":", "\n", "    ", "cropped_image", "=", "tf", ".", "image", ".", "random_crop", "(", "input_image", ",", "size", "=", "[", "crop_size", ",", "crop_size", ",", "input_image", ".", "shape", "[", "2", "]", "]", ")", "\n", "\n", "return", "cropped_image", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.resize_random_crop": [[182, 184], ["tensorflow.image.resize", "data.random_crop"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.random_crop"], ["", "def", "resize_random_crop", "(", "img", ",", "crop_size", ",", "resize_size", ")", ":", "\n", "    ", "return", "tf", ".", "image", ".", "resize", "(", "random_crop", "(", "img", ",", "crop_size", ")", ",", "resize_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data._bytes_feature": [[186, 191], ["isinstance", "tensorflow.train.Feature", "type", "value.numpy.numpy", "tensorflow.constant", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "    ", "\"\"\"Returns a bytes_list from a string / byte.\"\"\"", "\n", "if", "isinstance", "(", "value", ",", "type", "(", "tf", ".", "constant", "(", "0", ")", ")", ")", ":", "\n", "        ", "value", "=", "value", ".", "numpy", "(", ")", "# BytesList won't unpack a string from an EagerTensor.", "\n", "", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data._float_feature": [[192, 195], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["", "def", "_float_feature", "(", "value", ")", ":", "\n", "  ", "\"\"\"Returns a float_list from a float / double.\"\"\"", "\n", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data._int64_feature": [[196, 199], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "  ", "\"\"\"Returns an int64_list from a bool / enum / int / uint.\"\"\"", "\n", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.serialize_images_and_labels": [[202, 209], ["tensorflow.train.Example", "tf.train.Example.SerializeToString", "data._bytes_feature", "data._int64_feature", "tensorflow.io.serialize_tensor", "tensorflow.train.Features"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data._bytes_feature", "home.repos.pwc.inspect_result.51616_split-vae.spair.data._int64_feature"], ["", "def", "serialize_images_and_labels", "(", "images", ",", "labels", ")", ":", "\n", "\n", "    ", "feature", "=", "{", "'image'", ":", "_bytes_feature", "(", "tf", ".", "io", ".", "serialize_tensor", "(", "images", ")", ")", ",", "'label'", ":", "_int64_feature", "(", "labels", ")", "}", "\n", "\n", "# Create an example protocol buffer", "\n", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "feature", ")", ")", "\n", "return", "example", ".", "SerializeToString", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.tf_serialize_images_and_labels": [[210, 216], ["tensorflow.py_function", "tensorflow.reshape"], "function", ["None"], ["", "def", "tf_serialize_images_and_labels", "(", "images", ",", "labels", ")", ":", "\n", "    ", "tf_string", "=", "tf", ".", "py_function", "(", "\n", "serialize_images_and_labels", ",", "\n", "(", "images", ",", "labels", ")", ",", "# pass these args to the above function.  ", "\n", "tf", ".", "string", ")", "# the return type is `tf.string`.", "\n", "return", "tf", ".", "reshape", "(", "tf_string", ",", "(", ")", ")", "# The result is a scalar", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.parse_48_with_label": [[217, 228], ["tensorflow.io.parse_single_example", "tensorflow.io.parse_tensor", "tensorflow.reshape", "tensorflow.io.FixedLenFeature", "tensorflow.io.FixedLenFeature"], "function", ["None"], ["", "def", "parse_48_with_label", "(", "example_proto", ",", "size", ",", "channel", ")", ":", "\n", "    ", "feature_description", "=", "{", "\n", "'image'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ",", "default_value", "=", "''", ")", ",", "\n", "'label'", ":", "tf", ".", "io", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ",", "default_value", "=", "0", ")", "\n", "}", "\n", "\n", "example", "=", "tf", ".", "io", ".", "parse_single_example", "(", "example_proto", ",", "feature_description", ")", "\n", "image", "=", "tf", ".", "io", ".", "parse_tensor", "(", "example", "[", "'image'", "]", ",", "out_type", "=", "tf", ".", "float32", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "size", ",", "size", ",", "channel", "]", ")", "\n", "label", "=", "example", "[", "'label'", "]", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.create_cub_tfrec": [[229, 256], ["data.load_cub_masked", "data.MultiCUB", "pathlib.Path().mkdir", "MultiCUB.create_dataset", "tensorflow.data.Dataset.from_tensor_slices", "test_dataset_unseen.map.map", "tensorflow.data.experimental.TFRecordWriter", "tf.data.experimental.TFRecordWriter.write", "MultiCUB.create_dataset", "MultiCUB.create_dataset", "tensorflow.data.Dataset.from_tensor_slices().map", "tensorflow.data.experimental.TFRecordWriter", "tf.data.experimental.TFRecordWriter.write", "tensorflow.data.Dataset.from_tensor_slices().map", "tensorflow.data.experimental.TFRecordWriter", "tf.data.experimental.TFRecordWriter.write", "print", "NotImplementedError", "pathlib.Path", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.load_cub_masked", "home.repos.pwc.inspect_result.51616_split-vae.spair.data.MultiCUB.create_dataset", "home.repos.pwc.inspect_result.51616_split-vae.spair.data.MultiCUB.create_dataset", "home.repos.pwc.inspect_result.51616_split-vae.spair.data.MultiCUB.create_dataset"], ["", "def", "create_cub_tfrec", "(", "name", ")", ":", "\n", "    ", "data", "=", "load_cub_masked", "(", ")", "\n", "multi_cub", "=", "MultiCUB", "(", "data", ",", "reshape", "=", "False", ")", "\n", "if", "(", "name", "!=", "'cub_solid_fixed'", ")", "and", "(", "name", "!=", "'cub_ckb_rot_6'", ")", ":", "\n", "        ", "print", "(", "name", ")", "\n", "raise", "NotImplementedError", "(", "'Undefined dataset'", ")", "\n", "\n", "# name = 'cub_solid_fixed' #'cub_ckb_rot_6', 'cub_16x16_ckb'", "\n", "", "Path", "(", "'data/multi_cub/'", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "numpy_test_unseen_dataset", ",", "count_test_unseen_dataset", "=", "multi_cub", ".", "create_dataset", "(", "1000", ",", "digits", "=", "[", "0", ",", "5", "]", ",", "size", "=", "48", ",", "bg", "=", "'unseen_'", "+", "name", "[", "4", ":", "]", ",", "test", "=", "True", ")", "#16x16_ckb_unseen", "\n", "test_dataset_unseen", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "numpy_test_unseen_dataset", ",", "count_test_unseen_dataset", ")", ")", "\n", "\n", "test_dataset_unseen", "=", "test_dataset_unseen", ".", "map", "(", "tf_serialize_images_and_labels", ")", "\n", "tfrec", "=", "tf", ".", "data", ".", "experimental", ".", "TFRecordWriter", "(", "'data/multi_cub/test_unseen_'", "+", "name", "+", "'.tfrec'", ")", "\n", "tfrec", ".", "write", "(", "test_dataset_unseen", ")", "\n", "\n", "numpy_train_dataset", "=", "multi_cub", ".", "create_dataset", "(", "100000", ",", "digits", "=", "[", "0", ",", "5", "]", ",", "size", "=", "48", ",", "bg", "=", "name", "[", "4", ":", "]", ")", "\n", "numpy_test_dataset", ",", "count_test_dataset", "=", "multi_cub", ".", "create_dataset", "(", "1000", ",", "digits", "=", "[", "0", ",", "5", "]", ",", "size", "=", "48", ",", "bg", "=", "name", "[", "4", ":", "]", ",", "test", "=", "True", ")", "\n", "\n", "test_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "numpy_test_dataset", ",", "count_test_dataset", ")", ")", ".", "map", "(", "tf_serialize_images_and_labels", ")", "\n", "tfrec", "=", "tf", ".", "data", ".", "experimental", ".", "TFRecordWriter", "(", "'data/multi_cub/test_'", "+", "name", "+", "'.tfrec'", ")", "\n", "tfrec", ".", "write", "(", "test_dataset", ")", "\n", "\n", "train_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "numpy_train_dataset", ")", ".", "map", "(", "tf", ".", "io", ".", "serialize_tensor", ")", "\n", "tfrec", "=", "tf", ".", "data", ".", "experimental", ".", "TFRecordWriter", "(", "'data/multi_cub/train_'", "+", "name", "+", "'.tfrec'", ")", "\n", "tfrec", ".", "write", "(", "train_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.get_cub_dataset": [[258, 260], ["data.get_cub_tfrec"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.get_cub_tfrec"], ["", "def", "get_cub_dataset", "(", "name", ",", "size", "=", "48", ",", "channel", "=", "3", ")", ":", "\n", "    ", "return", "get_cub_tfrec", "(", "name", ",", "size", ",", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.data.get_cub_tfrec": [[262, 279], ["tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset().map", "tensorflow.io.parse_tensor", "tensorflow.reshape", "print", "data.create_cub_tfrec", "os.path.exists", "os.path.exists", "os.path.exists", "tensorflow.data.TFRecordDataset", "tensorflow.data.TFRecordDataset", "data.parse_48_with_label", "tensorflow.data.TFRecordDataset", "data.parse_48_with_label"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.spair.data.create_cub_tfrec", "home.repos.pwc.inspect_result.51616_split-vae.spair.data.parse_48_with_label", "home.repos.pwc.inspect_result.51616_split-vae.spair.data.parse_48_with_label"], ["", "def", "get_cub_tfrec", "(", "name", ",", "size", "=", "48", ",", "channel", "=", "3", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "result", "=", "tf", ".", "io", ".", "parse_tensor", "(", "x", ",", "out_type", "=", "tf", ".", "float32", ")", "\n", "result", "=", "tf", ".", "reshape", "(", "result", ",", "[", "size", ",", "size", ",", "channel", "]", ")", "\n", "return", "result", "\n", "", "train_path", "=", "'data/multi_cub/train_'", "+", "name", "+", "'.tfrec'", "\n", "test_path", "=", "'data/multi_cub/test_'", "+", "name", "+", "'.tfrec'", "\n", "test_unseen_path", "=", "'data/multi_cub/test_unseen_'", "+", "name", "+", "'.tfrec'", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "train_path", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "test_path", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "test_unseen_path", ")", ")", ":", "\n", "        ", "print", "(", "'TFRecord files not found, creating TFRecord files. This might take a while.'", ")", "\n", "create_cub_tfrec", "(", "name", ")", "\n", "\n", "", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "train_path", ")", ".", "map", "(", "parse", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "test_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "test_path", ")", ".", "map", "(", "lambda", "x", ":", "parse_48_with_label", "(", "x", ",", "size", ",", "channel", ")", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "test_dataset_unseen", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "test_unseen_path", ")", ".", "map", "(", "lambda", "x", ":", "parse_48_with_label", "(", "x", ",", "size", ",", "channel", ")", ",", "num_parallel_calls", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n", "return", "train_dataset", ",", "[", "test_dataset", ",", "test_dataset_unseen", "]", ",", "[", "-", "1", ",", "size", ",", "size", ",", "channel", "]", ",", "[", "-", "1", ",", "size", ",", "size", ",", "channel", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.SPAIR.__init__": [[20, 32], ["tensorflow.keras.models.Model.__init__", "spair.Encoder", "spair.Decoder", "spair.Renderer", "spair.BackgroundModel"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", "=", "'SPAIR'", ")", ":", "\n", "        ", "super", "(", "SPAIR", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "image_size", ",", "test_size", ",", "object_size", ",", "latent_size", ",", "tau", ",", "model", ",", "bg_latent_size", "=", "config", ".", "image_size", ",", "config", ".", "test_size", ",", "config", ".", "object_size", ",", "config", ".", "latent_size", ",", "config", ".", "tau", ",", "config", ".", "model", ",", "config", ".", "bg_latent_size", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "encoder", "=", "Encoder", "(", "object_size", ",", "latent_size", ",", "tau", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "image_size", ",", "test_size", ",", "object_size", ",", "latent_size", ")", "\n", "if", "model", "==", "'bg_spair'", ":", "\n", "            ", "self", ".", "bg_model", "=", "BackgroundModel", "(", "image_size", ",", "bg_latent_size", ",", "image_size", "[", "2", "]", ")", "\n", "", "self", ".", "renderer", "=", "Renderer", "(", "num_channel", "=", "image_size", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.SPAIR.call": [[34, 50], ["spair.SPAIR.encoder", "spair.SPAIR.decoder", "spair.SPAIR.bg_model", "spair.SPAIR.renderer", "spair.SPAIR.renderer", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "(", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ")", "=", "self", ".", "encoder", "(", "inputs", ",", "training", ")", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", "=", "self", ".", "decoder", "(", "[", "z_what", ",", "z_where", ",", "z_depth", ",", "z_pres", ",", "z_pres_logits", ",", "tf", ".", "shape", "(", "inputs", ")", "]", ",", "training", ")", "\n", "bg_recon", "=", "0.0", "\n", "if", "self", ".", "model", "==", "'bg_spair'", ":", "\n", "            ", "bg_recon", ",", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", "=", "self", ".", "bg_model", "(", "inputs", ")", "\n", "x_recon", "=", "self", ".", "renderer", "(", "[", "obj_full_recon_unnorm", ",", "bg_recon", ",", "z_depth", ",", "z_pres", ",", "z_pres_logits", "]", ",", "training", ")", "\n", "return", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ")", "\n", "", "else", ":", "\n", "            ", "x_recon", "=", "self", ".", "renderer", "(", "[", "obj_full_recon_unnorm", ",", "bg_recon", ",", "z_depth", ",", "z_pres", ",", "z_pres_logits", "]", ",", "training", ")", "\n", "return", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.LGSPAIR.__init__": [[54, 82], ["tensorflow.keras.models.Model.__init__", "spair.Encoder", "spair.Decoder", "spair.Renderer", "spair.ImageEncoderDense", "spair.ImageDecoderDense", "spair.ImageEncoder", "spair.ImageDecoder", "spair.ImageEncoderDense", "spair.ImageDecoderDense", "spair.ImageEncoder", "spair.ImageDecoder"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", "=", "'LGSPAIR'", ")", ":", "\n", "        ", "super", "(", "LGSPAIR", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "image_size", ",", "test_size", ",", "object_size", ",", "latent_size", ",", "tau", ",", "bg_model", ",", "bg_latent_size", "=", "config", ".", "image_size", ",", "config", ".", "test_size", ",", "config", ".", "object_size", ",", "config", ".", "latent_size", ",", "config", ".", "tau", ",", "config", ".", "bg_model", ",", "config", ".", "bg_latent_size", "\n", "\n", "self", ".", "bg_model", "=", "bg_model", "\n", "self", ".", "concat_z_what", "=", "config", ".", "concat_z_what", "\n", "self", ".", "concat_backbone", "=", "config", ".", "concat_backbone", "\n", "self", ".", "concat_z_bg", "=", "config", ".", "concat_z_bg", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "object_size", ",", "latent_size", ",", "tau", ",", "concat", "=", "config", ".", "concat_backbone", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "image_size", ",", "test_size", ",", "object_size", ",", "latent_size", ")", "\n", "self", ".", "renderer", "=", "Renderer", "(", "num_channel", "=", "image_size", "[", "2", "]", ")", "\n", "\n", "if", "config", ".", "dense_bg", ":", "\n", "            ", "self", ".", "bg_encoder", "=", "ImageEncoderDense", "(", "image_size", ",", "bg_latent_size", ",", "name", "=", "'bg_encoder'", ")", "\n", "self", ".", "bg_decoder", "=", "ImageDecoderDense", "(", "image_size", ",", "bg_latent_size", "+", "config", ".", "local_latent_size", ",", "name", "=", "'bg_decoder'", ")", "# z_bg + z_l", "\n", "", "else", ":", "\n", "            ", "self", ".", "bg_encoder", "=", "ImageEncoder", "(", "image_size", ",", "bg_latent_size", ",", "name", "=", "'bg_encoder'", ")", "\n", "self", ".", "bg_decoder", "=", "ImageDecoder", "(", "image_size", ",", "bg_latent_size", "+", "config", ".", "local_latent_size", ",", "name", "=", "'bg_decoder'", ")", "# z_bg + z_l", "\n", "\n", "", "if", "config", ".", "dense_local", ":", "\n", "            ", "self", ".", "x_hat_encoder", "=", "ImageEncoderDense", "(", "image_size", ",", "config", ".", "local_latent_size", ",", "name", "=", "'x_hat_encoder'", ")", "\n", "self", ".", "x_hat_decoder", "=", "ImageDecoderDense", "(", "image_size", ",", "config", ".", "local_latent_size", ",", "name", "=", "'x_hat_decoder'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "x_hat_encoder", "=", "ImageEncoder", "(", "image_size", ",", "config", ".", "local_latent_size", ",", "name", "=", "'x_hat_encoder'", ")", "\n", "self", ".", "x_hat_decoder", "=", "ImageDecoder", "(", "image_size", ",", "config", ".", "local_latent_size", ",", "name", "=", "'x_hat_decoder'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.LGSPAIR.call": [[83, 107], ["spair.LGSPAIR.x_hat_encoder", "spair.LGSPAIR.bg_encoder", "spair.LGSPAIR.encoder", "spair.LGSPAIR.x_hat_decoder", "spair.LGSPAIR.bg_decoder", "spair.LGSPAIR.decoder", "spair.LGSPAIR.renderer", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape", "tensorflow.tile"], "methods", ["None"], ["", "", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "x_hat", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "inputs", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "\n", "z_l", ",", "z_l_mean", ",", "z_l_sig", "=", "self", ".", "x_hat_encoder", "(", "x_hat", ")", "# [B,latent//2]", "\n", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", "=", "self", ".", "bg_encoder", "(", "x", ")", "\n", "if", "self", ".", "concat_backbone", ":", "\n", "            ", "x", "=", "[", "x", ",", "z_l", "]", "\n", "", "(", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ")", "=", "self", ".", "encoder", "(", "x", ",", "training", ")", "\n", "\n", "x_hat_recon", "=", "self", ".", "x_hat_decoder", "(", "z_l", ")", "\n", "if", "self", ".", "concat_z_bg", ":", "\n", "            ", "z_bg", "=", "tf", ".", "concat", "(", "[", "z_bg", ",", "z_l", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "bg_recon", "=", "self", ".", "bg_decoder", "(", "z_bg", ")", "\n", "\n", "if", "self", ".", "concat_z_what", ":", "\n", "            ", "z_what", "=", "tf", ".", "concat", "(", "[", "z_what", ",", "tf", ".", "tile", "(", "z_l", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", "=", "self", ".", "decoder", "(", "[", "z_what", ",", "z_where", ",", "z_depth", ",", "z_pres", ",", "z_pres_logits", ",", "tf", ".", "shape", "(", "inputs", ")", "]", ",", "training", ")", "\n", "\n", "x_recon", "=", "self", ".", "renderer", "(", "[", "obj_full_recon_unnorm", ",", "bg_recon", ",", "z_depth", ",", "z_pres", ",", "z_pres_logits", "]", ",", "training", ")", "\n", "\n", "return", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageEncoder.__init__": [[111, 124], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "latent_size", ",", "name", "=", "'ImageEncoder'", ")", ":", "\n", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "self", ".", "num_channel", "=", "image_size", "[", "2", "]", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "e1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e3", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "\n", "self", ".", "z_mu", "=", "Dense", "(", "latent_size", ",", "activation", "=", "None", ")", "\n", "self", ".", "z_sigma", "=", "Dense", "(", "latent_size", ",", "activation", "=", "'softplus'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageEncoder.call": [[125, 133], ["spair.ImageEncoder.e3", "spair.ImageEncoder.flatten", "spair.ImageEncoder.z_mu", "spair.ImageEncoder.z_sigma", "spair.ImageEncoder.e2", "spair.ImageEncoder.e1", "tensorflow.random.normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "e3", "(", "self", ".", "e2", "(", "self", ".", "e1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "z_mean", "=", "self", ".", "z_mu", "(", "x", ")", "\n", "z_sig", "=", "self", ".", "z_sigma", "(", "x", ")", "\n", "z", "=", "z_mean", "+", "z_sig", "*", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_mean", ")", ")", "\n", "\n", "return", "z", ",", "z_mean", ",", "z_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageEncoderDense.__init__": [[136, 146], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Flatten"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "latent_size", ",", "name", "=", "'ImageEncoder'", ")", ":", "\n", "\n", "        ", "super", "(", "ImageEncoderDense", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "self", ".", "e1", "=", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e2", "=", "Dense", "(", "500", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "z_mu", "=", "Dense", "(", "latent_size", ",", "activation", "=", "None", ")", "\n", "self", ".", "z_sigma", "=", "Dense", "(", "latent_size", ",", "activation", "=", "'softplus'", ")", "\n", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageEncoderDense.call": [[147, 155], ["spair.ImageEncoderDense.flatten", "spair.ImageEncoderDense.e2", "spair.ImageEncoderDense.z_mu", "spair.ImageEncoderDense.z_sigma", "spair.ImageEncoderDense.e1", "tensorflow.random.normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "x", "=", "self", ".", "e2", "(", "self", ".", "e1", "(", "x", ")", ")", "\n", "z_mean", "=", "self", ".", "z_mu", "(", "x", ")", "\n", "z_sig", "=", "self", ".", "z_sigma", "(", "x", ")", "\n", "z", "=", "z_mean", "+", "z_sig", "*", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_mean", ")", ")", "\n", "\n", "return", "z", ",", "z_mean", ",", "z_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageDecoder.__init__": [[158, 170], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "latent_size", ",", "name", "=", "'ImageDecoder'", ")", ":", "\n", "\n", "        ", "super", "(", "ImageDecoder", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "self", ".", "num_channel", "=", "image_size", "[", "2", "]", "\n", "self", ".", "image_size", "=", "image_size", "\n", "\n", "self", ".", "d1", "=", "Dense", "(", "image_size", "[", "0", "]", "//", "8", "*", "image_size", "[", "1", "]", "//", "8", "*", "128", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d2", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d3", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d4", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'sigmoid'", ")", "\n", "self", ".", "d5", "=", "Conv2D", "(", "filters", "=", "self", ".", "num_channel", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'sigmoid'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageDecoder.call": [[171, 183], ["spair.ImageDecoder.d1", "tensorflow.reshape", "spair.ImageDecoder.d2", "tensorflow.image.resize", "spair.ImageDecoder.d3", "tensorflow.image.resize", "spair.ImageDecoder.d4", "tensorflow.image.resize", "spair.ImageDecoder.d5"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "d1", "(", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "image_size", "[", "0", "]", "//", "8", ",", "self", ".", "image_size", "[", "1", "]", "//", "8", ",", "128", "]", ")", "# 16,4,4,128", "\n", "x", "=", "self", ".", "d2", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_size", "[", "0", "]", "//", "4", ",", "self", ".", "image_size", "[", "1", "]", "//", "4", "]", ")", "#16,8,8,64", "\n", "x", "=", "self", ".", "d3", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_size", "[", "0", "]", "//", "2", ",", "self", ".", "image_size", "[", "1", "]", "//", "2", "]", ")", "#16,16,16,32", "\n", "x", "=", "self", ".", "d4", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_size", "[", "0", "]", ",", "self", ".", "image_size", "[", "1", "]", "]", ")", "#16,32,32,2", "\n", "x", "=", "self", ".", "d5", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageDecoderDense.__init__": [[186, 196], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "latent_size", ",", "name", "=", "'ImageDecoder'", ")", ":", "\n", "\n", "        ", "super", "(", "ImageDecoderDense", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "self", ".", "num_channel", "=", "image_size", "[", "2", "]", "\n", "self", ".", "image_size", "=", "image_size", "\n", "\n", "self", ".", "d1", "=", "Dense", "(", "500", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d2", "=", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d3", "=", "Dense", "(", "image_size", "[", "0", "]", "*", "image_size", "[", "1", "]", "*", "image_size", "[", "2", "]", ",", "activation", "=", "'sigmoid'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ImageDecoderDense.call": [[197, 203], ["spair.ImageDecoderDense.d3", "tensorflow.reshape", "spair.ImageDecoderDense.d2", "spair.ImageDecoderDense.d1"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "d3", "(", "self", ".", "d2", "(", "self", ".", "d1", "(", "x", ")", ")", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "image_size", "[", "0", "]", ",", "self", ".", "image_size", "[", "1", "]", ",", "self", ".", "image_size", "[", "2", "]", "]", ")", "\n", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.BackgroundModel.__init__": [[206, 225], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "bg_latent_size", ",", "num_channel", ",", "name", "=", "'BackgroundModel'", ")", ":", "\n", "\n", "        ", "super", "(", "BackgroundModel", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "\n", "self", ".", "num_channel", "=", "num_channel", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "e1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e3", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "\n", "self", ".", "z_bg_mu", "=", "Dense", "(", "bg_latent_size", ",", "activation", "=", "None", ")", "\n", "self", ".", "z_bg_sigma", "=", "Dense", "(", "bg_latent_size", ",", "activation", "=", "'softplus'", ")", "\n", "\n", "self", ".", "d1", "=", "Dense", "(", "image_size", "[", "0", "]", "//", "8", "*", "image_size", "[", "1", "]", "//", "8", "*", "128", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d2", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d3", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d4", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'sigmoid'", ")", "\n", "self", ".", "d5", "=", "Conv2D", "(", "filters", "=", "self", ".", "num_channel", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'sigmoid'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.BackgroundModel.call": [[226, 245], ["spair.BackgroundModel.e3", "spair.BackgroundModel.flatten", "spair.BackgroundModel.z_bg_mu", "spair.BackgroundModel.z_bg_sigma", "spair.BackgroundModel.d1", "tensorflow.reshape", "spair.BackgroundModel.d2", "tensorflow.image.resize", "spair.BackgroundModel.d3", "tensorflow.image.resize", "spair.BackgroundModel.d4", "tensorflow.image.resize", "spair.BackgroundModel.d5", "spair.BackgroundModel.e2", "spair.BackgroundModel.e1", "tensorflow.random.normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "e3", "(", "self", ".", "e2", "(", "self", ".", "e1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "z_bg_mean", "=", "self", ".", "z_bg_mu", "(", "x", ")", "\n", "z_bg_sig", "=", "self", ".", "z_bg_sigma", "(", "x", ")", "\n", "\n", "z_bg", "=", "z_bg_mean", "+", "z_bg_sig", "*", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_bg_mean", ")", ")", "\n", "\n", "x", "=", "self", ".", "d1", "(", "z_bg", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "image_size", "[", "0", "]", "//", "8", ",", "self", ".", "image_size", "[", "1", "]", "//", "8", ",", "128", "]", ")", "# 512,4,4,128", "\n", "x", "=", "self", ".", "d2", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_size", "[", "0", "]", "//", "4", ",", "self", ".", "image_size", "[", "1", "]", "//", "4", "]", ")", "#512,8,8,64", "\n", "x", "=", "self", ".", "d3", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_size", "[", "0", "]", "//", "2", ",", "self", ".", "image_size", "[", "1", "]", "//", "2", "]", ")", "#512,16,16,32", "\n", "x", "=", "self", ".", "d4", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_size", "[", "0", "]", ",", "self", ".", "image_size", "[", "1", "]", "]", ")", "#512,32,32,2", "\n", "x", "=", "self", ".", "d5", "(", "x", ")", "\n", "\n", "return", "x", ",", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ObjEncoder.__init__": [[247, 256], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", ",", "name", "=", "'objEncoder'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ObjEncoder", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "conv2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "dense1", "=", "Dense", "(", "latent_size", "*", "2", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "z_what_mu", "=", "Dense", "(", "latent_size", ",", "activation", "=", "None", ")", "\n", "self", ".", "z_what_sigma", "=", "Dense", "(", "latent_size", ",", "activation", "=", "'softplus'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ObjEncoder.call": [[258, 274], ["tensorflow.shape", "tensorflow.reshape", "spair.ObjEncoder.conv1", "spair.ObjEncoder.conv2", "spair.ObjEncoder.flatten", "spair.ObjEncoder.dense1", "spair.ObjEncoder.z_what_mu", "spair.ObjEncoder.z_what_sigma", "tensorflow.random.normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ",", "input_shape", "[", "3", "]", ",", "input_shape", "[", "4", "]", "]", ")", "\n", "x", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "h", "=", "self", ".", "dense1", "(", "x", ")", "\n", "z_what_mean", "=", "self", ".", "z_what_mu", "(", "h", ")", "\n", "z_what_sigma", "=", "self", ".", "z_what_sigma", "(", "h", ")", "\n", "\n", "epsilon", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_what_sigma", ")", ")", "\n", "z_what", "=", "z_what_mean", "+", "epsilon", "*", "z_what_sigma", "\n", "\n", "return", "z_what", ",", "z_what_mean", ",", "z_what_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ObjEncoderScramble.__init__": [[276, 292], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", ",", "patch_size", ",", "local_latent_size", ",", "name", "=", "'objEncoder'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ObjEncoderScramble", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "conv2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "dense1", "=", "Dense", "(", "latent_size", "*", "2", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "z_what_mu", "=", "Dense", "(", "latent_size", ",", "activation", "=", "None", ")", "\n", "self", ".", "z_what_sigma", "=", "Dense", "(", "latent_size", ",", "activation", "=", "'softplus'", ")", "\n", "\n", "self", ".", "x_hat_conv1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "x_hat_conv2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "x_hat_dense1", "=", "Dense", "(", "latent_size", "*", "2", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "z_l_mu", "=", "Dense", "(", "local_latent_size", ",", "activation", "=", "None", ")", "\n", "self", ".", "z_l_sigma", "=", "Dense", "(", "local_latent_size", ",", "activation", "=", "'softplus'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ObjEncoderScramble.call": [[294, 339], ["print", "tensorflow.shape", "tensorflow.reshape", "print", "tensorflow.image.extract_patches", "print", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.gather", "tensorflow.split", "tensorflow.concat", "tensorflow.convert_to_tensor", "print", "spair.ObjEncoderScramble.conv1", "spair.ObjEncoderScramble.conv2", "spair.ObjEncoderScramble.flatten", "spair.ObjEncoderScramble.dense1", "spair.ObjEncoderScramble.z_what_mu", "spair.ObjEncoderScramble.z_what_sigma", "tensorflow.random.normal", "spair.ObjEncoderScramble.x_hat_conv1", "spair.ObjEncoderScramble.x_hat_conv2", "spair.ObjEncoderScramble.flatten", "spair.ObjEncoderScramble.x_hat_dense1", "spair.ObjEncoderScramble.z_l_mu", "spair.ObjEncoderScramble.z_l_sigma", "tensorflow.random.normal", "tensorflow.reshape", "tensorflow.random.shuffle", "tensorflow.concat", "tensorflow.range", "tensorflow.unstack", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "\n", "        ", "print", "(", "'patch_size:'", ",", "self", ".", "patch_size", ")", "\n", "input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ",", "input_shape", "[", "3", "]", ",", "input_shape", "[", "4", "]", "]", ")", "\n", "\n", "num_patches", "=", "input_shape", "[", "2", "]", "*", "input_shape", "[", "3", "]", "//", "(", "self", ".", "patch_size", "**", "2", ")", "\n", "print", "(", "'num_patches:'", ",", "num_patches", ")", "\n", "patches", "=", "tf", ".", "image", ".", "extract_patches", "(", "inputs", ",", "sizes", "=", "[", "1", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", ",", "1", "]", ",", "rates", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "print", "(", "'patch shape:'", ",", "patches", ".", "shape", ")", "\n", "patches", "=", "tf", ".", "reshape", "(", "patches", ",", "[", "input_shape", "[", "0", "]", "*", "input_shape", "[", "1", "]", ",", "num_patches", ",", "self", ".", "patch_size", ",", "self", ".", "patch_size", ",", "input_shape", "[", "4", "]", "]", ")", "\n", "rand_idx", "=", "tf", ".", "reshape", "(", "tf", ".", "random", ".", "shuffle", "(", "tf", ".", "range", "(", "0", ",", "num_patches", ")", ")", ",", "[", "num_patches", "]", ")", "\n", "patches", "=", "tf", ".", "gather", "(", "patches", ",", "rand_idx", ",", "axis", "=", "1", ")", "#same shape but random patch location", "\n", "\n", "\n", "rows", "=", "tf", ".", "split", "(", "patches", ",", "inputs", ".", "shape", "[", "2", "]", "//", "self", ".", "patch_size", ",", "axis", "=", "1", ")", "#list of  batch*num_glimpse,4,patch_size,patch_size,3", "\n", "rows", "=", "[", "tf", ".", "concat", "(", "tf", ".", "unstack", "(", "x", ",", "axis", "=", "1", ")", ",", "axis", "=", "2", ")", "for", "x", "in", "rows", "]", "\n", "x_hat", "=", "tf", ".", "concat", "(", "rows", ",", "axis", "=", "1", ")", "\n", "x_hat", "=", "tf", ".", "convert_to_tensor", "(", "x_hat", ")", "\n", "print", "(", "'x_hat shape:'", ",", "x_hat", ".", "shape", ")", "\n", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "x", "=", "self", ".", "dense1", "(", "x", ")", "\n", "z_what_mean", "=", "self", ".", "z_what_mu", "(", "x", ")", "\n", "z_what_sigma", "=", "self", ".", "z_what_sigma", "(", "x", ")", "\n", "\n", "epsilon", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_what_sigma", ")", ")", "\n", "z_what", "=", "z_what_mean", "+", "epsilon", "*", "z_what_sigma", "\n", "\n", "z", "=", "self", ".", "x_hat_conv1", "(", "x_hat", ")", "\n", "z", "=", "self", ".", "x_hat_conv2", "(", "z", ")", "\n", "z", "=", "self", ".", "flatten", "(", "z", ")", "\n", "z", "=", "self", ".", "x_hat_dense1", "(", "z", ")", "\n", "z_l_mean", "=", "self", ".", "z_l_mu", "(", "z", ")", "\n", "z_l_sigma", "=", "self", ".", "z_l_sigma", "(", "z", ")", "\n", "\n", "epsilon", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_l_sigma", ")", ")", "\n", "z_l", "=", "z_l_mean", "+", "epsilon", "*", "z_l_sigma", "\n", "\n", "x_hat", "=", "tf", ".", "reshape", "(", "patches", ",", "[", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ",", "input_shape", "[", "3", "]", ",", "input_shape", "[", "4", "]", "]", ")", "\n", "\n", "return", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_l", ",", "z_l_mean", ",", "z_l_sigma", ",", "x_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ObjDecoder.__init__": [[342, 353], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "object_size", ",", "num_channel", ",", "latent_size", ",", "\n", "name", "=", "'ObjDecoder'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ObjDecoder", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "object_size", "=", "object_size", "\n", "self", ".", "num_channel", "=", "num_channel", "\n", "self", ".", "d0", "=", "Dense", "(", "latent_size", "*", "2", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d1", "=", "Dense", "(", "object_size", "//", "4", "*", "object_size", "//", "4", "*", "32", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d3", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d5", "=", "Conv2D", "(", "filters", "=", "self", ".", "num_channel", "+", "1", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "None", ")", "# recon + alpha channel", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.ObjDecoder.call": [[355, 367], ["spair.ObjDecoder.d0", "spair.ObjDecoder.d1", "tensorflow.reshape", "spair.ObjDecoder.d2", "tensorflow.image.resize", "spair.ObjDecoder.d3", "tensorflow.image.resize", "spair.ObjDecoder.d5", "tensorflow.sigmoid", "tensorflow.sigmoid"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "d0", "(", "inputs", ")", "\n", "x", "=", "self", ".", "d1", "(", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "object_size", "//", "4", ",", "self", ".", "object_size", "//", "4", ",", "32", "]", ")", "# 512,4,4,128", "\n", "x", "=", "self", ".", "d2", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "object_size", "//", "2", ",", "self", ".", "object_size", "//", "2", "]", ")", "#512,8,8,64", "\n", "x", "=", "self", ".", "d3", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "object_size", ",", "self", ".", "object_size", "]", ")", "#512,32,32,2", "\n", "x", "=", "self", ".", "d5", "(", "x", ")", "\n", "x_recon_unnorm", ",", "x_alpha", "=", "tf", ".", "sigmoid", "(", "x", "[", ":", ",", ":", ",", ":", ",", ":", "self", ".", "num_channel", "]", ")", ",", "tf", ".", "sigmoid", "(", "x", "[", ":", ",", ":", ",", ":", ",", "self", ".", "num_channel", ":", "]", ")", "\n", "\n", "return", "x_recon_unnorm", ",", "x_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.Encoder.__init__": [[369, 405], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.Sequential", "tensorflow.keras.Sequential", "tensorflow.keras.Sequential", "utils.Sampling", "utils.GumbelSM_Sampling", "utils.STN", "spair.ObjEncoderScramble", "spair.ObjEncoder", "tensorflow.keras.Sequential", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "object_size", ",", "latent_size", ",", "tau", ",", "concat", "=", "False", ",", "glimpse_local", "=", "False", ",", "patch_size", "=", "None", ",", "local_latent_size", "=", "None", ",", "name", "=", "'encoder'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "\n", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "n_z_where", "=", "4", "\n", "self", ".", "n_z_depth", "=", "1", "\n", "self", ".", "n_z_pres", "=", "1", "\n", "self", ".", "glimpse_local", "=", "glimpse_local", "\n", "self", ".", "latent_size", "=", "latent_size", "\n", "self", ".", "object_size", "=", "[", "object_size", ",", "object_size", "]", "\n", "\n", "self", ".", "conv1", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "conv2", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'SAME'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "conv3", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'SAME'", ",", "activation", "=", "'relu'", ")", "\n", "\n", "self", ".", "z1", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "1", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'VALID'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "z2", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "1", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'VALID'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "z3", "=", "Conv2D", "(", "filters", "=", "100", ",", "kernel_size", "=", "1", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'VALID'", ",", "activation", "=", "'relu'", ")", "\n", "\n", "self", ".", "n_pass_through_features", "=", "8", "\n", "\n", "self", ".", "dense_z_where", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", ",", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ",", "Dense", "(", "self", ".", "n_z_where", "*", "2", "+", "self", ".", "n_pass_through_features", ",", "activation", "=", "None", ")", "]", ")", "\n", "\n", "self", ".", "dense_z_depth", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ",", "Dense", "(", "self", ".", "n_z_depth", "*", "2", "+", "self", ".", "n_pass_through_features", ",", "activation", "=", "None", ")", "]", ")", "\n", "self", ".", "dense_z_pres", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ",", "Dense", "(", "self", ".", "n_z_pres", ",", "activation", "=", "None", ")", "]", ")", "\n", "\n", "self", ".", "g_sampling", "=", "Sampling", "(", ")", "\n", "self", ".", "gumbel_sampling", "=", "GumbelSM_Sampling", "(", "tau", "=", "self", ".", "tau", ")", "\n", "self", ".", "stn", "=", "STN", "(", "name", "=", "'encoder_stn'", ",", "H_out", "=", "object_size", ",", "W_out", "=", "object_size", ")", "\n", "if", "glimpse_local", ":", "\n", "            ", "self", ".", "obj_encoder", "=", "ObjEncoderScramble", "(", "latent_size", ",", "patch_size", ",", "local_latent_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "obj_encoder", "=", "ObjEncoder", "(", "latent_size", ")", "\n", "", "if", "concat", ":", "\n", "            ", "self", ".", "dense_z_l", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "Dense", "(", "16", ",", "activation", "=", "'relu'", ")", ",", "Dense", "(", "16", ",", "activation", "=", "'relu'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.Encoder.call": [[406, 497], ["isinstance", "spair.Encoder.conv1", "spair.Encoder.conv2", "spair.Encoder.conv3", "spair.Encoder.z1", "spair.Encoder.z2", "spair.Encoder.z3", "isinstance", "tensorflow.split", "tensorflow.math.softplus", "spair.Encoder.g_sampling", "tensorflow.reshape", "tensorflow.nn.relu", "spair.Encoder.stn", "spair.Encoder.obj_encoder", "tensorflow.concat", "tensorflow.concat", "tensorflow.split", "tensorflow.math.softplus", "spair.Encoder.g_sampling", "tensorflow.concat", "tensorflow.nn.relu", "tensorflow.concat", "tensorflow.clip_by_value", "utils.concrete_binary_pre_sigmoid_sample", "tensorflow.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "spair.Encoder.dense_z_l", "tensorflow.tile", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "spair.Encoder.dense_z_where", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "spair.Encoder.dense_z_depth", "spair.Encoder.dense_z_pres", "tensorflow.constant", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.spair.utils.concrete_binary_pre_sigmoid_sample"], ["", "", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "x", ",", "z_l", "=", "inputs", "\n", "z_l", "=", "self", ".", "dense_z_l", "(", "z_l", ")", "\n", "z_l", "=", "tf", ".", "tile", "(", "z_l", "[", ":", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "16", ",", "1", "]", ")", "\n", "z_l", "=", "tf", ".", "reshape", "(", "z_l", ",", "[", "-", "1", ",", "z_l", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "inputs", "\n", "\n", "", "h", "=", "self", ".", "conv1", "(", "x", ")", "\n", "h", "=", "self", ".", "conv2", "(", "h", ")", "\n", "h", "=", "self", ".", "conv3", "(", "h", ")", "\n", "h", "=", "self", ".", "z1", "(", "h", ")", "\n", "h", "=", "self", ".", "z2", "(", "h", ")", "\n", "z", "=", "self", ".", "z3", "(", "h", ")", "\n", "\n", "\n", "\n", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "features_vector", "=", "tf", ".", "concat", "(", "[", "tf", ".", "reshape", "(", "z", ",", "[", "-", "1", ",", "z", ".", "shape", "[", "-", "1", "]", "]", ")", ",", "z_l", "]", ",", "axis", "=", "-", "1", ")", "#flatten to [Batch*cells_num, features]", "\n", "", "else", ":", "\n", "            ", "features_vector", "=", "tf", ".", "reshape", "(", "z", ",", "[", "-", "1", ",", "z", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "# box network", "\n", "", "z_where_mean", ",", "z_where_sigma", ",", "features_1", "=", "tf", ".", "split", "(", "self", ".", "dense_z_where", "(", "features_vector", ")", ",", "[", "self", ".", "n_z_where", ",", "self", ".", "n_z_where", ",", "self", ".", "n_pass_through_features", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "z_where_sigma", "=", "tf", ".", "math", ".", "softplus", "(", "z_where_sigma", "-", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "z_where_sigma", ".", "shape", ")", ")", "\n", "z_where", "=", "self", ".", "g_sampling", "(", "[", "z_where_mean", ",", "z_where_sigma", "]", ")", "\n", "\n", "\n", "partial_program", "=", "z_where", "\n", "z_where", "=", "tf", ".", "reshape", "(", "z_where", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "self", ".", "n_z_where", "]", ")", "\n", "\n", "\n", "features_1", "=", "tf", ".", "nn", ".", "relu", "(", "features_1", ")", "\n", "\n", "#attr network", "\n", "all_glimpses", ",", "_", "=", "self", ".", "stn", "(", "[", "x", ",", "z_where", "]", ")", "\n", "obj_output", "=", "self", ".", "obj_encoder", "(", "all_glimpses", ",", "training", ")", "\n", "if", "not", "self", ".", "glimpse_local", ":", "\n", "            ", "z_what", ",", "z_what_mean", ",", "z_what_sigma", "=", "obj_output", "\n", "", "else", ":", "\n", "            ", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_l", ",", "z_l_mean", ",", "z_l_sigma", ",", "x_hat", "=", "obj_output", "\n", "z_l", "=", "tf", ".", "reshape", "(", "z_l", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_l_sigma", "=", "tf", ".", "reshape", "(", "z_l_sigma", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_l_mean", "=", "tf", ".", "reshape", "(", "z_l_mean", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "\n", "\n", "", "partial_program", "=", "tf", ".", "concat", "(", "[", "partial_program", ",", "z_what", "]", ",", "axis", "=", "1", ")", "\n", "layer_inp", "=", "tf", ".", "concat", "(", "[", "features_vector", ",", "features_1", ",", "partial_program", "]", ",", "axis", "=", "1", ")", "\n", "\n", "#z_depth_network", "\n", "z_depth_mean", ",", "z_depth_sigma", ",", "features_2", "=", "tf", ".", "split", "(", "self", ".", "dense_z_depth", "(", "layer_inp", ")", ",", "[", "self", ".", "n_z_depth", ",", "self", ".", "n_z_depth", ",", "self", ".", "n_pass_through_features", "]", ",", "axis", "=", "-", "1", ")", "# self.dense_z_depth(layer_inp)", "\n", "z_depth_sigma", "=", "tf", ".", "math", ".", "softplus", "(", "z_depth_sigma", ")", "\n", "z_depth", "=", "self", ".", "g_sampling", "(", "[", "z_depth_mean", ",", "z_depth_sigma", "]", ")", "\n", "partial_program", "=", "tf", ".", "concat", "(", "[", "partial_program", ",", "z_depth", "]", ",", "axis", "=", "1", ")", "\n", "\n", "features_2", "=", "tf", ".", "nn", ".", "relu", "(", "features_2", ")", "\n", "layer_inp", "=", "tf", ".", "concat", "(", "[", "features_vector", ",", "features_2", ",", "partial_program", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# z_pres_network", "\n", "z_pres_logits", "=", "tf", ".", "clip_by_value", "(", "self", ".", "dense_z_pres", "(", "layer_inp", ")", ",", "-", "10.", ",", "10.", ")", "\n", "z_pres_pre_sigmoid", "=", "concrete_binary_pre_sigmoid_sample", "(", "z_pres_logits", ",", "self", ".", "tau", ")", "\n", "z_pres", "=", "tf", ".", "sigmoid", "(", "z_pres_pre_sigmoid", ")", "\n", "\n", "# reshape", "\n", "z_what", "=", "tf", ".", "reshape", "(", "z_what", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_what_sigma", "=", "tf", ".", "reshape", "(", "z_what_sigma", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_what_mean", "=", "tf", ".", "reshape", "(", "z_what_mean", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "\n", "z_where", "=", "tf", ".", "reshape", "(", "z_where", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_where_sigma", "=", "tf", ".", "reshape", "(", "z_where_sigma", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_where_mean", "=", "tf", ".", "reshape", "(", "z_where_mean", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "\n", "z_depth", "=", "tf", ".", "reshape", "(", "z_depth", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_depth_sigma", "=", "tf", ".", "reshape", "(", "z_depth_sigma", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_depth_mean", "=", "tf", ".", "reshape", "(", "z_depth_mean", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "z_pres", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_pres_logits", "=", "tf", ".", "reshape", "(", "z_pres_logits", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "z_pres_pre_sigmoid", "=", "tf", ".", "reshape", "(", "z_pres_pre_sigmoid", ",", "[", "z", ".", "shape", "[", "0", "]", ",", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "\n", "\n", "if", "self", ".", "glimpse_local", ":", "\n", "\n", "            ", "return", "(", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n", "z_l", ",", "z_l_mean", ",", "z_l_sigma", ",", "x_hat", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.Decoder.__init__": [[501, 510], ["tensorflow.keras.layers.Layer.__init__", "spair.ObjDecoder", "utils.STN", "spair.Renderer"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_size", ",", "test_size", ",", "object_size", ",", "latent_size", ",", "name", "=", "'decoder'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "object_size", "=", "object_size", "\n", "self", ".", "num_channel", "=", "image_size", "[", "2", "]", "\n", "\n", "self", ".", "obj_decoder", "=", "ObjDecoder", "(", "object_size", ",", "self", ".", "num_channel", ",", "latent_size", ")", "\n", "self", ".", "stn", "=", "STN", "(", "name", "=", "'decoder_stn'", ",", "inverse", "=", "True", ",", "H_out", "=", "image_size", "[", "0", "]", ",", "W_out", "=", "image_size", "[", "1", "]", ")", "\n", "# self.stn_test = STN(name='decoder_stn_test', inverse=True, H_out=test_size[0], W_out=test_size[1])", "\n", "self", ".", "renderer", "=", "Renderer", "(", "self", ".", "num_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.Decoder.call": [[514, 533], ["spair.Decoder.obj_decoder", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "spair.Decoder.stn", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "\n", "        ", "z_what", ",", "z_where", ",", "z_depth", ",", "z_pres", ",", "z_pres_logits", ",", "output_shape", "=", "inputs", "\n", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", "=", "self", ".", "obj_decoder", "(", "z_what", ",", "training", ")", "\n", "# print('Object recon shape:',obj_recon_unnorm.shape)", "\n", "\n", "H_obj", "=", "tf", ".", "shape", "(", "z_where", ")", "[", "1", "]", "\n", "W_obj", "=", "tf", ".", "shape", "(", "z_where", ")", "[", "2", "]", "\n", "\n", "obj_recon_unnorm", "=", "tf", ".", "reshape", "(", "obj_recon_unnorm", ",", "[", "-", "1", ",", "H_obj", "*", "W_obj", ",", "self", ".", "object_size", ",", "self", ".", "object_size", ",", "self", ".", "num_channel", "]", ")", "# H_obj*W_obj = num cells", "\n", "obj_recon_alpha", "=", "tf", ".", "reshape", "(", "obj_recon_alpha", ",", "[", "-", "1", ",", "H_obj", "*", "W_obj", ",", "self", ".", "object_size", ",", "self", ".", "object_size", ",", "1", "]", ")", "\n", "\n", "concat_recon_alpha", "=", "tf", ".", "concat", "(", "[", "obj_recon_unnorm", ",", "obj_recon_alpha", "]", ",", "axis", "=", "4", ")", "# STACK Channel", "\n", "\n", "obj_full_recon_unnorm", ",", "obj_bbox_mask", "=", "self", ".", "stn", "(", "[", "concat_recon_alpha", ",", "z_where", "]", ")", "\n", "\n", "\n", "return", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.Renderer.__init__": [[535, 541], ["tensorflow.keras.layers.Layer.__init__", "tensorflow.keras.layers.GaussianNoise"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channel", ",", "name", "=", "'Renderer'", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "Renderer", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "num_channel", "=", "num_channel", "\n", "self", ".", "g_noise", "=", "GaussianNoise", "(", "0.01", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.Renderer.call": [[542, 580], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid", "tensorflow.maximum", "spair.Renderer.g_noise", "tensorflow.reduce_sum", "tensorflow.round", "tensorflow.constant", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "obj_full_recon_unnorm", "=", "inputs", "[", "0", "]", "#[B, 256, 128, 128, C+1]", "\n", "\n", "background_img", "=", "inputs", "[", "1", "]", "\n", "z_depth", "=", "inputs", "[", "2", "]", "#[B, 16, 16, 1] ", "\n", "z_pres", "=", "inputs", "[", "3", "]", "#[B, 16, 16, 1]", "\n", "if", "not", "training", ":", "\n", "            ", "z_pres", "=", "tf", ".", "nn", ".", "sigmoid", "(", "inputs", "[", "4", "]", ")", "# use z_pres_logits during test", "\n", "\n", "", "z_shape", "=", "tf", ".", "shape", "(", "z_depth", ")", "\n", "B", "=", "z_shape", "[", "0", "]", "\n", "Bp", "=", "z_shape", "[", "1", "]", "*", "z_shape", "[", "2", "]", "\n", "\n", "z_depth", "=", "tf", ".", "reshape", "(", "z_depth", ",", "[", "B", ",", "Bp", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "z_pres", ",", "[", "B", ",", "Bp", ",", "1", ",", "1", ",", "1", "]", ")", "# [:, :, :, :, :1]  #[B, 256, 1, 1, 1]", "\n", "if", "not", "training", ":", "\n", "            ", "z_pres", "=", "tf", ".", "maximum", "(", "tf", ".", "round", "(", "z_pres", ")", ",", "tf", ".", "constant", "(", "1e-8", ",", "shape", "=", "z_pres", ".", "shape", ")", ")", "\n", "\n", "", "obj_recon_image", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "self", ".", "num_channel", "]", "\n", "obj_recon_alpha", "=", "tf", ".", "clip_by_value", "(", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", "self", ".", "num_channel", ":", "]", ",", "1e-8", ",", "1.", ")", "\n", "\n", "\n", "transparency_map", "=", "z_pres", "*", "obj_recon_alpha", "# [B, 256, 1, 1, 1] * [B, 256, 128, 128, 1] # per pixel density", "\n", "importance_map", "=", "z_pres", "*", "obj_recon_alpha", "*", "(", "tf", ".", "nn", ".", "sigmoid", "(", "-", "z_depth", ")", "+", "0.5", ")", "#[B, 256, 1, 1, 1] ", "\n", "\n", "obj_recon_image", "=", "tf", ".", "clip_by_value", "(", "self", ".", "g_noise", "(", "obj_recon_image", ",", "training", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "unnorm_canvas", "=", "tf", ".", "reduce_sum", "(", "importance_map", "*", "obj_recon_image", ",", "axis", "=", "1", ")", "# [B, 256, 128, 128, C] ->[B, 128, 128, C]", "\n", "normalise_const", "=", "tf", ".", "reduce_sum", "(", "importance_map", ",", "axis", "=", "1", ")", "# [B, 256, 1, 1, 1] * [B, 256, 1, 1, 1] * [B, 256, 128, 128, 1] -> [B,128,128,C]", "\n", "normalised_canvas", "=", "unnorm_canvas", "/", "(", "normalise_const", "+", "1e-8", ")", "# no Bp", "\n", "\n", "normalised_alpha_canvas", "=", "tf", ".", "reduce_sum", "(", "transparency_map", "*", "importance_map", ",", "axis", "=", "1", ")", "/", "(", "normalise_const", "+", "1e-8", ")", "\n", "\n", "canvas_with_bg", "=", "normalised_alpha_canvas", "*", "normalised_canvas", "+", "(", "1.", "-", "normalised_alpha_canvas", ")", "*", "background_img", "\n", "\n", "\n", "\n", "return", "canvas_with_bg", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.spair.get_model": [[8, 18], ["print", "spair.LGSPAIR", "spair.SPAIR", "LGGlimpseSPAIR", "NotImplementedError"], "function", ["None"], ["def", "get_model", "(", "config", ")", ":", "\n", "    ", "print", "(", "'config.model:'", ",", "config", ".", "model", ")", "\n", "if", "config", ".", "model", "==", "'lg_spair'", ":", "\n", "        ", "return", "LGSPAIR", "(", "config", ")", "\n", "", "elif", "config", ".", "model", "==", "'spair'", "or", "config", ".", "model", "==", "'bg_spair'", ":", "\n", "        ", "return", "SPAIR", "(", "config", ")", "\n", "", "elif", "config", ".", "model", "==", "'lg_glimpse_spair'", ":", "\n", "        ", "return", "LGGlimpseSPAIR", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model type not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.Sampling.call": [[20, 25], ["tensorflow.random.normal", "tensorflow.shape"], "methods", ["None"], ["    ", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "z_mean", ",", "z_sigma", "=", "inputs", "\n", "epsilon", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_sigma", ")", ")", "\n", "\n", "return", "z_mean", "+", "z_sigma", "*", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.__init__": [[30, 33], ["tensorflow.keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'GumbelSM'", ",", "tau", "=", "0.4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GumbelSM_Sampling", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax": [[34, 39], ["tensorflow.reduce_max", "tensorflow.exp", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "logits", ",", "axis", ")", ":", "\n", "            ", "x", "=", "logits", "/", "self", ".", "tau", "\n", "b", "=", "tf", ".", "reduce_max", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "exp_logits", "=", "tf", ".", "exp", "(", "x", "-", "b", ")", "\n", "return", "exp_logits", "/", "tf", ".", "reduce_sum", "(", "exp_logits", ",", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.call": [[40, 45], ["utils.GumbelSM_Sampling.softmax", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.random.uniform", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "# beta_logits = inputs", "\n", "\n", "        ", "G", "=", "-", "tf", ".", "math", ".", "log", "(", "-", "tf", ".", "math", ".", "log", "(", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "tf", ".", "shape", "(", "inputs", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ")", ")", ")", "\n", "return", "self", ".", "softmax", "(", "inputs", "+", "G", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.__init__": [[51, 64], ["tensorflow.keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "'STN'", ",", "inverse", "=", "False", ",", "H_out", "=", "32", ",", "W_out", "=", "32", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "STN", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "inverse", "=", "inverse", "\n", "self", ".", "H_img", "=", "H_out", "\n", "self", ".", "W_img", "=", "W_out", "\n", "\"\"\"\n        if self.inverse:\n            self.H_img, self.W_img = H_img, W_img = IMAGE_SIZE_Y, IMAGE_SIZE_X\n        else:\n            self.H_img, self.W_img = H_img, W_img = GRID_SIZE_Y, GRID_SIZE_X # the number of points in grid \n\t\t\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.build": [[65, 117], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.ones_like", "tensorflow.expand_dims", "numpy.zeros", "numpy.zeros", "range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stack", "range", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"\n        This function create the Grid points with size equal to the output size.\n        Also, this function generates lists for (tx, ty) which specify the origin of each SPAIR object. \n\n        \"\"\"", "\n", "\n", "\n", "z_where_shape", "=", "input_shape", "[", "1", "]", "\n", "\n", "H_obj", ",", "W_obj", "=", "z_where_shape", "[", "1", "]", ",", "z_where_shape", "[", "2", "]", "\n", "\n", "H_img", "=", "self", ".", "H_img", "\n", "W_img", "=", "self", ".", "W_img", "\n", "\n", "# normal grid", "\n", "x", "=", "np", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "W_img", ")", "\n", "y", "=", "np", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "H_img", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "x_grids", "=", "tf", ".", "convert_to_tensor", "(", "X", ",", "dtype", "=", "tf", ".", "float32", ")", "#[W_img, H_img]", "\n", "y_grids", "=", "tf", ".", "convert_to_tensor", "(", "Y", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "x_grids", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reshape", "(", "x_grids", ",", "[", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_grids", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reshape", "(", "y_grids", ",", "[", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "#[1, H_img*W_img]", "\n", "\n", "x_grids", "=", "tf", ".", "tile", "(", "x_grids", ",", "[", "H_obj", "*", "W_obj", ",", "1", "]", ")", "\n", "y_grids", "=", "tf", ".", "tile", "(", "y_grids", ",", "[", "H_obj", "*", "W_obj", ",", "1", "]", ")", "#[B', H_img*W_img]", "\n", "\n", "ones", "=", "tf", ".", "ones_like", "(", "x_grids", ")", "# [B', H_img*W_img]", "\n", "\n", "self", ".", "sampling_grids", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "[", "x_grids", ",", "y_grids", ",", "ones", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "#[1, B', 3, H_img*W_img]", "\n", "\n", "self", ".", "Bp", "=", "H_obj", "*", "W_obj", "\n", "\n", "bias_tx", "=", "np", ".", "zeros", "(", "[", "H_obj", ",", "W_obj", "]", ")", "\n", "bias_ty", "=", "np", ".", "zeros", "(", "[", "H_obj", ",", "W_obj", "]", ")", "\n", "\n", "self", ".", "cell_width_ratio", "=", "(", "2.0", "*", "12", ")", "/", "48", "# HACK todo", "\n", "self", ".", "cell_height_ratio", "=", "(", "2.0", "*", "12", ")", "/", "48", "\n", "\n", "for", "i", "in", "range", "(", "H_obj", ")", ":", "\n", "            ", "i_p", "=", "(", "2.", "-", "self", ".", "cell_height_ratio", ")", "*", "i", "/", "(", "H_obj", "-", "1", ")", "-", "(", "1", "-", "0.5", "*", "self", ".", "cell_height_ratio", ")", "#put bias in the middle of the cell", "\n", "#i_p = 2.*i/(H_obj - 1.) - 1.", "\n", "for", "j", "in", "range", "(", "W_obj", ")", ":", "\n", "                ", "j_p", "=", "(", "2.", "-", "self", ".", "cell_width_ratio", ")", "*", "j", "/", "(", "W_obj", "-", "1", ")", "-", "(", "1", "-", "0.5", "*", "self", ".", "cell_width_ratio", ")", "\n", "#j_p = 2.*j/(W_obj - 1.) - 1. ", "\n", "\n", "bias_ty", "[", "i", ",", "j", "]", "=", "i_p", "\n", "bias_tx", "[", "i", ",", "j", "]", "=", "j_p", "\n", "\n", "", "", "self", ".", "bias_tx", "=", "tf", ".", "expand_dims", "(", "tf", ".", "convert_to_tensor", "(", "bias_tx", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "axis", "=", "0", ")", "#[1, H_obj, W_obj]", "\n", "self", ".", "bias_ty", "=", "tf", ".", "expand_dims", "(", "tf", ".", "convert_to_tensor", "(", "bias_ty", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "axis", "=", "0", ")", "#[1, H_obj, W_obj] ", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.call": [[119, 201], ["tensorflow.shape", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.zeros_like", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.tile", "tensorflow.matmul", "tensorflow.reshape", "utils.STN.bilinear_sampler", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.constant", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.bilinear_sampler"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "\"\"\"\n        This function:\n        1. take the grid and do affine transformation according to the parameters sx, sy, tx, ty\n        2. perform bilinear sampling using the grid\n        \"\"\"", "\n", "\n", "x", ",", "z_where", "=", "inputs", "\n", "# z_where :: [batch, H, W, 4]", "\n", "# z_where[0,0,0,:] :: x_offset, y_offset, box_width, box_height", "\n", "# transform this parameterisation into sx, sy, tx, ty for STN", "\n", "\n", "\n", "\n", "shape", "=", "tf", ".", "shape", "(", "z_where", ")", "\n", "B", "=", "shape", "[", "0", "]", "\n", "Bp", "=", "self", ".", "Bp", "\n", "\n", "H_img", "=", "self", ".", "H_img", "\n", "W_img", "=", "self", ".", "W_img", "\n", "\n", "\n", "sx", "=", "0.5", "*", "tf", ".", "nn", ".", "sigmoid", "(", "z_where", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "# 0 < sx < s_max / avoid reflection", "\n", "sy", "=", "0.5", "*", "tf", ".", "nn", ".", "sigmoid", "(", "z_where", "[", ":", ",", ":", ",", ":", ",", "1", "]", ")", "# 0 < sy < s_max / ", "\n", "tx", "=", "0.5", "*", "tf", ".", "nn", ".", "tanh", "(", "z_where", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "+", "self", ".", "bias_tx", "# offset limit ?", "\n", "ty", "=", "0.5", "*", "tf", ".", "nn", ".", "tanh", "(", "z_where", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "+", "self", ".", "bias_ty", "# [B, H_obj, W_obj] ", "\n", "\n", "box_height", "=", "sy", "/", "tf", ".", "constant", "(", "2.0", ")", "\n", "box_height", "=", "box_height", "[", ":", ",", ":", ",", ":", ",", "tf", ".", "newaxis", "]", "\n", "box_width", "=", "sx", "/", "tf", ".", "constant", "(", "2.0", ")", "\n", "box_width", "=", "box_width", "[", ":", ",", ":", ",", ":", ",", "tf", ".", "newaxis", "]", "\n", "bbox_ty", "=", "(", "ty", "[", ":", ",", ":", ",", ":", ",", "tf", ".", "newaxis", "]", "+", "tf", ".", "constant", "(", "1.0", ")", ")", "/", "2.0", "\n", "bbox_tx", "=", "(", "tx", "[", ":", ",", ":", ",", ":", ",", "tf", ".", "newaxis", "]", "+", "tf", ".", "constant", "(", "1.0", ")", ")", "/", "2.0", "\n", "obj_bbox_mask", "=", "tf", ".", "concat", "(", "[", "bbox_ty", "-", "box_height", ",", "bbox_tx", "-", "box_width", ",", "bbox_ty", "+", "box_height", ",", "bbox_tx", "+", "box_width", "]", ",", "axis", "=", "-", "1", ")", "# [B,4,4,4]", "\n", "# print('obj_bbox_mask.shape:',obj_bbox_mask.shape)", "\n", "obj_bbox_mask", "=", "tf", ".", "reshape", "(", "obj_bbox_mask", ",", "[", "obj_bbox_mask", ".", "shape", "[", "0", "]", ",", "obj_bbox_mask", ".", "shape", "[", "1", "]", "*", "obj_bbox_mask", ".", "shape", "[", "2", "]", ",", "obj_bbox_mask", ".", "shape", "[", "3", "]", "]", ")", "#[B,B',4]", "\n", "# print('obj_bbox_mask.shape:',obj_bbox_mask.shape)", "\n", "\n", "if", "self", ".", "inverse", ":", "\n", "            ", "tx", "=", "-", "tx", "/", "(", "sx", "+", "1e-5", ")", "\n", "ty", "=", "-", "ty", "/", "(", "sy", "+", "1e-5", ")", "\n", "sx", "=", "1", "/", "(", "sx", "+", "1e-5", ")", "\n", "sy", "=", "1", "/", "(", "sy", "+", "1e-5", ")", "\n", "\n", "# theta_in = tf.transpose(tf.stack([sx,sy,tx,ty]),[1,2,3,0]) # [4,B,cell_y,cell_x] -> [B,cell_y,cell_x,4]", "\n", "# theta_in = tf.reshape(theta_in,[-1,4]) #flatten", "\n", "# theta = self.dense(theta_in)", "\n", "\n", "# sx = theta[:,0]", "\n", "# sy = theta[:,1]", "\n", "# tx = theta[:,2]", "\n", "# ty = theta[:,3]", "\n", "\n", "# sx = 0.5 * tf.nn.sigmoid(sx)", "\n", "# sy = 0.5 * tf.nn.sigmoid(sy)", "\n", "# tx = tf.nn.tanh(tx) + self.bias_tx", "\n", "# ty = tf.nn.tanh(ty) + self.bias_ty", "\n", "\n", "\n", "#(x,y) = A * (x,y,1)", "\n", "", "sx", "=", "tf", ".", "reshape", "(", "sx", ",", "[", "B", ",", "Bp", "]", ")", "#from [B, H_obj, W_obj] --> [B, B']", "\n", "sy", "=", "tf", ".", "reshape", "(", "sy", ",", "[", "B", ",", "Bp", "]", ")", "#", "\n", "tx", "=", "tf", ".", "reshape", "(", "tx", ",", "[", "B", ",", "Bp", "]", ")", "\n", "ty", "=", "tf", ".", "reshape", "(", "ty", ",", "[", "B", ",", "Bp", "]", ")", "\n", "zeros", "=", "tf", ".", "zeros_like", "(", "sx", ")", "\n", "\n", "\n", "A_top", "=", "tf", ".", "stack", "(", "[", "sx", ",", "zeros", ",", "tx", "]", ",", "axis", "=", "2", ")", "# [B, B', 3]", "\n", "A_bottom", "=", "tf", ".", "stack", "(", "[", "zeros", ",", "sy", ",", "ty", "]", ",", "axis", "=", "2", ")", "# [B, B', 3]", "\n", "A", "=", "tf", ".", "stack", "(", "[", "A_top", ",", "A_bottom", "]", ",", "axis", "=", "2", ")", "# [B, B', 2, 3]", "\n", "\n", "sampling_grids", "=", "tf", ".", "tile", "(", "self", ".", "sampling_grids", ",", "[", "B", ",", "1", ",", "1", ",", "1", "]", ")", "#[B, B', 3, H_img*W_img]", "\n", "\n", "batch_grids", "=", "tf", ".", "matmul", "(", "A", ",", "sampling_grids", ")", "#[B, B', 2, H_img*W_img]", "\n", "\n", "batch_grids", "=", "tf", ".", "reshape", "(", "batch_grids", ",", "[", "B", ",", "Bp", ",", "2", ",", "H_img", ",", "W_img", "]", ")", "\n", "\n", "\n", "outputs", "=", "self", ".", "bilinear_sampler", "(", "x", ",", "batch_grids", ")", "#[B, B', H_img, W_img, C]", "\n", "\n", "return", "outputs", ",", "obj_bbox_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.bilinear_sampler": [[202, 273], ["tensorflow.cast", "tensorflow.cast", "tensorflow.floor", "tensorflow.floor", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "utils.STN.get_pixel_value", "utils.STN.get_pixel_value", "utils.STN.get_pixel_value", "utils.STN.get_pixel_value", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.add_n", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.get_pixel_value", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.get_pixel_value", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.get_pixel_value", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.get_pixel_value"], ["", "@", "tf", ".", "function", "\n", "def", "bilinear_sampler", "(", "self", ",", "img", ",", "batch_grids", ")", ":", "\n", "        ", "\"\"\"\n        At each point in the Grid, \n        we map that into the position in the original image.\n        We gather 4 corner pixel of the gridpoint and do bilinear interpolation. \n        \"\"\"", "\n", "if", "self", ".", "inverse", ":", "\n", "            ", "input_shape", "=", "tf", ".", "shape", "(", "img", ")", "# [B, B', H, W, C]", "\n", "H_x", ",", "W_x", "=", "input_shape", "[", "2", "]", ",", "input_shape", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "tf", ".", "shape", "(", "img", ")", "# [B, H, W, C]", "\n", "H_x", ",", "W_x", "=", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", "\n", "\n", "\n", "", "x", "=", "batch_grids", "[", ":", ",", ":", ",", "0", ",", ":", ",", ":", "]", "# [B, B', H, W]", "\n", "y", "=", "batch_grids", "[", ":", ",", ":", ",", "1", ",", ":", ",", ":", "]", "# [B, B', H, W]", "\n", "\n", "\n", "W_xf", "=", "tf", ".", "cast", "(", "W_x", ",", "tf", ".", "float32", ")", "\n", "H_xf", "=", "tf", ".", "cast", "(", "H_x", ",", "tf", ".", "float32", ")", "\n", "\n", "# rescale x,y with Ht and Wt", "\n", "x", "=", "0.5", "*", "(", "x", "+", "1.0", ")", "*", "(", "W_xf", "-", "1", ")", "#* tf.cast(W_x - 1, tf.float32) # [0, W-1]", "\n", "y", "=", "0.5", "*", "(", "y", "+", "1.0", ")", "*", "(", "H_xf", "-", "1", ")", "#tf.cast(H_x - 1, tf.float32) # [0, H-1]", "\n", "\n", "# grab four nearest corner ", "\n", "x0", "=", "tf", ".", "floor", "(", "x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "floor", "(", "y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "\n", "# clip to range [0, H/W] to not violate img boundaries", "\n", "x0", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "0.", ",", "W_xf", "-", "1", ")", "\n", "x1", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "0.", ",", "W_xf", "-", "1", ")", "\n", "y0", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "0.", ",", "H_xf", "-", "1", ")", "\n", "y1", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "0.", ",", "H_xf", "-", "1", ")", "\n", "\n", "\n", "# calculate deltas", "\n", "wa", "=", "(", "x1", "-", "x", ")", "*", "(", "y1", "-", "y", ")", "\n", "wb", "=", "(", "x1", "-", "x", ")", "*", "(", "y", "-", "y0", ")", "\n", "wc", "=", "(", "x", "-", "x0", ")", "*", "(", "y1", "-", "y", ")", "\n", "wd", "=", "(", "x", "-", "x0", ")", "*", "(", "y", "-", "y0", ")", "\n", "# delta has to be zero if the pixel violate boundaries", "\n", "\n", "\n", "#recast as int for index calculation", "\n", "x0", "=", "tf", ".", "cast", "(", "x0", ",", "'int32'", ")", "\n", "x1", "=", "tf", ".", "cast", "(", "x1", ",", "'int32'", ")", "\n", "y0", "=", "tf", ".", "cast", "(", "y0", ",", "'int32'", ")", "\n", "y1", "=", "tf", ".", "cast", "(", "y1", ",", "'int32'", ")", "\n", "\n", "\n", "# get pixel value at corner coords", "\n", "Ia", "=", "self", ".", "get_pixel_value", "(", "img", ",", "x0", ",", "y0", ")", "# (B, B', H_img, W_img, C)", "\n", "Ib", "=", "self", ".", "get_pixel_value", "(", "img", ",", "x0", ",", "y1", ")", "\n", "Ic", "=", "self", ".", "get_pixel_value", "(", "img", ",", "x1", ",", "y0", ")", "\n", "Id", "=", "self", ".", "get_pixel_value", "(", "img", ",", "x1", ",", "y1", ")", "\n", "\n", "# add dimension for addition", "\n", "wa", "=", "tf", ".", "expand_dims", "(", "wa", ",", "axis", "=", "4", ")", "\n", "wb", "=", "tf", ".", "expand_dims", "(", "wb", ",", "axis", "=", "4", ")", "\n", "wc", "=", "tf", ".", "expand_dims", "(", "wc", ",", "axis", "=", "4", ")", "\n", "wd", "=", "tf", ".", "expand_dims", "(", "wd", ",", "axis", "=", "4", ")", "\n", "\n", "# compute output", "\n", "out", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", "]", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.STN.get_pixel_value": [[274, 331], ["tensorflow.shape", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd"], "methods", ["None"], ["", "@", "tf", ".", "function", "\n", "def", "get_pixel_value", "(", "self", ",", "img", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Gathers the pixel from original image according to coordinate x,y\n        \"\"\"", "\n", "\n", "if", "self", ".", "inverse", ":", "\n", "            ", "\"\"\"\n               img: (B, B', H_x, W_x, C)\n               x: (B, B', H_img, W_img)\n               y: (B, B', H_img, W_img)\n\n               indices: (B, B', H_img, W_img, 4)\n            \"\"\"", "\n", "\n", "x_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "B", "=", "x_shape", "[", "0", "]", "\n", "Bp", "=", "x_shape", "[", "1", "]", "\n", "H_img", "=", "x_shape", "[", "2", "]", "\n", "W_img", "=", "x_shape", "[", "3", "]", "\n", "\n", "# assert Bp == tf.shape(img)[1]", "\n", "\n", "\n", "B_idx", "=", "tf", ".", "range", "(", "0", ",", "B", ")", "\n", "B_idx", "=", "tf", ".", "reshape", "(", "B_idx", ",", "(", "B", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "B_idx", "=", "tf", ".", "tile", "(", "B_idx", ",", "(", "1", ",", "Bp", ",", "H_img", ",", "W_img", ")", ")", "\n", "\n", "Bp_idx", "=", "tf", ".", "range", "(", "0", ",", "Bp", ")", "\n", "Bp_idx", "=", "tf", ".", "reshape", "(", "Bp_idx", ",", "(", "1", ",", "Bp", ",", "1", ",", "1", ")", ")", "\n", "Bp_idx", "=", "tf", ".", "tile", "(", "Bp_idx", ",", "(", "B", ",", "1", ",", "H_img", ",", "W_img", ")", ")", "\n", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "B_idx", ",", "Bp_idx", ",", "y", ",", "x", "]", ",", "axis", "=", "4", ")", "\n", "\n", "return", "tf", ".", "gather_nd", "(", "img", ",", "indices", ")", "\n", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n             img: (B, H_x, W_x, C)\n             x: (B, B', H_img, W_img)\n             y: (B, B', H_img, W_img)\n\n             indices : (B, B', H_img, W_img, 3) -> out: (B, B', H_img, W_img, C)\n            \"\"\"", "\n", "# assert len(tf.shape(img)) == 4", "\n", "\n", "x_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "B", "=", "x_shape", "[", "0", "]", "\n", "Bp", "=", "x_shape", "[", "1", "]", "\n", "H_img", "=", "x_shape", "[", "2", "]", "\n", "W_img", "=", "x_shape", "[", "3", "]", "\n", "\n", "B_idx", "=", "tf", ".", "range", "(", "0", ",", "B", ")", "\n", "B_idx", "=", "tf", ".", "reshape", "(", "B_idx", ",", "(", "B", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "B_idx", "=", "tf", ".", "tile", "(", "B_idx", ",", "(", "1", ",", "Bp", ",", "H_img", ",", "W_img", ")", ")", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "B_idx", ",", "y", ",", "x", "]", ",", "axis", "=", "4", ")", "#[B, B', H_img, W_img, 3]", "\n", "return", "tf", ".", "gather_nd", "(", "img", ",", "indices", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.concrete_binary_pre_sigmoid_sample": [[14, 18], ["tensorflow.random.uniform", "tensorflow.shape", "tensorflow.math.log", "tensorflow.math.log"], "function", ["None"], ["", "def", "concrete_binary_pre_sigmoid_sample", "(", "log_odds", ",", "temperature", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "u", "=", "tf", ".", "random", ".", "uniform", "(", "tf", ".", "shape", "(", "log_odds", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ")", "\n", "noise", "=", "tf", ".", "math", ".", "log", "(", "u", "+", "eps", ")", "-", "tf", ".", "math", ".", "log", "(", "1.0", "-", "u", "+", "eps", ")", "\n", "return", "(", "log_odds", "+", "noise", ")", "/", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.reconstruction_test_lg_vae": [[13, 56], ["model.encode", "model.decode", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.close", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.close", "x_recon[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "x_hat_recon[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "x_recon[].numpy", "x_hat_recon[].numpy"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode"], ["\n", "def", "reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "#Get a batch of test images", "\n", "\t", "test_ds", "=", "test_dataset", ".", "take", "(", "n", ")", ".", "shuffle", "(", "n", ",", "seed", "=", "1", ")", "\n", "for", "test_data", "in", "test_ds", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "x_test", ")", "\n", "\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "n", ",", "w", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "n", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "n", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "# num_channel = x_recon.shape[-1]", "\n", "\n", "obj_recon", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "channel", "]", "\n", "obj_alpha", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", "channel", ":", "]", "\n", "\n", "z_depth", "=", "tf", ".", "reshape", "(", "z_depth", ",", "[", "n", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "tf", ".", "round", "(", "tf", ".", "sigmoid", "(", "z_pres_logits", ")", ")", ",", "[", "n", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "canvas", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "canvas_weighted", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "canvas_weights_only", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "n", ",", "channel", ")", ")", "# only weights of that part", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_weights_only", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "canvas_weights_only", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "\n", "canvas", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "obj_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weighted", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "(", "obj_recon", "[", "i", "]", "*", "obj_alpha", "[", "i", "]", "*", "z_pres", "[", "i", "]", "*", "tf", ".", "nn", ".", "sigmoid", "(", "-", "z_depth", "[", "i", "]", ")", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weights_only", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", "0", "]", "=", "(", "tf", ".", "ones", "(", "shape", "=", "obj_alpha", "[", "i", "]", ".", "shape", ")", "*", "z_pres", "[", "i", "]", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ")", ")", "# *tf.nn.sigmoid(-z_depth[i])", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.style_transfer_test": [[57, 86], ["tensorflow.constant", "tensorflow.concat", "model.encode", "model.decode", "numpy.empty", "range", "matplotlib.imshow", "matplotlib.close", "tensorflow.random.shuffle", "tensorflow.random.shuffle", "x_recon[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "rand_x_idx.numpy", "rand_x_hat_idx.numpy", "[].transpose().astype", "x_recon[].numpy", "[].transpose", "scipy.io.loadmat"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode"], ["\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'reconstruction'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weighted", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'reconstruction weighted'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weights_only", ")", ",", "cmap", "=", "'inferno'", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "'weights'", ")", "\n", "ax", "[", "2", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "2", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_test_spair.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_test'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "# plt.close()", "\n", "", "return", "plt", "\n", "\n", "\n", "", "def", "reconstruction_bbox", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "#Get a batch of test images", "\n", "\t", "test_ds", "=", "test_dataset", ".", "take", "(", "n", ")", ".", "shuffle", "(", "n", ",", "seed", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.style_transfer_celeba": [[88, 126], ["x_test[].numpy", "x_test[].numpy", "tensorflow.concat", "tensorflow.concat", "model.encode", "model.decode", "numpy.empty", "range", "matplotlib.imshow", "matplotlib.close", "x_recon[].numpy().reshape", "x_recon[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "x_recon[].numpy", "x_recon[].numpy"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode"], ["\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "x_test", ")", "\n", "\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "# f, ax = plt.subplots(1, 1)", "\n", "# ax[0].set_xticks(np.arange(0, h*n, w))", "\n", "# ax[0].set_yticks(np.arange(0, h*(num_cells+2), w))", "\n", "# num_channel = x_recon.shape[-1]", "\n", "# print(obj_bbox_mask.numpy())", "\n", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "tf", ".", "round", "(", "tf", ".", "sigmoid", "(", "z_pres_logits", ")", ")", ",", "[", "n", ",", "num_cells", ",", "1", "]", ")", "\n", "colors", "=", "tf", ".", "constant", "(", "[", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", "]", ")", "\n", "obj_bbox_mask", "=", "obj_bbox_mask", "*", "z_pres", "\n", "x_recon_w_bbox", "=", "tf", ".", "image", ".", "draw_bounding_boxes", "(", "x_recon", ",", "obj_bbox_mask", ",", "colors", ")", "\n", "img_w_bbox", "=", "tf", ".", "image", ".", "draw_bounding_boxes", "(", "x_test", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "obj_bbox_mask", ",", "colors", ")", "\n", "\n", "\n", "canvas", "=", "np", ".", "empty", "(", "(", "h", "*", "3", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "canvas", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "img_w_bbox", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "# canvas[h*2:h*3, i*w:(i+1)*w, :] = x_recon[i].numpy().reshape((h,w,channel))", "\n", "canvas", "[", "h", "*", "2", ":", "h", "*", "3", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_recon_w_bbox", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "\n", "\n", "# ax[0].imshow(np.squeeze(canvas),cmap='gray')", "\n", "# ax[0].set_title('reconstruction')", "\n", "# ax[0].grid(b=True, which='major', color='#ffffff', linestyle='-')", "\n", "# ax[0].tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=False)", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.plot_latent_dims": [[128, 154], ["matplotlib.figure", "matplotlib.scatter", "matplotlib.close", "enumerate", "model.encode.numpy", "range", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.figure", "matplotlib.hist", "matplotlib.close", "range", "model.encode", "model.encode", "z_list[].extend", "matplotlib.savefig", "matplotlib.savefig", "str", "str"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode"], ["", "plt", ".", "imshow", "(", "canvas", ")", "\n", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_bbox.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_reconstrcution_bbox'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "# plt.close()", "\n", "", "return", "plt", "\n", "\n", "\n", "", "def", "glimpses_reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "# Glimpses", "\n", "\t", "for", "test_data", "in", "test_dataset", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "x_test", ")", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate": [[155, 182], ["isinstance", "model.decode", "numpy.sqrt().astype", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.close", "tensorflow.one_hot", "model.encode_y", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "range", "matplotlib.savefig", "matplotlib.savefig", "tensorflow.random.uniform", "numpy.sqrt", "x_generated[].numpy().reshape", "x_generated[].numpy"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y"], ["\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "object_size", "=", "obj_recon_alpha", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "ax", "[", "2", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "# plot glimpses", "\n", "canvas_glimpses", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "canvas_glimpses_alpha", "=", "np", ".", "zeros", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_glimpses", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "all_glimpses", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "obj_recon_unnorm", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "canvas_glimpses_alpha", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", "]", "=", "obj_recon_alpha", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ")", ")", "\n", "\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'Glimpses'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_traverse": [[183, 199], ["numpy.linspace", "model.decode", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "NotImplementedError", "tensorflow.convert_to_tensor", "range", "generated_img[].numpy().reshape", "generated_img[].numpy"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode"], ["\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses_recon", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'Glimpses reconstruction'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses_alpha", ")", ",", "cmap", "=", "'viridis'", ")", "#,cmap='gray'", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "'Glimpses alpha'", ")", "\n", "ax", "[", "2", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "2", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_varying_latent": [[201, 271], ["isinstance", "numpy.sqrt().astype", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.close", "tensorflow.one_hot", "model.encode_y", "range", "matplotlib.savefig", "matplotlib.savefig", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.close", "tensorflow.random.uniform", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.tile", "model.decode", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.tile", "model.decode", "numpy.sqrt", "x_generated[].numpy().reshape", "range", "matplotlib.savefig", "matplotlib.savefig", "tensorflow.random.normal", "tensorflow.tile", "tensorflow.random.normal", "model.decode", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.tile", "model.decode", "x_hat_generated[].numpy().reshape", "x_generated[].numpy", "x_hat_generated[].numpy"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode"], ["\n", "", "return", "plt", "\n", "\n", "", "def", "glimpses_local_reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "# Glimpses", "\n", "\t", "for", "test_data", "in", "test_dataset", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ",", "x_hat", ")", "=", "model", "(", "x_test", ")", "\n", "\n", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "object_size", "=", "obj_recon_alpha", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "2", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "n", ",", "object_size", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "object_size", "*", "num_cells", ",", "object_size", ")", ")", "\n", "\n", "# plot glimpses", "\n", "canvas_glimpses", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "=", "np", ".", "empty", "(", "(", "object_size", "*", "num_cells", ",", "object_size", "*", "n", ",", "channel", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_glimpses", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "x_hat", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "canvas_glimpses_recon", "[", ":", ",", "i", "*", "object_size", ":", "(", "i", "+", "1", ")", "*", "object_size", ",", ":", "]", "=", "x_hat_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "object_size", ",", "object_size", ",", "channel", ")", ")", "\n", "\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'Glimpses'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_glimpses_recon", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'Glimpses reconstruction'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses_local.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'glimpses_local'", "+", "filename", "+", "'.png'", ",", "dpi", "=", "300", ")", "\n", "# plt.close()", "\n", "\n", "", "return", "plt", "\n", "\n", "", "def", "x_hat_reconstruction_test", "(", "model", ",", "test_dataset", ",", "filename", "=", "None", ",", "filepath", "=", "None", ",", "label", "=", "True", ",", "n", "=", "10", ")", ":", "\n", "\t", "for", "test_data", "in", "test_dataset", ":", "\n", "\t\t", "if", "label", ":", "\n", "\t\t\t", "images", "=", "test_data", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t", "images", "=", "test_data", "\n", "", "x_test", "=", "images", "[", ":", "n", "]", "\n", "break", "\n", "", "h", ",", "w", ",", "channel", "=", "x_test", ".", "shape", "[", "1", ":", "4", "]", "\n", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "all_glimpses", ",", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_cluster": [[272, 315], ["tensorflow.one_hot", "model.encode_y", "model.decode", "numpy.sqrt().astype", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.close", "tensorflow.random.uniform", "tensorflow.random.normal", "tensorflow.reshape", "tensorflow.random.normal", "tensorflow.tile", "range", "matplotlib.savefig", "matplotlib.savefig", "tensorflow.tile", "tensorflow.convert_to_tensor", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.tile", "numpy.sqrt", "x_generated[].numpy().reshape", "tensorflow.convert_to_tensor", "tensorflow.one_hot", "model.encode_y", "zip", "tensorflow.reshape", "tensorflow.random.normal", "tensorflow.tile", "tf.reshape.append", "tensorflow.stack", "x_generated[].numpy", "tensorflow.random.shuffle", "tensorflow.random.normal", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y"], ["obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "_", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ")", "=", "model", "(", "x_test", ")", "\n", "canvas_x_hat", "=", "np", ".", "empty", "(", "(", "h", "*", "2", ",", "w", "*", "n", ",", "channel", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t", "canvas_x_hat", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_hat_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_x_hat", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "2", "*", "n", ",", "2", ")", ")", "\n", "plt", ".", "imshow", "(", "canvas_x_hat", ")", "\n", "if", "filename", "is", "None", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_hat_reconstrcution_test_lg_vae.png'", ")", "\n", "", "else", ":", "\n", "\t\t", "plt", ".", "savefig", "(", "filepath", "+", "'x_hat_reconstrcution_test'", "+", "filename", "+", "'.png'", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "return", "canvas_x_hat", "\n", "", ""]], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.unseen_cluster_lg": [[318, 384], ["collections.defaultdict", "enumerate", "range", "model.get_y", "tensorflow.nn.softmax", "tensorflow.argmax", "range", "tensorflow.unstack", "tensorflow.unstack", "len", "cluster_dict[].sort", "tensorflow.stack", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "len", "zip", "str"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.get_y", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax"], []], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.unseen_cluster_lg_svhn": [[385, 441], ["collections.defaultdict", "tensorflow.constant", "tensorflow.tile", "model.get_y", "tensorflow.argmax", "range", "numpy.empty", "range", "matplotlib.figure", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "[].transpose().astype", "[].transpose", "str", "scipy.io.loadmat"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.get_y"], []], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.unseen_cluster": [[442, 480], ["model.get_y", "tensorflow.one_hot", "model.encode_y", "zip", "tensorflow.reshape", "model.decode", "numpy.empty", "range", "matplotlib.imshow", "matplotlib.close", "tensorflow.argmax", "tf.reshape.append", "x_recon[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "tensorflow.random.normal", "x_recon[].numpy"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.get_y", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode"], []], "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.unseen_cluster_svhn": [[481, 518], ["tensorflow.constant", "model.get_y", "tensorflow.one_hot", "model.encode_y", "zip", "tensorflow.reshape", "model.decode", "numpy.empty", "range", "matplotlib.imshow", "matplotlib.close", "tensorflow.random.shuffle", "tensorflow.argmax", "tf.reshape.append", "x_recon[].numpy().reshape", "matplotlib.savefig", "matplotlib.savefig", "rand_x_idx.numpy", "tensorflow.random.normal", "[].transpose().astype", "x_recon[].numpy", "[].transpose", "scipy.io.loadmat"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.get_y", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode"], []], "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence": [[11, 16], ["tensorflow.math.log", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.exp", "tensorflow.square"], "function", ["None"], ["from", "spair", "import", "LGSPAIR", ",", "SPAIR", "\n", "\n", "def", "kl_divergence", "(", "z_mean", ",", "z_sig", ")", ":", "\n", "    ", "z_log_var", "=", "tf_safe_log", "(", "tf", ".", "square", "(", "z_sig", ")", ")", "\n", "if", "(", "len", "(", "z_mean", ".", "shape", ")", "==", "2", ")", ":", "\n", "        ", "kl_loss", "=", "tf", ".", "reduce_mean", "(", "-", "0.5", "*", "tf", ".", "reduce_sum", "(", "1", "+", "z_log_var", "-", "tf", ".", "square", "(", "z_mean", ")", "-", "tf", ".", "exp", "(", "z_log_var", ")", ",", "axis", "=", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss": [[17, 19], ["tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.square", "tensorflow.math.square", "tensorflow.math.square"], "function", ["None"], ["", "elif", "(", "len", "(", "z_mean", ".", "shape", ")", "==", "4", ")", ":", "\n", "        ", "kl_loss", "=", "tf", ".", "reduce_mean", "(", "-", "0.5", "*", "tf", ".", "reduce_sum", "(", "1", "+", "z_log_var", "-", "tf", ".", "square", "(", "z_mean", ")", "-", "tf", ".", "exp", "(", "z_log_var", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss": [[21, 39], ["tensorflow.exp", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.where", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "tensorflow.where", "tensorflow.nn.softplus", "tensorflow.where", "tensorflow.math.log", "tensorflow.maximum", "numpy.log"], "function", ["None"], ["", "return", "kl_loss", "\n", "\n", "", "def", "kl_divergence_two_gauss", "(", "mean1", ",", "sig1", ",", "mean2", ",", "sig2", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf_safe_log", "(", "sig2", ")", "-", "tf_safe_log", "(", "sig1", ")", "+", "(", "(", "tf", ".", "math", ".", "square", "(", "sig1", ")", "+", "tf", ".", "math", ".", "square", "(", "mean1", "-", "mean2", ")", ")", "/", "(", "2", "*", "tf", ".", "math", ".", "square", "(", "sig2", ")", ")", ")", "-", "0.5", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "\n", "\n", "# https://github.com/e2crawfo/auto_yolo/blob/aaai_2019/auto_yolo/models/core.py#L42", "\n", "", "def", "concrete_binary_sample_kl", "(", "pre_sigmoid_sample", ",", "\n", "prior_log_odds", ",", "prior_temperature", ",", "\n", "posterior_log_odds", ",", "posterior_temperature", ",", "\n", "eps", "=", "1e-8", ")", ":", "\n", "    ", "y", "=", "pre_sigmoid_sample", "\n", "\n", "y_times_prior_temp", "=", "y", "*", "prior_temperature", "\n", "log_prior", "=", "tf", ".", "math", ".", "log", "(", "prior_temperature", "+", "eps", ")", "-", "y_times_prior_temp", "+", "prior_log_odds", "-", "2.0", "*", "tf", ".", "math", ".", "log", "(", "1.0", "+", "tf", ".", "exp", "(", "-", "y_times_prior_temp", "+", "prior_log_odds", ")", "+", "eps", ")", "\n", "\n", "y_times_posterior_temp", "=", "y", "*", "posterior_temperature", "\n", "log_posterior", "=", "tf", ".", "math", ".", "log", "(", "posterior_temperature", "+", "eps", ")", "-", "y_times_posterior_temp", "+", "posterior_log_odds", "-"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.linear_assignment": [[40, 68], ["tensorflow.argmax", "tensorflow.argmax", "tensorflow.zeros_like", "range", "tensorflow.squeeze", "tensorflow.unique_with_counts", "tensorflow.one_hot", "tensorflow.where", "tensorflow.argmax"], "function", ["None"], ["2.0", "*", "tf", ".", "math", ".", "log", "(", "1.0", "+", "tf", ".", "exp", "(", "-", "y_times_posterior_temp", "+", "posterior_log_odds", ")", "+", "eps", ")", "\n", "\n", "return", "log_posterior", "-", "log_prior", "\n", "\n", "#https://github.com/e2crawfo/auto_yolo/blob/aaai_2019/auto_yolo/models/yolo_air.py#L592", "\n", "", "def", "compute_z_pres_kl_yolo_air", "(", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "prior_prob", ",", "temperature", ")", ":", "\n", "    ", "H", "=", "z_pres", ".", "shape", "[", "1", "]", "\n", "W", "=", "z_pres", ".", "shape", "[", "2", "]", "\n", "\n", "batch_size", "=", "z_pres", ".", "shape", "[", "0", "]", "\n", "count_support", "=", "tf", ".", "range", "(", "H", "*", "W", "+", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "count_prior_prob", "=", "1", "-", "prior_prob", "# tf.nn.sigmoid(self.count_prior_log_odds)", "\n", "count_distribution", "=", "(", "1", "-", "count_prior_prob", ")", "*", "(", "count_prior_prob", "**", "count_support", ")", "\n", "\n", "normalizer", "=", "tf", ".", "reduce_sum", "(", "count_distribution", ")", "\n", "count_distribution", "=", "count_distribution", "/", "tf", ".", "maximum", "(", "normalizer", ",", "1e-6", ")", "\n", "count_distribution", "=", "tf", ".", "tile", "(", "count_distribution", "[", "None", ",", ":", "]", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "count_so_far", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "i", "=", "0", "\n", "\n", "obj_kl", "=", "[", "]", "\n", "max_n_objects", "=", "H", "*", "W", "\n", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "p_z_given_Cz", "=", "tf", ".", "maximum", "(", "count_support", "[", "None", ",", ":", "]", "-", "count_so_far", ",", "0", ")", "/", "(", "max_n_objects", "-", "i", ")", "\n", "\n", "# Reshape for batch matmul", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.train_local_global_autoencoder": [[72, 422], ["datetime.datetime.now().strftime", "os.path.join", "os.mkdir", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.CategoricalAccuracy", "tensorflow.keras.metrics.CategoricalAccuracy", "tensorflow.keras.metrics.CategoricalAccuracy", "tensorflow.keras.metrics.CategoricalAccuracy", "isinstance", "time.time", "enumerate", "model.save_weights", "os.path.dirname", "os.path.exists", "print", "os.mkdir", "model.Classifier", "model.Classifier.", "model.Classifier.summary", "model.Classifier.load_weights", "tensorflow.keras.metrics.CategoricalAccuracy", "print", "tape.gradient", "optimizer.apply_gradients", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tape.gradient", "optimizer.apply_gradients", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tape.gradient", "optimizer.apply_gradients", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "model", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "trainer.kl_divergence", "trainer.kl_divergence", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "model", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "trainer.kl_divergence_two_gauss", "trainer.kl_divergence_two_gauss", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "model", "tensorflow.reduce_mean", "trainer.kl_divergence_two_gauss", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "tf.keras.metrics.Mean.", "isinstance", "train_step", "datetime.datetime.now", "os.path.abspath", "os.path.exists", "print", "classifier.main", "tensorflow.zeros", "model.Classifier.", "tf.keras.metrics.CategoricalAccuracy.", "tensorflow.GradientTape", "model", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "trainer.kl_divergence", "trainer.kl_divergence", "zip", "tensorflow.GradientTape", "model", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "trainer.kl_divergence_two_gauss", "trainer.kl_divergence_two_gauss", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "zip", "tensorflow.GradientTape", "model", "tensorflow.reduce_mean", "trainer.kl_divergence_two_gauss", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "zip", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "trainer.kl_divergence", "model.Classifier.", "tf.keras.metrics.CategoricalAccuracy.", "numpy.random.normal().astype", "model.decode", "model.Classifier.", "tf.keras.metrics.CategoricalAccuracy.", "numpy.random.normal().astype", "model.decode", "model.Classifier.", "tf.keras.metrics.CategoricalAccuracy.", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "model.Classifier.", "tf.keras.metrics.CategoricalAccuracy.", "numpy.random.normal().astype", "model.decode", "model.Classifier.", "tf.keras.metrics.CategoricalAccuracy.", "model.decode", "model.Classifier.", "tf.keras.metrics.CategoricalAccuracy.", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "isinstance", "print", "time.time", "print", "print", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.CategoricalAccuracy.reset_states", "tf.keras.metrics.CategoricalAccuracy.reset_states", "tf.keras.metrics.CategoricalAccuracy.reset_states", "tf.keras.metrics.CategoricalAccuracy.reset_states", "gc.collect", "time.time", "print", "tf.keras.metrics.CategoricalAccuracy.result", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "trainer.kl_divergence", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "trainer.discretised_logistic_loss", "trainer.discretised_logistic_loss", "tensorflow.concat", "tensorflow.concat", "trainer.discretised_logistic_loss", "trainer.discretised_logistic_loss", "trainer.discretised_logistic_loss", "tensorflow.stack", "tensorflow.stack", "trainer.linear_assignment", "tf.keras.metrics.CategoricalAccuracy.", "template.format", "isinstance", "visualizer.generate", "visualizer.reconstruction_test_lg_vae", "visualizer.generate_varying_latent", "visualizer.generate_varying_latent", "isinstance", "trainer.discretised_logistic_loss", "trainer.discretised_logistic_loss", "tensorflow.concat", "tensorflow.concat", "trainer.discretised_logistic_loss", "trainer.discretised_logistic_loss", "trainer.discretised_logistic_loss", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal().astype", "isinstance", "test_step", "isinstance", "isinstance", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.CategoricalAccuracy.result", "tf.keras.metrics.CategoricalAccuracy.result", "tf.keras.metrics.CategoricalAccuracy.result", "tf.keras.metrics.CategoricalAccuracy.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "visualizer.style_transfer_test", "visualizer.style_transfer_celeba", "visualizer.unseen_cluster_lg", "visualizer.generate_cluster", "visualizer.generate_cluster", "visualizer.generate_cluster", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log", "time.time", "test_step", "tensorflow.unstack", "tensorflow.unstack", "isinstance", "time.time", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tf.keras.metrics.Mean.result", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log", "numpy.random.normal", "test_step", "tensorflow.unstack", "tensorflow.unstack", "test_step", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax", "home.repos.pwc.inspect_result.51616_split-vae.vae.classifier.main", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence_two_gauss", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.kl_divergence", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.linear_assignment", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.reconstruction_test_lg_vae", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_varying_latent", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_varying_latent", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.trainer.discretised_logistic_loss", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.style_transfer_test", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.style_transfer_celeba", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.unseen_cluster_lg", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_cluster", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_cluster", "home.repos.pwc.inspect_result.51616_split-vae.vae.visualizer.generate_cluster"], ["p_z", "=", "tf", ".", "matmul", "(", "_count_distribution", ",", "_p_z_given_Cz", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "prior_log_odds", "=", "tf_safe_log", "(", "p_z", ")", "-", "tf_safe_log", "(", "1", "-", "p_z", ")", "\n", "_obj_kl", "=", "concrete_binary_sample_kl", "(", "\n", "z_pres_pre_sigmoid", "[", ":", ",", "h", ",", "w", ",", ":", "]", ",", "\n", "prior_log_odds", ",", "temperature", ",", "\n", "z_pres_logits", "[", ":", ",", "h", ",", "w", ",", ":", "]", ",", "temperature", "\n", ")", "\n", "\n", "obj_kl", ".", "append", "(", "_obj_kl", ")", "\n", "\n", "sample", "=", "tf", ".", "cast", "(", "z_pres", "[", ":", ",", "h", ",", "w", ",", ":", "]", ">", "0.5", ",", "tf", ".", "float32", ")", "\n", "mult", "=", "sample", "*", "p_z_given_Cz", "+", "(", "1", "-", "sample", ")", "*", "(", "1", "-", "p_z_given_Cz", ")", "\n", "count_distribution", "=", "mult", "*", "count_distribution", "\n", "normalizer", "=", "tf", ".", "reduce_sum", "(", "count_distribution", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "normalizer", "=", "tf", ".", "maximum", "(", "normalizer", ",", "1e-6", ")", "\n", "count_distribution", "=", "count_distribution", "/", "normalizer", "\n", "\n", "count_so_far", "+=", "sample", "\n", "\n", "i", "+=", "1", "\n", "\n", "", "", "return", "tf_mean_sum", "(", "tf", ".", "transpose", "(", "tf", ".", "squeeze", "(", "tf", ".", "stack", "(", "[", "obj_kl", "]", ")", ")", ",", "[", "1", ",", "0", "]", ")", ")", "#[cells, batch] -> [batch,cells]", "\n", "\n", "\n", "", "def", "tf_safe_log", "(", "value", ",", "replacement_value", "=", "-", "100.0", ")", ":", "\n", "    ", "log_value", "=", "tf", ".", "math", ".", "log", "(", "value", "+", "1e-8", ")", "\n", "replace", "=", "tf", ".", "logical_or", "(", "tf", ".", "math", ".", "is_nan", "(", "log_value", ")", ",", "tf", ".", "math", ".", "is_inf", "(", "log_value", ")", ")", "\n", "log_value", "=", "tf", ".", "where", "(", "replace", ",", "replacement_value", "*", "tf", ".", "ones_like", "(", "log_value", ")", ",", "log_value", ")", "\n", "return", "log_value", "\n", "\n", "", "def", "xent_loss", "(", "label", ",", "pred", ")", ":", "\n", "    ", "return", "-", "(", "label", "*", "tf_safe_log", "(", "pred", ")", "+", "(", "1.", "-", "label", ")", "*", "tf_safe_log", "(", "1.", "-", "pred", ")", ")", "\n", "\n", "#https://github.com/e2crawfo/dps/blob/8ff5eab735a1381445e2dbf48c04f7b515ab64bb/dps/utils/tf.py#L272", "\n", "", "def", "tf_mean_sum", "(", "t", ")", ":", "\n", "    ", "\"\"\" Average over batch dimension, sum over all other dimensions \"\"\"", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "reshape", "(", "t", ",", "[", "t", ".", "shape", "[", "0", "]", ",", "tf", ".", "reduce_prod", "(", "t", ".", "shape", "[", "1", ":", "]", ")", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "\n", "", "def", "train_spair", "(", "model", ",", "optimizer", ",", "dataset", ",", "train_dataset", ",", "test_dataset", ",", "config", ")", ":", "\n", "    ", "RUN_NAME", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'output/'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "print", "(", "'data folder doesn\\'t exist, create data folder'", ")", "\n", "os", ".", "mkdir", "(", "data_path", ")", "\n", "\n", "", "RUN_DIR", "=", "data_path", "+", "RUN_NAME", "+", "'/'", "\n", "os", ".", "mkdir", "(", "RUN_DIR", ")", "\n", "\n", "train_metric_names", "=", "[", "'x_recon_train_loss'", ",", "'z_zoom_kl_train_loss'", ",", "'z_what_kl_train_loss'", ",", "'z_where_kl_train_loss'", ",", "\n", "'z_depth_kl_train_loss'", ",", "'z_pres_kl_train_loss'", ",", "'z_bg_kl_train_loss'", ",", "'z_l_kl_train_loss'", ",", "'x_hat_recon_train_loss'", "]", "\n", "\n", "test_metric_names", "=", "[", "'x_recon_test_loss'", ",", "'z_zoom_kl_test_loss'", ",", "'z_what_kl_test_loss'", ",", "'z_where_kl_test_loss'", ",", "\n", "'z_depth_kl_test_loss'", ",", "'z_pres_kl_test_loss'", ",", "'z_bg_kl_test_loss'", ",", "'z_l_kl_test_loss'", ",", "'x_hat_recon_test_loss'", ",", "'MAE test'", ",", "'MAPE test'", "]", "\n", "\n", "train_metrics", "=", "[", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", "name", "=", "loss", ")", "for", "loss", "in", "train_metric_names", "]", "\n", "test_metrics", "=", "[", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", "name", "=", "loss", ")", "for", "loss", "in", "test_metric_names", "]", "\n", "\n", "count_acc_test", "=", "tf", ".", "keras", ".", "metrics", ".", "Accuracy", "(", ")", "\n", "\n", "\n", "\n", "@", "tf", ".", "function", "\n", "def", "train_step", "(", "model", ",", "images", ",", "optimizer", ",", "step", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "images", ",", "training", "=", "True", ")", "\n", "\n", "if", "config", ".", "model", "==", "'lg_spair'", ":", "\n", "                ", "x", ",", "x_hat", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "images", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "images", "\n", "\n", "", "x_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x", ",", "x_recon", ")", ")", "\n", "\n", "prior_z_pres_prob", "=", "tf", ".", "constant", "(", "0.99", ")", "*", "tf", ".", "minimum", "(", "1.0", ",", "(", "step", "+", "1", ")", "/", "config", ".", "z_pres_anneal_step", ")", "# anneal from 0 to 0.99", "\n", "z_pres_kl_loss", "=", "compute_z_pres_kl_yolo_air", "(", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "prior_z_pres_prob", ",", "config", ".", "tau", ")", "\n", "\n", "prior_z_zoom_mean", "=", "tf", ".", "constant", "(", "config", ".", "prior_z_zoom", ",", "shape", "=", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "+", "(", "config", ".", "prior_z_zoom_start", "*", "(", "1", "-", "(", "tf", ".", "minimum", "(", "(", "step", "+", "1", ")", "/", "config", ".", "z_pres_anneal_step", ",", "1.0", ")", ")", ")", ")", "# anneal from 10 to prior_z_zoom", "\n", "prior_z_zoom_sig", "=", "tf", ".", "constant", "(", "0.5", ",", "shape", "=", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "\n", "\n", "z_where_zoom_kl_loss", "=", "kl_divergence_two_gauss", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "prior_z_zoom_mean", ",", "prior_z_zoom_sig", ")", "\n", "z_what_kl_loss", "=", "kl_divergence", "(", "z_what_mean", ",", "z_what_sigma", ")", "\n", "\n", "z_where_kl_loss", "=", "kl_divergence", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "z_depth_kl_loss", "=", "kl_divergence", "(", "z_depth_mean", ",", "z_depth_sigma", ")", "\n", "\n", "losses", "=", "[", "x_recon_loss", ",", "z_where_zoom_kl_loss", ",", "z_what_kl_loss", ",", "z_where_kl_loss", ",", "z_depth_kl_loss", ",", "z_pres_kl_loss", "]", "\n", "\n", "total_loss", "=", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "tf", ".", "minimum", "(", "config", ".", "beta", ",", "config", ".", "beta", "*", "(", "step", "+", "1.0", ")", "/", "config", ".", "anneal_until", ")", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "if", "config", ".", "model", "==", "'lg_spair'", ":", "\n", "                ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", "=", "more_outputs", "\n", "if", "not", "config", ".", "split_z_l", ":", "\n", "\n", "                    ", "if", "config", ".", "concat_z_bg", ":", "\n", "                        ", "z_bg_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_bg_mean", ",", "z_l_mean", "]", ",", "axis", "=", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_bg_sig", ",", "z_l_sig", "]", ",", "axis", "=", "1", ")", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "", "else", ":", "\n", "                        ", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "\n", "", "if", "config", ".", "concat_z_what", ":", "\n", "                        ", "z_what_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_what_mean", ",", "tf", ".", "tile", "(", "z_l_mean", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_what_sigma", ",", "tf", ".", "tile", "(", "z_l_sig", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "# z_what_concat_kl_loss = kl_divergence(tf.concat([z_what_mean,z_l_mean],axis=-1),tf.concat([z_what_sigma,z_l_sig],axis=-1))", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x_hat", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "config", ".", "beta", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "+", "x_hat_recon_loss", "# + z_l_kl_loss", "\n", "\n", "", "else", ":", "\n", "                    ", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "# z_what_concat_kl_loss = kl_divergence(tf.concat([z_what_mean,z_l_mean],axis=-1),tf.concat([z_what_sigma,z_l_sig],axis=-1))", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x_hat", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "config", ".", "z_l_beta", "*", "z_l_kl_loss", "+", "x_hat_recon_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "config", ".", "beta", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "\n", "", "", "elif", "config", ".", "model", "==", "'lg_glimpse_spair'", ":", "\n", "                ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ",", "x_hat", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "z_what_concat_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_what_mean", ",", "z_l_mean", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_what_sigma", ",", "z_l_sig", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "tf", ".", "stop_gradient", "(", "x_hat", ")", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "x_hat_recon_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "config", ".", "beta", "*", "(", "config", ".", "z_what_beta", "*", "z_what_concat_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "\n", "", "elif", "config", ".", "model", "==", "'bg_spair'", ":", "\n", "                ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "\n", "total_loss", "=", "config", ".", "z_bg_beta", "*", "z_bg_kl_loss", "+", "config", ".", "reconstruction_weight", "*", "x_recon_loss", "+", "tf", ".", "minimum", "(", "config", ".", "beta", ",", "config", ".", "beta", "*", "(", "step", "+", "1.0", ")", "/", "config", ".", "anneal_until", ")", "*", "(", "config", ".", "z_what_beta", "*", "z_what_kl_loss", "+", "z_depth_kl_loss", "+", "z_where_kl_loss", "+", "z_where_zoom_kl_loss", "+", "z_pres_kl_loss", ")", "\n", "\n", "", "", "gradients", "=", "tape", ".", "gradient", "(", "total_loss", ",", "model", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "model", ".", "trainable_variables", ")", ")", "\n", "\n", "for", "(", "metric", ",", "loss", ")", "in", "zip", "(", "train_metrics", ",", "losses", ")", ":", "\n", "            ", "metric", "(", "loss", ")", "\n", "\n", "", "return", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "*", "more_outputs", ")", "\n", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "test_step", "(", "model", ",", "images", ",", "labels", "=", "None", ")", ":", "\n", "        ", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "obj_bbox_mask", ",", "*", "more_outputs", ")", "=", "model", "(", "images", ",", "training", "=", "True", ")", "\n", "\n", "if", "config", ".", "model", "!=", "'spair'", ":", "\n", "            ", "x", ",", "x_hat", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "images", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "images", "\n", "\n", "", "x_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x", ",", "x_recon", ")", ")", "\n", "\n", "prior_z_pres_prob", "=", "tf", ".", "constant", "(", "0.99", ")", "\n", "z_pres_kl_loss", "=", "compute_z_pres_kl_yolo_air", "(", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "prior_z_pres_prob", ",", "config", ".", "tau", ")", "\n", "\n", "prior_z_zoom_mean", "=", "tf", ".", "constant", "(", "config", ".", "prior_z_zoom", ",", "shape", "=", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "\n", "prior_z_zoom_sig", "=", "tf", ".", "constant", "(", "0.5", ",", "shape", "=", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ".", "shape", ")", "\n", "\n", "z_where_zoom_kl_loss", "=", "kl_divergence_two_gauss", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "prior_z_zoom_mean", ",", "prior_z_zoom_sig", ")", "\n", "z_what_kl_loss", "=", "kl_divergence", "(", "z_what_mean", ",", "z_what_sigma", ")", "\n", "z_where_kl_loss", "=", "kl_divergence", "(", "z_where_mean", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ",", "z_where_sigma", "[", ":", ",", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "z_depth_kl_loss", "=", "kl_divergence", "(", "z_depth_mean", ",", "z_depth_sigma", ")", "\n", "\n", "losses", "=", "[", "x_recon_loss", ",", "z_where_zoom_kl_loss", ",", "z_what_kl_loss", ",", "z_where_kl_loss", ",", "z_depth_kl_loss", ",", "z_pres_kl_loss", "]", "\n", "\n", "if", "config", ".", "model", "==", "'lg_spair'", ":", "\n", "            ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", "=", "more_outputs", "\n", "# z_bg_kl_loss = kl_divergence(z_bg_mean, z_bg_sig)", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_bg_mean", ",", "z_l_mean", "]", ",", "axis", "=", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_bg_sig", ",", "z_l_sig", "]", ",", "axis", "=", "1", ")", ")", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "x_hat", ",", "x_hat_recon", ")", ")", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "\n", "", "elif", "config", ".", "model", "==", "'lg_glimpse_spair'", ":", "\n", "            ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", ",", "x_hat_recon", ",", "z_l", ",", "z_l_mean", ",", "z_l_sig", ",", "x_hat", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "# kl_divergence(z_bg_mean, z_bg_sig) #  #  # # #  # k# ", "\n", "z_l_kl_loss", "=", "kl_divergence", "(", "z_l_mean", ",", "z_l_sig", ")", "\n", "z_what_concat_kl_loss", "=", "kl_divergence", "(", "tf", ".", "concat", "(", "[", "z_what_mean", ",", "z_l_mean", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "concat", "(", "[", "z_what_sigma", ",", "z_l_sig", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x_hat_recon_loss", "=", "tf_mean_sum", "(", "xent_loss", "(", "tf", ".", "stop_gradient", "(", "x_hat", ")", ",", "x_hat_recon", ")", ")", "\n", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "z_l_kl_loss", ")", "\n", "losses", ".", "append", "(", "x_hat_recon_loss", ")", "\n", "\n", "", "elif", "config", ".", "model", "==", "'bg_spair'", ":", "\n", "            ", "z_bg", ",", "z_bg_mean", ",", "z_bg_sig", "=", "more_outputs", "\n", "z_bg_kl_loss", "=", "kl_divergence", "(", "z_bg_mean", ",", "z_bg_sig", ")", "\n", "losses", ".", "append", "(", "z_bg_kl_loss", ")", "\n", "losses", ".", "append", "(", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "losses", ".", "append", "(", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "\n", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "            ", "print", "(", "'image shape:'", ",", "images", ".", "shape", ")", "\n", "pred_count", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "round", "(", "tf", ".", "sigmoid", "(", "z_pres_logits", ")", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "#[B,]", "\n", "print", "(", "'pred count shape:'", ",", "pred_count", ".", "shape", ")", "\n", "print", "(", "'label shape:'", ",", "labels", ".", "shape", ")", "\n", "mae", "=", "tf", ".", "metrics", ".", "mean_absolute_error", "(", "labels", ",", "pred_count", ")", "\n", "mape", "=", "tf", ".", "metrics", ".", "mean_absolute_percentage_error", "(", "labels", ",", "pred_count", ")", "\n", "losses", ".", "append", "(", "mae", ")", "\n", "losses", ".", "append", "(", "mape", ")", "\n", "count_acc_test", ".", "update_state", "(", "labels", ",", "pred_count", ")", "\n", "\n", "", "for", "(", "metric", ",", "loss", ")", "in", "zip", "(", "test_metrics", ",", "losses", ")", ":", "\n", "            ", "metric", "(", "loss", ")", "\n", "\n", "", "return", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "*", "more_outputs", ")", "\n", "\n", "\n", "\n", "# Train", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "step", ",", "images", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "(", "x_recon", ",", "z_what", ",", "z_what_mean", ",", "z_what_sigma", ",", "z_where", ",", "z_where_mean", ",", "z_where_sigma", ",", "\n", "z_depth", ",", "z_depth_mean", ",", "z_depth_sigma", ",", "z_pres", ",", "z_pres_logits", ",", "z_pres_pre_sigmoid", ",", "\n", "all_glimpses", ",", "obj_recon_unnorm", ",", "obj_recon_alpha", ",", "obj_full_recon_unnorm", ",", "*", "more_outputs", ")", "=", "train_step", "(", "model", ",", "images", ",", "optimizer", ",", "tf", ".", "constant", "(", "step", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n", "if", "(", "step", "%", "1000", "==", "0", ")", ":", "\n", "            ", "print", "(", "'Training time: {:.2f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "training_log", "=", "dict", "(", "zip", "(", "train_metric_names", ",", "[", "metric", ".", "result", "(", ")", ".", "numpy", "(", ")", "for", "metric", "in", "train_metrics", "]", ")", ")", "\n", "print", "(", "'Training step:'", ",", "step", ")", "\n", "print", "(", "training_log", ")", "\n", "print", "(", ")", "\n", "\n", "\n", "for", "metric", "in", "train_metrics", ":", "\n", "                ", "metric", ".", "reset_states", "(", ")", "\n", "\n", "", "num_cells", "=", "z_where", ".", "shape", "[", "1", "]", "*", "z_where", ".", "shape", "[", "2", "]", "\n", "f", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ")", "\n", "h", ",", "w", ",", "channel", "=", "images", ".", "shape", "[", "1", ":", "4", "]", "\n", "channel", "=", "min", "(", "3", ",", "channel", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "10", ",", "w", ")", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "10", ",", "w", ")", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "10", ",", "w", ")", ")", "\n", "ax", "[", "2", "]", ".", "set_yticks", "(", "np", ".", "arange", "(", "0", ",", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", ")", ")", "\n", "\n", "\n", "obj_recon", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "channel", "]", "\n", "obj_alpha", "=", "obj_full_recon_unnorm", "[", ":", ",", ":", ",", ":", ",", ":", ",", "channel", ":", "]", "\n", "\n", "z_depth", "=", "tf", ".", "reshape", "(", "z_depth", ",", "[", "32", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "z_pres", "=", "tf", ".", "reshape", "(", "z_pres", ",", "[", "32", ",", "num_cells", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "canvas", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "10", ",", "channel", ")", ")", "\n", "canvas_weighted", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "10", ",", "channel", ")", ")", "\n", "canvas_weights_only", "=", "np", ".", "empty", "(", "(", "h", "*", "(", "num_cells", "+", "2", ")", ",", "w", "*", "10", ",", "channel", ")", ")", "# only weights of that part", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "canvas_weights_only", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "0", ":", "h", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "images", "[", "i", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "canvas_weights_only", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas_weighted", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "canvas", "[", "h", ":", "h", "*", "2", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "x_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "h", ",", "w", ",", "channel", ")", ")", "\n", "\n", "canvas", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "obj_recon", "[", "i", "]", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weighted", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", ":", "]", "=", "(", "obj_recon", "[", "i", "]", "*", "obj_alpha", "[", "i", "]", "*", "z_pres", "[", "i", "]", "*", "tf", ".", "nn", ".", "sigmoid", "(", "-", "z_depth", "[", "i", "]", ")", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ",", "channel", ")", ")", "\n", "canvas_weights_only", "[", "h", "*", "2", ":", ",", "i", "*", "w", ":", "(", "i", "+", "1", ")", "*", "w", ",", "0", "]", "=", "(", "tf", ".", "ones", "(", "shape", "=", "obj_alpha", "[", "i", "]", ".", "shape", ")", "*", "z_pres", "[", "i", "]", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "(", "num_cells", "*", "h", ",", "w", ")", ")", "# *tf.nn.sigmoid(-z_depth[i])", "\n", "\n", "\n", "", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "'reconstruction'", ")", "\n", "ax", "[", "0", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "0", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weighted", ")", ",", "cmap", "=", "'gray'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "'reconstruction weighted'", ")", "\n", "ax", "[", "1", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "1", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "ax", "[", "2", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "canvas_weights_only", ")", ",", "cmap", "=", "'inferno'", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "'weights'", ")", "\n", "ax", "[", "2", "]", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "'major'", ",", "color", "=", "'#ffffff'", ",", "linestyle", "=", "'-'", ")", "\n", "ax", "[", "2", "]", ".", "tick_params", "(", "top", "=", "False", ",", "bottom", "=", "False", ",", "left", "=", "False", ",", "right", "=", "False", ",", "labelleft", "=", "False", ",", "labelbottom", "=", "False", ")", "\n", "\n", "plt", ".", "savefig", "(", "RUN_DIR", "+", "'train_recon_it_'", "+", "str", "(", "step", ")", "+", "'.png'", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "test_num", ",", "test_ds", "in", "enumerate", "(", "test_dataset", ")", ":", "\n", "# Evaluation", "\n", "                ", "for", "test_data", "in", "test_ds", ":", "\n", "                    ", "if", "config", ".", "label", ":", "\n", "                        ", "test_images", ",", "labels", "=", "test_data", "[", "0", "]", ",", "test_data", "[", "1", "]", "\n", "test_step", "(", "model", ",", "test_images", ",", "labels", ")", "\n", "", "else", ":", "\n", "                        ", "test_images", "=", "test_data", "\n", "test_step", "(", "model", ",", "test_images", ")", "\n", "\n", "", "", "print", "(", "'Testing time: {:.2f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "test_log", "=", "dict", "(", "zip", "(", "[", "name", "+", "str", "(", "test_num", ")", "for", "name", "in", "test_metric_names", "]", ",", "[", "metric", ".", "result", "(", ")", ".", "numpy", "(", ")", "for", "metric", "in", "test_metrics", "]", ")", ")", "\n", "print", "(", "'Count accuracy'", "+", "str", "(", "test_num", ")", "+", "': '", "+", "str", "(", "count_acc_test", ".", "result", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "print", "(", "test_log", ")", "\n", "print", "(", ")", "\n", "\n", "count_acc_test", ".", "reset_states", "(", ")", "\n", "for", "metric", "in", "train_metrics", ":", "\n", "                    ", "metric", ".", "reset_states", "(", ")", "\n", "\n", "\n", "", "x_recon_plt", "=", "visualizer", ".", "reconstruction_test", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "x_recon_plt", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "visualizer", ".", "reconstruction_bbox", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "\n", "\n", "glimpses_recon_plt", "=", "visualizer", ".", "glimpses_reconstruction_test", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "glimpses_recon_plt", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "if", "isinstance", "(", "model", ",", "LGSPAIR", ")", ":", "\n", "                    ", "visualizer", ".", "x_hat_reconstruction_test", "(", "model", ",", "test_ds", ",", "filename", "=", "'_it_'", "+", "str", "(", "step", ")", "+", "'_'", "+", "str", "(", "test_num", ")", ",", "filepath", "=", "RUN_DIR", ",", "label", "=", "config", ".", "label", ")", "\n", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "if", "(", "step", ">=", "config", ".", "training_steps", ")", ":", "\n", "            ", "print", "(", "'Training done!'", ")", "\n", "break", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_dataset": [[11, 22], ["dataset.upper", "data.get_svhn", "dataset.upper", "data.get_svhn", "dataset.upper", "data.get_celeba_tfrec", "dataset.upper", "data.get_celeba_tfrec", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_svhn", "home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_svhn", "home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_celeba_tfrec", "home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_celeba_tfrec"], ["\n", "\n", "def", "load_cub_masked", "(", ")", ":", "\n", "    ", "train_images", "=", "np", ".", "load", "(", "'data/cub_train_seg_14x14_pad_20_masked.npy'", ")", "\n", "test_images", "=", "np", ".", "load", "(", "'data/cub_test_seg_14x14_pad_20_masked.npy'", ")", "\n", "return", "train_images", ",", "None", ",", "test_images", ",", "None", "\n", "\n", "", "def", "calculateIntersection", "(", "a0", ",", "a1", ",", "b0", ",", "b1", ")", ":", "\n", "    ", "if", "a0", ">=", "b0", "and", "a1", "<=", "b1", ":", "# Contained", "\n", "        ", "intersection", "=", "a1", "-", "a0", "\n", "", "elif", "a0", "<", "b0", "and", "a1", ">", "b1", ":", "# Contains", "\n", "        ", "intersection", "=", "b1", "-", "b0", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_svhn": [[23, 76], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "print", "print", "print", "os.path.dirname", "os.path.exists", "print", "pathlib.Path().mkdir", "glob.glob", "print", "wget.download", "glob.glob", "print", "wget.download", "glob.glob", "print", "wget.download", "train_data[].transpose", "extra_data[].transpose", "test_data[].transpose", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "os.path.abspath", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "pathlib.Path", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "elif", "a0", "<", "b0", "and", "a1", ">", "b0", ":", "# Intersects right", "\n", "        ", "intersection", "=", "a1", "-", "b0", "\n", "", "elif", "a1", ">", "b1", "and", "a0", "<", "b1", ":", "# Intersects left", "\n", "        ", "intersection", "=", "b1", "-", "a0", "\n", "", "else", ":", "# No intersection (either side)", "\n", "        ", "intersection", "=", "0", "\n", "", "return", "intersection", "\n", "\n", "", "def", "calculate_overlap", "(", "rand_x", ",", "rand_y", ",", "drawn_boxes", ")", ":", "\n", "# check if a new box is overlapped with drawn boxes more than 15% or not", "\n", "    ", "for", "box", "in", "drawn_boxes", ":", "\n", "        ", "x", ",", "y", "=", "box", "[", "0", "]", ",", "box", "[", "1", "]", "\n", "if", "calculateIntersection", "(", "rand_x", ",", "rand_x", "+", "14", ",", "x", ",", "x", "+", "14", ")", "*", "calculateIntersection", "(", "rand_y", ",", "rand_y", "+", "14", ",", "y", ",", "y", "+", "14", ")", "/", "14", "**", "2", ">", "0.15", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "class", "MultiCUB", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data", ",", "reshape", "=", "True", ")", ":", "\n", "        ", "self", ".", "num_channel", "=", "data", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "train_x", "=", "data", "[", "0", "]", "\n", "self", ".", "train_y", "=", "data", "[", "1", "]", "\n", "self", ".", "test_x", "=", "data", "[", "2", "]", "\n", "self", ".", "test_y", "=", "data", "[", "3", "]", "\n", "if", "reshape", ":", "\n", "            ", "self", ".", "train_x", "=", "tf", ".", "image", ".", "resize", "(", "self", ".", "train_x", ",", "(", "14", ",", "14", ")", ")", ".", "numpy", "(", ")", "#[28,28] -> [14,14]", "\n", "self", ".", "test_x", "=", "tf", ".", "image", ".", "resize", "(", "self", ".", "test_x", ",", "(", "14", ",", "14", ")", ")", ".", "numpy", "(", ")", "\n", "", "self", ".", "bg_list", "=", "glob", "(", "'data/kylberg/*.png'", ")", "\n", "\n", "#triad hard", "\n", "self", ".", "train_colors_triad", "=", "[", "(", "195", ",", "135", ",", "255", ")", ",", "(", "193", ",", "255", ",", "135", ")", ",", "(", "255", ",", "165", ",", "135", ")", ",", "(", "81", ",", "197", ",", "255", ")", ",", "(", "255", ",", "229", ",", "81", ")", ",", "(", "255", ",", "81", ",", "139", ")", "]", "\n", "self", ".", "test_colors_triad", "=", "[", "(", "255", ",", "125", ",", "227", ")", ",", "(", "125", ",", "255", ",", "184", ")", ",", "(", "255", ",", "205", ",", "125", ")", "]", "\n", "\n", "#easy colors", "\n", "self", ".", "train_colors", "=", "[", "(", "100", ",", "209", ",", "72", ")", ",", "(", "209", ",", "72", ",", "100", ")", ",", "(", "209", ",", "127", ",", "72", ")", ",", "(", "72", ",", "129", ",", "209", ")", ",", "(", "84", ",", "184", ",", "209", ")", ",", "(", "209", ",", "109", ",", "84", ")", ",", "(", "184", ",", "209", ",", "84", ")", ",", "(", "109", ",", "84", ",", "209", ")", "]", "\n", "self", ".", "test_colors", "=", "[", "(", "222", ",", "222", ",", "102", ")", ",", "(", "100", ",", "100", ",", "219", ")", ",", "(", "219", ",", "100", ",", "219", ")", ",", "(", "100", ",", "219", ",", "100", ")", "]", "\n", "\n", "", "def", "create_sample", "(", "self", ",", "n", ",", "width", ",", "height", ",", "bg", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "canvas", "=", "np", ".", "zeros", "(", "[", "width", ",", "height", ",", "self", ".", "num_channel", "]", ",", "np", ".", "float32", ")", "\n", "if", "bg", "==", "'solid_random'", ":", "\n", "            ", "brightness", "=", "randint", "(", "0", ",", "255", ")", "\n", "r", "=", "randint", "(", "0", ",", "brightness", ")", "/", "255.", "\n", "g", "=", "randint", "(", "0", ",", "brightness", ")", "/", "255.", "\n", "b", "=", "randint", "(", "0", ",", "brightness", ")", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "0", "]", "=", "r", "\n", "canvas", "[", ":", ",", ":", ",", "1", "]", "=", "g", "\n", "canvas", "[", ":", ",", ":", ",", "2", "]", "=", "b", "\n", "", "elif", "bg", "==", "'solid_fixed'", ":", "\n", "            ", "color", "=", "choice", "(", "self", ".", "train_colors", ")", "\n", "canvas", "[", ":", ",", ":", ",", "0", "]", "=", "color", "[", "0", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "1", "]", "=", "color", "[", "1", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "2", "]", "=", "color", "[", "2", "]", "/", "255.", "\n", "", "elif", "bg", "==", "'unseen_solid_fixed'", ":", "\n", "            ", "color", "=", "choice", "(", "self", ".", "test_colors", ")", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.data.create_celeba_tfrec": [[77, 101], ["glob.glob", "tensorflow.data.Dataset.from_tensor_slices().map().map", "tensorflow.data.Dataset.from_tensor_slices().map().map", "tensorflow.data.experimental.TFRecordWriter", "tf.data.experimental.TFRecordWriter.write", "tensorflow.data.experimental.TFRecordWriter", "tf.data.experimental.TFRecordWriter.write", "tensorflow.io.read_file", "data.create_celeba_tfrec.preprocess_image"], "function", ["None"], ["canvas", "[", ":", ",", ":", ",", "0", "]", "=", "color", "[", "0", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "1", "]", "=", "color", "[", "1", "]", "/", "255.", "\n", "canvas", "[", ":", ",", ":", ",", "2", "]", "=", "color", "[", "2", "]", "/", "255.", "\n", "", "elif", "bg", "==", "'white'", ":", "\n", "            ", "canvas", "[", ":", ",", ":", ",", ":", "]", "=", "np", ".", "ones_like", "(", "canvas", ")", "\n", "", "elif", "bg", "==", "'texture'", ":", "\n", "            ", "img_name", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "bg_list", ")", "\n", "# print(img_name)", "\n", "img", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "img_name", ")", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "/", "255.", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "# print(img.shape)", "\n", "canvas", "[", ":", ",", ":", ",", ":", "]", "=", "tf", ".", "image", ".", "resize", "(", "img", ",", "size", "=", "[", "width", ",", "height", "]", ")", "\n", "\n", "", "if", "'rot'", "in", "bg", ":", "#ckb_rot_6", "\n", "            ", "temp_canvas", "=", "np", ".", "zeros", "(", "[", "width", "*", "4", ",", "height", "*", "4", ",", "self", ".", "num_channel", "]", ",", "np", ".", "float32", ")", "\n", "if", "'unseen'", "in", "bg", ":", "\n", "                ", "shuffle", "(", "self", ".", "test_colors_triad", ")", "\n", "colors", "=", "self", ".", "test_colors_triad", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                ", "shuffle", "(", "self", ".", "train_colors_triad", ")", "\n", "colors", "=", "self", ".", "train_colors_triad", "[", ":", "2", "]", "\n", "", "cell_size", "=", "int", "(", "bg", "[", "-", "1", "]", ")", "\n", "num_ckb", "=", "(", "height", "*", "4", ")", "//", "cell_size", "\n", "for", "i", "in", "range", "(", "num_ckb", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_ckb", ")", ":", "\n", "                    ", "temp_canvas", "[", "i", "*", "cell_size", ":", "(", "i", "+", "1", ")", "*", "cell_size", ",", "j", "*", "cell_size", ":", "(", "j", "+", "1", ")", "*", "cell_size", ",", "0", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "0", "]", "/", "255.", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_celeba_tfrec": [[102, 135], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.exists", "print", "pathlib.Path().mkdir", "glob.glob", "print", "utils.download_file_from_google_drive", "glob.glob", "print", "print", "data.create_celeba_tfrec", "tensorflow.io.parse_tensor", "tensorflow.reshape", "tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset().map", "os.path.abspath", "zipfile.ZipFile", "zip_ref.extractall", "glob.glob", "glob.glob", "tensorflow.data.TFRecordDataset().map", "tensorflow.data.TFRecordDataset().map", "pathlib.Path", "tensorflow.data.TFRecordDataset", "tensorflow.data.TFRecordDataset", "tensorflow.data.TFRecordDataset", "tensorflow.data.TFRecordDataset"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.utils.download_file_from_google_drive", "home.repos.pwc.inspect_result.51616_split-vae.vae.data.create_celeba_tfrec"], ["temp_canvas", "[", "i", "*", "cell_size", ":", "(", "i", "+", "1", ")", "*", "cell_size", ",", "j", "*", "cell_size", ":", "(", "j", "+", "1", ")", "*", "cell_size", ",", "1", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "1", "]", "/", "255.", "\n", "temp_canvas", "[", "i", "*", "cell_size", ":", "(", "i", "+", "1", ")", "*", "cell_size", ",", "j", "*", "cell_size", ":", "(", "j", "+", "1", ")", "*", "cell_size", ",", "2", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "2", "]", "/", "255.", "\n", "", "", "rot_image", "=", "tfa", ".", "image", ".", "rotate", "(", "tf", ".", "convert_to_tensor", "(", "temp_canvas", ")", ",", "tf", ".", "constant", "(", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "-", "1", ",", "1", ")", "*", "math", ".", "pi", "/", "2", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "interpolation", "=", "'BILINEAR'", ")", "\n", "canvas", "=", "tf", ".", "image", ".", "central_crop", "(", "rot_image", ",", "0.25", ")", ".", "numpy", "(", ")", "\n", "# plt.imshow(canvas)", "\n", "# plt.show()", "\n", "\n", "", "elif", "'ckb'", "in", "bg", ":", "\n", "            ", "if", "'unseen'", "in", "bg", ":", "\n", "                ", "shuffle", "(", "self", ".", "test_colors", ")", "\n", "colors", "=", "self", ".", "test_colors", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                ", "shuffle", "(", "self", ".", "train_colors", ")", "\n", "colors", "=", "self", ".", "train_colors", "[", ":", "2", "]", "\n", "", "num_ckb", "=", "int", "(", "bg", "[", "0", "]", ")", "\n", "h", "=", "height", "//", "num_ckb", ";", "w", "=", "width", "//", "num_ckb", "\n", "for", "i", "in", "range", "(", "num_ckb", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_ckb", ")", ":", "\n", "                    ", "canvas", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", "0", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "0", "]", "/", "255.", "\n", "canvas", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", "1", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "1", "]", "/", "255.", "\n", "canvas", "[", "i", "*", "h", ":", "(", "i", "+", "1", ")", "*", "h", ",", "j", "*", "w", ":", "(", "j", "+", "1", ")", "*", "w", ",", "2", "]", "=", "colors", "[", "(", "i", "+", "j", ")", "%", "2", "]", "[", "2", "]", "/", "255.", "\n", "\n", "", "", "", "drawn_boxes", "=", "[", "]", "#x,y", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "rand_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "width", "-", "14", ")", "\n", "rand_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "height", "-", "14", ")", "\n", "while", "calculate_overlap", "(", "rand_x", ",", "rand_y", ",", "drawn_boxes", ")", ":", "\n", "                ", "rand_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "width", "-", "14", ")", "\n", "rand_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "height", "-", "14", ")", "\n", "", "drawn_boxes", ".", "append", "(", "(", "rand_x", ",", "rand_y", ")", ")", "\n", "\n", "if", "not", "test", ":", "\n", "                ", "rand_img", "=", "self", ".", "train_x", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "train_x", ".", "shape", "[", "0", "]", ")", "]", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Sampling.call": [[10, 14], ["tensorflow.random.normal", "tensorflow.random.normal"], "methods", ["None"], ["    ", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "z_mean", ",", "z_sig", "=", "inputs", "\n", "epsilon", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "z_sig", ".", "shape", ",", "mean", "=", "0", ",", "stddev", "=", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "z_mean", "+", "z_sig", "*", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Encoder.__init__": [[17, 82], ["tensorflow.Layer.__init__", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "model.Sampling", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "model.Sampling", "NotImplemented", "tensorflow.keras.Sequential", "tensorflow.keras.Sequential", "tensorflow.keras.Sequential", "tensorflow.keras.Sequential", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "model.Sampling", "Exception", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.initializers.constant", "tensorflow.keras.initializers.constant", "tensorflow.keras.initializers.constant", "tensorflow.keras.initializers.constant"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dims", "=", "32", ",", "variational", "=", "True", ",", "type", "=", "'conv'", ",", "y_size", "=", "None", ",", "tau", "=", "None", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "variational", "=", "variational", "\n", "self", ".", "latent_dims", "=", "latent_dims", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "if", "type", "==", "'fc'", ":", "\n", "            ", "self", ".", "e1", "=", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e2", "=", "Dense", "(", "512", ",", "activation", "=", "'relu'", ")", "\n", "if", "variational", ":", "\n", "                ", "self", ".", "e3_mean", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "None", ")", "\n", "self", ".", "e3_sd", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "None", ")", "\n", "self", ".", "sampling", "=", "Sampling", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "e3", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "'relu'", ")", "\n", "", "self", ".", "call", "=", "self", ".", "call_fc", "\n", "\n", "", "elif", "type", "==", "'conv'", ":", "#always variational", "\n", "            ", "if", "self", ".", "variational", ":", "\n", "                ", "self", ".", "e1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "6", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "6", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "e3", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "\n", "\n", "self", ".", "e4_mean", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "None", ")", "\n", "self", ".", "e4_sd", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "'softplus'", ")", "#, kernel_initializer=tf.initializers.TruncatedNormal(),bias_initializer=tf.keras.initializers.constant(-1)", "\n", "self", ".", "sampling", "=", "Sampling", "(", ")", "\n", "\n", "self", ".", "call", "=", "self", ".", "call_conv", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplemented", "(", "'Deterministic convolution autoencoder not implemented'", ")", "\n", "", "", "elif", "type", "==", "'gmvae'", ":", "\n", "            ", "self", ".", "h_block", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "6", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'elu'", ")", ",", "\n", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "6", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'elu'", ")", ",", "\n", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'elu'", ")", "]", ")", "\n", "\n", "self", ".", "y_block", "=", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "Dense", "(", "1024", ",", "activation", "=", "'elu'", ")", ",", "\n", "Dropout", "(", "rate", "=", "0.2", ")", ",", "\n", "Dense", "(", "128", ",", "activation", "=", "'elu'", ")", ",", "\n", "]", ")", "\n", "self", ".", "do1", "=", "Dropout", "(", "rate", "=", "0.2", ")", "\n", "self", ".", "y_dense", "=", "Dense", "(", "y_size", ",", "activation", "=", "None", ",", "name", "=", "'y_dense'", ")", "\n", "\n", "# Z prior block", "\n", "self", ".", "do2", "=", "Dropout", "(", "rate", "=", "0.2", ")", "\n", "self", ".", "h_top_dense", "=", "Dense", "(", "512", ",", "activation", "=", "'elu'", ")", "\n", "self", ".", "do3", "=", "Dropout", "(", "rate", "=", "0.2", ")", "\n", "self", ".", "z_prior_mean", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "None", ",", "name", "=", "'z_prior_mean'", ")", "\n", "self", ".", "do4", "=", "Dropout", "(", "rate", "=", "0.2", ")", "\n", "self", ".", "z_prior_sig", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "'softplus'", ",", "name", "=", "'z_prior_sig'", ",", "bias_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "constant", "(", "1", ")", ")", "# kernel_initializer=tf.initializers.TruncatedNormal(),bias_initializer=tf.keras.initializers.constant(1))", "\n", "\n", "#Encoder block", "\n", "self", ".", "do5", "=", "Dropout", "(", "rate", "=", "0.2", ")", "\n", "self", ".", "e1", "=", "Dense", "(", "512", ",", "activation", "=", "'elu'", ")", "\n", "self", ".", "do6", "=", "Dropout", "(", "rate", "=", "0.1", ")", "\n", "self", ".", "z_mean", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "None", ")", "\n", "self", ".", "do7", "=", "Dropout", "(", "rate", "=", "0.1", ")", "\n", "self", ".", "z_sig", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "'softplus'", ",", "bias_initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "constant", "(", "1", ")", ")", "#kernel_initializer=tf.initializers.TruncatedNormal(),bias_initializer=tf.keras.initializers.constant(1))", "\n", "self", ".", "sampling", "=", "Sampling", "(", ")", "\n", "\n", "self", ".", "call", "=", "self", ".", "call_gmvae", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Type undefined'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Encoder.call_fc": [[85, 99], ["model.Encoder.flatten", "model.Encoder.e1", "model.Encoder.e2", "model.Encoder.e3_mean", "model.Encoder.e3_sd", "model.Encoder.sampling", "model.Encoder.e3"], "methods", ["None"], ["", "", "def", "call_fc", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "# x = tf.reshape(x, [-1,28*28])", "\n", "        ", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "# print(x.shape)", "\n", "x", "=", "self", ".", "e1", "(", "x", ")", "\n", "x", "=", "self", ".", "e2", "(", "x", ")", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "z_mean", "=", "self", ".", "e3_mean", "(", "x", ")", "\n", "z_log_var", "=", "self", ".", "e3_sd", "(", "x", ")", "\n", "z", "=", "self", ".", "sampling", "(", "(", "z_mean", ",", "z_log_var", ")", ")", "\n", "return", "z", ",", "z_mean", ",", "z_log_var", "\n", "", "else", ":", "\n", "            ", "z", "=", "self", ".", "e3", "(", "x", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Encoder.call_conv": [[100, 115], ["model.Encoder.e1", "model.Encoder.e2", "model.Encoder.e3", "model.Encoder.flatten", "model.Encoder.e4_mean", "model.Encoder.e4_sd", "model.Encoder.sampling"], "methods", ["None"], ["", "", "def", "call_conv", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "# x = tf.reshape(x, [-1,28,28,1])", "\n", "# print('input shape:',x.shape)", "\n", "        ", "x", "=", "self", ".", "e1", "(", "x", ")", "\n", "x", "=", "self", ".", "e2", "(", "x", ")", "\n", "x", "=", "self", ".", "e3", "(", "x", ")", "\n", "\n", "# precode_size = np.prod(x.shape[1:])", "\n", "# print('Precode shape:',x.shape)", "\n", "# print('Precode size:',precode_size)", "\n", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "z_mean", "=", "self", ".", "e4_mean", "(", "x", ")", "\n", "z_sig", "=", "self", ".", "e4_sd", "(", "x", ")", "\n", "z", "=", "self", ".", "sampling", "(", "(", "z_mean", ",", "z_sig", ")", ")", "\n", "return", "z", ",", "z_mean", ",", "z_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Encoder.call_gmvae": [[116, 136], ["model.Encoder.h_block", "model.Encoder.flatten", "model.Encoder.y_block", "model.Encoder.y_dense", "tensorflow.random.uniform", "tensorflow.random.uniform", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "model.Encoder.z_prior_mean", "model.Encoder.z_prior_sig", "model.Encoder.h_top_dense", "model.Encoder.e1", "model.Encoder.z_mean", "model.Encoder.z_sig", "model.Encoder.sampling", "model.Encoder.do5", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.math.log"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax", "home.repos.pwc.inspect_result.51616_split-vae.spair.utils.GumbelSM_Sampling.softmax"], ["", "def", "call_gmvae", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "h_block", "(", "x", ")", "\n", "h", "=", "self", ".", "flatten", "(", "h", ")", "\n", "# y block", "\n", "y_hidden", "=", "self", ".", "y_block", "(", "h", ")", "\n", "y_logits", "=", "self", ".", "y_dense", "(", "y_hidden", ")", "\n", "noise", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "y_logits", ".", "shape", ")", "\n", "y", "=", "tf", ".", "nn", ".", "softmax", "(", "(", "y_logits", "-", "tf", ".", "math", ".", "log", "(", "-", "tf", ".", "math", ".", "log", "(", "noise", ")", ")", ")", "/", "self", ".", "tau", ",", "axis", "=", "1", ")", "#gumbel softmax", "\n", "\n", "z_prior_mean", "=", "self", ".", "z_prior_mean", "(", "y", ")", "\n", "z_prior_sig", "=", "self", ".", "z_prior_sig", "(", "y", ")", "\n", "\n", "h_top", "=", "self", ".", "h_top_dense", "(", "y", ")", "\n", "h", "=", "self", ".", "e1", "(", "self", ".", "do5", "(", "h", ",", "training", ")", ")", "\n", "h", "=", "h", "+", "h_top", "\n", "z_mean", "=", "self", ".", "z_mean", "(", "h", ")", "\n", "z_sig", "=", "self", ".", "z_sig", "(", "h", ")", "\n", "z", "=", "self", ".", "sampling", "(", "(", "z_mean", ",", "z_sig", ")", ")", "\n", "\n", "return", "z", ",", "z_mean", ",", "z_sig", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Encoder.encode_y": [[137, 141], ["model.Encoder.z_prior_mean", "model.Encoder.z_prior_sig"], "methods", ["None"], ["", "def", "encode_y", "(", "self", ",", "y", ")", ":", "\n", "        ", "z_prior_mean", "=", "self", ".", "z_prior_mean", "(", "y", ")", "\n", "z_prior_sig", "=", "self", ".", "z_prior_sig", "(", "y", ")", "\n", "return", "z_prior_mean", ",", "z_prior_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Decoder.__init__": [[146, 157], ["tensorflow.Layer.__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dims", "=", "32", ",", "image_shape", "=", "None", ",", "type", "=", "'conv'", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "latent_dims", "=", "latent_dims", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "type", "=", "type", "\n", "\n", "self", ".", "d1", "=", "Dense", "(", "self", ".", "image_shape", "[", "1", "]", "//", "8", "*", "self", ".", "image_shape", "[", "2", "]", "//", "8", "*", "128", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d2", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d3", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d4", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "6", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d5", "=", "Conv2D", "(", "filters", "=", "6", ",", "kernel_size", "=", "6", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Decoder.call": [[158, 170], ["model.Decoder.d1", "tensorflow.reshape", "tensorflow.reshape", "model.Decoder.d2", "tensorflow.image.resize", "tensorflow.image.resize", "model.Decoder.d3", "tensorflow.image.resize", "tensorflow.image.resize", "model.Decoder.d4", "tensorflow.image.resize", "tensorflow.image.resize", "model.Decoder.d5"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "# print('Code shape:',x.shape)", "\n", "        ", "x", "=", "self", ".", "d1", "(", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "image_shape", "[", "1", "]", "//", "8", ",", "self", ".", "image_shape", "[", "2", "]", "//", "8", ",", "128", "]", ")", "\n", "x", "=", "self", ".", "d2", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_shape", "[", "1", "]", "//", "4", ",", "self", ".", "image_shape", "[", "2", "]", "//", "4", "]", ")", "\n", "x", "=", "self", ".", "d3", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_shape", "[", "1", "]", "//", "2", ",", "self", ".", "image_shape", "[", "2", "]", "//", "2", "]", ")", "\n", "x", "=", "self", ".", "d4", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize", "(", "x", ",", "[", "self", ".", "image_shape", "[", "1", "]", ",", "self", ".", "image_shape", "[", "2", "]", "]", ")", "\n", "x", "=", "self", ".", "d5", "(", "x", ")", "\n", "return", "x", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "x", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "#x_mean, x_log_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGVae.__init__": [[175, 187], ["tensorflow.keras.Model.__init__", "model.Encoder", "model.Encoder", "model.Decoder", "model.Decoder"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_latent_dims", ",", "local_latent_dims", ",", "image_shape", "=", "None", ",", "variational", "=", "True", ",", "type", "=", "'conv'", ")", ":", "\n", "        ", "super", "(", "LGVae", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.latent_dims = latent_dims", "\n", "self", ".", "global_latent_dims", "=", "global_latent_dims", "\n", "self", ".", "local_latent_dims", "=", "local_latent_dims", "\n", "self", ".", "variational", "=", "variational", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "encoder_x", "=", "Encoder", "(", "latent_dims", "=", "global_latent_dims", ")", "\n", "self", ".", "encoder_x_hat", "=", "Encoder", "(", "latent_dims", "=", "local_latent_dims", ")", "\n", "\n", "self", ".", "decoder_x", "=", "Decoder", "(", "latent_dims", "=", "global_latent_dims", "+", "local_latent_dims", ",", "image_shape", "=", "image_shape", ")", "# use both z_g and z_l", "\n", "self", ".", "decoder_x_hat", "=", "Decoder", "(", "latent_dims", "=", "local_latent_dims", ",", "image_shape", "=", "image_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGVae.call": [[189, 203], ["NotImplementedError", "model.LGVae.encoder_x", "model.LGVae.encoder_x_hat", "model.LGVae.decoder_x", "model.LGVae.decoder_x_hat", "tensorflow.concat", "tensorflow.concat"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", ",", "x_hat", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "inputs", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "# print(x.shape)", "\n", "# print(x_hat.shape)", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "z_x", ",", "z_mean_x", ",", "z_sig_x", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "z_x_hat", ",", "z_mean_x_hat", ",", "z_sig_x_hat", "=", "self", ".", "encoder_x_hat", "(", "x_hat", ")", "\n", "\n", "x_mean", ",", "x_log_scale", "=", "self", ".", "decoder_x", "(", "tf", ".", "concat", "(", "[", "z_x", ",", "z_x_hat", "]", ",", "axis", "=", "1", ")", ")", "\n", "x_hat_mean", ",", "x_hat_log_scale", "=", "self", ".", "decoder_x_hat", "(", "z_x_hat", ")", "\n", "\n", "return", "x_mean", ",", "x_log_scale", ",", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "z_x_hat", ",", "x_hat_mean", ",", "x_hat_log_scale", ",", "z_mean_x_hat", ",", "z_sig_x_hat", "\n", "#else:", "\n", "", "raise", "NotImplementedError", "(", "'Determiistic LG-AE not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGVae.encode": [[204, 210], ["model.LGVae.encoder_x", "model.LGVae.encoder_x_hat"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", ",", "x_hat", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "inputs", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "z_x", ",", "z_mean_x", ",", "z_sig_x", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "z_x_hat", ",", "z_mean_x_hat", ",", "z_sig_x_hat", "=", "self", ".", "encoder_x_hat", "(", "x_hat", ")", "\n", "return", "z_x", ",", "z_x_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGVae.decode": [[211, 219], ["model.LGVae.decoder_x", "model.LGVae.decoder_x_hat", "tensorflow.concat", "tensorflow.concat", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["None"], ["", "", "def", "decode", "(", "self", ",", "z_x", ",", "z_x_hat", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "x_mean", ",", "x_log_scale", "=", "self", ".", "decoder_x", "(", "tf", ".", "concat", "(", "[", "z_x", ",", "z_x_hat", "]", ",", "axis", "=", "1", ")", ")", "\n", "x_hat_mean", ",", "x_hat_log_scale", "=", "self", ".", "decoder_x_hat", "(", "z_x_hat", ")", "\n", "if", "rescale", ":", "\n", "            ", "x_recon", "=", "tf", ".", "clip_by_value", "(", "(", "x_mean", "+", "1", ")", "*", "0.5", ",", "0.", ",", "1.", ")", "\n", "x_hat_recon", "=", "tf", ".", "clip_by_value", "(", "(", "x_hat_mean", "+", "1", ")", "*", "0.5", ",", "0.", ",", "1.", ")", "\n", "return", "x_recon", ",", "x_hat_recon", "\n", "", "return", "x_mean", ",", "x_hat_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGGMVae.__init__": [[222, 235], ["tensorflow.keras.Model.__init__", "model.Encoder", "model.Encoder", "model.Decoder", "model.Decoder"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_latent_dims", ",", "local_latent_dims", ",", "image_shape", ",", "y_size", ",", "tau", ",", "variational", "=", "True", ",", "type", "=", "'conv'", ")", ":", "\n", "        ", "super", "(", "LGGMVae", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.latent_dims = latent_dims", "\n", "self", ".", "global_latent_dims", "=", "global_latent_dims", "\n", "self", ".", "local_latent_dims", "=", "local_latent_dims", "\n", "self", ".", "variational", "=", "variational", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "y_size", "=", "y_size", "\n", "self", ".", "encoder_x", "=", "Encoder", "(", "latent_dims", "=", "global_latent_dims", ",", "type", "=", "'gmvae'", ",", "y_size", "=", "y_size", ",", "tau", "=", "tau", ")", "\n", "self", ".", "encoder_x_hat", "=", "Encoder", "(", "latent_dims", "=", "local_latent_dims", ")", "\n", "\n", "self", ".", "decoder_x", "=", "Decoder", "(", "latent_dims", "=", "global_latent_dims", "+", "local_latent_dims", ",", "image_shape", "=", "image_shape", ")", "# use both z_g and z_l", "\n", "self", ".", "decoder_x_hat", "=", "Decoder", "(", "latent_dims", "=", "local_latent_dims", ",", "image_shape", "=", "image_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGGMVae.call": [[237, 251], ["NotImplementedError", "model.LGGMVae.encoder_x", "model.LGGMVae.encoder_x_hat", "model.LGGMVae.decoder_x", "model.LGGMVae.decoder_x_hat", "tensorflow.concat", "tensorflow.concat"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "x_hat", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "inputs", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "# print(x.shape)", "\n", "# print(x_hat.shape)", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "z_x_hat", ",", "z_mean_x_hat", ",", "z_sig_x_hat", "=", "self", ".", "encoder_x_hat", "(", "x_hat", ")", "\n", "\n", "x_mean", ",", "x_log_scale", "=", "self", ".", "decoder_x", "(", "tf", ".", "concat", "(", "[", "z_x", ",", "z_x_hat", "]", ",", "axis", "=", "1", ")", ")", "\n", "x_hat_mean", ",", "x_hat_log_scale", "=", "self", ".", "decoder_x_hat", "(", "z_x_hat", ")", "\n", "\n", "return", "x_mean", ",", "x_log_scale", ",", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "z_x_hat", ",", "x_hat_mean", ",", "x_hat_log_scale", ",", "z_mean_x_hat", ",", "z_sig_x_hat", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "\n", "#else:", "\n", "", "raise", "NotImplementedError", "(", "'Determiistic LG-AE not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGGMVae.encode": [[252, 258], ["model.LGGMVae.encoder_x", "model.LGGMVae.encoder_x_hat"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", ",", "x_hat", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", ",", "inputs", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "z_x_hat", ",", "z_mean_x_hat", ",", "z_sig_x_hat", "=", "self", ".", "encoder_x_hat", "(", "x_hat", ")", "\n", "return", "z_x", ",", "z_x_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGGMVae.decode": [[259, 267], ["model.LGGMVae.decoder_x", "model.LGGMVae.decoder_x_hat", "tensorflow.concat", "tensorflow.concat", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["None"], ["", "", "def", "decode", "(", "self", ",", "z_x", ",", "z_x_hat", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "x_mean", ",", "x_log_scale", "=", "self", ".", "decoder_x", "(", "tf", ".", "concat", "(", "[", "z_x", ",", "z_x_hat", "]", ",", "axis", "=", "1", ")", ")", "\n", "x_hat_mean", ",", "x_hat_log_scale", "=", "self", ".", "decoder_x_hat", "(", "z_x_hat", ")", "\n", "if", "rescale", ":", "\n", "            ", "x_recon", "=", "tf", ".", "clip_by_value", "(", "(", "x_mean", "+", "1", ")", "*", "0.5", ",", "0.", ",", "1.", ")", "\n", "x_hat_recon", "=", "tf", ".", "clip_by_value", "(", "(", "x_hat_mean", "+", "1", ")", "*", "0.5", ",", "0.", ",", "1.", ")", "\n", "return", "x_recon", ",", "x_hat_recon", "\n", "", "return", "x_mean", ",", "x_hat_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGGMVae.encode_y": [[268, 271], ["model.LGGMVae.encoder_x.encode_y"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y"], ["", "def", "encode_y", "(", "self", ",", "y", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", ".", "encode_y", "(", "y", ")", "\n", "return", "z_prior_mean", ",", "z_prior_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.LGGMVae.get_y": [[272, 276], ["model.LGGMVae.encoder_x"], "methods", ["None"], ["", "def", "get_y", "(", "self", ",", "x", ")", ":", "\n", "        ", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "# print('y_logits.shape:', y_logits.shape)", "\n", "return", "y", ",", "y_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.__init__": [[278, 287], ["tensorflow.keras.Model.__init__", "model.Encoder", "model.Decoder"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_latent_dims", ",", "image_shape", ",", "y_size", ",", "tau", ",", "variational", "=", "True", ",", "type", "=", "'conv'", ")", ":", "\n", "        ", "super", "(", "GMVae", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.latent_dims = latent_dims", "\n", "self", ".", "global_latent_dims", "=", "global_latent_dims", "\n", "self", ".", "variational", "=", "variational", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "y_size", "=", "y_size", "\n", "self", ".", "encoder_x", "=", "Encoder", "(", "latent_dims", "=", "global_latent_dims", ",", "type", "=", "'gmvae'", ",", "y_size", "=", "y_size", ",", "tau", "=", "tau", ")", "\n", "self", ".", "decoder_x", "=", "Decoder", "(", "latent_dims", "=", "global_latent_dims", ",", "image_shape", "=", "image_shape", ")", "# use both z_g and z_l", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.call": [[288, 300], ["NotImplementedError", "model.GMVae.encoder_x", "model.GMVae.decoder_x"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "# print(x.shape)", "\n", "# print(x_hat.shape)", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "\n", "x_mean", ",", "x_log_scale", "=", "self", ".", "decoder_x", "(", "z_x", ")", "\n", "\n", "return", "x_mean", ",", "x_log_scale", ",", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "\n", "#else:", "\n", "", "raise", "NotImplementedError", "(", "'Determiistic LG-AE not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode": [[301, 306], ["model.GMVae.encoder_x"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "return", "z_x", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.decode": [[307, 313], ["model.GMVae.decoder_x", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["None"], ["", "", "def", "decode", "(", "self", ",", "z_x", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "x_mean", ",", "x_log_scale", "=", "self", ".", "decoder_x", "(", "z_x", ")", "\n", "if", "rescale", ":", "\n", "            ", "x_recon", "=", "tf", ".", "clip_by_value", "(", "(", "x_mean", "+", "1", ")", "*", "0.5", ",", "0.", ",", "1.", ")", "\n", "return", "x_recon", "\n", "", "return", "x_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y": [[314, 317], ["model.GMVae.encoder_x.encode_y"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.encode_y"], ["", "def", "encode_y", "(", "self", ",", "y", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", ".", "encode_y", "(", "y", ")", "\n", "return", "z_prior_mean", ",", "z_prior_sig", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.GMVae.get_y": [[318, 321], ["model.GMVae.encoder_x"], "methods", ["None"], ["", "def", "get_y", "(", "self", ",", "x", ")", ":", "\n", "        ", "z_x", ",", "z_mean_x", ",", "z_sig_x", ",", "y", ",", "y_logits", ",", "z_prior_mean", ",", "z_prior_sig", "=", "self", ".", "encoder_x", "(", "x", ")", "\n", "return", "y", ",", "y_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__": [[326, 343], ["tensorflow.keras.Model.__init__", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dims", "=", "256", ",", "target_shape", "=", "None", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "BatchNormalization", "(", ")", "\n", "self", ".", "e1", "=", "Conv2D", "(", "filters", "=", "32", ",", "kernel_size", "=", "6", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "bn2", "=", "BatchNormalization", "(", ")", "\n", "self", ".", "e2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "6", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "bn3", "=", "BatchNormalization", "(", ")", "\n", "self", ".", "e3", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "bn3", "=", "BatchNormalization", "(", ")", "\n", "self", ".", "e3", "=", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "d1", "=", "Dropout", "(", "0.25", ")", "\n", "self", ".", "e4", "=", "Dense", "(", "latent_dims", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d2", "=", "Dropout", "(", "0.25", ")", "\n", "self", ".", "e5", "=", "Dense", "(", "latent_dims", "//", "4", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "d3", "=", "Dropout", "(", "0.25", ")", "\n", "self", ".", "e6", "=", "Dense", "(", "target_shape", ",", "activation", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.model.Classifier.call": [[344, 353], ["model.Classifier.e1", "model.Classifier.e2", "model.Classifier.e3", "model.Classifier.e4", "model.Classifier.e5", "model.Classifier.e6", "model.Classifier.bn1", "model.Classifier.bn2", "model.Classifier.bn3", "model.Classifier.d1", "model.Classifier.d2", "model.Classifier.d3", "model.Classifier.flatten"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "e1", "(", "self", ".", "bn1", "(", "x", ",", "training", ")", ")", "\n", "x", "=", "self", ".", "e2", "(", "self", ".", "bn2", "(", "x", ",", "training", ")", ")", "\n", "x", "=", "self", ".", "e3", "(", "self", ".", "bn3", "(", "x", ",", "training", ")", ")", "\n", "x", "=", "self", ".", "e4", "(", "self", ".", "d1", "(", "self", ".", "flatten", "(", "x", ")", ",", "training", ")", ")", "\n", "x", "=", "self", ".", "e5", "(", "self", ".", "d2", "(", "x", ",", "training", ")", ")", "\n", "x", "=", "self", ".", "e6", "(", "self", ".", "d3", "(", "x", ",", "training", ")", ")", "\n", "# print('output shape:',x.shape)", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.51616_split-vae.vae.utils.download_file_from_google_drive": [[11, 23], ["requests.Session", "requests.Session.get", "utils.get_confirm_token", "utils.save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.utils.get_confirm_token", "home.repos.pwc.inspect_result.51616_split-vae.vae.utils.save_response_content"], ["__delattr__", "=", "dict", ".", "__delitem__", "\n", "\n", "# https://github.com/e2crawfo/auto_yolo/blob/d7a070549999d42566db66f6c25b88e20730fd27/auto_yolo/models/core.py#L37", "\n", "", "def", "concrete_binary_pre_sigmoid_sample", "(", "log_odds", ",", "temperature", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "u", "=", "tf", ".", "random", ".", "uniform", "(", "tf", ".", "shape", "(", "log_odds", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ")", "\n", "noise", "=", "tf", ".", "math", ".", "log", "(", "u", "+", "eps", ")", "-", "tf", ".", "math", ".", "log", "(", "1.0", "-", "u", "+", "eps", ")", "\n", "return", "(", "log_odds", "+", "noise", ")", "/", "temperature", "\n", "\n", "", "class", "Sampling", "(", "Layer", ")", ":", "\n", "    ", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "z_mean", ",", "z_sigma", "=", "inputs", "\n", "epsilon", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "tf", ".", "shape", "(", "z_sigma", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.utils.get_confirm_token": [[24, 30], ["response.cookies.items", "key.startswith"], "function", ["None"], ["return", "z_mean", "+", "z_sigma", "*", "epsilon", "\n", "\n", "\n", "\n", "\n", "", "", "class", "GumbelSM_Sampling", "(", "Layer", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", "=", "'GumbelSM'", ",", "tau", "=", "0.4", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.utils.save_response_content": [[31, 38], ["open", "response.iter_content", "f.write"], "function", ["None"], ["        ", "super", "(", "GumbelSM_Sampling", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "\n", "", "def", "softmax", "(", "self", ",", "logits", ",", "axis", ")", ":", "\n", "            ", "x", "=", "logits", "/", "self", ".", "tau", "\n", "b", "=", "tf", ".", "reduce_max", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "exp_logits", "=", "tf", ".", "exp", "(", "x", "-", "b", ")", "\n", "return", "exp_logits", "/", "tf", ".", "reduce_sum", "(", "exp_logits", ",", "axis", ",", "keepdims", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.51616_split-vae.vae.classifier.main": [[14, 110], ["utils.dotdict", "print", "data.get_dataset", "train_dataset.shuffle().batch().prefetch.concatenate", "train_dataset.shuffle().batch().prefetch.shuffle().batch().prefetch", "test_dataset.batch().prefetch.batch().prefetch", "model.Classifier", "tensorflow.keras.optimizers.Adam", "print", "model.Classifier.summary", "print", "tensorflow.keras.losses.CategoricalCrossentropy", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.Mean", "tensorflow.keras.metrics.CategoricalAccuracy", "tensorflow.keras.metrics.CategoricalAccuracy", "range", "model.Classifier.save_weights", "model.Classifier", "print", "print", "tf.keras.metrics.CategoricalAccuracy.reset_states", "print", "model.Classifier.load_weights", "print", "tf.keras.metrics.CategoricalAccuracy.reset_states", "tape.gradient", "tf.keras.optimizers.Adam.apply_gradients", "tf.keras.metrics.Mean.", "tf.keras.metrics.CategoricalAccuracy.", "model.Classifier.", "tensorflow.nn.softmax_cross_entropy_with_logits", "tf.keras.metrics.Mean.", "tf.keras.metrics.CategoricalAccuracy.", "time.time", "print", "print", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.Mean.reset_states", "tf.keras.metrics.CategoricalAccuracy.reset_states", "tf.keras.metrics.CategoricalAccuracy.reset_states", "model.Classifier.", "tensorflow.nn.softmax_cross_entropy_with_logits", "tf.keras.metrics.CategoricalAccuracy.", "model.Classifier.", "tensorflow.nn.softmax_cross_entropy_with_logits", "tf.keras.metrics.CategoricalAccuracy.", "train_dataset.shuffle().batch().prefetch.shuffle().batch", "test_dataset.batch().prefetch.batch", "model.Classifier.", "tensorflow.GradientTape", "model.Classifier.", "tensorflow.nn.softmax_cross_entropy_with_logits", "zip", "classifier.main.train_step"], "function", ["home.repos.pwc.inspect_result.51616_split-vae.vae.data.get_dataset"], ["def", "main", "(", ")", ":", "\n", "# parser = argparse.ArgumentParser()", "\n", "# parser.add_argument('--latent_dims', type=int, nargs='?', default=256)", "\n", "# parser.add_argument('--learning_rate', type=float, nargs='?', default=1e-4)", "\n", "# parser.add_argument('--dataset', type=str, nargs='?', default = 'svhn')", "\n", "# parser.add_argument('--epochs', type=int, nargs='?', default = 20)", "\n", "# parser.add_argument('--model', type=str, nargs='?', default='variational')", "\n", "# parser.add_argument('--type', type=str, nargs='?', default='conv')", "\n", "# parser.add_argument('--batch_size', type=int, nargs='?', default=32)", "\n", "# parser.add_argument('--runs', type=int, nargs='?', default=1)", "\n", "\n", "# args = parser.parse_args()", "\n", "\n", "\n", "\t", "BATCH_SIZE", "=", "32", "# args.batch_size", "\n", "\n", "config", "=", "dotdict", "(", "{", "'learning_rate'", ":", "1e-4", ",", "'latent_dims'", ":", "256", ",", "\n", "'dataset'", ":", "'svhn'", ",", "'epochs'", ":", "20", ",", "'batch_size'", ":", "32", "}", ")", "\n", "print", "(", "'Config:'", ",", "config", ")", "\n", "\n", "train_dataset", ",", "test_dataset", ",", "input_shape", "=", "data", ".", "get_dataset", "(", "dataset", "=", "config", ".", "dataset", ",", "get_label", "=", "True", ")", "\n", "train_dataset", "=", "train_dataset", ".", "concatenate", "(", "test_dataset", ")", "\n", "train_dataset", "=", "train_dataset", ".", "shuffle", "(", "20000", ")", ".", "batch", "(", "BATCH_SIZE", ")", ".", "prefetch", "(", "buffer_size", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "test_dataset", "=", "test_dataset", ".", "batch", "(", "BATCH_SIZE", ")", ".", "prefetch", "(", "buffer_size", "=", "tf", ".", "data", ".", "experimental", ".", "AUTOTUNE", ")", "\n", "\n", "model", "=", "Classifier", "(", "latent_dims", "=", "config", ".", "latent_dims", ",", "target_shape", "=", "10", ")", "\n", "optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "learning_rate", "=", "config", ".", "learning_rate", ",", "amsgrad", "=", "True", ")", "\n", "print", "(", "'Model output shape:'", ",", "model", "(", "tf", ".", "zeros", "(", "[", "8", ",", "32", ",", "32", ",", "3", "]", ")", ")", ".", "shape", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "print", "(", "'Training a classifier'", ")", "\n", "\n", "cross_ent", "=", "tf", ".", "keras", ".", "losses", ".", "CategoricalCrossentropy", "(", ")", "\n", "train_loss", "=", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", "name", "=", "'train_loss'", ")", "\n", "test_loss", "=", "tf", ".", "keras", ".", "metrics", ".", "Mean", "(", "name", "=", "'test_loss'", ")", "\n", "train_acc", "=", "tf", ".", "keras", ".", "metrics", ".", "CategoricalAccuracy", "(", ")", "\n", "test_acc", "=", "tf", ".", "keras", ".", "metrics", ".", "CategoricalAccuracy", "(", ")", "\n", "\n", "\n", "@", "tf", ".", "function", "\n", "def", "train_step", "(", "images", ",", "labels", ",", "model", ",", "optimizer", ")", ":", "\n", "\t\t", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "\t\t\t", "pred", "=", "model", "(", "images", ",", "training", "=", "True", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", ",", "pred", ")", "\n", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "loss", ",", "model", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "model", ".", "trainable_variables", ")", ")", "\n", "train_loss", "(", "loss", ")", "\n", "train_acc", "(", "labels", ",", "pred", ")", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "test_step", "(", "images", ",", "labels", ",", "model", ")", ":", "\n", "\t  ", "pred", "=", "model", "(", "images", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", ",", "pred", ")", "\n", "\n", "test_loss", "(", "loss", ")", "\n", "test_acc", "(", "labels", ",", "pred", ")", "\n", "\n", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "config", ".", "epochs", "+", "1", ")", ":", "\n", "\t\t", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "images", ",", "labels", "in", "train_dataset", ":", "\n", "\t\t\t", "train_step", "(", "images", ",", "labels", ",", "model", ",", "optimizer", ")", "\n", "\n", "", "for", "images", ",", "labels", "in", "test_dataset", ":", "\n", "\t\t\t", "test_step", "(", "images", ",", "labels", ",", "model", ")", "\n", "\n", "", "template", "=", "'Epoch {}, Train Loss: {:.4f}, Train acc {:.4f}, Test Loss: {:.4f}, Test acc: {:.4f}'", "\n", "print", "(", "template", ".", "format", "(", "epoch", ",", "train_loss", ".", "result", "(", ")", ",", "train_acc", ".", "result", "(", ")", ",", "test_loss", ".", "result", "(", ")", ",", "test_acc", ".", "result", "(", ")", ")", ")", "\n", "print", "(", "'Epoch time: {:.2f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "train_loss", ".", "reset_states", "(", ")", "\n", "test_loss", ".", "reset_states", "(", ")", "\n", "test_acc", ".", "reset_states", "(", ")", "\n", "train_acc", ".", "reset_states", "(", ")", "\n", "\n", "", "model", ".", "save_weights", "(", "'models/'", "+", "config", ".", "dataset", "+", "'_classifier_weights.h5'", ")", "\n", "# tf.keras.experimental.export_saved_model(model, 'models/classifier.h5')", "\n", "\n", "# Create new model", "\n", "model", "=", "Classifier", "(", "latent_dims", "=", "config", ".", "latent_dims", ",", "target_shape", "=", "10", ")", "\n", "print", "(", "'Test untrained model'", ")", "\n", "for", "images", ",", "labels", "in", "test_dataset", ":", "\n", "\t\t", "pred", "=", "model", "(", "images", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", ",", "pred", ")", "\n", "test_acc", "(", "labels", ",", "pred", ")", "\n", "", "print", "(", "'Test acc: {:.4f}'", ".", "format", "(", "test_acc", ".", "result", "(", ")", ")", ")", "\n", "test_acc", ".", "reset_states", "(", ")", "\n", "\n", "print", "(", "'Test model with trained weights'", ")", "\n", "model", ".", "load_weights", "(", "'models/'", "+", "config", ".", "dataset", "+", "'_classifier_weights.h5'", ")", "\n", "for", "images", ",", "labels", "in", "test_dataset", ":", "\n", "\t\t", "pred", "=", "model", "(", "images", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", ",", "pred", ")", "\n", "test_acc", "(", "labels", ",", "pred", ")", "\n", "", "print", "(", "'Test acc: {:.4f}'", ".", "format", "(", "test_acc", ".", "result", "(", ")", ")", ")", "\n", "test_acc", ".", "reset_states", "(", ")", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]]}