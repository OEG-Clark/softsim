{"home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Preprocessing and EmbCreation.preprocess.tweet_preprocess2": [[45, 67], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "myre.sub", "re.sub.strip", "str", "re.sub", "re.sub", "re.sub", "str", "str"], "function", ["None"], ["def", "tweet_preprocess2", "(", "text", ")", ":", "\n", "\n", "\t", "text", "=", "re", ".", "sub", "(", "'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\)]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'http://'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'https://'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'@(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\)]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'@'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "and_rate", ",", "'and'", ",", "text", ")", "\n", "\n", "text", "=", "re", ".", "sub", "(", "replacables", ",", "''", ",", "text", ")", "\n", "# text=\"\".join(tknzr.tokenize(text))", "\n", "\n", "prev_text", "=", "''", "\n", "while", "text", "!=", "prev_text", ":", "\n", "\t\t", "prev_text", "=", "str", "(", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "str", "(", "num", ")", "+", "''", "+", "name", ",", "\"\\\\1 \\\\2\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "name", "+", "''", "+", "str", "(", "num", ")", ",", "\"\\\\1 \\\\2\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "prop_name", "+", "''", "+", "prop_name", ",", "\"\\\\1 \\\\2\"", ",", "text", ")", "\n", "\n", "", "text", "=", "myre", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "return", "text", ".", "strip", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.Net.__init__": [[91, 96], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.AGNNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "num_features", ",", "32", ")", "\n", "self", ".", "prop1", "=", "AGNNConv", "(", "requires_grad", "=", "True", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.Net.forward": [[97, 105], ["torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "GABtoTwitter_GNN.Net.prop1", "torch.dropout", "torch.dropout", "GABtoTwitter_GNN.Net.lin2", "torch.log_softmax", "torch.log_softmax", "GABtoTwitter_GNN.Net.lin1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prop1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.train": [[107, 112], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.test": [[114, 126], ["model.eval", "model", "sklearn.metrics.f1_score", "accs.append", "Mf1_score.append", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "return", "accs", ",", "Mf1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.getData": [[129, 131], ["None"], "function", ["None"], ["", "def", "getData", "(", ")", ":", "\n", "    ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.ratio_split": [[132, 141], ["list", "list.extend", "torch.ByteTensor", "torch.ByteTensor"], "function", ["None"], ["", "def", "ratio_split", "(", "haters", ",", "non_haters", ",", "nodes", ")", ":", "\n", "    ", "testList", "=", "list", "(", "haters", ")", "\n", "testList", ".", "extend", "(", "non_haters", ")", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "user", "in", "testList", ":", "\n", "        ", "test_mask", "[", "user", "]", "=", "1", "\n", "", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "return", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.load_checkpoint": [[154, 162], ["torch.load", "torch.load", "GABtoTwitter_GNN.Net", "Net.load_state_dict", "Net.parameters", "Net.eval"], "function", ["None"], ["def", "load_checkpoint", "(", "filepath", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "filepath", ")", "\n", "model", "=", "Net", "(", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "parameter", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.GABtoTwitter_GNN.evalMetric": [[163, 173], ["sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveTwitterModelAGNN.Net.__init__": [[133, 138], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.AGNNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "num_features", ",", "32", ")", "\n", "self", ".", "prop1", "=", "AGNNConv", "(", "requires_grad", "=", "True", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveTwitterModelAGNN.Net.forward": [[139, 147], ["torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "saveTwitterModelAGNN.Net.prop1", "torch.dropout", "torch.dropout", "saveTwitterModelAGNN.Net.lin2", "torch.log_softmax", "torch.log_softmax", "saveTwitterModelAGNN.Net.lin1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prop1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveTwitterModelAGNN.getData": [[82, 84], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "    ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveTwitterModelAGNN.Diff": [[91, 93], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveTwitterModelAGNN.ratio_split": [[94, 118], ["list", "list.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "\n", "#Creating Training List", "\n", "    ", "trainList", "=", "list", "(", "train_haters", ")", "\n", "trainList", ".", "extend", "(", "train_non_haters", ")", "\n", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "          ", "train_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "          ", "test_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveTwitterModelAGNN.train": [[149, 156], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "print", "F.nll_loss.backward", "optimizer.step", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", "\n", "print", "(", "loss", ",", "'\\n'", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveTwitterModelAGNN.test": [[158, 170], ["model.eval", "model", "sklearn.metrics.f1_score", "accs.append", "Mf1_score.append", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "return", "accs", ",", "Mf1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.Net.__init__": [[112, 117], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.AGNNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "num_features", ",", "32", ")", "\n", "self", ".", "prop1", "=", "AGNNConv", "(", "requires_grad", "=", "True", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.Net.forward": [[118, 126], ["torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "TwittertoGAB_GNN.Net.prop1", "torch.dropout", "torch.dropout", "TwittertoGAB_GNN.Net.lin2", "torch.log_softmax", "torch.log_softmax", "TwittertoGAB_GNN.Net.lin1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prop1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.train": [[128, 133], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.test": [[135, 147], ["model.eval", "model", "sklearn.metrics.f1_score", "accs.append", "Mf1_score.append", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "return", "accs", ",", "Mf1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.getData": [[150, 152], ["None"], "function", ["None"], ["", "def", "getData", "(", ")", ":", "\n", "    ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.ratio_split": [[153, 162], ["list", "list.extend", "torch.ByteTensor", "torch.ByteTensor"], "function", ["None"], ["", "def", "ratio_split", "(", "haters", ",", "non_haters", ",", "nodes", ")", ":", "\n", "    ", "testList", "=", "list", "(", "haters", ")", "\n", "testList", ".", "extend", "(", "non_haters", ")", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "user", "in", "testList", ":", "\n", "        ", "test_mask", "[", "graph_dict", "[", "user", "]", "]", "=", "1", "\n", "", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "return", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.load_checkpoint": [[176, 184], ["torch.load", "torch.load", "TwittertoGAB_GNN.Net", "Net.load_state_dict", "Net.parameters", "Net.eval"], "function", ["None"], ["def", "load_checkpoint", "(", "filepath", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "filepath", ")", "\n", "model", "=", "Net", "(", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "parameter", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.TwittertoGAB_GNN.evalMetric": [[185, 195], ["sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveGABModelAGNN.Net.__init__": [[160, 165], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.AGNNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "num_features", ",", "32", ")", "\n", "self", ".", "prop1", "=", "AGNNConv", "(", "requires_grad", "=", "True", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveGABModelAGNN.Net.forward": [[166, 174], ["torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "saveGABModelAGNN.Net.prop1", "torch.dropout", "torch.dropout", "saveGABModelAGNN.Net.lin2", "torch.log_softmax", "torch.log_softmax", "saveGABModelAGNN.Net.lin1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prop1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveGABModelAGNN.getData": [[90, 92], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "    ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveGABModelAGNN.Diff": [[117, 119], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveGABModelAGNN.ratio_split": [[120, 144], ["list", "list.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "\n", "#Creating Training List", "\n", "    ", "trainList", "=", "list", "(", "train_haters", ")", "\n", "trainList", ".", "extend", "(", "train_non_haters", ")", "\n", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "          ", "train_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "          ", "test_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveGABModelAGNN.train": [[176, 181], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Cross-Platform.saveGABModelAGNN.test": [[183, 195], ["model.eval", "model", "sklearn.metrics.f1_score", "accs.append", "Mf1_score.append", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "return", "accs", ",", "Mf1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.Net.__init__": [[185, 189], ["super().__init__", "torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ChebConv", "(", "num_features", ",", "32", ",", "K", "=", "1", ")", "\n", "self", ".", "conv2", "=", "ChebConv", "(", "32", ",", "num_classes", ",", "K", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.Net.forward": [[189, 195], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "GAB_CHEBY_Model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "GAB_CHEBY_Model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.getData": [[96, 98], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.Diff": [[123, 125], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.ratio_split": [[126, 164], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.evalMetric": [[167, 177], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.train": [[197, 202], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.test": [[204, 218], ["model.eval", "model", "GAB_CHEBY_Model.evalMetric", "f1_score", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_CHEBY_Model.getFoldWiseResult": [[314, 324], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.Net.__init__": [[185, 189], ["super().__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "num_features", ",", "32", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "32", ",", "2", ")", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.Net.forward": [[189, 195], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "GAB_GCN_Model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "GAB_GCN_Model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.getData": [[96, 98], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.Diff": [[123, 125], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.ratio_split": [[126, 164], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.evalMetric": [[167, 177], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.train": [[197, 202], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.test": [[204, 218], ["model.eval", "model", "GAB_GCN_Model.evalMetric", "f1_score", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GCN_Model.getFoldWiseResult": [[314, 324], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.Net.__init__": [[186, 190], ["super().__init__", "torch_geometric.nn.ARMAConv", "torch_geometric.nn.ARMAConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ARMAConv", "(", "num_features", ",", "32", ")", "\n", "self", ".", "conv2", "=", "ARMAConv", "(", "32", ",", "2", ")", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.Net.forward": [[190, 196], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "GAB_ARMA_Model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "GAB_ARMA_Model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.getData": [[96, 98], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.Diff": [[123, 125], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.ratio_split": [[126, 164], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.evalMetric": [[167, 177], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.train": [[198, 203], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.test": [[205, 219], ["model.eval", "model", "GAB_ARMA_Model.evalMetric", "f1_score", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_ARMA_Model.getFoldWiseResult": [[315, 325], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.Net.__init__": [[186, 190], ["super().__init__", "torch_geometric.nn.GATConv", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GATConv", "(", "num_features", ",", "32", ",", "heads", "=", "2", ",", "concat", "=", "True", ")", "\n", "self", ".", "conv2", "=", "GATConv", "(", "2", "*", "32", ",", "2", ",", "heads", "=", "2", ",", "concat", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.Net.forward": [[191, 198], ["GAB_GAT_Model.Net.conv1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "GAB_GAT_Model.Net.conv2", "GAB_GAT_Model.Net.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "x", ".", "log_softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.getData": [[96, 98], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.Diff": [[123, 125], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.ratio_split": [[126, 164], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.evalMetric": [[167, 177], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.train": [[200, 205], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.test": [[207, 221], ["model.eval", "model", "GAB_GAT_Model.evalMetric", "f1_score", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GAT_Model.getFoldWiseResult": [[317, 327], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.Net.__init__": [[185, 190], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.AGNNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "num_features", ",", "32", ")", "\n", "self", ".", "prop1", "=", "AGNNConv", "(", "requires_grad", "=", "True", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.Net.forward": [[191, 199], ["torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "GAB_AGNN_Model.Net.prop1", "torch.dropout", "torch.dropout", "GAB_AGNN_Model.Net.lin2", "torch.log_softmax", "torch.log_softmax", "GAB_AGNN_Model.Net.lin1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prop1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.getData": [[96, 98], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.Diff": [[123, 125], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.ratio_split": [[126, 164], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.evalMetric": [[167, 177], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.train": [[201, 206], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.test": [[208, 222], ["model.eval", "model", "GAB_AGNN_Model.evalMetric", "f1_score", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_AGNN_Model.getFoldWiseResult": [[318, 328], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.Net.__init__": [[186, 190], ["super().__init__", "torch_geometric.nn.SAGEConv", "torch_geometric.nn.SAGEConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "SAGEConv", "(", "num_features", ",", "32", ")", "\n", "self", ".", "conv2", "=", "SAGEConv", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.Net.forward": [[191, 198], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "GAB_GraphSage_Model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "GAB_GraphSage_Model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "#x = F.dropout(x, 0.5)", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.getData": [[96, 98], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.Diff": [[123, 125], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.ratio_split": [[126, 164], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "graph_dict", "[", "i", "]", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.evalMetric": [[167, 177], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.train": [[200, 205], ["model.train", "optimizer.zero_grad", "torch.nll_loss().backward", "optimizer.step", "torch.nll_loss", "model"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.test": [[207, 221], ["model.eval", "model", "GAB_GraphSage_Model.evalMetric", "f1_score", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.GABModels.GAB_GraphSage_Model.getFoldWiseResult": [[317, 327], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.Net.__init__": [[161, 165], ["super().__init__", "torch_geometric.nn.ARMAConv", "torch_geometric.nn.ARMAConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ARMAConv", "(", "num_features", ",", "32", ")", "\n", "self", ".", "conv2", "=", "ARMAConv", "(", "32", ",", "2", ")", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.Net.forward": [[165, 171], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "Twitter_ARMA_model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "Twitter_ARMA_model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.getData": [[87, 89], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.Diff": [[97, 99], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.ratio_split": [[100, 138], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.evalMetric": [[141, 151], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.train": [[173, 180], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "model", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", "lossCnt", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ",", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#print(lossCnt, \"Loss\", loss)", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.test": [[182, 202], ["model.eval", "model", "Twitter_ARMA_model.evalMetric", "f1_score", "roc_curve", "_auc.append", "f1_score", "_f1score.append", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach().cpu", "pred.detach().cpu", "auc", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "_auc", "=", "[", "]", "\n", "_f1score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_auc", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "fc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_f1score", ".", "append", "(", "fc", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "_auc", ",", "_f1score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_ARMA_model.getFoldWiseResult": [[303, 313], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.Net.__init__": [[160, 164], ["super().__init__", "torch_geometric.nn.GATConv", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GATConv", "(", "num_features", ",", "32", ",", "heads", "=", "2", ",", "concat", "=", "True", ")", "\n", "self", ".", "conv2", "=", "GATConv", "(", "2", "*", "32", ",", "2", ",", "heads", "=", "2", ",", "concat", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.Net.forward": [[165, 172], ["Twitter_GAT_model.Net.conv1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "Twitter_GAT_model.Net.conv2", "Twitter_GAT_model.Net.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "x", ".", "log_softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.getData": [[87, 89], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.Diff": [[97, 99], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.ratio_split": [[100, 138], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.evalMetric": [[141, 151], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.train": [[174, 181], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "model", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", "lossCnt", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ",", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#print(lossCnt, \"Loss\", loss)", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.test": [[183, 203], ["model.eval", "model", "Twitter_GAT_model.evalMetric", "f1_score", "roc_curve", "_auc.append", "f1_score", "_f1score.append", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach().cpu", "pred.detach().cpu", "auc", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "_auc", "=", "[", "]", "\n", "_f1score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_auc", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "fc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_f1score", ".", "append", "(", "fc", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "_auc", ",", "_f1score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GAT_model.getFoldWiseResult": [[304, 314], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.Net.__init__": [[161, 166], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.AGNNConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "num_features", ",", "32", ")", "\n", "self", ".", "prop1", "=", "AGNNConv", "(", "requires_grad", "=", "True", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.Net.forward": [[167, 175], ["torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "Twitter_AGNN_model.Net.prop1", "torch.dropout", "torch.dropout", "Twitter_AGNN_model.Net.lin2", "torch.log_softmax", "torch.log_softmax", "Twitter_AGNN_model.Net.lin1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "prop1", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.getData": [[87, 89], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.Diff": [[97, 99], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.ratio_split": [[100, 138], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.evalMetric": [[141, 151], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.train": [[177, 184], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "model", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", "lossCnt", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ",", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#print(lossCnt, \"Loss\", loss)", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.test": [[186, 206], ["model.eval", "model", "Twitter_AGNN_model.evalMetric", "f1_score", "roc_curve", "_auc.append", "f1_score", "_f1score.append", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach().cpu", "pred.detach().cpu", "auc", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "_auc", "=", "[", "]", "\n", "_f1score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_auc", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "fc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_f1score", ".", "append", "(", "fc", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "_auc", ",", "_f1score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_AGNN_model.getFoldWiseResult": [[307, 317], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.Net.__init__": [[175, 179], ["super().__init__", "torch_geometric.nn.SAGEConv", "torch_geometric.nn.SAGEConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "SAGEConv", "(", "num_features", ",", "32", ")", "\n", "self", ".", "conv2", "=", "SAGEConv", "(", "32", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.Net.forward": [[180, 186], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "Twitter_Graphsage_model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "Twitter_Graphsage_model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.getData": [[87, 89], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.Diff": [[97, 99], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.ratio_split": [[100, 138], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.evalMetric": [[141, 151], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.train": [[189, 196], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "model", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", "lossCnt", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ",", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#print(lossCnt, \"Loss\", loss)", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.test": [[198, 218], ["model.eval", "model", "Twitter_Graphsage_model.evalMetric", "f1_score", "roc_curve", "_auc.append", "f1_score", "_f1score.append", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach().cpu", "pred.detach().cpu", "auc", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "_auc", "=", "[", "]", "\n", "_f1score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_auc", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "fc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_f1score", ".", "append", "(", "fc", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "_auc", ",", "_f1score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_Graphsage_model.getFoldWiseResult": [[319, 329], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.Net.__init__": [[159, 163], ["super().__init__", "torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ChebConv", "(", "num_features", ",", "32", ",", "K", "=", "1", ")", "\n", "self", ".", "conv2", "=", "ChebConv", "(", "32", ",", "num_classes", ",", "K", "=", "1", ")", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.Net.forward": [[163, 169], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "Twitter_CHEB_model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "Twitter_CHEB_model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.getData": [[87, 89], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.Diff": [[97, 99], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.ratio_split": [[100, 138], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.evalMetric": [[141, 151], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.train": [[171, 178], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "model", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", "lossCnt", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ",", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#print(lossCnt, \"Loss\", loss)", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.test": [[180, 200], ["model.eval", "model", "Twitter_CHEB_model.evalMetric", "f1_score", "roc_curve", "_auc.append", "f1_score", "_f1score.append", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach().cpu", "pred.detach().cpu", "auc", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "_auc", "=", "[", "]", "\n", "_f1score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_auc", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "fc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_f1score", ".", "append", "(", "fc", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "_auc", ",", "_f1score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_CHEB_model.getFoldWiseResult": [[301, 311], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__": [[159, 163], ["super().__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "num_features", ",", "32", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "32", ",", "2", ")", "\n", "", "def", "forward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Net.forward": [[163, 169], ["torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "Twitter_GCN_model.Net.conv2", "torch.log_softmax", "torch.log_softmax", "Twitter_GCN_model.Net.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "x", "=", "X", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "0.2", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.getData": [[87, 89], ["None"], "function", ["None"], ["def", "getData", "(", ")", ":", "\n", "  ", "return", "featureVector", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.Diff": [[97, 99], ["list", "set", "set"], "function", ["None"], ["def", "Diff", "(", "li1", ",", "li2", ")", ":", "\n", "    ", "return", "(", "list", "(", "set", "(", "li1", ")", "-", "set", "(", "li2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.ratio_split": [[100, 138], ["numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "int", "int", "trainList.extend", "valList.extend", "list", "list.extend", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "print"], "function", ["None"], ["", "def", "ratio_split", "(", "percentage", ",", "train_haters", ",", "train_non_haters", ",", "test_haters", ",", "test_non_haters", ",", "nodes", ")", ":", "\n", "    ", "np", ".", "random", ".", "shuffle", "(", "train_haters", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_non_haters", ")", "\n", "\n", "#Calculate Total number of training point and split training Data Point", "\n", "hlen", "=", "len", "(", "train_haters", ")", "\n", "nhlen", "=", "len", "(", "train_non_haters", ")", "\n", "htrain_len", "=", "int", "(", "percentage", "*", "hlen", ")", "\n", "nhtrain_len", "=", "int", "(", "percentage", "*", "nhlen", ")", "\n", "\n", "#Creating Training List", "\n", "trainList", "=", "train_haters", "[", "0", ":", "htrain_len", "]", "\n", "trainList", ".", "extend", "(", "train_non_haters", "[", "0", ":", "nhtrain_len", "]", ")", "\n", "#Creating Validation List", "\n", "valList", "=", "train_haters", "[", "htrain_len", ":", "]", "\n", "valList", ".", "extend", "(", "train_non_haters", "[", "nhtrain_len", ":", "]", ")", "\n", "#Creating Testing DataPoint", "\n", "textList", "=", "list", "(", "test_haters", ")", "\n", "textList", ".", "extend", "(", "test_non_haters", ")", "\n", "\n", "train_mask", "=", "[", "0", "]", "*", "nodes", "\n", "test_mask", "=", "[", "0", "]", "*", "nodes", "\n", "val_mask", "=", "[", "0", "]", "*", "nodes", "\n", "\n", "for", "i", "in", "trainList", ":", "\n", "      ", "train_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "valList", ":", "\n", "      ", "val_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "for", "i", "in", "textList", ":", "\n", "      ", "test_mask", "[", "i", "]", "=", "1", ";", "\n", "\n", "", "train_mask", "=", "torch", ".", "ByteTensor", "(", "train_mask", ")", "\n", "test_mask", "=", "torch", ".", "ByteTensor", "(", "test_mask", ")", "\n", "val_mask", "=", "torch", ".", "ByteTensor", "(", "val_mask", ")", "\n", "print", "(", "\"Splitting done\"", ")", "\n", "return", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric": [[141, 151], ["accuracy_score", "f1_score", "f1_score", "roc_curve", "auc", "recall_score", "precision_score"], "function", ["None"], ["", "def", "evalMetric", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "accuracy", "=", "accuracy_score", "(", "y_true", ",", "y_pred", ")", "\n", "mf1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "f1Score", "=", "f1_score", "(", "y_true", ",", "y_pred", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "area_under_c", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "recallScore", "=", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "precisionScore", "=", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", ",", "'mF1Score'", ":", "mf1Score", ",", "'f1Score'", ":", "f1Score", ",", "'auc'", ":", "area_under_c", ",", "\n", "'precision'", ":", "precisionScore", ",", "'recall'", ":", "recallScore", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train": [[171, 178], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "model", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.train"], ["", "", "def", "train", "(", "lossCnt", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "model", "(", ")", "[", "train_mask", "]", ",", "y", "[", "train_mask", "]", ",", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#print(lossCnt, \"Loss\", loss)", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.test": [[180, 200], ["model.eval", "model", "Twitter_GCN_model.evalMetric", "f1_score", "roc_curve", "_auc.append", "f1_score", "_f1score.append", "accs.append", "Mf1_score.append", "logits[].max", "y[].detach().cpu", "test_pred.detach().cpu", "logits[].max", "pred.eq().sum().item", "mask.sum().item", "y[].detach().cpu", "pred.detach().cpu", "y[].detach().cpu", "pred.detach().cpu", "auc", "y[].detach().cpu", "pred.detach().cpu", "y[].detach", "test_pred.detach", "pred.eq().sum", "mask.sum", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "y[].detach", "pred.detach", "pred.eq"], "function", ["home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.evalMetric"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", "(", ")", "\n", "accs", "=", "[", "]", "\n", "Mf1_score", "=", "[", "]", "\n", "_auc", "=", "[", "]", "\n", "_f1score", "=", "[", "]", "\n", "for", "mask", "in", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", ":", "\n", "        ", "pred", "=", "logits", "[", "mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "acc", "=", "pred", ".", "eq", "(", "y", "[", "mask", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mfc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_auc", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "fc", "=", "f1_score", "(", "y", "[", "mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "_f1score", ".", "append", "(", "fc", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "Mf1_score", ".", "append", "(", "mfc", ")", "\n", "", "test_pred", "=", "logits", "[", "test_mask", "]", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "test_Metrics", "=", "evalMetric", "(", "y", "[", "test_mask", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "test_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "return", "accs", ",", "Mf1_score", ",", "_auc", ",", "_f1score", ",", "test_Metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.TwitterModels.Twitter_GCN_model.getFoldWiseResult": [[301, 311], ["print", "print", "FinalRes[].extend", "numpy.mean", "numpy.std"], "function", ["None"], ["", "", "", "def", "getFoldWiseResult", "(", "dict_fold", ")", ":", "\n", "    ", "FinalRes", "=", "{", "}", "\n", "for", "percent", "in", "percentages", ":", "\n", "        ", "FinalRes", "[", "percent", "]", "=", "[", "]", "\n", "for", "fold", "in", "validationFold", ":", "\n", "            ", "FinalRes", "[", "percent", "]", ".", "extend", "(", "dict_fold", "[", "percent", "]", "[", "fold", "]", ")", "\n", "\n", "", "", "for", "percent", "in", "percentages", ":", "\n", "        ", "print", "(", "percent", ",", "'\\t'", ",", "np", ".", "mean", "(", "FinalRes", "[", "percent", "]", ")", ",", "'\\t'", ",", "np", ".", "std", "(", "FinalRes", "[", "percent", "]", ")", ")", "\n", "", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hate-alert_Hateful-users-detection.Preprocessing and EmbeddingCreation.preprocess.tweet_preprocess2": [[45, 67], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "myre.sub", "re.sub.strip", "str", "re.sub", "re.sub", "re.sub", "str", "str"], "function", ["None"], ["def", "tweet_preprocess2", "(", "text", ")", ":", "\n", "\n", "\t", "text", "=", "re", ".", "sub", "(", "'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\)]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'http://'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'https://'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'@(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\)]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'@'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "and_rate", ",", "'and'", ",", "text", ")", "\n", "\n", "text", "=", "re", ".", "sub", "(", "replacables", ",", "''", ",", "text", ")", "\n", "# text=\"\".join(tknzr.tokenize(text))", "\n", "\n", "prev_text", "=", "''", "\n", "while", "text", "!=", "prev_text", ":", "\n", "\t\t", "prev_text", "=", "str", "(", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "str", "(", "num", ")", "+", "''", "+", "name", ",", "\"\\\\1 \\\\2\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "name", "+", "''", "+", "str", "(", "num", ")", ",", "\"\\\\1 \\\\2\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "prop_name", "+", "''", "+", "prop_name", ",", "\"\\\\1 \\\\2\"", ",", "text", ")", "\n", "\n", "", "text", "=", "myre", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "return", "text", ".", "strip", "(", ")", "\n", "", ""]]}