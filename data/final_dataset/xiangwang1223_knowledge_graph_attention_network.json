{"home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT.__init__": [[14, 53], ["KGAT.KGAT._parse_args", "KGAT.KGAT._build_inputs", "KGAT.KGAT._build_weights", "KGAT.KGAT._build_model_phase_I", "KGAT.KGAT._build_loss_phase_I", "KGAT.KGAT._build_model_phase_II", "KGAT.KGAT._build_loss_phase_II", "KGAT.KGAT._statistics_params"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._parse_args", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_inputs", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_weights", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_model_phase_I", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_loss_phase_I", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_model_phase_II", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_loss_phase_II", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._statistics_params"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "_parse_args", "(", "data_config", ",", "pretrain_data", ",", "args", ")", "\n", "'''\n        *********************************************************\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "self", ".", "_build_inputs", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Create Model Parameters for CF & KGE parts.\n        \"\"\"", "\n", "self", ".", "weights", "=", "self", ".", "_build_weights", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Graph-based Representations of All Users & Items & KG Entities via Message-Passing Mechanism of Graph Neural Networks.\n        Different Convolutional Layers:\n            1. bi: defined in 'KGAT: Knowledge Graph Attention Network for Recommendation', KDD2019;\n            2. gcn:  defined in 'Semi-Supervised Classification with Graph Convolutional Networks', ICLR2018;\n            3. graphsage: defined in 'Inductive Representation Learning on Large Graphs', NeurIPS2017.\n        \"\"\"", "\n", "self", ".", "_build_model_phase_I", "(", ")", "\n", "\"\"\"\n        Optimize Recommendation (CF) Part via BPR Loss.\n        \"\"\"", "\n", "self", ".", "_build_loss_phase_I", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Knowledge Graph Embeddings via TransR.\n        \"\"\"", "\n", "self", ".", "_build_model_phase_II", "(", ")", "\n", "\"\"\"\n        Optimize KGE Part via BPR Loss.\n        \"\"\"", "\n", "self", ".", "_build_loss_phase_II", "(", ")", "\n", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._parse_args": [[54, 95], ["KGAT.KGAT.eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "_parse_args", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "# argument settings", "\n", "        ", "self", ".", "model_type", "=", "'kgat'", "\n", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "self", ".", "n_entities", "=", "data_config", "[", "'n_entities'", "]", "\n", "self", ".", "n_relations", "=", "data_config", "[", "'n_relations'", "]", "\n", "\n", "self", ".", "n_fold", "=", "100", "\n", "\n", "# initialize the attentive matrix A for phase I.", "\n", "self", ".", "A_in", "=", "data_config", "[", "'A_in'", "]", "\n", "\n", "self", ".", "all_h_list", "=", "data_config", "[", "'all_h_list'", "]", "\n", "self", ".", "all_r_list", "=", "data_config", "[", "'all_r_list'", "]", "\n", "self", ".", "all_t_list", "=", "data_config", "[", "'all_t_list'", "]", "\n", "self", ".", "all_v_list", "=", "data_config", "[", "'all_v_list'", "]", "\n", "\n", "self", ".", "adj_uni_type", "=", "args", ".", "adj_uni_type", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "\n", "# settings for CF part.", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "# settings for KG part.", "\n", "self", ".", "kge_dim", "=", "args", ".", "kge_size", "\n", "self", ".", "batch_size_kg", "=", "args", ".", "batch_size_kg", "\n", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "self", ".", "model_type", "+=", "'_%s_%s_%s_l%d'", "%", "(", "args", ".", "adj_type", ",", "args", ".", "adj_uni_type", ",", "args", ".", "alg_type", ",", "self", ".", "n_layers", ")", "\n", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_inputs": [[96, 114], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "len"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ")", ":", "\n", "# placeholder definition", "\n", "        ", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "# for knowledge graph modeling (TransD)", "\n", "self", ".", "A_values", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "len", "(", "self", ".", "all_v_list", ")", "]", ",", "name", "=", "'A_values'", ")", "\n", "\n", "self", ".", "h", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'h'", ")", "\n", "self", ".", "r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'r'", ")", "\n", "self", ".", "pos_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'pos_t'", ")", "\n", "self", ".", "neg_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'neg_t'", ")", "\n", "\n", "# dropout: node dropout (adopted on the ego-networks);", "\n", "# message dropout (adopted on the convolution operations).", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_weights": [[115, 159], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "range", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.concat"], "methods", ["None"], ["", "def", "_build_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embed'", ")", "\n", "all_weights", "[", "'entity_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_entities", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'entity_embed'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embed'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embed'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "item_embed", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", "\n", "other_embed", "=", "initializer", "(", "[", "self", ".", "n_entities", "-", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", "\n", "\n", "all_weights", "[", "'entity_embed'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "tf", ".", "concat", "(", "[", "item_embed", ",", "other_embed", "]", ",", "0", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'entity_embed'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "all_weights", "[", "'relation_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_relations", ",", "self", ".", "kge_dim", "]", ")", ",", "\n", "name", "=", "'relation_embed'", ")", "\n", "all_weights", "[", "'trans_W'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_relations", ",", "self", ".", "emb_dim", ",", "self", ".", "kge_dim", "]", ")", ")", "\n", "\n", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'W_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_gc_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_gc_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_bi_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_bi_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "2", "*", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_mlp_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_mlp_%d'", "%", "k", ")", "\n", "\n", "", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_model_phase_I": [[160, 178], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "KGAT.KGAT._create_bi_interaction_embed", "KGAT.KGAT._create_gcn_embed", "KGAT.KGAT._create_graphsage_embed", "print"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_bi_interaction_embed", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_gcn_embed", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_graphsage_embed"], ["", "def", "_build_model_phase_I", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "alg_type", "in", "[", "'bi'", ",", "'kgat'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ea_embeddings", "=", "self", ".", "_create_bi_interaction_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ea_embeddings", "=", "self", ".", "_create_gcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'graphsage'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ea_embeddings", "=", "self", ".", "_create_graphsage_embed", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'please check the the alg_type argument, which should be bi, kgat, gcn, or graphsage.'", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "u_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ea_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ea_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "batch_predictions", "=", "tf", ".", "matmul", "(", "self", ".", "u_e", ",", "self", ".", "pos_i_e", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_model_phase_II": [[179, 183], ["KGAT.KGAT._get_kg_inference", "KGAT.KGAT._generate_transE_score", "KGAT.KGAT._create_attentive_A_out"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._get_kg_inference", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._generate_transE_score", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_attentive_A_out"], ["", "def", "_build_model_phase_II", "(", "self", ")", ":", "\n", "        ", "self", ".", "h_e", ",", "self", ".", "r_e", ",", "self", ".", "pos_t_e", ",", "self", ".", "neg_t_e", "=", "self", ".", "_get_kg_inference", "(", "self", ".", "h", ",", "self", ".", "r", ",", "self", ".", "pos_t", ",", "self", ".", "neg_t", ")", "\n", "self", ".", "A_kg_score", "=", "self", ".", "_generate_transE_score", "(", "h", "=", "self", ".", "h", ",", "t", "=", "self", ".", "pos_t", ",", "r", "=", "self", ".", "r", ")", "\n", "self", ".", "A_out", "=", "self", ".", "_create_attentive_A_out", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._get_kg_inference": [[184, 211], ["tensorflow.concat", "tensorflow.expand_dims", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_get_kg_inference", "(", "self", ",", "h", ",", "r", ",", "pos_t", ",", "neg_t", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embed'", "]", ",", "self", ".", "weights", "[", "'entity_embed'", "]", "]", ",", "axis", "=", "0", ")", "\n", "embeddings", "=", "tf", ".", "expand_dims", "(", "embeddings", ",", "1", ")", "\n", "\n", "# head & tail entity embeddings: batch_size *1 * emb_dim", "\n", "h_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "h", ")", "\n", "pos_t_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "pos_t", ")", "\n", "neg_t_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "neg_t", ")", "\n", "\n", "# relation embeddings: batch_size * kge_dim", "\n", "r_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'relation_embed'", "]", ",", "r", ")", "\n", "\n", "# relation transform weights: batch_size * kge_dim * emb_dim", "\n", "trans_M", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'trans_W'", "]", ",", "r", ")", "\n", "\n", "# batch_size * 1 * kge_dim -> batch_size * kge_dim", "\n", "h_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "h_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "pos_t_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "pos_t_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "neg_t_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "neg_t_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "\n", "# Remove the l2 normalization terms", "\n", "# h_e = tf.math.l2_normalize(h_e, axis=1)", "\n", "# r_e = tf.math.l2_normalize(r_e, axis=1)", "\n", "# pos_t_e = tf.math.l2_normalize(pos_t_e, axis=1)", "\n", "# neg_t_e = tf.math.l2_normalize(neg_t_e, axis=1)", "\n", "\n", "return", "h_e", ",", "r_e", ",", "pos_t_e", ",", "neg_t_e", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_loss_phase_I": [[212, 231], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.softplus", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.train.AdamOptimizer"], "methods", ["None"], ["", "def", "_build_loss_phase_I", "(", "self", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_e", ",", "self", ".", "pos_i_e", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_e", ",", "self", ".", "neg_i_e", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "pos_i_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_e", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "# Using the softplus as BPR loss to avoid the nan error.", "\n", "base_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", "\n", "# maxi = tf.log(tf.nn.sigmoid(pos_scores - neg_scores))", "\n", "# base_loss = tf.negative(tf.reduce_mean(maxi))", "\n", "\n", "self", ".", "base_loss", "=", "base_loss", "\n", "self", ".", "kge_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "self", ".", "reg_loss", "=", "self", ".", "regs", "[", "0", "]", "*", "regularizer", "\n", "self", ".", "loss", "=", "self", ".", "base_loss", "+", "self", ".", "kge_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# Optimization process.RMSPropOptimizer", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._build_loss_phase_II": [[232, 256], ["KGAT.KGAT._build_loss_phase_II._get_kg_score"], "methods", ["None"], ["", "def", "_build_loss_phase_II", "(", "self", ")", ":", "\n", "        ", "def", "_get_kg_score", "(", "h_e", ",", "r_e", ",", "t_e", ")", ":", "\n", "            ", "kg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "(", "h_e", "+", "r_e", "-", "t_e", ")", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "kg_score", "\n", "\n", "", "pos_kg_score", "=", "_get_kg_score", "(", "self", ".", "h_e", ",", "self", ".", "r_e", ",", "self", ".", "pos_t_e", ")", "\n", "neg_kg_score", "=", "_get_kg_score", "(", "self", ".", "h_e", ",", "self", ".", "r_e", ",", "self", ".", "neg_t_e", ")", "\n", "\n", "# Using the softplus as BPR loss to avoid the nan error.", "\n", "kg_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "neg_kg_score", "-", "pos_kg_score", ")", ")", ")", "\n", "# maxi = tf.log(tf.nn.sigmoid(neg_kg_score - pos_kg_score))", "\n", "# kg_loss = tf.negative(tf.reduce_mean(maxi))", "\n", "\n", "\n", "kg_reg_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "h_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "r_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "pos_t_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_t_e", ")", "\n", "kg_reg_loss", "=", "kg_reg_loss", "/", "self", ".", "batch_size_kg", "\n", "\n", "self", ".", "kge_loss2", "=", "kg_loss", "\n", "self", ".", "reg_loss2", "=", "self", ".", "regs", "[", "1", "]", "*", "kg_reg_loss", "\n", "self", ".", "loss2", "=", "self", ".", "kge_loss2", "+", "self", ".", "reg_loss2", "\n", "\n", "# Optimization process.", "\n", "self", ".", "opt2", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_bi_interaction_embed": [[257, 300], ["KGAT.KGAT._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.multiply", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "tensorflow.math.l2_normalize", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._split_A_hat"], ["", "def", "_create_bi_interaction_embed", "(", "self", ")", ":", "\n", "        ", "A", "=", "self", ".", "A_in", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "A", ")", "\n", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embed'", "]", ",", "self", ".", "weights", "[", "'entity_embed'", "]", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "# A_hat_drop = tf.nn.dropout(A_hat, 1 - self.node_dropout[k], [self.n_users + self.n_items, 1])", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "# sum messages of neighbors.", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "\n", "add_embeddings", "=", "ego_embeddings", "+", "side_embeddings", "\n", "\n", "# transformed sum messages of neighbors.", "\n", "sum_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "\n", "tf", ".", "matmul", "(", "add_embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "\n", "\n", "# bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "multiply", "(", "ego_embeddings", ",", "side_embeddings", ")", "\n", "# transformed bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "\n", "tf", ".", "matmul", "(", "bi_embeddings", ",", "self", ".", "weights", "[", "'W_bi_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_bi_%d'", "%", "k", "]", ")", "\n", "\n", "ego_embeddings", "=", "bi_embeddings", "+", "sum_embeddings", "\n", "# message dropout.", "\n", "ego_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "ego_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "ua_embeddings", ",", "ea_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_entities", "]", ",", "0", ")", "\n", "return", "ua_embeddings", ",", "ea_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_gcn_embed": [[301, 329], ["KGAT.KGAT._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "tensorflow.math.l2_normalize", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._split_A_hat"], ["", "def", "_create_gcn_embed", "(", "self", ")", ":", "\n", "        ", "A", "=", "self", ".", "A_in", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "A", ")", "\n", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embed'", "]", ",", "self", ".", "weights", "[", "'entity_embed'", "]", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "# A_hat_drop = tf.nn.dropout(A_hat, 1 - self.node_dropout[k], [self.n_users + self.n_items, 1])", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "\n", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "ua_embeddings", ",", "ea_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_entities", "]", ",", "0", ")", "\n", "return", "ua_embeddings", ",", "ea_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_graphsage_embed": [[330, 361], ["KGAT.KGAT._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.math.l2_normalize", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._split_A_hat"], ["", "def", "_create_graphsage_embed", "(", "self", ")", ":", "\n", "        ", "A", "=", "self", ".", "A_in", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "A", ")", "\n", "\n", "pre_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embed'", "]", ",", "self", ".", "weights", "[", "'entity_embed'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "pre_embeddings", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "# line 1 in algorithm 1 [RM-GCN, KDD'2018], aggregator layer: weighted sum", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "pre_embeddings", ")", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "\n", "# line 2 in algorithm 1 [RM-GCN, KDD'2018], aggregating the previsou embeddings", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "pre_embeddings", ",", "embeddings", "]", ",", "1", ")", "\n", "pre_embeddings", "=", "tf", ".", "nn", ".", "relu", "(", "\n", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_mlp_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_mlp_%d'", "%", "k", "]", ")", "\n", "\n", "pre_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "pre_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "ua_embeddings", ",", "ea_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_entities", "]", ",", "0", ")", "\n", "return", "ua_embeddings", ",", "ea_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._split_A_hat": [[362, 376], ["range", "A_fold_hat.append", "KGAT.KGAT._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_entities", ")", "//", "self", ".", "n_fold", "\n", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_entities", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._convert_sp_mat_to_sp_tensor": [[377, 381], ["X.tocoo().astype", "numpy.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._create_attentive_A_out": [[382, 386], ["numpy.mat().transpose", "tensorflow.sparse.softmax", "tensorflow.SparseTensor", "numpy.mat"], "methods", ["None"], ["", "def", "_create_attentive_A_out", "(", "self", ")", ":", "\n", "        ", "indices", "=", "np", ".", "mat", "(", "[", "self", ".", "all_h_list", ",", "self", ".", "all_t_list", "]", ")", ".", "transpose", "(", ")", "\n", "A", "=", "tf", ".", "sparse", ".", "softmax", "(", "tf", ".", "SparseTensor", "(", "indices", ",", "self", ".", "A_values", ",", "self", ".", "A_in", ".", "shape", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._generate_transE_score": [[387, 412], ["tensorflow.concat", "tensorflow.expand_dims", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.tanh"], "methods", ["None"], ["", "def", "_generate_transE_score", "(", "self", ",", "h", ",", "t", ",", "r", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embed'", "]", ",", "self", ".", "weights", "[", "'entity_embed'", "]", "]", ",", "axis", "=", "0", ")", "\n", "embeddings", "=", "tf", ".", "expand_dims", "(", "embeddings", ",", "1", ")", "\n", "\n", "h_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "h", ")", "\n", "t_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "t", ")", "\n", "\n", "# relation embeddings: batch_size * kge_dim", "\n", "r_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'relation_embed'", "]", ",", "r", ")", "\n", "\n", "# relation transform weights: batch_size * kge_dim * emb_dim", "\n", "trans_M", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'trans_W'", "]", ",", "r", ")", "\n", "\n", "# batch_size * 1 * kge_dim -> batch_size * kge_dim", "\n", "h_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "h_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "t_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "t_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "\n", "# l2-normalize", "\n", "# h_e = tf.math.l2_normalize(h_e, axis=1)", "\n", "# r_e = tf.math.l2_normalize(r_e, axis=1)", "\n", "# t_e = tf.math.l2_normalize(t_e, axis=1)", "\n", "\n", "kg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "t_e", ",", "tf", ".", "tanh", "(", "h_e", "+", "r_e", ")", ")", ",", "1", ")", "\n", "\n", "return", "kg_score", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT._statistics_params": [[413, 424], ["KGAT.KGAT.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT.train": [[425, 427], ["sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "[", "self", ".", "opt", ",", "self", ".", "loss", ",", "self", ".", "base_loss", ",", "self", ".", "kge_loss", ",", "self", ".", "reg_loss", "]", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT.train_A": [[428, 430], ["sess.run"], "methods", ["None"], ["", "def", "train_A", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "[", "self", ".", "opt2", ",", "self", ".", "loss2", ",", "self", ".", "kge_loss2", ",", "self", ".", "reg_loss2", "]", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT.eval": [[431, 434], ["sess.run"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "batch_predictions", "=", "sess", ".", "run", "(", "self", ".", "batch_predictions", ",", "feed_dict", ")", "\n", "return", "batch_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.KGAT.KGAT.update_attentive_A": [[438, 469], ["range", "numpy.array", "sess.run", "scipy.coo_matrix", "len", "sess.run", "list", "KGAT.KGAT.A_in.setdiag", "len"], "methods", ["None"], ["def", "update_attentive_A", "(", "self", ",", "sess", ")", ":", "\n", "        ", "fold_len", "=", "len", "(", "self", ".", "all_h_list", ")", "//", "self", ".", "n_fold", "\n", "kg_score", "=", "[", "]", "\n", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "len", "(", "self", ".", "all_h_list", ")", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "feed_dict", "=", "{", "\n", "self", ".", "h", ":", "self", ".", "all_h_list", "[", "start", ":", "end", "]", ",", "\n", "self", ".", "r", ":", "self", ".", "all_r_list", "[", "start", ":", "end", "]", ",", "\n", "self", ".", "pos_t", ":", "self", ".", "all_t_list", "[", "start", ":", "end", "]", "\n", "}", "\n", "A_kg_score", "=", "sess", ".", "run", "(", "self", ".", "A_kg_score", ",", "feed_dict", "=", "feed_dict", ")", "\n", "kg_score", "+=", "list", "(", "A_kg_score", ")", "\n", "\n", "", "kg_score", "=", "np", ".", "array", "(", "kg_score", ")", "\n", "\n", "new_A", "=", "sess", ".", "run", "(", "self", ".", "A_out", ",", "feed_dict", "=", "{", "self", ".", "A_values", ":", "kg_score", "}", ")", "\n", "new_A_values", "=", "new_A", ".", "values", "\n", "new_A_indices", "=", "new_A", ".", "indices", "\n", "\n", "rows", "=", "new_A_indices", "[", ":", ",", "0", "]", "\n", "cols", "=", "new_A_indices", "[", ":", ",", "1", "]", "\n", "self", ".", "A_in", "=", "sp", ".", "coo_matrix", "(", "(", "new_A_values", ",", "(", "rows", ",", "cols", ")", ")", ",", "shape", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_entities", ",", "\n", "self", ".", "n_users", "+", "self", ".", "n_entities", ")", ")", "\n", "if", "self", ".", "alg_type", "in", "[", "'org'", ",", "'gcn'", "]", ":", "\n", "            ", "self", ".", "A_in", ".", "setdiag", "(", "1.", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE.__init__": [[12, 19], ["CKE.CKE._parse_args", "CKE.CKE._build_inputs", "CKE.CKE._build_weights", "CKE.CKE._build_model", "CKE.CKE._build_loss", "CKE.CKE._statistics_params"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._parse_args", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_inputs", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_weights", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_model", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_loss", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._statistics_params"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "_parse_args", "(", "data_config", ",", "pretrain_data", ",", "args", ")", "\n", "self", ".", "_build_inputs", "(", ")", "\n", "self", ".", "weights", "=", "self", ".", "_build_weights", "(", ")", "\n", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "_build_loss", "(", ")", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._parse_args": [[20, 40], ["CKE.CKE.eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "_parse_args", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "'cke'", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "self", ".", "n_entities", "=", "data_config", "[", "'n_entities'", "]", "\n", "self", ".", "n_relations", "=", "data_config", "[", "'n_relations'", "]", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "# settings for CF part.", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "# settings for KG part.", "\n", "self", ".", "kge_dim", "=", "args", ".", "kge_size", "\n", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._build_inputs": [[41, 52], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ")", ":", "\n", "# for user-item interaction modelling", "\n", "        ", "self", ".", "u", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "]", ",", "name", "=", "'u'", ")", "\n", "self", ".", "pos_i", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "]", ",", "name", "=", "'pos_i'", ")", "\n", "self", ".", "neg_i", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "]", ",", "name", "=", "'neg_i'", ")", "\n", "\n", "# for knowledge graph modeling (TransD)", "\n", "self", ".", "h", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'h'", ")", "\n", "self", ".", "r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'r'", ")", "\n", "self", ".", "pos_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'pos_t'", ")", "\n", "self", ".", "neg_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'neg_t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._build_weights": [[54, 77], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_build_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embed'", ")", "\n", "all_weights", "[", "'item_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embed'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embed'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embed'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embed'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embed'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "all_weights", "[", "'kg_entity_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_entities", ",", "1", ",", "self", ".", "emb_dim", "]", ")", ",", "\n", "name", "=", "'kg_entity_embed'", ")", "\n", "all_weights", "[", "'kg_relation_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_relations", ",", "self", ".", "kge_dim", "]", ")", ",", "\n", "name", "=", "'kg_relation_embed'", ")", "\n", "\n", "all_weights", "[", "'trans_W'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_relations", ",", "self", ".", "emb_dim", ",", "self", ".", "kge_dim", "]", ")", ")", "\n", "\n", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._build_model": [[78, 85], ["CKE.CKE._get_cf_inference", "CKE.CKE._get_kg_inference", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._get_cf_inference", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._get_kg_inference"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "u_e", ",", "self", ".", "pos_i_e", ",", "self", ".", "neg_i_e", "=", "self", ".", "_get_cf_inference", "(", "self", ".", "u", ",", "self", ".", "pos_i", ",", "self", ".", "neg_i", ")", "\n", "\n", "self", ".", "h_e", ",", "self", ".", "r_e", ",", "self", ".", "pos_t_e", ",", "self", ".", "neg_t_e", "=", "self", ".", "_get_kg_inference", "(", "self", ".", "h", ",", "self", ".", "r", ",", "self", ".", "pos_t", ",", "self", ".", "neg_t", ")", "\n", "\n", "# All predictions for all users.", "\n", "self", ".", "batch_predictions", "=", "tf", ".", "matmul", "(", "self", ".", "u_e", ",", "self", ".", "pos_i_e", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._build_loss": [[87, 98], ["CKE.CKE._get_kg_loss", "CKE.CKE._get_cf_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._get_kg_loss", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._get_cf_loss"], ["", "def", "_build_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "kg_loss", ",", "self", ".", "kg_reg_loss", "=", "self", ".", "_get_kg_loss", "(", ")", "\n", "self", ".", "cf_loss", ",", "self", ".", "cf_reg_loss", "=", "self", ".", "_get_cf_loss", "(", ")", "\n", "\n", "self", ".", "base_loss", "=", "self", ".", "cf_loss", "\n", "self", ".", "kge_loss", "=", "self", ".", "kg_loss", "\n", "self", ".", "reg_loss", "=", "self", ".", "regs", "[", "0", "]", "*", "self", ".", "cf_reg_loss", "+", "self", ".", "regs", "[", "1", "]", "*", "self", ".", "kg_reg_loss", "\n", "self", ".", "loss", "=", "self", ".", "base_loss", "+", "self", ".", "kge_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# Optimization process.", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._get_kg_inference": [[99, 123], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_get_kg_inference", "(", "self", ",", "h", ",", "r", ",", "pos_t", ",", "neg_t", ")", ":", "\n", "# head & tail entity embeddings: batch_size *1 * emb_dim", "\n", "        ", "h_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'kg_entity_embed'", "]", ",", "h", ")", "\n", "pos_t_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'kg_entity_embed'", "]", ",", "pos_t", ")", "\n", "neg_t_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'kg_entity_embed'", "]", ",", "neg_t", ")", "\n", "\n", "# relation embeddings: batch_size * kge_dim", "\n", "r_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'kg_relation_embed'", "]", ",", "r", ")", "\n", "\n", "# relation transform weights: batch_size * kge_dim * emb_dim", "\n", "trans_M", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'trans_W'", "]", ",", "r", ")", "\n", "\n", "# batch_size * 1 * kge_dim -> batch_size * kge_dim", "\n", "h_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "h_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "pos_t_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "pos_t_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "neg_t_e", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "neg_t_e", ",", "trans_M", ")", ",", "[", "-", "1", ",", "self", ".", "kge_dim", "]", ")", "\n", "\n", "# l2-normalize", "\n", "h_e", "=", "tf", ".", "math", ".", "l2_normalize", "(", "h_e", ",", "axis", "=", "1", ")", "\n", "r_e", "=", "tf", ".", "math", ".", "l2_normalize", "(", "r_e", ",", "axis", "=", "1", ")", "\n", "pos_t_e", "=", "tf", ".", "math", ".", "l2_normalize", "(", "pos_t_e", ",", "axis", "=", "1", ")", "\n", "neg_t_e", "=", "tf", ".", "math", ".", "l2_normalize", "(", "neg_t_e", ",", "axis", "=", "1", ")", "\n", "\n", "return", "h_e", ",", "r_e", ",", "pos_t_e", ",", "neg_t_e", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._get_cf_inference": [[124, 133], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_get_cf_inference", "(", "self", ",", "u", ",", "pos_i", ",", "neg_i", ")", ":", "\n", "        ", "u_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embed'", "]", ",", "u", ")", "\n", "pos_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embed'", "]", ",", "pos_i", ")", "\n", "neg_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embed'", "]", ",", "neg_i", ")", "\n", "\n", "pos_i_kg_e", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'kg_entity_embed'", "]", ",", "pos_i", ")", ",", "[", "-", "1", ",", "self", ".", "emb_dim", "]", ")", "\n", "neg_i_kg_e", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'kg_entity_embed'", "]", ",", "neg_i", ")", ",", "[", "-", "1", ",", "self", ".", "emb_dim", "]", ")", "\n", "\n", "return", "u_e", ",", "pos_i_e", "+", "pos_i_kg_e", ",", "neg_i_e", "+", "neg_i_kg_e", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._get_kg_loss": [[134, 148], ["CKE.CKE._get_kg_loss._get_kg_score"], "methods", ["None"], ["", "def", "_get_kg_loss", "(", "self", ")", ":", "\n", "        ", "def", "_get_kg_score", "(", "h_e", ",", "r_e", ",", "t_e", ")", ":", "\n", "            ", "kg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "(", "h_e", "+", "r_e", "-", "t_e", ")", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "kg_score", "\n", "\n", "", "pos_kg_score", "=", "_get_kg_score", "(", "self", ".", "h_e", ",", "self", ".", "r_e", ",", "self", ".", "pos_t_e", ")", "\n", "neg_kg_score", "=", "_get_kg_score", "(", "self", ".", "h_e", ",", "self", ".", "r_e", ",", "self", ".", "neg_t_e", ")", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "neg_kg_score", "-", "pos_kg_score", ")", ")", "\n", "kg_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "kg_reg_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "h_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "r_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "pos_t_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_t_e", ")", "\n", "\n", "return", "kg_loss", ",", "kg_reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._get_cf_loss": [[149, 162], ["CKE.CKE._get_cf_loss._get_cf_score"], "methods", ["None"], ["", "def", "_get_cf_loss", "(", "self", ")", ":", "\n", "        ", "def", "_get_cf_score", "(", "u_e", ",", "i_e", ")", ":", "\n", "            ", "cf_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "u_e", ",", "i_e", ")", ",", "axis", "=", "1", ")", "\n", "return", "cf_score", "\n", "\n", "", "pos_cf_score", "=", "_get_cf_score", "(", "self", ".", "u_e", ",", "self", ".", "pos_i_e", ")", "\n", "neg_cf_score", "=", "_get_cf_score", "(", "self", ".", "u_e", ",", "self", ".", "neg_i_e", ")", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "1e-10", "+", "tf", ".", "nn", ".", "sigmoid", "(", "pos_cf_score", "-", "neg_cf_score", ")", ")", "\n", "cf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "cf_reg_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "pos_i_e", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_e", ")", "\n", "\n", "return", "cf_loss", ",", "cf_reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE._statistics_params": [[163, 174], ["CKE.CKE.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE.train": [[175, 177], ["sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "[", "self", ".", "opt", ",", "self", ".", "loss", ",", "self", ".", "base_loss", ",", "self", ".", "kge_loss", ",", "self", ".", "reg_loss", "]", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CKE.CKE.eval": [[178, 181], ["sess.run"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "batch_predictions", "=", "sess", ".", "run", "(", "self", ".", "batch_predictions", ",", "feed_dict", ")", "\n", "return", "batch_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.BPRMF.BPRMF.__init__": [[12, 53], ["BPRMF.BPRMF.eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "'mf'", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n", "# Placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "]", ",", "name", "=", "'users'", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "]", ",", "name", "=", "'pos_items'", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "]", ",", "name", "=", "'neg_items'", ")", "\n", "\n", "# Variable definition", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "# Original embedding.", "\n", "u_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "pos_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "neg_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "\n", "# All predictions for all users.", "\n", "self", ".", "batch_predictions", "=", "tf", ".", "matmul", "(", "u_e", ",", "pos_i_e", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "# Optimization process.", "\n", "self", ".", "base_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "_create_bpr_loss", "(", "u_e", ",", "pos_i_e", ",", "neg_i_e", ")", "\n", "self", ".", "kge_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "self", ".", "loss", "=", "self", ".", "base_loss", "+", "self", ".", "kge_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# self.opt = tf.train.RMSPropOptimizer(learning_rate=self.lr).minimize(self.loss)", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.BPRMF.BPRMF._init_weights": [[55, 71], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.BPRMF.BPRMF._create_bpr_loss": [[73, 85], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "_create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "\n", "mf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "reg_loss", "=", "self", ".", "regs", "[", "0", "]", "*", "regularizer", "\n", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.BPRMF.BPRMF._statistics_params": [[87, 98], ["BPRMF.BPRMF.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.BPRMF.BPRMF.train": [[99, 101], ["sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "[", "self", ".", "opt", ",", "self", ".", "loss", ",", "self", ".", "base_loss", ",", "self", ".", "kge_loss", ",", "self", ".", "reg_loss", "]", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.BPRMF.BPRMF.eval": [[102, 105], ["sess.run"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "batch_predictions", "=", "sess", ".", "run", "(", "self", ".", "batch_predictions", ",", "feed_dict", ")", "\n", "return", "batch_predictions", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.Main.load_pretrained_data": [[23, 34], ["np.load", "print"], "function", ["None"], ["def", "load_pretrained_data", "(", "args", ")", ":", "\n", "    ", "pre_model", "=", "'mf'", "\n", "if", "args", ".", "pretrain", "==", "-", "2", ":", "\n", "        ", "pre_model", "=", "'kgat'", "\n", "", "pretrain_path", "=", "'%spretrain/%s/%s.npz'", "%", "(", "args", ".", "proj_path", ",", "args", ".", "dataset", ",", "pre_model", ")", "\n", "try", ":", "\n", "        ", "pretrain_data", "=", "np", ".", "load", "(", "pretrain_path", ")", "\n", "print", "(", "'load the pretrained bprmf model parameters.'", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pretrain_data", "=", "None", "\n", "", "return", "pretrain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG.__init__": [[12, 21], ["CFKG.CFKG._parse_args", "CFKG.CFKG._build_inputs", "CFKG.CFKG._build_weights", "CFKG.CFKG._build_model", "CFKG.CFKG._build_loss", "CFKG.CFKG._statistics_params"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._parse_args", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_inputs", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_weights", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_model", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_loss", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._statistics_params"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "_parse_args", "(", "data_config", ",", "pretrain_data", ",", "args", ")", "\n", "self", ".", "_build_inputs", "(", ")", "\n", "self", ".", "weights", "=", "self", ".", "_build_weights", "(", ")", "\n", "\n", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "_build_loss", "(", ")", "\n", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._parse_args": [[22, 53], ["CFKG.CFKG.eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "_parse_args", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "'cfkg'", "\n", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "self", ".", "n_entities", "=", "data_config", "[", "'n_entities'", "]", "\n", "self", ".", "n_relations", "=", "data_config", "[", "'n_relations'", "]", "\n", "\n", "self", ".", "n_fold", "=", "100", "\n", "\n", "self", ".", "margin", "=", "1.0", "\n", "self", ".", "L1_flag", "=", "args", ".", "l1_flag", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "# settings for CF part.", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "# settings for KG part.", "\n", "self", ".", "kge_dim", "=", "args", ".", "kge_size", "\n", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "self", ".", "model_type", "+=", "'_%s_%s_%s_l%d'", "%", "(", "args", ".", "adj_type", ",", "args", ".", "adj_uni_type", ",", "args", ".", "alg_type", ",", "self", ".", "n_layers", ")", "\n", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._build_inputs": [[54, 65], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ")", ":", "\n", "# placeholder definition", "\n", "\n", "        ", "self", ".", "h", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'h'", ")", "\n", "self", ".", "r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'r'", ")", "\n", "self", ".", "pos_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'pos_t'", ")", "\n", "self", ".", "neg_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'neg_t'", ")", "\n", "\n", "# dropout: node dropout (adopted on the ego-networks); message dropout (adopted on the convolution operations).", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._build_weights": [[66, 90], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.concat"], "methods", ["None"], ["", "def", "_build_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "False", ")", "\n", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embed'", ")", "\n", "all_weights", "[", "'entity_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_entities", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'entity_embed'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embed'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embed'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "item_embed", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", "\n", "other_embed", "=", "initializer", "(", "[", "self", ".", "n_entities", "-", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", "\n", "\n", "all_weights", "[", "'entity_embed'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "tf", ".", "concat", "(", "[", "item_embed", ",", "other_embed", "]", ",", "0", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'entity_embed'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "all_weights", "[", "'relation_embed'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_relations", ",", "self", ".", "emb_dim", "]", ")", ",", "\n", "name", "=", "'relation_embed'", ")", "\n", "\n", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._build_model": [[92, 94], ["CFKG.CFKG._get_kg_inference"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._get_kg_inference"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "h_e", ",", "self", ".", "r_e", ",", "self", ".", "pos_t_e", ",", "self", ".", "neg_t_e", "=", "self", ".", "_get_kg_inference", "(", "self", ".", "h", ",", "self", ".", "r", ",", "self", ".", "pos_t", ",", "self", ".", "neg_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._get_kg_inference": [[99, 116], ["tensorflow.concat", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_get_kg_inference", "(", "self", ",", "h", ",", "r", ",", "pos_t", ",", "neg_t", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embed'", "]", ",", "self", ".", "weights", "[", "'entity_embed'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# head & tail entity embeddings: batch_size *1 * emb_dim", "\n", "h_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "h", ")", "\n", "pos_t_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "pos_t", ")", "\n", "neg_t_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings", ",", "neg_t", ")", "\n", "\n", "# relation embeddings: batch_size * kge_dim", "\n", "r_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'relation_embed'", "]", ",", "r", ")", "\n", "\n", "# h_e = tf.math.l2_normalize(h_e, axis=1)", "\n", "# pos_t_e = tf.math.l2_normalize(pos_t_e, axis=1)", "\n", "# neg_t_e = tf.math.l2_normalize(neg_t_e, axis=1)", "\n", "# r_e = tf.math.l2_normalize(r_e, axis=1)", "\n", "\n", "return", "h_e", ",", "r_e", ",", "pos_t_e", ",", "neg_t_e", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._build_loss": [[117, 143], ["tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.constant", "tensorflow.train.GradientDescentOptimizer().minimize", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "abs", "abs", "tensorflow.train.GradientDescentOptimizer"], "methods", ["None"], ["", "def", "_build_loss", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "L1_flag", ":", "\n", "            ", "pos_kg_score", "=", "tf", ".", "reduce_sum", "(", "abs", "(", "self", ".", "h_e", "+", "self", ".", "r_e", "-", "self", ".", "pos_t_e", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "neg_kg_score", "=", "tf", ".", "reduce_sum", "(", "abs", "(", "self", ".", "h_e", "+", "self", ".", "r_e", "-", "self", ".", "neg_t_e", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "self", ".", "batch_predictions", "=", "-", "pos_kg_score", "\n", "", "else", ":", "\n", "            ", "pos_kg_score", "=", "tf", ".", "reduce_sum", "(", "(", "self", ".", "h_e", "+", "self", ".", "r_e", "-", "self", ".", "pos_t_e", ")", "**", "2", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "neg_kg_score", "=", "tf", ".", "reduce_sum", "(", "(", "self", ".", "h_e", "+", "self", ".", "r_e", "-", "self", ".", "neg_t_e", ")", "**", "2", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "self", ".", "batch_predictions", "=", "-", "pos_kg_score", "\n", "\n", "", "kg_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "pos_kg_score", "-", "neg_kg_score", "+", "self", ".", "margin", ",", "0", ")", ")", "\n", "\n", "# kg_reg_loss = tf.nn.l2_loss(self.h_e) + tf.nn.l2_loss(self.r_e) + \\", "\n", "#               tf.nn.l2_loss(self.pos_t_e) + tf.nn.l2_loss(self.neg_t_e)", "\n", "# kg_reg_loss = kg_reg_loss / self.batch_size", "\n", "\n", "self", ".", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "self", ".", "base_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "self", ".", "kge_loss", "=", "kg_loss", "\n", "# self.reg_loss = self.regs[0] * kg_reg_loss", "\n", "self", ".", "loss", "=", "self", ".", "kge_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# Optimization process.", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG._statistics_params": [[144, 155], ["CFKG.CFKG.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG.train": [[156, 158], ["sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "[", "self", ".", "opt", ",", "self", ".", "loss", ",", "self", ".", "base_loss", ",", "self", ".", "kge_loss", ",", "self", ".", "reg_loss", "]", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.CFKG.CFKG.eval": [[159, 162], ["sess.run"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "batch_predictions", "=", "sess", ".", "run", "(", "self", ".", "batch_predictions", ",", "feed_dict", ")", "\n", "return", "batch_predictions", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.__init__": [[12, 19], ["NFM.NFM._parse_args", "NFM.NFM._build_inputs", "NFM.NFM._build_weights", "NFM.NFM._build_model", "NFM.NFM._build_loss", "NFM.NFM._statistics_params"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._parse_args", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_inputs", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_weights", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_model", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_loss", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._statistics_params"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "self", ".", "_parse_args", "(", "data_config", ",", "pretrain_data", ",", "args", ")", "\n", "self", ".", "_build_inputs", "(", ")", "\n", "self", ".", "weights", "=", "self", ".", "_build_weights", "(", ")", "\n", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "_build_loss", "(", ")", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._parse_args": [[20, 52], ["NFM.NFM.eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "_parse_args", "(", "self", ",", "data_config", ",", "pretrain_data", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "model_type", "==", "'nfm'", ":", "\n", "            ", "self", ".", "model_type", "=", "'nfm'", "\n", "", "else", ":", "\n", "            ", "self", ".", "model_type", "=", "'fm'", "\n", "\n", "", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "self", ".", "n_entities", "=", "data_config", "[", "'n_entities'", "]", "\n", "\n", "self", ".", "n_features", "=", "data_config", "[", "'n_users'", "]", "+", "data_config", "[", "'n_entities'", "]", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "# settings for CF part.", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "# settings for neural CF part.", "\n", "if", "args", ".", "model_type", "==", "'nfm'", ":", "\n", "            ", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "\n", "self", ".", "model_type", "+=", "'_l%d'", "%", "self", ".", "n_layers", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight_size", "=", "[", "]", "\n", "self", ".", "n_layers", "=", "0", "\n", "\n", "", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_inputs": [[53, 68], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.SparseTensor", "tensorflow.SparseTensor"], "methods", ["None"], ["", "def", "_build_inputs", "(", "self", ")", ":", "\n", "        ", "self", ".", "pos_indices", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "shape", "=", "[", "None", ",", "2", "]", ",", "name", "=", "'pos_indices'", ")", "\n", "self", ".", "pos_values", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'pos_values'", ")", "\n", "self", ".", "pos_shape", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "shape", "=", "[", "2", "]", ",", "name", "=", "'pos_shape'", ")", "\n", "\n", "self", ".", "neg_indices", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "shape", "=", "[", "None", ",", "2", "]", ",", "name", "=", "'neg_indices'", ")", "\n", "self", ".", "neg_values", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'neg_values'", ")", "\n", "self", ".", "neg_shape", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "shape", "=", "[", "2", "]", ",", "name", "=", "'neg_shape'", ")", "\n", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'mess_dropout'", ")", "\n", "\n", "# Input positive features, shape=(batch_size * feature_dim)", "\n", "self", ".", "sp_pos_feats", "=", "tf", ".", "SparseTensor", "(", "self", ".", "pos_indices", ",", "self", ".", "pos_values", ",", "self", ".", "pos_shape", ")", "\n", "# Input negative features, shape=(batch_size * feature_dim)", "\n", "self", ".", "sp_neg_feats", "=", "tf", ".", "SparseTensor", "(", "self", ".", "neg_indices", ",", "self", ".", "neg_values", ",", "self", ".", "neg_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_weights": [[69, 108], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "range", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.concat"], "methods", ["None"], ["", "def", "_build_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "all_weights", "[", "'var_linear'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_features", ",", "1", "]", ")", ",", "name", "=", "'var_linear'", ")", "\n", "\n", "# model parameters for FM.", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'var_factor'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_features", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'var_factor'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "user_embed", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", "\n", "item_embed", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", "\n", "other_embed", "=", "initializer", "(", "[", "self", ".", "n_entities", "-", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", "\n", "\n", "all_weights", "[", "'var_factor'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "tf", ".", "concat", "(", "[", "user_embed", ",", "item_embed", ",", "other_embed", "]", ",", "0", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'var_factor'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# user_embed = tf.Variable(initial_value=self.pretrain_data['user_embed'], trainable=True, dtype=tf.float32)", "\n", "# item_embed = tf.Variable(initial_value=self.pretrain_data['item_embed'], trainable=True, dtype=tf.float32)", "\n", "# other_embed = tf.Variable(initializer([self.n_entities - self.n_items, self.emb_dim]))", "\n", "#", "\n", "# all_weights['var_factor'] = tf.concat([user_embed, item_embed, other_embed], 0, name='var_factor')", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "# model parameters for NFM.", "\n", "", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'W_%d'", "%", "i", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "i", "]", ",", "self", ".", "weight_size_list", "[", "i", "+", "1", "]", "]", ")", ",", "name", "=", "'W_%d'", "%", "i", ")", "\n", "all_weights", "[", "'b_%d'", "%", "i", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "i", "+", "1", "]", "]", ")", ",", "name", "=", "'b_%d'", "%", "i", ")", "\n", "\n", "", "if", "self", ".", "model_type", "==", "'fm'", ":", "\n", "            ", "all_weights", "[", "'h'", "]", "=", "tf", ".", "constant", "(", "1.", ",", "tf", ".", "float32", ",", "[", "self", ".", "emb_dim", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'h'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "-", "1", "]", ",", "1", "]", ")", ",", "name", "=", "'h'", ")", "\n", "\n", "", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_model": [[109, 111], ["NFM.NFM._get_bi_pooling_predictions"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._get_bi_pooling_predictions"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_predictions", "=", "self", ".", "_get_bi_pooling_predictions", "(", "self", ".", "sp_pos_feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._build_loss": [[112, 133], ["NFM.NFM._get_bi_pooling_predictions", "NFM.NFM._get_bi_pooling_predictions", "tensorflow.log", "tensorflow.negative", "tensorflow.constant", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._get_bi_pooling_predictions", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._get_bi_pooling_predictions"], ["", "def", "_build_loss", "(", "self", ")", ":", "\n", "        ", "pos_scores", "=", "self", ".", "_get_bi_pooling_predictions", "(", "self", ".", "sp_pos_feats", ")", "\n", "neg_scores", "=", "self", ".", "_get_bi_pooling_predictions", "(", "self", ".", "sp_neg_feats", ")", "\n", "\n", "maxi", "=", "tf", ".", "log", "(", "1e-10", "+", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "cf_loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_mean", "(", "maxi", ")", ")", "\n", "\n", "self", ".", "base_loss", "=", "cf_loss", "\n", "self", ".", "reg_loss", "=", "self", ".", "regs", "[", "0", "]", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", "[", "'h'", "]", ")", "\n", "# self.reg_loss = self.regs[0] * tf.nn.l2_loss(self.weights['var_factor']) + \\", "\n", "#                 self.regs[1] * tf.nn.l2_loss(self.weights['h'])", "\n", "#", "\n", "# for k in range(self.n_layers):", "\n", "#     self.reg_loss += self.regs[-1] * (tf.nn.l2_loss(self.weights['W_%d' % k]))", "\n", "\n", "self", ".", "kge_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "base_loss", "+", "self", ".", "kge_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# Optimization process.", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._get_bi_pooling_predictions": [[134, 161], ["tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.square", "tensorflow.sparse_tensor_dense_matmul", "range", "tensorflow.square", "tensorflow.square", "tensorflow.nn.relu", "tensorflow.nn.dropout", "z.append", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_get_bi_pooling_predictions", "(", "self", ",", "feats", ")", ":", "\n", "# Linear terms: batch_size * 1", "\n", "        ", "term0", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "feats", ",", "self", ".", "weights", "[", "'var_linear'", "]", ")", "\n", "\n", "# Interaction terms w.r.t. first sum then square: batch_size * emb_size.", "\n", "#   e.g., sum_{k from 1 to K}{(v1k+v2k)**2}", "\n", "sum_emb", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "feats", ",", "self", ".", "weights", "[", "'var_factor'", "]", ")", "\n", "term1", "=", "tf", ".", "square", "(", "sum_emb", ")", "\n", "\n", "# Interaction terms w.r.t. first square then sum: batch_size * emb_size.", "\n", "#   e.g., sum_{k from 1 to K}{v1k**2 + v2k**2}", "\n", "square_emb", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "tf", ".", "square", "(", "feats", ")", ",", "tf", ".", "square", "(", "self", ".", "weights", "[", "'var_factor'", "]", ")", ")", "\n", "term2", "=", "square_emb", "\n", "\n", "# \"neural factorization machine\", Equation 3, the result of bi-interaction pooling: batch_size * emb_size", "\n", "term3", "=", "0.5", "*", "(", "term1", "-", "term2", ")", "\n", "\n", "# \"neural factorization machine\", Equation 7, the result of MLP: batch_size * 1", "\n", "z", "=", "[", "term3", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "z", "[", "i", "]", ",", "self", ".", "weights", "[", "'W_%d'", "%", "i", "]", ")", "+", "self", ".", "weights", "[", "'b_%d'", "%", "i", "]", ")", "\n", "temp", "=", "tf", ".", "nn", ".", "dropout", "(", "temp", ",", "1", "-", "self", ".", "mess_dropout", "[", "i", "]", ")", "\n", "z", ".", "append", "(", "temp", ")", "\n", "\n", "", "preds", "=", "term0", "+", "tf", ".", "matmul", "(", "z", "[", "-", "1", "]", ",", "self", ".", "weights", "[", "'h'", "]", ")", "\n", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM._statistics_params": [[162, 173], ["NFM.NFM.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.train": [[174, 176], ["sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "[", "self", ".", "opt", ",", "self", ".", "loss", ",", "self", ".", "base_loss", ",", "self", ".", "kge_loss", ",", "self", ".", "reg_loss", "]", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval": [[177, 180], ["sess.run"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "sess", ",", "feed_dict", ")", ":", "\n", "        ", "batch_predictions", "=", "sess", ".", "run", "(", "self", ".", "batch_predictions", ",", "feed_dict", ")", "\n", "return", "batch_predictions", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data.__init__": [[12, 40], ["load_data.Data._load_ratings", "load_data.Data._load_ratings", "load_data.Data.train_user_dict.keys", "load_data.Data._statistic_ratings", "load_data.Data._load_kg", "load_data.Data._print_data_info"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._load_ratings", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._load_ratings", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._statistic_ratings", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._load_kg", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._print_data_info"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "train_file", "=", "path", "+", "'/train.txt'", "\n", "test_file", "=", "path", "+", "'/test.txt'", "\n", "\n", "kg_file", "=", "path", "+", "'/kg_final.txt'", "\n", "\n", "# ----------get number of users and items & then load rating data from train_file & test_file------------.", "\n", "self", ".", "n_train", ",", "self", ".", "n_test", "=", "0", ",", "0", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "0", ",", "0", "\n", "\n", "self", ".", "train_data", ",", "self", ".", "train_user_dict", "=", "self", ".", "_load_ratings", "(", "train_file", ")", "\n", "self", ".", "test_data", ",", "self", ".", "test_user_dict", "=", "self", ".", "_load_ratings", "(", "test_file", ")", "\n", "self", ".", "exist_users", "=", "self", ".", "train_user_dict", ".", "keys", "(", ")", "\n", "\n", "self", ".", "_statistic_ratings", "(", ")", "\n", "\n", "# ----------get number of entities and relations & then load kg data from kg_file ------------.", "\n", "self", ".", "n_relations", ",", "self", ".", "n_entities", ",", "self", ".", "n_triples", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "kg_data", ",", "self", ".", "kg_dict", ",", "self", ".", "relation_dict", "=", "self", ".", "_load_kg", "(", "kg_file", ")", "\n", "\n", "# ----------print the basic info about the dataset-------------.", "\n", "self", ".", "batch_size_kg", "=", "self", ".", "n_triples", "//", "(", "self", ".", "n_train", "//", "self", ".", "batch_size", ")", "\n", "self", ".", "_print_data_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._load_ratings": [[42, 60], ["dict", "list", "open().readlines", "l.strip", "list", "numpy.array", "open", "int", "set", "list.append", "len", "l.strip.split"], "methods", ["None"], ["", "def", "_load_ratings", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "user_dict", "=", "dict", "(", ")", "\n", "inter_mat", "=", "list", "(", ")", "\n", "\n", "lines", "=", "open", "(", "file_name", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "tmps", "=", "l", ".", "strip", "(", ")", "\n", "inters", "=", "[", "int", "(", "i", ")", "for", "i", "in", "tmps", ".", "split", "(", "' '", ")", "]", "\n", "\n", "u_id", ",", "pos_ids", "=", "inters", "[", "0", "]", ",", "inters", "[", "1", ":", "]", "\n", "pos_ids", "=", "list", "(", "set", "(", "pos_ids", ")", ")", "\n", "\n", "for", "i_id", "in", "pos_ids", ":", "\n", "                ", "inter_mat", ".", "append", "(", "[", "u_id", ",", "i_id", "]", ")", "\n", "\n", "", "if", "len", "(", "pos_ids", ")", ">", "0", ":", "\n", "                ", "user_dict", "[", "u_id", "]", "=", "pos_ids", "\n", "", "", "return", "np", ".", "array", "(", "inter_mat", ")", ",", "user_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._statistic_ratings": [[61, 66], ["len", "len", "max", "max", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "_statistic_ratings", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_users", "=", "max", "(", "max", "(", "self", ".", "train_data", "[", ":", ",", "0", "]", ")", ",", "max", "(", "self", ".", "test_data", "[", ":", ",", "0", "]", ")", ")", "+", "1", "\n", "self", ".", "n_items", "=", "max", "(", "max", "(", "self", ".", "train_data", "[", ":", ",", "1", "]", ")", ",", "max", "(", "self", ".", "test_data", "[", ":", ",", "1", "]", ")", ")", "+", "1", "\n", "self", ".", "n_train", "=", "len", "(", "self", ".", "train_data", ")", "\n", "self", ".", "n_test", "=", "len", "(", "self", ".", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._load_kg": [[68, 90], ["numpy.loadtxt", "numpy.unique", "len", "load_data.Data._load_kg._construct_kg"], "methods", ["None"], ["", "def", "_load_kg", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "def", "_construct_kg", "(", "kg_np", ")", ":", "\n", "            ", "kg", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "rd", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "for", "head", ",", "relation", ",", "tail", "in", "kg_np", ":", "\n", "                ", "kg", "[", "head", "]", ".", "append", "(", "(", "tail", ",", "relation", ")", ")", "\n", "rd", "[", "relation", "]", ".", "append", "(", "(", "head", ",", "tail", ")", ")", "\n", "", "return", "kg", ",", "rd", "\n", "\n", "", "kg_np", "=", "np", ".", "loadtxt", "(", "file_name", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "kg_np", "=", "np", ".", "unique", "(", "kg_np", ",", "axis", "=", "0", ")", "\n", "\n", "# self.n_relations = len(set(kg_np[:, 1]))", "\n", "# self.n_entities = len(set(kg_np[:, 0]) | set(kg_np[:, 2]))", "\n", "self", ".", "n_relations", "=", "max", "(", "kg_np", "[", ":", ",", "1", "]", ")", "+", "1", "\n", "self", ".", "n_entities", "=", "max", "(", "max", "(", "kg_np", "[", ":", ",", "0", "]", ")", ",", "max", "(", "kg_np", "[", ":", ",", "2", "]", ")", ")", "+", "1", "\n", "self", ".", "n_triples", "=", "len", "(", "kg_np", ")", "\n", "\n", "kg_dict", ",", "relation_dict", "=", "_construct_kg", "(", "kg_np", ")", "\n", "\n", "return", "kg_np", ",", "kg_dict", ",", "relation_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._print_data_info": [[91, 96], ["print", "print", "print", "print"], "methods", ["None"], ["", "def", "_print_data_info", "(", "self", ")", ":", "\n", "        ", "print", "(", "'[n_users, n_items]=[%d, %d]'", "%", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ")", "\n", "print", "(", "'[n_train, n_test]=[%d, %d]'", "%", "(", "self", ".", "n_train", ",", "self", ".", "n_test", ")", ")", "\n", "print", "(", "'[n_entities, n_relations, n_triples]=[%d, %d, %d]'", "%", "(", "self", ".", "n_entities", ",", "self", ".", "n_relations", ",", "self", ".", "n_triples", ")", ")", "\n", "print", "(", "'[batch_size, batch_size_kg]=[%d, %d]'", "%", "(", "self", ".", "batch_size", ",", "self", ".", "batch_size_kg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._generate_train_cf_batch": [[97, 132], ["random.sample", "len", "load_data.Data._generate_train_cf_batch.sample_pos_items_for_u"], "methods", ["None"], ["", "def", "_generate_train_cf_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "exist_users", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "exist_users", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "self", ".", "train_user_dict", "[", "u", "]", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n", "", "def", "sample_neg_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_i_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "\n", "if", "neg_i_id", "not", "in", "self", ".", "train_user_dict", "[", "u", "]", "and", "neg_i_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_i_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n", "", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data.get_sparsity_split": [[133, 155], ["open().readlines", "enumerate", "print", "load_data.Data.create_sparsity_split", "open", "range", "print", "open", "split_state.append", "print", "split_uids.append", "len", "open.write", "open.write", "line.strip", "line.strip", "int", "line.strip().split", "str", "line.strip"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data.create_sparsity_split"], ["", "def", "get_sparsity_split", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "[", "]", ",", "[", "]", "\n", "lines", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "if", "idx", "%", "2", "==", "0", ":", "\n", "                    ", "split_state", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "print", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "split_uids", ".", "append", "(", "[", "int", "(", "uid", ")", "for", "uid", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "print", "(", "'get sparsity split.'", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "self", ".", "create_sparsity_split", "(", ")", "\n", "f", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'w'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "split_state", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "split_state", "[", "idx", "]", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "str", "(", "uid", ")", "for", "uid", "in", "split_uids", "[", "idx", "]", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'create sparsity split.'", ")", "\n", "\n", "", "return", "split_uids", ",", "split_state", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data.create_sparsity_split": [[158, 208], ["list", "dict", "list", "enumerate", "load_data.Data.test_user_dict.keys", "sorted", "len", "len", "dict.keys", "user_n_iid[].append", "len", "len", "list.append", "split_state.append", "print", "list.append", "split_state.append", "print", "len", "len", "len", "dict.keys"], "methods", ["None"], ["", "def", "create_sparsity_split", "(", "self", ")", ":", "\n", "        ", "all_users_to_test", "=", "list", "(", "self", ".", "test_user_dict", ".", "keys", "(", ")", ")", "\n", "user_n_iid", "=", "dict", "(", ")", "\n", "\n", "# generate a dictionary to store (key=n_iids, value=a list of uid).", "\n", "for", "uid", "in", "all_users_to_test", ":", "\n", "            ", "train_iids", "=", "self", ".", "train_user_dict", "[", "uid", "]", "\n", "test_iids", "=", "self", ".", "test_user_dict", "[", "uid", "]", "\n", "\n", "n_iids", "=", "len", "(", "train_iids", ")", "+", "len", "(", "test_iids", ")", "\n", "\n", "if", "n_iids", "not", "in", "user_n_iid", ".", "keys", "(", ")", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", "=", "[", "uid", "]", "\n", "", "else", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", ".", "append", "(", "uid", ")", "\n", "", "", "split_uids", "=", "list", "(", ")", "\n", "\n", "# split the whole user set into four subset.", "\n", "temp", "=", "[", "]", "\n", "count", "=", "1", "\n", "fold", "=", "4", "\n", "n_count", "=", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "\n", "n_rates", "=", "0", "\n", "\n", "split_state", "=", "[", "]", "\n", "for", "idx", ",", "n_iids", "in", "enumerate", "(", "sorted", "(", "user_n_iid", ")", ")", ":", "\n", "            ", "temp", "+=", "user_n_iid", "[", "n_iids", "]", "\n", "n_rates", "+=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "n_count", "-=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "\n", "if", "n_rates", ">=", "count", "*", "0.25", "*", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "n_rates", "=", "0", "\n", "fold", "-=", "1", "\n", "\n", "", "if", "idx", "==", "len", "(", "user_n_iid", ".", "keys", "(", ")", ")", "-", "1", "or", "n_count", "==", "0", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "\n", "", "", "return", "split_uids", ",", "split_state", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cke.CKE_loader.__init__": [[12, 14], ["utility.load_data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cke.CKE_loader._generate_train_kg_batch": [[15, 64], ["loader_cke.CKE_loader.kg_dict.keys", "len", "random.sample", "len", "loader_cke.CKE_loader._generate_train_kg_batch.sample_pos_triples_for_h"], "methods", ["None"], ["", "def", "_generate_train_kg_batch", "(", "self", ")", ":", "\n", "        ", "exist_heads", "=", "self", ".", "kg_dict", ".", "keys", "(", ")", "\n", "if", "self", ".", "batch_size_kg", "<=", "len", "(", "exist_heads", ")", ":", "\n", "            ", "heads", "=", "rd", ".", "sample", "(", "exist_heads", ",", "self", ".", "batch_size_kg", ")", "\n", "", "else", ":", "\n", "            ", "heads", "=", "[", "rd", ".", "choice", "(", "exist_heads", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size_kg", ")", "]", "\n", "\n", "", "def", "sample_pos_triples_for_h", "(", "h", ",", "num", ")", ":", "\n", "# pos triples associated with head entity h.", "\n", "# format of kg_dict is {h: [t,r]}.", "\n", "            ", "pos_triples", "=", "self", ".", "kg_dict", "[", "h", "]", "\n", "n_pos_triples", "=", "len", "(", "pos_triples", ")", "\n", "\n", "pos_rs", ",", "pos_ts", "=", "[", "]", ",", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_rs", ")", "==", "num", ":", "break", "\n", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_triples", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "\n", "t", "=", "pos_triples", "[", "pos_id", "]", "[", "0", "]", "\n", "r", "=", "pos_triples", "[", "pos_id", "]", "[", "1", "]", "\n", "\n", "if", "r", "not", "in", "pos_rs", "and", "t", "not", "in", "pos_ts", ":", "\n", "                    ", "pos_rs", ".", "append", "(", "r", ")", "\n", "pos_ts", ".", "append", "(", "t", ")", "\n", "", "", "return", "pos_rs", ",", "pos_ts", "\n", "\n", "", "def", "sample_neg_triples_for_h", "(", "h", ",", "r", ",", "num", ")", ":", "\n", "            ", "neg_ts", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_ts", ")", "==", "num", ":", "break", "\n", "\n", "t", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_entities", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "\n", "if", "(", "t", ",", "r", ")", "not", "in", "self", ".", "kg_dict", "[", "h", "]", "and", "t", "not", "in", "neg_ts", ":", "\n", "                    ", "neg_ts", ".", "append", "(", "t", ")", "\n", "", "", "return", "neg_ts", "\n", "\n", "", "pos_r_batch", ",", "pos_t_batch", ",", "neg_t_batch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "h", "in", "heads", ":", "\n", "            ", "pos_rs", ",", "pos_ts", "=", "sample_pos_triples_for_h", "(", "h", ",", "1", ")", "\n", "pos_r_batch", "+=", "pos_rs", "\n", "pos_t_batch", "+=", "pos_ts", "\n", "\n", "neg_ts", "=", "sample_neg_triples_for_h", "(", "h", ",", "pos_rs", "[", "0", "]", ",", "1", ")", "\n", "neg_t_batch", "+=", "neg_ts", "\n", "\n", "", "return", "heads", ",", "pos_r_batch", ",", "pos_t_batch", ",", "neg_t_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cke.CKE_loader.generate_train_batch": [[65, 79], ["loader_cke.CKE_loader._generate_train_cf_batch", "loader_cke.CKE_loader._generate_train_kg_batch"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._generate_train_cf_batch", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cke.CKE_loader._generate_train_kg_batch"], ["", "def", "generate_train_batch", "(", "self", ")", ":", "\n", "        ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "_generate_train_cf_batch", "(", ")", "\n", "heads", ",", "relations", ",", "pos_tails", ",", "neg_tails", "=", "self", ".", "_generate_train_kg_batch", "(", ")", "\n", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "'users'", "]", "=", "users", "\n", "batch_data", "[", "'pos_items'", "]", "=", "pos_items", "\n", "batch_data", "[", "'neg_items'", "]", "=", "neg_items", "\n", "\n", "batch_data", "[", "'heads'", "]", "=", "heads", "\n", "batch_data", "[", "'relations'", "]", "=", "relations", "\n", "batch_data", "[", "'pos_tails'", "]", "=", "pos_tails", "\n", "batch_data", "[", "'neg_tails'", "]", "=", "neg_tails", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cke.CKE_loader.generate_train_feed_dict": [[80, 93], ["None"], "methods", ["None"], ["", "def", "generate_train_feed_dict", "(", "self", ",", "model", ",", "batch_data", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "u", ":", "batch_data", "[", "'users'", "]", ",", "\n", "model", ".", "pos_i", ":", "batch_data", "[", "'pos_items'", "]", ",", "\n", "model", ".", "neg_i", ":", "batch_data", "[", "'neg_items'", "]", ",", "\n", "\n", "model", ".", "h", ":", "batch_data", "[", "'heads'", "]", ",", "\n", "model", ".", "r", ":", "batch_data", "[", "'relations'", "]", ",", "\n", "model", ".", "pos_t", ":", "batch_data", "[", "'pos_tails'", "]", ",", "\n", "model", ".", "neg_t", ":", "batch_data", "[", "'neg_tails'", "]", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cke.CKE_loader.generate_test_feed_dict": [[94, 100], ["None"], "methods", ["None"], ["", "def", "generate_test_feed_dict", "(", "self", ",", "model", ",", "user_batch", ",", "item_batch", ",", "drop_flag", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "u", ":", "user_batch", ",", "\n", "model", ".", "pos_i", ":", "item_batch", "\n", "}", "\n", "return", "feed_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader.__init__": [[15, 28], ["utility.load_data.Data.__init__", "loader_kgat.KGAT_loader._get_relational_adj_list", "loader_kgat.KGAT_loader._get_relational_lap_list", "loader_kgat.KGAT_loader._get_all_kg_dict", "loader_kgat.KGAT_loader._get_all_kg_data"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.__init__", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_relational_adj_list", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_relational_lap_list", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_all_kg_dict", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_all_kg_data"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "\n", "# generate the sparse adjacency matrices for user-item interaction & relational kg data.", "\n", "self", ".", "adj_list", ",", "self", ".", "adj_r_list", "=", "self", ".", "_get_relational_adj_list", "(", ")", "\n", "\n", "# generate the sparse laplacian matrices.", "\n", "self", ".", "lap_list", "=", "self", ".", "_get_relational_lap_list", "(", ")", "\n", "\n", "# generate the triples dictionary, key is 'head', value is '(tail, relation)'.", "\n", "self", ".", "all_kg_dict", "=", "self", ".", "_get_all_kg_dict", "(", ")", "\n", "\n", "self", ".", "all_h_list", ",", "self", ".", "all_r_list", ",", "self", ".", "all_t_list", ",", "self", ".", "all_v_list", "=", "self", ".", "_get_all_kg_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader._get_relational_adj_list": [[30, 72], ["time.time.time", "loader_kgat.KGAT_loader._get_relational_adj_list._np_mat2sp_adj"], "methods", ["None"], ["", "def", "_get_relational_adj_list", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "adj_mat_list", "=", "[", "]", "\n", "adj_r_list", "=", "[", "]", "\n", "\n", "def", "_np_mat2sp_adj", "(", "np_mat", ",", "row_pre", ",", "col_pre", ")", ":", "\n", "            ", "n_all", "=", "self", ".", "n_users", "+", "self", ".", "n_entities", "\n", "# single-direction", "\n", "a_rows", "=", "np_mat", "[", ":", ",", "0", "]", "+", "row_pre", "\n", "a_cols", "=", "np_mat", "[", ":", ",", "1", "]", "+", "col_pre", "\n", "a_vals", "=", "[", "1.", "]", "*", "len", "(", "a_rows", ")", "\n", "\n", "b_rows", "=", "a_cols", "\n", "b_cols", "=", "a_rows", "\n", "b_vals", "=", "[", "1.", "]", "*", "len", "(", "b_rows", ")", "\n", "\n", "a_adj", "=", "sp", ".", "coo_matrix", "(", "(", "a_vals", ",", "(", "a_rows", ",", "a_cols", ")", ")", ",", "shape", "=", "(", "n_all", ",", "n_all", ")", ")", "\n", "b_adj", "=", "sp", ".", "coo_matrix", "(", "(", "b_vals", ",", "(", "b_rows", ",", "b_cols", ")", ")", ",", "shape", "=", "(", "n_all", ",", "n_all", ")", ")", "\n", "\n", "return", "a_adj", ",", "b_adj", "\n", "\n", "", "R", ",", "R_inv", "=", "_np_mat2sp_adj", "(", "self", ".", "train_data", ",", "row_pre", "=", "0", ",", "col_pre", "=", "self", ".", "n_users", ")", "\n", "adj_mat_list", ".", "append", "(", "R", ")", "\n", "adj_r_list", ".", "append", "(", "0", ")", "\n", "\n", "adj_mat_list", ".", "append", "(", "R_inv", ")", "\n", "adj_r_list", ".", "append", "(", "self", ".", "n_relations", "+", "1", ")", "\n", "print", "(", "'\\tconvert ratings into adj mat done.'", ")", "\n", "\n", "for", "r_id", "in", "self", ".", "relation_dict", ".", "keys", "(", ")", ":", "\n", "            ", "K", ",", "K_inv", "=", "_np_mat2sp_adj", "(", "np", ".", "array", "(", "self", ".", "relation_dict", "[", "r_id", "]", ")", ",", "row_pre", "=", "self", ".", "n_users", ",", "col_pre", "=", "self", ".", "n_users", ")", "\n", "adj_mat_list", ".", "append", "(", "K", ")", "\n", "adj_r_list", ".", "append", "(", "r_id", "+", "1", ")", "\n", "\n", "adj_mat_list", ".", "append", "(", "K_inv", ")", "\n", "adj_r_list", ".", "append", "(", "r_id", "+", "2", "+", "self", ".", "n_relations", ")", "\n", "", "print", "(", "'\\tconvert %d relational triples into adj mat done. @%.4fs'", "%", "(", "len", "(", "adj_mat_list", ")", ",", "time", "(", ")", "-", "t1", ")", ")", "\n", "\n", "self", ".", "n_relations", "=", "len", "(", "adj_r_list", ")", "\n", "# print('\\tadj relation list is', adj_r_list)", "\n", "\n", "return", "adj_mat_list", ",", "adj_r_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader._get_relational_lap_list": [[73, 101], ["numpy.array", "numpy.power().flatten", "scipy.diags", "adj.dot().transpose().dot", "adj.dot().transpose().dot.tocoo", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.tocoo", "print", "print", "adj.sum", "adj.sum", "loader_kgat.KGAT_loader._get_relational_lap_list._bi_norm_lap"], "methods", ["None"], ["", "def", "_get_relational_lap_list", "(", "self", ")", ":", "\n", "        ", "def", "_bi_norm_lap", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "\n", "bi_lap", "=", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", "\n", "return", "bi_lap", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "_si_norm_lap", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "adj_type", "==", "'bi'", ":", "\n", "            ", "lap_list", "=", "[", "_bi_norm_lap", "(", "adj", ")", "for", "adj", "in", "self", ".", "adj_list", "]", "\n", "print", "(", "'\\tgenerate bi-normalized adjacency matrix.'", ")", "\n", "", "else", ":", "\n", "            ", "lap_list", "=", "[", "_si_norm_lap", "(", "adj", ")", "for", "adj", "in", "self", ".", "adj_list", "]", "\n", "print", "(", "'\\tgenerate si-normalized adjacency matrix.'", ")", "\n", "", "return", "lap_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader._get_all_kg_dict": [[102, 116], ["collections.defaultdict", "enumerate", "range", "len", "all_kg_dict[].append"], "methods", ["None"], ["", "def", "_get_all_kg_dict", "(", "self", ")", ":", "\n", "        ", "all_kg_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "l_id", ",", "lap", "in", "enumerate", "(", "self", ".", "lap_list", ")", ":", "\n", "\n", "            ", "rows", "=", "lap", ".", "row", "\n", "cols", "=", "lap", ".", "col", "\n", "\n", "for", "i_id", "in", "range", "(", "len", "(", "rows", ")", ")", ":", "\n", "                ", "head", "=", "rows", "[", "i_id", "]", "\n", "tail", "=", "cols", "[", "i_id", "]", "\n", "relation", "=", "self", ".", "adj_r_list", "[", "l_id", "]", "\n", "\n", "all_kg_dict", "[", "head", "]", ".", "append", "(", "(", "tail", ",", "relation", ")", ")", "\n", "", "", "return", "all_kg_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader._get_all_kg_data": [[117, 183], ["enumerate", "print", "dict", "enumerate", "print", "dict", "dict.keys", "print", "collections.OrderedDict", "collections.OrderedDict.items", "print", "numpy.array", "list", "list", "list", "len", "sum", "[].append", "[].append", "[].append", "numpy.array", "numpy.argsort", "loader_kgat.KGAT_loader._get_all_kg_data._reorder_list"], "methods", ["None"], ["", "def", "_get_all_kg_data", "(", "self", ")", ":", "\n", "        ", "def", "_reorder_list", "(", "org_list", ",", "order", ")", ":", "\n", "            ", "new_list", "=", "np", ".", "array", "(", "org_list", ")", "\n", "new_list", "=", "new_list", "[", "order", "]", "\n", "return", "new_list", "\n", "\n", "", "all_h_list", ",", "all_t_list", ",", "all_r_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_v_list", "=", "[", "]", "\n", "\n", "for", "l_id", ",", "lap", "in", "enumerate", "(", "self", ".", "lap_list", ")", ":", "\n", "            ", "all_h_list", "+=", "list", "(", "lap", ".", "row", ")", "\n", "all_t_list", "+=", "list", "(", "lap", ".", "col", ")", "\n", "all_v_list", "+=", "list", "(", "lap", ".", "data", ")", "\n", "all_r_list", "+=", "[", "self", ".", "adj_r_list", "[", "l_id", "]", "]", "*", "len", "(", "lap", ".", "row", ")", "\n", "\n", "", "assert", "len", "(", "all_h_list", ")", "==", "sum", "(", "[", "len", "(", "lap", ".", "data", ")", "for", "lap", "in", "self", ".", "lap_list", "]", ")", "\n", "\n", "# resort the all_h/t/r/v_list,", "\n", "# ... since tensorflow.sparse.softmax requires indices sorted in the canonical lexicographic order", "\n", "print", "(", "'\\treordering indices...'", ")", "\n", "org_h_dict", "=", "dict", "(", ")", "\n", "\n", "for", "idx", ",", "h", "in", "enumerate", "(", "all_h_list", ")", ":", "\n", "            ", "if", "h", "not", "in", "org_h_dict", ".", "keys", "(", ")", ":", "\n", "                ", "org_h_dict", "[", "h", "]", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "\n", "", "org_h_dict", "[", "h", "]", "[", "0", "]", ".", "append", "(", "all_t_list", "[", "idx", "]", ")", "\n", "org_h_dict", "[", "h", "]", "[", "1", "]", ".", "append", "(", "all_r_list", "[", "idx", "]", ")", "\n", "org_h_dict", "[", "h", "]", "[", "2", "]", ".", "append", "(", "all_v_list", "[", "idx", "]", ")", "\n", "", "print", "(", "'\\treorganize all kg data done.'", ")", "\n", "\n", "sorted_h_dict", "=", "dict", "(", ")", "\n", "for", "h", "in", "org_h_dict", ".", "keys", "(", ")", ":", "\n", "            ", "org_t_list", ",", "org_r_list", ",", "org_v_list", "=", "org_h_dict", "[", "h", "]", "\n", "sort_t_list", "=", "np", ".", "array", "(", "org_t_list", ")", "\n", "sort_order", "=", "np", ".", "argsort", "(", "sort_t_list", ")", "\n", "\n", "sort_t_list", "=", "_reorder_list", "(", "org_t_list", ",", "sort_order", ")", "\n", "sort_r_list", "=", "_reorder_list", "(", "org_r_list", ",", "sort_order", ")", "\n", "sort_v_list", "=", "_reorder_list", "(", "org_v_list", ",", "sort_order", ")", "\n", "\n", "sorted_h_dict", "[", "h", "]", "=", "[", "sort_t_list", ",", "sort_r_list", ",", "sort_v_list", "]", "\n", "", "print", "(", "'\\tsort meta-data done.'", ")", "\n", "\n", "od", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "sorted_h_dict", ".", "items", "(", ")", ")", ")", "\n", "new_h_list", ",", "new_t_list", ",", "new_r_list", ",", "new_v_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "h", ",", "vals", "in", "od", ".", "items", "(", ")", ":", "\n", "            ", "new_h_list", "+=", "[", "h", "]", "*", "len", "(", "vals", "[", "0", "]", ")", "\n", "new_t_list", "+=", "list", "(", "vals", "[", "0", "]", ")", "\n", "new_r_list", "+=", "list", "(", "vals", "[", "1", "]", ")", "\n", "new_v_list", "+=", "list", "(", "vals", "[", "2", "]", ")", "\n", "\n", "\n", "", "assert", "sum", "(", "new_h_list", ")", "==", "sum", "(", "all_h_list", ")", "\n", "assert", "sum", "(", "new_t_list", ")", "==", "sum", "(", "all_t_list", ")", "\n", "assert", "sum", "(", "new_r_list", ")", "==", "sum", "(", "all_r_list", ")", "\n", "# try:", "\n", "#     assert sum(new_v_list) == sum(all_v_list)", "\n", "# except Exception:", "\n", "#     print(sum(new_v_list), '\\n')", "\n", "#     print(sum(all_v_list), '\\n')", "\n", "print", "(", "'\\tsort all data done.'", ")", "\n", "\n", "\n", "return", "new_h_list", ",", "new_r_list", ",", "new_t_list", ",", "new_v_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader._generate_train_A_batch": [[184, 230], ["loader_kgat.KGAT_loader.all_kg_dict.keys", "len", "random.sample", "len", "loader_kgat.KGAT_loader._generate_train_A_batch.sample_pos_triples_for_h"], "methods", ["None"], ["", "def", "_generate_train_A_batch", "(", "self", ")", ":", "\n", "        ", "exist_heads", "=", "self", ".", "all_kg_dict", ".", "keys", "(", ")", "\n", "\n", "if", "self", ".", "batch_size_kg", "<=", "len", "(", "exist_heads", ")", ":", "\n", "            ", "heads", "=", "rd", ".", "sample", "(", "exist_heads", ",", "self", ".", "batch_size_kg", ")", "\n", "", "else", ":", "\n", "            ", "heads", "=", "[", "rd", ".", "choice", "(", "exist_heads", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size_kg", ")", "]", "\n", "\n", "", "def", "sample_pos_triples_for_h", "(", "h", ",", "num", ")", ":", "\n", "            ", "pos_triples", "=", "self", ".", "all_kg_dict", "[", "h", "]", "\n", "n_pos_triples", "=", "len", "(", "pos_triples", ")", "\n", "\n", "pos_rs", ",", "pos_ts", "=", "[", "]", ",", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_rs", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_triples", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "\n", "t", "=", "pos_triples", "[", "pos_id", "]", "[", "0", "]", "\n", "r", "=", "pos_triples", "[", "pos_id", "]", "[", "1", "]", "\n", "\n", "if", "r", "not", "in", "pos_rs", "and", "t", "not", "in", "pos_ts", ":", "\n", "                    ", "pos_rs", ".", "append", "(", "r", ")", "\n", "pos_ts", ".", "append", "(", "t", ")", "\n", "", "", "return", "pos_rs", ",", "pos_ts", "\n", "\n", "", "def", "sample_neg_triples_for_h", "(", "h", ",", "r", ",", "num", ")", ":", "\n", "            ", "neg_ts", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_ts", ")", "==", "num", ":", "break", "\n", "\n", "t", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_users", "+", "self", ".", "n_entities", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "if", "(", "t", ",", "r", ")", "not", "in", "self", ".", "all_kg_dict", "[", "h", "]", "and", "t", "not", "in", "neg_ts", ":", "\n", "                    ", "neg_ts", ".", "append", "(", "t", ")", "\n", "", "", "return", "neg_ts", "\n", "\n", "", "pos_r_batch", ",", "pos_t_batch", ",", "neg_t_batch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "h", "in", "heads", ":", "\n", "            ", "pos_rs", ",", "pos_ts", "=", "sample_pos_triples_for_h", "(", "h", ",", "1", ")", "\n", "pos_r_batch", "+=", "pos_rs", "\n", "pos_t_batch", "+=", "pos_ts", "\n", "\n", "neg_ts", "=", "sample_neg_triples_for_h", "(", "h", ",", "pos_rs", "[", "0", "]", ",", "1", ")", "\n", "neg_t_batch", "+=", "neg_ts", "\n", "\n", "", "return", "heads", ",", "pos_r_batch", ",", "pos_t_batch", ",", "neg_t_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader.generate_train_batch": [[231, 240], ["loader_kgat.KGAT_loader._generate_train_cf_batch"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._generate_train_cf_batch"], ["", "def", "generate_train_batch", "(", "self", ")", ":", "\n", "        ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "_generate_train_cf_batch", "(", ")", "\n", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "'users'", "]", "=", "users", "\n", "batch_data", "[", "'pos_items'", "]", "=", "pos_items", "\n", "batch_data", "[", "'neg_items'", "]", "=", "neg_items", "\n", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader.generate_train_feed_dict": [[241, 252], ["eval", "eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "generate_train_feed_dict", "(", "self", ",", "model", ",", "batch_data", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "users", ":", "batch_data", "[", "'users'", "]", ",", "\n", "model", ".", "pos_items", ":", "batch_data", "[", "'pos_items'", "]", ",", "\n", "model", ".", "neg_items", ":", "batch_data", "[", "'neg_items'", "]", ",", "\n", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "self", ".", "args", ".", "mess_dropout", ")", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "self", ".", "args", ".", "node_dropout", ")", ",", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader.generate_train_A_batch": [[253, 263], ["loader_kgat.KGAT_loader._generate_train_A_batch"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._generate_train_A_batch"], ["", "def", "generate_train_A_batch", "(", "self", ")", ":", "\n", "        ", "heads", ",", "relations", ",", "pos_tails", ",", "neg_tails", "=", "self", ".", "_generate_train_A_batch", "(", ")", "\n", "\n", "batch_data", "=", "{", "}", "\n", "\n", "batch_data", "[", "'heads'", "]", "=", "heads", "\n", "batch_data", "[", "'relations'", "]", "=", "relations", "\n", "batch_data", "[", "'pos_tails'", "]", "=", "pos_tails", "\n", "batch_data", "[", "'neg_tails'", "]", "=", "neg_tails", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader.generate_train_A_feed_dict": [[264, 274], ["None"], "methods", ["None"], ["", "def", "generate_train_A_feed_dict", "(", "self", ",", "model", ",", "batch_data", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "h", ":", "batch_data", "[", "'heads'", "]", ",", "\n", "model", ".", "r", ":", "batch_data", "[", "'relations'", "]", ",", "\n", "model", ".", "pos_t", ":", "batch_data", "[", "'pos_tails'", "]", ",", "\n", "model", ".", "neg_t", ":", "batch_data", "[", "'neg_tails'", "]", ",", "\n", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_kgat.KGAT_loader.generate_test_feed_dict": [[276, 287], ["len", "len", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "generate_test_feed_dict", "(", "self", ",", "model", ",", "user_batch", ",", "item_batch", ",", "drop_flag", "=", "True", ")", ":", "\n", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "self", ".", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "self", ".", "args", ".", "layer_size", ")", ")", ",", "\n", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.recall": [[4, 6], ["len", "float", "len", "set", "set", "set"], "function", ["None"], ["def", "recall", "(", "rank", ",", "ground_truth", ",", "N", ")", ":", "\n", "    ", "return", "len", "(", "set", "(", "rank", "[", ":", "N", "]", ")", "&", "set", "(", "ground_truth", ")", ")", "/", "float", "(", "len", "(", "set", "(", "ground_truth", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.precision_at_k": [[8, 19], ["numpy.mean", "numpy.asarray"], "function", ["None"], ["", "def", "precision_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"Score is precision @ k\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Precision @ k\n    Raises:\n        ValueError: len(r) must be >= k\n    \"\"\"", "\n", "assert", "k", ">=", "1", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "mean", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.average_precision": [[21, 32], ["numpy.asarray", "metrics.precision_at_k", "numpy.sum", "float", "range", "min", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.precision_at_k"], ["", "def", "average_precision", "(", "r", ",", "cut", ")", ":", "\n", "    ", "\"\"\"Score is average precision (area under PR curve)\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Average precision\n    \"\"\"", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "\n", "out", "=", "[", "precision_at_k", "(", "r", ",", "k", "+", "1", ")", "for", "k", "in", "range", "(", "cut", ")", "if", "r", "[", "k", "]", "]", "\n", "if", "not", "out", ":", "\n", "        ", "return", "0.", "\n", "", "return", "np", ".", "sum", "(", "out", ")", "/", "float", "(", "min", "(", "cut", ",", "np", ".", "sum", "(", "r", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.mean_average_precision": [[34, 41], ["numpy.mean", "metrics.average_precision"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.average_precision"], ["", "def", "mean_average_precision", "(", "rs", ")", ":", "\n", "    ", "\"\"\"Score is mean average precision\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Mean average precision\n    \"\"\"", "\n", "return", "np", ".", "mean", "(", "[", "average_precision", "(", "r", ")", "for", "r", "in", "rs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.dcg_at_k": [[43, 59], ["numpy.asfarray", "numpy.sum", "numpy.sum", "ValueError", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "dcg_at_k", "(", "r", ",", "k", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is discounted cumulative gain (dcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Discounted cumulative gain\n    \"\"\"", "\n", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "if", "method", "==", "0", ":", "\n", "            ", "return", "r", "[", "0", "]", "+", "np", ".", "sum", "(", "r", "[", "1", ":", "]", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "1", ")", ")", ")", "\n", "", "elif", "method", "==", "1", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'method must be 0 or 1.'", ")", "\n", "", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.ndcg_at_k": [[61, 72], ["metrics.dcg_at_k", "sorted", "metrics.dcg_at_k"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.dcg_at_k", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is normalized discounted cumulative gain (ndcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Normalized discounted cumulative gain\n    \"\"\"", "\n", "dcg_max", "=", "dcg_at_k", "(", "sorted", "(", "r", ",", "reverse", "=", "True", ")", ",", "k", ",", "method", ")", "\n", "if", "not", "dcg_max", ":", "\n", "        ", "return", "0.", "\n", "", "return", "dcg_at_k", "(", "r", ",", "k", ",", "method", ")", "/", "dcg_max", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.recall_at_k": [[74, 77], ["numpy.asfarray", "numpy.sum"], "function", ["None"], ["", "def", "recall_at_k", "(", "r", ",", "k", ",", "all_pos_num", ")", ":", "\n", "    ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "sum", "(", "r", ")", "/", "all_pos_num", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.hit_at_k": [[79, 85], ["numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "hit_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "r", "=", "np", ".", "array", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "np", ".", "sum", "(", "r", ")", ">", "0", ":", "\n", "        ", "return", "1.", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.F1": [[86, 91], ["None"], "function", ["None"], ["", "", "def", "F1", "(", "pre", ",", "rec", ")", ":", "\n", "    ", "if", "pre", "+", "rec", ">", "0", ":", "\n", "        ", "return", "(", "2.0", "*", "pre", "*", "rec", ")", "/", "(", "pre", "+", "rec", ")", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.auc": [[92, 98], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "", "def", "auc", "(", "ground_truth", ",", "prediction", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "res", "=", "roc_auc_score", "(", "y_true", "=", "ground_truth", ",", "y_score", "=", "prediction", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "res", "=", "0.", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.logloss": [[99, 103], ["sklearn.metrics.log_loss", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "logloss", "(", "ground_truth", ",", "prediction", ")", ":", "\n", "# preds = [max(min(p, 1. - 10e-12), 10e-12) for p in prediction]", "\n", "    ", "logloss", "=", "log_loss", "(", "np", ".", "asarray", "(", "ground_truth", ")", ",", "np", ".", "asarray", "(", "prediction", ")", ")", "\n", "return", "logloss", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader.__init__": [[13, 21], ["utility.load_data.Data.__init__", "loader_nfm.NFM_loader.get_kg_feature", "scipy.identity().tocsr", "scipy.identity"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.__init__", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader.get_kg_feature"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "# generate the sparse matrix for the knowledge graph features.", "\n", "kg_feat_file", "=", "path", "+", "'/kg_feat.npz'", "\n", "self", ".", "kg_feat_mat", "=", "self", ".", "get_kg_feature", "(", "kg_feat_file", ")", "\n", "\n", "# generate the one-hot sparse matrix for the users.", "\n", "self", ".", "user_one_hot", "=", "sp", ".", "identity", "(", "self", ".", "n_users", ")", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader.get_kg_feature": [[22, 31], ["scipy.load_npz", "print", "loader_nfm.NFM_loader._create_kg_feat_mat", "scipy.save_npz", "print"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader._create_kg_feat_mat"], ["", "def", "get_kg_feature", "(", "self", ",", "kg_feat_file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "kg_feat_mat", "=", "sp", ".", "load_npz", "(", "kg_feat_file", ")", "\n", "print", "(", "'already load item kg feature mat'", ",", "kg_feat_mat", ".", "shape", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "kg_feat_mat", "=", "self", ".", "_create_kg_feat_mat", "(", ")", "\n", "sp", ".", "save_npz", "(", "kg_feat_file", ",", "kg_feat_mat", ")", "\n", "print", "(", "'already save item kg feature mat:'", ",", "kg_feat_file", ")", "\n", "", "return", "kg_feat_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader._create_kg_feat_mat": [[32, 58], ["range", "scipy.coo_matrix().tocsr", "cat_rows.append", "cat_cols.append", "cat_data.append", "loader_nfm.NFM_loader.kg_dict.keys", "cat_rows.append", "cat_cols.append", "cat_data.append", "scipy.coo_matrix"], "methods", ["None"], ["", "def", "_create_kg_feat_mat", "(", "self", ")", ":", "\n", "        ", "cat_rows", "=", "[", "]", "\n", "cat_cols", "=", "[", "]", "\n", "cat_data", "=", "[", "]", "\n", "\n", "for", "i_id", "in", "range", "(", "self", ".", "n_items", ")", ":", "\n", "# One-hot encoding for items.", "\n", "            ", "cat_rows", ".", "append", "(", "i_id", ")", "\n", "cat_cols", ".", "append", "(", "i_id", ")", "\n", "cat_data", ".", "append", "(", "1", ")", "\n", "\n", "# Multi-hot encoding for kg features of items.", "\n", "if", "i_id", "not", "in", "self", ".", "kg_dict", ".", "keys", "(", ")", ":", "continue", "\n", "triples", "=", "self", ".", "kg_dict", "[", "i_id", "]", "\n", "for", "trip", "in", "triples", ":", "\n", "# ... only consider the tail entities.", "\n", "                ", "t_id", "=", "trip", "[", "0", "]", "\n", "# ... relations are ignored.", "\n", "r_id", "=", "trip", "[", "1", "]", "\n", "\n", "cat_rows", ".", "append", "(", "i_id", ")", "\n", "cat_cols", ".", "append", "(", "t_id", ")", "\n", "cat_data", ".", "append", "(", "1.", ")", "\n", "\n", "", "", "kg_feat_mat", "=", "sp", ".", "coo_matrix", "(", "(", "cat_data", ",", "(", "cat_rows", ",", "cat_cols", ")", ")", ",", "shape", "=", "(", "self", ".", "n_items", ",", "self", ".", "n_entities", ")", ")", ".", "tocsr", "(", ")", "\n", "return", "kg_feat_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader.generate_train_batch": [[59, 75], ["loader_nfm.NFM_loader._generate_train_cf_batch", "scipy.hstack", "scipy.hstack"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._generate_train_cf_batch"], ["", "def", "generate_train_batch", "(", "self", ")", ":", "\n", "\n", "        ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "_generate_train_cf_batch", "(", ")", "\n", "u_sp", "=", "self", ".", "user_one_hot", "[", "users", "]", "\n", "pos_i_sp", "=", "self", ".", "kg_feat_mat", "[", "pos_items", "]", "\n", "neg_i_sp", "=", "self", ".", "kg_feat_mat", "[", "neg_items", "]", "\n", "\n", "\n", "# Horizontally stack sparse matrices to get single positive & negative feature matrices", "\n", "pos_feats", "=", "sp", ".", "hstack", "(", "[", "u_sp", ",", "pos_i_sp", "]", ")", "\n", "neg_feats", "=", "sp", ".", "hstack", "(", "[", "u_sp", ",", "neg_i_sp", "]", ")", "\n", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "'pos_feats'", "]", "=", "pos_feats", "\n", "batch_data", "[", "'neg_feats'", "]", "=", "neg_feats", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader._extract_sp_info": [[76, 82], ["numpy.hstack", "sp_feats.nonzero", "sp_feats.nonzero"], "methods", ["None"], ["", "def", "_extract_sp_info", "(", "self", ",", "sp_feats", ")", ":", "\n", "        ", "sp_indices", "=", "np", ".", "hstack", "(", "(", "sp_feats", ".", "nonzero", "(", ")", "[", "0", "]", "[", ":", ",", "None", "]", ",", "\n", "sp_feats", ".", "nonzero", "(", ")", "[", "1", "]", "[", ":", ",", "None", "]", ")", ")", "\n", "sp_values", "=", "sp_feats", ".", "data", "\n", "sp_shape", "=", "sp_feats", ".", "shape", "\n", "return", "sp_indices", ",", "sp_values", ",", "sp_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader.generate_train_feed_dict": [[83, 101], ["loader_nfm.NFM_loader._extract_sp_info", "loader_nfm.NFM_loader._extract_sp_info", "eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader._extract_sp_info", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader._extract_sp_info", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "generate_train_feed_dict", "(", "self", ",", "model", ",", "batch_data", ")", ":", "\n", "\n", "        ", "pos_indices", ",", "pos_values", ",", "pos_shape", "=", "self", ".", "_extract_sp_info", "(", "batch_data", "[", "'pos_feats'", "]", ")", "\n", "neg_indices", ",", "neg_values", ",", "neg_shape", "=", "self", ".", "_extract_sp_info", "(", "batch_data", "[", "'neg_feats'", "]", ")", "\n", "\n", "feed_dict", "=", "{", "\n", "model", ".", "pos_indices", ":", "pos_indices", ",", "\n", "model", ".", "pos_values", ":", "pos_values", ",", "\n", "model", ".", "pos_shape", ":", "pos_shape", ",", "\n", "\n", "model", ".", "neg_indices", ":", "neg_indices", ",", "\n", "model", ".", "neg_values", ":", "neg_values", ",", "\n", "model", ".", "neg_shape", ":", "neg_shape", ",", "\n", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "self", ".", "args", ".", "mess_dropout", ")", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader.generate_test_feed_dict": [[102, 122], ["numpy.repeat().tolist", "scipy.hstack", "loader_nfm.NFM_loader._extract_sp_info", "list", "len", "numpy.repeat", "len", "len", "eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_nfm.NFM_loader._extract_sp_info", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "generate_test_feed_dict", "(", "self", ",", "model", ",", "user_batch", ",", "item_batch", ",", "drop_flag", "=", "True", ")", ":", "\n", "        ", "user_list", "=", "np", ".", "repeat", "(", "user_batch", ",", "len", "(", "item_batch", ")", ")", ".", "tolist", "(", ")", "\n", "item_list", "=", "list", "(", "item_batch", ")", "*", "len", "(", "user_batch", ")", "\n", "\n", "u_sp", "=", "self", ".", "user_one_hot", "[", "user_list", "]", "\n", "pos_i_sp", "=", "self", ".", "kg_feat_mat", "[", "item_list", "]", "\n", "\n", "# Horizontally stack sparse matrices to get single positive & negative feature matrices", "\n", "pos_feats", "=", "sp", ".", "hstack", "(", "[", "u_sp", ",", "pos_i_sp", "]", ")", "\n", "pos_indices", ",", "pos_values", ",", "pos_shape", "=", "self", ".", "_extract_sp_info", "(", "pos_feats", ")", "\n", "\n", "feed_dict", "=", "{", "\n", "model", ".", "pos_indices", ":", "pos_indices", ",", "\n", "model", ".", "pos_values", ":", "pos_values", ",", "\n", "model", ".", "pos_shape", ":", "pos_shape", ",", "\n", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "self", ".", "args", ".", "layer_size", ")", ")", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.parser.parse_args": [[9, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.parser.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run KGAT.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weights_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Store model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'../Data/'", ",", "\n", "help", "=", "'Input data path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--proj_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Project path.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'yelp2018'", ",", "\n", "help", "=", "'Choose a dataset from {yelp2018, last-fm, amazon-book}'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: No pretrain, -1: Pretrain with the learned embeddings, 1:Pretrain with stored models.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'Number of epoch.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--embed_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'CF Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--kge_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'KG Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_size'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[64]'", ",", "\n", "help", "=", "'Output sizes of every layer'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'CF batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_kg'", ",", "type", "=", "int", ",", "default", "=", "2048", ",", "\n", "help", "=", "'KG batch size.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--regs'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[1e-5,1e-5,1e-2]'", ",", "\n", "help", "=", "'Regularization for user and item embeddings.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'kgat'", ",", "\n", "help", "=", "'Specify a loss type from {kgat, bprmf, fm, nfm, cke, cfkg}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--adj_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'si'", ",", "\n", "help", "=", "'Specify the type of the adjacency (laplacian) matrix from {bi, si}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alg_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'ngcf'", ",", "\n", "help", "=", "'Specify the type of the graph convolutional layer from {bi, gcn, graphsage}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--adj_uni_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'sum'", ",", "\n", "help", "=", "'Specify a loss type (uni, sum).'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 for NAIS_prod, 1 for NAIS_concat'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--node_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. node dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mess_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. message dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--Ks'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[20, 40, 60, 80, 100]'", ",", "\n", "help", "=", "'Output sizes of every layer'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_flag'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable model saver, 1: Activate model saver'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--test_flag'", ",", "nargs", "=", "'?'", ",", "default", "=", "'part'", ",", "\n", "help", "=", "'Specify the test type from {part, full}, indicating whether the reference is done in mini-batch'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--report'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable performance report w.r.t. sparsity levels, 1: Show performance report w.r.t. sparsity levels'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use_att'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether using attention mechanism'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_kge'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'whether using knowledge graph embedding'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--l1_flag'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Flase: using the L2 norm, True: using the L1 norm.'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.helper.txt2list": [[9, 13], ["open", "open.readlines"], "function", ["None"], ["def", "txt2list", "(", "file_src", ")", ":", "\n", "    ", "orig_file", "=", "open", "(", "file_src", ",", "\"r\"", ")", "\n", "lines", "=", "orig_file", ".", "readlines", "(", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.helper.ensureDir": [[15, 19], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "ensureDir", "(", "dir_path", ")", ":", "\n", "    ", "d", "=", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.helper.uni2str": [[21, 23], ["str().replace().strip", "str().replace", "str", "unicode_str.encode"], "function", ["None"], ["", "", "def", "uni2str", "(", "unicode_str", ")", ":", "\n", "    ", "return", "str", "(", "unicode_str", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.helper.hasNumbers": [[25, 27], ["bool", "re.search"], "function", ["None"], ["", "def", "hasNumbers", "(", "inputString", ")", ":", "\n", "    ", "return", "bool", "(", "re", ".", "search", "(", "r'\\d'", ",", "inputString", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.helper.delMultiChar": [[28, 32], ["inputString.replace.replace"], "function", ["None"], ["", "def", "delMultiChar", "(", "inputString", ",", "chars", ")", ":", "\n", "    ", "for", "ch", "in", "chars", ":", "\n", "        ", "inputString", "=", "inputString", ".", "replace", "(", "ch", ",", "''", ")", "\n", "", "return", "inputString", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.helper.merge_two_dicts": [[33, 37], ["x.copy", "x.copy.update"], "function", ["None"], ["", "def", "merge_two_dicts", "(", "x", ",", "y", ")", ":", "\n", "    ", "z", "=", "x", ".", "copy", "(", ")", "# start with x's keys and values", "\n", "z", ".", "update", "(", "y", ")", "# modifies z with y's keys and values & returns None", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.helper.early_stopping": [[38, 54], ["print"], "function", ["None"], ["", "def", "early_stopping", "(", "log_value", ",", "best_value", ",", "stopping_step", ",", "expected_order", "=", "'acc'", ",", "flag_step", "=", "100", ")", ":", "\n", "# early stopping strategy:", "\n", "    ", "assert", "expected_order", "in", "[", "'acc'", ",", "'dec'", "]", "\n", "\n", "if", "(", "expected_order", "==", "'acc'", "and", "log_value", ">=", "best_value", ")", "or", "(", "expected_order", "==", "'dec'", "and", "log_value", "<=", "best_value", ")", ":", "\n", "        ", "stopping_step", "=", "0", "\n", "best_value", "=", "log_value", "\n", "", "else", ":", "\n", "        ", "stopping_step", "+=", "1", "\n", "\n", "", "if", "stopping_step", ">=", "flag_step", ":", "\n", "        ", "print", "(", "\"Early stopping is trigger at step: {} log:{}\"", ".", "format", "(", "flag_step", ",", "log_value", ")", ")", "\n", "should_stop", "=", "True", "\n", "", "else", ":", "\n", "        ", "should_stop", "=", "False", "\n", "", "return", "best_value", ",", "stopping_step", ",", "should_stop", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_bprmf.BPRMF_loader.__init__": [[10, 12], ["utility.load_data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_bprmf.BPRMF_loader.generate_train_batch": [[13, 22], ["loader_bprmf.BPRMF_loader._generate_train_cf_batch"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.load_data.Data._generate_train_cf_batch"], ["", "def", "generate_train_batch", "(", "self", ")", ":", "\n", "        ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "_generate_train_cf_batch", "(", ")", "\n", "\n", "batch_data", "=", "{", "}", "\n", "batch_data", "[", "'users'", "]", "=", "users", "\n", "batch_data", "[", "'pos_items'", "]", "=", "pos_items", "\n", "batch_data", "[", "'neg_items'", "]", "=", "neg_items", "\n", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_bprmf.BPRMF_loader.generate_train_feed_dict": [[23, 31], ["None"], "methods", ["None"], ["", "def", "generate_train_feed_dict", "(", "self", ",", "model", ",", "batch_data", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "users", ":", "batch_data", "[", "'users'", "]", ",", "\n", "model", ".", "pos_items", ":", "batch_data", "[", "'pos_items'", "]", ",", "\n", "model", ".", "neg_items", ":", "batch_data", "[", "'neg_items'", "]", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_bprmf.BPRMF_loader.generate_test_feed_dict": [[33, 39], ["None"], "methods", ["None"], ["", "def", "generate_test_feed_dict", "(", "self", ",", "model", ",", "user_batch", ",", "item_batch", ",", "drop_flag", "=", "False", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "\n", "}", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.ranklist_by_heapq": [[50, 66], ["max", "heapq.nlargest", "r.append", "r.append"], "function", ["None"], ["def", "ranklist_by_heapq", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", ":", "\n", "    ", "item_score", "=", "{", "}", "\n", "for", "i", "in", "test_items", ":", "\n", "        ", "item_score", "[", "i", "]", "=", "rating", "[", "i", "]", "\n", "\n", "", "K_max", "=", "max", "(", "Ks", ")", "\n", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "K_max", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "", "", "auc", "=", "0.", "\n", "return", "r", ",", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.get_auc": [[67, 81], ["sorted", "sorted.reverse", "utility.auc", "sorted.items", "r.append", "r.append"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.auc"], ["", "def", "get_auc", "(", "item_score", ",", "user_pos_test", ")", ":", "\n", "    ", "item_score", "=", "sorted", "(", "item_score", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", "\n", "item_score", ".", "reverse", "(", ")", "\n", "item_sort", "=", "[", "x", "[", "0", "]", "for", "x", "in", "item_score", "]", "\n", "posterior", "=", "[", "x", "[", "1", "]", "for", "x", "in", "item_score", "]", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "item_sort", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "", "", "auc", "=", "metrics", ".", "auc", "(", "ground_truth", "=", "r", ",", "prediction", "=", "posterior", ")", "\n", "return", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.ranklist_by_sorted": [[82, 98], ["max", "heapq.nlargest", "batch_test.get_auc", "r.append", "r.append"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.get_auc"], ["", "def", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", ":", "\n", "    ", "item_score", "=", "{", "}", "\n", "for", "i", "in", "test_items", ":", "\n", "        ", "item_score", "[", "i", "]", "=", "rating", "[", "i", "]", "\n", "\n", "", "K_max", "=", "max", "(", "Ks", ")", "\n", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "K_max", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "", "", "auc", "=", "get_auc", "(", "item_score", ",", "user_pos_test", ")", "\n", "return", "r", ",", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.get_performance": [[100, 111], ["precision.append", "recall.append", "ndcg.append", "hit_ratio.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "utility.precision_at_k", "utility.recall_at_k", "utility.ndcg_at_k", "utility.hit_at_k", "len"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.precision_at_k", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.recall_at_k", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.ndcg_at_k", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.metrics.hit_at_k"], ["", "def", "get_performance", "(", "user_pos_test", ",", "r", ",", "auc", ",", "Ks", ")", ":", "\n", "    ", "precision", ",", "recall", ",", "ndcg", ",", "hit_ratio", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "K", "in", "Ks", ":", "\n", "        ", "precision", ".", "append", "(", "metrics", ".", "precision_at_k", "(", "r", ",", "K", ")", ")", "\n", "recall", ".", "append", "(", "metrics", ".", "recall_at_k", "(", "r", ",", "K", ",", "len", "(", "user_pos_test", ")", ")", ")", "\n", "ndcg", ".", "append", "(", "metrics", ".", "ndcg_at_k", "(", "r", ",", "K", ")", ")", "\n", "hit_ratio", ".", "append", "(", "metrics", ".", "hit_at_k", "(", "r", ",", "K", ")", ")", "\n", "\n", "", "return", "{", "'recall'", ":", "np", ".", "array", "(", "recall", ")", ",", "'precision'", ":", "np", ".", "array", "(", "precision", ")", ",", "\n", "'ndcg'", ":", "np", ".", "array", "(", "ndcg", ")", ",", "'hit_ratio'", ":", "np", ".", "array", "(", "hit_ratio", ")", ",", "'auc'", ":", "auc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.test_one_user": [[113, 146], ["set", "list", "batch_test.get_performance", "range", "batch_test.ranklist_by_heapq", "batch_test.ranklist_by_sorted", "set"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.get_performance", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.ranklist_by_heapq", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.ranklist_by_sorted"], ["", "def", "test_one_user", "(", "x", ")", ":", "\n", "# user u's ratings for user u", "\n", "    ", "rating", "=", "x", "[", "0", "]", "\n", "#uid", "\n", "u", "=", "x", "[", "1", "]", "\n", "#user u's items in the training set", "\n", "try", ":", "\n", "        ", "training_items", "=", "data_generator", ".", "train_user_dict", "[", "u", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "training_items", "=", "[", "]", "\n", "#user u's items in the test set", "\n", "", "user_pos_test", "=", "data_generator", ".", "test_user_dict", "[", "u", "]", "\n", "\n", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "\n", "test_items", "=", "list", "(", "all_items", "-", "set", "(", "training_items", ")", ")", "\n", "\n", "if", "args", ".", "test_flag", "==", "'part'", ":", "\n", "        ", "r", ",", "auc", "=", "ranklist_by_heapq", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", "\n", "", "else", ":", "\n", "        ", "r", ",", "auc", "=", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", "\n", "\n", "# # .......checking.......", "\n", "# try:", "\n", "#     assert len(user_pos_test) != 0", "\n", "# except Exception:", "\n", "#     print(u)", "\n", "#     print(training_items)", "\n", "#     print(user_pos_test)", "\n", "#     exit()", "\n", "# # .......checking.......", "\n", "\n", "", "return", "get_performance", "(", "user_pos_test", ",", "r", ",", "auc", ",", "Ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.batch_test.test": [[148, 225], ["multiprocessing.Pool", "len", "range", "multiprocessing.Pool.close", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "numpy.zeros", "range", "range", "data_generator.generate_test_feed_dict", "model.eval", "rate_batch.reshape.reshape", "min", "range", "data_generator.generate_test_feed_dict", "model.eval", "i_rate_batch.reshape.reshape", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.generate_test_feed_dict", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.generate_test_feed_dict", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "test", "(", "sess", ",", "model", ",", "users_to_test", ",", "drop_flag", "=", "False", ",", "batch_test_flag", "=", "False", ")", ":", "\n", "    ", "result", "=", "{", "'precision'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "'hit_ratio'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'auc'", ":", "0.", "}", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "cores", ")", "\n", "\n", "if", "args", ".", "model_type", "in", "[", "'ripple'", "]", ":", "\n", "\n", "        ", "u_batch_size", "=", "BATCH_SIZE", "\n", "i_batch_size", "=", "BATCH_SIZE", "//", "20", "\n", "", "elif", "args", ".", "model_type", "in", "[", "'fm'", ",", "'nfm'", "]", ":", "\n", "        ", "u_batch_size", "=", "BATCH_SIZE", "\n", "i_batch_size", "=", "BATCH_SIZE", "\n", "", "else", ":", "\n", "        ", "u_batch_size", "=", "BATCH_SIZE", "*", "2", "\n", "i_batch_size", "=", "BATCH_SIZE", "\n", "\n", "", "test_users", "=", "users_to_test", "\n", "n_test_users", "=", "len", "(", "test_users", ")", "\n", "n_user_batchs", "=", "n_test_users", "//", "u_batch_size", "+", "1", "\n", "\n", "count", "=", "0", "\n", "\n", "for", "u_batch_id", "in", "range", "(", "n_user_batchs", ")", ":", "\n", "        ", "start", "=", "u_batch_id", "*", "u_batch_size", "\n", "end", "=", "(", "u_batch_id", "+", "1", ")", "*", "u_batch_size", "\n", "\n", "user_batch", "=", "test_users", "[", "start", ":", "end", "]", "\n", "\n", "if", "batch_test_flag", ":", "\n", "\n", "            ", "n_item_batchs", "=", "ITEM_NUM", "//", "i_batch_size", "+", "1", "\n", "rate_batch", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "user_batch", ")", ",", "ITEM_NUM", ")", ")", "\n", "\n", "i_count", "=", "0", "\n", "for", "i_batch_id", "in", "range", "(", "n_item_batchs", ")", ":", "\n", "                ", "i_start", "=", "i_batch_id", "*", "i_batch_size", "\n", "i_end", "=", "min", "(", "(", "i_batch_id", "+", "1", ")", "*", "i_batch_size", ",", "ITEM_NUM", ")", "\n", "\n", "item_batch", "=", "range", "(", "i_start", ",", "i_end", ")", "\n", "\n", "feed_dict", "=", "data_generator", ".", "generate_test_feed_dict", "(", "model", "=", "model", ",", "\n", "user_batch", "=", "user_batch", ",", "\n", "item_batch", "=", "item_batch", ",", "\n", "drop_flag", "=", "drop_flag", ")", "\n", "i_rate_batch", "=", "model", ".", "eval", "(", "sess", ",", "feed_dict", "=", "feed_dict", ")", "\n", "i_rate_batch", "=", "i_rate_batch", ".", "reshape", "(", "(", "-", "1", ",", "len", "(", "item_batch", ")", ")", ")", "\n", "\n", "rate_batch", "[", ":", ",", "i_start", ":", "i_end", "]", "=", "i_rate_batch", "\n", "i_count", "+=", "i_rate_batch", ".", "shape", "[", "1", "]", "\n", "\n", "", "assert", "i_count", "==", "ITEM_NUM", "\n", "\n", "", "else", ":", "\n", "            ", "item_batch", "=", "range", "(", "ITEM_NUM", ")", "\n", "feed_dict", "=", "data_generator", ".", "generate_test_feed_dict", "(", "model", "=", "model", ",", "\n", "user_batch", "=", "user_batch", ",", "\n", "item_batch", "=", "item_batch", ",", "\n", "drop_flag", "=", "drop_flag", ")", "\n", "rate_batch", "=", "model", ".", "eval", "(", "sess", ",", "feed_dict", "=", "feed_dict", ")", "\n", "rate_batch", "=", "rate_batch", ".", "reshape", "(", "(", "-", "1", ",", "len", "(", "item_batch", ")", ")", ")", "\n", "\n", "", "user_batch_rating_uid", "=", "zip", "(", "rate_batch", ",", "user_batch", ")", "\n", "batch_result", "=", "pool", ".", "map", "(", "test_one_user", ",", "user_batch_rating_uid", ")", "\n", "count", "+=", "len", "(", "batch_result", ")", "\n", "\n", "for", "re", "in", "batch_result", ":", "\n", "            ", "result", "[", "'precision'", "]", "+=", "re", "[", "'precision'", "]", "/", "n_test_users", "\n", "result", "[", "'recall'", "]", "+=", "re", "[", "'recall'", "]", "/", "n_test_users", "\n", "result", "[", "'ndcg'", "]", "+=", "re", "[", "'ndcg'", "]", "/", "n_test_users", "\n", "result", "[", "'hit_ratio'", "]", "+=", "re", "[", "'hit_ratio'", "]", "/", "n_test_users", "\n", "result", "[", "'auc'", "]", "+=", "re", "[", "'auc'", "]", "/", "n_test_users", "\n", "\n", "\n", "", "", "assert", "count", "==", "n_test_users", "\n", "pool", ".", "close", "(", ")", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.__init__": [[15, 28], ["utility.load_data.Data.__init__", "loader_cfkg.CFKG_loader._get_relational_adj_list", "loader_cfkg.CFKG_loader._get_relational_lap_list", "loader_cfkg.CFKG_loader._get_all_kg_dict", "loader_cfkg.CFKG_loader._get_all_kg_data"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.__init__", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_relational_adj_list", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_relational_lap_list", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_all_kg_dict", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_all_kg_data"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "path", ")", "\n", "self", ".", "batch_size_kg", "=", "self", ".", "batch_size", "\n", "# generate the sparse adjacency matrices for user-item interaction & relational kg data.", "\n", "self", ".", "adj_list", ",", "self", ".", "adj_r_list", "=", "self", ".", "_get_relational_adj_list", "(", ")", "\n", "\n", "# generate the sparse laplacian matrices.", "\n", "self", ".", "lap_list", "=", "self", ".", "_get_relational_lap_list", "(", ")", "\n", "\n", "# generate the triples dictionary, key is 'head', value is '(tail, relation)'.", "\n", "self", ".", "all_kg_dict", "=", "self", ".", "_get_all_kg_dict", "(", ")", "\n", "\n", "self", ".", "all_h_list", ",", "self", ".", "all_r_list", ",", "self", ".", "all_t_list", ",", "self", ".", "all_v_list", "=", "self", ".", "_get_all_kg_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_relational_adj_list": [[30, 72], ["time.time.time", "loader_cfkg.CFKG_loader._get_relational_adj_list._np_mat2sp_adj"], "methods", ["None"], ["", "def", "_get_relational_adj_list", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "adj_mat_list", "=", "[", "]", "\n", "adj_r_list", "=", "[", "]", "\n", "\n", "def", "_np_mat2sp_adj", "(", "np_mat", ",", "row_pre", ",", "col_pre", ")", ":", "\n", "            ", "n_all", "=", "self", ".", "n_users", "+", "self", ".", "n_entities", "\n", "# single-direction", "\n", "a_rows", "=", "np_mat", "[", ":", ",", "0", "]", "+", "row_pre", "\n", "a_cols", "=", "np_mat", "[", ":", ",", "1", "]", "+", "col_pre", "\n", "a_vals", "=", "[", "1.", "]", "*", "len", "(", "a_rows", ")", "\n", "\n", "b_rows", "=", "a_cols", "\n", "b_cols", "=", "a_rows", "\n", "b_vals", "=", "[", "1.", "]", "*", "len", "(", "b_rows", ")", "\n", "\n", "a_adj", "=", "sp", ".", "coo_matrix", "(", "(", "a_vals", ",", "(", "a_rows", ",", "a_cols", ")", ")", ",", "shape", "=", "(", "n_all", ",", "n_all", ")", ")", "\n", "b_adj", "=", "sp", ".", "coo_matrix", "(", "(", "b_vals", ",", "(", "b_rows", ",", "b_cols", ")", ")", ",", "shape", "=", "(", "n_all", ",", "n_all", ")", ")", "\n", "\n", "return", "a_adj", ",", "b_adj", "\n", "\n", "", "R", ",", "R_inv", "=", "_np_mat2sp_adj", "(", "self", ".", "train_data", ",", "row_pre", "=", "0", ",", "col_pre", "=", "self", ".", "n_users", ")", "\n", "adj_mat_list", ".", "append", "(", "R", ")", "\n", "adj_r_list", ".", "append", "(", "0", ")", "\n", "\n", "adj_mat_list", ".", "append", "(", "R_inv", ")", "\n", "adj_r_list", ".", "append", "(", "self", ".", "n_relations", "+", "1", ")", "\n", "print", "(", "'\\tconvert ratings into adj mat done.'", ")", "\n", "\n", "for", "r_id", "in", "self", ".", "relation_dict", ".", "keys", "(", ")", ":", "\n", "            ", "K", ",", "K_inv", "=", "_np_mat2sp_adj", "(", "np", ".", "array", "(", "self", ".", "relation_dict", "[", "r_id", "]", ")", ",", "row_pre", "=", "self", ".", "n_users", ",", "col_pre", "=", "self", ".", "n_users", ")", "\n", "adj_mat_list", ".", "append", "(", "K", ")", "\n", "adj_r_list", ".", "append", "(", "r_id", "+", "1", ")", "\n", "\n", "adj_mat_list", ".", "append", "(", "K_inv", ")", "\n", "adj_r_list", ".", "append", "(", "r_id", "+", "2", "+", "self", ".", "n_relations", ")", "\n", "", "print", "(", "'\\tconvert %d relational triples into adj mat done. @%.4fs'", "%", "(", "len", "(", "adj_mat_list", ")", ",", "time", "(", ")", "-", "t1", ")", ")", "\n", "\n", "self", ".", "n_relations", "=", "len", "(", "adj_r_list", ")", "\n", "# print('\\tadj relation list is', adj_r_list)", "\n", "\n", "return", "adj_mat_list", ",", "adj_r_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_relational_lap_list": [[73, 104], ["numpy.array", "numpy.power().flatten", "scipy.diags", "adj.dot().transpose().dot", "adj.dot().transpose().dot.tocoo", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.tocoo", "print", "adj.sum", "adj.sum", "loader_cfkg.CFKG_loader._get_relational_lap_list._bi_norm_lap"], "methods", ["None"], ["", "def", "_get_relational_lap_list", "(", "self", ")", ":", "\n", "        ", "def", "_bi_norm_lap", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "\n", "bi_lap", "=", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", "\n", "return", "bi_lap", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "_si_norm_lap", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "adj_type", "==", "'bi'", ":", "\n", "            ", "lap_list", "=", "[", "_bi_norm_lap", "(", "adj", ")", "for", "adj", "in", "self", ".", "adj_list", "]", "\n", "print", "(", "'\\tgenerate bi-normalized adjacency matrix.'", ")", "\n", "", "elif", "self", ".", "args", ".", "adj_type", "==", "'wokg'", ":", "\n", "            ", "lap_list", "=", "self", ".", "adj_list", "[", "0", ":", "2", "]", "\n", "print", "(", "'\\tgenerate w/o knowledge adjacency matrix.'", ")", "\n", "", "else", ":", "\n", "            ", "lap_list", "=", "[", "_si_norm_lap", "(", "adj", ")", "for", "adj", "in", "self", ".", "adj_list", "]", "\n", "print", "(", "'\\tgenerate si-normalized adjacency matrix.'", ")", "\n", "", "return", "lap_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_all_kg_dict": [[105, 119], ["collections.defaultdict", "enumerate", "range", "len", "all_kg_dict[].append"], "methods", ["None"], ["", "def", "_get_all_kg_dict", "(", "self", ")", ":", "\n", "        ", "all_kg_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "l_id", ",", "lap", "in", "enumerate", "(", "self", ".", "lap_list", ")", ":", "\n", "\n", "            ", "rows", "=", "lap", ".", "row", "\n", "cols", "=", "lap", ".", "col", "\n", "\n", "for", "i_id", "in", "range", "(", "len", "(", "rows", ")", ")", ":", "\n", "                ", "head", "=", "rows", "[", "i_id", "]", "\n", "tail", "=", "cols", "[", "i_id", "]", "\n", "relation", "=", "self", ".", "adj_r_list", "[", "l_id", "]", "\n", "\n", "all_kg_dict", "[", "head", "]", ".", "append", "(", "(", "tail", ",", "relation", ")", ")", "\n", "", "", "return", "all_kg_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._get_all_kg_data": [[120, 186], ["enumerate", "print", "dict", "enumerate", "print", "dict", "dict.keys", "print", "collections.OrderedDict", "collections.OrderedDict.items", "print", "numpy.array", "list", "list", "list", "len", "sum", "[].append", "[].append", "[].append", "numpy.array", "numpy.argsort", "loader_cfkg.CFKG_loader._get_all_kg_data._reorder_list"], "methods", ["None"], ["", "def", "_get_all_kg_data", "(", "self", ")", ":", "\n", "        ", "def", "_reorder_list", "(", "org_list", ",", "order", ")", ":", "\n", "            ", "new_list", "=", "np", ".", "array", "(", "org_list", ")", "\n", "new_list", "=", "new_list", "[", "order", "]", "\n", "return", "new_list", "\n", "\n", "", "all_h_list", ",", "all_t_list", ",", "all_r_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_v_list", "=", "[", "]", "\n", "\n", "for", "l_id", ",", "lap", "in", "enumerate", "(", "self", ".", "lap_list", ")", ":", "\n", "            ", "all_h_list", "+=", "list", "(", "lap", ".", "row", ")", "\n", "all_t_list", "+=", "list", "(", "lap", ".", "col", ")", "\n", "all_v_list", "+=", "list", "(", "lap", ".", "data", ")", "\n", "all_r_list", "+=", "[", "self", ".", "adj_r_list", "[", "l_id", "]", "]", "*", "len", "(", "lap", ".", "row", ")", "\n", "\n", "", "assert", "len", "(", "all_h_list", ")", "==", "sum", "(", "[", "len", "(", "lap", ".", "data", ")", "for", "lap", "in", "self", ".", "lap_list", "]", ")", "\n", "\n", "# resort the all_h/t/r/v_list,", "\n", "# ... since tensorflow.sparse.softmax requires indices sorted in the canonical lexicographic order", "\n", "print", "(", "'\\treordering indices...'", ")", "\n", "org_h_dict", "=", "dict", "(", ")", "\n", "\n", "for", "idx", ",", "h", "in", "enumerate", "(", "all_h_list", ")", ":", "\n", "            ", "if", "h", "not", "in", "org_h_dict", ".", "keys", "(", ")", ":", "\n", "                ", "org_h_dict", "[", "h", "]", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "\n", "", "org_h_dict", "[", "h", "]", "[", "0", "]", ".", "append", "(", "all_t_list", "[", "idx", "]", ")", "\n", "org_h_dict", "[", "h", "]", "[", "1", "]", ".", "append", "(", "all_r_list", "[", "idx", "]", ")", "\n", "org_h_dict", "[", "h", "]", "[", "2", "]", ".", "append", "(", "all_v_list", "[", "idx", "]", ")", "\n", "", "print", "(", "'\\treorganize all kg data done.'", ")", "\n", "\n", "sorted_h_dict", "=", "dict", "(", ")", "\n", "for", "h", "in", "org_h_dict", ".", "keys", "(", ")", ":", "\n", "            ", "org_t_list", ",", "org_r_list", ",", "org_v_list", "=", "org_h_dict", "[", "h", "]", "\n", "sort_t_list", "=", "np", ".", "array", "(", "org_t_list", ")", "\n", "sort_order", "=", "np", ".", "argsort", "(", "sort_t_list", ")", "\n", "\n", "sort_t_list", "=", "_reorder_list", "(", "org_t_list", ",", "sort_order", ")", "\n", "sort_r_list", "=", "_reorder_list", "(", "org_r_list", ",", "sort_order", ")", "\n", "sort_v_list", "=", "_reorder_list", "(", "org_v_list", ",", "sort_order", ")", "\n", "\n", "sorted_h_dict", "[", "h", "]", "=", "[", "sort_t_list", ",", "sort_r_list", ",", "sort_v_list", "]", "\n", "", "print", "(", "'\\tsort meta-data done.'", ")", "\n", "\n", "od", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "sorted_h_dict", ".", "items", "(", ")", ")", ")", "\n", "new_h_list", ",", "new_t_list", ",", "new_r_list", ",", "new_v_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "h", ",", "vals", "in", "od", ".", "items", "(", ")", ":", "\n", "            ", "new_h_list", "+=", "[", "h", "]", "*", "len", "(", "vals", "[", "0", "]", ")", "\n", "new_t_list", "+=", "list", "(", "vals", "[", "0", "]", ")", "\n", "new_r_list", "+=", "list", "(", "vals", "[", "1", "]", ")", "\n", "new_v_list", "+=", "list", "(", "vals", "[", "2", "]", ")", "\n", "\n", "\n", "", "assert", "sum", "(", "new_h_list", ")", "==", "sum", "(", "all_h_list", ")", "\n", "assert", "sum", "(", "new_t_list", ")", "==", "sum", "(", "all_t_list", ")", "\n", "assert", "sum", "(", "new_r_list", ")", "==", "sum", "(", "all_r_list", ")", "\n", "# try:", "\n", "#     assert sum(new_v_list) == sum(all_v_list)", "\n", "# except Exception:", "\n", "#     print(sum(new_v_list), '\\n')", "\n", "#     print(sum(all_v_list), '\\n')", "\n", "print", "(", "'\\tsort all data done.'", ")", "\n", "\n", "\n", "return", "new_h_list", ",", "new_r_list", ",", "new_t_list", ",", "new_v_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._generate_train_A_batch": [[187, 233], ["loader_cfkg.CFKG_loader.all_kg_dict.keys", "len", "random.sample", "len", "loader_cfkg.CFKG_loader._generate_train_A_batch.sample_pos_triples_for_h"], "methods", ["None"], ["", "def", "_generate_train_A_batch", "(", "self", ")", ":", "\n", "        ", "exist_heads", "=", "self", ".", "all_kg_dict", ".", "keys", "(", ")", "\n", "\n", "if", "self", ".", "batch_size_kg", "<=", "len", "(", "exist_heads", ")", ":", "\n", "            ", "heads", "=", "rd", ".", "sample", "(", "exist_heads", ",", "self", ".", "batch_size_kg", ")", "\n", "", "else", ":", "\n", "            ", "heads", "=", "[", "rd", ".", "choice", "(", "exist_heads", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size_kg", ")", "]", "\n", "\n", "", "def", "sample_pos_triples_for_h", "(", "h", ",", "num", ")", ":", "\n", "            ", "pos_triples", "=", "self", ".", "all_kg_dict", "[", "h", "]", "\n", "n_pos_triples", "=", "len", "(", "pos_triples", ")", "\n", "\n", "pos_rs", ",", "pos_ts", "=", "[", "]", ",", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_rs", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_triples", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "\n", "t", "=", "pos_triples", "[", "pos_id", "]", "[", "0", "]", "\n", "r", "=", "pos_triples", "[", "pos_id", "]", "[", "1", "]", "\n", "\n", "if", "r", "not", "in", "pos_rs", "and", "t", "not", "in", "pos_ts", ":", "\n", "                    ", "pos_rs", ".", "append", "(", "r", ")", "\n", "pos_ts", ".", "append", "(", "t", ")", "\n", "", "", "return", "pos_rs", ",", "pos_ts", "\n", "\n", "", "def", "sample_neg_triples_for_h", "(", "h", ",", "r", ",", "num", ")", ":", "\n", "            ", "neg_ts", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_ts", ")", "==", "num", ":", "break", "\n", "\n", "t", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_users", "+", "self", ".", "n_entities", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "if", "(", "t", ",", "r", ")", "not", "in", "self", ".", "all_kg_dict", "[", "h", "]", "and", "t", "not", "in", "neg_ts", ":", "\n", "                    ", "neg_ts", ".", "append", "(", "t", ")", "\n", "", "", "return", "neg_ts", "\n", "\n", "", "pos_r_batch", ",", "pos_t_batch", ",", "neg_t_batch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "h", "in", "heads", ":", "\n", "            ", "pos_rs", ",", "pos_ts", "=", "sample_pos_triples_for_h", "(", "h", ",", "1", ")", "\n", "pos_r_batch", "+=", "pos_rs", "\n", "pos_t_batch", "+=", "pos_ts", "\n", "\n", "neg_ts", "=", "sample_neg_triples_for_h", "(", "h", ",", "pos_rs", "[", "0", "]", ",", "1", ")", "\n", "neg_t_batch", "+=", "neg_ts", "\n", "\n", "", "return", "heads", ",", "pos_r_batch", ",", "pos_t_batch", ",", "neg_t_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.generate_train_batch": [[234, 244], ["loader_cfkg.CFKG_loader._generate_train_A_batch"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader._generate_train_A_batch"], ["", "def", "generate_train_batch", "(", "self", ")", ":", "\n", "        ", "heads", ",", "relations", ",", "pos_tails", ",", "neg_tails", "=", "self", ".", "_generate_train_A_batch", "(", ")", "\n", "\n", "batch_data", "=", "{", "}", "\n", "\n", "batch_data", "[", "'heads'", "]", "=", "heads", "\n", "batch_data", "[", "'relations'", "]", "=", "relations", "\n", "batch_data", "[", "'pos_tails'", "]", "=", "pos_tails", "\n", "batch_data", "[", "'neg_tails'", "]", "=", "neg_tails", "\n", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.generate_train_feed_dict": [[245, 263], ["None"], "methods", ["None"], ["", "def", "generate_train_feed_dict", "(", "self", ",", "model", ",", "batch_data", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "model", ".", "h", ":", "batch_data", "[", "'heads'", "]", ",", "\n", "model", ".", "r", ":", "batch_data", "[", "'relations'", "]", ",", "\n", "model", ".", "pos_t", ":", "batch_data", "[", "'pos_tails'", "]", ",", "\n", "model", ".", "neg_t", ":", "batch_data", "[", "'neg_tails'", "]", ",", "\n", "\n", "}", "\n", "\n", "# print(batch_data['heads'])", "\n", "# print('\\n')", "\n", "# print(batch_data['pos_tails'])", "\n", "# print('\\n')", "\n", "# print(batch_data['neg_tails'])", "\n", "# print('\\n')", "\n", "# exit()", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.utility.loader_cfkg.CFKG_loader.generate_test_feed_dict": [[265, 286], ["list", "numpy.repeat", "list", "len", "len", "len", "len", "len", "numpy.array", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval", "home.repos.pwc.inspect_result.xiangwang1223_knowledge_graph_attention_network.Model.NFM.NFM.eval"], ["", "def", "generate_test_feed_dict", "(", "self", ",", "model", ",", "user_batch", ",", "item_batch", ",", "drop_flag", "=", "True", ")", ":", "\n", "        ", "user_list", "=", "list", "(", "np", ".", "repeat", "(", "user_batch", ",", "len", "(", "item_batch", ")", ")", ")", "\n", "item_list", "=", "list", "(", "np", ".", "array", "(", "item_batch", ")", "+", "self", ".", "n_users", ")", "*", "len", "(", "user_batch", ")", "\n", "\n", "# print(user_list)", "\n", "# print('\\n')", "\n", "# print(item_list)", "\n", "\n", "\n", "\n", "feed_dict", "=", "{", "\n", "model", ".", "h", ":", "user_list", ",", "\n", "model", ".", "r", ":", "[", "0", "]", "*", "len", "(", "user_list", ")", ",", "\n", "model", ".", "pos_t", ":", "item_list", ",", "\n", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "self", ".", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "self", ".", "args", ".", "layer_size", ")", ")", ",", "\n", "\n", "}", "\n", "\n", "return", "feed_dict", "\n", "\n"]]}