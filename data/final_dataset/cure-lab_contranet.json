{"home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpmlpMix.train": [[31, 119], ["mlpModel.train", "orimodel.query_features", "genmodel.query_features", "writer.add_scalar", "orimodel.train", "genmodel.train", "orimodel.eval", "genmodel.eval", "misc.generate1", "optim.zero_grad", "orimodel", "genmodel", "genmodel", "inference_m", "loss_func", "loss_func.backward", "optim.step", "writer.add_scalar", "writer.add_scalar", "attack.print_stat", "norm", "attack.adv_by_suss", "orimodel", "genmodel", "gt_pair.cuda", "loss_func.item", "print", "loss_func.item", "args.tag.find", "norm", "misc.gen_with_pn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "norm", "misc.gen_with_label", "opti.zero_grad", "opti.step", "args.tag.find", "print"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.print_stat", "home.repos.pwc.inspect_result.cure-lab_contranet.models.baseWrapper.BaseWrapper.adv_by_suss", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.gen_with_pn", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.gen_with_label"], ["def", "train", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "loss_func", ",", "device", ",", "loader", ",", "optim", ",", "epoch", ",", "\n", "encoder", ",", "vae", ",", "gen", ",", "inference_m", ",", "args", ",", "writer", ",", "policy", "=", "\"\"", ",", "\n", "cond_optim", "=", "None", ",", "attack", "=", "None", ",", "norm", "=", "None", ")", ":", "\n", "    ", "mlpModel", ".", "train", "(", ")", "\n", "orimodel", ".", "query_features", "(", ")", "\n", "genmodel", ".", "query_features", "(", ")", "\n", "if", "args", ".", "cond", ":", "\n", "        ", "orimodel", ".", "train", "(", ")", "\n", "genmodel", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "orimodel", ".", "eval", "(", ")", "\n", "genmodel", ".", "eval", "(", ")", "\n", "", "total_loss", ",", "total_num", "=", "0.0", ",", "0", "\n", "for", "img", ",", "classId", "in", "loader", ":", "\n", "        ", "if", "norm", "is", "not", "None", ":", "\n", "            ", "img_ori", "=", "norm", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img_ori", "=", "img", "\n", "", "img_ori", ",", "img_pos", ",", "img_neg", ",", "y", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img_ori", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "policy", "=", "policy", ",", "\n", "class_num", "=", "args", ".", "class_num", ")", "\n", "aux_img", "=", "None", "\n", "if", "attack", "is", "not", "None", ":", "\n", "            ", "x_adv_suss", ",", "pred_y_suss", ",", "y_suss", ",", "x_adv_fail", ",", "y_fail", "=", "attack", ".", "adv_by_suss", "(", "img", ",", "classId", ",", "device", ",", "training", "=", "True", ")", "\n", "if", "x_adv_suss", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "x_adv_suss", "=", "norm", "(", "x_adv_suss", ")", "\n", "x_adv_ori", ",", "x_adv_pos", ",", "x_adv_neg", ",", "y_adv", ",", "wrong_y_adv", "=", "utils", ".", "gen_with_pn", "(", "\n", "x_adv_suss", ",", "y_suss", ",", "pred_y_suss", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ")", "\n", "img_ori", "=", "torch", ".", "cat", "(", "[", "img_ori", ",", "x_adv_ori", "]", ",", "dim", "=", "0", ")", "\n", "img_pos", "=", "torch", ".", "cat", "(", "[", "img_pos", ",", "x_adv_pos", "]", ",", "dim", "=", "0", ")", "\n", "img_neg", "=", "torch", ".", "cat", "(", "[", "img_neg", ",", "x_adv_neg", "]", ",", "dim", "=", "0", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "y_adv", "]", ",", "dim", "=", "0", ")", "\n", "wrong_y", "=", "torch", ".", "cat", "(", "[", "wrong_y", ",", "wrong_y_adv", "]", ",", "dim", "=", "0", ")", "\n", "# This is for failed attack samples, i.e. y == pred_y", "\n", "", "if", "x_adv_fail", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "x_adv_fail", "=", "norm", "(", "x_adv_fail", ")", "\n", "aux_img", ",", "aux_pos", ",", "aux_y", "=", "utils", ".", "gen_with_label", "(", "\n", "x_adv_fail", ",", "y_fail", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ")", "\n", "\n", "", "", "if", "args", ".", "cond", ":", "\n", "            ", "for", "opti", "in", "cond_optim", ":", "\n", "                ", "opti", ".", "zero_grad", "(", ")", "\n", "", "", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "feat_emb", ",", "_", "=", "orimodel", "(", "img_ori", ")", "\n", "feat_pos", ",", "_", "=", "genmodel", "(", "img_pos", ")", "\n", "feat_neg", ",", "_", "=", "genmodel", "(", "img_neg", ")", "\n", "if", "aux_img", "is", "not", "None", ":", "\n", "            ", "feat_aux_emb", ",", "_", "=", "orimodel", "(", "aux_img", ")", "\n", "feat_aux_pos", ",", "_", "=", "genmodel", "(", "aux_pos", ")", "\n", "aux_data", "=", "{", "\n", "\"feat_aux_emb\"", ":", "feat_aux_emb", ",", "\n", "\"feat_aux_pos\"", ":", "feat_aux_pos", ",", "\n", "\"aux_y\"", ":", "aux_y", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "aux_data", "=", "None", "\n", "", "gt_pair", ",", "pred", "=", "inference_m", "(", "\n", "mlpModel", ",", "feat_emb", ",", "feat_pos", ",", "feat_neg", ",", "y", ",", "wrong_y", ",", "\n", "aux_data", "=", "aux_data", ")", "\n", "loss", "=", "loss_func", "(", "pred", ",", "gt_pair", ".", "cuda", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "if", "args", ".", "cond", ":", "\n", "            ", "for", "opti", "in", "cond_optim", ":", "\n", "                ", "opti", ".", "step", "(", ")", "\n", "\n", "", "", "total_num", "+=", "loader", ".", "batch_size", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "loader", ".", "batch_size", "\n", "train_lr", "=", "optim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "global", "train_iter", "\n", "if", "train_iter", "%", "50", "==", "0", "or", "args", ".", "tag", ".", "find", "(", "\"debug\"", ")", "!=", "-", "1", ":", "\n", "            ", "print", "(", "\"E:[{}/{}], lr:{:.6f}, L:{:.4f}\"", ".", "format", "(", "\n", "epoch", ",", "args", ".", "epochs", ",", "train_lr", ",", "total_loss", "/", "total_num", ")", ")", "\n", "if", "args", ".", "cond", ":", "\n", "                ", "print", "(", "\"DML lr: {}\"", ".", "format", "(", "\n", "[", "opti", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "for", "opti", "in", "cond_optim", "]", ")", ")", "\n", "", "", "writer", ".", "add_scalar", "(", "'Train/lr'", ",", "train_lr", ",", "train_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/loss'", ",", "loss", ".", "item", "(", ")", ",", "train_iter", ")", "\n", "train_iter", "+=", "1", "\n", "if", "args", ".", "tag", ".", "find", "(", "\"debug\"", ")", "!=", "-", "1", ":", "\n", "            ", "break", "\n", "", "", "if", "attack", "is", "not", "None", ":", "\n", "        ", "attack", ".", "print_stat", "(", ")", "\n", "", "writer", ".", "add_scalar", "(", "'Train/EAvgLoss'", ",", "total_loss", "/", "total_num", ",", "epoch", ")", "\n", "return", "total_loss", "/", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpmlpMix.test": [[121, 158], ["mlpModel.eval", "orimodel.eval", "genmodel.eval", "orimodel.query_features", "genmodel.query_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "len", "acc.item", "pos_acc.item", "neg_acc.item", "misc.generate1", "orimodel", "genmodel", "genmodel", "inference_m", "torch.argmax().cpu", "torch.argmax().cpu", "torch.cat.append", "torch.cat.append", "torch.cat.append", "norm", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "torch.where"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "def", "test", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "inference_m", ",", "writer", ",", "norm", "=", "None", ")", ":", "\n", "    ", "global", "test_iter", "\n", "mlpModel", ".", "eval", "(", ")", "\n", "orimodel", ".", "eval", "(", ")", "\n", "genmodel", ".", "eval", "(", ")", "\n", "orimodel", ".", "query_features", "(", ")", "\n", "genmodel", ".", "query_features", "(", ")", "\n", "pred_list", ",", "pos_pred_list", ",", "neg_pred_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "img", ",", "classId", "in", "dataset", ":", "\n", "            ", "if", "norm", "is", "not", "None", ":", "\n", "                ", "img", "=", "norm", "(", "img", ")", "\n", "", "img", ",", "img_pos", ",", "img_neg", ",", "y", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "next", "=", "True", ",", "\n", "class_num", "=", "args", ".", "class_num", ")", "\n", "feat_emb", ",", "_", "=", "orimodel", "(", "img", ")", "\n", "feat_pos", ",", "_", "=", "genmodel", "(", "img_pos", ")", "\n", "feat_neg", ",", "_", "=", "genmodel", "(", "img_neg", ")", "\n", "gt_pair", ",", "pred", "=", "inference_m", "(", "\n", "mlpModel", ",", "feat_emb", ",", "feat_pos", ",", "feat_neg", ",", "y", ",", "wrong_y", ",", "test", "=", "True", ")", "\n", "pred_y", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", "\n", "pred_list", ".", "append", "(", "(", "pred_y", "==", "gt_pair", ")", ".", "cpu", "(", ")", ")", "\n", "pos_pred_list", ".", "append", "(", "pred_y", "[", "torch", ".", "where", "(", "gt_pair", "==", "1", ")", "]", "==", "1", ")", "\n", "neg_pred_list", ".", "append", "(", "pred_y", "[", "torch", ".", "where", "(", "gt_pair", "==", "0", ")", "]", "==", "0", ")", "\n", "", "", "pred_list", "=", "torch", ".", "cat", "(", "pred_list", ")", "\n", "pos_pred_list", "=", "torch", ".", "cat", "(", "pos_pred_list", ")", "\n", "neg_pred_list", "=", "torch", ".", "cat", "(", "neg_pred_list", ")", "\n", "acc", "=", "torch", ".", "sum", "(", "pred_list", ")", "/", "len", "(", "pred_list", ")", "\n", "print", "(", "\"MLP acc: {}\"", ".", "format", "(", "acc", ")", ")", "\n", "pos_acc", "=", "torch", ".", "sum", "(", "pos_pred_list", ")", "/", "len", "(", "pos_pred_list", ")", "\n", "neg_acc", "=", "torch", ".", "sum", "(", "neg_pred_list", ")", "/", "len", "(", "neg_pred_list", ")", "\n", "writer", ".", "add_scalar", "(", "'TestEmb/mlpAcc'", ",", "acc", ".", "item", "(", ")", ",", "test_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'TestEmb/mlpAcc_pos'", ",", "pos_acc", ".", "item", "(", ")", ",", "test_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'TestEmb/mlpAcc_neg'", ",", "neg_acc", ".", "item", "(", ")", ",", "test_iter", ")", "\n", "test_iter", "+=", "1", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpmlpMix.cache_batch_AE": [[160, 173], ["print", "attack.adv_by_suss", "norm", "norm", "suss_AE_batch.append", "fail_AE_batch.append", "norm.cpu", "pred_y_suss.cpu", "norm.cpu", "pred_y_fail.cpu"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.baseWrapper.BaseWrapper.adv_by_suss"], ["", "def", "cache_batch_AE", "(", "idx", ",", "dataset", ",", "attack", ",", "norm", ")", ":", "\n", "    ", "global", "suss_AE_batch", ",", "fail_AE_batch", "\n", "if", "suss_AE_batch", "is", "None", ":", "\n", "        ", "print", "(", "\">>>> test AE no cache, generating for the first time.\"", ")", "\n", "suss_AE_batch", ",", "fail_AE_batch", "=", "[", "]", ",", "[", "]", "\n", "for", "img", ",", "classId", "in", "dataset", ":", "\n", "            ", "x_adv_suss", ",", "pred_y_suss", ",", "x_adv_fail", ",", "pred_y_fail", "=", "attack", ".", "adv_by_suss", "(", "img", ",", "classId", ",", "device", ")", "\n", "x_adv_suss", "=", "norm", "(", "x_adv_suss", ")", "\n", "x_adv_fail", "=", "norm", "(", "x_adv_fail", ")", "\n", "suss_AE_batch", ".", "append", "(", "(", "x_adv_suss", ".", "cpu", "(", ")", ",", "pred_y_suss", ".", "cpu", "(", ")", ")", ")", "\n", "fail_AE_batch", ".", "append", "(", "(", "x_adv_fail", ".", "cpu", "(", ")", ",", "pred_y_fail", ".", "cpu", "(", ")", ")", ")", "\n", "", "", "return", "suss_AE_batch", "[", "idx", "]", ",", "fail_AE_batch", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpmlpMix.testAE": [[175, 232], ["mlpModel.eval", "orimodel.eval", "genmodel.eval", "orimodel.query_features", "genmodel.query_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "enumerate", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "len", "torch.sum", "torch.sum", "len", "acc.item", "pos_acc.item", "neg_acc.item", "lpmlpMix.cache_batch_AE", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.argmax().cpu", "torch.argmax().cpu", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "misc.gen_with_label", "orimodel", "genmodel", "inference_m", "torch.Tensor", "torch.Tensor", "torch.Tensor().to", "torch.Tensor().to", "len", "misc.gen_with_label", "orimodel", "genmodel", "inference_m", "torch.Tensor", "torch.Tensor", "torch.Tensor().to", "torch.Tensor().to", "torch.argmax", "torch.argmax", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.where", "torch.where", "torch.where", "torch.where"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpmlpMix.cache_batch_AE", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.gen_with_label", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.gen_with_label", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "def", "testAE", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "writer", ",", "attack", ",", "norm", ",", "feature_m", "=", "False", ")", ":", "\n", "    ", "global", "test_iter", ",", "suss_AE_batch", ",", "fail_AE_batch", "\n", "mlpModel", ".", "eval", "(", ")", "\n", "orimodel", ".", "eval", "(", ")", "\n", "genmodel", ".", "eval", "(", ")", "\n", "orimodel", ".", "query_features", "(", ")", "\n", "genmodel", ".", "query_features", "(", ")", "\n", "if", "feature_m", ":", "\n", "        ", "inference_m", "=", "utils", ".", "inference_2_mlp_m", "\n", "", "else", ":", "\n", "        ", "inference_m", "=", "utils", ".", "inference_2_mlp", "\n", "", "pred_list", ",", "pos_pred_list", ",", "neg_pred_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "(", "img", ",", "classId", ")", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "(", "x_adv_suss", ",", "pred_y_suss", ")", ",", "(", "x_adv_fail", ",", "pred_y_fail", ")", "=", "cache_batch_AE", "(", "idx", ",", "dataset", ",", "attack", ",", "norm", ")", "\n", "assert", "img", ".", "shape", "[", "0", "]", "==", "x_adv_suss", ".", "shape", "[", "0", "]", "+", "x_adv_fail", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "x_adv_suss", ")", ">", "0", ":", "\n", "                ", "x_adv_neg", ",", "x_adv_neg_gen", ",", "y_neg", "=", "utils", ".", "gen_with_label", "(", "\n", "x_adv_suss", ",", "pred_y_suss", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ")", "\n", "feat_emb_neg", ",", "_", "=", "orimodel", "(", "x_adv_neg", ")", "\n", "feat_neg", ",", "_", "=", "genmodel", "(", "x_adv_neg_gen", ")", "\n", "neg_gt", ",", "neg_pred", "=", "inference_m", "(", "\n", "mlpModel", ",", "feat_emb_neg", ",", "feat_neg", ",", "y_neg", ",", "pos", "=", "False", ",", "\n", "test", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "neg_gt", "=", "torch", ".", "Tensor", "(", ")", "\n", "neg_pred", "=", "torch", ".", "Tensor", "(", ")", ".", "to", "(", "device", ")", "\n", "", "if", "len", "(", "x_adv_fail", ")", ">", "0", ":", "\n", "                ", "x_adv_pos", ",", "x_adv_pos_gen", ",", "y_pos", "=", "utils", ".", "gen_with_label", "(", "\n", "x_adv_fail", ",", "pred_y_fail", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ")", "\n", "feat_emb_pos", ",", "_", "=", "orimodel", "(", "x_adv_pos", ")", "\n", "feat_pos", ",", "_", "=", "genmodel", "(", "x_adv_pos_gen", ")", "\n", "pos_gt", ",", "pos_pred", "=", "inference_m", "(", "\n", "mlpModel", ",", "feat_emb_pos", ",", "feat_pos", ",", "y_pos", ",", "pos", "=", "True", ",", "\n", "test", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "pos_gt", "=", "torch", ".", "Tensor", "(", ")", "\n", "pos_pred", "=", "torch", ".", "Tensor", "(", ")", ".", "to", "(", "device", ")", "\n", "", "gt_pair", "=", "torch", ".", "cat", "(", "[", "pos_gt", ",", "neg_gt", "]", ",", "dim", "=", "0", ")", "\n", "pred", "=", "torch", ".", "cat", "(", "[", "pos_pred", ",", "neg_pred", "]", ",", "dim", "=", "0", ")", "\n", "pred_y", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", "\n", "pred_list", ".", "append", "(", "(", "pred_y", "==", "gt_pair", ")", ".", "cpu", "(", ")", ")", "\n", "pos_pred_list", ".", "append", "(", "pred_y", "[", "torch", ".", "where", "(", "gt_pair", "==", "1", ")", "]", "==", "1", ")", "\n", "neg_pred_list", ".", "append", "(", "pred_y", "[", "torch", ".", "where", "(", "gt_pair", "==", "0", ")", "]", "==", "0", ")", "\n", "", "", "pred_list", "=", "torch", ".", "cat", "(", "pred_list", ")", "\n", "pos_pred_list", "=", "torch", ".", "cat", "(", "pos_pred_list", ")", "\n", "neg_pred_list", "=", "torch", ".", "cat", "(", "neg_pred_list", ")", "\n", "acc", "=", "torch", ".", "sum", "(", "pred_list", ")", "/", "len", "(", "pred_list", ")", "\n", "print", "(", "\"AEMLP acc: {}\"", ".", "format", "(", "acc", ")", ")", "\n", "pos_acc", "=", "torch", ".", "sum", "(", "pos_pred_list", ")", "/", "len", "(", "pos_pred_list", ")", "\n", "neg_acc", "=", "torch", ".", "sum", "(", "neg_pred_list", ")", "/", "len", "(", "neg_pred_list", ")", "\n", "writer", ".", "add_scalar", "(", "'TestEmb/AEmlpAcc'", ",", "acc", ".", "item", "(", ")", ",", "test_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'TestEmb/AEmlpAcc_pos'", ",", "pos_acc", ".", "item", "(", ")", ",", "test_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'TestEmb/AEmlpAcc_neg'", ",", "neg_acc", ".", "item", "(", ")", ",", "test_iter", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpDMLpretrain.train": [[30, 73], ["dmlmodel.train", "writer.add_scalar", "optim.zero_grad", "mining_func", "loss_func", "loss_func.backward", "optim.step", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "misc.generate1", "dmlmodel", "dmlmodel", "torch.cat", "torch.cat", "img.to.to", "dmlmodel", "classId.to", "loss_func.item", "print", "loss_func.item", "args.tag.find", "args.tag.find"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1"], ["def", "train", "(", "dmlmodel", ",", "mining_func", ",", "loss_func", ",", "device", ",", "loader", ",", "optim", ",", "epoch", ",", "\n", "encoder", ",", "vae", ",", "gen", ",", "args", ",", "writer", ")", ":", "\n", "    ", "dmlmodel", ".", "train", "(", ")", "\n", "total_loss", ",", "total_num", "=", "0.0", ",", "0", "\n", "for", "img", ",", "classId", "in", "loader", ":", "\n", "        ", "optim", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "genFig", ":", "\n", "            ", "img", ",", "img_pos", ",", "img_neg", ",", "y", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "class_num", "=", "args", ".", "class_num", ")", "\n", "feat_pos", "=", "dmlmodel", "(", "img_pos", ")", "\n", "feat_neg", "=", "dmlmodel", "(", "img_neg", ")", "\n", "\n", "embeddings", "=", "torch", ".", "cat", "(", "[", "feat_pos", ",", "feat_neg", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "y", ",", "wrong_y", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "feat_emb", "=", "dmlmodel", "(", "img", ")", "\n", "embeddings", "=", "feat_emb", "\n", "labels", "=", "classId", ".", "to", "(", "device", ")", "\n", "\n", "", "indices_tuple", "=", "mining_func", "(", "embeddings", ",", "labels", ")", "\n", "loss", "=", "loss_func", "(", "embeddings", ",", "labels", ",", "indices_tuple", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "total_num", "+=", "loader", ".", "batch_size", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "loader", ".", "batch_size", "\n", "train_lr", "=", "optim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "global", "train_iter", "\n", "if", "train_iter", "%", "50", "==", "0", "or", "args", ".", "tag", ".", "find", "(", "\"debug\"", ")", "!=", "-", "1", ":", "\n", "            ", "print", "(", "\"E:[{}/{}], lr:{:.6f}, L:{:.4f} Ntrip:{}\"", ".", "format", "(", "\n", "epoch", ",", "args", ".", "epochs", ",", "train_lr", ",", "total_loss", "/", "total_num", ",", "\n", "mining_func", ".", "num_triplets", ")", ")", "\n", "", "writer", ".", "add_scalar", "(", "'Train/lr'", ",", "train_lr", ",", "train_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/loss'", ",", "loss", ".", "item", "(", ")", ",", "train_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Ntrip'", ",", "mining_func", ".", "num_triplets", ",", "train_iter", ")", "\n", "train_iter", "+=", "1", "\n", "if", "args", ".", "tag", ".", "find", "(", "\"debug\"", ")", "!=", "-", "1", ":", "\n", "            ", "break", "\n", "", "", "writer", ".", "add_scalar", "(", "'Train/EAvgLoss'", ",", "total_loss", "/", "total_num", ",", "epoch", ")", "\n", "return", "total_loss", "/", "total_num", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpDMLpretrain.get_all_embeddings": [[75, 78], ["pytorch_metric_learning.testers.BaseTester", "testers.BaseTester.get_all_embeddings"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpDMLpretrain.get_all_embeddings"], ["", "def", "get_all_embeddings", "(", "dataset", ",", "model", ")", ":", "\n", "    ", "tester", "=", "testers", ".", "BaseTester", "(", ")", "\n", "return", "tester", ".", "get_all_embeddings", "(", "dataset", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.whitebox_attacks.lpDMLpretrain.test": [[80, 155], ["torch.cat", "torch.cat", "print", "accuracy_calculator.get_accuracy", "print", "writer.add_scalar", "torch.no_grad", "torch.cat", "torch.cat", "len", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "all_aug_pos[].cpu().numpy", "emb_meta[].cpu().numpy", "all_aug_pos[].cpu().numpy", "emb_meta[].cpu().numpy", "numpy.squeeze", "numpy.squeeze", "writer.add_embedding", "torch.cat.append", "args.tag.find", "torch.cat", "misc.generate1", "dmlmodel", "dmlmodel", "torch.cat.append", "torch.cat.append", "torch.cat.append", "img.to.to", "dmlmodel", "torch.cat.append", "y.cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "all_aug_pos[].cpu", "emb_meta[].cpu", "all_aug_pos[].cpu", "emb_meta[].cpu", "j.item", "dmlmodel.cpu", "dmlmodel.cpu", "wrong_y.cpu", "dmlmodel.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "j.item", "k.item"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1"], ["", "def", "test", "(", "dmlmodel", ",", "accuracy_calculator", ",", "device", ",", "test_loader", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "args", ",", "writer", ")", ":", "\n", "    ", "all_aug_pos", ",", "all_aug_neg", "=", "[", "]", ",", "[", "]", "\n", "emb_meta", ",", "neg_meta", "=", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "img", ",", "classId", "in", "test_loader", ":", "\n", "            ", "if", "args", ".", "genFig", ":", "\n", "                ", "_", ",", "img_pos", ",", "img_neg", ",", "y", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "next", "=", "True", ",", "\n", "class_num", "=", "args", ".", "class_num", ")", "\n", "augmented_pos", "=", "dmlmodel", "(", "img_pos", ")", "\n", "augmented_neg", "=", "dmlmodel", "(", "img_neg", ")", "\n", "all_aug_pos", ".", "append", "(", "augmented_pos", ".", "cpu", "(", ")", ")", "\n", "all_aug_neg", ".", "append", "(", "augmented_neg", ".", "cpu", "(", ")", ")", "\n", "neg_meta", ".", "append", "(", "wrong_y", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "feat_emb", "=", "dmlmodel", "(", "img", ")", "\n", "all_aug_pos", ".", "append", "(", "feat_emb", ".", "cpu", "(", ")", ")", "\n", "y", "=", "classId", "\n", "", "emb_meta", ".", "append", "(", "y", ".", "cpu", "(", ")", ")", "\n", "", "", "if", "args", ".", "genFig", ":", "\n", "        ", "neg_meta", "=", "torch", ".", "cat", "(", "neg_meta", ")", "\n", "all_aug_neg", "=", "torch", ".", "cat", "(", "all_aug_neg", ")", "\n", "", "all_aug_pos", "=", "torch", ".", "cat", "(", "all_aug_pos", ")", "\n", "emb_meta", "=", "torch", ".", "cat", "(", "emb_meta", ")", "\n", "\n", "print", "(", "\"Computing accuracy\"", ")", "\n", "num_sample", "=", "len", "(", "all_aug_pos", ")", "//", "5", "\n", "if", "args", ".", "genFig", ":", "\n", "        ", "train_embeddings", "=", "torch", ".", "cat", "(", "\n", "[", "all_aug_pos", "[", ":", "num_sample", "*", "4", "]", ",", "all_aug_neg", "[", ":", "num_sample", "*", "4", "]", "]", ",", "dim", "=", "0", "\n", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_labels", "=", "torch", ".", "cat", "(", "\n", "[", "emb_meta", "[", ":", "num_sample", "*", "4", "]", ",", "neg_meta", "[", ":", "num_sample", "*", "4", "]", "]", ",", "dim", "=", "0", "\n", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_embeddings", "=", "torch", ".", "cat", "(", "\n", "[", "all_aug_pos", "[", "-", "num_sample", ":", "]", ",", "all_aug_neg", "[", "-", "num_sample", ":", "]", "]", ",", "dim", "=", "0", "\n", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_labels", "=", "torch", ".", "cat", "(", "\n", "[", "emb_meta", "[", "-", "num_sample", ":", "]", ",", "neg_meta", "[", "-", "num_sample", ":", "]", "]", ",", "dim", "=", "0", "\n", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "train_embeddings", "=", "all_aug_pos", "[", ":", "num_sample", "*", "4", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "train_labels", "=", "emb_meta", "[", ":", "num_sample", "*", "4", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_embeddings", "=", "all_aug_pos", "[", "-", "num_sample", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_labels", "=", "emb_meta", "[", "-", "num_sample", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "accuracies", "=", "accuracy_calculator", ".", "get_accuracy", "(", "\n", "test_embeddings", ",", "\n", "train_embeddings", ",", "\n", "np", ".", "squeeze", "(", "test_labels", ")", ",", "\n", "np", ".", "squeeze", "(", "train_labels", ")", ",", "\n", "False", "\n", ")", "\n", "print", "(", "\"Test set accuracy (Precision@1) = {}\"", ".", "format", "(", "\n", "accuracies", "[", "\"precision_at_1\"", "]", ")", ")", "\n", "global", "test_iter", "\n", "writer", ".", "add_scalar", "(", "'Test/precision_at_1'", ",", "\n", "accuracies", "[", "\"precision_at_1\"", "]", ",", "test_iter", ")", "\n", "if", "test_iter", "%", "5", "==", "0", "or", "args", ".", "tag", ".", "find", "(", "\"debug\"", ")", "!=", "-", "1", ":", "\n", "        ", "if", "args", ".", "genFig", ":", "\n", "            ", "meta_data", "=", "[", "[", "'pos_gen'", ",", "j", ".", "item", "(", ")", "]", "for", "j", "in", "emb_meta", "]", "+", "[", "[", "'neg_gen'", ",", "k", ".", "item", "(", ")", "]", "for", "k", "in", "neg_meta", "]", "\n", "meta_header", "=", "[", "\"type\"", ",", "\"class\"", "]", "\n", "all_emd", "=", "torch", ".", "cat", "(", "[", "all_aug_pos", ",", "all_aug_neg", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "meta_data", "=", "[", "j", ".", "item", "(", ")", "for", "j", "in", "emb_meta", "]", "\n", "meta_header", "=", "None", "\n", "all_emd", "=", "all_aug_pos", "\n", "", "writer", ".", "add_embedding", "(", "\n", "all_emd", ",", "metadata", "=", "meta_data", ",", "\n", "global_step", "=", "test_iter", ",", "\n", "metadata_header", "=", "meta_header", ")", "\n", "", "test_iter", "+=", "1", "\n", "return", "accuracies", "[", "\"precision_at_1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whiteboxCW.attack_sample": [[28, 34], ["zip", "misc.attack_helper", "[].cuda", "all_sample[].keys"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["def", "attack_sample", "(", "all_sample", ",", "model", ",", "fmodel", ",", "prefix", ")", ":", "\n", "    ", "def", "sample_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "return", "all_sample", "[", "\"x_adv\"", "]", "[", "eps", "]", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "", "loader", "=", "zip", "(", "all_sample", "[", "\"x_ori\"", "]", ",", "all_sample", "[", "\"y_ori\"", "]", ")", "\n", "utils", ".", "attack_helper", "(", "loader", ",", "model", ",", "fmodel", ",", "all_sample", "[", "\"x_adv\"", "]", ".", "keys", "(", ")", ",", "\n", "sample_adv", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whiteboxCW.attack_gen": [[36, 53], ["misc.attack_helper", "foolbox.attacks.L2CarliniWagnerAttack", "models.cwlinfattack.CarliniWagnerLinfAttack.", "models.cwlinfattack.CarliniWagnerLinfAttack", "models.cwlinfattack.CarliniWagnerLinfAttack.perturb", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper", "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack.perturb"], ["", "def", "attack_gen", "(", "test_loader", ",", "fmodel", ",", "model", ",", "save_dir", ",", "prefix", ",", "name", ",", "\n", "epsilon_list", ",", "params", ",", "norm", "=", "\"L2\"", ")", ":", "\n", "    ", "def", "gen_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "if", "norm", "==", "\"L2\"", ":", "\n", "            ", "adversary", "=", "fb", ".", "attacks", ".", "L2CarliniWagnerAttack", "(", "\n", "confidence", "=", "eps", ",", "**", "params", ")", "\n", "_", ",", "x_adv", ",", "_", "=", "adversary", "(", "fmodel", ",", "img", ",", "classId", ",", "epsilons", "=", "None", ")", "\n", "", "elif", "norm", "==", "\"Linf\"", ":", "\n", "            ", "adversary", "=", "CarliniWagnerLinfAttack", "(", "\n", "confidence", "=", "eps", ",", "**", "params", "\n", ")", "\n", "x_adv", "=", "adversary", ".", "perturb", "(", "img", ",", "classId", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "x_adv", "\n", "", "utils", ".", "attack_helper", "(", "test_loader", ",", "model", ",", "fmodel", ",", "epsilon_list", ",", "gen_adv", ",", "\n", "prefix", ",", "save_dir", ",", "name", ",", "save", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whiteboxEADA.attack_sample": [[26, 32], ["zip", "misc.attack_helper", "[].cuda", "all_sample[].keys"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["def", "attack_sample", "(", "all_sample", ",", "model", ",", "fmodel", ",", "prefix", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "sample_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "return", "all_sample", "[", "\"x_adv\"", "]", "[", "eps", "]", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "", "loader", "=", "zip", "(", "all_sample", "[", "\"x_ori\"", "]", ",", "all_sample", "[", "\"y_ori\"", "]", ")", "\n", "utils", ".", "attack_helper", "(", "loader", ",", "model", ",", "fmodel", ",", "all_sample", "[", "\"x_adv\"", "]", ".", "keys", "(", ")", ",", "\n", "sample_adv", ",", "prefix", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whiteboxEADA.attack_gen": [[34, 41], ["misc.attack_helper", "adversary"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper"], ["", "def", "attack_gen", "(", "test_loader", ",", "fmodel", ",", "model", ",", "save_dir", ",", "prefix", ",", "name", ",", "\n", "epsilon_list", ",", "adversary", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "gen_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "_", ",", "x_adv", ",", "_", "=", "adversary", "(", "fmodel", ",", "img", ",", "classId", ",", "epsilons", "=", "None", ")", "\n", "return", "x_adv", "\n", "", "utils", ".", "attack_helper", "(", "test_loader", ",", "model", ",", "fmodel", ",", "epsilon_list", ",", "gen_adv", ",", "\n", "prefix", ",", "save_dir", ",", "name", ",", "save", "=", "True", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whitebox.attack_sample": [[26, 32], ["zip", "misc.attack_helper", "[].cuda", "all_sample[].keys"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["def", "attack_sample", "(", "all_sample", ",", "model", ",", "fmodel", ",", "prefix", ")", ":", "\n", "    ", "def", "sample_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "return", "all_sample", "[", "\"x_adv\"", "]", "[", "eps", "]", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "", "loader", "=", "zip", "(", "all_sample", "[", "\"x_ori\"", "]", ",", "all_sample", "[", "\"y_ori\"", "]", ")", "\n", "utils", ".", "attack_helper", "(", "loader", ",", "model", ",", "fmodel", ",", "all_sample", "[", "\"x_adv\"", "]", ".", "keys", "(", ")", ",", "\n", "sample_adv", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whitebox.attack_gen": [[34, 41], ["misc.attack_helper", "adversary"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper"], ["", "def", "attack_gen", "(", "test_loader", ",", "fmodel", ",", "model", ",", "adversary", ",", "save_dir", ",", "prefix", ",", "name", ",", "\n", "epsilon_list", ")", ":", "\n", "    ", "def", "gen_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "_", ",", "x_adv", ",", "_", "=", "adversary", "(", "fmodel", ",", "img", ",", "classId", ",", "epsilons", "=", "eps", ")", "\n", "return", "x_adv", "\n", "", "utils", ".", "attack_helper", "(", "test_loader", ",", "model", ",", "fmodel", ",", "epsilon_list", ",", "gen_adv", ",", "\n", "prefix", ",", "save_dir", ",", "name", ",", "save", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.refine_fpr_tpr": [[18, 63], ["torch.tensor", "torch.tensor.sort", "range", "fpr_refine.append", "tpr_refine.append", "len", "len", "torch.tensor", "torch.tensor", "tpr[].item", "thresholds_sort[].tolist", "len", "last_fpr.item", "numpy.max", "tpr_group.append", "thresholds_group.append", "numpy.max", "numpy.argmax", "tpr[].item", "thresholds_sort[].tolist", "fpr_refine.append", "tpr_refine.append", "tpr[].item", "thresholds_sort[].tolist", "last_fpr.item"], "function", ["None"], ["def", "refine_fpr_tpr", "(", "fpr", ",", "tpr", ",", "all_combinations", ",", "drop_rate", "=", "0.05", ")", ":", "\n", "    ", "\"\"\"sort and check effective pair of fpr and tpr\n\n    Args:\n        fpr (List): points of fpr\n        tpr (List): points of tpr\n\n    Returns:\n        fpr_refine, tpr_refine (List, List): fpr and tpr after refine\n    \"\"\"", "\n", "assert", "len", "(", "fpr", ")", "==", "len", "(", "tpr", ")", "\n", "# sort fpr", "\n", "fpr", "=", "torch", ".", "tensor", "(", "fpr", ")", "\n", "fpr", ",", "inds", "=", "fpr", ".", "sort", "(", ")", "\n", "# change order of thresholds and tpr accordingly", "\n", "thresholds_sort", "=", "torch", ".", "tensor", "(", "all_combinations", ")", "[", "inds", "]", "\n", "tpr", "=", "torch", ".", "tensor", "(", "tpr", ")", "[", "inds", "]", "\n", "# 1. initialize", "\n", "fpr_refine", ",", "tpr_refine", "=", "[", "]", ",", "[", "]", "\n", "last_fpr", "=", "fpr", "[", "0", "]", "\n", "tpr_group", "=", "[", "tpr", "[", "0", "]", ".", "item", "(", ")", "]", "\n", "thresholds_group", "=", "[", "thresholds_sort", "[", "0", "]", ".", "tolist", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "fpr", ")", ")", ":", "\n", "        ", "if", "last_fpr", ">=", "fpr", "[", "i", "]", ":", "\n", "# 2a. accumulate same fpr", "\n", "            ", "tpr_group", ".", "append", "(", "tpr", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "thresholds_group", ".", "append", "(", "thresholds_sort", "[", "i", "]", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "# 2b. determine best tpr", "\n", "            ", "tpr_max", "=", "np", ".", "max", "(", "tpr_group", ")", "\n", "tpr_max_ind", "=", "np", ".", "argmax", "(", "tpr_group", ")", "\n", "if", "tpr_refine", "==", "[", "]", "or", "tpr_max", ">=", "tpr_refine", "[", "-", "1", "]", ":", "\n", "                ", "fpr_refine", ".", "append", "(", "last_fpr", ".", "item", "(", ")", ")", "\n", "tpr_refine", ".", "append", "(", "tpr_max", ")", "\n", "# check if fpr reach drop rate", "\n", "if", "last_fpr", "<=", "drop_rate", ":", "\n", "                    ", "thresholds_final", "=", "thresholds_group", "[", "tpr_max_ind", "]", "\n", "tpr_final", "=", "tpr_max", "\n", "", "", "tpr_group", "=", "[", "tpr", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "last_fpr", "=", "fpr", "[", "i", "]", "\n", "thresholds_group", "=", "[", "thresholds_sort", "[", "i", "]", ".", "tolist", "(", ")", "]", "\n", "# 3. handle last group", "\n", "", "", "fpr_refine", ".", "append", "(", "last_fpr", ".", "item", "(", ")", ")", "\n", "tpr_refine", ".", "append", "(", "np", ".", "max", "(", "tpr_group", ")", ")", "\n", "return", "fpr_refine", ",", "tpr_refine", ",", "thresholds_final", ",", "tpr_final", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.tpr_fpr_single_attack": [[65, 84], ["this_y.sum", "logging.info", "tqdm.tqdm", "len", "torch.zeros_like", "enumerate", "torch.logical_and().sum().item", "torch.logical_and().sum().item", "fpr.append", "tpr.append", "models.model_utils.judge_thresh", "torch.logical_or", "torch.logical_and().sum", "torch.logical_and().sum", "float", "float", "torch.logical_and", "torch.logical_and"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.judge_thresh"], ["", "def", "tpr_fpr_single_attack", "(", "\n", "a_name", ",", "min_dists", ",", "this_score", ",", "this_y", ",", "all_combinations", ",", "d_names", ")", ":", "\n", "    ", "P", "=", "this_y", ".", "sum", "(", ")", "\n", "N", "=", "len", "(", "this_y", ")", "-", "P", "\n", "logging", ".", "info", "(", "\"[{}] P={}, N={}\"", ".", "format", "(", "a_name", ",", "P", ",", "N", ")", ")", "\n", "fpr", ",", "tpr", "=", "[", "]", ",", "[", "]", "\n", "for", "thresh", "in", "tqdm", "(", "all_combinations", ")", ":", "\n", "        ", "all_rej", "=", "torch", ".", "zeros_like", "(", "this_y", ")", "\n", "for", "idx", ",", "d_name", "in", "enumerate", "(", "d_names", ")", ":", "\n", "            ", "this", "=", "judge_thresh", "(", "this_score", "[", "d_name", "]", ",", "thresh", "[", "idx", "]", ",", "\n", "min_dists", "[", "d_name", "]", ")", "\n", "all_rej", "=", "torch", ".", "logical_or", "(", "all_rej", ",", "1", "-", "this", ")", "\n", "# check fpr", "\n", "", "FP", "=", "torch", ".", "logical_and", "(", "this_y", "==", "0", ",", "all_rej", "==", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "# check tpr", "\n", "TP", "=", "torch", ".", "logical_and", "(", "this_y", "==", "1", ",", "all_rej", "==", "1", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "fpr", ".", "append", "(", "FP", "/", "float", "(", "N", ")", ")", "\n", "tpr", ".", "append", "(", "TP", "/", "float", "(", "P", ")", ")", "\n", "", "return", "fpr", ",", "tpr", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.tpr_fpr_process": [[86, 96], ["logging.info", "roc_utils.tpr_fpr_single_attack", "roc_utils.refine_fpr_tpr"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.tpr_fpr_single_attack", "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.refine_fpr_tpr"], ["", "def", "tpr_fpr_process", "(", "a_name", ",", "min_dists", ",", "this_score", ",", "this_y", ",", "all_combinations", ",", "\n", "d_names", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"[{}] Start testing\"", ".", "format", "(", "a_name", ")", ")", "\n", "fpr", ",", "tpr", "=", "tpr_fpr_single_attack", "(", "\n", "a_name", ",", "min_dists", ",", "this_score", ",", "this_y", ",", "all_combinations", ",", "d_names", ")", "\n", "# refine tpr and fpr", "\n", "fpr", ",", "tpr", ",", "final_thresh", ",", "tpr_final", "=", "refine_fpr_tpr", "(", "\n", "fpr", ",", "tpr", ",", "all_combinations", ")", "\n", "return", "{", "a_name", ":", "{", "\"fpr\"", ":", "fpr", ",", "\"tpr\"", ":", "tpr", ",", "\"final_thresh\"", ":", "final_thresh", ",", "\n", "\"tpr_final\"", ":", "tpr_final", "}", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.plot_roc": [[98, 187], ["list", "range", "logging.info", "multiprocessing.Pool", "score.keys", "enumerate", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "thresholds.keys", "roc_utils.plot_roc.merge"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "plot_roc", "(", "score", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ",", "\n", "y", ":", "Dict", "[", "str", ",", "torch", ".", "LongTensor", "]", ",", "\n", "thresholds", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "model", ":", "ContraNetDict", ",", "\n", "save_name", ":", "str", ")", ":", "\n", "    ", "\"\"\"plot roc curve.\n    expect all clean samples can be classified correctly;\n    expect all AE samples can attack successfully.\n\n    Args:\n        score (Dict[attack, Dict[d_name, score]]):\n            dict of scores from each detector\n        y (Dict[attack, torch.LongTensor]):\n            1 for p/real AE sample; 0 for n/real clean sample\n        thresholds (Dict[d_name, torch.Tensor]):\n            dict of thresholds to each detecor\n        model (ContraNetDict): detection dict model\n        save_name (str): file to save\n    \"\"\"", "\n", "def", "merge", "(", "listA", ",", "listB", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "i", "in", "listA", ":", "\n", "            ", "for", "j", "in", "listB", ":", "\n", "                ", "if", "isinstance", "(", "i", ",", "list", ")", ":", "\n", "                    ", "results", ".", "append", "(", "i", "+", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                    ", "results", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "", "return", "results", "\n", "\n", "# get all combinations for thresholds", "\n", "", "d_names", "=", "list", "(", "thresholds", ".", "keys", "(", ")", ")", "\n", "all_combinations", "=", "[", "[", "i", "]", "for", "i", "in", "thresholds", "[", "d_names", "[", "0", "]", "]", ".", "tolist", "(", ")", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "d_names", ")", "-", "1", ")", ":", "\n", "        ", "all_combinations", "=", "merge", "(", "\n", "all_combinations", ",", "thresholds", "[", "d_names", "[", "idx", "+", "1", "]", "]", ".", "tolist", "(", ")", ")", "\n", "", "logging", ".", "info", "(", "\"Total {} combinations to test\"", ".", "format", "(", "len", "(", "all_combinations", ")", ")", ")", "\n", "# test for each attack", "\n", "min_dists", "=", "{", "d_n", ":", "model", ".", "detector", "[", "d_n", "]", ".", "min_distance", "for", "d_n", "in", "d_names", "}", "\n", "all_auc", ",", "final_thresholds", "=", "[", "]", ",", "[", "]", "\n", "pool", "=", "mp", ".", "Pool", "(", "6", ")", "\n", "procs", "=", "[", "]", "\n", "results", "=", "{", "}", "\n", "for", "attack", "in", "score", ".", "keys", "(", ")", ":", "\n", "        ", "this_score", "=", "score", "[", "attack", "]", "\n", "this_y", "=", "y", "[", "attack", "]", "\n", "if", "_MULTI_PROCESS", ":", "\n", "            ", "procs", ".", "append", "(", "pool", ".", "apply_async", "(", "\n", "tpr_fpr_process", ",", "\n", "args", "=", "(", "attack", ",", "min_dists", ",", "this_score", ",", "\n", "this_y", ",", "all_combinations", ",", "d_names", ")", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "this_res", "=", "tpr_fpr_process", "(", "attack", ",", "min_dists", ",", "this_score", ",", "\n", "this_y", ",", "all_combinations", ",", "d_names", ")", "\n", "results", ".", "update", "(", "this_res", ")", "\n", "", "", "if", "_MULTI_PROCESS", ":", "\n", "        ", "for", "proc", "in", "procs", ":", "\n", "            ", "results", ".", "update", "(", "proc", ".", "get", "(", ")", ")", "\n", "# set random color before draw", "\n", "", "", "if", "len", "(", "score", ".", "keys", "(", ")", ")", ">", "10", ":", "\n", "        ", "colormap", "=", "plt", ".", "cm", ".", "nipy_spectral", "# nipy_spectral, Set1, Paired", "\n", "", "else", ":", "\n", "        ", "colormap", "=", "plt", ".", "get_cmap", "(", "\"tab10\"", ")", "# defualt color", "\n", "", "for", "idx", ",", "attack", "in", "enumerate", "(", "score", ".", "keys", "(", ")", ")", ":", "\n", "        ", "tpr", "=", "results", "[", "attack", "]", "[", "\"tpr\"", "]", "\n", "fpr", "=", "results", "[", "attack", "]", "[", "\"fpr\"", "]", "\n", "tpr_final", "=", "results", "[", "attack", "]", "[", "\"tpr_final\"", "]", "\n", "final_thresh", "=", "results", "[", "attack", "]", "[", "\"final_thresh\"", "]", "\n", "logging", ".", "info", "(", "\"[{}] thresh at drop rate: {}, tpr={:.4f}\"", ".", "format", "(", "\n", "attack", ",", "final_thresh", ",", "tpr_final", ")", ")", "\n", "logging", ".", "info", "(", "\"[{}] {} points after refine\"", ".", "format", "(", "attack", ",", "len", "(", "fpr", ")", ")", ")", "\n", "roc_auc", "=", "metrics", ".", "auc", "(", "fpr", ",", "tpr", ")", "\n", "all_auc", ".", "append", "(", "roc_auc", ")", "\n", "final_thresholds", "+=", "final_thresh", "\n", "logging", ".", "info", "(", "\"[{}] roc_auc = {:.4f}\"", ".", "format", "(", "attack", ",", "roc_auc", ")", ")", "\n", "logging", ".", "info", "(", "\"[{}] Done\"", ".", "format", "(", "attack", ")", ")", "\n", "color", "=", "colormap", "(", "idx", "/", "len", "(", "score", ".", "keys", "(", ")", ")", ")", "if", "len", "(", "score", ".", "keys", "(", ")", ")", ">", "10", "else", "colormap", "(", "idx", ")", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "label", "=", "\"{} auc={:.4f}\"", ".", "format", "(", "\n", "attack", ",", "roc_auc", ")", ",", "color", "=", "color", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'True Positive Rate'", ")", "\n", "plt", ".", "xlabel", "(", "'False Positive Rate'", ")", "\n", "plt", ".", "xlim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "title", "(", "os", ".", "path", ".", "basename", "(", "save_name", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "save_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "all_auc", ",", "final_thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.collect_clean": [[189, 207], ["enumerate", "torch.Tensor", "img.cuda.cuda", "classId.cuda.cuda", "fmodel().argmax", "torch.where", "model", "model.detector.keys", "len", "torch.cat", "fmodel", "score_dict_temp[].cpu"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "collect_clean", "(", "data_loader", ",", "fmodel", ",", "model", ":", "ContraNetDict", ")", ":", "\n", "    ", "score_dict", "=", "{", "key", ":", "torch", ".", "Tensor", "(", ")", "for", "key", "in", "model", ".", "detector", ".", "keys", "(", ")", "}", "\n", "for", "idx", ",", "(", "img", ",", "classId", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "cls_pred", "=", "fmodel", "(", "img", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "cls_cor", "=", "(", "cls_pred", "==", "classId", ")", ".", "byte", "(", ")", ".", "cpu", "(", ")", "\n", "filtered_idx", "=", "torch", ".", "where", "(", "cls_cor", ")", "\n", "# restrict only to those correctly classified sample.", "\n", "if", "len", "(", "filtered_idx", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "score_dict_temp", "=", "model", "(", "img", "[", "filtered_idx", "]", ")", "\n", "for", "key", "in", "score_dict", ":", "\n", "            ", "score_dict", "[", "key", "]", "=", "torch", ".", "cat", "(", "\n", "[", "score_dict", "[", "key", "]", ",", "score_dict_temp", "[", "key", "]", ".", "cpu", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "if", "_DEBUG", "and", "idx", ">", "5", ":", "\n", "            ", "break", "\n", "", "", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.collect_sample": [[209, 237], ["zip", "all_sample[].keys", "enumerate", "img.cuda.cuda", "classId.cuda.cuda", "fmodel().argmax", "enumerate", "torch.Tensor", "[].cuda", "fmodel().argmax", "torch.where", "model", "model.detector.keys", "fmodel", "torch.logical_and", "len", "torch.cat", "fmodel", "score_dict_temp[].cpu"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "collect_sample", "(", "all_sample", ",", "model", ",", "fmodel", ",", "attack", ")", ":", "\n", "    ", "loader", "=", "zip", "(", "all_sample", "[", "\"x_ori\"", "]", ",", "all_sample", "[", "\"y_ori\"", "]", ")", "\n", "parameters", "=", "all_sample", "[", "\"x_adv\"", "]", ".", "keys", "(", ")", "\n", "score_dict", "=", "{", "\"{}_{:.2f}\"", ".", "format", "(", "attack", ",", "param", ")", ":", "{", "\n", "key", ":", "torch", ".", "Tensor", "(", ")", "for", "key", "in", "model", ".", "detector", ".", "keys", "(", ")", "\n", "}", "for", "param", "in", "parameters", "}", "\n", "for", "idx", ",", "(", "img", ",", "classId", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "cls_pred", "=", "fmodel", "(", "img", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "cls_cor", "=", "(", "cls_pred", "==", "classId", ")", ".", "byte", "(", ")", ".", "cpu", "(", ")", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "parameters", ")", ":", "\n", "            ", "param_key", "=", "\"{}_{:.2f}\"", ".", "format", "(", "attack", ",", "param", ")", "\n", "x_adv", "=", "all_sample", "[", "\"x_adv\"", "]", "[", "param", "]", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "y_adv_cls", "=", "fmodel", "(", "x_adv", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "attack_suss", "=", "(", "y_adv_cls", "!=", "classId", ")", ".", "cpu", "(", ")", "\n", "filtered_idx", "=", "torch", ".", "where", "(", "torch", ".", "logical_and", "(", "cls_cor", ",", "attack_suss", ")", ")", "\n", "# restrict only to those suss attack samples", "\n", "if", "len", "(", "filtered_idx", "[", "0", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "score_dict_temp", "=", "model", "(", "x_adv", "[", "filtered_idx", "]", ")", "\n", "for", "key", "in", "score_dict_temp", ":", "\n", "                ", "score_dict", "[", "param_key", "]", "[", "key", "]", "=", "torch", ".", "cat", "(", "\n", "[", "score_dict", "[", "param_key", "]", "[", "key", "]", ",", "score_dict_temp", "[", "key", "]", ".", "cpu", "(", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "", "", "if", "_DEBUG", "and", "idx", ">", "5", ":", "\n", "            ", "break", "\n", "", "", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.collect_sample_aa": [[239, 269], ["enumerate", "img.cuda.cuda", "classId.cuda.cuda", "x_adv[].cuda", "classifier().argmax", "classifier().argmax", "torch.where", "model", "torch.Tensor", "torch.logical_and", "len", "torch.cat", "model.detector.keys", "classifier", "classifier", "score_dict_temp[].cpu"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "collect_sample_aa", "(", "data_loader", ",", "x_adv", ",", "model", ",", "classifier", ",", "batch_size", ",", "\n", "model_name", ")", ":", "\n", "    ", "score_dict", "=", "{", "model_name", ":", "{", "\n", "key", ":", "torch", ".", "Tensor", "(", ")", "for", "key", "in", "model", ".", "detector", ".", "keys", "(", ")", "}", "}", "\n", "total_number", "=", "0", "\n", "for", "idx", ",", "(", "img", ",", "classId", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "x_adv_img", "=", "x_adv", "[", "total_number", ":", "total_number", "+", "batch_size", "]", ".", "cuda", "(", ")", "\n", "total_number", "+=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "cls_pred", "=", "classifier", "(", "img", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "cls_cor", "=", "(", "cls_pred", "==", "classId", ")", ".", "byte", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "y_adv_cls", "=", "classifier", "(", "x_adv_img", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "attack_suss", "=", "(", "y_adv_cls", "!=", "classId", ")", ".", "cpu", "(", ")", "\n", "filtered_idx", "=", "torch", ".", "where", "(", "torch", ".", "logical_and", "(", "cls_cor", ",", "attack_suss", ")", ")", "\n", "# restrict only to those suss attack samples", "\n", "if", "len", "(", "filtered_idx", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "score_dict_temp", "=", "model", "(", "x_adv_img", "[", "filtered_idx", "]", ")", "\n", "for", "key", "in", "score_dict_temp", ":", "\n", "            ", "score_dict", "[", "model_name", "]", "[", "key", "]", "=", "torch", ".", "cat", "(", "\n", "[", "score_dict", "[", "model_name", "]", "[", "key", "]", ",", "score_dict_temp", "[", "key", "]", ".", "cpu", "(", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "", "if", "_DEBUG", "and", "idx", ">", "5", ":", "\n", "            ", "break", "\n", "", "if", "total_number", ">=", "2400", ":", "\n", "            ", "break", "\n", "", "", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.roc_utils.update_with_clean": [[271, 284], ["torch.cat", "list", "torch.cat", "score_dict[].keys", "torch.ones", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "update_with_clean", "(", "score_dict", ",", "clean_dict", ")", ":", "\n", "    ", "y_dict", "=", "{", "}", "\n", "for", "attack", "in", "score_dict", ":", "\n", "        ", "key", "=", "list", "(", "score_dict", "[", "attack", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "y_dict", "[", "attack", "]", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "ones", "(", "score_dict", "[", "attack", "]", "[", "key", "]", ".", "shape", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "zeros", "(", "clean_dict", "[", "key", "]", ".", "shape", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "]", ",", "dim", "=", "0", ")", "\n", "for", "detector", "in", "score_dict", "[", "attack", "]", ":", "\n", "            ", "score_dict", "[", "attack", "]", "[", "detector", "]", "=", "torch", ".", "cat", "(", "[", "\n", "score_dict", "[", "attack", "]", "[", "detector", "]", ",", "clean_dict", "[", "detector", "]", "\n", "]", ",", "dim", "=", "0", ")", "\n", "", "", "return", "score_dict", ",", "y_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whiteboxDF.attack_sample": [[26, 32], ["zip", "misc.attack_helper", "[].cuda", "all_sample[].keys"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["def", "attack_sample", "(", "all_sample", ",", "model", ",", "fmodel", ",", "prefix", ")", ":", "\n", "    ", "def", "sample_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "return", "all_sample", "[", "\"x_adv\"", "]", "[", "eps", "]", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "", "loader", "=", "zip", "(", "all_sample", "[", "\"x_ori\"", "]", ",", "all_sample", "[", "\"y_ori\"", "]", ")", "\n", "utils", ".", "attack_helper", "(", "loader", ",", "model", ",", "fmodel", ",", "all_sample", "[", "\"x_adv\"", "]", ".", "keys", "(", ")", ",", "\n", "sample_adv", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.tools.gen_whiteboxDF.attack_gen": [[34, 42], ["misc.attack_helper", "attack", "attack."], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.attack"], ["", "def", "attack_gen", "(", "test_loader", ",", "fmodel", ",", "model", ",", "save_dir", ",", "prefix", ",", "name", ",", "\n", "epsilon_list", ",", "params", ",", "attack", ")", ":", "\n", "    ", "def", "gen_adv", "(", "eps", ",", "idx", ",", "img", ",", "classId", ")", ":", "\n", "        ", "adversary", "=", "attack", "(", "overshoot", "=", "eps", ",", "**", "params", ")", "\n", "_", ",", "x_adv", ",", "_", "=", "adversary", "(", "fmodel", ",", "img", ",", "classId", ",", "epsilons", "=", "None", ")", "\n", "return", "x_adv", "\n", "", "utils", ".", "attack_helper", "(", "test_loader", ",", "model", ",", "fmodel", ",", "epsilon_list", ",", "gen_adv", ",", "\n", "prefix", ",", "save_dir", ",", "name", ",", "save", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.preGenWrapper.PreGen.__init__": [[11, 28], ["baseWrapper.BaseWrapper.__init__", "eval", "warnings.warn", "list", "preGenWrapper.PreGen.batch", "torch.load", "list", "range", "preGenWrapper.PreGen.AEsample.keys", "len"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.preGenWrapper.PreGen.batch", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "criterion", ",", "cls_norm", ",", "load_paths", ":", "List", ",", "batch_size", ",", "\n", "targeted", "=", "False", ",", "x_val_min", "=", "0", ",", "x_val_max", "=", "1", ",", "testAttack", "=", "\"Pgd\"", ")", ":", "\n", "        ", "super", "(", "PreGen", ",", "self", ")", ".", "__init__", "(", "net", ",", "criterion", "=", "None", ",", "cls_norm", "=", "cls_norm", ",", "\n", "targeted", "=", "targeted", ",", "x_val_min", "=", "x_val_min", ",", "\n", "x_val_max", "=", "x_val_max", ")", "\n", "self", ".", "testAttack", "=", "eval", "(", "\n", "\"{}(net, criterion, cls_norm)\"", ".", "format", "(", "testAttack", ")", ")", "\n", "self", ".", "AEsample", "=", "{", "load_path", ":", "torch", ".", "load", "(", "\n", "load_path", ")", "for", "load_path", "in", "load_paths", "}", "\n", "warnings", ".", "warn", "(", "\"AE's are not aligned with input x when training.\"", ")", "\n", "temp_key", "=", "list", "(", "self", ".", "AEsample", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "index", "=", "list", "(", "range", "(", "len", "(", "self", ".", "AEsample", "[", "temp_key", "]", "[", "\"x_adv\"", "]", ")", ")", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "AEIter", "=", "self", ".", "batch", "(", ")", "\n", "self", ".", "suss_stat", "=", "{", "load_path", ":", "{", "\"suss\"", ":", "0", ",", "\"total\"", ":", "0", "}", "\n", "for", "load_path", "in", "load_paths", "}", "\n", "self", ".", "all_keys", "=", "load_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.preGenWrapper.PreGen.batch": [[29, 36], ["random.shuffle", "len", "range"], "methods", ["None"], ["", "def", "batch", "(", "self", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "index", ")", "\n", "l", "=", "len", "(", "self", ".", "index", ")", "\n", "n", "=", "self", ".", "batch_size", "\n", "for", "ndx", "in", "range", "(", "0", ",", "l", ",", "n", ")", ":", "\n", "            ", "this_batch", "=", "self", ".", "index", "[", "ndx", ":", "(", "ndx", "+", "n", ")", "]", "\n", "yield", "this_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.preGenWrapper.PreGen.attack": [[37, 54], ["random.choice", "[].to", "[].to", "next", "torch.no_grad", "preGenWrapper.PreGen.net", "preGenWrapper.PreGen.max", "[].to.detach", "cls_pred.detach", "preGenWrapper.PreGen.batch", "next", "preGenWrapper.PreGen.cls_norm"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.preGenWrapper.PreGen.batch"], ["", "", "def", "attack", "(", "self", ",", "device", ")", ":", "\n", "# load AE sample and give cls_pred", "\n", "        ", "try", ":", "\n", "            ", "batch_idx", "=", "next", "(", "self", ".", "AEIter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "AEIter", "=", "self", ".", "batch", "(", ")", "\n", "batch_idx", "=", "next", "(", "self", ".", "AEIter", ")", "\n", "", "key", "=", "random", ".", "choice", "(", "self", ".", "all_keys", ")", "\n", "x_adv", "=", "self", ".", "AEsample", "[", "key", "]", "[", "\"x_adv\"", "]", "[", "batch_idx", "]", ".", "to", "(", "device", ")", "\n", "label", "=", "self", ".", "AEsample", "[", "key", "]", "[", "\"y_ori\"", "]", "[", "batch_idx", "]", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "h_adv", "=", "self", ".", "net", "(", "self", ".", "cls_norm", "(", "x_adv", ")", ")", "\n", "_", ",", "cls_pred", "=", "h_adv", ".", "max", "(", "1", ")", "\n", "suss", "=", "(", "cls_pred", "!=", "label", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "suss_stat", "[", "key", "]", "[", "\"suss\"", "]", "+=", "suss", "\n", "self", ".", "suss_stat", "[", "key", "]", "[", "\"total\"", "]", "+=", "x_adv", ".", "shape", "[", "0", "]", "\n", "", "return", "x_adv", ".", "detach", "(", ")", ",", "cls_pred", ".", "detach", "(", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.preGenWrapper.PreGen.adv_by_suss": [[55, 64], ["preGenWrapper.PreGen.testAttack.adv_by_suss", "preGenWrapper.PreGen.attack", "torch.where", "torch.where"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.baseWrapper.BaseWrapper.adv_by_suss", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.attack", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "def", "adv_by_suss", "(", "self", ",", "x", ",", "y", ",", "device", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "not", "training", ":", "\n", "            ", "return", "self", ".", "testAttack", ".", "adv_by_suss", "(", "x", ",", "y", ",", "device", ",", "training", ")", "\n", "", "else", ":", "\n", "            ", "x_adv", ",", "cls_pred", ",", "label", "=", "self", ".", "attack", "(", "device", ")", "\n", "fail_mask", "=", "torch", ".", "where", "(", "cls_pred", "==", "label", ")", "\n", "suss_mask", "=", "torch", ".", "where", "(", "cls_pred", "!=", "label", ")", "\n", "return", "x_adv", "[", "suss_mask", "]", ",", "cls_pred", "[", "suss_mask", "]", ",", "label", "[", "suss_mask", "]", ",", "x_adv", "[", "fail_mask", "]", ",", "label", "[", "fail_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.preGenWrapper.PreGen.print_stat": [[65, 72], ["print"], "methods", ["None"], ["", "", "def", "print_stat", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "suss_stat", ":", "\n", "            ", "suss", "=", "self", ".", "suss_stat", "[", "key", "]", "[", "\"suss\"", "]", "\n", "total", "=", "self", ".", "suss_stat", "[", "key", "]", "[", "\"total\"", "]", "\n", "if", "total", ">", "0", ":", "\n", "                ", "print", "(", "\"on file={}: total {:d}, suss {:d}, rate {:.2f}\"", ".", "\n", "format", "(", "key", ",", "total", ",", "suss", ",", "suss", "/", "total", "*", "100", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.__init__": [[20, 37], ["ContraNetDictBase.ContraNetDictBase.__init__", "model_utils.check_params", "GANv2.big_resnet.Discriminator", "ContraNet2D.ContraNet2D.resume_weights"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.check_params", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.resume_weights"], ["def", "__init__", "(", "self", ",", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "None", ",", "model_norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "ContraNet2D", ",", "self", ")", ".", "__init__", "(", "\n", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "cls_norm", ",", "model_norm", "=", "model_norm", ")", "\n", "cfgs_flag", "=", "cfgs_flag_common", "\n", "assert", "check_params", "(", "cfgs", ",", "pars", ",", "pars_flag", "=", "pars_flag", ",", "\n", "cfgs_flag", "=", "cfgs_flag", ")", "\n", "assert", "cfgs", ".", "num_classes", "==", "pars", ".", "class_num", "\n", "self", ".", "dis", "=", "Discriminator", "(", "\n", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "\n", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "\n", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "cfgs", ".", "normalize_embed", ",", "\n", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", "\n", "\n", "self", ".", "class_num", "=", "pars", ".", "class_num", "\n", "self", ".", "resume_weights", "(", "cfgs", ")", "\n", "self", ".", "_thresh", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.judge_dis": [[38, 42], ["model_utils.judge_thresh"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.judge_thresh"], ["", "def", "judge_dis", "(", "self", ",", "dis_out", ")", ":", "\n", "        ", "\"\"\"True for pass, False for rejection.\n        \"\"\"", "\n", "return", "judge_thresh", "(", "dis_out", ",", "self", ".", "_thresh", ",", "self", ".", "min_distance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.forward_dis": [[43, 51], ["enumerate", "torch.stack", "ContraNet2D.ContraNet2D.dis", "ContraNet2D.ContraNet2D.judge_dis", "torch.stack.append", "pred_cls.item"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.judge_dis"], ["", "def", "forward_dis", "(", "self", ",", "img_gen_dict", ",", "cls_pred", ")", ":", "\n", "        ", "img_gen_in", "=", "[", "]", "\n", "for", "idx", ",", "pred_cls", "in", "enumerate", "(", "cls_pred", ")", ":", "\n", "            ", "img_gen_in", ".", "append", "(", "img_gen_dict", "[", "pred_cls", ".", "item", "(", ")", "]", "[", "idx", "]", ")", "\n", "", "img_gen_in", "=", "torch", ".", "stack", "(", "img_gen_in", ")", "\n", "dis_out", "=", "self", ".", "dis", "(", "img_gen_in", ",", "cls_pred", ")", "\n", "dis_pred", "=", "self", ".", "judge_dis", "(", "dis_out", ")", "\n", "return", "dis_out", ",", "dis_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.forward": [[52, 115], ["ContraNet2D.ContraNet2D.forward_classifier", "ContraNet2D.ContraNet2D.model_norm", "ContraNet2D.ContraNet2D.cGAN", "ContraNet2D.ContraNet2D.forward_dis", "torch.zeros", "enumerate", "logging.info", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack.append", "torch.zeros.sum().item", "img_gen_dict[].cpu", "cls_pred.cpu", "torch.stack.cpu", "torch.zeros.cpu", "im_gen_dict.pop", "torch.stack.append", "cls_pred[].item", "ContraNet2D.ContraNet2D.check_most", "ContraNet2D.ContraNet2D.check_most", "torch.zeros.sum"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictBase.ContraNetDictBase.forward_classifier", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.forward_dis", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.check_most", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.check_most"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            torch.Tensor: pred labels of size [N].\n        \"\"\"", "\n", "logits_cls", ",", "cls_pred", "=", "self", ".", "forward_classifier", "(", "img", ")", "\n", "\n", "img_model", "=", "self", ".", "model_norm", "(", "img", ")", "\n", "img_gen_dict", "=", "self", ".", "cGAN", "(", "img_model", ")", "\n", "# img_gen_in: generated img for predictied class, size: B x C x ...", "\n", "dis_out", ",", "dis_pred", "=", "self", ".", "forward_dis", "(", "img_gen_dict", ",", "cls_pred", ")", "\n", "if", "self", ".", "_only_judge", ":", "\n", "            ", "return", "dis_out", "\n", "\n", "", "rej", "=", "torch", ".", "zeros", "(", "img", ".", "shape", "[", "0", "]", ")", "\n", "final_logits", "=", "[", "]", "\n", "dis_out_refine", "=", "{", "}", "\n", "if", "self", ".", "return_fig", ":", "\n", "            ", "dis_out_like", "=", "torch", ".", "zeros", "(", "dis_pred", ".", "shape", "[", "0", "]", ",", "2", ")", "\n", "# we only need [idx][:, 1].argmax() for dis_out_refine", "\n", "dis_out_refine", "=", "torch", ".", "zeros", "(", "dis_pred", ".", "shape", "[", "0", "]", ",", "self", ".", "class_num", ",", "2", ")", "\n", "", "for", "idx", ",", "dis_this", "in", "enumerate", "(", "dis_pred", ")", ":", "# im is a single image now.", "\n", "            ", "if", "dis_this", ":", "\n", "                ", "final_logits", ".", "append", "(", "logits_cls", "[", "idx", "]", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "                    ", "dis_out_like", "[", "idx", "]", "[", "1", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                ", "rej", "[", "idx", "]", "=", "1", "\n", "if", "not", "self", ".", "_only_rej", ":", "\n", "                    ", "im_gen_dict", "=", "{", "key", ":", "img_gen_dict", "[", "key", "]", "[", "idx", "]", "\n", "for", "key", "in", "img_gen_dict", "}", "\n", "im_gen_dict", ".", "pop", "(", "cls_pred", "[", "idx", "]", ".", "item", "(", ")", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "                        ", "this_logits", ",", "this_dis_label", "=", "self", ".", "check_most", "(", "\n", "im_gen_dict", ",", "img_model", ".", "device", ")", "\n", "dis_out_refine", "[", "idx", "]", "[", "this_dis_label", ",", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "this_logits", "=", "self", ".", "check_most", "(", "\n", "im_gen_dict", ",", "img_model", ".", "device", ")", "\n", "", "final_logits", ".", "append", "(", "this_logits", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "                        ", "dis_out_like", "[", "idx", "]", "[", "0", "]", "=", "1", "\n", "", "", "", "", "if", "not", "self", ".", "_only_rej", ":", "\n", "            ", "final_logits", "=", "torch", ".", "stack", "(", "final_logits", ")", "\n", "", "logging", ".", "info", "(", "\"[ContraNet2D] Reject {} out of {} sampels\"", ".", "format", "(", "\n", "rej", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "img", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "            ", "for", "key", "in", "img_gen_dict", ":", "\n", "                ", "img_gen_dict", "[", "key", "]", "=", "img_gen_dict", "[", "key", "]", ".", "cpu", "(", ")", "\n", "", "dic", "=", "{", "\n", "\"img_gen_dict\"", ":", "img_gen_dict", ",", "\n", "\"cls_pred\"", ":", "cls_pred", ".", "cpu", "(", ")", ",", "\n", "\"final_logits\"", ":", "final_logits", ".", "cpu", "(", ")", ",", "\n", "\"mlp_out\"", ":", "dis_out_like", ".", "cpu", "(", ")", ",", "\n", "\"mlp_out_refine\"", ":", "dis_out_refine", ",", "\n", "}", "\n", "return", "dic", "\n", "", "if", "self", ".", "ddebug", ":", "\n", "            ", "return", "final_logits", ",", "rej", ",", "logits_cls", "\n", "", "elif", "self", ".", "debug", ":", "\n", "            ", "return", "final_logits", ",", "rej", "\n", "", "else", ":", "\n", "            ", "return", "final_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.check_most": [[116, 142], ["torch.stack", "torch.LongTensor().to", "ContraNet2D.ContraNet2D.dis", "ContraNet2D.ContraNet2D.cls_norm", "ContraNet2D.ContraNet2D.classifier", "torch.stack.append", "torch.LongTensor().to.append", "ContraNet2D.ContraNet2D.model_denorm", "ContraNet2D.ContraNet2D.squeeze", "torch.LongTensor", "torch.argmax().item", "im_gen_dict[].unsqueeze", "ContraNet2D.ContraNet2D.squeeze", "torch.argmax", "pred_label.item"], "methods", ["None"], ["", "", "def", "check_most", "(", "self", ",", "im_gen_dict", ",", "device", ")", ":", "\n", "        ", "\"\"\"Go through all labels and return the most possible one.\n\n        Args:\n            im_gen_dict (torch.Tensor): generated image\n\n        Returns:\n            torch.Tensor: pred label of shape [1]\n        \"\"\"", "\n", "im_gen_in", ",", "label_in", "=", "[", "]", ",", "[", "]", "\n", "for", "label", "in", "im_gen_dict", ":", "\n", "            ", "im_gen_in", ".", "append", "(", "im_gen_dict", "[", "label", "]", ")", "\n", "label_in", ".", "append", "(", "label", ")", "\n", "", "im_gen_in", "=", "torch", ".", "stack", "(", "im_gen_in", ")", "\n", "label_in", "=", "torch", ".", "LongTensor", "(", "label_in", ")", ".", "to", "(", "device", ")", "\n", "# all data for each label except the rejection label", "\n", "dis_out", "=", "self", ".", "dis", "(", "im_gen_in", ",", "label_in", ")", "# size class_num x 2", "\n", "pred_label", "=", "label_in", "[", "torch", ".", "argmax", "(", "dis_out", ")", ".", "item", "(", ")", "]", "\n", "\n", "img_cls", "=", "self", ".", "cls_norm", "(", "self", ".", "model_denorm", "(", "\n", "im_gen_dict", "[", "pred_label", ".", "item", "(", ")", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "logits_cls", "=", "self", ".", "classifier", "(", "img_cls", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "            ", "return", "logits_cls", ".", "squeeze", "(", ")", ",", "pred_label", "\n", "", "else", ":", "\n", "            ", "return", "logits_cls", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.get_judge_results": [[143, 154], ["torch.Tensor", "torch.no_grad", "img.cuda.cuda.cuda", "classId.cuda.cuda.cuda", "ContraNet2D.ContraNet2D.model_norm", "ContraNet2D.ContraNet2D.cGAN", "ContraNet2D.ContraNet2D.forward_dis", "torch.cat", "dis_out.cpu"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.forward_dis"], ["", "", "def", "get_judge_results", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "dis_out_all", "=", "torch", ".", "Tensor", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "img", ",", "classId", "in", "val_loader", ":", "\n", "                ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "img_model", "=", "self", ".", "model_norm", "(", "img", ")", "\n", "img_gen_dict", "=", "self", ".", "cGAN", "(", "img_model", ")", "\n", "dis_out", ",", "_", "=", "self", ".", "forward_dis", "(", "img_gen_dict", ",", "classId", ")", "\n", "dis_out_all", "=", "torch", ".", "cat", "(", "[", "dis_out_all", ",", "dis_out", ".", "cpu", "(", ")", "]", ")", "\n", "", "", "return", "dis_out_all", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.get_thresh": [[155, 166], ["ContraNet2D.ContraNet2D.get_judge_results", "ContraNet2D.ContraNet2D.sort_results", "dis_out_all_sort[].item", "warnings.warn", "int", "len"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_judge_results", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.sort_results"], ["", "def", "get_thresh", "(", "self", ",", "val_loader", ",", "drop_rate", "=", "0.05", ",", "return_list", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_thresh", "!=", "0.", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"You may have set thresh before calling this. get_thresh will use the given thresh\"", ")", "\n", "", "dis_out_all", "=", "self", ".", "get_judge_results", "(", "val_loader", ")", "\n", "dis_out_all_sort", ",", "_", "=", "self", ".", "sort_results", "(", "dis_out_all", ")", "# pos: min -> max", "\n", "thresh", "=", "dis_out_all_sort", "[", "int", "(", "len", "(", "dis_out_all_sort", ")", "*", "drop_rate", ")", "]", ".", "item", "(", ")", "\n", "if", "return_list", ":", "\n", "            ", "return", "thresh", ",", "dis_out_all", "\n", "", "else", ":", "\n", "            ", "return", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.resume_weights": [[167, 173], ["ContraNet2D.ContraNet2D.cGAN.resume_weights", "torch.load", "ContraNet2D.ContraNet2D.dis.load_state_dict", "logging.info"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.resume_weights"], ["", "", "def", "resume_weights", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "self", ".", "cGAN", ".", "resume_weights", "(", "cfgs", ",", "verbal", "=", "\"[ContraNet2D] \"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfgs", ".", "D_path", ")", "\n", "self", ".", "dis", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "logging", ".", "info", "(", "\"[ContraNet2D] Loaded discriminator from: {}\"", ".", "format", "(", "\n", "cfgs", ".", "D_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2D.ContraNet2D.load_classifier": [[174, 180], ["torch.load", "ContraNet2D.ContraNet2D.classifier.load_state_dict", "logging.info"], "methods", ["None"], ["", "def", "load_classifier", "(", "self", ",", "path", ",", "key", "=", "'net'", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "key", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "checkpoint", "[", "key", "]", "\n", "", "self", ".", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "logging", ".", "info", "(", "\"[ContraNet2D] Loaded classifier from: {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.__init__": [[18, 40], ["ContraNetDictBase.ContraNetDictBase.__init__", "model_utils.check_params", "MobileNetV2.MobileNetV2.MobileNetV2", "MobileNetV2.MobileNetV2.MobileNetV2", "ContraNet2.ContraNet2.oridml.only_features", "ContraNet2.ContraNet2.gendml.only_features", "ContraNet2.ContraNet2.resume_weights", "MobileNetV2.MobileNetV2.MLP", "MobileNetV2.MobileNetV2.MLP"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.check_params", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.only_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.only_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.resume_weights"], ["def", "__init__", "(", "self", ",", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "None", ",", "model_norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "ContraNet2", ",", "self", ")", ".", "__init__", "(", "\n", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "cls_norm", ",", "model_norm", "=", "model_norm", ")", "\n", "assert", "check_params", "(", "cfgs", ",", "pars", ")", "\n", "assert", "cfgs", ".", "num_classes", "==", "pars", ".", "class_num", "\n", "self", ".", "oridml", "=", "MobileNetV2", "(", "n_class", "=", "pars", ".", "feature_num", ")", "\n", "self", ".", "gendml", "=", "MobileNetV2", "(", "n_class", "=", "pars", ".", "feature_num", ")", "\n", "self", ".", "oridml", ".", "only_features", "(", ")", "\n", "self", ".", "gendml", ".", "only_features", "(", ")", "\n", "self", ".", "dml_lastchannel", "=", "self", ".", "oridml", ".", "last_channel", "\n", "if", "pars", ".", "feature_m", ":", "\n", "            ", "self", ".", "combine", "=", "sub", "\n", "self", ".", "mlpModel", "=", "MLP", "(", "\n", "self", ".", "dml_lastchannel", ",", "p", "=", "0.1", ",", "class_num", "=", "pars", ".", "class_num", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlpModel", "=", "MLP", "(", "\n", "self", ".", "dml_lastchannel", "*", "2", ",", "p", "=", "0.1", ",", "\n", "class_num", "=", "pars", ".", "class_num", ")", "\n", "self", ".", "combine", "=", "concat", "\n", "", "self", ".", "class_num", "=", "pars", ".", "class_num", "\n", "self", ".", "resume_weights", "(", "cfgs", ",", "pars", ")", "\n", "self", ".", "_thresh", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.judge_mlp": [[41, 45], ["model_utils.judge_thresh"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.judge_thresh"], ["", "def", "judge_mlp", "(", "self", ",", "mlp_out", ")", ":", "\n", "        ", "\"\"\"True for pass, False for rejection.\n        \"\"\"", "\n", "return", "judge_thresh", "(", "mlp_out", ",", "self", ".", "_thresh", ",", "self", ".", "min_distance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.forward_mlp": [[46, 57], ["enumerate", "torch.stack", "ContraNet2.ContraNet2.combine", "ContraNet2.ContraNet2.mlpModel", "ContraNet2.ContraNet2.judge_mlp", "torch.stack.append", "ContraNet2.ContraNet2.oridml", "ContraNet2.ContraNet2.gendml", "pred_cls.item"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.judge_mlp"], ["", "def", "forward_mlp", "(", "self", ",", "img_model", ",", "img_gen_dict", ",", "cls_pred", ")", ":", "\n", "        ", "img_gen_in", "=", "[", "]", "\n", "for", "idx", ",", "pred_cls", "in", "enumerate", "(", "cls_pred", ")", ":", "\n", "            ", "img_gen_in", ".", "append", "(", "img_gen_dict", "[", "pred_cls", ".", "item", "(", ")", "]", "[", "idx", "]", ")", "\n", "", "img_gen_in", "=", "torch", ".", "stack", "(", "img_gen_in", ")", "\n", "pair", "=", "self", ".", "combine", "(", "\n", "self", ".", "oridml", "(", "img_model", ")", ",", "self", ".", "gendml", "(", "img_gen_in", ")", "\n", ")", "\n", "mlp_out", "=", "self", ".", "mlpModel", "(", "(", "pair", ",", "cls_pred", ")", ")", "\n", "mlp_pred", "=", "self", ".", "judge_mlp", "(", "mlp_out", "[", ":", ",", "1", "]", ")", "\n", "return", "mlp_out", ",", "mlp_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.forward": [[58, 117], ["isinstance", "ContraNet2.ContraNet2.forward_classifier", "ContraNet2.ContraNet2.model_norm", "ContraNet2.ContraNet2.cGAN", "ContraNet2.ContraNet2.forward_mlp", "torch.zeros", "enumerate", "logging.info", "torch.stack", "torch.stack.append", "torch.zeros.sum().item", "img_gen_dict[].cpu", "cls_pred.cpu", "torch.stack.cpu", "mlp_out.cpu", "torch.stack.append", "ContraNet2.ContraNet2.check_most", "this_mlp.cpu", "ContraNet2.ContraNet2.check_most", "torch.zeros.sum"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictBase.ContraNetDictBase.forward_classifier", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.forward_mlp", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.check_most", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.check_most"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            torch.Tensor: pred labels of size [N].\n        \"\"\"", "\n", "if", "isinstance", "(", "img", ",", "tuple", ")", ":", "\n", "            ", "(", "img", ",", "rej_pre", ")", "=", "img", "\n", "", "else", ":", "\n", "            ", "rej_pre", "=", "[", "False", "]", "*", "img", ".", "shape", "[", "0", "]", "\n", "", "logits_cls", ",", "cls_pred", "=", "self", ".", "forward_classifier", "(", "img", ")", "\n", "\n", "img_model", "=", "self", ".", "model_norm", "(", "img", ")", "\n", "img_gen_dict", "=", "self", ".", "cGAN", "(", "img_model", ")", "\n", "mlp_out", ",", "mlp_pred", "=", "self", ".", "forward_mlp", "(", "img_model", ",", "img_gen_dict", ",", "cls_pred", ")", "\n", "if", "self", ".", "_only_judge", ":", "\n", "            ", "return", "mlp_out", "[", ":", ",", "1", "]", "\n", "\n", "", "rej", "=", "torch", ".", "zeros", "(", "img", ".", "shape", "[", "0", "]", ")", "\n", "final_logits", "=", "[", "]", "\n", "mlp_out_refine", "=", "{", "}", "\n", "for", "idx", ",", "mlp_this", "in", "enumerate", "(", "mlp_pred", ")", ":", "# im is a single image now.", "\n", "            ", "if", "mlp_this", "==", "1", "and", "not", "rej_pre", "[", "idx", "]", ":", "\n", "                ", "final_logits", ".", "append", "(", "logits_cls", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "mlp_this", "!=", "1", ":", "\n", "                    ", "rej", "[", "idx", "]", "=", "1", "\n", "", "if", "not", "self", ".", "_only_rej", ":", "\n", "                    ", "im_gen_dict", "=", "{", "key", ":", "img_gen_dict", "[", "key", "]", "[", "idx", "]", "\n", "for", "key", "in", "img_gen_dict", "}", "\n", "if", "self", ".", "return_fig", ":", "\n", "                        ", "this_logits", ",", "this_mlp", "=", "self", ".", "check_most", "(", "\n", "img_model", "[", "idx", "]", ",", "im_gen_dict", ")", "\n", "mlp_out_refine", "[", "idx", "]", "=", "this_mlp", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "                        ", "this_logits", "=", "self", ".", "check_most", "(", "\n", "img_model", "[", "idx", "]", ",", "im_gen_dict", ")", "\n", "", "final_logits", ".", "append", "(", "this_logits", ")", "\n", "", "", "", "if", "not", "self", ".", "_only_rej", ":", "\n", "            ", "final_logits", "=", "torch", ".", "stack", "(", "final_logits", ")", "\n", "", "logging", ".", "info", "(", "\"[ContraNet2] Reject {} out of {} sampels\"", ".", "format", "(", "\n", "rej", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "img", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "            ", "for", "key", "in", "img_gen_dict", ":", "\n", "                ", "img_gen_dict", "[", "key", "]", "=", "img_gen_dict", "[", "key", "]", ".", "cpu", "(", ")", "\n", "", "dic", "=", "{", "\n", "\"img_gen_dict\"", ":", "img_gen_dict", ",", "\n", "\"cls_pred\"", ":", "cls_pred", ".", "cpu", "(", ")", ",", "\n", "\"final_logits\"", ":", "final_logits", ".", "cpu", "(", ")", ",", "\n", "\"mlp_out\"", ":", "mlp_out", ".", "cpu", "(", ")", ",", "\n", "\"mlp_out_refine\"", ":", "mlp_out_refine", ",", "\n", "}", "\n", "return", "dic", "\n", "", "if", "self", ".", "debug", "or", "self", ".", "ddebug", ":", "\n", "            ", "if", "self", ".", "ddebug", ":", "\n", "                ", "return", "final_logits", ",", "rej", ",", "logits_cls", "\n", "", "else", ":", "\n", "                ", "return", "final_logits", ",", "rej", "\n", "", "", "else", ":", "\n", "            ", "return", "final_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.check_most": [[118, 148], ["range", "torch.stack", "torch.stack", "torch.LongTensor().to", "ContraNet2.ContraNet2.combine", "ContraNet2.ContraNet2.mlpModel", "mlp_out[].max", "ContraNet2.ContraNet2.cls_norm", "ContraNet2.ContraNet2.classifier", "torch.stack.append", "torch.stack.append", "torch.LongTensor().to.append", "ContraNet2.ContraNet2.oridml", "ContraNet2.ContraNet2.gendml", "ContraNet2.ContraNet2.model_denorm", "ContraNet2.ContraNet2.squeeze", "torch.LongTensor", "im_gen_dict[].unsqueeze", "ContraNet2.ContraNet2.squeeze", "pred_label.item"], "methods", ["None"], ["", "", "def", "check_most", "(", "self", ",", "im", ",", "im_gen_dict", ")", ":", "\n", "        ", "\"\"\"Go through all labels and return the most possible one.\n\n        Args:\n            im (torch.Tensor): original image\n            im_gen_dict (torch.Tensor): generated image\n\n        Returns:\n            torch.Tensor: pred label of shape [1]\n        \"\"\"", "\n", "device", "=", "im", ".", "device", "\n", "im_in", ",", "im_gen_in", ",", "label_in", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "label", "in", "range", "(", "self", ".", "class_num", ")", ":", "\n", "            ", "im_gen_in", ".", "append", "(", "im_gen_dict", "[", "label", "]", ")", "\n", "im_in", ".", "append", "(", "im", ")", "\n", "label_in", ".", "append", "(", "label", ")", "\n", "", "im_in", "=", "torch", ".", "stack", "(", "im_in", ")", "\n", "im_gen_in", "=", "torch", ".", "stack", "(", "im_gen_in", ")", "\n", "label_in", "=", "torch", ".", "LongTensor", "(", "label_in", ")", ".", "to", "(", "device", ")", "\n", "pair", "=", "self", ".", "combine", "(", "self", ".", "oridml", "(", "im_in", ")", ",", "self", ".", "gendml", "(", "im_gen_in", ")", ")", "\n", "mlp_out", "=", "self", ".", "mlpModel", "(", "(", "pair", ",", "label_in", ")", ")", "# size class_num x 2", "\n", "_", ",", "pred_label", "=", "mlp_out", "[", ":", ",", "1", "]", ".", "max", "(", "0", ")", "\n", "\n", "img_cls", "=", "self", ".", "cls_norm", "(", "self", ".", "model_denorm", "(", "\n", "im_gen_dict", "[", "pred_label", ".", "item", "(", ")", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "logits_cls", "=", "self", ".", "classifier", "(", "img_cls", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "            ", "return", "logits_cls", ".", "squeeze", "(", ")", ",", "mlp_out", "\n", "", "else", ":", "\n", "            ", "return", "logits_cls", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.get_judge_results": [[149, 160], ["torch.Tensor", "torch.no_grad", "img.cuda.cuda.cuda", "classId.cuda.cuda.cuda", "ContraNet2.ContraNet2.model_norm", "ContraNet2.ContraNet2.cGAN", "ContraNet2.ContraNet2.forward_mlp", "torch.cat", "mlp_out.cpu"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.forward_mlp"], ["", "", "def", "get_judge_results", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "mlp_out_pos", "=", "torch", ".", "Tensor", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "img", ",", "classId", "in", "val_loader", ":", "\n", "                ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "img_model", "=", "self", ".", "model_norm", "(", "img", ")", "\n", "img_gen_dict", "=", "self", ".", "cGAN", "(", "img_model", ")", "\n", "mlp_out", ",", "_", "=", "self", ".", "forward_mlp", "(", "img_model", ",", "img_gen_dict", ",", "classId", ")", "\n", "mlp_out_pos", "=", "torch", ".", "cat", "(", "[", "mlp_out_pos", ",", "mlp_out", ".", "cpu", "(", ")", "[", ":", ",", "1", "]", "]", ")", "\n", "", "", "return", "mlp_out_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.get_thresh": [[161, 172], ["ContraNet2.ContraNet2.get_judge_results", "ContraNet2.ContraNet2.sort_results", "mlp_out_pos_sort[].item", "warnings.warn", "int", "len"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_judge_results", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.sort_results"], ["", "def", "get_thresh", "(", "self", ",", "val_loader", ",", "drop_rate", "=", "0.05", ",", "return_list", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "_thresh", "!=", "0.5", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"You may have set thresh before calling this. get_thresh will use the given thresh\"", ")", "\n", "", "mlp_out_pos", "=", "self", ".", "get_judge_results", "(", "val_loader", ")", "\n", "mlp_out_pos_sort", ",", "_", "=", "self", ".", "sort_results", "(", "mlp_out_pos", ")", "# pos: min -> max", "\n", "thresh", "=", "mlp_out_pos_sort", "[", "int", "(", "len", "(", "mlp_out_pos_sort", ")", "*", "drop_rate", ")", "]", ".", "item", "(", ")", "\n", "if", "return_list", ":", "\n", "            ", "return", "thresh", ",", "mlp_out_pos", "\n", "", "else", ":", "\n", "            ", "return", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.resume_weights": [[173, 181], ["ContraNet2.ContraNet2.cGAN.resume_weights", "torch.load", "ContraNet2.ContraNet2.oridml.load_state_dict", "ContraNet2.ContraNet2.gendml.load_state_dict", "ContraNet2.ContraNet2.mlpModel.load_state_dict", "logging.info"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.resume_weights"], ["", "", "def", "resume_weights", "(", "self", ",", "cfgs", ",", "pars", ")", ":", "\n", "        ", "self", ".", "cGAN", ".", "resume_weights", "(", "cfgs", ",", "verbal", "=", "\"[ContraNet2] \"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pars", ".", "pretrain", ")", "\n", "self", ".", "oridml", ".", "load_state_dict", "(", "checkpoint", "[", "'ori_state'", "]", ")", "\n", "self", ".", "gendml", ".", "load_state_dict", "(", "checkpoint", "[", "'gen_state'", "]", ")", "\n", "self", ".", "mlpModel", ".", "load_state_dict", "(", "checkpoint", "[", "'mlp_state'", "]", ")", "\n", "logging", ".", "info", "(", "\"[ContraNet2] Loaded pretrain from: {}\"", ".", "format", "(", "\n", "pars", ".", "pretrain", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2.ContraNet2.load_classifier": [[182, 188], ["torch.load", "ContraNet2.ContraNet2.classifier.load_state_dict", "logging.info"], "methods", ["None"], ["", "def", "load_classifier", "(", "self", ",", "path", ",", "key", "=", "'net'", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "key", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "checkpoint", "[", "key", "]", "\n", "", "self", ".", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "logging", ".", "info", "(", "\"[ContraNet2] Loaded classifier from: {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.mnist2layer.Mnist2LayerNet.__init__": [[9, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Mnist2LayerNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "50", ",", "500", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.mnist2layer.Mnist2LayerNet.forward": [[16, 28], ["mnist2layer.Mnist2LayerNet.mean", "torch.interpolate", "torch.interpolate", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "mnist2layer.Mnist2LayerNet.view", "torch.relu", "torch.relu", "mnist2layer.Mnist2LayerNet.fc2", "mnist2layer.Mnist2LayerNet.conv1", "mnist2layer.Mnist2LayerNet.conv2", "mnist2layer.Mnist2LayerNet.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "mean", "(", "dim", "=", "-", "3", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "28", ",", "28", ")", ",", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "50", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGAN.ContraCGAN.__init__": [[9, 22], ["torch.Module.__init__", "model_utils.check_params", "GANv2.Generator", "GANv2.Encoder", "GANv2.VAE"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.check_params"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "super", "(", "ContraCGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "check_params", "(", "cfgs", ",", "None", ")", "\n", "self", ".", "gen", "=", "Generator", "(", "\n", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "\n", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "\n", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "g_init", ",", "\n", "cfgs", ".", "G_depth", ",", "False", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "isize", "=", "cfgs", ".", "img_size", ",", "nz", "=", "cfgs", ".", "z_dim", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", "\n", "self", ".", "vae", "=", "VAE", "(", "isize", "=", "cfgs", ".", "img_size", ",", "nz", "=", "cfgs", ".", "z_dim", ")", "\n", "self", ".", "class_num", "=", "cfgs", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGAN.ContraCGAN.forward": [[23, 34], ["img.size", "ContraCGAN.ContraCGAN.encoder", "ContraCGAN.ContraCGAN.vae", "range", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "ContraCGAN.ContraCGAN.gen", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "img", "=", "data", "\n", "device", "=", "img", ".", "device", "\n", "n", "=", "img", ".", "size", "(", "0", ")", "\n", "img_gen_dict", "=", "{", "}", "\n", "latent_i", "=", "self", ".", "encoder", "(", "img", ")", "\n", "_", ",", "_", ",", "z", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "for", "classId", "in", "range", "(", "self", ".", "class_num", ")", ":", "\n", "            ", "label", "=", "torch", ".", "LongTensor", "(", "[", "classId", "]", "*", "n", ")", ".", "to", "(", "device", ")", "\n", "img_gen_dict", "[", "classId", "]", "=", "self", ".", "gen", "(", "z", ",", "label", ")", "\n", "", "return", "img_gen_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGAN.ContraCGAN.resume_weights": [[35, 42], ["ContraCGAN.ContraCGAN.gen.load_state_dict", "logging.info", "ContraCGAN.ContraCGAN.encoder.load_state_dict", "logging.info", "ContraCGAN.ContraCGAN.vae.load_state_dict", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "resume_weights", "(", "self", ",", "cfgs", ",", "verbal", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfgs", ".", "G_weights", ")", "[", "'state_dict'", "]", ")", "\n", "logging", ".", "info", "(", "\"{}Loaded gen from: {}\"", ".", "format", "(", "verbal", ",", "cfgs", ".", "G_weights", ")", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfgs", ".", "E_weights", ")", "[", "'state_dict'", "]", ")", "\n", "logging", ".", "info", "(", "\"{}Loaded encoder from: {}\"", ".", "format", "(", "verbal", ",", "cfgs", ".", "E_weights", ")", ")", "\n", "self", ".", "vae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfgs", ".", "V_weights", ")", "[", "'state_dict'", "]", ")", "\n", "logging", ".", "info", "(", "\"{}Loaded vae from: {}\"", ".", "format", "(", "verbal", ",", "cfgs", ".", "V_weights", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.fgsmWrapper.Fgsm.__init__": [[6, 11], ["baseWrapper.BaseWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "criterion", ",", "cls_norm", ",", "targeted", "=", "False", ",", "\n", "eps", "=", "0.03", ",", "x_val_min", "=", "0", ",", "x_val_max", "=", "1", ")", ":", "\n", "        ", "super", "(", "Fgsm", ",", "self", ")", ".", "__init__", "(", "net", ",", "criterion", ",", "cls_norm", ",", "targeted", ",", "\n", "x_val_min", ",", "x_val_max", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.fgsmWrapper.Fgsm.attack": [[12, 42], ["fgsmWrapper.Fgsm.net.eval", "x.to.to.to", "y.to.to.to", "x.to.to.requires_grad_", "torch.zeros_like", "[].detach", "grad.sign.sign.sign", "torch.clamp", "ValueError", "torch.enable_grad", "fgsmWrapper.Fgsm.cls_norm", "fgsmWrapper.Fgsm.net", "torch.no_grad", "fgsmWrapper.Fgsm.cls_norm", "fgsmWrapper.Fgsm.net", "fgsmWrapper.Fgsm.max", "torch.clamp.detach", "cls_pred.detach", "x.to.to.min", "x.to.to.max", "fgsmWrapper.Fgsm.criterion", "fgsmWrapper.Fgsm.criterion", "torch.autograd.grad"], "methods", ["None"], ["", "def", "attack", "(", "self", ",", "x", ",", "y", ",", "device", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "x", ".", "min", "(", ")", "<", "self", ".", "x_val_min", "or", "x", ".", "max", "(", ")", ">", "self", ".", "x_val_max", ":", "\n", "            ", "ValueError", "(", "\"Input data should in the range of [{}, {}]\"", ".", "format", "(", "\n", "self", ".", "x_val_min", ",", "self", ".", "x_val_max", "\n", ")", ")", "\n", "", "self", ".", "net", ".", "eval", "(", ")", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "x", ".", "requires_grad_", "(", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "norm_x", "=", "self", ".", "cls_norm", "(", "x", ")", "\n", "h_adv", "=", "self", ".", "net", "(", "norm_x", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "                ", "cost", "=", "self", ".", "criterion", "(", "h_adv", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "cost", "=", "-", "self", ".", "criterion", "(", "h_adv", ",", "y", ")", "\n", "\n", "", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "cost", ",", "[", "x", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "\n", "grad", "=", "grad", ".", "sign", "(", ")", "\n", "x_adv", "=", "x", "-", "self", ".", "eps", "*", "grad", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "self", ".", "x_val_min", ",", "self", ".", "x_val_max", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "norm_x", "=", "self", ".", "cls_norm", "(", "x_adv", ")", "\n", "h_adv", "=", "self", ".", "net", "(", "norm_x", ")", "\n", "_", ",", "cls_pred", "=", "h_adv", ".", "max", "(", "1", ")", "\n", "\n", "", "return", "x_adv", ".", "detach", "(", ")", ",", "cls_pred", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.check_params": [[13, 24], ["hasattr", "hasattr"], "function", ["None"], ["def", "check_params", "(", "cfgs", ",", "pars", ",", "cfgs_flag", "=", "None", ",", "pars_flag", "=", "None", ")", ":", "\n", "    ", "cfgs_flag", "=", "cfgs_flag_common", "+", "cfgs_flag_pretrain", "if", "cfgs_flag", "is", "None", "else", "cfgs_flag", "\n", "pars_flag", "=", "pars_flag_common", "if", "pars_flag", "is", "None", "else", "pars_flag", "\n", "if", "cfgs", "is", "not", "None", ":", "\n", "        ", "for", "flag", "in", "cfgs_flag", ":", "\n", "            ", "assert", "hasattr", "(", "cfgs", ",", "flag", ")", ",", "\"no {} in cfgs\"", ".", "format", "(", "flag", ")", "\n", "", "", "if", "pars", "is", "not", "None", ":", "\n", "        ", "for", "flag", "in", "pars_flag", ":", "\n", "            ", "assert", "hasattr", "(", "pars", ",", "flag", ")", ",", "\"no {} in pars\"", ".", "format", "(", "flag", ")", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.concat": [[26, 29], ["torch.cat", "torch.cat"], "function", ["None"], ["", "def", "concat", "(", "feat_emb", ",", "feat_gen", ")", ":", "\n", "    ", "pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_gen", "]", ",", "dim", "=", "1", ")", "\n", "return", "pair", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.sub": [[31, 34], ["None"], "function", ["None"], ["", "def", "sub", "(", "feat_emb", ",", "feat_gen", ")", ":", "\n", "    ", "pair", "=", "feat_emb", "-", "feat_gen", "\n", "return", "pair", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.loss_hinge_dis": [[36, 43], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "function", ["None"], ["", "def", "loss_hinge_dis", "(", "dis_out_real", ",", "dis_out_fake", ",", "test", "=", "False", ")", ":", "\n", "    ", "if", "test", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "dis_out_real", ")", ")", ",", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "+", "dis_out_fake", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "dis_out_real", ")", ")", "+", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "+", "dis_out_fake", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.judge_thresh": [[45, 51], ["None"], "function", ["None"], ["", "", "def", "judge_thresh", "(", "l2_out", ",", "thresh", ",", "min_distance", "=", "False", ")", ":", "\n", "# True for pass, False for reject", "\n", "        ", "if", "min_distance", ":", "\n", "            ", "return", "(", "l2_out", "<", "thresh", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "l2_out", ">", "thresh", ")", ".", "long", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.inception.InceptionV3.__init__": [[22, 107], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torchvision.models.inception_v3", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, normalizes the input to the statistics the pretrained\n            Inception network expects\n        requires_grad : bool\n            If true, parameters of the model require gradient. Possibly useful\n            for finetuning the network\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.inception.InceptionV3.forward": [[108, 143], ["enumerate", "torch.interpolate", "torch.interpolate", "block.clone", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", "0", "]", "=", "x", "[", ":", ",", "0", "]", "*", "(", "0.229", "/", "0.5", ")", "+", "(", "0.485", "-", "0.5", ")", "/", "0.5", "\n", "x", "[", ":", ",", "1", "]", "=", "x", "[", ":", ",", "1", "]", "*", "(", "0.224", "/", "0.5", ")", "+", "(", "0.456", "-", "0.5", ")", "/", "0.5", "\n", "x", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "*", "(", "0.225", "/", "0.5", ")", "+", "(", "0.406", "-", "0.5", ")", "/", "0.5", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.InvertedResidual.__init__": [[28, 61], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "\n", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "\n", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.InvertedResidual.forward": [[63, 68], ["MobileNetV2.InvertedResidual.conv", "MobileNetV2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.__init__": [[71, 120], ["torch.Module.__init__", "MobileNetV2.MobileNetV2.features.append", "torch.Sequential", "torch.Sequential", "MobileNetV2.MobileNetV2._initialize_weights", "MobileNetV2.make_divisible", "MobileNetV2.conv_bn", "range", "MobileNetV2.conv_1x1_bn", "MobileNetV2.MLP_normal", "torch.Linear", "torch.Linear", "MobileNetV2.make_divisible", "MobileNetV2.MobileNetV2.features.append", "MobileNetV2.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.make_divisible", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_bn", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_1x1_bn", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "n_class", "=", "12", ",", "input_size", "=", "64", ",", "width_mult", "=", "1.", ",", "\n", "change_mlp", "=", "False", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "1", "]", ",", "# change this 2->1 for 32x32 input.", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "# input_channel = make_divisible(input_channel * width_mult)", "\n", "# first channel is always 32!", "\n", "self", ".", "last_channel", "=", "make_divisible", "(", "\n", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "# change this 2->1 for 32x32 input.", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "1", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "make_divisible", "(", "c", "*", "width_mult", ")", "if", "t", ">", "1", "else", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "if", "change_mlp", ":", "\n", "            ", "self", ".", "classifier", "=", "MLP_normal", "(", "self", ".", "last_channel", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "n_class", ")", "\n", "\n", "", "self", ".", "_initialize_weights", "(", ")", "\n", "self", ".", "_with_features", "=", "False", "\n", "self", ".", "_only_features", "=", "False", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features": [[121, 123], ["None"], "methods", ["None"], ["print", "(", "\">>>> this MobileNet will generate {} features\"", ".", "format", "(", "n_class", ")", ")", "\n", "\n", "", "def", "query_features", "(", "self", ",", "use", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.only_features": [[128, 132], ["None"], "methods", ["None"], ["", "", "def", "only_features", "(", "self", ",", "use", "=", "True", ")", ":", "\n", "        ", "self", ".", "_only_features", "=", "use", "\n", "if", "use", "==", "True", ":", "\n", "            ", "self", ".", "_with_features", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.forward": [[124, 132], ["MobileNetV2.MobileNetV2.features", "MobileNetV2.MobileNetV2.mean().mean", "MobileNetV2.MobileNetV2.classifier", "MobileNetV2.MobileNetV2.mean"], "methods", ["None"], ["        ", "self", ".", "_with_features", "=", "use", "\n", "if", "use", "==", "True", ":", "\n", "            ", "self", ".", "_only_features", "=", "False", "\n", "\n", "", "", "def", "only_features", "(", "self", ",", "use", "=", "True", ")", ":", "\n", "        ", "self", ".", "_only_features", "=", "use", "\n", "if", "use", "==", "True", ":", "\n", "            ", "self", ".", "_with_features", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2._initialize_weights": [[133, 147], ["MobileNetV2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "features", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "features", ")", "\n", "if", "self", ".", "_with_features", ":", "\n", "            ", "return", "features", ",", "x", "\n", "", "elif", "self", ".", "_only_features", ":", "\n", "            ", "return", "features", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "", "", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2_64.__init__": [[161, 213], ["torch.Module.__init__", "torch.Module.__init__", "MobileNetV2.MobileNetV2_64.features.append", "torch.Sequential", "torch.Sequential", "MobileNetV2.MobileNetV2_64._initialize_weights", "print", "MobileNetV2.make_divisible", "MobileNetV2.conv_bn", "range", "MobileNetV2.conv_1x1_bn", "MobileNetV2.MLP_normal", "torch.Linear", "torch.Linear", "MobileNetV2.make_divisible", "MobileNetV2.MobileNetV2_64.features.append", "MobileNetV2.MobileNetV2_64.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.make_divisible", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_bn", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_1x1_bn", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "n_class", "=", "12", ",", "input_size", "=", "64", ",", "width_mult", "=", "1.", ",", "\n", "change_mlp", "=", "False", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "# input_channel = make_divisible(input_channel * width_mult)", "\n", "# first channel is always 32!", "\n", "self", ".", "last_channel", "=", "make_divisible", "(", "\n", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "make_divisible", "(", "c", "*", "width_mult", ")", "if", "t", ">", "1", "else", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "if", "change_mlp", ":", "\n", "            ", "self", ".", "classifier", "=", "MLP_normal", "(", "self", ".", "last_channel", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "n_class", ")", "\n", "\n", "", "self", ".", "_initialize_weights", "(", ")", "\n", "self", ".", "_with_features", "=", "False", "\n", "self", ".", "_only_features", "=", "False", "\n", "print", "(", "\n", "\">>>> this MobileNet will generate {} features for 64x64 input\"", "\n", ".", "format", "(", "n_class", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MLP.__init__": [[150, 167], ["torch.Module.__init__", "print", "torch.ModuleDict", "torch.ModuleDict", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "str"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "\n", "", "", "", "", "class", "MobileNetV2_64", "(", "MobileNetV2", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_class", "=", "12", ",", "input_size", "=", "64", ",", "width_mult", "=", "1.", ",", "\n", "change_mlp", "=", "False", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MLP.forward": [[169, 180], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2.MLP.feature2", "torch.functional.softmax", "torch.functional.softmax", "str", "torch.functional.softmax.append", "i.item", "x[].unsqueeze"], "methods", ["None"], ["[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "# input_channel = make_divisible(input_channel * width_mult)", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MLP_normal.__init__": [[183, 196], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "make_divisible", "(", "c", "*", "width_mult", ")", "if", "t", ">", "1", "else", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "\n", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MLP_normal.forward": [[198, 203], ["MobileNetV2.MLP_normal.feature1", "MobileNetV2.MLP_normal.feature2", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "if", "change_mlp", ":", "\n", "            ", "self", ".", "classifier", "=", "MLP_normal", "(", "self", ".", "last_channel", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2f_c.__init__": [[207, 227], ["MobileNetV2.MobileNetV2.__init__", "print", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "MobileNetV2.conv_bn", "MobileNetV2.MobileNetV2f_c.features[].modules", "torch.distributions.uniform.Uniform.sample", "torch.distributions.uniform.Uniform.sample", "isinstance", "range", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_bn"], ["", "self", ".", "_initialize_weights", "(", ")", "\n", "self", ".", "_with_features", "=", "False", "\n", "self", ".", "_only_features", "=", "False", "\n", "print", "(", "\n", "\">>>> this MobileNet will generate {} features for 64x64 input\"", "\n", ".", "format", "(", "n_class", ")", ")", "\n", "\n", "\n", "", "", "class", "MLP", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", "=", "2", ",", "p", "=", "0.1", ",", "class_num", "=", "10", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# in_dim will be 1280x2 for MobileNet due to mean()", "\n", "print", "(", "\">>>> This MLP model takes {} in classes and out 2 <<<<\"", ".", "format", "(", "\n", "class_num", ")", ")", "\n", "self", ".", "feature1", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "class_num", ")", ":", "\n", "            ", "self", ".", "feature1", "[", "str", "(", "i", ")", "]", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2f_c.forward": [[228, 240], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "MobileNetV2.MobileNetV2f_c.features", "MobileNetV2.MobileNetV2f_c.mean().mean", "MobileNetV2.MobileNetV2f_c.classifier", "MobileNetV2.MobileNetV2f_c.size", "new_x.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2.MobileNetV2f_c.mean", "MobileNetV2.MobileNetV2f_c.channel_patch[].to", "y[].item"], "methods", ["None"], ["", "self", ".", "feature2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "64", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "out_dim", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "din", ")", ":", "\n", "        ", "x", "=", "din", "[", "0", "]", "\n", "y", "=", "din", "[", "1", "]", "\n", "dout", "=", "[", "]", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "y", ")", ":", "\n", "            ", "label", "=", "str", "(", "i", ".", "item", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2f_m.__init__": [[244, 252], ["MobileNetV2.MobileNetV2.__init__", "print", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform.sample", "torch.distributions.uniform.Uniform.sample", "range"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["if", "not", "self", ".", "training", ":", "\n", "            ", "dout", "=", "nn", ".", "functional", ".", "softmax", "(", "dout", ",", "dim", "=", "1", ")", "\n", "", "return", "dout", "\n", "\n", "\n", "", "", "class", "MLP_normal", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", "=", "2", ",", "p", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MLP_normal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# in_dim will be 1280 + 80 + 128", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2f_m.forward": [[253, 265], ["range", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "MobileNetV2.MobileNetV2f_m.features", "MobileNetV2.MobileNetV2f_m.mean().mean", "MobileNetV2.MobileNetV2f_m.classifier", "MobileNetV2.MobileNetV2f_m.size", "torch.stack().to.append", "torch.stack().to.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "MobileNetV2.MobileNetV2f_m.mean", "y[].item"], "methods", ["None"], ["self", ".", "feature1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "512", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "feature2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "64", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "out_dim", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "din", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2l_c.__init__": [[269, 290], ["MobileNetV2.MobileNetV2.__init__", "print", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "MobileNetV2.conv_bn", "MobileNetV2.MobileNetV2l_c.features[].modules", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "isinstance", "torch.distributions.uniform.Uniform.sample", "torch.distributions.uniform.Uniform.sample", "range", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_bn"], ["\n", "\n", "", "", "class", "MobileNetV2f_c", "(", "MobileNetV2", ")", ":", "\n", "# This is for fix random parameter apply on the forth channel.", "\n", "    ", "def", "__init__", "(", "self", ",", "n_class", "=", "12", ",", "input_size", "=", "64", ",", "width_mult", "=", "1.", ",", "\n", "change_mlp", "=", "False", ",", "in_channel", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_class", "=", "n_class", ",", "input_size", "=", "input_size", ",", "\n", "width_mult", "=", "width_mult", ",", "change_mlp", "=", "change_mlp", ")", "\n", "print", "(", "\">>>> fix random parameter apply on the forth channel <<<<\"", ")", "\n", "input_channel", "=", "32", "\n", "torch", ".", "random", ".", "manual_seed", "(", "0", ")", "\n", "sampler", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "0", ",", "1", ")", "\n", "self", ".", "channel_patch", "=", "{", "i", ":", "sampler", ".", "sample", "(", "\n", "(", "1", ",", "input_size", ",", "input_size", ")", ")", "for", "i", "in", "range", "(", "10", ")", "}", "\n", "self", ".", "features", "[", "0", "]", "=", "conv_bn", "(", "in_channel", "+", "1", ",", "input_channel", ",", "2", ")", "\n", "for", "m", "in", "self", ".", "features", "[", "0", "]", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2l_c.forward": [[291, 303], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "MobileNetV2.MobileNetV2l_c.features", "MobileNetV2.MobileNetV2l_c.mean().mean", "MobileNetV2.MobileNetV2l_c.classifier", "MobileNetV2.MobileNetV2l_c.size", "new_x.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2.MobileNetV2l_c.mean", "MobileNetV2.MobileNetV2l_c.channel_patch[].to", "y[].item"], "methods", ["None"], ["                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "1", "]", "\n", "new_x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "new_x", ".", "append", "(", "torch", ".", "cat", "(", "\n", "[", "x", "[", "i", "]", ",", "self", ".", "channel_patch", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", ".", "to", "(", "x", ".", "device", ")", "]", ",", "dim", "=", "0", ")", ")", "\n", "", "x", "=", "torch", ".", "stack", "(", "new_x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2l_m.__init__": [[307, 316], ["MobileNetV2.MobileNetV2.__init__", "print", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.distributions.uniform.Uniform", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.distributions.uniform.Uniform.sample", "torch.distributions.uniform.Uniform.sample", "range"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["\n", "", "", "class", "MobileNetV2f_m", "(", "MobileNetV2", ")", ":", "\n", "# This is for fix random parameter multiply all three channels.", "\n", "    ", "def", "__init__", "(", "self", ",", "n_class", "=", "12", ",", "input_size", "=", "64", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_class", "=", "n_class", ",", "input_size", "=", "input_size", ",", "\n", "width_mult", "=", "width_mult", ")", "\n", "print", "(", "\">>>> fix random parameter multiply all three channels <<<<\"", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "0", ")", "\n", "sampler", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "0", ",", "1", ")", "\n", "self", ".", "channel_patch", "=", "{", "i", ":", "sampler", ".", "sample", "(", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2l_m.forward": [[317, 329], ["range", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "MobileNetV2.MobileNetV2l_m.features", "MobileNetV2.MobileNetV2l_m.mean().mean", "MobileNetV2.MobileNetV2l_m.classifier", "MobileNetV2.MobileNetV2l_m.size", "torch.stack().to.append", "torch.stack().to.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "MobileNetV2.MobileNetV2l_m.mean", "y[].item"], "methods", ["None"], ["(", "1", ",", "input_size", ",", "input_size", ")", ")", "for", "i", "in", "range", "(", "10", ")", "}", "\n", "\n", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "1", "]", "\n", "patch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "patch", ".", "append", "(", "self", ".", "channel_patch", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", ")", "\n", "", "patch", "=", "torch", ".", "stack", "(", "patch", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "x", "*", "patch", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2fc.__init__": [[333, 341], ["MobileNetV2.MobileNetV2.__init__", "print", "torch.Linear", "torch.Linear", "MobileNetV2.MobileNetV2fc.classifier.weight.data.normal_", "MobileNetV2.MobileNetV2fc.classifier.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["", "", "class", "MobileNetV2l_c", "(", "MobileNetV2", ")", ":", "\n", "# This is for learnable random parameter apply on the forth channel.", "\n", "    ", "def", "__init__", "(", "self", ",", "n_class", "=", "12", ",", "input_size", "=", "64", ",", "width_mult", "=", "1.", ",", "\n", "change_mlp", "=", "False", ",", "in_channel", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_class", "=", "n_class", ",", "input_size", "=", "input_size", ",", "\n", "width_mult", "=", "width_mult", ",", "change_mlp", "=", "change_mlp", ")", "\n", "print", "(", "\">>>> learnable random parameter apply on the forth channel <<<<\"", ")", "\n", "input_channel", "=", "32", "\n", "torch", ".", "random", ".", "manual_seed", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2fc.forward": [[342, 355], ["data[].unsqueeze", "MobileNetV2.MobileNetV2fc.features", "MobileNetV2.MobileNetV2fc.mean().mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MobileNetV2.MobileNetV2fc.classifier", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "torch.zeros().to().scatter_", "MobileNetV2.MobileNetV2fc.mean", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().to().scatter_.size", "torch.zeros().to().scatter_.size"], "methods", ["None"], ["sampler", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "0", ",", "1", ")", "\n", "self", ".", "channel_patch", "=", "{", "i", ":", "torch", ".", "nn", ".", "Parameter", "(", "\n", "sampler", ".", "sample", "(", "(", "1", ",", "input_size", ",", "input_size", ")", ")", "\n", ")", "for", "i", "in", "range", "(", "10", ")", "}", "\n", "self", ".", "features", "[", "0", "]", "=", "conv_bn", "(", "in_channel", "+", "1", ",", "input_channel", ",", "2", ")", "\n", "for", "m", "in", "self", ".", "features", "[", "0", "]", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_bn": [[6, 11], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.conv_1x1_bn": [[14, 19], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.make_divisible": [[22, 25], ["int", "np.ceil"], "function", ["None"], ["", "def", "make_divisible", "(", "x", ",", "divisible_by", "=", "8", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "return", "int", "(", "np", ".", "ceil", "(", "x", "*", "1.", "/", "divisible_by", ")", "*", "divisible_by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.mobilenet_v2": [[357, 370], ["MobileNetV2.MobileNetV2", "load_state_dict_from_url", "MobileNetV2.load_state_dict"], "function", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", "=", "data", "[", "0", "]", "\n", "y", "=", "data", "[", "1", "]", "\n", "new_x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "new_x", ".", "append", "(", "torch", ".", "cat", "(", "\n", "[", "x", "[", "i", "]", ",", "self", ".", "channel_patch", "[", "y", "[", "i", "]", ".", "item", "(", ")", "]", ".", "to", "(", "x", ".", "device", ")", "]", ",", "dim", "=", "0", ")", ")", "\n", "", "x", "=", "torch", ".", "stack", "(", "new_x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictBase.ContraNetDictBase.__init__": [[19, 41], ["torch.Module.__init__", "model_utils.check_params", "ContraCGAN.ContraCGAN.ContraCGAN", "torchvision.transforms.Normalize", "numpy.array", "numpy.array", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.check_params"], ["def", "__init__", "(", "self", ",", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "None", ",", "model_norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "ContraNetDictBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "check_params", "(", "cfgs", ",", "pars", "=", "None", ")", "\n", "self", ".", "cGAN", "=", "ContraCGAN", "(", "cfgs", ")", "\n", "self", ".", "classifier", "=", "classifier", "\n", "if", "cls_norm", "is", "None", ":", "\n", "            ", "self", ".", "cls_norm", "=", "Compose", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_norm", "=", "Normalize", "(", "*", "cls_norm", ")", "\n", "", "self", ".", "model_norm", "=", "Normalize", "(", "*", "model_norm", ")", "\n", "[", "mean", ",", "var", "]", "=", "model_norm", "\n", "mean", "=", "np", ".", "array", "(", "mean", ")", "\n", "var", "=", "np", ".", "array", "(", "var", ")", "\n", "self", ".", "model_denorm", "=", "Normalize", "(", "mean", "=", "-", "mean", "/", "var", ",", "std", "=", "1.", "/", "var", ")", "\n", "self", ".", "debug", "=", "False", "\n", "self", ".", "ddebug", "=", "False", "\n", "self", ".", "return_fig", "=", "False", "\n", "self", ".", "fake_wrong", "=", "False", "\n", "self", ".", "_thresh", "=", "None", "\n", "self", ".", "_only_rej", "=", "False", "\n", "self", ".", "_only_judge", "=", "False", "\n", "self", ".", "min_distance", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictBase.ContraNetDictBase.forward_classifier": [[42, 49], ["ContraNetDictBase.ContraNetDictBase.cls_norm", "ContraNetDictBase.ContraNetDictBase.classifier", "ContraNetDictBase.ContraNetDictBase.max", "random.randint"], "methods", ["None"], ["", "def", "forward_classifier", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_cls", "=", "self", ".", "cls_norm", "(", "img", ")", "\n", "logits_cls", "=", "self", ".", "classifier", "(", "img_cls", ")", "\n", "_", ",", "cls_pred", "=", "logits_cls", ".", "max", "(", "1", ")", "\n", "if", "self", ".", "fake_wrong", ":", "\n", "            ", "cls_pred", "=", "(", "cls_pred", "+", "random", ".", "randint", "(", "1", ",", "9", ")", ")", "%", "10", "\n", "", "return", "logits_cls", ",", "cls_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictBase.ContraNetDictBase.sort_results": [[50, 52], ["out.sort"], "methods", ["None"], ["", "def", "sort_results", "(", "self", ",", "out", ")", ":", "\n", "        ", "return", "out", ".", "sort", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.__init__": [[17, 40], ["ContraNetDictBase.ContraNetDictBase.__init__", "model_utils.check_params", "ContraNet2dist.ContraNet2dist.resume_weights", "torch.norm", "torch.abs().sum", "lib.pytorch_ssim.ssim", "NotImplementedError", "torch.abs", "lib.pytorch_ssim.ssim", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.check_params", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.resume_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim"], ["def", "__init__", "(", "self", ",", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "None", ",", "model_norm", "=", "None", ",", "\n", "distance", "=", "\"L2\"", ")", ":", "\n", "        ", "super", "(", "ContraNet2dist", ",", "self", ")", ".", "__init__", "(", "\n", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "cls_norm", ",", "model_norm", "=", "model_norm", ")", "\n", "assert", "check_params", "(", "cfgs", ",", "pars", "=", "None", ")", "\n", "self", ".", "distance_name", "=", "distance", "\n", "if", "distance", "==", "\"L2\"", ":", "\n", "            ", "self", ".", "distance", "=", "lambda", "x", ",", "y", ":", "torch", ".", "norm", "(", "x", "-", "y", ",", "2", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "self", ".", "min_distance", "=", "True", "\n", "", "elif", "distance", "==", "\"L1\"", ":", "\n", "            ", "self", ".", "distance", "=", "lambda", "x", ",", "y", ":", "torch", ".", "abs", "(", "x", "-", "y", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "self", ".", "min_distance", "=", "True", "\n", "", "elif", "distance", "==", "\"ssim\"", ":", "\n", "            ", "self", ".", "distance", "=", "lambda", "x", ",", "y", ":", "ssim", "(", "x", ",", "y", ",", "size_average", "=", "False", ")", "\n", "self", ".", "min_distance", "=", "False", "\n", "", "elif", "distance", "==", "\"ssim-L2\"", ":", "\n", "            ", "self", ".", "distance", "=", "lambda", "x", ",", "y", ":", "ssim", "(", "\n", "x", ",", "y", ",", "size_average", "=", "False", ")", "-", "torch", ".", "norm", "(", "x", "-", "y", ",", "2", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "self", ".", "min_distance", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"not known distance: {}\"", ".", "format", "(", "distance", ")", ")", "\n", "", "self", ".", "resume_weights", "(", "cfgs", ")", "\n", "self", ".", "_thresh", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.judge_distance": [[41, 47], ["model_utils.judge_thresh", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.judge_thresh"], ["", "def", "judge_distance", "(", "self", ",", "l2_out", ")", ":", "\n", "        ", "\"\"\"True for pass, False for rejection.\n        \"\"\"", "\n", "if", "self", ".", "_thresh", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"You need to assign a threshold to judge\"", ")", "\n", "", "return", "judge_thresh", "(", "l2_out", ",", "self", ".", "_thresh", ",", "self", ".", "min_distance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_distance": [[48, 66], ["enumerate", "torch.stack", "ContraNet2dist.ContraNet2dist.distance", "torch.stack.append", "ContraNet2dist.ContraNet2dist.judge_distance", "pred_cls.item"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.judge_distance"], ["", "def", "get_distance", "(", "self", ",", "img_model", ",", "img_gen_dict", ",", "cls_pred", ",", "no_judge", "=", "False", ")", ":", "\n", "        ", "\"\"\"calculate L2 distance\n\n        Args:\n            img_model (torch.Tensor): input image batch\n            img_gen_dict (dict): generated image dict\n            cls_pred (torch.LongTensor): argmax from classifier output\n        \"\"\"", "\n", "img_gen_in", "=", "[", "]", "\n", "for", "idx", ",", "pred_cls", "in", "enumerate", "(", "cls_pred", ")", ":", "\n", "            ", "img_gen_in", ".", "append", "(", "img_gen_dict", "[", "pred_cls", ".", "item", "(", ")", "]", "[", "idx", "]", ")", "\n", "", "img_gen_in", "=", "torch", ".", "stack", "(", "img_gen_in", ")", "\n", "distance", "=", "self", ".", "distance", "(", "img_gen_in", ",", "img_model", ")", "\n", "if", "no_judge", ":", "\n", "            ", "return", "distance", ",", "None", "\n", "", "else", ":", "\n", "            ", "dist_pred", "=", "self", ".", "judge_distance", "(", "distance", ")", "\n", "return", "distance", ",", "dist_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.forward": [[67, 101], ["ContraNet2dist.ContraNet2dist.forward_classifier", "ContraNet2dist.ContraNet2dist.model_norm", "ContraNet2dist.ContraNet2dist.cGAN", "ContraNet2dist.ContraNet2dist.get_distance", "torch.zeros", "enumerate", "logging.info", "ContraNet2dist.ContraNet2dist.get_distance", "NotImplementedError", "NotImplementedError", "NotImplementedError", "torch.zeros.sum().item", "torch.zeros.sum"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictBase.ContraNetDictBase.forward_classifier", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_distance", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_distance"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            torch.Tensor: pred labels of size [N].\n        \"\"\"", "\n", "logits_cls", ",", "cls_pred", "=", "self", ".", "forward_classifier", "(", "img", ")", "\n", "\n", "img_model", "=", "self", ".", "model_norm", "(", "img", ")", "\n", "img_gen_dict", "=", "self", ".", "cGAN", "(", "img_model", ")", "\n", "if", "self", ".", "_only_judge", ":", "\n", "            ", "distance", ",", "_", "=", "self", ".", "get_distance", "(", "\n", "img_model", ",", "img_gen_dict", ",", "cls_pred", ",", "True", ")", "\n", "return", "distance", "\n", "", "distance", ",", "dist_pred", "=", "self", ".", "get_distance", "(", "\n", "img_model", ",", "img_gen_dict", ",", "cls_pred", ")", "\n", "\n", "rej", "=", "torch", ".", "zeros", "(", "img", ".", "shape", "[", "0", "]", ")", "\n", "final_logits", "=", "[", "]", "\n", "if", "not", "self", ".", "_only_rej", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "for", "idx", ",", "dist_this", "in", "enumerate", "(", "dist_pred", ")", ":", "# im is a single image now.", "\n", "            ", "if", "dist_this", "!=", "1", ":", "\n", "                ", "rej", "[", "idx", "]", "=", "1", "\n", "", "", "logging", ".", "info", "(", "\"[ContraNet2dist {}] Reject {} out of {} sampels\"", ".", "format", "(", "\n", "self", ".", "distance_name", ",", "rej", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "img", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "self", ".", "return_fig", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "if", "self", ".", "debug", "or", "self", ".", "ddebug", ":", "\n", "            ", "if", "self", ".", "ddebug", ":", "\n", "                ", "return", "final_logits", ",", "rej", ",", "logits_cls", "\n", "", "else", ":", "\n", "                ", "return", "final_logits", ",", "rej", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.check_most": [[102, 104], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "check_most", "(", "self", ",", "im", ",", "im_gen_dict", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_judge_results": [[105, 117], ["torch.Tensor", "torch.no_grad", "img.cuda.cuda.cuda", "classId.cuda.cuda.cuda", "ContraNet2dist.ContraNet2dist.model_norm", "ContraNet2dist.ContraNet2dist.cGAN", "ContraNet2dist.ContraNet2dist.get_distance", "torch.cat", "dist_out.cpu"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_distance"], ["", "def", "get_judge_results", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "all_dist", "=", "torch", ".", "Tensor", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "img", ",", "classId", "in", "val_loader", ":", "\n", "                ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "img_model", "=", "self", ".", "model_norm", "(", "img", ")", "\n", "img_gen_dict", "=", "self", ".", "cGAN", "(", "img_model", ")", "\n", "dist_out", ",", "_", "=", "self", ".", "get_distance", "(", "\n", "img_model", ",", "img_gen_dict", ",", "classId", ",", "no_judge", "=", "True", ")", "\n", "all_dist", "=", "torch", ".", "cat", "(", "[", "all_dist", ",", "dist_out", ".", "cpu", "(", ")", "]", ")", "\n", "", "", "return", "all_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.sort_results": [[118, 124], ["out.sort", "out.sort"], "methods", ["None"], ["", "def", "sort_results", "(", "self", ",", "out", ")", ":", "\n", "        ", "if", "self", ".", "min_distance", ":", "\n", "            ", "out", ",", "inds", "=", "out", ".", "sort", "(", "descending", "=", "True", ")", "# pos: max -> min", "\n", "", "else", ":", "\n", "            ", "out", ",", "inds", "=", "out", ".", "sort", "(", "descending", "=", "False", ")", "# pos: min -> max", "\n", "", "return", "out", ",", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_thresh": [[125, 130], ["ContraNet2dist.ContraNet2dist.get_judge_results", "ContraNet2dist.ContraNet2dist.sort_results", "all_dist[].item", "int", "len"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_judge_results", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.sort_results"], ["", "def", "get_thresh", "(", "self", ",", "val_loader", ",", "drop_rate", "=", "0.05", ")", ":", "\n", "        ", "all_dist", "=", "self", ".", "get_judge_results", "(", "val_loader", ")", "\n", "all_dist", ",", "_", "=", "self", ".", "sort_results", "(", "all_dist", ")", "\n", "thresh", "=", "all_dist", "[", "int", "(", "len", "(", "all_dist", ")", "*", "drop_rate", ")", "]", ".", "item", "(", ")", "\n", "return", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.resume_weights": [[131, 134], ["ContraNet2dist.ContraNet2dist.cGAN.resume_weights"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.resume_weights"], ["", "def", "resume_weights", "(", "self", ",", "cfgs", ",", "pars", "=", "None", ")", ":", "\n", "        ", "self", ".", "cGAN", ".", "resume_weights", "(", "cfgs", ",", "verbal", "=", "\"[ContraNet2dist {}] \"", ".", "format", "(", "\n", "self", ".", "distance_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.load_classifier": [[135, 142], ["torch.load", "ContraNet2dist.ContraNet2dist.classifier.load_state_dict", "logging.info"], "methods", ["None"], ["", "def", "load_classifier", "(", "self", ",", "path", ",", "key", "=", "'net'", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "key", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "checkpoint", "[", "key", "]", "\n", "", "self", ".", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "logging", ".", "info", "(", "\"[ContraNet2dist {}] Loaded classifier from: {}\"", ".", "format", "(", "\n", "self", ".", "distance_name", ",", "path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.BasicBlock.__init__": [[17, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.BasicBlock.forward": [[35, 41], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.shortcut"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.Bottleneck.__init__": [[46, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.Bottleneck.forward": [[65, 72], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.shortcut"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet.__init__": [[75, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet._make_layer": [[91, 98], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet.forward": [[99, 113], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.embedding", "resnet.ResNet.conv1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "ResNet18", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet18": [[115, 117], ["resnet.ResNet"], "function", ["None"], ["\n", "", "def", "ResNet50", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet34": [[119, 121], ["resnet.ResNet"], "function", ["None"], ["\n", "", "def", "ResNet101", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet50": [[123, 125], ["resnet.ResNet"], "function", ["None"], ["\n", "", "def", "ResNet152", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet101": [[127, 129], ["resnet.ResNet"], "function", ["None"], ["\n", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet152": [[131, 133], ["resnet.ResNet"], "function", ["None"], ["print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "# test()", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.test": [[128, 132], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictH.ContraNetDictH.__init__": [[8, 12], ["models.ContraNetDict.ContraNetDict.__init__", "logging.info"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classifier", ",", "cls_norm", ",", "hard_drop", ")", ":", "\n", "        ", "super", "(", "ContraNetDictH", ",", "self", ")", ".", "__init__", "(", "classifier", ",", "cls_norm", ")", "\n", "self", ".", "hard", "=", "hard_drop", "\n", "logging", ".", "info", "(", "\"[detectorDict] hard_drop={}\"", ".", "format", "(", "self", ".", "hard", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDictH.ContraNetDictH.get_thresh": [[13, 69], ["isinstance", "logging.info", "torch.random.manual_seed", "ContraNetDictH.ContraNetDictH.detector[].get_judge_results", "ContraNetDictH.ContraNetDictH.detector[].get_thresh", "thresh.append", "logging.warn", "ContraNetDictH.ContraNetDictH.detector[].sort_results", "logging.info", "int", "enumerate", "inds.sort", "ContraNetDictH.ContraNetDictH.detector[].judge_mlp_thresh", "torch.logical_and", "RuntimeError", "ContraNetDictH.ContraNetDictH.detector[].judge_mlp_thresh", "len", "thresh.append", "len", "this.item"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.get_judge_results", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.get_thresh", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2dist.ContraNet2dist.sort_results"], ["", "def", "get_thresh", "(", "self", ",", "test_loader", ",", "drop_rate", "=", "[", "0.05", ",", "0.05", "]", ")", ":", "\n", "        ", "thresh", "=", "[", "]", "\n", "pass_prev", "=", "None", "\n", "hard_idx", "=", "0", "\n", "drop_rate_idx", "=", "0", "\n", "for", "d_name", "in", "self", ".", "detector", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "detector", "[", "d_name", "]", ",", "ContraNet2dist", ")", ":", "\n", "                ", "torch", ".", "random", ".", "manual_seed", "(", "1", ")", "# manual seed after D and DM", "\n", "out_list", "=", "self", ".", "detector", "[", "d_name", "]", ".", "get_judge_results", "(", "test_loader", ")", "\n", "if", "pass_prev", "is", "None", ":", "\n", "                    ", "logging", ".", "warn", "(", "\n", "\"No previous at {}, you may check\"", ".", "format", "(", "d_name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "hard", "=", "self", ".", "hard", "[", "hard_idx", "]", "\n", "out_sorted", ",", "inds", "=", "self", ".", "detector", "[", "d_name", "]", ".", "sort_results", "(", "\n", "out_list", ")", "# need: reject ..|... pass", "\n", "pass_prev_sorted", "=", "pass_prev", "[", "inds", "]", "\n", "# this is the upper bound of this drop only.", "\n", "prev_drop_rate", "=", "(", "\n", "(", "pass_prev", "==", "0", ")", ".", "sum", "(", ")", "/", "len", "(", "pass_prev", ")", ")", ".", "item", "(", ")", "\n", "if", "prev_drop_rate", ">=", "hard", ":", "\n", "                        ", "raise", "RuntimeError", "(", "\"This is no space to drop fot this.\"", ")", "\n", "", "logging", ".", "info", "(", "\n", "\"[detectorDict] prev drop rate is {}, continue.\"", ".", "format", "(", "\n", "prev_drop_rate", ")", ")", "\n", "stop_num_single", "=", "int", "(", "\n", "len", "(", "out_list", ")", "*", "(", "hard", "-", "prev_drop_rate", ")", ")", "\n", "pass_single", "=", "0", "\n", "for", "idx", ",", "this", "in", "enumerate", "(", "out_sorted", ")", ":", "\n", "                        ", "if", "pass_single", "<", "stop_num_single", ":", "\n", "                            ", "if", "pass_prev_sorted", "[", "idx", "]", ":", "\n", "# only count on those passed before", "\n", "                                ", "pass_single", "+=", "1", "\n", "pass_prev_sorted", "[", "idx", "]", "=", "0", "\n", "", "", "else", ":", "\n", "                            ", "thresh", ".", "append", "(", "this", ".", "item", "(", ")", ")", "\n", "break", "\n", "", "", "_", ",", "back_inds", "=", "inds", ".", "sort", "(", ")", "\n", "pass_prev", "=", "pass_prev_sorted", "[", "back_inds", "]", "\n", "", "hard_idx", "+=", "1", "\n", "", "else", ":", "\n", "                ", "this_thresh", ",", "out_list", "=", "self", ".", "detector", "[", "d_name", "]", ".", "get_thresh", "(", "\n", "test_loader", ",", "drop_rate", "=", "drop_rate", "[", "drop_rate_idx", "]", ",", "\n", "return_list", "=", "True", ")", "\n", "if", "pass_prev", "is", "None", ":", "\n", "                    ", "pass_prev", "=", "self", ".", "detector", "[", "d_name", "]", ".", "judge_mlp_thresh", "(", "\n", "out_list", ",", "this_thresh", ")", "\n", "", "else", ":", "\n", "                    ", "pass_prev", "=", "torch", ".", "logical_and", "(", "\n", "pass_prev", ",", "self", ".", "detector", "[", "d_name", "]", ".", "judge_mlp_thresh", "(", "\n", "out_list", ",", "this_thresh", ")", ")", "\n", "", "thresh", ".", "append", "(", "this_thresh", ")", "\n", "drop_rate_idx", "+=", "1", "\n", "", "logging", ".", "info", "(", "\"[detectorDict] threshold for {} = {}\"", ".", "format", "(", "\n", "d_name", ",", "thresh", "[", "-", "1", "]", ")", ")", "\n", "", "return", "thresh", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.__init__": [[10, 18], ["torch.Module.__init__", "torch.ModuleDict", "torch.ModuleDict", "torchvision.transforms.Compose", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classifier", ",", "cls_norm", ")", ":", "\n", "        ", "super", "(", "ContraNetDict", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "detector", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "if", "cls_norm", "is", "None", ":", "\n", "            ", "self", ".", "cls_norm", "=", "Compose", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_norm", "=", "Normalize", "(", "*", "cls_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.__len__": [[19, 21], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "detector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys": [[22, 24], ["ContraNetDict.ContraNetDict.detector.keys"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "detector", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.only_judge": [[30, 34], ["None"], "methods", ["None"], ["", "@", "only_judge", ".", "setter", "\n", "def", "only_judge", "(", "self", ",", "value", ":", "bool", ")", ":", "\n", "        ", "for", "d_name", "in", "self", ".", "detector", ":", "\n", "            ", "self", ".", "detector", "[", "d_name", "]", ".", "_only_judge", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.only_rej": [[40, 45], ["None"], "methods", ["None"], ["", "@", "only_rej", ".", "setter", "\n", "def", "only_rej", "(", "self", ",", "value", ":", "bool", ")", ":", "\n", "        ", "for", "d_name", "in", "self", ".", "detector", ":", "\n", "            ", "self", ".", "detector", "[", "d_name", "]", ".", "_only_rej", "=", "value", "\n", "self", ".", "detector", "[", "d_name", "]", ".", "ddebug", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.thresh": [[50, 58], ["enumerate", "len", "len", "logging.info"], "methods", ["None"], ["", "@", "thresh", ".", "setter", "\n", "def", "thresh", "(", "self", ",", "thresh", ":", "List", ")", ":", "\n", "        ", "assert", "len", "(", "thresh", ")", "==", "len", "(", "self", ".", "detector", ")", "\n", "for", "idx", ",", "d_name", "in", "enumerate", "(", "self", ".", "detector", ")", ":", "\n", "            ", "self", ".", "detector", "[", "d_name", "]", ".", "_thresh", "=", "thresh", "[", "idx", "]", "\n", "logging", ".", "info", "(", "\n", "\"[detectorDict] {} using thresh={}\"", ".", "format", "(", "\n", "d_name", ",", "thresh", "[", "idx", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.forward": [[59, 79], ["ContraNetDict.ContraNetDict.only_judge.all", "ContraNetDict.ContraNetDict.only_rej.all", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "NotImplementedError", "detector", "detector", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "only_judge", ".", "all", "(", ")", ":", "\n", "            ", "score_dict", "=", "{", "}", "\n", "for", "d_name", "in", "self", ".", "detector", ":", "\n", "                ", "detector", "=", "self", ".", "detector", "[", "d_name", "]", "\n", "score", "=", "detector", "(", "img", ")", "\n", "score_dict", "[", "d_name", "]", "=", "score", "\n", "", "return", "score_dict", "\n", "\n", "", "if", "self", ".", "only_rej", ".", "all", "(", ")", ":", "\n", "            ", "rej_dict", "=", "{", "}", "\n", "all_rej", "=", "torch", ".", "ByteTensor", "(", "[", "0", "]", "*", "img", ".", "shape", "[", "0", "]", ")", "\n", "for", "d_name", "in", "self", ".", "detector", ":", "\n", "                ", "detector", "=", "self", ".", "detector", "[", "d_name", "]", "\n", "_", ",", "rej", ",", "logits_cls", "=", "detector", "(", "img", ")", "\n", "rej_dict", "[", "d_name", "]", "=", "rej", "\n", "all_rej", "=", "torch", ".", "logical_or", "(", "all_rej", ",", "rej", ")", "\n", "", "return", "rej_dict", ",", "all_rej", ",", "logits_cls", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Only support for only_rej mode.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.get_thresh": [[80, 89], ["isinstance", "thresh.append", "logging.info", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "ContraNetDict.ContraNetDict.detector[].get_thresh"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.get_thresh"], ["", "", "def", "get_thresh", "(", "self", ",", "test_loader", ")", ":", "\n", "        ", "thresh", "=", "[", "]", "\n", "for", "d_name", "in", "self", ".", "detector", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "detector", "[", "d_name", "]", ",", "ContraNet2dist", ")", ":", "\n", "                ", "torch", ".", "random", ".", "manual_seed", "(", "1", ")", "# manual seed after D and DM", "\n", "", "thresh", ".", "append", "(", "self", ".", "detector", "[", "d_name", "]", ".", "get_thresh", "(", "test_loader", ")", ")", "\n", "logging", ".", "info", "(", "\"[detectorDict] threshold for {} = {}\"", ".", "format", "(", "\n", "d_name", ",", "thresh", "[", "-", "1", "]", ")", ")", "\n", "", "return", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.load_classifier": [[90, 96], ["torch.load", "torch.load", "torch.load", "torch.load", "ContraNetDict.ContraNetDict.classifier.load_state_dict", "logging.info"], "methods", ["None"], ["", "def", "load_classifier", "(", "self", ",", "path", ",", "key", "=", "None", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "key", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "checkpoint", "[", "key", "]", "\n", "", "self", ".", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "logging", ".", "info", "(", "\"[detectorDict] Loaded classifier from: {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack.__init__": [[47, 84], ["advertorch.attacks.base.Attack.__init__", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "predict", ",", "num_classes", ",", "confidence", "=", "0", ",", "\n", "targeted", "=", "False", ",", "learning_rate", "=", "0.01", ",", "\n", "binary_search_steps", "=", "9", ",", "max_iterations", "=", "10000", ",", "\n", "abort_early", "=", "True", ",", "initial_const", "=", "1e-3", ",", "\n", "clip_min", "=", "0.", ",", "clip_max", "=", "1.", ",", "loss_fn", "=", "None", ",", "normalize_fn", "=", "None", ",", "\n", "adaptive_evi", "=", "False", ",", "evi_train_median", "=", "None", ",", "\n", "adaptive_con", "=", "False", ",", "con_train_median", "=", "None", ")", ":", "\n", "        ", "\"\"\"Carlini Wagner L2 Attack implementation in pytorch.\"\"\"", "\n", "if", "loss_fn", "is", "not", "None", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\n", "\"This Attack currently do not support a different loss\"", "\n", "\" function other than the default. Setting loss_fn manually\"", "\n", "\" is not effective.\"", "\n", ")", "\n", "\n", "", "loss_fn", "=", "None", "\n", "\n", "super", "(", "CarliniWagnerLinfAttack", ",", "self", ")", ".", "__init__", "(", "\n", "predict", ",", "loss_fn", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "max_iterations", "=", "max_iterations", "\n", "self", ".", "binary_search_steps", "=", "binary_search_steps", "\n", "self", ".", "abort_early", "=", "abort_early", "\n", "self", ".", "confidence", "=", "confidence", "\n", "self", ".", "initial_const", "=", "initial_const", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "# The last iteration (if we run many steps) repeat the search once.", "\n", "self", ".", "repeat", "=", "binary_search_steps", ">=", "REPEAT_STEP", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "normalize_fn", "=", "normalize_fn", "\n", "\n", "self", ".", "adaptive_evi", "=", "adaptive_evi", "\n", "self", ".", "evi_train_median", "=", "evi_train_median", "\n", "self", ".", "adaptive_con", "=", "adaptive_con", "\n", "self", ".", "con_train_median", "=", "con_train_median", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._loss_fn": [[85, 117], ["torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "linfdistsq.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "advertorch.utils.clamp", "advertorch.utils.clamp", "advertorch.utils.clamp", "advertorch.utils.clamp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "output.logsumexp", "l.sum"], "methods", ["None"], ["", "def", "_loss_fn", "(", "self", ",", "output", ",", "y_onehot", ",", "linfdistsq", ",", "const", ")", ":", "\n", "# TODO: move this out of the class and make this the default loss_fn", "\n", "#   after having targeted tests implemented", "\n", "        ", "real", "=", "(", "y_onehot", "*", "output", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# TODO: make loss modular, write a loss class", "\n", "other", ",", "label_o", "=", "(", "(", "1.0", "-", "y_onehot", ")", "*", "output", "-", "(", "y_onehot", "*", "TARGET_MULT", ")", "\n", ")", ".", "max", "(", "1", ")", "\n", "label_0", "=", "F", ".", "one_hot", "(", "label_o", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "# - (y_onehot * TARGET_MULT) is for the true label not to be selected", "\n", "\n", "if", "self", ".", "adaptive_con", ":", "\n", "            ", "c", "=", "c_con", "\n", "", "else", ":", "\n", "            ", "c", "=", "self", ".", "confidence", "\n", "\n", "", "if", "self", ".", "targeted", ":", "\n", "            ", "loss1", "=", "clamp", "(", "other", "-", "real", "+", "c", ",", "min", "=", "0.", ")", "\n", "", "else", ":", "\n", "            ", "loss1", "=", "clamp", "(", "real", "-", "other", "+", "c", ",", "min", "=", "0.", ")", "\n", "\n", "# adaptive loss for evading evidence detector", "\n", "", "if", "self", ".", "adaptive_evi", ":", "\n", "            ", "loss1", "+=", "clamp", "(", "self", ".", "evi_train_median", "-", "output", ".", "logsumexp", "(", "dim", "=", "1", ")", ",", "min", "=", "0.", ")", "\n", "", "if", "self", ".", "adaptive_con", ":", "\n", "            ", "l", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "*", "label_0", "\n", "loss1", "=", "clamp", "(", "self", ".", "con_train_median", "-", "l", ".", "sum", "(", "dim", "=", "1", ")", ",", "min", "=", "0.", ")", "\n", "\n", "", "loss2", "=", "(", "linfdistsq", ")", ".", "sum", "(", ")", "\n", "loss1", "=", "torch", ".", "sum", "(", "const", "*", "loss1", ")", "\n", "loss", "=", "loss1", "+", "loss2", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._is_successful": [[118, 149], ["output.detach().clone.detach().clone.detach().clone", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "output.detach().clone.detach().clone.logsumexp", "output.detach().clone.detach().clone.logsumexp", "pred.new_zeros().byte", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "advertorch.attacks.utils.is_successful", "advertorch.attacks.utils.is_successful", "output.detach().clone.detach().clone.detach", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "advertorch.attacks.utils.is_successful", "pred.new_zeros", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len"], "methods", ["None"], ["", "def", "_is_successful", "(", "self", ",", "output", ",", "label", ",", "is_logits", ",", "pred_labels", "=", "None", ")", ":", "\n", "# determine success, see if confidence-adjusted logits give the right", "\n", "#   label", "\n", "\n", "        ", "if", "is_logits", ":", "\n", "            ", "output", "=", "output", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "self", ".", "targeted", ":", "\n", "                ", "output", "[", "torch", ".", "arange", "(", "len", "(", "label", ")", ")", ".", "long", "(", ")", ",", "\n", "label", "]", "-=", "self", ".", "confidence", "\n", "", "else", ":", "\n", "                ", "output", "[", "torch", ".", "arange", "(", "len", "(", "label", ")", ")", ".", "long", "(", ")", ",", "\n", "label", "]", "+=", "self", ".", "confidence", "\n", "", "con", ",", "pred", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ".", "max", "(", "1", ")", "\n", "evidence", "=", "output", ".", "logsumexp", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "pred", "=", "pred_labels", "\n", "if", "pred", "==", "INVALID_LABEL", ":", "\n", "                ", "return", "pred", ".", "new_zeros", "(", "pred", ".", "shape", ")", ".", "byte", "(", ")", "\n", "", "con", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "0", ")", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "evidence", "=", "output", ".", "logsumexp", "(", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "adaptive_evi", ":", "\n", "            ", "return", "is_successful", "(", "\n", "pred", ",", "label", ",", "self", ".", "targeted", ")", "&", "(", "\n", "evidence", ">", "self", ".", "evi_train_median", ")", "\n", "", "elif", "self", ".", "adaptive_con", ":", "\n", "            ", "return", "is_successful", "(", "\n", "pred", ",", "label", ",", "self", ".", "targeted", ")", "&", "(", "\n", "con", ">", "self", ".", "con_train_median", ")", "\n", "", "else", ":", "\n", "            ", "return", "is_successful", "(", "pred", ",", "label", ",", "self", ".", "targeted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._forward_and_update_delta": [[150, 167], ["optimizer.zero_grad", "advertorch.utils.tanh_rescale", "advertorch.utils.tanh_rescale", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "cwlinfattack.CarliniWagnerLinfAttack._loss_fn", "cwlinfattack.CarliniWagnerLinfAttack.backward", "optimizer.step", "cwlinfattack.CarliniWagnerLinfAttack.predict", "cwlinfattack.CarliniWagnerLinfAttack.predict", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "torch.abs().view", "cwlinfattack.CarliniWagnerLinfAttack.item", "cwlinfattack.CarliniWagnerLinfAttack.normalize_fn", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "advertorch.utils.tanh_rescale.size"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._loss_fn", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.predict", "home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.predict"], ["", "", "def", "_forward_and_update_delta", "(", "\n", "self", ",", "optimizer", ",", "x_atanh", ",", "delta", ",", "y_onehot", ",", "loss_coeffs", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "adv", "=", "tanh_rescale", "(", "delta", "+", "x_atanh", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "transimgs_rescale", "=", "tanh_rescale", "(", "x_atanh", ",", "self", ".", "clip_min", ",", "self", ".", "clip_max", ")", "\n", "if", "self", ".", "normalize_fn", "==", "None", ":", "\n", "            ", "output", "=", "self", ".", "predict", "(", "adv", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "predict", "(", "self", ".", "normalize_fn", "(", "adv", ")", ")", "\n", "", "linfdistsq", ",", "_", "=", "torch", ".", "max", "(", "\n", "torch", ".", "abs", "(", "adv", "-", "transimgs_rescale", ")", ".", "view", "(", "adv", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "self", ".", "_loss_fn", "(", "output", ",", "y_onehot", ",", "linfdistsq", ",", "loss_coeffs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", ",", "linfdistsq", ".", "data", ",", "output", ".", "data", ",", "adv", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._get_arctanh_x": [[168, 172], ["advertorch.utils.torch_arctanh", "advertorch.utils.clamp"], "methods", ["None"], ["", "def", "_get_arctanh_x", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "clamp", "(", "(", "x", "-", "self", ".", "clip_min", ")", "/", "(", "self", ".", "clip_max", "-", "self", ".", "clip_min", ")", ",", "\n", "min", "=", "0.", ",", "max", "=", "1.", ")", "*", "2", "-", "1", "\n", "return", "torch_arctanh", "(", "result", "*", "ONE_MINUS_EPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._update_if_smaller_dist_succeed": [[173, 195], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "cwlinfattack.CarliniWagnerLinfAttack._is_successful", "cwlinfattack.CarliniWagnerLinfAttack._is_successful"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._is_successful", "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._is_successful"], ["", "def", "_update_if_smaller_dist_succeed", "(", "\n", "self", ",", "adv_img", ",", "labs", ",", "output", ",", "linfdistsq", ",", "batch_size", ",", "\n", "cur_linfdistsqs", ",", "cur_labels", ",", "\n", "final_linfdistsqs", ",", "final_labels", ",", "final_advs", ",", "\n", "cur_output", ")", ":", "\n", "\n", "        ", "target_label", "=", "labs", "\n", "output_logits", "=", "output", "\n", "_", ",", "output_label", "=", "torch", ".", "max", "(", "output_logits", ",", "1", ")", "\n", "\n", "mask", "=", "(", "linfdistsq", "<", "cur_linfdistsqs", ")", "&", "self", ".", "_is_successful", "(", "\n", "output_logits", ",", "target_label", ",", "True", ")", "\n", "\n", "cur_linfdistsqs", "[", "mask", "]", "=", "linfdistsq", "[", "mask", "]", "# redundant", "\n", "cur_labels", "[", "mask", "]", "=", "output_label", "[", "mask", "]", "\n", "cur_output", "[", "mask", ",", ":", "]", "=", "output_logits", "[", "mask", ",", ":", "]", "\n", "\n", "mask", "=", "(", "linfdistsq", "<", "final_linfdistsqs", ")", "&", "self", ".", "_is_successful", "(", "\n", "output_logits", ",", "target_label", ",", "True", ")", "\n", "final_linfdistsqs", "[", "mask", "]", "=", "linfdistsq", "[", "mask", "]", "\n", "final_labels", "[", "mask", "]", "=", "output_label", "[", "mask", "]", "\n", "final_advs", "[", "mask", "]", "=", "adv_img", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._update_loss_coeffs": [[196, 223], ["range", "int", "cwlinfattack.CarliniWagnerLinfAttack._is_successful", "min", "max"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._is_successful"], ["", "def", "_update_loss_coeffs", "(", "\n", "self", ",", "labs", ",", "cur_labels", ",", "batch_size", ",", "loss_coeffs", ",", "\n", "coeff_upper_bound", ",", "coeff_lower_bound", ",", "\n", "cur_output", ")", ":", "\n", "\n", "# TODO: remove for loop, not significant, since only called during each", "\n", "# binary search step", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "cur_labels", "[", "ii", "]", "=", "int", "(", "cur_labels", "[", "ii", "]", ")", "\n", "if", "self", ".", "_is_successful", "(", "\n", "cur_output", "[", "ii", "]", ",", "\n", "labs", "[", "ii", "]", ",", "\n", "False", ",", "pred_labels", "=", "cur_labels", "[", "ii", "]", ")", ":", "\n", "                ", "coeff_upper_bound", "[", "ii", "]", "=", "min", "(", "\n", "coeff_upper_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "", "else", ":", "\n", "                ", "coeff_lower_bound", "[", "ii", "]", "=", "max", "(", "\n", "coeff_lower_bound", "[", "ii", "]", ",", "loss_coeffs", "[", "ii", "]", ")", "\n", "if", "coeff_upper_bound", "[", "ii", "]", "<", "UPPER_CHECK", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "=", "(", "\n", "coeff_lower_bound", "[", "ii", "]", "+", "coeff_upper_bound", "[", "ii", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                    ", "loss_coeffs", "[", "ii", "]", "*=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack.perturb": [[224, 283], ["cwlinfattack.CarliniWagnerLinfAttack._verify_and_process_inputs", "advertorch.utils.replicate_input", "len", "advertorch.utils.replicate_input.new_zeros", "cwlinfattack.CarliniWagnerLinfAttack._get_arctanh_x", "advertorch.utils.to_one_hot().float", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "cwlinfattack.CarliniWagnerLinfAttack._get_predicted_label", "advertorch.utils.replicate_input.new_ones", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "range", "cwlinfattack.CarliniWagnerLinfAttack._update_loss_coeffs", "advertorch.utils.to_one_hot", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "cwlinfattack.CarliniWagnerLinfAttack._forward_and_update_delta", "cwlinfattack.CarliniWagnerLinfAttack._update_if_smaller_dist_succeed", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "advertorch.utils.replicate_input.size"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._get_arctanh_x", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._update_loss_coeffs", "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._forward_and_update_delta", "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack._update_if_smaller_dist_succeed"], ["", "", "", "", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_verify_and_process_inputs", "(", "x", ",", "y", ")", "\n", "\n", "# Initialization", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "", "x", "=", "replicate_input", "(", "x", ")", "\n", "batch_size", "=", "len", "(", "x", ")", "\n", "coeff_lower_bound", "=", "x", ".", "new_zeros", "(", "batch_size", ")", "\n", "coeff_upper_bound", "=", "x", ".", "new_ones", "(", "batch_size", ")", "*", "CARLINI_COEFF_UPPER", "\n", "loss_coeffs", "=", "torch", ".", "ones_like", "(", "y", ")", ".", "float", "(", ")", "*", "self", ".", "initial_const", "\n", "final_linfdistsqs", "=", "[", "CARLINI_LinfDIST_UPPER", "]", "*", "batch_size", "\n", "final_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "final_advs", "=", "x", "\n", "x_atanh", "=", "self", ".", "_get_arctanh_x", "(", "x", ")", "\n", "y_onehot", "=", "to_one_hot", "(", "y", ",", "self", ".", "num_classes", ")", ".", "float", "(", ")", "\n", "\n", "final_linfdistsqs", "=", "torch", ".", "FloatTensor", "(", "final_linfdistsqs", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "final_labels", "=", "torch", ".", "LongTensor", "(", "final_labels", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "# Start binary search", "\n", "for", "outer_step", "in", "range", "(", "self", ".", "binary_search_steps", ")", ":", "\n", "            ", "delta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros_like", "(", "x", ")", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "delta", "]", ",", "lr", "=", "self", ".", "learning_rate", ")", "\n", "cur_linfdistsqs", "=", "[", "CARLINI_LinfDIST_UPPER", "]", "*", "batch_size", "\n", "cur_labels", "=", "[", "INVALID_LABEL", "]", "*", "batch_size", "\n", "cur_linfdistsqs", "=", "torch", ".", "FloatTensor", "(", "cur_linfdistsqs", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "cur_labels", "=", "torch", ".", "LongTensor", "(", "cur_labels", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "prevloss", "=", "PREV_LOSS_INIT", "\n", "\n", "# record current output", "\n", "cur_output", "=", "torch", ".", "zeros", "(", "\n", "x", ".", "size", "(", ")", "[", "0", "]", ",", "\n", "self", ".", "num_classes", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "(", "self", ".", "repeat", "and", "outer_step", "==", "(", "self", ".", "binary_search_steps", "-", "1", ")", ")", ":", "\n", "                ", "loss_coeffs", "=", "coeff_upper_bound", "\n", "", "for", "ii", "in", "range", "(", "self", ".", "max_iterations", ")", ":", "\n", "                ", "loss", ",", "linfdistsq", ",", "output", ",", "adv_img", "=", "self", ".", "_forward_and_update_delta", "(", "\n", "optimizer", ",", "x_atanh", ",", "delta", ",", "y_onehot", ",", "loss_coeffs", ")", "\n", "if", "self", ".", "abort_early", ":", "\n", "                    ", "if", "ii", "%", "(", "self", ".", "max_iterations", "//", "NUM_CHECKS", "or", "1", ")", "==", "0", ":", "\n", "                        ", "if", "loss", ">", "prevloss", "*", "ONE_MINUS_EPS", ":", "\n", "                            ", "break", "\n", "", "prevloss", "=", "loss", "\n", "\n", "", "", "self", ".", "_update_if_smaller_dist_succeed", "(", "\n", "adv_img", ",", "y", ",", "output", ",", "linfdistsq", ",", "batch_size", ",", "\n", "cur_linfdistsqs", ",", "cur_labels", ",", "\n", "final_linfdistsqs", ",", "final_labels", ",", "final_advs", ",", "\n", "cur_output", ")", "\n", "\n", "", "self", ".", "_update_loss_coeffs", "(", "\n", "y", ",", "cur_labels", ",", "batch_size", ",", "\n", "loss_coeffs", ",", "coeff_upper_bound", ",", "coeff_lower_bound", ",", "\n", "cur_output", ")", "\n", "\n", "", "return", "final_advs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet._DenseLayer.__init__": [[11, 24], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet._DenseLayer.forward": [[25, 31], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_2.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet._DenseBlock.__init__": [[34, 40], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "\n", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet._Transition.__init__": [[43, 50], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet.DenseNet.__init__": [[66, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet._Transition", "densenet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "10", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "\n", "# CIFAR-10: kernel_size 7 ->3, stride 2->1, padding 3->1", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "## END", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet.DenseNet.forward": [[113, 119], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "densenet.DenseNet.classifier", "densenet.DenseNet.size", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet._densenet": [[120, 127], ["densenet.DenseNet", "os.path.dirname", "torch.load", "torch.load", "torch.load", "DenseNet.load_state_dict"], "function", ["None"], ["", "", "def", "_densenet", "(", "arch", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "pretrained", ",", "progress", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "script_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "script_dir", "+", "'/state_dicts/'", "+", "arch", "+", "'.pt'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet.densenet121": [[129, 139], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet121", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet121'", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet.densenet161": [[141, 151], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet161", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet161'", ",", "48", ",", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "96", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet.densenet169": [[153, 163], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet169", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet169'", ",", "32", ",", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.densenet.densenet201": [[165, 175], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet201", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet201'", ",", "32", ",", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2_3.ContraNet2_3ssH.__init__": [[9, 19], ["ContraNetDictH.ContraNetDictH.__init__", "ContraNet2_3.ContraNet2_3ssH.detector.add_module", "ContraNet2_3.ContraNet2_3ssH.detector.add_module", "ContraNet2_3.ContraNet2_3ssH.detector.add_module", "ContraNet2D.ContraNet2D.ContraNet2D", "ContraNet2.ContraNet2.ContraNet2", "ContraNet2dist.ContraNet2dist.ContraNet2dist"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "None", ",", "model_norm", "=", "None", ",", "\n", "hard_drop", "=", "[", "0.12", "]", ")", ":", "\n", "        ", "super", "(", "ContraNet2_3ssH", ",", "self", ")", ".", "__init__", "(", "\n", "classifier", ",", "cls_norm", ",", "hard_drop", "=", "hard_drop", ")", "\n", "self", ".", "detector", ".", "add_module", "(", "\"D_model\"", ",", "ContraNet2D", "(", "\n", "cfgs", ",", "pars", ",", "self", ".", "classifier", ",", "cls_norm", ",", "model_norm", ")", ")", "\n", "self", ".", "detector", ".", "add_module", "(", "\"DMmodel\"", ",", "ContraNet2", "(", "\n", "cfgs", ",", "pars", ",", "self", ".", "classifier", ",", "cls_norm", ",", "model_norm", ")", ")", "\n", "self", ".", "detector", ".", "add_module", "(", "\"SSmodel\"", ",", "ContraNet2dist", "(", "\n", "cfgs", ",", "pars", ",", "self", ".", "classifier", ",", "cls_norm", ",", "model_norm", ",", "distance", "=", "\"ssim\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.baseWrapper.BaseWrapper.__init__": [[8, 16], ["torchvision.transforms.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "criterion", ",", "cls_norm", ",", "targeted", "=", "False", ",", "x_val_min", "=", "0", ",", "\n", "x_val_max", "=", "1", ")", ":", "\n", "        ", "self", ".", "net", "=", "net", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "x_val_min", "=", "x_val_min", "\n", "self", ".", "x_val_max", "=", "x_val_max", "\n", "self", ".", "cls_norm", "=", "Normalize", "(", "*", "cls_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.baseWrapper.BaseWrapper.attack": [[17, 32], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "attack", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ",", "device", ":", "torch", ".", "device", ",", "\n", "training", "=", "False", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"perform attack here\n\n        Args:\n            x (torch.Tensor): input x\n            y (torch.Tensor): true label y\n            device (torch.device): device for the model\n            training (bool, optional): attack as tringing. Defaults to False.\n\n        Returns:\n            Tuple[torch.Tensor, torch.Tensor]: x_adv, cls_pred\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.baseWrapper.BaseWrapper.adv_by_suss": [[33, 45], ["baseWrapper.BaseWrapper.attack", "y.to.to.to", "torch.where", "torch.where"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.attack", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "def", "adv_by_suss", "(", "self", ",", "x", ",", "y", ",", "device", ",", "training", "=", "False", ")", ":", "\n", "        ", "x_adv", ",", "pred_y", "=", "self", ".", "attack", "(", "x", ",", "y", ",", "device", ",", "training", "=", "training", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "fail_mask", "=", "torch", ".", "where", "(", "pred_y", "==", "y", ")", "\n", "suss_mask", "=", "torch", ".", "where", "(", "pred_y", "!=", "y", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "return", "x_adv", "[", "suss_mask", "]", ",", "pred_y", "[", "suss_mask", "]", ",", "y", "[", "suss_mask", "]", ",", "x_adv", "[", "fail_mask", "]", ",", "y", "[", "fail_mask", "]", "\n", "", "else", ":", "\n", "            ", "return", "x_adv", "[", "suss_mask", "]", ",", "pred_y", "[", "suss_mask", "]", ",", "x_adv", "[", "fail_mask", "]", ",", "pred_y", "[", "fail_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.baseWrapper.BaseWrapper.print_stat": [[46, 50], ["None"], "methods", ["None"], ["", "", "def", "print_stat", "(", "self", ")", ":", "\n", "        ", "\"\"\"print statistic info. Defult do nothing.\n        \"\"\"", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2DDmlv2.ContraNet2DDmlv2.__init__": [[9, 19], ["torch.Module.__init__", "ContraNet2D.ContraNet2D.ContraNet2D", "ContraNet2.ContraNet2.ContraNet2"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ",", "pars", ",", "classifier", ",", "cls_norm", "=", "None", ",", "model_norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "ContraNet2DDmlv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "Dmodel", "=", "ContraNet2D", "(", "\n", "cfgs", ",", "pars", ",", "self", ".", "classifier", ",", "cls_norm", ",", "model_norm", ")", "\n", "self", ".", "DMmodel", "=", "ContraNet2", "(", "\n", "cfgs", ",", "pars", ",", "self", ".", "classifier", ",", "cls_norm", ",", "model_norm", ")", "\n", "self", ".", "cls_norm", "=", "self", ".", "Dmodel", ".", "cls_norm", "\n", "self", ".", "Dmodel", ".", "debug", "=", "True", "\n", "self", ".", "debug", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2DDmlv2.ContraNet2DDmlv2.only_rej": [[25, 29], ["None"], "methods", ["None"], ["", "@", "only_rej", ".", "setter", "\n", "def", "only_rej", "(", "self", ",", "value", ":", "bool", ")", ":", "\n", "        ", "self", ".", "Dmodel", ".", "_only_rej", "=", "value", "\n", "self", ".", "DMmodel", ".", "_only_rej", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2DDmlv2.ContraNet2DDmlv2.thresh": [[34, 39], ["len"], "methods", ["None"], ["", "@", "thresh", ".", "setter", "\n", "def", "thresh", "(", "self", ",", "thresh", ":", "List", ")", ":", "\n", "        ", "assert", "len", "(", "thresh", ")", "==", "2", "\n", "self", ".", "Dmodel", ".", "_thresh", "=", "thresh", "[", "0", "]", "\n", "self", ".", "DMmodel", ".", "_thresh", "=", "thresh", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2DDmlv2.ContraNet2DDmlv2.forward": [[40, 57], ["ContraNet2DDmlv2.ContraNet2DDmlv2.Dmodel", "dis_rej.to().byte.to().byte.to().byte", "ContraNet2DDmlv2.ContraNet2DDmlv2.DMmodel", "ContraNet2DDmlv2.ContraNet2DDmlv2.DMmodel", "dm_rej.to.to.to", "dis_rej.to().byte.to().byte.to", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "_", ",", "dis_rej", "=", "self", ".", "Dmodel", "(", "img", ")", "\n", "dis_rej", "=", "dis_rej", ".", "to", "(", "img", ".", "device", ")", ".", "byte", "(", ")", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "DMmodel", ".", "ddebug", "=", "True", "\n", "dm_logits", ",", "dm_rej", ",", "logits_cls", "=", "self", ".", "DMmodel", "(", "(", "img", ",", "dis_rej", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "DMmodel", ".", "ddebug", "=", "False", "\n", "dm_logits", "=", "self", ".", "DMmodel", "(", "(", "img", ",", "dis_rej", ")", ")", "\n", "", "final_logits", "=", "dm_logits", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "dm_rej", "=", "dm_rej", ".", "to", "(", "img", ".", "device", ")", "\n", "return", "final_logits", ",", "dis_rej", ",", "dm_rej", ",", "torch", ".", "logical_or", "(", "\n", "dis_rej", ",", "dm_rej", ")", ",", "logits_cls", "\n", "", "else", ":", "\n", "            ", "return", "final_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNet2DDmlv2.ContraNet2DDmlv2.load_classifier": [[58, 64], ["torch.load", "torch.load", "torch.load", "torch.load", "ContraNet2DDmlv2.ContraNet2DDmlv2.classifier.load_state_dict", "print"], "methods", ["None"], ["", "", "def", "load_classifier", "(", "self", ",", "path", ",", "key", "=", "None", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "if", "key", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "checkpoint", "[", "key", "]", "\n", "", "self", ".", "classifier", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "print", "(", "\"Loaded classifier from: {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.__init__": [[14, 26], ["model_utils.check_params", "torch.Module.__init__", "torch.Module.__init__", "torch.Module.__init__", "generators.resnet64.ResNetGenerator", "generators.network_VAE.Encoder", "generators.network_VAE.VAE"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.check_params", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ")", ":", "\n", "# do not call super().__init__() here", "\n", "        ", "assert", "check_params", "(", "cfgs", ",", "None", ",", "cfgs_flag", "=", "cfgs_flag", ")", "\n", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "_n_cls", "=", "cfgs", ".", "num_classes", "+", "1", "\n", "self", ".", "gen", "=", "ResNetGenerator", "(", "\n", "cfgs", ".", "gen_num_features", ",", "cfgs", ".", "gen_dim_z", ",", "cfgs", ".", "gen_bottom_width", ",", "\n", "activation", "=", "F", ".", "relu", ",", "num_classes", "=", "_n_cls", ",", "\n", "distribution", "=", "cfgs", ".", "gen_distribution", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "cfgs", ")", "\n", "self", ".", "vae", "=", "VAE", "(", "cfgs", ")", "\n", "self", ".", "class_num", "=", "cfgs", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraCGANv1.ContraCGANv1.resume_weights": [[27, 34], ["ContraCGANv1.ContraCGANv1.gen.load_state_dict", "print", "ContraCGANv1.ContraCGANv1.encoder.load_state_dict", "print", "ContraCGANv1.ContraCGANv1.vae.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "resume_weights", "(", "self", ",", "cfgs", ")", ":", "\n", "        ", "self", ".", "gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfgs", ".", "G_weights", ")", "[", "'model'", "]", ")", "\n", "print", "(", "\"Loaded gen from: {}\"", ".", "format", "(", "cfgs", ".", "G_weights", ")", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfgs", ".", "E_weights", ")", "[", "'model'", "]", ")", "\n", "print", "(", "\"Loaded encoder from: {}\"", ".", "format", "(", "cfgs", ".", "E_weights", ")", ")", "\n", "self", ".", "vae", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfgs", ".", "V_weights", ")", "[", "'model'", "]", ")", "\n", "print", "(", "\"Loaded vae from: {}\"", ".", "format", "(", "cfgs", ".", "V_weights", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.__init__": [[7, 16], ["baseWrapper.BaseWrapper.__init__", "range", "int"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "criterion", ",", "cls_norm", ",", "iters", "=", "20", ",", "alpha", "=", "0.005", ",", "\n", "targeted", "=", "False", ",", "max_eps", "=", "0.08", ",", "x_val_min", "=", "0", ",", "x_val_max", "=", "1", ")", ":", "\n", "        ", "super", "(", "Pgd", ",", "self", ")", ".", "__init__", "(", "net", ",", "criterion", ",", "cls_norm", ",", "targeted", ",", "\n", "x_val_min", ",", "x_val_max", ")", "\n", "self", ".", "max_eps", "=", "max_eps", "\n", "self", ".", "iters", "=", "iters", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "suss_stat", "=", "{", "i", "*", "0.01", ":", "{", "\"suss\"", ":", "0", ",", "\"total\"", ":", "0", "}", "\n", "for", "i", "in", "range", "(", "2", ",", "int", "(", "self", ".", "max_eps", "//", "0.01", ")", "+", "1", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.get_random_start": [[17, 19], ["torch.rand_like"], "methods", ["None"], ["", "def", "get_random_start", "(", "self", ",", "x0", ",", "epsilon", ")", ":", "\n", "        ", "return", "x0", "+", "(", "torch", ".", "rand_like", "(", "x0", ")", "*", "2", "*", "epsilon", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.project": [[20, 22], ["torch.clamp"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "x", ",", "x0", ",", "epsilon", ")", ":", "\n", "        ", "return", "x0", "+", "torch", ".", "clamp", "(", "x", "-", "x0", ",", "-", "epsilon", ",", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.attack": [[23, 58], ["pgdWrapper.Pgd.net.eval", "x0.to.to.to", "y.to.to.to", "pgdWrapper.Pgd.get_random_start", "torch.clamp().detach_.detach", "ValueError", "torch.enable_grad", "range", "torch.no_grad", "pgdWrapper.Pgd.net", "pgdWrapper.Pgd.max", "torch.clamp().detach_.detach.detach", "cls_pred.detach", "x0.to.to.min", "x0.to.to.max", "random.randint", "torch.clamp().detach_.requires_grad_", "pgdWrapper.Pgd.net", "pgdWrapper.Pgd.net.zero_grad", "pgdWrapper.Pgd.criterion", "pgdWrapper.Pgd.backward", "pgdWrapper.Pgd.project", "torch.clamp().detach_", "pgdWrapper.Pgd.cls_norm", "pgdWrapper.Pgd.cls_norm", "torch.clamp().detach_.grad.sign", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.get_random_start", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.project"], ["", "def", "attack", "(", "self", ",", "x0", ",", "y", ",", "device", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "x0", ".", "min", "(", ")", "<", "self", ".", "x_val_min", "or", "x0", ".", "max", "(", ")", ">", "self", ".", "x_val_max", ":", "\n", "            ", "ValueError", "(", "\"Input data should in the range of [{}, {}]\"", ".", "format", "(", "\n", "self", ".", "x_val_min", ",", "self", ".", "x_val_max", "\n", ")", ")", "\n", "", "self", ".", "net", ".", "eval", "(", ")", "\n", "x0", "=", "x0", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "if", "training", ":", "\n", "            ", "eps", "=", "random", ".", "randint", "(", "2", ",", "self", ".", "max_eps", "//", "0.01", ")", "*", "0.01", "\n", "", "else", ":", "\n", "            ", "eps", "=", "0.03", "\n", "", "x", "=", "self", ".", "get_random_start", "(", "x0", ",", "eps", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "                ", "x", ".", "requires_grad_", "(", ")", "\n", "out_adv", "=", "self", ".", "net", "(", "self", ".", "cls_norm", "(", "x", ")", ")", "\n", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "out_adv", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "alpha", "*", "x", ".", "grad", ".", "sign", "(", ")", "\n", "x", "=", "self", ".", "project", "(", "x", ",", "x0", ",", "eps", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "self", ".", "x_val_min", ",", "\n", "max", "=", "self", ".", "x_val_max", ")", ".", "detach_", "(", ")", "\n", "", "", "x_adv", "=", "x", ".", "detach", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "h_adv", "=", "self", ".", "net", "(", "self", ".", "cls_norm", "(", "x_adv", ")", ")", "\n", "_", ",", "cls_pred", "=", "h_adv", ".", "max", "(", "1", ")", "\n", "if", "training", ":", "\n", "                ", "suss", "=", "(", "cls_pred", "!=", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "suss_stat", "[", "eps", "]", "[", "\"suss\"", "]", "+=", "suss", "\n", "self", ".", "suss_stat", "[", "eps", "]", "[", "\"total\"", "]", "+=", "x0", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "return", "x_adv", ".", "detach", "(", ")", ",", "cls_pred", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.pgdWrapper.Pgd.print_stat": [[59, 66], ["print"], "methods", ["None"], ["", "def", "print_stat", "(", "self", ")", ":", "\n", "        ", "for", "eps", "in", "self", ".", "suss_stat", ":", "\n", "            ", "suss", "=", "self", ".", "suss_stat", "[", "eps", "]", "[", "\"suss\"", "]", "\n", "total", "=", "self", ".", "suss_stat", "[", "eps", "]", "[", "\"total\"", "]", "\n", "if", "total", ">", "0", ":", "\n", "                ", "print", "(", "\"on eps={:.2f}: total {:d}, suss {:d}, rate {:.2f}\"", ".", "\n", "format", "(", "eps", ",", "total", ",", "suss", ",", "suss", "/", "total", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.Encoder.__init__": [[57, 115], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "n_extra_layers", "=", "0", ",", "add_final_conv", "=", "True", ",", "is_gan", "=", "False", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isize", "=", "opt", ".", "isize", "\n", "self", ".", "nc", "=", "opt", ".", "nc", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "\n", "if", "is_gan", ":", "\n", "            ", "self", ".", "nz", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "", "assert", "self", ".", "isize", "%", "16", "==", "0", ",", "\"isize has to be a multiple of 16\"", "\n", "\n", "main", "=", "nn", ".", "Sequential", "(", ")", "# model\u6a21\u578b", "\n", "# input is nc x isize x isize", "\n", "\n", "# main.add_module('initial-conv',", "\n", "# nn.Conv2d(nc, ndf, 1, 1, 0, bias=False))  # \uff0832+2\u00d70-1\uff09/1+1=32 #wgan-gp kernel\u662f3", "\n", "# main.add_module('initial-relu',", "\n", "# nn.LeakyReLU(0.2, inplace=True))", "\n", "\n", "main", ".", "add_module", "(", "\n", "'initial-conv-{0}-{1}'", ".", "format", "(", "self", ".", "nc", ",", "self", ".", "ndf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "nc", ",", "self", ".", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "# \uff0832+2\u00d71-4\uff09/2+1=16 #wgan-gp kernel\u662f3###\u7b2c\u4e00\u4e2andf\u662fnc", "\n", "main", ".", "add_module", "(", "'initial-relu-{0}'", ".", "format", "(", "self", ".", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "csize", ",", "cndf", "=", "self", ".", "isize", "/", "2", ",", "self", ".", "ndf", "# \u56fe\u50cf\u7684\u5927\u5c0f\u7f29\u5c0f\u4e24\u500d  channel\u6570\u91cf\u4e0d\u53d8 16\u5bf9\u5e9464", "\n", "# self.netg.main.initial-relu-64", "\n", "\n", "# Extra layers", "\n", "for", "t", "in", "range", "(", "n_extra_layers", ")", ":", "# \u6ca1\u6709\u989d\u5916\u7684\u5377\u79ef\u5c42", "\n", "            ", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-conv'", ".", "format", "(", "t", ",", "cndf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cndf", ",", "cndf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-batchnorm'", ".", "format", "(", "t", ",", "cndf", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cndf", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-relu'", ".", "format", "(", "t", ",", "cndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "", "while", "csize", ">", "4", ":", "# \u56fe\u50cf\u5927\u4e8e4\u7684\u8bdd\u5c31\u7ee7\u7eed 16 8 4 \u4e00\u5171\u65b0\u52a0\u4e24\u5c42\u5377\u79ef\u5c42", "\n", "            ", "in_feat", "=", "cndf", "\n", "out_feat", "=", "cndf", "*", "2", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-{1}-conv'", ".", "format", "(", "in_feat", ",", "out_feat", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_feat", ",", "out_feat", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-batchnorm'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_feat", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-relu'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "cndf", "=", "cndf", "*", "2", "# channel \u53d8\u4e3a2\u500d", "\n", "csize", "=", "csize", "/", "2", "# \u56fe\u50cf\u7f29\u5c0f\u4e24\u500d", "\n", "\n", "# state size. K x 4 x 4 #\u6700\u540e\u4e00\u5c42\u5377\u79ef  \u4e00\u5171\u56db\u5c42\u5377\u79ef", "\n", "", "if", "add_final_conv", ":", "\n", "            ", "main", ".", "add_module", "(", "\n", "'final-{0}-{1}-conv'", ".", "format", "(", "cndf", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cndf", ",", "self", ".", "nz", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "# \u56fe\u50cf\u5927\u5c0f\u73b0\u5728\u5df2\u7ecf\u5c0f\u4e8e4\u4e86 (\uff083\uff09+2\u00d70-4\uff09/2+1=1  nz=100", "\n", "\n", "", "self", ".", "main", "=", "main", "\n", "# self.z_mean_calc = nn.Linear(self.nz, self.nz)  # \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u5747\u503c \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "# self.z_log_var_calc = nn.Linear(self.nz, self.nz)  # \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u65b9\u5dee \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.Encoder.forward": [[118, 127], ["network_VAE.Encoder.main"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.main"], ["#print('encoder encoder encoder')", "\n", "        ", "latent_i", "=", "self", ".", "main", "(", "input", ")", "\n", "#z_mean = self.z_mean_calc(latent_i.view(-1, self.nz))", "\n", "#z_log_var = self.z_log_var_calc(latent_i.view(-1, self.nz))", "\n", "# epsilon = torch.randn(size=(z_mean.view(-1,self.nz).shape[0], self.nz)).to(self.device) #Sampling", "\n", "# latent_i_star = z_mean + torch.exp(z_log_var / 2) * epsilon  #Sampling", "\n", "return", "latent_i", "\n", "\n", "##", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.VAE.__init__": [[132, 145], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["self", ".", "isize", "=", "opt", ".", "isize", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "nc", "=", "opt", ".", "nc", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "assert", "self", ".", "isize", "%", "16", "==", "0", ",", "\"isize has to be a multiple of 16\"", "\n", "\n", "self", ".", "z_mean_calc", "=", "nn", ".", "Linear", "(", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u5747\u503c \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "self", ".", "z_log_var_calc", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u65b9\u5dee \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "z_mean", "=", "self", ".", "z_mean_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "z_log_var", "=", "self", ".", "z_log_var_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.VAE.forward": [[146, 173], ["network_VAE.VAE.z_mean_calc", "network_VAE.VAE.z_log_var_calc", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "input.view", "input.view", "latent_i_star.type", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "z_mean_0.view"], "methods", ["None"], ["\n", "#stamp = self.get_stamp(target,opt)", "\n", "\n", "# \u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206", "\n", "z_mean_0", "=", "z_mean", "# * stamp", "\n", "z_log_var_0", "=", "z_log_var", "# * stamp", "\n", "epsilon", "=", "torch", ".", "randn", "(", "\n", "size", "=", "(", "z_mean_0", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "nz", ")", ")", ".", "to", "(", "input", ".", "device", ")", "# Sampling", "\n", "# Sampling", "\n", "latent_i_star", "=", "z_mean_0", "+", "torch", ".", "exp", "(", "z_log_var_0", "/", "2", ")", "*", "epsilon", "\n", "\n", "# \u4e0d\u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206 bias \u53ef\u8c03\u3002\u6700\u521d\u4e3a 1", "\n", "#bias = 100", "\n", "#z_mean_flip = (bias-z_mean) * (1-stamp)", "\n", "#z_log_var_flip = (1-z_log_var) * (1-stamp)", "\n", "\n", "# \u7ec4\u5408\u5728\u4e00\u8d77\u8fd4\u56de", "\n", "z_mean_ret", "=", "z_mean_0", "# + z_mean_flip", "\n", "z_log_var_ret", "=", "z_log_var_0", "# + z_log_var_flip", "\n", "\n", "return", "z_mean_ret", ",", "z_log_var_ret", ",", "latent_i_star", ".", "float", "(", ")", "\n", "\n", "\n", "", "", "class", "Decoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    DCGAN DECODER NETWORK\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.Decoder.__init__": [[180, 231], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "range", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "self", ".", "ngf", "=", "opt", ".", "ngf", "\n", "assert", "self", ".", "isize", "%", "16", "==", "0", ",", "\"isize has to be a multiple of 16\"", "\n", "\n", "cngf", ",", "tisize", "=", "self", ".", "ngf", "//", "2", ",", "4", "# ngf=64  \u56fe\u50cf\u5927\u5c0f      32\u4e2achannel\u5bf9\u5e944\u7684\u56fe\u50cf\u5927\u5c0f", "\n", "while", "tisize", "!=", "self", ".", "isize", ":", "\n", "            ", "cngf", "=", "cngf", "*", "2", "\n", "tisize", "=", "tisize", "*", "2", "\n", "\n", "", "main", "=", "nn", ".", "Sequential", "(", ")", "\n", "# input is Z, going into a convolution", "\n", "main", ".", "add_module", "(", "'initial-{0}-{1}-convt'", ".", "format", "(", "self", ".", "nz", ",", "cngf", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "nz", ",", "cngf", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'initial-{0}-batchnorm'", ".", "format", "(", "cngf", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cngf", ")", ")", "\n", "main", ".", "add_module", "(", "'initial-{0}-relu'", ".", "format", "(", "cngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "csize", ",", "_", "=", "4", ",", "cngf", "\n", "while", "csize", "<", "self", ".", "isize", "//", "2", ":", "\n", "            ", "main", ".", "add_module", "(", "\n", "'pyramid-{0}-{1}-convt'", ".", "format", "(", "cngf", ",", "cngf", "//", "2", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "cngf", ",", "cngf", "//", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-batchnorm'", ".", "format", "(", "cngf", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cngf", "//", "2", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-relu'", ".", "format", "(", "cngf", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "cngf", "=", "cngf", "//", "2", "\n", "csize", "=", "csize", "*", "2", "# \u914d\u5408\u524d\u9762", "\n", "\n", "# Extra layers", "\n", "", "for", "t", "in", "range", "(", "n_extra_layers", ")", ":", "\n", "            ", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-conv'", ".", "format", "(", "t", ",", "cngf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cngf", ",", "cngf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-batchnorm'", ".", "format", "(", "t", ",", "cngf", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cngf", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-relu'", ".", "format", "(", "t", ",", "cngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "main", ".", "add_module", "(", "'final-{0}-{1}-convt'", ".", "format", "(", "cngf", ",", "self", ".", "nc", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "cngf", ",", "self", ".", "nc", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'final-{0}-tanh'", ".", "format", "(", "self", ".", "nc", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "# \u9010\u5143\u7d20", "\n", "self", ".", "main", "=", "main", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.Decoder.forward": [[232, 235], ["network_VAE.Decoder.main"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.main"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.weights_init": [[9, 23], ["classname.find", "mod.weight.data.normal_", "classname.find", "mod.weight.data.normal_", "mod.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "mod", ")", ":", "\n", "    ", "\"\"\"\n    Custom weights initialization called on netG, netD and netE\n    :param m:\n    :return:\n    \"\"\"", "\n", "#print(\"mod=\", mod)", "\n", "classname", "=", "mod", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "mod", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "#print('BatchNorm initial')", "\n", "        ", "mod", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "mod", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.weights_init_WD": [[25, 36], ["classname.find", "torch.init.xavier_normal_"], "function", ["None"], ["", "", "def", "weights_init_WD", "(", "mod", ")", ":", "\n", "    ", "\"\"\"\n    Custom weights initialization called on netG, netD and netE\n    :param m:\n    :return:\n    \"\"\"", "\n", "#print(\"mod=\", mod)", "\n", "classname", "=", "mod", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "#mod.weight.data.normal_(0.0, 0.02)", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "mod", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.network_VAE.weights_init_info": [[38, 48], ["classname.find", "torch.init.xavier_normal_"], "function", ["None"], ["", "", "def", "weights_init_info", "(", "mod", ")", ":", "\n", "    ", "\"\"\"\n    Custom weights initialization called on netG, netD and netE\n    :param m:\n    :return:\n    \"\"\"", "\n", "classname", "=", "mod", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# mod.weight.data.normal_(0.0, 0.02)", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "mod", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.test_try": [[135, 139], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.ResNet18"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.GenBlock.__init__": [[18, 62], ["torch.Module.__init__", "ConditionalBatchNorm2d_for_skip_and_shared", "ConditionalBatchNorm2d_for_skip_and_shared", "ConditionalBatchNorm2d_for_skip_and_shared", "ConditionalBatchNorm2d_for_skip_and_shared", "batchnorm_2d", "batchnorm_2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_spectral_norm", ",", "activation_fn", ",", "conditional_bn", ",", "z_dims_after_concat", ",", "\n", "upsample", ",", "channel_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conditional_bn", "=", "conditional_bn", "\n", "self", ".", "in_channels", ",", "self", ".", "out_channels", "=", "in_channels", ",", "out_channels", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "hidden_channels", "=", "self", ".", "in_channels", "//", "channel_ratio", "\n", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "num_features", "=", "in_channels", ",", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "self", ".", "bn2", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "num_features", "=", "self", ".", "hidden_channels", ",", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "self", ".", "bn3", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "num_features", "=", "self", ".", "hidden_channels", ",", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "self", ".", "bn4", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "num_features", "=", "self", ".", "hidden_channels", ",", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "self", ".", "hidden_channels", ")", "\n", "self", ".", "bn3", "=", "batchnorm_2d", "(", "in_features", "=", "self", ".", "hidden_channels", ")", "\n", "self", ".", "bn4", "=", "batchnorm_2d", "(", "in_features", "=", "self", ".", "hidden_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "self", ".", "hidden_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "out_channels", "=", "self", ".", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "snconv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "out_channels", "=", "self", ".", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "snconv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "self", ".", "hidden_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "out_channels", "=", "self", ".", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "out_channels", "=", "self", ".", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.GenBlock.forward": [[64, 82], ["big_resnet_deep.GenBlock.conv2d1", "big_resnet_deep.GenBlock.activation", "big_resnet_deep.GenBlock.conv2d2", "big_resnet_deep.GenBlock.conv2d3", "big_resnet_deep.GenBlock.conv2d4", "big_resnet_deep.GenBlock.activation", "big_resnet_deep.GenBlock.bn2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet_deep.GenBlock.activation", "big_resnet_deep.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet_deep.GenBlock.bn1", "big_resnet_deep.GenBlock.bn3", "big_resnet_deep.GenBlock.bn4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "in_channels", "!=", "self", ".", "out_channels", ":", "\n", "            ", "x0", "=", "x", "[", ":", ",", ":", "self", ".", "out_channels", "]", "\n", "", "else", ":", "\n", "            ", "x0", "=", "x", "\n", "\n", "", "x", "=", "self", ".", "conv2d1", "(", "self", ".", "activation", "(", "self", ".", "bn1", "(", "x", ",", "label", ")", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "self", ".", "bn2", "(", "x", ",", "label", ")", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n", "", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d3", "(", "self", ".", "activation", "(", "self", ".", "bn3", "(", "x", ",", "label", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2d4", "(", "self", ".", "activation", "(", "self", ".", "bn4", "(", "x", ",", "label", ")", ")", ")", "\n", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.Generator.__init__": [[86, 160], ["torch.Module.__init__", "len", "embedding", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "batchnorm_2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "snlinear", "linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "conv2d", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "big_resnet_deep.GenBlock", "range", "torch.ELU", "torch.ELU", "torch.ELU", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights"], ["def", "__init__", "(", "self", ",", "z_dim", ",", "shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "g_spectral_norm", ",", "attention", ",", "attention_after_nth_gen_block", ",", "activation_fn", ",", "\n", "conditional_strategy", ",", "num_classes", ",", "initialize", ",", "G_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "}", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "shared_dim", "=", "shared_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "conditional_bn", "=", "True", "if", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"ProjGAN\"", ",", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", "else", "False", "\n", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "n_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "\n", "self", ".", "z_dims_after_concat", "=", "self", ".", "z_dim", "+", "self", ".", "shared_dim", "\n", "\n", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "linear0", "=", "snlinear", "(", "in_features", "=", "self", ".", "z_dims_after_concat", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear0", "=", "linear", "(", "in_features", "=", "self", ".", "z_dims_after_concat", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ")", "\n", "\n", "", "self", ".", "shared", "=", "embedding", "(", "self", ".", "num_classes", ",", "self", ".", "shared_dim", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "n_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "in_dims", "[", "index", "]", "if", "g_index", "==", "0", "else", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_spectral_norm", "=", "g_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "conditional_bn", "=", "conditional_bn", ",", "\n", "z_dims_after_concat", "=", "self", ".", "z_dims_after_concat", ",", "\n", "upsample", "=", "True", "if", "g_index", "==", "(", "G_depth", "-", "1", ")", "else", "False", ")", "]", "\n", "for", "g_index", "in", "range", "(", "G_depth", ")", "]", "\n", "\n", "if", "index", "+", "1", "==", "attention_after_nth_gen_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "g_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d5", "=", "snconv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d5", "=", "conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "# Weight init", "\n", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.Generator.forward": [[161, 185], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "big_resnet_deep.Generator.linear0", "block.view", "enumerate", "big_resnet_deep.Generator.bn4", "big_resnet_deep.Generator.activation", "big_resnet_deep.Generator.conv2d5", "big_resnet_deep.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "big_resnet_deep.Generator.shared", "isinstance", "block", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "if", "shared_label", "is", "None", ":", "\n", "                ", "shared_label", "=", "self", ".", "shared", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "z", "=", "torch", ".", "cat", "(", "[", "shared_label", ",", "z", "]", ",", "1", ")", "\n", "\n", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "counter", "=", "0", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "Self_Attn", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "z", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.DiscBlock.__init__": [[188, 223], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snconv2d", "conv2d", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ",", "channel_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "hidden_channels", "=", "out_channels", "//", "channel_ratio", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "d_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "snconv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "snconv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "conv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "conv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "", "self", ".", "learnable_sc", "=", "True", "if", "(", "in_channels", "!=", "out_channels", ")", "else", "False", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "if", "self", ".", "d_spectral_norm", ":", "\n", "                ", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", "-", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", "-", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "", "", "if", "self", ".", "downsample", ":", "\n", "            ", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.DiscBlock.forward": [[225, 247], ["big_resnet_deep.DiscBlock.activation", "big_resnet_deep.DiscBlock.conv2d1", "big_resnet_deep.DiscBlock.conv2d2", "big_resnet_deep.DiscBlock.conv2d3", "big_resnet_deep.DiscBlock.activation", "big_resnet_deep.DiscBlock.conv2d4", "big_resnet_deep.DiscBlock.activation", "big_resnet_deep.DiscBlock.activation", "big_resnet_deep.DiscBlock.average_pooling", "big_resnet_deep.DiscBlock.average_pooling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "big_resnet_deep.DiscBlock.conv2d0"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2d2", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv2d3", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv2d4", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "x0", "=", "torch", ".", "cat", "(", "[", "x0", ",", "self", ".", "conv2d0", "(", "x0", ")", "]", ",", "1", ")", "\n", "\n", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.Discriminator.__init__": [[251, 344], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "snconv2d", "conv2d", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "big_resnet_deep.DiscBlock", "range", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "False", ",", "True", ",", "True", ",", "True", ",", "True", "]", ",", "\n", "\"64\"", ":", "[", "False", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", "]", ",", "\n", "\"128\"", ":", "[", "False", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", "]", ",", "\n", "\"256\"", ":", "[", "False", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", "]", ",", "\n", "\"512\"", ":", "[", "False", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "input_conv", "=", "snconv2d", "(", "in_channels", "=", "self", ".", "in_dims", "[", "0", "]", ",", "out_channels", "=", "self", ".", "out_dims", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_conv", "=", "conv2d", "(", "in_channels", "=", "self", ".", "in_dims", "[", "0", "]", ",", "out_channels", "=", "self", ".", "out_dims", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "self", ".", "input_conv", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", "if", "d_index", "==", "0", "else", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "True", "if", "down", "[", "index", "]", "and", "d_index", "==", "0", "else", "False", ")", "]", "\n", "for", "d_index", "in", "range", "(", "D_depth", ")", "]", "\n", "\n", "", "if", "index", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet_deep.Discriminator.forward": [[346, 383], ["enumerate", "big_resnet_deep.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "big_resnet_deep.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "big_resnet_deep.Discriminator.embedding", "big_resnet_deep.Discriminator.linear2", "big_resnet_deep.Discriminator.linear1", "big_resnet_deep.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "big_resnet_deep.Discriminator.activation", "big_resnet_deep.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "big_resnet_deep.Discriminator.linear4", "big_resnet_deep.Discriminator.embedding", "big_resnet_deep.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "h", "=", "x", "\n", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "                    ", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.encoder.encoder.__init__": [[4, 18], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["\n", "class", "Encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "isize", ",", "nz", ",", "nc", ",", "ndf", ",", "add_final_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "encoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "encoder", ".", "add_module", "(", "'initial-conv-{0}-{1}'", ".", "format", "(", "nc", ",", "ndf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "encoder", ".", "add_module", "(", "'initial-relu-{0}'", ".", "format", "(", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "csize", ",", "cndf", "=", "isize", "/", "2", ",", "ndf", "\n", "\n", "while", "csize", ">", "4", ":", "\n", "            ", "in_feat", "=", "cndf", "\n", "out_feat", "=", "cndf", "*", "2", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-{1}'", ".", "format", "(", "in_feat", ",", "out_feat", ")", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.encoder.encoder.encode": [[18, 28], ["encoder.encoder.relu", "encoder.encoder.relu", "encoder.encoder.relu", "encoder.encoder.relu", "encoder.encoder.relu", "h5.view.view.view", "encoder.encoder.e8", "encoder.encoder.e1", "encoder.encoder.e2", "encoder.encoder.e4", "encoder.encoder.e5", "encoder.encoder.e7", "encoder.encoder.e3", "encoder.encoder.e6"], "methods", ["None"], ["encoder", ".", "add_module", "(", "'pyramid-{0}-{1}'", ".", "format", "(", "in_feat", ",", "out_feat", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_feat", ",", "out_feat", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-batchnorm'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_feat", ")", ")", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-relu'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "cndf", "=", "cndf", "*", "2", "\n", "csize", "=", "csize", "/", "2", "\n", "", "if", "add_final_conv", ":", "\n", "            ", "encoder", ".", "add_module", "(", "'final-{0}-{1}-conv'", ".", "format", "(", "cndf", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.encoder.encoder.forward": [[29, 32], ["encoder.encoder.encode"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.encoder.encode"], ["nn", ".", "Conv2d", "(", "cndf", ",", "nz", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "encoder", "=", "encoder", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.encoder.Encoder.__init__": [[35, 60], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["\n", "\n", "", "", "class", "VAE", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "isize", "=", "32", ",", "nz", "=", "80", ",", "n_extra_layers", "=", "0", ",", "add_final_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "isize", "=", "isize", "\n", "self", ".", "nz", "=", "nz", "\n", "self", ".", "nc", "=", "3", "\n", "self", ".", "ndf", "=", "64", "\n", "self", ".", "device", "=", "\"cuda\"", "\n", "\n", "self", ".", "z_mean_calc", "=", "nn", ".", "Linear", "(", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u5747\u503c \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "self", ".", "z_log_var_calc", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u65b9\u5dee \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "z_mean", "=", "self", ".", "z_mean_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "z_log_var", "=", "self", ".", "z_log_var_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "\n", "#stamp = self.get_stamp(target,opt)", "\n", "\n", "# \u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206", "\n", "z_mean_0", "=", "z_mean", "# * stamp", "\n", "z_log_var_0", "=", "z_log_var", "# * stamp", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.encoder.Encoder.forward": [[61, 64], ["encoder.Encoder.encoder"], "methods", ["None"], ["epsilon", "=", "torch", ".", "randn", "(", "\n", "size", "=", "(", "z_mean_0", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "nz", ")", ")", ".", "to", "(", "\n", "self", ".", "device", ")", "# Sampling", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.encoder.VAE.__init__": [[70, 83], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["#z_mean_flip = (bias-z_mean) * (1-stamp)", "\n", "#z_log_var_flip = (1-z_log_var) * (1-stamp)", "\n", "\n", "# \u7ec4\u5408\u5728\u4e00\u8d77\u8fd4\u56de", "\n", "z_mean_ret", "=", "z_mean_0", "# + z_mean_flip", "\n", "z_log_var_ret", "=", "z_log_var_0", "# + z_log_var_flip", "\n", "\n", "return", "z_mean_ret", ",", "z_log_var_ret", ",", "latent_i_star", ".", "float", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.encoder.VAE.forward": [[85, 109], ["encoder.VAE.z_mean_calc", "encoder.VAE.z_log_var_calc", "torch.randn().to", "input.view", "input.view", "latent_i_star.type", "torch.randn", "torch.exp", "z_mean_0.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.GenBlock.__init__": [[18, 45], ["torch.Module.__init__", "sndeconv2d", "deconv2d", "ConditionalBatchNorm2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sndeconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.deconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_spectral_norm", ",", "activation_fn", ",", "conditional_bn", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conditional_bn", "=", "conditional_bn", "\n", "\n", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "deconv0", "=", "sndeconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "deconv0", "=", "deconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "self", ".", "bn0", "=", "ConditionalBatchNorm2d", "(", "num_features", "=", "out_channels", ",", "num_classes", "=", "num_classes", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.GenBlock.forward": [[46, 54], ["dcgan.GenBlock.deconv0", "dcgan.GenBlock.activation", "dcgan.GenBlock.bn0", "dcgan.GenBlock.bn0"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "        ", "x", "=", "self", ".", "deconv0", "(", "x", ")", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "out", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.Generator.__init__": [[58, 98], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Tanh", "torch.Tanh", "torch.Tanh", "snlinear", "linear", "len", "snconv2d", "conv2d", "init_weights", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dcgan.GenBlock", "Self_Attn"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights"], ["def", "__init__", "(", "self", ",", "z_dim", ",", "shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "g_spectral_norm", ",", "attention", ",", "attention_after_nth_gen_block", ",", "activation_fn", ",", "\n", "conditional_strategy", ",", "num_classes", ",", "initialize", ",", "G_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dims", "=", "[", "512", ",", "256", ",", "128", "]", "\n", "self", ".", "out_dims", "=", "[", "256", ",", "128", ",", "64", "]", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "conditional_bn", "=", "True", "if", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"ProjGAN\"", ",", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", "else", "False", "\n", "\n", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "linear0", "=", "snlinear", "(", "in_features", "=", "self", ".", "z_dim", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "4", "*", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear0", "=", "linear", "(", "in_features", "=", "self", ".", "z_dim", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "4", "*", "4", ")", "\n", "\n", "", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_spectral_norm", "=", "g_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "conditional_bn", "=", "conditional_bn", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ")", "]", "]", "\n", "\n", "if", "index", "+", "1", "==", "attention_after_nth_gen_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "g_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv4", "=", "snconv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv4", "=", "conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "# Weight init", "\n", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.Generator.forward": [[99, 112], ["dcgan.Generator.linear0", "block.view", "enumerate", "dcgan.Generator.conv4", "dcgan.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "isinstance", "block", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "4", ",", "4", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "Self_Attn", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "label", ")", "\n", "", "", "", "act", "=", "self", ".", "conv4", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.DiscBlock.__init__": [[115, 139], ["torch.Module.__init__", "snconv2d", "snconv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "conv0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.DiscBlock.forward": [[140, 150], ["dcgan.DiscBlock.conv0", "dcgan.DiscBlock.activation", "dcgan.DiscBlock.conv1", "dcgan.DiscBlock.activation", "dcgan.DiscBlock.bn0", "dcgan.DiscBlock.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "out", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.Discriminator.__init__": [[154, 226], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "snconv2d", "conv2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "dcgan.DiscBlock", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dims", "=", "[", "3", "]", "+", "[", "64", ",", "128", "]", "\n", "self", ".", "out_dims", "=", "[", "64", ",", "128", ",", "256", "]", "\n", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "\n", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "self", ".", "d_spectral_norm", ":", "\n", "            ", "self", ".", "conv", "=", "snconv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn", "=", "batchnorm_2d", "(", "in_features", "=", "512", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "512", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "512", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "512", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "512", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "512", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "512", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "512", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "512", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.dcgan.Discriminator.forward": [[228, 267], ["enumerate", "dcgan.Discriminator.conv", "dcgan.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "dcgan.Discriminator.bn", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "dcgan.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "dcgan.Discriminator.embedding", "dcgan.Discriminator.linear2", "dcgan.Discriminator.linear1", "dcgan.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "dcgan.Discriminator.activation", "dcgan.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "dcgan.Discriminator.linear4", "dcgan.Discriminator.embedding", "dcgan.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "conv", "(", "h", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "                ", "h", "=", "self", ".", "bn", "(", "h", ")", "\n", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "                    ", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "authen_output", "+", "proj", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.GenBlock.__init__": [[11, 43], ["torch.Module.__init__", "ConditionalBatchNorm2d_for_skip_and_shared", "ConditionalBatchNorm2d_for_skip_and_shared", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_spectral_norm", ",", "activation_fn", ",", "conditional_bn", ",", "z_dims_after_concat", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conditional_bn", "=", "conditional_bn", "\n", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "num_features", "=", "in_channels", ",", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "self", ".", "bn2", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "num_features", "=", "out_channels", ",", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.GenBlock.forward": [[45, 67], ["invencoder_resnet.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "invencoder_resnet.GenBlock.conv2d1", "invencoder_resnet.GenBlock.activation", "invencoder_resnet.GenBlock.conv2d2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "invencoder_resnet.GenBlock.conv2d0", "invencoder_resnet.GenBlock.bn1", "invencoder_resnet.GenBlock.bn1", "invencoder_resnet.GenBlock.bn2", "invencoder_resnet.GenBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.Generator.__init__": [[71, 145], ["torch.Module.__init__", "len", "embedding", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "batchnorm_2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "snlinear", "linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "conv2d", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "invencoder_resnet.GenBlock", "torch.ELU", "torch.ELU", "torch.ELU", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights"], ["def", "__init__", "(", "self", ",", "z_dim", ",", "shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "g_spectral_norm", ",", "attention", ",", "attention_after_nth_gen_block", ",", "activation_fn", ",", "\n", "conditional_strategy", ",", "num_classes", ",", "initialize", ",", "G_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "}", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "#80", "\n", "self", ".", "shared_dim", "=", "shared_dim", "#128", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "conditional_bn", "=", "True", "if", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"ProjGAN\"", ",", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", "else", "False", "\n", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "n_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "# 3", "\n", "self", ".", "chunk_size", "=", "z_dim", "//", "(", "self", ".", "n_blocks", "+", "1", ")", "# 80//3+1", "\n", "self", ".", "z_dims_after_concat", "=", "self", ".", "chunk_size", "+", "self", ".", "shared_dim", "#20+128", "\n", "assert", "self", ".", "z_dim", "%", "(", "self", ".", "n_blocks", "+", "1", ")", "==", "0", ",", "\"z_dim should be divided by the number of blocks \"", "\n", "\n", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "linear0", "=", "snlinear", "(", "in_features", "=", "self", ".", "chunk_size", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear0", "=", "linear", "(", "in_features", "=", "self", ".", "chunk_size", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ")", "\n", "\n", "", "self", ".", "shared", "=", "embedding", "(", "self", ".", "num_classes", ",", "self", ".", "shared_dim", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "n_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_spectral_norm", "=", "g_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "conditional_bn", "=", "conditional_bn", ",", "\n", "z_dims_after_concat", "=", "self", ".", "z_dims_after_concat", ")", "]", "]", "\n", "\n", "if", "index", "+", "1", "==", "attention_after_nth_gen_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "g_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d5", "=", "snconv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d5", "=", "conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "# Weight init", "\n", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.Generator.forward": [[147, 173], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "invencoder_resnet.Generator.linear0", "block.view", "enumerate", "invencoder_resnet.Generator.bn4", "invencoder_resnet.Generator.activation", "invencoder_resnet.Generator.conv2d5", "invencoder_resnet.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "invencoder_resnet.Generator.shared", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "block", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "zs", "=", "torch", ".", "split", "(", "z", ",", "self", ".", "chunk_size", ",", "1", ")", "\n", "z", "=", "zs", "[", "0", "]", "\n", "if", "shared_label", "is", "None", ":", "\n", "                ", "shared_label", "=", "self", ".", "shared", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "labels", "=", "[", "torch", ".", "cat", "(", "[", "shared_label", ",", "item", "]", ",", "1", ")", "for", "item", "in", "zs", "[", "1", ":", "]", "]", "\n", "\n", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "counter", "=", "0", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "Self_Attn", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "labels", "[", "counter", "]", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.DiscOptBlock.__init__": [[176, 204], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "        ", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.DiscOptBlock.forward": [[206, 222], ["invencoder_resnet.DiscOptBlock.conv2d1", "invencoder_resnet.DiscOptBlock.activation", "invencoder_resnet.DiscOptBlock.conv2d2", "invencoder_resnet.DiscOptBlock.average_pooling", "invencoder_resnet.DiscOptBlock.average_pooling", "invencoder_resnet.DiscOptBlock.conv2d0", "invencoder_resnet.DiscOptBlock.bn1", "invencoder_resnet.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.DiscBlock.__init__": [[225, 262], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snconv2d", "conv2d", "batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.DiscBlock.forward": [[264, 287], ["invencoder_resnet.DiscBlock.activation", "invencoder_resnet.DiscBlock.conv2d1", "invencoder_resnet.DiscBlock.activation", "invencoder_resnet.DiscBlock.conv2d2", "invencoder_resnet.DiscBlock.bn1", "invencoder_resnet.DiscBlock.bn2", "invencoder_resnet.DiscBlock.average_pooling", "invencoder_resnet.DiscBlock.conv2d0", "invencoder_resnet.DiscBlock.bn0", "invencoder_resnet.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "            ", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "                ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "                ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.invencoder.__init__": [[291, 381], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "invencoder_resnet.DiscOptBlock", "invencoder_resnet.DiscBlock", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "invencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "80", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "80", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.invencoder.forward": [[383, 395], ["enumerate", "invencoder_resnet.invencoder.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "invencoder_resnet.invencoder.linear1", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "#if self.conditional_strategy == 'no':", "\n", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.Discriminator.__init__": [[421, 511], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "invencoder_resnet.DiscOptBlock", "invencoder_resnet.DiscBlock", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.invencoder_resnet.Discriminator.forward": [[513, 549], ["enumerate", "invencoder_resnet.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "invencoder_resnet.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "invencoder_resnet.Discriminator.embedding", "invencoder_resnet.Discriminator.linear2", "invencoder_resnet.Discriminator.linear1", "invencoder_resnet.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "invencoder_resnet.Discriminator.activation", "invencoder_resnet.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "invencoder_resnet.Discriminator.linear4", "invencoder_resnet.Discriminator.embedding", "invencoder_resnet.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "                    ", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "authen_output", "+", "proj", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.GenBlock.__init__": [[18, 50], ["torch.Module.__init__", "ConditionalBatchNorm2d", "ConditionalBatchNorm2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.GenBlock.forward": [[51, 73], ["resnet.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "resnet.GenBlock.conv2d1", "resnet.GenBlock.activation", "resnet.GenBlock.conv2d2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "resnet.GenBlock.conv2d0", "resnet.GenBlock.bn1", "resnet.GenBlock.bn1", "resnet.GenBlock.bn2", "resnet.GenBlock.bn2"], "methods", ["None"], ["stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.Generator.__init__": [[77, 144], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "batchnorm_2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "snlinear", "linear", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "conv2d", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "resnet.GenBlock", "torch.ELU", "torch.ELU", "torch.ELU", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights"], ["self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "ResNet18", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "", "def", "ResNet50", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "", "def", "ResNet101", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "", "def", "ResNet152", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "\n", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "# test()", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.Generator.forward": [[145, 160], ["resnet.Generator.linear0", "block.view", "enumerate", "resnet.Generator.bn4", "resnet.Generator.activation", "resnet.Generator.conv2d5", "resnet.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "isinstance", "block", "block"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.DiscOptBlock.__init__": [[163, 191], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.DiscOptBlock.forward": [[193, 210], ["resnet.DiscOptBlock.conv2d1", "resnet.DiscOptBlock.activation", "resnet.DiscOptBlock.conv2d2", "resnet.DiscOptBlock.average_pooling", "resnet.DiscOptBlock.average_pooling", "resnet.DiscOptBlock.conv2d0", "resnet.DiscOptBlock.bn1", "resnet.DiscOptBlock.bn0"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.DiscBlock.__init__": [[213, 250], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snconv2d", "conv2d", "batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.DiscBlock.forward": [[252, 274], ["resnet.DiscBlock.activation", "resnet.DiscBlock.conv2d1", "resnet.DiscBlock.activation", "resnet.DiscBlock.conv2d2", "resnet.DiscBlock.bn1", "resnet.DiscBlock.bn2", "resnet.DiscBlock.average_pooling", "resnet.DiscBlock.conv2d0", "resnet.DiscBlock.bn0", "resnet.DiscBlock.average_pooling"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.Discriminator.__init__": [[278, 368], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "resnet.DiscOptBlock", "resnet.DiscBlock", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.resnet.Discriminator.forward": [[370, 406], ["enumerate", "resnet.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "resnet.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "resnet.Discriminator.embedding", "resnet.Discriminator.linear2", "resnet.Discriminator.linear1", "resnet.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "resnet.Discriminator.activation", "resnet.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "resnet.Discriminator.linear4", "resnet.Discriminator.embedding", "resnet.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.GenBlock.__init__": [[18, 50], ["torch.Module.__init__", "ConditionalBatchNorm2d_for_skip_and_shared", "ConditionalBatchNorm2d_for_skip_and_shared", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conditional_bn", "=", "conditional_bn", "\n", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "\n", "num_features", "=", "in_channels", ",", "\n", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "self", ".", "bn2", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "\n", "num_features", "=", "out_channels", ",", "\n", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d0", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.GenBlock.forward": [[52, 74], ["big_resnet.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet.GenBlock.conv2d1", "big_resnet.GenBlock.activation", "big_resnet.GenBlock.conv2d2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet.GenBlock.conv2d0", "big_resnet.GenBlock.bn1", "big_resnet.GenBlock.bn1", "big_resnet.GenBlock.bn2", "big_resnet.GenBlock.bn2"], "methods", ["None"], ["self", ".", "conv2d2", "=", "snconv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d0", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.Generator.__init__": [[78, 152], ["torch.Module.__init__", "len", "embedding", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "batchnorm_2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "snlinear", "linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "conv2d", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "big_resnet.GenBlock", "torch.ELU", "torch.ELU", "torch.ELU", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights"], ["", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Generator.\"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "z_dim", ",", "shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "g_spectral_norm", ",", "\n", "attention", ",", "attention_after_nth_gen_block", ",", "activation_fn", ",", "\n", "conditional_strategy", ",", "num_classes", ",", "initialize", ",", "G_depth", ",", "\n", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "}", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "# 80", "\n", "self", ".", "shared_dim", "=", "shared_dim", "# 128", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "conditional_bn", "=", "True", "if", "conditional_strategy", "in", "[", "\n", "\"ACGAN\"", ",", "\"ProjGAN\"", ",", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", "else", "False", "\n", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "n_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "# 3", "\n", "self", ".", "chunk_size", "=", "z_dim", "//", "(", "self", ".", "n_blocks", "+", "1", ")", "# 80//3+1", "\n", "self", ".", "z_dims_after_concat", "=", "self", ".", "chunk_size", "+", "self", ".", "shared_dim", "# 20+128", "\n", "assert", "self", ".", "z_dim", "%", "(", "\n", "self", ".", "n_blocks", "+", "1", ")", "==", "0", ",", "\"z_dim should be divided by the number of blocks \"", "\n", "\n", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "linear0", "=", "snlinear", "(", "\n", "in_features", "=", "self", ".", "chunk_size", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear0", "=", "linear", "(", "in_features", "=", "self", ".", "chunk_size", ",", "\n", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "\n", "self", ".", "bottom", ")", "\n", "\n", "", "self", ".", "shared", "=", "embedding", "(", "self", ".", "num_classes", ",", "self", ".", "shared_dim", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "n_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_spectral_norm", "=", "g_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "conditional_bn", "=", "conditional_bn", ",", "\n", "z_dims_after_concat", "=", "self", ".", "z_dims_after_concat", ")", "]", "]", "\n", "\n", "if", "index", "+", "1", "==", "attention_after_nth_gen_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "\n", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.Generator.forward": [[154, 180], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "big_resnet.Generator.linear0", "block.view", "enumerate", "big_resnet.Generator.bn4", "big_resnet.Generator.activation", "big_resnet.Generator.conv2d5", "big_resnet.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "big_resnet.Generator.shared", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "block", "block"], "methods", ["None"], ["self", ".", "bn4", "=", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d5", "=", "snconv2d", "(", "\n", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d5", "=", "conv2d", "(", "\n", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "# Weight init", "\n", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.DiscOptBlock.__init__": [[183, 211], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "zs", "=", "torch", ".", "split", "(", "z", ",", "self", ".", "chunk_size", ",", "1", ")", "\n", "z", "=", "zs", "[", "0", "]", "\n", "if", "shared_label", "is", "None", ":", "\n", "                ", "shared_label", "=", "self", ".", "shared", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "labels", "=", "[", "torch", ".", "cat", "(", "[", "shared_label", ",", "item", "]", ",", "1", ")", "for", "item", "in", "zs", "[", "1", ":", "]", "]", "\n", "\n", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "counter", "=", "0", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "Self_Attn", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "labels", "[", "counter", "]", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "class", "DiscOptBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.DiscOptBlock.forward": [[213, 229], ["big_resnet.DiscOptBlock.conv2d1", "big_resnet.DiscOptBlock.activation", "big_resnet.DiscOptBlock.conv2d2", "big_resnet.DiscOptBlock.average_pooling", "big_resnet.DiscOptBlock.average_pooling", "big_resnet.DiscOptBlock.conv2d0", "big_resnet.DiscOptBlock.bn1", "big_resnet.DiscOptBlock.bn0"], "methods", ["None"], ["        ", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d0", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d0", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.DiscBlock.__init__": [[232, 269], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snconv2d", "conv2d", "batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.DiscBlock.forward": [[271, 294], ["big_resnet.DiscBlock.activation", "big_resnet.DiscBlock.conv2d1", "big_resnet.DiscBlock.activation", "big_resnet.DiscBlock.conv2d2", "big_resnet.DiscBlock.bn1", "big_resnet.DiscBlock.bn2", "big_resnet.DiscBlock.average_pooling", "big_resnet.DiscBlock.conv2d0", "big_resnet.DiscBlock.bn0", "big_resnet.DiscBlock.average_pooling"], "methods", ["None"], ["", "", "class", "DiscBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "\n", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.Discriminator.__init__": [[298, 388], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "big_resnet.DiscOptBlock", "big_resnet.DiscBlock", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["", "self", ".", "conv2d1", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "conv2d0", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "            ", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "                ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "                ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Discriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Discriminator.\"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "\n", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "\n", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "\n", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "\n", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "\n", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.models.big_resnet.Discriminator.forward": [[390, 426], ["enumerate", "big_resnet.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "big_resnet.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "big_resnet.Discriminator.embedding", "big_resnet.Discriminator.linear2", "big_resnet.Discriminator.linear1", "big_resnet.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "big_resnet.Discriminator.activation", "big_resnet.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "big_resnet.Discriminator.linear4", "big_resnet.Discriminator.embedding", "big_resnet.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "\n", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "linear1", "=", "snlinear", "(", "\n", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet.SNResNetProjectionDiscriminator.__init__": [[13, 36], ["torch.Module.__init__", "models.discriminators.resblocks.OptimizedBlock", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "snresnet.SNResNetProjectionDiscriminator._initialize", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "SNResNetProjectionDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "num_features", ")", "\n", "self", ".", "block2", "=", "Block", "(", "num_features", ",", "num_features", "*", "2", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "num_features", "*", "2", ",", "num_features", "*", "4", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block4", "=", "Block", "(", "num_features", "*", "4", ",", "num_features", "*", "8", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "num_features", "*", "8", ",", "num_features", "*", "16", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "num_features", "*", "16", ",", "num_features", "*", "16", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "l7", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "num_features", "*", "16", ",", "1", ")", ")", "\n", "if", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "l_y", "=", "utils", ".", "spectral_norm", "(", "\n", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", "*", "16", ")", ")", "\n", "\n", "", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet.SNResNetProjectionDiscriminator._initialize": [[37, 42], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "getattr", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "l7", ".", "weight", ".", "data", ")", "\n", "optional_l_y", "=", "getattr", "(", "self", ",", "'l_y'", ",", "None", ")", "\n", "if", "optional_l_y", "is", "not", "None", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "optional_l_y", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet.SNResNetProjectionDiscriminator.forward": [[43, 54], ["range", "snresnet.SNResNetProjectionDiscriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "snresnet.SNResNetProjectionDiscriminator.l7", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "getattr", "snresnet.SNResNetProjectionDiscriminator.l_y"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "1", ",", "7", ")", ":", "\n", "            ", "h", "=", "getattr", "(", "self", ",", "'block{}'", ".", "format", "(", "i", ")", ")", "(", "h", ")", "\n", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "# Global pooling", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "output", "=", "self", ".", "l7", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "output", "+=", "torch", ".", "sum", "(", "self", ".", "l_y", "(", "y", ")", "*", "h", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet.SNResNetConcatDiscriminator.__init__": [[58, 82], ["torch.Module.__init__", "models.discriminators.resblocks.OptimizedBlock", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "snresnet.SNResNetConcatDiscriminator._initialize", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "activation", "=", "F", ".", "relu", ",", "\n", "dim_emb", "=", "128", ")", ":", "\n", "        ", "super", "(", "SNResNetConcatDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dim_emb", "=", "dim_emb", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "num_features", ")", "\n", "self", ".", "block2", "=", "Block", "(", "num_features", ",", "num_features", "*", "2", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "num_features", "*", "2", ",", "num_features", "*", "4", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "if", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "l_y", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Embedding", "(", "num_classes", ",", "dim_emb", ")", ")", "\n", "", "self", ".", "block4", "=", "Block", "(", "num_features", "*", "4", "+", "dim_emb", ",", "num_features", "*", "8", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "num_features", "*", "8", ",", "num_features", "*", "16", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "num_features", "*", "16", ",", "num_features", "*", "16", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "False", ")", "\n", "self", ".", "l7", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "num_features", "*", "16", ",", "1", ")", ")", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet.SNResNetConcatDiscriminator._initialize": [[83, 87], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "hasattr", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "l7", ".", "weight", ".", "data", ")", "\n", "if", "hasattr", "(", "self", ",", "'l_y'", ")", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "self", ".", "l_y", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet.SNResNetConcatDiscriminator.forward": [[88, 100], ["range", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "snresnet.SNResNetConcatDiscriminator.l7", "snresnet.SNResNetConcatDiscriminator.l_y().unsqueeze().unsqueeze", "emb.expand.expand.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "snresnet.SNResNetConcatDiscriminator.activation", "getattr", "emb.expand.expand.size", "emb.expand.expand.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "getattr", "snresnet.SNResNetConcatDiscriminator.l_y().unsqueeze", "snresnet.SNResNetConcatDiscriminator.l_y"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "h", "=", "getattr", "(", "self", ",", "'block{}'", ".", "format", "(", "i", ")", ")", "(", "h", ")", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "            ", "emb", "=", "self", ".", "l_y", "(", "y", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "emb", "=", "emb", ".", "expand", "(", "emb", ".", "size", "(", "0", ")", ",", "emb", ".", "size", "(", "1", ")", ",", "h", ".", "size", "(", "2", ")", ",", "h", ".", "size", "(", "3", ")", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "emb", ")", ",", "dim", "=", "1", ")", "\n", "", "for", "i", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "h", "=", "getattr", "(", "self", ",", "'block{}'", ".", "format", "(", "i", ")", ")", "(", "h", ")", "\n", "", "h", "=", "torch", ".", "sum", "(", "self", ".", "activation", "(", "h", ")", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "return", "self", ".", "l7", "(", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet64.SNResNetProjectionDiscriminator.__init__": [[13, 34], ["torch.Module.__init__", "models.discriminators.resblocks.OptimizedBlock", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "snresnet64.SNResNetProjectionDiscriminator._initialize", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize"], ["    ", "def", "__init__", "(", "self", ",", "num_features", "=", "64", ",", "num_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "SNResNetProjectionDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "num_features", ")", "\n", "self", ".", "block2", "=", "Block", "(", "num_features", ",", "num_features", "*", "2", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "num_features", "*", "2", ",", "num_features", "*", "4", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block4", "=", "Block", "(", "num_features", "*", "4", ",", "num_features", "*", "8", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "num_features", "*", "8", ",", "num_features", "*", "16", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "l6", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "num_features", "*", "16", ",", "1", ")", ")", "\n", "if", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "l_y", "=", "utils", ".", "spectral_norm", "(", "\n", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", "*", "16", ")", ")", "\n", "\n", "", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet64.SNResNetProjectionDiscriminator._initialize": [[35, 40], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "getattr", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "l6", ".", "weight", ".", "data", ")", "\n", "optional_l_y", "=", "getattr", "(", "self", ",", "'l_y'", ",", "None", ")", "\n", "if", "optional_l_y", "is", "not", "None", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "optional_l_y", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet64.SNResNetProjectionDiscriminator.forward": [[41, 57], ["snresnet64.SNResNetProjectionDiscriminator.block1", "snresnet64.SNResNetProjectionDiscriminator.block2", "snresnet64.SNResNetProjectionDiscriminator.block3", "snresnet64.SNResNetProjectionDiscriminator.block4", "snresnet64.SNResNetProjectionDiscriminator.block5", "snresnet64.SNResNetProjectionDiscriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "snresnet64.SNResNetProjectionDiscriminator.l6", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "snresnet64.SNResNetProjectionDiscriminator.l_y"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "# Global pooling", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "feature", "=", "h", "\n", "output", "=", "self", ".", "l6", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "output", "+=", "torch", ".", "sum", "(", "self", ".", "l_y", "(", "y", ")", "*", "h", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "#yyj 20201224", "\n", "", "return", "output", ",", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet64.SNResNetConcatDiscriminator.__init__": [[61, 83], ["torch.Module.__init__", "models.discriminators.resblocks.OptimizedBlock", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "models.discriminators.resblocks.Block", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "snresnet64.SNResNetConcatDiscriminator._initialize", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "activation", "=", "F", ".", "relu", ",", "\n", "dim_emb", "=", "128", ")", ":", "\n", "        ", "super", "(", "SNResNetConcatDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dim_emb", "=", "dim_emb", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "num_features", ")", "\n", "self", ".", "block2", "=", "Block", "(", "num_features", ",", "num_features", "*", "2", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "num_features", "*", "2", ",", "num_features", "*", "4", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "if", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "l_y", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Embedding", "(", "num_classes", ",", "dim_emb", ")", ")", "\n", "", "self", ".", "block4", "=", "Block", "(", "num_features", "*", "4", "+", "dim_emb", ",", "num_features", "*", "8", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "num_features", "*", "8", ",", "num_features", "*", "16", ",", "\n", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "l6", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "num_features", "*", "16", ",", "1", ")", ")", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet64.SNResNetConcatDiscriminator._initialize": [[84, 88], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "hasattr", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "l6", ".", "weight", ".", "data", ")", "\n", "if", "hasattr", "(", "self", ",", "'l_y'", ")", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "self", ".", "l_y", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.snresnet64.SNResNetConcatDiscriminator.forward": [[89, 102], ["snresnet64.SNResNetConcatDiscriminator.block1", "snresnet64.SNResNetConcatDiscriminator.block2", "snresnet64.SNResNetConcatDiscriminator.block3", "snresnet64.SNResNetConcatDiscriminator.block4", "snresnet64.SNResNetConcatDiscriminator.block5", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "snresnet64.SNResNetConcatDiscriminator.l6", "snresnet64.SNResNetConcatDiscriminator.l_y().unsqueeze().unsqueeze", "emb.expand.expand.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "snresnet64.SNResNetConcatDiscriminator.activation", "emb.expand.expand.size", "emb.expand.expand.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "snresnet64.SNResNetConcatDiscriminator.l_y().unsqueeze", "snresnet64.SNResNetConcatDiscriminator.l_y"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "emb", "=", "self", ".", "l_y", "(", "y", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "emb", "=", "emb", ".", "expand", "(", "emb", ".", "size", "(", "0", ")", ",", "emb", ".", "size", "(", "1", ")", ",", "h", ".", "size", "(", "2", ")", ",", "h", ".", "size", "(", "3", ")", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "emb", ")", ",", "dim", "=", "1", ")", "\n", "", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "self", ".", "activation", "(", "h", ")", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "return", "self", ".", "l6", "(", "h", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.Block.__init__": [[12, 31], ["torch.Module.__init__", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "resblocks.Block._initialize", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "h_ch", "=", "None", ",", "ksize", "=", "3", ",", "pad", "=", "1", ",", "\n", "activation", "=", "F", ".", "relu", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "learnable_sc", "=", "(", "in_ch", "!=", "out_ch", ")", "or", "downsample", "\n", "if", "h_ch", "is", "None", ":", "\n", "            ", "h_ch", "=", "in_ch", "\n", "", "else", ":", "\n", "            ", "h_ch", "=", "out_ch", "\n", "\n", "", "self", ".", "c1", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "h_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "self", ".", "c2", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "h_ch", ",", "out_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "self", ".", "c_sc", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "\n", "", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.Block._initialize": [[32, 37], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "math.sqrt", "math.sqrt", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "c1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "c2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "self", ".", "c_sc", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.Block.forward": [[38, 40], ["resblocks.Block.shortcut", "resblocks.Block.residual"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.shortcut", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.residual"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "shortcut", "(", "x", ")", "+", "self", ".", "residual", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.Block.shortcut": [[41, 47], ["resblocks.Block.c_sc", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "x", "=", "self", ".", "c_sc", "(", "x", ")", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "return", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.Block.residual": [[48, 54], ["resblocks.Block.c1", "resblocks.Block.c2", "resblocks.Block.activation", "resblocks.Block.activation", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "residual", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "c1", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "c2", "(", "self", ".", "activation", "(", "h", ")", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "h", "=", "F", ".", "avg_pool2d", "(", "h", ",", "2", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.OptimizedBlock.__init__": [[58, 67], ["torch.Module.__init__", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "resblocks.OptimizedBlock._initialize", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "ksize", "=", "3", ",", "pad", "=", "1", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "OptimizedBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "c1", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "self", ".", "c2", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "self", ".", "c_sc", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.OptimizedBlock._initialize": [[68, 72], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "c1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "c2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "c_sc", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.OptimizedBlock.forward": [[73, 75], ["resblocks.OptimizedBlock.shortcut", "resblocks.OptimizedBlock.residual"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.shortcut", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.residual"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "shortcut", "(", "x", ")", "+", "self", ".", "residual", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.OptimizedBlock.shortcut": [[76, 78], ["resblocks.OptimizedBlock.c_sc", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "c_sc", "(", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.discriminators.resblocks.OptimizedBlock.residual": [[79, 82], ["resblocks.OptimizedBlock.activation", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resblocks.OptimizedBlock.c1", "resblocks.OptimizedBlock.c2"], "methods", ["None"], ["", "def", "residual", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "activation", "(", "self", ".", "c1", "(", "x", ")", ")", "\n", "return", "F", ".", "avg_pool2d", "(", "self", ".", "c2", "(", "h", ")", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.encoder.Encoder.__init__": [[6, 31], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "isize", ",", "nz", ",", "nc", ",", "ndf", ",", "add_final_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "encoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "encoder", ".", "add_module", "(", "'initial-conv-{0}-{1}'", ".", "format", "(", "nc", ",", "ndf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "encoder", ".", "add_module", "(", "'initial-relu-{0}'", ".", "format", "(", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "csize", ",", "cndf", "=", "isize", "/", "2", ",", "ndf", "\n", "\n", "while", "csize", ">", "4", ":", "\n", "            ", "in_feat", "=", "cndf", "\n", "out_feat", "=", "cndf", "*", "2", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-{1}'", ".", "format", "(", "in_feat", ",", "out_feat", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_feat", ",", "out_feat", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-batchnorm'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_feat", ")", ")", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-relu'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "cndf", "=", "cndf", "*", "2", "\n", "csize", "=", "csize", "/", "2", "\n", "", "if", "add_final_conv", ":", "\n", "            ", "encoder", ".", "add_module", "(", "'final-{0}-{1}-conv'", ".", "format", "(", "cndf", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cndf", ",", "nz", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "encoder", "=", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.encoder.Encoder.forward": [[32, 35], ["encoder.Encoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "encoder", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.encoder.VAE.__init__": [[38, 50], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "isize", "=", "32", ",", "nz", "=", "80", ",", "n_extra_layers", "=", "0", ",", "add_final_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "isize", "=", "isize", "\n", "self", ".", "nz", "=", "nz", "\n", "self", ".", "nc", "=", "3", "\n", "self", ".", "ndf", "=", "64", "\n", "self", ".", "device", "=", "\"cuda\"", "\n", "\n", "self", ".", "z_mean_calc", "=", "nn", ".", "Linear", "(", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u5747\u503c \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "self", ".", "z_log_var_calc", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u65b9\u5dee \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.encoder.VAE.forward": [[51, 78], ["encoder.VAE.z_mean_calc", "encoder.VAE.z_log_var_calc", "torch.randn().to", "input.view", "input.view", "latent_i_star.float", "torch.randn", "torch.exp", "z_mean_0.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "z_mean", "=", "self", ".", "z_mean_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "z_log_var", "=", "self", ".", "z_log_var_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "\n", "#stamp = self.get_stamp(target,opt)", "\n", "\n", "# \u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206", "\n", "z_mean_0", "=", "z_mean", "# * stamp", "\n", "z_log_var_0", "=", "z_log_var", "# * stamp", "\n", "epsilon", "=", "torch", ".", "randn", "(", "\n", "size", "=", "(", "z_mean_0", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "nz", ")", ")", ".", "to", "(", "\n", "self", ".", "device", ")", "# Sampling", "\n", "# Sampling", "\n", "latent_i_star", "=", "z_mean_0", "+", "torch", ".", "exp", "(", "z_log_var_0", "/", "2", ")", "*", "epsilon", "\n", "\n", "# \u4e0d\u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206 bias \u53ef\u8c03\u3002\u6700\u521d\u4e3a 1", "\n", "#bias = 100", "\n", "#z_mean_flip = (bias-z_mean) * (1-stamp)", "\n", "#z_log_var_flip = (1-z_log_var) * (1-stamp)", "\n", "\n", "# \u7ec4\u5408\u5728\u4e00\u8d77\u8fd4\u56de", "\n", "z_mean_ret", "=", "z_mean_0", "# + z_mean_flip", "\n", "z_log_var_ret", "=", "z_log_var_0", "# + z_log_var_flip", "\n", "\n", "return", "z_mean_ret", ",", "z_log_var_ret", ",", "latent_i_star", ".", "float", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.dummy_context_mgr.__enter__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.dummy_context_mgr.__exit__": [[11, 13], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.GenBlock.__init__": [[16, 65], ["torch.Module.__init__", "ConditionalBatchNorm2d_for_skip_and_shared", "ConditionalBatchNorm2d_for_skip_and_shared", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_spectral_norm", ",", "\n", "activation_fn", ",", "conditional_bn", ",", "z_dims_after_concat", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conditional_bn", "=", "conditional_bn", "\n", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "\n", "num_features", "=", "in_channels", ",", "\n", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "self", ".", "bn2", "=", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "\n", "num_features", "=", "out_channels", ",", "\n", "z_dims_after_concat", "=", "z_dims_after_concat", ",", "\n", "spectral_norm", "=", "g_spectral_norm", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d0", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d0", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.GenBlock.forward": [[66, 88], ["big_resnet.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet.GenBlock.conv2d1", "big_resnet.GenBlock.activation", "big_resnet.GenBlock.conv2d2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet.GenBlock.conv2d0", "big_resnet.GenBlock.bn1", "big_resnet.GenBlock.bn1", "big_resnet.GenBlock.bn2", "big_resnet.GenBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "conditional_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "# upsample", "\n", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.Generator.__init__": [[93, 181], ["torch.Module.__init__", "len", "embedding", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "batchnorm_2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "snlinear", "linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "conv2d", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "big_resnet.GenBlock", "torch.ELU", "torch.ELU", "torch.ELU", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights"], ["def", "__init__", "(", "\n", "self", ",", "z_dim", ",", "shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "g_spectral_norm", ",", "\n", "attention", ",", "attention_after_nth_gen_block", ",", "activation_fn", ",", "\n", "conditional_strategy", ",", "num_classes", ",", "initialize", ",", "G_depth", ",", "\n", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "}", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "# 80", "\n", "self", ".", "shared_dim", "=", "shared_dim", "# 128", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "conditional_bn", "=", "True", "if", "conditional_strategy", "in", "[", "\n", "\"ACGAN\"", ",", "\"ProjGAN\"", ",", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", "else", "False", "\n", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "n_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "# 3", "\n", "self", ".", "chunk_size", "=", "z_dim", "//", "(", "self", ".", "n_blocks", "+", "1", ")", "# 80//3+1", "\n", "self", ".", "z_dims_after_concat", "=", "self", ".", "chunk_size", "+", "self", ".", "shared_dim", "# 20+128", "\n", "assert", "self", ".", "z_dim", "%", "(", "\n", "self", ".", "n_blocks", "+", "1", ")", "==", "0", ",", "\"z_dim should be divided by the number of blocks \"", "\n", "\n", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "linear0", "=", "snlinear", "(", "\n", "in_features", "=", "self", ".", "chunk_size", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear0", "=", "linear", "(", "in_features", "=", "self", ".", "chunk_size", ",", "\n", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "\n", "self", ".", "bottom", ")", "\n", "\n", "", "self", ".", "shared", "=", "embedding", "(", "self", ".", "num_classes", ",", "self", ".", "shared_dim", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "n_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_spectral_norm", "=", "g_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "conditional_bn", "=", "conditional_bn", ",", "\n", "z_dims_after_concat", "=", "self", ".", "z_dims_after_concat", ")", "]", "]", "\n", "\n", "if", "index", "+", "1", "==", "attention_after_nth_gen_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "\n", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "g_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d5", "=", "snconv2d", "(", "\n", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d5", "=", "conv2d", "(", "\n", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "# Weight init", "\n", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.Generator.forward": [[182, 208], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "big_resnet.Generator.linear0", "block.view", "enumerate", "big_resnet.Generator.bn4", "big_resnet.Generator.activation", "big_resnet.Generator.conv2d5", "big_resnet.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "big_resnet.dummy_context_mgr", "big_resnet.Generator.shared", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "block", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "zs", "=", "torch", ".", "split", "(", "z", ",", "self", ".", "chunk_size", ",", "1", ")", "\n", "z", "=", "zs", "[", "0", "]", "\n", "if", "shared_label", "is", "None", ":", "\n", "                ", "shared_label", "=", "self", ".", "shared", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "labels", "=", "[", "torch", ".", "cat", "(", "[", "shared_label", ",", "item", "]", ",", "1", ")", "for", "item", "in", "zs", "[", "1", ":", "]", "]", "\n", "\n", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "counter", "=", "0", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "Self_Attn", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "labels", "[", "counter", "]", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.DiscOptBlock.__init__": [[211, 252], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "\n", "activation_fn", ")", ":", "\n", "        ", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "conv2d0", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2d0", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.DiscOptBlock.forward": [[253, 269], ["big_resnet.DiscOptBlock.conv2d1", "big_resnet.DiscOptBlock.activation", "big_resnet.DiscOptBlock.conv2d2", "big_resnet.DiscOptBlock.average_pooling", "big_resnet.DiscOptBlock.average_pooling", "big_resnet.DiscOptBlock.conv2d0", "big_resnet.DiscOptBlock.bn1", "big_resnet.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.DiscBlock.__init__": [[272, 322], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snconv2d", "conv2d", "batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "\n", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "conv2d0", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "conv2d0", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "\n", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "                ", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.DiscBlock.forward": [[323, 346], ["big_resnet.DiscBlock.activation", "big_resnet.DiscBlock.conv2d1", "big_resnet.DiscBlock.activation", "big_resnet.DiscBlock.conv2d2", "big_resnet.DiscBlock.bn1", "big_resnet.DiscBlock.bn2", "big_resnet.DiscBlock.average_pooling", "big_resnet.DiscBlock.conv2d0", "big_resnet.DiscBlock.bn0", "big_resnet.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "            ", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "                ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "                ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.Discriminator.__init__": [[351, 470], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "big_resnet.DiscOptBlock", "big_resnet.DiscBlock", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "\n", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "\n", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "\n", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "\n", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "\n", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "\n", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "\n", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "\n", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "            ", "self", ".", "linear1", "=", "snlinear", "(", "\n", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\n", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "snlinear", "(", "\n", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "snlinear", "(", "\n", "in_features", "=", "hypersphere_dim", ",", "\n", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "snlinear", "(", "\n", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\n", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "self", ".", "linear2", "=", "linear", "(", "\n", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "self", ".", "linear3", "=", "linear", "(", "\n", "in_features", "=", "hypersphere_dim", ",", "\n", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "self", ".", "linear4", "=", "linear", "(", "\n", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "\n", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "            ", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.GANv2.big_resnet.Discriminator.forward": [[471, 507], ["enumerate", "big_resnet.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "big_resnet.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "big_resnet.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "big_resnet.Discriminator.embedding", "big_resnet.Discriminator.linear2", "big_resnet.Discriminator.linear1", "big_resnet.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "big_resnet.Discriminator.activation", "big_resnet.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "big_resnet.Discriminator.linear4", "big_resnet.Discriminator.embedding", "big_resnet.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "                    ", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "                    ", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "                ", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "", "from", ".", "big_resnet", "import", "Generator", ",", "Discriminator", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.Encoder.__init__": [[57, 113], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "n_extra_layers", "=", "0", ",", "add_final_conv", "=", "True", ",", "is_gan", "=", "False", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isize", "=", "opt", ".", "isize", "\n", "self", ".", "nc", "=", "opt", ".", "nc", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "\n", "if", "is_gan", ":", "\n", "            ", "self", ".", "nz", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "", "assert", "self", ".", "isize", "%", "16", "==", "0", ",", "\"isize has to be a multiple of 16\"", "\n", "\n", "main", "=", "nn", ".", "Sequential", "(", ")", "# model\u6a21\u578b", "\n", "# input is nc x isize x isize", "\n", "\n", "# main.add_module('initial-conv',", "\n", "# nn.Conv2d(nc, ndf, 1, 1, 0, bias=False))  # \uff0832+2\u00d70-1\uff09/1+1=32 #wgan-gp kernel\u662f3", "\n", "# main.add_module('initial-relu',", "\n", "# nn.LeakyReLU(0.2, inplace=True))", "\n", "\n", "main", ".", "add_module", "(", "\n", "'initial-conv-{0}-{1}'", ".", "format", "(", "self", ".", "nc", ",", "self", ".", "ndf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "nc", ",", "self", ".", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "# \uff0832+2\u00d71-4\uff09/2+1=16 #wgan-gp kernel\u662f3###\u7b2c\u4e00\u4e2andf\u662fnc", "\n", "main", ".", "add_module", "(", "'initial-relu-{0}'", ".", "format", "(", "self", ".", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "csize", ",", "cndf", "=", "self", ".", "isize", "/", "2", ",", "self", ".", "ndf", "# \u56fe\u50cf\u7684\u5927\u5c0f\u7f29\u5c0f\u4e24\u500d  channel\u6570\u91cf\u4e0d\u53d8 16\u5bf9\u5e9464", "\n", "# self.netg.main.initial-relu-64", "\n", "\n", "# Extra layers", "\n", "for", "t", "in", "range", "(", "n_extra_layers", ")", ":", "# \u6ca1\u6709\u989d\u5916\u7684\u5377\u79ef\u5c42", "\n", "            ", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-conv'", ".", "format", "(", "t", ",", "cndf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cndf", ",", "cndf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-batchnorm'", ".", "format", "(", "t", ",", "cndf", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cndf", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-relu'", ".", "format", "(", "t", ",", "cndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "", "while", "csize", ">", "4", ":", "# \u56fe\u50cf\u5927\u4e8e4\u7684\u8bdd\u5c31\u7ee7\u7eed 16 8 4 \u4e00\u5171\u65b0\u52a0\u4e24\u5c42\u5377\u79ef\u5c42", "\n", "            ", "in_feat", "=", "cndf", "\n", "out_feat", "=", "cndf", "*", "2", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-{1}-conv'", ".", "format", "(", "in_feat", ",", "out_feat", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_feat", ",", "out_feat", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-batchnorm'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_feat", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-relu'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "cndf", "=", "cndf", "*", "2", "# channel \u53d8\u4e3a2\u500d", "\n", "csize", "=", "csize", "/", "2", "# \u56fe\u50cf\u7f29\u5c0f\u4e24\u500d", "\n", "\n", "# state size. K x 4 x 4 #\u6700\u540e\u4e00\u5c42\u5377\u79ef  \u4e00\u5171\u56db\u5c42\u5377\u79ef", "\n", "", "if", "add_final_conv", ":", "\n", "            ", "main", ".", "add_module", "(", "\n", "'final-{0}-{1}-conv'", ".", "format", "(", "cndf", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cndf", ",", "self", ".", "nz", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "# \u56fe\u50cf\u5927\u5c0f\u73b0\u5728\u5df2\u7ecf\u5c0f\u4e8e4\u4e86 (\uff083\uff09+2\u00d70-4\uff09/2+1=1  nz=100", "\n", "\n", "", "self", ".", "main", "=", "main", "\n", "# self.z_mean_calc = nn.Linear(self.nz, self.nz)  # \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u5747\u503c \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.Encoder.forward": [[116, 125], ["network_VAE.Encoder.main"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# print(input.shape)", "\n", "#print('encoder encoder encoder')", "\n", "        ", "latent_i", "=", "self", ".", "main", "(", "input", ")", "\n", "#z_mean = self.z_mean_calc(latent_i.view(-1, self.nz))", "\n", "#z_log_var = self.z_log_var_calc(latent_i.view(-1, self.nz))", "\n", "# epsilon = torch.randn(size=(z_mean.view(-1,self.nz).shape[0], self.nz)).to(self.device) #Sampling", "\n", "# latent_i_star = z_mean + torch.exp(z_log_var / 2) * epsilon  #Sampling", "\n", "return", "latent_i", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.VAE.__init__": [[130, 141], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "n_extra_layers", "=", "0", ",", "add_final_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isize", "=", "opt", ".", "isize", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "nc", "=", "opt", ".", "nc", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "assert", "self", ".", "isize", "%", "16", "==", "0", ",", "\"isize has to be a multiple of 16\"", "\n", "\n", "self", ".", "z_mean_calc", "=", "nn", ".", "Linear", "(", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u5747\u503c \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "self", ".", "z_log_var_calc", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u65b9\u5dee \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.VAE.forward": [[142, 168], ["network_VAE.VAE.z_mean_calc", "network_VAE.VAE.z_log_var_calc", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "input.view", "input.view", "latent_i_star.float", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "z_mean_0.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "z_mean", "=", "self", ".", "z_mean_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "z_log_var", "=", "self", ".", "z_log_var_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "\n", "#stamp = self.get_stamp(target,opt)", "\n", "\n", "# \u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206", "\n", "z_mean_0", "=", "z_mean", "# * stamp", "\n", "z_log_var_0", "=", "z_log_var", "# * stamp", "\n", "epsilon", "=", "torch", ".", "randn", "(", "\n", "size", "=", "(", "z_mean_0", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "nz", ")", ")", ".", "to", "(", "input", ".", "device", ")", "# Sampling", "\n", "# Sampling", "\n", "latent_i_star", "=", "z_mean_0", "+", "torch", ".", "exp", "(", "z_log_var_0", "/", "2", ")", "*", "epsilon", "\n", "\n", "# \u4e0d\u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206 bias \u53ef\u8c03\u3002\u6700\u521d\u4e3a 1", "\n", "#bias = 100", "\n", "#z_mean_flip = (bias-z_mean) * (1-stamp)", "\n", "#z_log_var_flip = (1-z_log_var) * (1-stamp)", "\n", "\n", "# \u7ec4\u5408\u5728\u4e00\u8d77\u8fd4\u56de", "\n", "z_mean_ret", "=", "z_mean_0", "# + z_mean_flip", "\n", "z_log_var_ret", "=", "z_log_var_0", "# + z_log_var_flip", "\n", "\n", "return", "z_mean_ret", ",", "z_log_var_ret", ",", "latent_i_star", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.Decoder.__init__": [[175, 224], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "range", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "n_extra_layers", "=", "0", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isize", "=", "opt", ".", "isize", "\n", "self", ".", "nz", "=", "opt", ".", "nz", "\n", "self", ".", "nc", "=", "opt", ".", "nc", "\n", "self", ".", "ndf", "=", "opt", ".", "ndf", "\n", "self", ".", "ngf", "=", "opt", ".", "ngf", "\n", "assert", "self", ".", "isize", "%", "16", "==", "0", ",", "\"isize has to be a multiple of 16\"", "\n", "\n", "cngf", ",", "tisize", "=", "self", ".", "ngf", "//", "2", ",", "4", "# ngf=64  \u56fe\u50cf\u5927\u5c0f      32\u4e2achannel\u5bf9\u5e944\u7684\u56fe\u50cf\u5927\u5c0f", "\n", "while", "tisize", "!=", "self", ".", "isize", ":", "\n", "            ", "cngf", "=", "cngf", "*", "2", "\n", "tisize", "=", "tisize", "*", "2", "\n", "\n", "", "main", "=", "nn", ".", "Sequential", "(", ")", "\n", "# input is Z, going into a convolution", "\n", "main", ".", "add_module", "(", "'initial-{0}-{1}-convt'", ".", "format", "(", "self", ".", "nz", ",", "cngf", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "self", ".", "nz", ",", "cngf", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'initial-{0}-batchnorm'", ".", "format", "(", "cngf", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cngf", ")", ")", "\n", "main", ".", "add_module", "(", "'initial-{0}-relu'", ".", "format", "(", "cngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "csize", ",", "_", "=", "4", ",", "cngf", "\n", "while", "csize", "<", "self", ".", "isize", "//", "2", ":", "\n", "            ", "main", ".", "add_module", "(", "\n", "'pyramid-{0}-{1}-convt'", ".", "format", "(", "cngf", ",", "cngf", "//", "2", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "cngf", ",", "cngf", "//", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-batchnorm'", ".", "format", "(", "cngf", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cngf", "//", "2", ")", ")", "\n", "main", ".", "add_module", "(", "'pyramid-{0}-relu'", ".", "format", "(", "cngf", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "cngf", "=", "cngf", "//", "2", "\n", "csize", "=", "csize", "*", "2", "# \u914d\u5408\u524d\u9762", "\n", "\n", "# Extra layers", "\n", "", "for", "t", "in", "range", "(", "n_extra_layers", ")", ":", "\n", "            ", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-conv'", ".", "format", "(", "t", ",", "cngf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cngf", ",", "cngf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-batchnorm'", ".", "format", "(", "t", ",", "cngf", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cngf", ")", ")", "\n", "main", ".", "add_module", "(", "'extra-layers-{0}-{1}-relu'", ".", "format", "(", "t", ",", "cngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "main", ".", "add_module", "(", "'final-{0}-{1}-convt'", ".", "format", "(", "cngf", ",", "self", ".", "nc", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "cngf", ",", "self", ".", "nc", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "main", ".", "add_module", "(", "'final-{0}-tanh'", ".", "format", "(", "self", ".", "nc", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "# \u9010\u5143\u7d20", "\n", "self", ".", "main", "=", "main", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.Decoder.forward": [[225, 228], ["network_VAE.Decoder.main"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.weights_init": [[9, 23], ["classname.find", "mod.weight.data.normal_", "classname.find", "mod.weight.data.normal_", "mod.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "mod", ")", ":", "\n", "    ", "\"\"\"\n    Custom weights initialization called on netG, netD and netE\n    :param m:\n    :return:\n    \"\"\"", "\n", "#print(\"mod=\", mod)", "\n", "classname", "=", "mod", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "mod", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "#print('BatchNorm initial')", "\n", "        ", "mod", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "mod", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.weights_init_WD": [[25, 36], ["classname.find", "torch.init.xavier_normal_"], "function", ["None"], ["", "", "def", "weights_init_WD", "(", "mod", ")", ":", "\n", "    ", "\"\"\"\n    Custom weights initialization called on netG, netD and netE\n    :param m:\n    :return:\n    \"\"\"", "\n", "#print(\"mod=\", mod)", "\n", "classname", "=", "mod", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "#mod.weight.data.normal_(0.0, 0.02)", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "mod", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.network_VAE.weights_init_info": [[38, 48], ["classname.find", "torch.init.xavier_normal_"], "function", ["None"], ["", "", "def", "weights_init_info", "(", "mod", ")", ":", "\n", "    ", "\"\"\"\n    Custom weights initialization called on netG, netD and netE\n    :param m:\n    :return:\n    \"\"\"", "\n", "classname", "=", "mod", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# mod.weight.data.normal_(0.0, 0.02)", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "mod", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.conditional_batchnorm.ConditionalBatchNorm2d.__init__": [[10, 14], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConditionalBatchNorm2d", ",", "self", ")", ".", "__init__", "(", "\n", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.conditional_batchnorm.ConditionalBatchNorm2d.forward": [[16, 40], ["conditional_batchnorm.ConditionalBatchNorm2d._check_input_dim", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm.size", "weight.unsqueeze.unsqueeze.unsqueeze().unsqueeze().expand", "bias.unsqueeze.unsqueeze.unsqueeze().unsqueeze().expand", "weight.unsqueeze.unsqueeze.dim", "weight.unsqueeze.unsqueeze.unsqueeze", "bias.unsqueeze.unsqueeze.dim", "bias.unsqueeze.unsqueeze.unsqueeze", "weight.unsqueeze.unsqueeze.unsqueeze().unsqueeze", "bias.unsqueeze.unsqueeze.unsqueeze().unsqueeze", "conditional_batchnorm.ConditionalBatchNorm2d.num_batches_tracked.item", "weight.unsqueeze.unsqueeze.unsqueeze", "bias.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["", "def", "forward", "(", "self", ",", "input", ",", "weight", ",", "bias", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "input", ")", "\n", "\n", "exponential_average_factor", "=", "0.0", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "            ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "                ", "exponential_average_factor", "=", "1.0", "/", "self", ".", "num_batches_tracked", ".", "item", "(", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "                ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "", "output", "=", "F", ".", "batch_norm", "(", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "\n", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "if", "weight", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "weight", "=", "weight", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "bias", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "bias", "=", "bias", ".", "unsqueeze", "(", "0", ")", "\n", "", "size", "=", "output", ".", "size", "(", ")", "\n", "weight", "=", "weight", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "size", ")", "\n", "bias", "=", "bias", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "size", ")", "\n", "return", "weight", "*", "output", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.conditional_batchnorm.CategoricalConditionalBatchNorm2d.__init__": [[44, 53], ["conditional_batchnorm.ConditionalBatchNorm2d.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "conditional_batchnorm.CategoricalConditionalBatchNorm2d._initialize"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "\n", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "CategoricalConditionalBatchNorm2d", ",", "self", ")", ".", "__init__", "(", "\n", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "track_running_stats", "\n", ")", "\n", "self", ".", "weights", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", ")", "\n", "self", ".", "biases", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "num_features", ")", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.conditional_batchnorm.CategoricalConditionalBatchNorm2d._initialize": [[54, 57], ["torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "ones_", "(", "self", ".", "weights", ".", "weight", ".", "data", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "biases", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.conditional_batchnorm.CategoricalConditionalBatchNorm2d.forward": [[58, 63], ["conditional_batchnorm.CategoricalConditionalBatchNorm2d.weights", "conditional_batchnorm.CategoricalConditionalBatchNorm2d.biases", "conditional_batchnorm.ConditionalBatchNorm2d.forward"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_2.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "c", ",", "**", "kwargs", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weights", "(", "c", ")", "\n", "bias", "=", "self", ".", "biases", "(", "c", ")", "\n", "\n", "return", "super", "(", "CategoricalConditionalBatchNorm2d", ",", "self", ")", ".", "forward", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resnet.ResNetGenerator.__init__": [[12, 41], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "models.generators.resblocks.Block", "models.generators.resblocks.Block", "models.generators.resblocks.Block", "models.generators.resblocks.Block", "models.generators.resblocks.Block", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["\n", "\n", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resnet.ResNetGenerator._initialize": [[42, 45], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resnet.ResNetGenerator.forward": [[46, 52], ["resnet.ResNetGenerator.l1().view", "resnet.ResNetGenerator.activation", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "z.size", "resnet.ResNetGenerator.b7", "resnet.ResNetGenerator.conv7", "resnet.ResNetGenerator.l1", "getattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resnet64.ResNetGenerator.__init__": [[12, 38], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "models.generators.resblocks.Block", "models.generators.resblocks.Block", "models.generators.resblocks.Block", "models.generators.resblocks.Block", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "num_features", "=", "64", ",", "dim_z", "=", "128", ",", "bottom_width", "=", "4", ",", "\n", "activation", "=", "F", ".", "relu", ",", "num_classes", "=", "0", ",", "distribution", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", "ResNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "dim_z", "=", "dim_z", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "distribution", "=", "distribution", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "dim_z", ",", "16", "*", "num_features", "*", "bottom_width", "**", "2", ")", "\n", "\n", "self", ".", "block2", "=", "Block", "(", "num_features", "*", "16", ",", "num_features", "*", "8", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "block3", "=", "Block", "(", "num_features", "*", "8", ",", "num_features", "*", "4", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "block4", "=", "Block", "(", "num_features", "*", "4", ",", "num_features", "*", "2", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "block5", "=", "Block", "(", "num_features", "*", "2", ",", "num_features", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "b6", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resnet64.ResNetGenerator._initialize": [[39, 42], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "l1", ".", "weight", ".", "tensor", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "conv7", ".", "weight", ".", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resnet64.ResNetGenerator.forward": [[43, 49], ["resnet64.ResNetGenerator.l1().view", "range", "resnet64.ResNetGenerator.activation", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "z.size", "resnet64.ResNetGenerator.b6", "resnet64.ResNetGenerator.conv6", "resnet64.ResNetGenerator.l1", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "h", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "h", "=", "getattr", "(", "self", ",", "'block{}'", ".", "format", "(", "i", ")", ")", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "", "h", "=", "self", ".", "activation", "(", "self", ".", "b6", "(", "h", ")", ")", "\n", "return", "torch", ".", "tanh", "(", "self", ".", "conv6", "(", "h", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.__init__": [[17, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.generators.conditional_batchnorm.CategoricalConditionalBatchNorm2d", "models.generators.conditional_batchnorm.CategoricalConditionalBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "learnable_sc", "=", "(", "in_ch", "!=", "out_ch", ")", "or", "downsample", "\n", "if", "h_ch", "is", "None", ":", "\n", "            ", "h_ch", "=", "in_ch", "\n", "", "else", ":", "\n", "            ", "h_ch", "=", "out_ch", "\n", "\n", "", "self", ".", "c1", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "h_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "self", ".", "c2", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "h_ch", ",", "out_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "self", ".", "c_sc", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "\n", "", "self", ".", "_initialize", "(", ")", "\n", "\n", "", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "c1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "c2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "self", ".", "c_sc", ".", "weight", ".", "data", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "shortcut", "(", "x", ")", "+", "self", ".", "residual", "(", "x", ")", "\n", "\n", "", "def", "shortcut", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block._initialize": [[42, 47], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["        ", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "x", "=", "self", ".", "c_sc", "(", "x", ")", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "return", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.forward": [[48, 50], ["resblocks.Block.shortcut", "resblocks.Block.residual"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.shortcut", "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.residual"], ["", "def", "residual", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "c1", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "c2", "(", "self", ".", "activation", "(", "h", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.shortcut": [[51, 59], ["resblocks.Block.c_sc", "resblocks._upsample"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks._upsample"], ["if", "self", ".", "downsample", ":", "\n", "            ", "h", "=", "F", ".", "avg_pool2d", "(", "h", ",", "2", ")", "\n", "", "return", "h", "\n", "\n", "\n", "", "", "class", "OptimizedBlock", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "ksize", "=", "3", ",", "pad", "=", "1", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "OptimizedBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks.Block.residual": [[60, 74], ["resblocks.Block.activation", "resblocks.Block.c1", "resblocks.Block.c2", "resblocks.Block.b1", "resblocks.Block.b1", "resblocks._upsample", "resblocks.Block.b2", "resblocks.Block.b2", "resblocks.Block.activation"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks._upsample"], ["self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "c1", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "self", ".", "c2", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "ksize", ",", "1", ",", "pad", ")", ")", "\n", "self", ".", "c_sc", "=", "utils", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n", "", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "c1", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "c2", ".", "weight", ".", "data", ",", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "c_sc", ".", "weight", ".", "data", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "shortcut", "(", "x", ")", "+", "self", ".", "residual", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.generators.resblocks._upsample": [[10, 13], ["torch.interpolate", "x.size"], "function", ["None"], ["class", "Block", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "h_ch", "=", "None", ",", "ksize", "=", "3", ",", "pad", "=", "1", ",", "\n", "activation", "=", "F", ".", "relu", ",", "downsample", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.options.Options.__init__": [[22, 84], ["argparse.ArgumentParser", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument", "options.Options.parser.add_argument"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "##", "\n", "#", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "##", "\n", "# Base", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--root'", ",", "default", "=", "'./data_tiny_imagenet/train/n01443537'", ",", "help", "=", "'path to dataset'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'input batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "help", "=", "'number of data loading workers'", ",", "default", "=", "8", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--droplast'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "help", "=", "'Drop last batch size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--isize'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'input image size.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nz'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'size of the latent z vector'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--extralayers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of extra layers on gen and disc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ",", "help", "=", "'Device: gpu | cpu'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngpu'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of GPUs to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'ganomaly'", ",", "help", "=", "'chooses which model to use. ganomaly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_server'", ",", "type", "=", "str", ",", "default", "=", "\"http://localhost\"", ",", "help", "=", "'visdom server of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'window id of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use visdom.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--outf'", ",", "default", "=", "'./output'", ",", "help", "=", "'folder to output images and model checkpoints'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--manualseed'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'manual seed'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--anomaly_class'", ",", "default", "=", "'car'", ",", "help", "=", "'Anomaly class idx for mnist and cifar datasets'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--proportion'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Proportion of anomalies in test set.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--metric'", ",", "type", "=", "str", ",", "default", "=", "'roc'", ",", "help", "=", "'Evaluation metric.'", ")", "\n", "\n", "##", "\n", "# Train", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_image_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of saving real and fake images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_test_images'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Save test images for demo.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_weights'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Load the pretrained weights'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "\"path to checkpoints (to continue training)\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--iter'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Start from iteration i'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "'number of epochs to train for'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "#\u8d8a\u5927lr\u8870\u51cf\u6708\u6162", "\n", "#self.parser.add_argument('--niter_decay', type=int, default=500, help='# of iter to linearly decay learning rate to zero')  # \u8d8a\u5927lr\u8870\u51cf\u6708\u6162", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--w_bce'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'alpha to weight bce loss.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--w_rec'", ",", "type", "=", "float", ",", "default", "=", "50", ",", "help", "=", "'alpha to weight reconstruction loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--w_enc'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'alpha to weight encoder loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--CRITIC_ITERS'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'For WGAN and WGAN-GP, number of critic iters per gen iter'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--CRITIC_ITERS2'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'For WGAN and WGAN-GP, number of critic iters per gen iter'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--CRITIC_ITERS3'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'For WGAN and WGAN-GP, number of critic iters per gen iter'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_train'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'For caltech coil100 dataset number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "int", ",", "default", "=", "0.5", ",", "help", "=", "'For caltech coil100 dataset outliers number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'For cvae clusters'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "self", ".", "opt", "=", "None", "\n", "self", ".", "number", "=", "None", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--w'", ",", "nargs", "=", "\"?\"", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight for the sum of the mapping loss function'", ")", "\n", "", "def", "parse", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.options.Options.parse": [[84, 91], ["options.Options.parser.parse_known_args"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\" Parse Arguments.\n        \"\"\"", "\n", "\n", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", "\n", "\n", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.diff_aug.DiffAugment": [[6, 17], ["policy.split", "f.contiguous", "f.permute", "f.permute", "f"], "function", ["None"], ["def", "DiffAugment", "(", "x", ",", "policy", "=", "''", ",", "channels_first", "=", "True", ")", ":", "\n", "    ", "if", "policy", ":", "\n", "        ", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "for", "p", "in", "policy", ".", "split", "(", "','", ")", ":", "\n", "            ", "for", "f", "in", "AUGMENT_FNS", "[", "p", "]", ":", "\n", "                ", "x", "=", "f", "(", "x", ")", "\n", "", "", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.diff_aug.rand_brightness": [[19, 22], ["torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_brightness", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", "+", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "-", "0.5", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.diff_aug.rand_saturation": [[24, 28], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_saturation", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "*", "2", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.diff_aug.rand_contrast": [[30, 34], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_contrast", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "+", "0.5", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.diff_aug.rand_translation": [[36, 50], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation", "(", "x", ",", "ratio", "=", "0.125", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.diff_aug.rand_cutout": [[52, 67], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.5", ")", ":", "\n", "    ", "cutout_size", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.RandomCropLongEdge.__call__": [[28, 36], ["torchvision.functional.crop", "min", "min", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "size", "=", "(", "min", "(", "img", ".", "size", ")", ",", "min", "(", "img", ".", "size", ")", ")", "\n", "# Only step forward along this edge if it's the long edge", "\n", "i", "=", "(", "0", "if", "size", "[", "0", "]", "==", "img", ".", "size", "[", "0", "]", "\n", "else", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "img", ".", "size", "[", "0", "]", "-", "size", "[", "0", "]", ")", ")", "\n", "j", "=", "(", "0", "if", "size", "[", "1", "]", "==", "img", ".", "size", "[", "1", "]", "\n", "else", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "img", ".", "size", "[", "1", "]", "-", "size", "[", "1", "]", ")", ")", "\n", "return", "transforms", ".", "functional", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.RandomCropLongEdge.__repr__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.CenterCropLongEdge.__call__": [[48, 50], ["torchvision.functional.center_crop", "min"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "transforms", ".", "functional", ".", "center_crop", "(", "img", ",", "min", "(", "img", ".", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.CenterCropLongEdge.__repr__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.LoadDataset.__init__": [[56, 104], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "print", "load_dataset.LoadDataset.load_dataset", "torchvision.ToTensor", "torchvision.ToPILImage", "torchvision.RandomHorizontalFlip", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Resize", "load_dataset.RandomCropLongEdge", "torchvision.Resize", "load_dataset.CenterCropLongEdge", "torchvision.Resize"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.LoadDataset.load_dataset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "dataset_name", ",", "data_path", ",", "train", ",", "download", ",", "resize_size", ",", "\n", "hdf5_path", "=", "None", ",", "random_flip", "=", "False", ",", "norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "LoadDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "download", "=", "download", "\n", "self", ".", "resize_size", "=", "resize_size", "\n", "self", ".", "hdf5_path", "=", "hdf5_path", "\n", "self", ".", "random_flip", "=", "random_flip", "\n", "self", ".", "norm_mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "self", ".", "norm_std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "if", "self", ".", "hdf5_path", "is", "None", ":", "\n", "            ", "if", "self", ".", "dataset_name", "in", "[", "'cifar10'", ",", "'cifar100'", "]", ":", "\n", "                ", "self", ".", "transforms", "=", "[", "]", "\n", "", "elif", "self", ".", "dataset_name", "in", "[", "\"tiny_imagenet\"", ",", "'MNIST'", "]", ":", "\n", "                ", "self", ".", "transforms", "=", "[", "transforms", ".", "Resize", "(", "self", ".", "resize_size", ")", "]", "\n", "", "elif", "self", ".", "dataset_name", "in", "[", "'imagenet'", ",", "'gtsrb'", ",", "'custom'", "]", ":", "\n", "                ", "if", "train", ":", "\n", "                    ", "self", ".", "transforms", "=", "[", "\n", "RandomCropLongEdge", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "self", ".", "resize_size", ")", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "transforms", "=", "[", "\n", "CenterCropLongEdge", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "self", ".", "resize_size", ")", "]", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "transforms", "=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "\n", "\n", "", "if", "random_flip", "and", "self", ".", "dataset_name", "!=", "\"gtsrb\"", ":", "\n", "            ", "self", ".", "transforms", "+=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", "]", "\n", "\n", "", "self", ".", "transforms", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "norm", ":", "\n", "            ", "if", "self", ".", "dataset_name", "==", "\"MNIST\"", ":", "\n", "                ", "self", ".", "transforms", "+=", "[", "\n", "transforms", ".", "Normalize", "(", "self", ".", "norm_mean", "[", ":", "1", "]", ",", "self", ".", "norm_std", "[", ":", "1", "]", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "transforms", "+=", "[", "\n", "transforms", ".", "Normalize", "(", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ")", "\n", "]", "\n", "", "", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "self", ".", "transforms", ")", "\n", "print", "(", "self", ".", "transforms", ")", "\n", "\n", "self", ".", "load_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.LoadDataset.load_dataset": [[105, 183], ["print", "torchvision.datasets.CIFAR10", "h5py.File", "print", "torchvision.datasets.CIFAR100", "torchvision.datasets.MNIST", "os.path.join", "h5py.File", "os.path.join", "os.path.join", "print", "os.path.join", "torchvision.datasets.ImageFolder", "os.path.join", "os.path.join", "pandas.read_csv", "h5py.File", "print", "os.path.join", "torchvision.datasets.ImageFolder", "random.shuffle", "STL10", "h5py.File", "os.path.join", "print", "os.path.join", "torchvision.datasets.ImageFolder", "h5py.File"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset_name", "==", "'cifar10'", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n", "self", ".", "labels", "=", "f", "[", "'labels'", "]", "[", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "CIFAR10", "(", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ")", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "download", "=", "self", ".", "download", ")", "\n", "", "", "elif", "self", ".", "dataset_name", "==", "'cifar100'", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n", "self", ".", "labels", "=", "f", "[", "'labels'", "]", "[", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "CIFAR100", "(", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ")", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "download", "=", "self", ".", "download", ")", "\n", "", "", "elif", "self", ".", "dataset_name", "==", "'MNIST'", ":", "\n", "            ", "self", ".", "data", "=", "MNIST", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ")", ",", "\n", "train", "=", "self", ".", "train", ",", "download", "=", "self", ".", "download", ")", "\n", "", "elif", "self", ".", "dataset_name", "==", "'imagenet'", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n", "self", ".", "labels", "=", "f", "[", "'labels'", "]", "[", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "mode", "=", "'train'", "if", "self", ".", "train", "==", "True", "else", "'valid'", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "'ILSVRC2012'", ",", "mode", ")", "\n", "self", ".", "data", "=", "ImageFolder", "(", "root", "=", "root", ")", "\n", "\n", "", "", "elif", "self", ".", "dataset_name", "==", "'gtsrb'", ":", "\n", "            ", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'GTSRB'", ")", "\n", "self", ".", "sub_directory", "=", "'trainingset'", "if", "self", ".", "train", "else", "'testset'", "\n", "self", ".", "csv_file_name", "=", "'training.csv'", "if", "self", ".", "train", "else", "'test.csv'", "\n", "\n", "csv_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "self", ".", "sub_directory", ",", "self", ".", "csv_file_name", "\n", ")", "\n", "\n", "self", ".", "csv_data", "=", "pd", ".", "read_csv", "(", "csv_file_path", ")", "\n", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"tiny_imagenet\"", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n", "self", ".", "labels", "=", "f", "[", "'labels'", "]", "[", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "mode", "=", "'train'", "if", "self", ".", "train", "==", "True", "else", "'val/images'", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "\"tiny-imagenet-200\"", ",", "mode", ")", "\n", "self", ".", "data", "=", "ImageFolder", "(", "root", "=", "root", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "data", ".", "samples", ",", "lambda", ":", "0.1", ")", "\n", "self", ".", "data", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "self", ".", "data", ".", "samples", "]", "\n", "\n", "", "", "elif", "self", ".", "dataset_name", "==", "\"STL10\"", ":", "\n", "            ", "mode", "=", "'test'", "if", "self", ".", "train", "==", "True", "else", "'train'", "\n", "self", ".", "data", "=", "STL10", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "self", ".", "dataset_name", ")", ",", "\n", "split", "=", "mode", ",", "download", "=", "True", ")", "\n", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"custom\"", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n", "self", ".", "labels", "=", "f", "[", "'labels'", "]", "[", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "mode", "=", "'train'", "if", "self", ".", "train", "==", "True", "else", "'valid'", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "'CUSTOM'", ",", "mode", ")", "\n", "self", ".", "data", "=", "ImageFolder", "(", "root", "=", "root", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.LoadDataset.__len__": [[184, 192], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset_name", "==", "\"gtsrb\"", ":", "\n", "            ", "num_dataset", "=", "len", "(", "self", ".", "csv_data", ")", "\n", "", "elif", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "            ", "num_dataset", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "num_dataset", "=", "len", "(", "self", ".", "data", ")", "\n", "", "return", "num_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.load_dataset.LoadDataset.__getitem__": [[193, 214], ["os.path.join", "PIL.Image.open", "int", "load_dataset.LoadDataset.transforms", "load_dataset.LoadDataset.transforms", "load_dataset.LoadDataset.transforms", "int", "img.expand.expand.expand", "numpy.transpose", "int"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "dataset_name", "==", "\"gtsrb\"", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "self", ".", "sub_directory", ",", "self", ".", "csv_data", ".", "iloc", "[", "index", ",", "0", "]", "\n", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "label", "=", "int", "(", "self", ".", "csv_data", ".", "iloc", "[", "index", ",", "1", "]", ")", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transforms", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "", "elif", "self", ".", "hdf5_path", "is", "None", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", "\n", "img", ",", "label", "=", "self", ".", "transforms", "(", "img", ")", ",", "int", "(", "label", ")", "\n", "if", "self", ".", "dataset_name", "==", "\"MNIST\"", ":", "\n", "                ", "img", "=", "img", ".", "expand", "(", "3", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "img", ",", "label", "=", "np", ".", "transpose", "(", "self", ".", "data", "[", "index", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "img", "=", "self", ".", "transforms", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.ConditionalBatchNorm2d.__init__": [[74, 85], ["torch.Module.__init__", "model_ops.batchnorm_2d", "model_ops.sn_embedding", "model_ops.sn_embedding", "model_ops.embedding", "model_ops.embedding"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "spectral_norm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "bn", "=", "batchnorm_2d", "(", "num_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "False", ")", "\n", "\n", "if", "spectral_norm", ":", "\n", "            ", "self", ".", "embed0", "=", "sn_embedding", "(", "num_classes", ",", "num_features", ")", "\n", "self", ".", "embed1", "=", "sn_embedding", "(", "num_classes", ",", "num_features", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed0", "=", "embedding", "(", "num_classes", ",", "num_features", ")", "\n", "self", ".", "embed1", "=", "embedding", "(", "num_classes", ",", "num_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.ConditionalBatchNorm2d.forward": [[86, 91], ["model_ops.ConditionalBatchNorm2d.embed1().view", "model_ops.ConditionalBatchNorm2d.bn", "model_ops.ConditionalBatchNorm2d.embed1", "model_ops.ConditionalBatchNorm2d.embed0"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "gain", "=", "(", "1", "+", "self", ".", "embed0", "(", "y", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "embed1", "(", "y", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "out", "*", "gain", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.ConditionalBatchNorm2d_for_skip_and_shared.__init__": [[95, 106], ["torch.Module.__init__", "model_ops.batchnorm_2d", "model_ops.snlinear", "model_ops.snlinear", "model_ops.linear", "model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "z_dims_after_concat", ",", "spectral_norm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "bn", "=", "batchnorm_2d", "(", "num_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "False", ")", "\n", "\n", "if", "spectral_norm", ":", "\n", "            ", "self", ".", "gain", "=", "snlinear", "(", "z_dims_after_concat", ",", "num_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "snlinear", "(", "z_dims_after_concat", ",", "num_features", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gain", "=", "linear", "(", "z_dims_after_concat", ",", "num_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "linear", "(", "z_dims_after_concat", ",", "num_features", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.ConditionalBatchNorm2d_for_skip_and_shared.forward": [[107, 112], ["model_ops.ConditionalBatchNorm2d_for_skip_and_shared.bias().view", "model_ops.ConditionalBatchNorm2d_for_skip_and_shared.bn", "y.size", "y.size", "model_ops.ConditionalBatchNorm2d_for_skip_and_shared.bias", "model_ops.ConditionalBatchNorm2d_for_skip_and_shared.gain"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "gain", "=", "(", "1", "+", "self", ".", "gain", "(", "y", ")", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "bias", "(", "y", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "out", "*", "gain", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.Self_Attn.__init__": [[116, 134], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Softmax", "torch.Softmax", "torch.Parameter", "torch.Parameter", "model_ops.snconv2d", "model_ops.snconv2d", "model_ops.snconv2d", "model_ops.snconv2d", "model_ops.conv2d", "model_ops.conv2d", "model_ops.conv2d", "model_ops.conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "spectral_norm", ")", ":", "\n", "        ", "super", "(", "Self_Attn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n", "if", "spectral_norm", ":", "\n", "            ", "self", ".", "conv1x1_theta", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_phi", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_g", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_attn", "=", "snconv2d", "(", "in_channels", "=", "in_channels", "//", "2", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1x1_theta", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_phi", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_g", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_attn", "=", "conv2d", "(", "in_channels", "=", "in_channels", "//", "2", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "sigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.Self_Attn.forward": [[135, 163], ["x.size", "model_ops.Self_Attn.conv1x1_theta", "theta.view.view.view", "model_ops.Self_Attn.conv1x1_phi", "model_ops.Self_Attn.maxpool", "phi.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model_ops.Self_Attn.softmax", "model_ops.Self_Attn.conv1x1_g", "model_ops.Self_Attn.maxpool", "g.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model_ops.Self_Attn.view", "model_ops.Self_Attn.conv1x1_attn", "theta.view.view.permute", "model_ops.Self_Attn.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps(B X C X H X W)\n            returns :\n                out : self attention value + input feature\n                attention: B X N X N (N is Width*Height)\n        \"\"\"", "\n", "_", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "# Theta path", "\n", "theta", "=", "self", ".", "conv1x1_theta", "(", "x", ")", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "ch", "//", "8", ",", "h", "*", "w", ")", "\n", "# Phi path", "\n", "phi", "=", "self", ".", "conv1x1_phi", "(", "x", ")", "\n", "phi", "=", "self", ".", "maxpool", "(", "phi", ")", "\n", "phi", "=", "phi", ".", "view", "(", "-", "1", ",", "ch", "//", "8", ",", "h", "*", "w", "//", "4", ")", "\n", "# Attn map", "\n", "attn", "=", "torch", ".", "bmm", "(", "theta", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "phi", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "# g path", "\n", "g", "=", "self", ".", "conv1x1_g", "(", "x", ")", "\n", "g", "=", "self", ".", "maxpool", "(", "g", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "ch", "//", "2", ",", "h", "*", "w", "//", "4", ")", "\n", "# Attn_g", "\n", "attn_g", "=", "torch", ".", "bmm", "(", "g", ",", "attn", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "attn_g", "=", "attn_g", ".", "view", "(", "-", "1", ",", "ch", "//", "2", ",", "h", ",", "w", ")", "\n", "attn_g", "=", "self", ".", "conv1x1_attn", "(", "attn_g", ")", "\n", "return", "x", "+", "self", ".", "sigma", "*", "attn_g", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.init_weights": [[8, 38], ["modules", "isinstance", "isinstance", "isinstance", "isinstance", "torch.nn.init.orthogonal_", "module.bias.data.fill_", "torch.nn.init.normal_", "torch.nn.init.orthogonal_", "module.bias.data.fill_", "torch.nn.init.xavier_uniform_", "print", "torch.nn.init.normal_", "module.bias.data.fill_", "torch.nn.init.xavier_uniform_", "print"], "function", ["None"], ["def", "init_weights", "(", "modules", ",", "initialize", ")", ":", "\n", "    ", "for", "module", "in", "modules", "(", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "\n", "or", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", "\n", "or", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "if", "initialize", "==", "'ortho'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "elif", "initialize", "==", "'N02'", ":", "\n", "                ", "init", ".", "normal_", "(", "module", ".", "weight", ",", "0", ",", "0.02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "elif", "initialize", "in", "[", "'glorot'", ",", "'xavier'", "]", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'Init style not recognized...'", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "initialize", "==", "'ortho'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "module", ".", "weight", ")", "\n", "", "elif", "initialize", "==", "'N02'", ":", "\n", "                ", "init", ".", "normal_", "(", "module", ".", "weight", ",", "0", ",", "0.02", ")", "\n", "", "elif", "initialize", "in", "[", "'glorot'", ",", "'xavier'", "]", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Init style not recognized...'", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.conv2d": [[40, 43], ["torch.Conv2d"], "function", ["None"], ["", "", "", "def", "conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.deconv2d": [[44, 47], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "deconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.linear": [[48, 50], ["torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.embedding": [[51, 53], ["torch.Embedding"], "function", ["None"], ["", "def", "embedding", "(", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "return", "nn", ".", "Embedding", "(", "num_embeddings", "=", "num_embeddings", ",", "embedding_dim", "=", "embedding_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.snconv2d": [[54, 57], ["torch.nn.utils.spectral_norm", "torch.Conv2d"], "function", ["None"], ["", "def", "snconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.sndeconv2d": [[58, 61], ["torch.nn.utils.spectral_norm", "torch.ConvTranspose2d"], "function", ["None"], ["", "def", "sndeconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.snlinear": [[62, 64], ["torch.nn.utils.spectral_norm", "torch.Linear"], "function", ["None"], ["", "def", "snlinear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "bias", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.sn_embedding": [[65, 67], ["torch.nn.utils.spectral_norm", "torch.Embedding"], "function", ["None"], ["", "def", "sn_embedding", "(", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Embedding", "(", "num_embeddings", "=", "num_embeddings", ",", "embedding_dim", "=", "embedding_dim", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.model_ops.batchnorm_2d": [[68, 70], ["torch.BatchNorm2d"], "function", ["None"], ["", "def", "batchnorm_2d", "(", "in_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm2d", "(", "in_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.make_logger": [[14, 41], ["logging.getLogger", "os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.makedirs", "logging.FileHandler", "logging.StreamHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "[].split", "log_output.split"], "function", ["None"], ["def", "make_logger", "(", "run_name", ",", "log_output", ")", ":", "\n", "    ", "if", "log_output", "is", "not", "None", ":", "\n", "        ", "run_name", "=", "log_output", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "# get and set root logger", "\n", "logger", ".", "propagate", "=", "False", "\n", "log_filepath", "=", "log_output", "if", "log_output", "is", "not", "None", "else", "os", ".", "path", ".", "join", "(", "\n", "'results/log'", ",", "f'{run_name}.log'", ")", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "log_filepath", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "\n", "", "if", "not", "logger", ".", "handlers", ":", "# execute only if logger doesn't already exist", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_filepath", ",", "'a'", ",", "'utf-8'", ")", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "os", ".", "sys", ".", "stdout", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'[%(levelname)s] %(asctime)s > %(message)s'", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1": [[43, 66], ["warnings.warn", "torch.no_grad", "misc.diff_aug.DiffAugment.to", "misc.diff_aug.DiffAugment", "encoder().to", "label.to", "vae", "gen", "misc.diff_aug.DiffAugment", "gen", "misc.diff_aug.DiffAugment", "z.to", "random.randint", "z.to", "encoder", "int", "int"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment"], ["", "def", "generate1", "(", "img", ",", "label", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "next", "=", "False", ",", "policy", "=", "\"\"", ",", "\n", "class_num", "=", "10", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "\"Note: This generate is for {} classes\"", ".", "format", "(", "class_num", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "img", "=", "DiffAugment", "(", "img", ",", "policy", "=", "policy", ")", "\n", "\n", "latent_i", "=", "encoder", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "\n", "y", "=", "label", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "z", "=", "vae", "(", "latent_i", ")", "\n", "img_pos", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y", ")", "\n", "img_pos", "=", "DiffAugment", "(", "img_pos", ",", "policy", "=", "policy", ")", "\n", "\n", "if", "next", ":", "\n", "            ", "Int_Modi", "=", "1", "\n", "", "else", ":", "\n", "            ", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "int", "(", "class_num", "-", "1", ")", ")", "\n", "", "wrong_y", "=", "(", "(", "y", "+", "Int_Modi", ")", "%", "int", "(", "class_num", ")", ")", ".", "to", "(", "device", ")", "\n", "img_neg", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "wrong_y", ")", "\n", "img_neg", "=", "DiffAugment", "(", "img_neg", ",", "policy", "=", "policy", ")", "\n", "\n", "", "return", "img", ",", "img_pos", ",", "img_neg", ",", "y", ",", "wrong_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.gen_with_pn": [[68, 80], ["torch.no_grad", "img.to.to", "encoder().to", "vae", "pos_label.to", "gen", "neg_label.to", "gen", "z.to", "z.to", "encoder"], "function", ["None"], ["", "def", "gen_with_pn", "(", "img", ",", "pos_label", ",", "neg_label", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "latent_i", "=", "encoder", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "z", "=", "vae", "(", "latent_i", ")", "\n", "\n", "y", "=", "pos_label", ".", "to", "(", "device", ")", "\n", "img_pos", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y", ")", "\n", "\n", "wrong_y", "=", "neg_label", ".", "to", "(", "device", ")", "\n", "img_neg", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "wrong_y", ")", "\n", "", "return", "img", ",", "img_pos", ",", "img_neg", ",", "y", ",", "wrong_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.gen_with_label": [[82, 91], ["torch.no_grad", "img.to.to", "encoder().to", "vae", "label.to", "gen", "z.to", "encoder"], "function", ["None"], ["", "def", "gen_with_label", "(", "img", ",", "label", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "latent_i", "=", "encoder", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "z", "=", "vae", "(", "latent_i", ")", "\n", "\n", "y", "=", "label", ".", "to", "(", "device", ")", "\n", "img_gen", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y", ")", "\n", "", "return", "img", ",", "img_gen", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_1_pair": [[93, 106], ["torch.zeros", "mlpModel", "misc.diff_aug.DiffAugment", "mlpModel.eval", "mlpModel.train"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train"], ["", "def", "inference_1_pair", "(", "mlpModel", ",", "pair", ",", "y", ",", "pos", ",", "test", "=", "False", ",", "policy", "=", "None", ")", ":", "\n", "    ", "if", "policy", "is", "not", "None", ":", "\n", "        ", "pair", "=", "DiffAugment", "(", "pair", ",", "policy", "=", "policy", ")", "\n", "", "gt_pair", "=", "torch", ".", "zeros", "(", "pair", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "pos", ":", "\n", "        ", "gt_pair", "+=", "1", "\n", "", "if", "test", ":", "\n", "        ", "mlpModel", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "mlpModel", ".", "train", "(", ")", "\n", "", "pred", "=", "mlpModel", "(", "(", "pair", ",", "y", ")", ")", "\n", "assert", "pred", ".", "shape", "[", "1", "]", "==", "2", "\n", "return", "gt_pair", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_2_mlp": [[108, 113], ["torch.cat", "utils.inference_1_pair"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_1_pair"], ["", "def", "inference_2_mlp", "(", "mlpModel", ",", "feat_emb", ",", "feat", ",", "y", ",", "pos", ",", "test", "=", "False", ",", "policy", "=", "None", ")", ":", "\n", "    ", "pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat", "]", ",", "dim", "=", "1", ")", "\n", "gt_pair", ",", "pred", "=", "inference_1_pair", "(", "\n", "mlpModel", ",", "pair", ",", "y", ",", "pos", ",", "test", "=", "test", ",", "policy", "=", "policy", ")", "\n", "return", "gt_pair", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_2_mlp_m": [[115, 118], ["NotImplementedError"], "function", ["None"], ["", "def", "inference_2_mlp_m", "(", "\n", "mlpModel", ",", "feat_emb", ",", "feat", ",", "y", ",", "pos", ",", "test", "=", "False", ",", "policy", "=", "None", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_2_pair": [[120, 138], ["torch.cat", "mlpModel", "mlpModel", "torch.cat", "misc.diff_aug.DiffAugment", "misc.diff_aug.DiffAugment", "mlpModel.eval", "mlpModel.train", "torch.ones", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train"], ["", "def", "inference_2_pair", "(", "mlpModel", ",", "pos_pair", ",", "neg_pair", ",", "y_pos", ",", "y_neg", ",", "test", "=", "False", ",", "\n", "policy", "=", "None", ")", ":", "\n", "    ", "if", "policy", "is", "not", "None", ":", "\n", "        ", "pos_pair", "=", "DiffAugment", "(", "pos_pair", ",", "policy", "=", "policy", ")", "\n", "neg_pair", "=", "DiffAugment", "(", "neg_pair", ",", "policy", "=", "policy", ")", "\n", "", "gt_pair", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "ones", "(", "pos_pair", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "zeros", "(", "neg_pair", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "]", ",", "dim", "=", "0", ")", "\n", "if", "test", ":", "\n", "        ", "mlpModel", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "mlpModel", ".", "train", "(", ")", "\n", "", "pos_pred", "=", "mlpModel", "(", "(", "pos_pair", ",", "y_pos", ")", ")", "\n", "neg_pred", "=", "mlpModel", "(", "(", "neg_pair", ",", "y_neg", ")", ")", "\n", "pred", "=", "torch", ".", "cat", "(", "[", "pos_pred", ",", "neg_pred", "]", ",", "dim", "=", "0", ")", "\n", "assert", "pred", ".", "shape", "[", "1", "]", "==", "2", "\n", "return", "gt_pair", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_4_mlp": [[140, 147], ["torch.cat", "torch.cat", "utils.inference_2_pair"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_2_pair"], ["", "def", "inference_4_mlp", "(", "mlpModel", ",", "feat_emb_pos", ",", "feat_emb_neg", ",", "feat_pos", ",", "feat_neg", ",", "\n", "y", ",", "wrong_y", ",", "test", "=", "False", ",", "policy", "=", "None", ")", ":", "\n", "    ", "pos_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb_pos", ",", "feat_pos", "]", ",", "dim", "=", "1", ")", "\n", "neg_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb_neg", ",", "feat_neg", "]", ",", "dim", "=", "1", ")", "\n", "gt_pair", ",", "pred", "=", "inference_2_pair", "(", "\n", "mlpModel", ",", "pos_pair", ",", "neg_pair", ",", "y", ",", "wrong_y", ",", "test", "=", "test", ",", "policy", "=", "policy", ")", "\n", "return", "gt_pair", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_4_mlp_m": [[149, 152], ["NotImplementedError"], "function", ["None"], ["", "def", "inference_4_mlp_m", "(", "mlpModel", ",", "feat_emb_pos", ",", "feat_emb_neg", ",", "feat_pos", ",", "feat_neg", ",", "\n", "y", ",", "wrong_y", ",", "test", "=", "False", ",", "policy", "=", "None", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_mlp": [[154, 170], ["torch.cat", "torch.cat", "utils.inference_2_pair", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_2_pair"], ["", "def", "inference_mlp", "(", "mlpModel", ",", "feat_emb", ",", "feat_pos", ",", "feat_neg", ",", "y", ",", "wrong_y", ",", "\n", "test", "=", "False", ",", "policy", "=", "None", ",", "aux_data", "=", "None", ")", ":", "\n", "    ", "pos_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_pos", "]", ",", "dim", "=", "1", ")", "\n", "neg_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_neg", "]", ",", "dim", "=", "1", ")", "\n", "if", "aux_data", "is", "not", "None", ":", "\n", "        ", "aux_pair", "=", "torch", ".", "cat", "(", "[", "\n", "aux_data", "[", "\"feat_aux_emb\"", "]", ",", "\n", "aux_data", "[", "\"feat_aux_pos\"", "]", "\n", "]", ",", "dim", "=", "1", ")", "\n", "pos_pair", "=", "torch", ".", "cat", "(", "[", "pos_pair", ",", "aux_pair", "]", ",", "dim", "=", "0", ")", "\n", "y_pos", "=", "torch", ".", "cat", "(", "[", "y", ",", "aux_data", "[", "\"aux_y\"", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "y_pos", "=", "y", "\n", "", "gt_pair", ",", "pred", "=", "inference_2_pair", "(", "\n", "mlpModel", ",", "pos_pair", ",", "neg_pair", ",", "y_pos", ",", "wrong_y", ",", "test", "=", "test", ",", "policy", "=", "policy", ")", "\n", "return", "gt_pair", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_mlp_m": [[172, 185], ["utils.inference_2_pair", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.inference_2_pair"], ["", "def", "inference_mlp_m", "(", "mlpModel", ",", "feat_emb", ",", "feat_pos", ",", "feat_neg", ",", "y", ",", "wrong_y", ",", "\n", "test", "=", "False", ",", "policy", "=", "None", ",", "aux_data", "=", "None", ")", ":", "\n", "    ", "pos_pair", "=", "feat_emb", "-", "feat_pos", "\n", "neg_pair", "=", "feat_emb", "-", "feat_neg", "\n", "if", "aux_data", "is", "not", "None", ":", "\n", "        ", "aux_pair", "=", "aux_data", "[", "\"feat_aux_emb\"", "]", "-", "aux_data", "[", "\"feat_aux_pos\"", "]", "\n", "pos_pair", "=", "torch", ".", "cat", "(", "[", "pos_pair", ",", "aux_pair", "]", ",", "dim", "=", "0", ")", "\n", "y_pos", "=", "torch", ".", "cat", "(", "[", "y", ",", "aux_data", "[", "\"aux_y\"", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "y_pos", "=", "y", "\n", "", "gt_pair", ",", "pred", "=", "inference_2_pair", "(", "\n", "mlpModel", ",", "pos_pair", ",", "neg_pair", ",", "y_pos", ",", "wrong_y", ",", "test", "=", "test", ",", "policy", "=", "policy", ")", "\n", "return", "gt_pair", ",", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.flatten_dict": [[187, 198], ["init_dict.items", "type", "type", "res_dict.update", "utils.flatten_dict"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.flatten_dict"], ["", "def", "flatten_dict", "(", "init_dict", ")", ":", "\n", "    ", "res_dict", "=", "{", "}", "\n", "if", "type", "(", "init_dict", ")", "is", "not", "dict", ":", "\n", "        ", "return", "res_dict", "\n", "\n", "", "for", "k", ",", "v", "in", "init_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "dict", ":", "\n", "            ", "res_dict", ".", "update", "(", "flatten_dict", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "            ", "res_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.setattr_cls_from_kwargs": [[200, 205], ["utils.flatten_dict", "flatten_dict.keys", "setattr"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.flatten_dict", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "setattr_cls_from_kwargs", "(", "cls", ",", "kwargs", ")", ":", "\n", "    ", "kwargs", "=", "flatten_dict", "(", "kwargs", ")", "\n", "for", "key", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "value", "=", "kwargs", "[", "key", "]", "\n", "setattr", "(", "cls", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.dict2clsattr": [[207, 218], ["itertools.chain", "utils.setattr_cls_from_kwargs", "train_configs.items", "model_configs.items"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.setattr_cls_from_kwargs"], ["", "", "def", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", ":", "\n", "    ", "cfgs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "chain", "(", "train_configs", ".", "items", "(", ")", ",", "model_configs", ".", "items", "(", ")", ")", ":", "\n", "        ", "cfgs", "[", "k", "]", "=", "v", "\n", "\n", "", "class", "cfg_container", ":", "\n", "        ", "pass", "\n", "", "cfg_container", ".", "train_configs", "=", "train_configs", "\n", "cfg_container", ".", "model_configs", "=", "model_configs", "\n", "setattr_cls_from_kwargs", "(", "cfg_container", ",", "cfgs", ")", "\n", "return", "cfg_container", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.save_best": [[220, 235], ["glob.glob", "torch.save", "print", "print", "os.remove"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save"], ["", "def", "save_best", "(", "best_prec", ",", "prefix", ",", "acc", ",", "params", ",", "epoch", ",", "arch", ",", "results_dir", ",", "\n", "min_mode", "=", "False", ")", ":", "\n", "    ", "on_save", "=", "acc", "<=", "best_prec", "if", "min_mode", "else", "acc", ">=", "best_prec", "\n", "if", "on_save", ":", "\n", "        ", "best_prec", "=", "acc", "\n", "for", "file", "in", "glob", ".", "glob", "(", "\n", "results_dir", "+", "'/{}_{}E*'", ".", "format", "(", "arch", ",", "prefix", ")", ")", ":", "\n", "            ", "os", ".", "remove", "(", "file", ")", "\n", "", "torch", ".", "save", "(", "\n", "params", ",", "results_dir", "+", "\n", "'/{}_{}E{}V{:.2f}.pth'", ".", "format", "(", "arch", ",", "prefix", ",", "epoch", ",", "acc", ")", ")", "\n", "print", "(", "\">>>>>> Best saved <<<<<<\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\">>>>>> Best not change from {} <<<<<<\"", ".", "format", "(", "best_prec", ")", ")", "\n", "", "return", "best_prec", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_helper": [[237, 314], ["enumerate", "len", "len", "len", "len", "img.cuda.cuda", "classId.cuda.cuda", "foolbox.utils.accuracy", "logging.info", "fmodel().argmax", "cls_cor.sum().item", "enumerate", "logging.info", "len", "all_sample[].append", "all_sample[].append", "logging.info", "get_adv", "os.path.join", "torch.save", "fmodel", "cls_cor.sum", "[].append", "model", "logits_cls.argmax", "correct_rej.sum", "correct_rej_dis.sum", "correct_rej_dm.sum", "torch.logical_and", "torch.logical_and.sum().item", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "foolbox.utils.accuracy", "logging.info", "os.remove", "get_adv.cpu", "both_rej.cpu", "dis_rej.cpu", "dm_rej.cpu", "torch.logical_or", "numpy.array", "both_rej.cpu", "torch.logical_and.sum", "classId.cuda.cpu", "logits_cls.argmax.cpu", "dis_rej.cpu", "dm_rej.byte().cpu", "both_rej.byte().cpu", "numpy.array", "numpy.array", "numpy.array", "dm_rej.byte", "both_rej.byte", "numpy.array"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save"], ["", "def", "attack_helper", "(", "data_loader", ",", "model", ",", "fmodel", ",", "params", ",", "get_adv", ",", "prefix", ",", "\n", "save_dir", "=", "None", ",", "save_prefix", "=", "None", ",", "save", "=", "False", ",", "no_test", "=", "False", ")", ":", "\n", "    ", "dec_cor_batch", "=", "[", "0", "]", "*", "(", "len", "(", "params", ")", "+", "1", ")", "\n", "cor_batch", "=", "[", "0", "]", "*", "len", "(", "params", ")", "\n", "dis_cor_batch", "=", "[", "0", "]", "*", "len", "(", "params", ")", "\n", "dm_cor_batch", "=", "[", "0", "]", "*", "len", "(", "params", ")", "\n", "total_number", "=", "0", "\n", "total_adv_acc", "=", "[", "0", "]", "*", "len", "(", "params", ")", "\n", "if", "save", ":", "\n", "        ", "all_sample", "=", "{", "\"x_ori\"", ":", "[", "]", ",", "\"y_ori\"", ":", "[", "]", ",", "\n", "\"x_adv\"", ":", "{", "eps", ":", "[", "]", "for", "eps", "in", "params", "}", "}", "\n", "save_name", "=", "\"\"", "\n", "", "for", "idx", ",", "(", "img", ",", "classId", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "if", "save", ":", "\n", "            ", "all_sample", "[", "\"x_ori\"", "]", ".", "append", "(", "img", ")", "\n", "all_sample", "[", "\"y_ori\"", "]", ".", "append", "(", "classId", ")", "\n", "", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "total_number", "+=", "img", ".", "shape", "[", "0", "]", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "img", ",", "classId", ")", "\n", "logging", ".", "info", "(", "\"cls acc of this batch is:{}, total num {}\"", ".", "format", "(", "\n", "acc_of_classifier", ",", "total_number", ")", ")", "\n", "cls_pred", "=", "fmodel", "(", "img", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "cls_cor", "=", "(", "cls_pred", "==", "classId", ")", ".", "byte", "(", ")", ".", "cpu", "(", ")", "\n", "dec_cor_batch", "[", "-", "1", "]", "+=", "cls_cor", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "params", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'==========param={}============'", ".", "format", "(", "param", ")", ")", "\n", "\n", "x_adv", "=", "get_adv", "(", "param", ",", "idx", ",", "img", ",", "classId", ")", "\n", "if", "save", ":", "\n", "                ", "all_sample", "[", "\"x_adv\"", "]", "[", "param", "]", ".", "append", "(", "x_adv", ".", "cpu", "(", ")", ")", "\n", "", "if", "not", "no_test", ":", "\n", "                ", "_", ",", "dis_rej", ",", "dm_rej", ",", "both_rej", ",", "logits_cls", "=", "model", "(", "x_adv", ")", "\n", "y_adv_cls", "=", "logits_cls", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "should_rej", "=", "(", "y_adv_cls", "!=", "classId", ")", ".", "cpu", "(", ")", "\n", "\n", "correct_rej", "=", "(", "should_rej", "==", "both_rej", ".", "cpu", "(", ")", ")", "\n", "cor_batch", "[", "i", "]", "+=", "correct_rej", ".", "sum", "(", ")", "\n", "\n", "correct_rej_dis", "=", "(", "should_rej", "==", "dis_rej", ".", "cpu", "(", ")", ")", "\n", "dis_cor_batch", "[", "i", "]", "+=", "correct_rej_dis", ".", "sum", "(", ")", "\n", "\n", "correct_rej_dm", "=", "(", "should_rej", "==", "dm_rej", ".", "cpu", "(", ")", ")", "\n", "dm_cor_batch", "[", "i", "]", "+=", "correct_rej_dm", ".", "sum", "(", ")", "\n", "\n", "detect_cor", "=", "torch", ".", "logical_and", "(", "cls_cor", ",", "torch", ".", "logical_or", "(", "\n", "should_rej", "==", "0", ",", "both_rej", ".", "cpu", "(", ")", "\n", ")", ")", "\n", "dec_cor_batch", "[", "i", "]", "+=", "detect_cor", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"groudtruth  :{}\"", ".", "format", "(", "classId", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"adv cls pred:{}\"", ".", "format", "(", "y_adv_cls", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"dis rej is  :{}\"", ".", "format", "(", "dis_rej", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"dm rej is   :{}\"", ".", "format", "(", "dm_rej", ".", "byte", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"both rej is :{}\"", ".", "format", "(", "both_rej", ".", "byte", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"acc_{}dis :{}\"", ".", "format", "(", "\n", "prefix", ",", "np", ".", "array", "(", "dis_cor_batch", ")", "/", "total_number", ")", ")", "\n", "logging", ".", "info", "(", "\"acc_{}dm  :{}\"", ".", "format", "(", "\n", "prefix", ",", "np", ".", "array", "(", "dm_cor_batch", ")", "/", "total_number", ")", ")", "\n", "logging", ".", "info", "(", "\"acc_{}    :{}\"", ".", "format", "(", "\n", "prefix", ",", "np", ".", "array", "(", "cor_batch", ")", "/", "total_number", ")", ")", "\n", "logging", ".", "info", "(", "\"acc_{}_dec:{}\"", ".", "format", "(", "\n", "prefix", ",", "np", ".", "array", "(", "dec_cor_batch", ")", "[", ":", "-", "1", "]", "/", "dec_cor_batch", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "adv_acc", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "x_adv", ",", "classId", ")", "\n", "total_adv_acc", "[", "i", "]", "+=", "adv_acc", "*", "x_adv", ".", "shape", "[", "0", "]", "\n", "logging", ".", "info", "(", "\"adv cls acc of this batch is:{}\"", ".", "format", "(", "adv_acc", ")", ")", "\n", "", "", "logging", ".", "info", "(", "\"total adv cls acc is:{}\"", ".", "format", "(", "\n", "np", ".", "array", "(", "total_adv_acc", ")", "/", "total_number", ")", ")", "\n", "if", "save", ":", "\n", "            ", "if", "save_name", "!=", "\"\"", ":", "\n", "                ", "os", ".", "remove", "(", "save_name", ")", "\n", "", "save_name", "=", "os", ".", "path", ".", "join", "(", "\n", "save_dir", ",", "\"{}_{}.pt\"", ".", "format", "(", "save_prefix", ",", "total_number", ")", ")", "\n", "torch", ".", "save", "(", "all_sample", ",", "save_name", ")", "\n", "if", "total_number", ">", "2400", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.test_clean": [[316, 369], ["enumerate", "len", "img.cuda.cuda", "classId.cuda.cuda", "model", "logits_cls.argmax", "cls_cor.sum().item", "all_rej.sum().item", "correct_rej.sum", "enumerate", "torch.logical_and", "torch.logical_and.sum().item", "enumerate", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "len", "all_rej.cpu", "correct_rej_temp.sum().item", "all_rej.cpu", "torch.logical_and", "torch.logical_and.sum().item", "numpy.array", "rob_acc.tolist", "cls_cor.sum", "all_rej.sum", "rej_dict[].cpu", "torch.logical_and.sum", "rej_dict[].cpu", "numpy.array", "classId.cuda.cpu", "logits_cls.argmax.cpu", "all_rej.byte().cpu", "rej_dict.keys", "_FPR.tolist", "correct_rej_temp.sum", "torch.logical_and.sum", "numpy.array", "numpy.array", "numpy.array", "all_rej.byte"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "", "", "", "def", "test_clean", "(", "data_loader", ",", "model", ")", ":", "\n", "    ", "dec_cor_batch", "=", "[", "0", "]", "*", "(", "len", "(", "model", ")", "+", "2", ")", "\n", "cor_rej_batch", "=", "[", "0", "]", "*", "len", "(", "model", ")", "\n", "cor_batch", "=", "0", "\n", "total_number", "=", "0", "\n", "total_rej", "=", "0", "\n", "for", "idx", ",", "(", "img", ",", "classId", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "total_number", "+=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "rej_dict", ",", "all_rej", ",", "logits_cls", "=", "model", "(", "img", ")", "\n", "cls_pred", "=", "logits_cls", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "should_rej", "=", "(", "cls_pred", "!=", "classId", ")", ".", "cpu", "(", ")", "\n", "cls_cor", "=", "(", "cls_pred", "==", "classId", ")", ".", "byte", "(", ")", ".", "cpu", "(", ")", "\n", "dec_cor_batch", "[", "-", "1", "]", "+=", "cls_cor", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_rej", "+=", "all_rej", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# robust acc: on clean is (TP+TN)/(P+N)", "\n", "# clean acc for classifier on all sample", "\n", "correct_rej", "=", "(", "should_rej", "==", "all_rej", ".", "cpu", "(", ")", ")", "\n", "cor_batch", "+=", "correct_rej", ".", "sum", "(", ")", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "rej_dict", ")", ":", "\n", "            ", "correct_rej_temp", "=", "(", "should_rej", "==", "rej_dict", "[", "key", "]", ".", "cpu", "(", ")", ")", "\n", "cor_rej_batch", "[", "idx", "]", "+=", "correct_rej_temp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# acc for (reject correctly classifier) / clean correct = FPR", "\n", "", "detect_cor2", "=", "torch", ".", "logical_and", "(", "cls_cor", ",", "all_rej", ".", "cpu", "(", ")", ")", "\n", "dec_cor_batch", "[", "-", "2", "]", "+=", "detect_cor2", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "rej_dict", ")", ":", "\n", "            ", "detect_cor_temp", "=", "torch", ".", "logical_and", "(", "\n", "cls_cor", ",", "rej_dict", "[", "key", "]", ".", "cpu", "(", ")", ")", "\n", "dec_cor_batch", "[", "idx", "]", "+=", "detect_cor_temp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "rob_acc", "=", "np", ".", "array", "(", "[", "cor_batch", "]", ")", "/", "total_number", "\n", "_FPR", "=", "np", ".", "array", "(", "dec_cor_batch", ")", "[", ":", "-", "1", "]", "/", "dec_cor_batch", "[", "-", "1", "]", "\n", "logging", ".", "info", "(", "\"groudtruth  :{}\"", ".", "format", "(", "classId", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"cls pred    :{}\"", ".", "format", "(", "cls_pred", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"all rej is  :{}\"", ".", "format", "(", "all_rej", ".", "byte", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"rob_acc self:{}\"", ".", "format", "(", "\n", "np", ".", "array", "(", "cor_rej_batch", ")", "/", "total_number", ")", ")", "\n", "logging", ".", "info", "(", "\"rob_acc     :{}\"", ".", "format", "(", "rob_acc", ")", ")", "\n", "logging", ".", "info", "(", "\"acc cls     :{}\"", ".", "format", "(", "\n", "np", ".", "array", "(", "[", "dec_cor_batch", "[", "-", "1", "]", "]", ")", "/", "total_number", ")", ")", "\n", "logging", ".", "info", "(", "\"detectors   :{}\"", ".", "format", "(", "rej_dict", ".", "keys", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"FPR         :{}\"", ".", "format", "(", "_FPR", ")", ")", "\n", "logging", ".", "info", "(", "\"Rej clean   :{}\"", ".", "format", "(", "\n", "np", ".", "array", "(", "total_rej", ")", "/", "total_number", ")", ")", "\n", "# final_results = (np.array(cor_rej_batch) / total_number).tolist()", "\n", "# final_results = \"/\".join([\"{:.4f}\".format(i) for i in final_results])", "\n", "", "rob_acc", "=", "\"{:.4f}\"", ".", "format", "(", "rob_acc", ".", "tolist", "(", ")", "[", "0", "]", ")", "\n", "fpr", "=", "\"\\t\"", ".", "join", "(", "[", "\"{:.4f}\"", ".", "format", "(", "i", ")", "for", "i", "in", "_FPR", ".", "tolist", "(", ")", "]", ")", "\n", "return", "rob_acc", ",", "fpr", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_sample": [[371, 457], ["torch.cat", "torch.cat", "all_sample[].keys", "range", "range", "logging.info", "torch.cat", "len", "len", "len", "math.ceil", "x_ori[].cuda", "y_ori[].cuda", "foolbox.utils.accuracy", "logging.info", "fmodel().argmax", "enumerate", "len", "len", "model.keys", "len", "model.keys", "range", "range", "logging.info", "[].cuda", "model", "logits_cls.argmax", "torch.logical_and", "torch.logical_and.sum().item", "torch.logical_and", "torch.logical_and.sum().item", "torch.logical_and", "torch.logical_and.sum().item", "logging.info", "logging.info", "logging.info", "enumerate", "logging.info", "enumerate", "logging.info", "model.keys", "len", "model.keys", "len", "len", "fmodel", "torch.logical_and", "torch.logical_and.sum().item", "torch.logical_and", "all_rej.cpu", "torch.logical_and", "torch.logical_and.sum().item", "numpy.array", "numpy.array", "logging.info", "logging.info", "rob_acc.tolist", "_TPR.tolist", "all_rej.cpu", "torch.logical_and.sum", "torch.logical_and.sum", "torch.logical_and.sum", "torch.logical_and", "rej_dict[].cpu", "numpy.array", "y_ori[].cuda.cpu", "logits_cls.argmax.cpu", "all_rej.byte().cpu", "numpy.array", "numpy.array", "rej_dict[].cpu", "torch.logical_and.sum", "torch.logical_and.sum", "numpy.array", "all_rej.byte"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "attack_sample", "(", "all_sample", ",", "model", ",", "fmodel", ",", "prefix", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "if", "batch_size", "is", "None", ":", "\n", "        ", "batch_size", "=", "all_sample", "[", "\"x_ori\"", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "", "x_ori", "=", "torch", ".", "cat", "(", "all_sample", "[", "\"x_ori\"", "]", ",", "dim", "=", "0", ")", "\n", "y_ori", "=", "torch", ".", "cat", "(", "all_sample", "[", "\"y_ori\"", "]", ",", "dim", "=", "0", ")", "\n", "parameters", "=", "all_sample", "[", "\"x_adv\"", "]", ".", "keys", "(", ")", "\n", "x_adv_all", "=", "{", "key", ":", "torch", ".", "cat", "(", "all_sample", "[", "\"x_adv\"", "]", "[", "key", "]", ",", "dim", "=", "0", ")", "\n", "for", "key", "in", "all_sample", "[", "\"x_adv\"", "]", "}", "\n", "\n", "tp_batch", "=", "[", "0", "]", "*", "len", "(", "parameters", ")", "\n", "tp_fn", "=", "[", "0", "]", "*", "len", "(", "parameters", ")", "\n", "single_tp_batch", "=", "{", "key", ":", "[", "0", "]", "*", "len", "(", "parameters", ")", "for", "key", "in", "model", ".", "keys", "(", ")", "}", "\n", "single_incor_batch", "=", "{", "key", ":", "[", "0", "]", "*", "len", "(", "parameters", ")", "for", "key", "in", "model", ".", "keys", "(", ")", "}", "\n", "incor_batch", "=", "[", "0", "]", "*", "len", "(", "parameters", ")", "\n", "total_number", "=", "0", "\n", "rob_single_str", "=", "[", "[", "\"\"", "for", "_", "in", "model", ".", "keys", "(", ")", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "parameters", ")", ")", "]", "\n", "tpr_single_str", "=", "[", "[", "\"\"", "for", "_", "in", "model", ".", "keys", "(", ")", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "parameters", ")", ")", "]", "\n", "for", "idx", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "x_ori", ")", "/", "batch_size", ")", ")", ":", "\n", "        ", "start", "=", "idx", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "img", "=", "x_ori", "[", "start", ":", "end", "]", ".", "cuda", "(", ")", "\n", "classId", "=", "y_ori", "[", "start", ":", "end", "]", ".", "cuda", "(", ")", "\n", "total_number", "+=", "img", ".", "shape", "[", "0", "]", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "img", ",", "classId", ")", "\n", "logging", ".", "info", "(", "\"cls acc of this batch is:{}, total num {}\"", ".", "format", "(", "\n", "acc_of_classifier", ",", "total_number", ")", ")", "\n", "cls_pred", "=", "fmodel", "(", "img", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "cls_cor", "=", "(", "cls_pred", "==", "classId", ")", ".", "byte", "(", ")", ".", "cpu", "(", ")", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "parameters", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'==========param={}============'", ".", "format", "(", "param", ")", ")", "\n", "\n", "x_adv", "=", "x_adv_all", "[", "param", "]", "[", "start", ":", "end", "]", ".", "cuda", "(", ")", "\n", "rej_dict", ",", "all_rej", ",", "logits_cls", "=", "model", "(", "x_adv", ")", "\n", "y_adv_cls", "=", "logits_cls", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "should_rej", "=", "(", "y_adv_cls", "!=", "classId", ")", ".", "cpu", "(", ")", "\n", "\n", "# attack suss rate: robust acc is", "\n", "# 1 - #(pass and incorrect samples)/#(all perturbed samples)", "\n", "# here is the #(pass and incorrect samples)", "\n", "incor_pass", "=", "torch", ".", "logical_and", "(", "should_rej", ",", "all_rej", ".", "cpu", "(", ")", "==", "0", ")", "\n", "incor_batch", "[", "i", "]", "+=", "incor_pass", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "key", "in", "rej_dict", ":", "\n", "                ", "incorrect_pass_temp", "=", "torch", ".", "logical_and", "(", "\n", "should_rej", "==", "1", ",", "rej_dict", "[", "key", "]", ".", "cpu", "(", ")", "==", "0", ")", "\n", "single_incor_batch", "[", "key", "]", "[", "i", "]", "+=", "incorrect_pass_temp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# TPR: acc for (attack suss and reject) / attack suss", "\n", "", "detect_cor", "=", "torch", ".", "logical_and", "(", "\n", "torch", ".", "logical_and", "(", "cls_cor", ",", "should_rej", ")", ",", "all_rej", ".", "cpu", "(", ")", "\n", ")", "\n", "tp_batch", "[", "i", "]", "+=", "detect_cor", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "suss_attack", "=", "torch", ".", "logical_and", "(", "cls_cor", ",", "should_rej", ")", "\n", "tp_fn", "[", "i", "]", "+=", "suss_attack", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "key", "in", "rej_dict", ":", "\n", "                ", "detect_cor_temp", "=", "torch", ".", "logical_and", "(", "\n", "torch", ".", "logical_and", "(", "cls_cor", ",", "should_rej", ")", ",", "rej_dict", "[", "key", "]", ".", "cpu", "(", ")", ")", "\n", "single_tp_batch", "[", "key", "]", "[", "i", "]", "+=", "detect_cor_temp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "rob_acc", "=", "1.", "-", "np", ".", "array", "(", "incor_batch", ")", "/", "total_number", "\n", "_TPR", "=", "np", ".", "array", "(", "tp_batch", ")", "/", "np", ".", "array", "(", "tp_fn", ")", "\n", "logging", ".", "info", "(", "\"groudtruth  :{}\"", ".", "format", "(", "classId", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"adv cls pred:{}\"", ".", "format", "(", "y_adv_cls", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"all rej is  :{}\"", ".", "format", "(", "all_rej", ".", "byte", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "for", "ikey", ",", "key", "in", "enumerate", "(", "single_incor_batch", ")", ":", "\n", "                ", "rob_this", "=", "1", "-", "np", ".", "array", "(", "single_incor_batch", "[", "key", "]", ")", "/", "total_number", "\n", "logging", ".", "info", "(", "\"rob_{}{}:{}\"", ".", "format", "(", "prefix", ",", "key", ",", "rob_this", ")", ")", "\n", "rob_single_str", "[", "i", "]", "[", "ikey", "]", "=", "\"{:.4f}\"", ".", "format", "(", "rob_this", "[", "i", "]", ")", "\n", "", "logging", ".", "info", "(", "\"robAcc_{} :{}\"", ".", "format", "(", "prefix", ",", "rob_acc", ")", ")", "\n", "\n", "for", "ikey", ",", "key", "in", "enumerate", "(", "single_tp_batch", ")", ":", "\n", "                ", "tpr_this", "=", "np", ".", "array", "(", "single_tp_batch", "[", "key", "]", ")", "/", "np", ".", "array", "(", "tp_fn", ")", "\n", "logging", ".", "info", "(", "\"TPR_{}{}:{}\"", ".", "format", "(", "prefix", ",", "key", ",", "tpr_this", ")", ")", "\n", "tpr_single_str", "[", "i", "]", "[", "ikey", "]", "=", "\"{:.4f}\"", ".", "format", "(", "tpr_this", "[", "i", "]", ")", "\n", "", "logging", ".", "info", "(", "\"TPR_{}    :{}\"", ".", "format", "(", "prefix", ",", "_TPR", ")", ")", "\n", "", "", "rob_single", "=", "\"Rob:\\n\"", "\n", "tpr_single", "=", "\"Tpr:\\n\"", "\n", "for", "istr", "in", "range", "(", "len", "(", "rob_single_str", ")", ")", ":", "\n", "        ", "rob_single", "+=", "\"\\t\"", ".", "join", "(", "rob_single_str", "[", "istr", "]", ")", "+", "\"\\n\"", "\n", "tpr_single", "+=", "\"\\t\"", ".", "join", "(", "tpr_single_str", "[", "istr", "]", ")", "+", "\"\\n\"", "\n", "", "logging", ".", "info", "(", "\"single statistics\\n\"", "+", "rob_single", "+", "tpr_single", ")", "\n", "rob_acc", "=", "\"\\t\"", ".", "join", "(", "[", "\"{:.4f}\"", ".", "format", "(", "i", ")", "for", "i", "in", "rob_acc", ".", "tolist", "(", ")", "]", ")", "\n", "tpr", "=", "\"\\t\"", ".", "join", "(", "[", "\"{:.4f}\"", ".", "format", "(", "i", ")", "for", "i", "in", "_TPR", ".", "tolist", "(", ")", "]", ")", "\n", "return", "rob_acc", ",", "tpr", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.attack_sample_aa": [[459, 529], ["enumerate", "img.cuda.cuda", "classId.cuda.cuda", "x_adv[].cuda", "classifier().argmax", "logging.info", "model", "logits_cls.argmax", "torch.logical_and", "torch.logical_and.sum().item", "torch.logical_and", "torch.logical_and.sum().item", "torch.logical_and", "torch.logical_and.sum().item", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "model.keys", "model.keys", "cls_cor.sum().item", "len", "torch.logical_and", "torch.logical_and.sum().item", "torch.logical_and", "all_rej.cpu", "torch.logical_and", "torch.logical_and.sum().item", "numpy.array", "numpy.array", "logging.info", "logging.info", "classifier", "all_rej.cpu", "torch.logical_and.sum", "torch.logical_and.sum", "torch.logical_and.sum", "torch.logical_and", "rej_dict[].cpu", "numpy.array", "classId.cuda.cpu", "logits_cls.argmax.cpu", "all_rej.byte().cpu", "rob_acc.tolist", "_TPR.tolist", "cls_cor.sum", "rej_dict[].cpu", "torch.logical_and.sum", "torch.logical_and.sum", "all_rej.byte", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "attack_sample_aa", "(", "data_loader", ",", "x_adv", ",", "model", ",", "classifier", ",", "batch_size", ")", ":", "\n", "    ", "prefix", "=", "\"_AA_\"", "\n", "cls_adv_cor_num", "=", "0", "\n", "tp_batch", "=", "[", "0", "]", "\n", "tp_fn", "=", "[", "0", "]", "\n", "single_tp_batch", "=", "{", "key", ":", "[", "0", "]", "for", "key", "in", "model", ".", "keys", "(", ")", "}", "\n", "single_incor_batch", "=", "{", "key", ":", "[", "0", "]", "for", "key", "in", "model", ".", "keys", "(", ")", "}", "\n", "incor_batch", "=", "[", "0", "]", "\n", "total_number", "=", "0", "\n", "for", "idx", ",", "(", "img", ",", "classId", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "classId", "=", "classId", ".", "cuda", "(", ")", "\n", "x_adv_img", "=", "x_adv", "[", "total_number", ":", "total_number", "+", "batch_size", "]", ".", "cuda", "(", ")", "\n", "total_number", "+=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "cls_pred", "=", "classifier", "(", "img", ")", ".", "argmax", "(", "axis", "=", "-", "1", ")", "\n", "cls_cor", "=", "(", "cls_pred", "==", "classId", ")", ".", "byte", "(", ")", ".", "cpu", "(", ")", "\n", "acc_of_classifier", "=", "cls_cor", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "cls_cor", ")", "\n", "logging", ".", "info", "(", "\"cls acc of this batch is:{}, total num {}\"", ".", "format", "(", "\n", "acc_of_classifier", ",", "total_number", ")", ")", "\n", "\n", "rej_dict", ",", "all_rej", ",", "logits_cls", "=", "model", "(", "x_adv_img", ")", "\n", "y_adv_cls", "=", "logits_cls", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "should_rej", "=", "(", "y_adv_cls", "!=", "classId", ")", ".", "cpu", "(", ")", "\n", "cls_adv_cor_num", "+=", "(", "should_rej", "==", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# attack suss rate: robust acc is", "\n", "# 1 - #(pass and incorrect samples)/#(all perturbed samples)", "\n", "# here is the #(pass and incorrect samples)", "\n", "incor_pass", "=", "torch", ".", "logical_and", "(", "should_rej", ",", "all_rej", ".", "cpu", "(", ")", "==", "0", ")", "\n", "incor_batch", "[", "0", "]", "+=", "incor_pass", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "key", "in", "rej_dict", ":", "\n", "            ", "incorrect_pass_temp", "=", "torch", ".", "logical_and", "(", "\n", "should_rej", "==", "1", ",", "rej_dict", "[", "key", "]", ".", "cpu", "(", ")", "==", "0", ")", "\n", "single_incor_batch", "[", "key", "]", "[", "0", "]", "+=", "incorrect_pass_temp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# TPR: acc for (attack suss and reject) / attack suss", "\n", "", "detect_cor", "=", "torch", ".", "logical_and", "(", "\n", "torch", ".", "logical_and", "(", "cls_cor", ",", "should_rej", ")", ",", "all_rej", ".", "cpu", "(", ")", "\n", ")", "\n", "tp_batch", "[", "0", "]", "+=", "detect_cor", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "suss_attack", "=", "torch", ".", "logical_and", "(", "cls_cor", ",", "should_rej", ")", "\n", "tp_fn", "[", "0", "]", "+=", "suss_attack", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "key", "in", "rej_dict", ":", "\n", "            ", "detect_cor_temp", "=", "torch", ".", "logical_and", "(", "\n", "torch", ".", "logical_and", "(", "cls_cor", ",", "should_rej", ")", ",", "rej_dict", "[", "key", "]", ".", "cpu", "(", ")", ")", "\n", "single_tp_batch", "[", "key", "]", "[", "0", "]", "+=", "detect_cor_temp", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "rob_acc", "=", "1.", "-", "np", ".", "array", "(", "incor_batch", ")", "/", "total_number", "\n", "_TPR", "=", "np", ".", "array", "(", "tp_batch", ")", "/", "np", ".", "array", "(", "tp_fn", ")", "\n", "logging", ".", "info", "(", "\"groudtruth  :{}\"", ".", "format", "(", "classId", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"adv cls pred:{}\"", ".", "format", "(", "y_adv_cls", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"all rej is  :{}\"", ".", "format", "(", "all_rej", ".", "byte", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"acc cls adv :{}\"", ".", "format", "(", "cls_adv_cor_num", "/", "total_number", ")", ")", "\n", "for", "key", "in", "single_incor_batch", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"rob_{}{}:{}\"", ".", "format", "(", "\n", "prefix", ",", "key", ",", "1", "-", "np", ".", "array", "(", "\n", "single_incor_batch", "[", "key", "]", ")", "/", "total_number", ")", ")", "\n", "", "logging", ".", "info", "(", "\"robAcc_{} :{}\"", ".", "format", "(", "prefix", ",", "rob_acc", ")", ")", "\n", "for", "key", "in", "single_tp_batch", ":", "\n", "            ", "logging", ".", "info", "(", "\"TPR_{}{}:{}\"", ".", "format", "(", "\n", "prefix", ",", "key", ",", "np", ".", "array", "(", "\n", "single_tp_batch", "[", "key", "]", ")", "/", "np", ".", "array", "(", "tp_fn", "[", "0", "]", ")", ")", ")", "\n", "", "logging", ".", "info", "(", "\"TPR_{}    :{}\"", ".", "format", "(", "prefix", ",", "_TPR", ")", ")", "\n", "if", "total_number", ">=", "2400", ":", "\n", "            ", "break", "\n", "", "", "rob_acc", "=", "\"\\t\"", ".", "join", "(", "[", "\"{:.4f}\"", ".", "format", "(", "i", ")", "for", "i", "in", "rob_acc", ".", "tolist", "(", ")", "]", ")", "\n", "tpr", "=", "\"\\t\"", ".", "join", "(", "[", "\"{:.4f}\"", ".", "format", "(", "i", ")", "for", "i", "in", "_TPR", ".", "tolist", "(", ")", "]", ")", "\n", "return", "rob_acc", ",", "tpr", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet._DenseLayer.__init__": [[11, 24], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet._DenseLayer.forward": [[25, 31], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_2.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet._DenseBlock.__init__": [[34, 40], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "\n", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet._Transition.__init__": [[43, 50], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet.DenseNet.__init__": [[66, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet._Transition", "densenet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "10", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "\n", "# CIFAR-10: kernel_size 7 ->3, stride 2->1, padding 3->1", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "## END", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet.DenseNet.forward": [[113, 119], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "densenet.DenseNet.classifier", "densenet.DenseNet.size", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet._densenet": [[120, 127], ["densenet.DenseNet", "os.path.dirname", "torch.load", "torch.load", "torch.load", "DenseNet.load_state_dict"], "function", ["None"], ["", "", "def", "_densenet", "(", "arch", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "pretrained", ",", "progress", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "script_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "script_dir", "+", "'/state_dicts/'", "+", "arch", "+", "'.pt'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet.densenet121": [[129, 139], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet121", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet121'", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet.densenet161": [[141, 151], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet161", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet161'", ",", "48", ",", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "96", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet.densenet169": [[153, 163], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet169", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet169'", ",", "32", ",", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.densenet.densenet201": [[165, 175], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet201", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet201'", ",", "32", ",", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.DiscOptBlock.__init__": [[65, 93], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "misc.model_ops.snconv2d", "misc.model_ops.snconv2d", "misc.model_ops.snconv2d", "misc.model_ops.conv2d", "misc.model_ops.conv2d", "misc.model_ops.conv2d", "misc.model_ops.batchnorm_2d", "misc.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.DiscOptBlock.forward": [[95, 111], ["targeted_cw_adaptive_attack.DiscOptBlock.conv2d1", "targeted_cw_adaptive_attack.DiscOptBlock.activation", "targeted_cw_adaptive_attack.DiscOptBlock.conv2d2", "targeted_cw_adaptive_attack.DiscOptBlock.average_pooling", "targeted_cw_adaptive_attack.DiscOptBlock.average_pooling", "targeted_cw_adaptive_attack.DiscOptBlock.conv2d0", "targeted_cw_adaptive_attack.DiscOptBlock.bn1", "targeted_cw_adaptive_attack.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.DiscBlock.__init__": [[114, 151], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "misc.model_ops.snconv2d", "misc.model_ops.snconv2d", "misc.model_ops.conv2d", "misc.model_ops.conv2d", "misc.model_ops.batchnorm_2d", "misc.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "misc.model_ops.snconv2d", "misc.model_ops.conv2d", "misc.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.DiscBlock.forward": [[153, 176], ["targeted_cw_adaptive_attack.DiscBlock.activation", "targeted_cw_adaptive_attack.DiscBlock.conv2d1", "targeted_cw_adaptive_attack.DiscBlock.activation", "targeted_cw_adaptive_attack.DiscBlock.conv2d2", "targeted_cw_adaptive_attack.DiscBlock.bn1", "targeted_cw_adaptive_attack.DiscBlock.bn2", "targeted_cw_adaptive_attack.DiscBlock.average_pooling", "targeted_cw_adaptive_attack.DiscBlock.conv2d0", "targeted_cw_adaptive_attack.DiscBlock.bn0", "targeted_cw_adaptive_attack.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.Discriminator.__init__": [[179, 269], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "misc.model_ops.snlinear", "misc.model_ops.linear", "misc.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "misc.model_ops.snlinear", "misc.model_ops.sn_embedding", "misc.model_ops.linear", "misc.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "misc.model_ops.snlinear", "misc.model_ops.sn_embedding", "misc.model_ops.linear", "misc.model_ops.embedding", "targeted_cw_adaptive_attack.DiscOptBlock", "targeted_cw_adaptive_attack.DiscBlock", "misc.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "misc.model_ops.snlinear", "misc.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.Discriminator.forward": [[271, 307], ["enumerate", "targeted_cw_adaptive_attack.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "targeted_cw_adaptive_attack.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "targeted_cw_adaptive_attack.Discriminator.embedding", "targeted_cw_adaptive_attack.Discriminator.linear2", "targeted_cw_adaptive_attack.Discriminator.linear1", "targeted_cw_adaptive_attack.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "targeted_cw_adaptive_attack.Discriminator.activation", "targeted_cw_adaptive_attack.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "targeted_cw_adaptive_attack.Discriminator.linear4", "targeted_cw_adaptive_attack.Discriminator.embedding", "targeted_cw_adaptive_attack.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "# with torch.cuda.amp.autocast() if self.mixed_precision is True and evaluation is False else dummy_context_mgr() as mp:", "\n", "\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.sample_targetlabel": [[308, 316], ["torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "index.size", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "index.size"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "", "", "def", "sample_targetlabel", "(", "y", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "y_target", "=", "torch", ".", "randint_like", "(", "y", ",", "0", ",", "10", ")", ".", "cuda", "(", ")", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "while", "index", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "        ", "y_target_new", "=", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "index", ".", "size", "(", "0", ")", ",", ")", ")", ".", "cuda", "(", ")", "\n", "y_target", "[", "index", "]", "=", "y_target_new", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "", "return", "y_target", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.targeted_cw_adaptive_attack.test": [[317, 475], ["densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "mlpModel.eval().to", "orimodel.eval().to", "genmodel.eval().to", "orimodel.query_features", "genmodel.query_features", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "time.strftime", "time.strftime", "utils.log.make_logger", "Discriminator().to", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Discriminator().to.load_state_dict", "dis_model.eval", "lib.ssim", "time.localtime", "time.localtime", "misc.generate1", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "foolbox.utils.accuracy", "utils.log.make_logger.info", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "utils.log.make_logger.info", "len", "CWattack", "targeted_cw_adaptive_attack.sample_targetlabel", "utils.log.make_logger.info", "CWattack.perturb", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "encoder", "vae", "gen", "orimodel", "genmodel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "mlpModel", "dis_model", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "utils.log.make_logger.info", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mlpModel.eval", "orimodel.eval", "genmodel.eval", "targeted_cw_adaptive_attack.Discriminator", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "utils.log.make_logger.info", "img_to_classifier.to", "adv_input_scale.to", "encoder.to", "z.to", "ssim_size_average", "len", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "numpy.array", "numpy.array", "acc_cw.cpu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1", "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.sample_targetlabel", "home.repos.pwc.inspect_result.cure-lab_contranet.models.cwlinfattack.CarliniWagnerLinfAttack.perturb", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save"], ["", "def", "test", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "inference_m", ",", "writer", ",", "adaptive_loss", ",", "test_sample_number", ")", ":", "\n", "\t", "checkpoint_path", "=", "'./'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "\n", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "\n", "global", "test_iter", "\n", "mlpModel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "genmodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "query_features", "(", ")", "\n", "genmodel", ".", "query_features", "(", ")", "\n", "\n", "ssim_size_average", "=", "lambda", "x", ",", "y", ":", "ssim_package", ".", "ssim", "(", "x", ",", "y", ",", "size_average", "=", "False", ")", "\n", "classifier_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "mlploss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "pred_list", ",", "pos_pred_list", ",", "neg_pred_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_id", "=", "0", "\n", "\n", "# parameters for cw attack", "\n", "# parameters for cw attack", "\n", "c", "=", "1", "#1e-4 ", "\n", "max_iter", "=", "100", "\n", "learning_rate", "=", "0.01", "\n", "data_id", "=", "0", "\n", "acc_batch", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "tested_number", "=", "0", "\n", "acc_cw", "=", "0", "\n", "date", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "logger", "=", "make_logger", "(", "date", "+", "\"l2_ssim_dis_dml_adaptive_cw_implementation_torchattack\"", ",", "None", ")", "\n", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "device", ")", "\n", "d_checkpoint_dir", "=", "'./pretrain'", "\n", "denoisecGAN_adding_noise_adv_best", "=", "'/dis.pth'", "\n", "d_checkpoint_dir", "=", "d_checkpoint_dir", "+", "denoisecGAN_adding_noise_adv_best", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "dis_model", "=", "Dis", "\n", "\n", "dis_model", ".", "eval", "(", ")", "\n", "\n", "\n", "\n", "\n", "for", "img", ",", "classId", "in", "dataset", ":", "\n", "\n", "\t\t", "if", "data_id", "*", "len", "(", "img", ")", ">", "test_sample_number", ":", "\n", "\t\t\t", "output_acc_name", "=", "\"./cwadaptivenpy/\"", "+", "date", "+", "\"_adaptive_cw_targeted_loss==\"", "+", "adaptive_loss", "\n", "acc", "=", "1", "-", "(", "numpy", ".", "array", "(", "acc_cw", ".", "cpu", "(", ")", ")", "/", "tested_number", ")", "\n", "numpy", ".", "save", "(", "output_acc_name", ",", "acc", ")", "\n", "numpy", ".", "save", "(", "\"./cwadaptivenpy/\"", "+", "\"adaptive_cw_targeted_loss==\"", "+", "adaptive_loss", ",", "acc", ")", "\n", "logger", ".", "info", "(", "\"acc is saved as {}.npy and {}.npy\"", ".", "format", "(", "output_acc_name", ",", "\"adaptive_cw_targeted_loss__\"", "+", "adaptive_loss", ")", ")", "\n", "break", "\n", "", "data_id", "=", "data_id", "+", "1", "\n", "img", ",", "img_pos", ",", "img_neg", ",", "class_id", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "next", "=", "True", ")", "\n", "img", "=", "(", "img", "+", "1.0", ")", "/", "2.0", "\n", "\n", "x_adv_image", "=", "torch", ".", "zeros", "(", "10", ",", "3", ",", "32", ",", "32", ")", "\n", "fake_adv_image", "=", "torch", ".", "zeros", "(", "10", ",", "3", ",", "32", ",", "32", ")", "\n", "\n", "img_to_classifier", "=", "(", "img", "-", "mean", ")", "/", "std", "\n", "#acc_of_classifier = fb.utils.accuracy(fmodel, (img+1)/2, class_id)", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "img", ",", "class_id", ")", "\n", "logger", ".", "info", "(", "\"acc of classifier is:{}\"", ".", "format", "(", "acc_of_classifier", ")", ")", "\n", "# kappa is the confidence of cw attack", "\n", "kappa_list", "=", "[", "0", "]", "#[0, 0.01, 0.03, 0.05, 0.07, 0.1, 0.15, 0.2, 0.3, 0.4]", "\n", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "device", ")", ")", "\n", "\n", "y_classifier_ori", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "logger", ".", "info", "(", "\"original classifier prediction:{}\"", ".", "format", "(", "y_classifier_ori", ")", ")", "\n", "\n", "tested_number", "+=", "len", "(", "img", ")", "\n", "\n", "CWattack", "=", "CarliniWagnerL2Attack", "\n", "model", "=", "classifier", "\n", "cw_adversary", "=", "CWattack", "(", "model", ",", "encoder", ",", "vae", ",", "gen", ",", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "dis_model", ",", "\n", "batchsize", "=", "len", "(", "img", ")", ",", "num_classes", "=", "10", ",", "\n", "confidence", "=", "0", ",", "targeted", "=", "True", ",", "learning_rate", "=", "0.05", ",", "\n", "binary_search_steps", "=", "9", ",", "max_iterations", "=", "1000", ",", "abort_early", "=", "True", ",", "\n", "initial_const", "=", "0.01", ",", "clip_min", "=", "0.0", ",", "clip_max", "=", "1.0", ",", "\n", "loss_fn", "=", "None", ",", "normalize_fn", "=", "None", ",", "adaptive_loss", "=", "adaptive_loss", ")", "\n", "\n", "\n", "y_target", "=", "sample_targetlabel", "(", "class_id", ",", "num_classes", "=", "10", ")", "\n", "logger", ".", "info", "(", "\"targeted y                    :{}\"", ".", "format", "(", "y_target", ".", "data", ")", ")", "\n", "\n", "adv_input", "=", "cw_adversary", ".", "perturb", "(", "img", ",", "y_target", ")", "\n", "\n", "adv_input_scale", "=", "adv_input", "*", "2", "-", "1", "# belongs to [-1,1]", "\n", "\n", "outputs", "=", "classifier", "(", "(", "(", "adv_input", "-", "mean", ")", "/", "std", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "# justify whether attack is successful", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "logger", ".", "info", "(", "\"adv__img classifier prediction:{}\"", ".", "format", "(", "y_classifier", ")", ")", "\n", "logger", ".", "info", "(", "\"targeted_y==adv_img_y         :{}\"", ".", "format", "(", "(", "y_classifier", "==", "y_target", ")", "*", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"all_targeted successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "==", "y_target", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"all_incorrect successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "!=", "class_id", ")", ")", ")", "\n", "\n", "\n", "latent_i", "=", "encoder", "(", "adv_input_scale", ".", "to", "(", "device", ")", ")", "\n", "z_mean", ",", "z_log_var", ",", "z", "=", "vae", "(", "latent_i", ".", "to", "(", "device", ")", ")", "\n", "\n", "fake", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y_classifier", ")", "\n", "\n", "feat_emb", ",", "_", "=", "orimodel", "(", "adv_input_scale", ")", "\n", "feat_pos", ",", "_", "=", "genmodel", "(", "fake", ")", "\n", "pos_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_pos", "]", ",", "dim", "=", "1", ")", "\n", "y_mlp_pos", "=", "torch", ".", "ones", "(", "len", "(", "img", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "#target attack", "\n", "\n", "pos_pred", "=", "mlpModel", "(", "(", "pos_pair", ",", "y_classifier", ")", ")", "\n", "dis_threshold", "=", "-", "1.334", "\n", "dml_threshold", "=", "0.0107", "\n", "ssim_threshold", "=", "0.0551", "\n", "\n", "dis_out_fake", "=", "dis_model", "(", "fake", ",", "y_classifier", ")", "\n", "\n", "pred_y", "=", "(", "pos_pred", "[", ":", ",", "1", "]", ">", "dml_threshold", ")", ".", "long", "(", ")", "\n", "dml_decision", "=", "pred_y", "==", "1", "\n", "logger", ".", "info", "(", "\"dml_decision:{}\"", ".", "format", "(", "dml_decision", "*", "1", ")", ")", "\n", "ssim_decision", "=", "(", "ssim_size_average", "(", "fake", ",", "img", ")", ">", "ssim_threshold", ")", "\n", "\n", "\n", "dis_decision", "=", "(", "dis_out_fake", ">", "dis_threshold", ")", "*", "1", "==", "1", "\n", "logger", ".", "info", "(", "\"dis_decision:{}\"", ".", "format", "(", "dis_decision", "*", "1", ")", ")", "\n", "\n", "judgement_equation", "=", "(", "y_classifier", "!=", "class_id", ")", "*", "(", "y_classifier", "==", "y_target", ")", "*", "(", "ssim_decision", ")", "*", "(", "dml_decision", ")", "*", "(", "dis_decision", ")", "\n", "logger", ".", "info", "(", "\"all_decision:{}\"", ".", "format", "(", "judgement_equation", "*", "1", ")", ")", "\n", "acc_cw", "+=", "torch", ".", "sum", "(", "judgement_equation", ")", "\n", "logger", ".", "info", "(", "\">>>>>total_tested sample number:{}\"", ".", "format", "(", "tested_number", ")", ")", "\n", "logger", ".", "info", "(", "\"=====cw_adaptive_targeted_attack_successful_rate:{}=========\"", ".", "format", "(", "acc_cw", "/", "tested_number", ")", ")", "\n", "\n", "\n", "", "return", "acc_cw", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.DiscOptBlock.__init__": [[62, 90], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "misc.model_ops.snconv2d", "misc.model_ops.snconv2d", "misc.model_ops.snconv2d", "misc.model_ops.conv2d", "misc.model_ops.conv2d", "misc.model_ops.conv2d", "misc.model_ops.batchnorm_2d", "misc.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.DiscOptBlock.forward": [[92, 108], ["adpative_targeted_PGD_linf.DiscOptBlock.conv2d1", "adpative_targeted_PGD_linf.DiscOptBlock.activation", "adpative_targeted_PGD_linf.DiscOptBlock.conv2d2", "adpative_targeted_PGD_linf.DiscOptBlock.average_pooling", "adpative_targeted_PGD_linf.DiscOptBlock.average_pooling", "adpative_targeted_PGD_linf.DiscOptBlock.conv2d0", "adpative_targeted_PGD_linf.DiscOptBlock.bn1", "adpative_targeted_PGD_linf.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.DiscBlock.__init__": [[111, 148], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "misc.model_ops.snconv2d", "misc.model_ops.snconv2d", "misc.model_ops.conv2d", "misc.model_ops.conv2d", "misc.model_ops.batchnorm_2d", "misc.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "misc.model_ops.snconv2d", "misc.model_ops.conv2d", "misc.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.DiscBlock.forward": [[150, 173], ["adpative_targeted_PGD_linf.DiscBlock.activation", "adpative_targeted_PGD_linf.DiscBlock.conv2d1", "adpative_targeted_PGD_linf.DiscBlock.activation", "adpative_targeted_PGD_linf.DiscBlock.conv2d2", "adpative_targeted_PGD_linf.DiscBlock.bn1", "adpative_targeted_PGD_linf.DiscBlock.bn2", "adpative_targeted_PGD_linf.DiscBlock.average_pooling", "adpative_targeted_PGD_linf.DiscBlock.conv2d0", "adpative_targeted_PGD_linf.DiscBlock.bn0", "adpative_targeted_PGD_linf.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.Discriminator.__init__": [[176, 266], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "misc.model_ops.snlinear", "misc.model_ops.linear", "misc.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "misc.model_ops.snlinear", "misc.model_ops.sn_embedding", "misc.model_ops.linear", "misc.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "misc.model_ops.snlinear", "misc.model_ops.sn_embedding", "misc.model_ops.linear", "misc.model_ops.embedding", "adpative_targeted_PGD_linf.DiscOptBlock", "adpative_targeted_PGD_linf.DiscBlock", "misc.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "misc.model_ops.snlinear", "misc.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.Discriminator.forward": [[268, 304], ["enumerate", "adpative_targeted_PGD_linf.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "adpative_targeted_PGD_linf.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "adpative_targeted_PGD_linf.Discriminator.embedding", "adpative_targeted_PGD_linf.Discriminator.linear2", "adpative_targeted_PGD_linf.Discriminator.linear1", "adpative_targeted_PGD_linf.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "adpative_targeted_PGD_linf.Discriminator.activation", "adpative_targeted_PGD_linf.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "adpative_targeted_PGD_linf.Discriminator.linear4", "adpative_targeted_PGD_linf.Discriminator.embedding", "adpative_targeted_PGD_linf.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "# with torch.cuda.amp.autocast() if self.mixed_precision is True and evaluation is False else dummy_context_mgr() as mp:", "\n", "\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.sample_targetlabel": [[305, 313], ["torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "index.size", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "index.size"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "", "", "def", "sample_targetlabel", "(", "y", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "y_target", "=", "torch", ".", "randint_like", "(", "y", ",", "0", ",", "10", ")", ".", "cuda", "(", ")", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "while", "index", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "        ", "y_target_new", "=", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "index", ".", "size", "(", "0", ")", ",", ")", ")", ".", "cuda", "(", ")", "\n", "y_target", "[", "index", "]", "=", "y_target_new", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "", "return", "y_target", "\n", "", "def", "test", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.adaptive_attacks.adpative_targeted_PGD_linf.test": [[313, 511], ["densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "Discriminator().to", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Discriminator().to.load_state_dict", "dis_model.eval", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "mlpModel.eval().to", "orimodel.eval().to", "genmodel.eval().to", "orimodel.query_features", "genmodel.query_features", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "time.strftime", "utils.log.make_logger", "lib.ssim", "time.localtime", "misc.generate1", "img.to.retain_grad", "real.retain_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "adpative_targeted_PGD_linf.sample_targetlabel", "enumerate", "densenet.densenet169", "densenet169().to.eval", "adpative_targeted_PGD_linf.Discriminator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mlpModel.eval", "orimodel.eval", "genmodel.eval", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "utils.log.make_logger.info", "utils.log.make_logger.info", "range", "len", "img.to.detach", "encoder", "sample_targetlabel.long().cuda", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "nn.CrossEntropyLoss.", "vae", "gen", "orimodel", "genmodel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "mlpModel", "dis_model", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "nn.CrossEntropyLoss.", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "adaptive_loss.backward", "x_grad.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "img.to.to", "numpy.array", "numpy.array", "img.to.to", "img_to_classifier.to", "encoder.to", "z.to", "ssim_size_average", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "sample_targetlabel.long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ssim_size_average().mean", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.array", "numpy.array", "len", "ssim_size_average", "Exception"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1", "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.sample_targetlabel", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward"], ["", "def", "test", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "inference_m", ",", "writer", ",", "adaptive_PGD_loss", ",", "attack_iteration", ",", "test_sample_number", ")", ":", "\n", "\t", "checkpoint_path", "=", "'./'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "\n", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "device", ")", "\n", "d_checkpoint_dir", "=", "'./pretrain'", "\n", "denoisecGAN_adding_noise_adv_best", "=", "'/dis.pth'", "\n", "d_checkpoint_dir", "=", "d_checkpoint_dir", "+", "denoisecGAN_adding_noise_adv_best", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "dis_model", "=", "Dis", "\n", "\n", "dis_model", ".", "eval", "(", ")", "\n", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "\n", "global", "test_iter", "\n", "mlpModel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "genmodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "query_features", "(", ")", "\n", "genmodel", ".", "query_features", "(", ")", "\n", "\n", "ssim_size_average", "=", "lambda", "x", ",", "y", ":", "ssim_package", ".", "ssim", "(", "x", ",", "y", ",", "size_average", "=", "False", ")", "\n", "\n", "classifier_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "mlploss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "pred_list", ",", "pos_pred_list", ",", "neg_pred_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_id", "=", "0", "\n", "acc_batch", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "\n", "tested_number", "=", "0", "\n", "\n", "date", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n", "logger", "=", "make_logger", "(", "date", "+", "\"__pgd_inf_targeted_attack_loss_\"", "+", "adaptive_PGD_loss", ",", "None", ")", "\n", "\n", "for", "img", ",", "classId", "in", "dataset", ":", "\n", "\n", "# save acc values and ensure test sample at least test_sample_number samples", "\n", "\t\t", "if", "data_id", "*", "len", "(", "img", ")", ">", "test_sample_number", ":", "\n", "\t\t\t", "output_acc_name", "=", "date", "+", "\"_2_adaptive_pgd_targeted_loss==\"", "+", "adaptive_PGD_loss", "\n", "acc", "=", "1", "-", "(", "numpy", ".", "array", "(", "acc_batch", ")", "/", "tested_number", ")", "\n", "numpy", ".", "save", "(", "output_acc_name", ",", "acc", ")", "\n", "numpy", ".", "save", "(", "\"2adaptive_pgd_targeted_loss==\"", "+", "adaptive_PGD_loss", ",", "acc", ")", "\n", "logger", ".", "info", "(", "\"acc is saved as {}.npy and {}.npy\"", ".", "format", "(", "output_acc_name", ",", "\"adaptive_pgd_targeted_loss__\"", "+", "adaptive_PGD_loss", ")", ")", "\n", "break", "\n", "", "data_id", "=", "data_id", "+", "1", "\n", "img", ",", "img_pos", ",", "img_neg", ",", "class_id", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "next", "=", "True", ")", "\n", "\n", "iteration", "=", "attack_iteration", "\n", "real", "=", "img", "# used to clip the input image", "\n", "img", ".", "requires_grad", "=", "True", "\n", "real", ".", "requires_grad", "=", "True", "\n", "img", ".", "retain_grad", "(", ")", "\n", "real", ".", "retain_grad", "(", ")", "\n", "\n", "\n", "x_adv_image", "=", "torch", ".", "zeros", "(", "10", ",", "3", ",", "32", ",", "32", ")", "\n", "fake_adv_image", "=", "torch", ".", "zeros", "(", "10", ",", "3", ",", "32", ",", "32", ")", "\n", "epsilon_list", "=", "[", "0.01", ",", "0.03", ",", "0.05", ",", "0.07", ",", "0.1", ",", "0.15", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "\n", "tested_number", "+=", "len", "(", "img", ")", "\n", "y_target", "=", "sample_targetlabel", "(", "class_id", ",", "num_classes", "=", "10", ")", "\n", "\n", "for", "i", ",", "epsilon", "in", "enumerate", "(", "epsilon_list", ")", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "'==============epsilon={}================'", ".", "format", "(", "epsilon", ")", ")", "\n", "for", "j", "in", "range", "(", "iteration", ")", ":", "\n", "\n", "\t\t\t\t", "img", "=", "img", ".", "detach", "(", ")", "\n", "img", ".", "requires_grad", "=", "True", "\n", "\n", "latent_i", "=", "encoder", "(", "img", ".", "to", "(", "device", ")", ")", "\n", "\n", "y", "=", "y_target", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "img_to_classifier", "=", "(", "(", "(", "img", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "device", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "loss_classifier", "=", "classifier_criterion", "(", "outputs", ",", "y", ")", "\n", "\n", "\n", "z_mean", ",", "z_log_var", ",", "z", "=", "vae", "(", "latent_i", ".", "to", "(", "device", ")", ")", "\n", "\n", "\n", "fake", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y_classifier", ")", "\n", "\n", "feat_emb", ",", "_", "=", "orimodel", "(", "img", ")", "\n", "feat_pos", ",", "_", "=", "genmodel", "(", "fake", ")", "\n", "pos_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_pos", "]", ",", "dim", "=", "1", ")", "\n", "y_mlp_pos", "=", "torch", ".", "ones", "(", "len", "(", "img", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "#target attack, used for mlp when conduct target attacks ", "\n", "\n", "\n", "pos_pred", "=", "mlpModel", "(", "(", "pos_pair", ",", "y_classifier", ")", ")", "\n", "\n", "dis_threshold", "=", "-", "1.334", "\n", "dml_threshold", "=", "0.0107", "\n", "ssim_threshold", "=", "0.2365", "\n", "\n", "\n", "\n", "pred_y", "=", "(", "pos_pred", "[", ":", ",", "1", "]", ">", "dml_threshold", ")", ".", "long", "(", ")", "\n", "dml_decision", "=", "pred_y", "\n", "dis_out_fake", "=", "dis_model", "(", "fake", ",", "y_classifier", ")", "\n", "\n", "dis_decision", "=", "(", "dis_out_fake", ">", "dis_threshold", ")", "*", "1", "\n", "ssim_decision", "=", "(", "ssim_size_average", "(", "fake", ",", "img", ")", ">", "ssim_threshold", ")", "\n", "\n", "D_loss", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "dis_out_fake", ")", ")", "\n", "if", "j", "==", "(", "iteration", "-", "1", ")", ":", "\n", "\n", "\t\t\t\t\t", "judgement_equation_ssim_dml_dis", "=", "(", "pred_y", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "dis_decision", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "ssim_decision", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "y_classifier", "!=", "class_id", ")", ".", "cpu", "(", ")", "*", "(", "y_classifier", "==", "y_target", ")", ".", "cpu", "(", ")", "\n", "acc_batch", "[", "i", "]", "+=", "torch", ".", "sum", "(", "judgement_equation_ssim_dml_dis", ")", "\n", "logger", ".", "info", "(", "\"targeted y                    :{}\"", ".", "format", "(", "y_target", ")", ")", "\n", "logger", ".", "info", "(", "\"adv_img classifier prediction:{}\"", ".", "format", "(", "y_classifier", ")", ")", "\n", "logger", ".", "info", "(", "\"targeted_y==adv_img_y         :{}\"", ".", "format", "(", "(", "y_classifier", "==", "y_target", ")", "*", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"all_targeted successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "==", "y_target", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"all_incorrect successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "!=", "class_id", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"dml_decision:{}\"", ".", "format", "(", "dml_decision", "*", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"dis_decision:{}\"", ".", "format", "(", "dis_decision", "*", "1", ")", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\">>>>>total_tested sample number:{}\"", ".", "format", "(", "tested_number", ")", ")", "\n", "logger", ".", "info", "(", "\"=====pgd_adaptive_targeted_attack_successful_rate:{}=========\"", ".", "format", "(", "numpy", ".", "array", "(", "acc_batch", ")", "/", "tested_number", ")", ")", "\n", "\n", "\n", "\n", "", "loss_mlp", "=", "mlploss", "(", "pos_pred", ",", "y_mlp_pos", ")", "\n", "\n", "\n", "loss_img_l2", "=", "torch", ".", "abs", "(", "(", "fake", "-", "img", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "loss_img_ssim", "=", "-", "torch", ".", "log", "(", "ssim_size_average", "(", "fake", ",", "img", ")", ".", "mean", "(", ")", "+", "1e-15", ")", "\n", "\n", "if", "adaptive_PGD_loss", "==", "\"all\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_l2", "+", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dis_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dis_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dis\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "loss_mlp", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dis\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "Exception", "(", "\"adaptive loss not implemented!!!\"", ")", "\n", "\n", "\n", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "adaptive_loss", ".", "backward", "(", ")", "\n", "x_grad", "=", "img", ".", "grad", ".", "data", "\n", "\n", "sign_x_grad", "=", "x_grad", ".", "sign", "(", ")", "\n", "# This part is different from BIM", "\n", "\n", "alpha", "=", "epsilon", "/", "iteration", "\n", "x_adv", "=", "img", "-", "alpha", "*", "sign_x_grad", "# for target attack the operator should be \"-\"", "\n", "eta", "=", "torch", ".", "clamp", "(", "x_adv", "-", "real", ",", "min", "=", "-", "epsilon", ",", "max", "=", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "real", "+", "eta", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", ".", "detach_", "(", ")", "\n", "\n", "img", "=", "x_adv", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "return", "acc_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.ema.__init__": [[37, 50], ["biggan_utils.ema.source.state_dict", "biggan_utils.ema.target.state_dict", "print", "torch.no_grad", "biggan_utils.ema.target_dict[].data.copy_"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "source", ",", "target", ",", "decay", "=", "0.9999", ",", "start_itr", "=", "0", ")", ":", "\n", "    ", "self", ".", "source", "=", "source", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "decay", "=", "decay", "\n", "# Optional parameter indicating what iteration to start the decay at", "\n", "self", ".", "start_itr", "=", "start_itr", "\n", "# Initialize target's params to be source's", "\n", "self", ".", "source_dict", "=", "self", ".", "source", ".", "state_dict", "(", ")", "\n", "self", ".", "target_dict", "=", "self", ".", "target", ".", "state_dict", "(", ")", "\n", "print", "(", "'Initializing EMA parameters to be source parameters...'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "key", "in", "self", ".", "source_dict", ":", "\n", "        ", "self", ".", "target_dict", "[", "key", "]", ".", "data", ".", "copy_", "(", "self", ".", "source_dict", "[", "key", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.ema.update": [[52, 62], ["torch.no_grad", "biggan_utils.ema.target_dict[].data.copy_"], "methods", ["None"], ["", "", "", "def", "update", "(", "self", ",", "itr", "=", "None", ")", ":", "\n", "# If an iteration counter is provided and itr is less than the start itr,", "\n", "# peg the ema weights to the underlying weights.", "\n", "    ", "if", "itr", ">=", "0", "and", "itr", "<", "self", ".", "start_itr", ":", "\n", "      ", "decay", "=", "0.0", "\n", "", "else", ":", "\n", "      ", "decay", "=", "self", ".", "decay", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "key", "in", "self", ".", "source_dict", ":", "\n", "        ", "self", ".", "target_dict", "[", "key", "]", ".", "data", ".", "copy_", "(", "self", ".", "target_dict", "[", "key", "]", ".", "data", "*", "decay", "+", "self", ".", "source_dict", "[", "key", "]", ".", "data", "*", "(", "1", "-", "decay", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.ema_DP_SyncBN.__init__": [[65, 75], ["print", "torch.no_grad", "biggan_utils.ema_DP_SyncBN.source.state_dict", "[].data.copy_", "biggan_utils.ema_DP_SyncBN.source.state_dict", "biggan_utils.ema_DP_SyncBN.target.state_dict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "source", ",", "target", ",", "decay", "=", "0.9999", ",", "start_itr", "=", "0", ")", ":", "\n", "    ", "self", ".", "source", "=", "source", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "start_itr", "=", "start_itr", "\n", "# Initialize target's params to be source's", "\n", "print", "(", "'Initializing EMA parameters to be source parameters...'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "key", "in", "self", ".", "source", ".", "state_dict", "(", ")", ":", "\n", "        ", "self", ".", "target", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "self", ".", "source", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.ema_DP_SyncBN.update": [[77, 88], ["torch.no_grad", "biggan_utils.ema_DP_SyncBN.source.state_dict", "[].data.copy_", "biggan_utils.ema_DP_SyncBN.target.state_dict", "biggan_utils.ema_DP_SyncBN.source.state_dict", "biggan_utils.ema_DP_SyncBN.target.state_dict"], "methods", ["None"], ["", "", "", "def", "update", "(", "self", ",", "itr", "=", "None", ")", ":", "\n", "# If an iteration counter is provided and itr is less than the start itr,", "\n", "# peg the ema weights to the underlying weights.", "\n", "    ", "if", "itr", ">=", "0", "and", "itr", "<", "self", ".", "start_itr", ":", "\n", "      ", "decay", "=", "0.0", "\n", "", "else", ":", "\n", "      ", "decay", "=", "self", ".", "decay", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "key", "in", "self", ".", "source", ".", "state_dict", "(", ")", ":", "\n", "        ", "data", "=", "self", ".", "target", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", "*", "decay", "+", "self", ".", "source", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", "*", "(", "1.", "-", "decay", ")", "\n", "self", ".", "target", ".", "state_dict", "(", ")", "[", "key", "]", ".", "data", ".", "copy_", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.ortho": [[90, 100], ["torch.no_grad", "model.parameters", "param.view", "any", "torch.mm", "grad.view", "len", "torch.mm", "param.view.t", "torch.eye"], "function", ["None"], ["", "", "", "", "def", "ortho", "(", "model", ",", "strength", "=", "1e-4", ",", "blacklist", "=", "[", "]", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "# Only apply this to parameters with at least 2 axes, and not in the blacklist", "\n", "      ", "if", "len", "(", "param", ".", "shape", ")", "<", "2", "or", "any", "(", "[", "param", "is", "item", "for", "item", "in", "blacklist", "]", ")", ":", "\n", "        ", "continue", "\n", "", "w", "=", "param", ".", "view", "(", "param", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "grad", "=", "(", "2", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "w", ",", "w", ".", "t", "(", ")", ")", "\n", "*", "(", "1.", "-", "torch", ".", "eye", "(", "w", ".", "shape", "[", "0", "]", ",", "device", "=", "w", ".", "device", ")", ")", ",", "w", ")", ")", "\n", "param", ".", "grad", ".", "data", "+=", "strength", "*", "grad", ".", "view", "(", "param", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.interp": [[103, 106], ["torch.linspace().to", "torch.linspace", "torch.linspace().to.view", "torch.linspace().to.view"], "function", ["None"], ["", "", "", "def", "interp", "(", "x0", ",", "x1", ",", "num_midpoints", ")", ":", "\n", "    ", "lerp", "=", "torch", ".", "linspace", "(", "0", ",", "1.0", ",", "num_midpoints", "+", "2", ",", "device", "=", "'cuda'", ")", ".", "to", "(", "x0", ".", "dtype", ")", "\n", "return", "(", "(", "x0", "*", "(", "1", "-", "lerp", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", ")", "+", "(", "x1", "*", "lerp", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment": [[38, 49], ["policy.split", "f.contiguous", "f.permute", "f.permute", "f"], "function", ["None"], ["translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.rand_brightness": [[51, 54], ["torch.rand", "torch.rand", "x.size"], "function", ["None"], ["\n", "", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.5", ")", ":", "\n", "    ", "cutout_size", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.rand_saturation": [[56, 60], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.rand_contrast": [[62, 66], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.rand_translation": [[68, 82], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["\n", "", "AUGMENT_FNS", "=", "{", "\n", "'color'", ":", "[", "rand_brightness", ",", "rand_saturation", ",", "rand_contrast", "]", ",", "\n", "'translation'", ":", "[", "rand_translation", "]", ",", "\n", "'cutout'", ":", "[", "rand_cutout", "]", ",", "\n", "}", "\n", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.rand_cutout": [[84, 99], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents": [[21, 66], ["torch.device", "torch.device", "isinstance", "torch.randint", "torch.randint", "torch.tensor().to", "torch.tensor().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.randn", "torch.randn", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "numpy.random.permutation", "isinstance", "torch.tensor", "torch.tensor", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "sample.random_ball", "random_ball().to", "torch.tensor().to", "torch.tensor().to", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "range", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "sample.random_ball", "torch.tensor", "torch.tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.random_ball", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.random_ball"], ["def", "sample_latents", "(", "dist", ",", "batch_size", ",", "dim", ",", "truncated_factor", "=", "1", ",", "num_classes", "=", "None", ",", "perturb", "=", "None", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "sampler", "=", "\"default\"", ")", ":", "\n", "    ", "if", "num_classes", ":", "\n", "        ", "if", "sampler", "==", "\"default\"", ":", "\n", "            ", "y_fake", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "num_classes", ",", "size", "=", "(", "batch_size", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "", "elif", "sampler", "==", "\"class_order_some\"", ":", "\n", "            ", "assert", "batch_size", "%", "8", "==", "0", ",", "\"The size of the batches should be a multiple of 8.\"", "\n", "num_classes_plot", "=", "batch_size", "//", "8", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "num_classes", ")", "[", ":", "num_classes_plot", "]", "\n", "", "elif", "sampler", "==", "\"class_order_all\"", ":", "\n", "            ", "batch_size", "=", "num_classes", "*", "8", "\n", "indices", "=", "[", "c", "for", "c", "in", "range", "(", "num_classes", ")", "]", "\n", "", "elif", "isinstance", "(", "sampler", ",", "int", ")", ":", "\n", "            ", "y_fake", "=", "torch", ".", "tensor", "(", "[", "sampler", "]", "*", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "sampler", "in", "[", "\"class_order_some\"", ",", "\"class_order_all\"", "]", ":", "\n", "            ", "y_fake", "=", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "y_fake", "+=", "[", "idx", "]", "*", "8", "\n", "", "y_fake", "=", "torch", ".", "tensor", "(", "y_fake", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "", "", "else", ":", "\n", "        ", "y_fake", "=", "None", "\n", "\n", "", "if", "isinstance", "(", "perturb", ",", "float", ")", "and", "perturb", ">", "0.0", ":", "\n", "        ", "if", "dist", "==", "\"gaussian\"", ":", "\n", "            ", "latents", "=", "torch", ".", "randn", "(", "batch_size", ",", "dim", ",", "device", "=", "device", ")", "/", "truncated_factor", "\n", "eps", "=", "perturb", "*", "torch", ".", "randn", "(", "batch_size", ",", "dim", ",", "device", "=", "device", ")", "\n", "latents_eps", "=", "latents", "+", "eps", "\n", "", "elif", "dist", "==", "\"uniform\"", ":", "\n", "            ", "latents", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "dim", ")", ".", "uniform_", "(", "-", "1.0", ",", "1.0", ")", ".", "to", "(", "device", ")", "\n", "eps", "=", "perturb", "*", "torch", ".", "FloatTensor", "(", "batch_size", ",", "dim", ")", ".", "uniform_", "(", "-", "1.0", ",", "1.0", ")", ".", "to", "(", "device", ")", "\n", "latents_eps", "=", "latents", "+", "eps", "\n", "", "elif", "dist", "==", "\"hyper_sphere\"", ":", "\n", "            ", "latents", ",", "latents_eps", "=", "random_ball", "(", "batch_size", ",", "dim", ",", "perturb", "=", "perturb", ")", "\n", "latents", ",", "latents_eps", "=", "torch", ".", "FloatTensor", "(", "latents", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "FloatTensor", "(", "latents_eps", ")", ".", "to", "(", "device", ")", "\n", "", "return", "latents", ",", "y_fake", ",", "latents_eps", "\n", "", "else", ":", "\n", "        ", "if", "dist", "==", "\"gaussian\"", ":", "\n", "            ", "latents", "=", "torch", ".", "randn", "(", "batch_size", ",", "dim", ",", "device", "=", "device", ")", "/", "truncated_factor", "\n", "", "elif", "dist", "==", "\"uniform\"", ":", "\n", "            ", "latents", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "dim", ")", ".", "uniform_", "(", "-", "1.0", ",", "1.0", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "dist", "==", "\"hyper_sphere\"", ":", "\n", "            ", "latents", "=", "random_ball", "(", "batch_size", ",", "dim", ",", "perturb", "=", "perturb", ")", ".", "to", "(", "device", ")", "\n", "", "return", "latents", ",", "y_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.random_ball": [[68, 86], ["numpy.random.normal", "numpy.random.normal", "numpy.linalg.norm", "random.random", "numpy.linalg.norm", "random.random", "numpy.linalg.norm", "random.random", "numpy.random.normal"], "function", ["None"], ["", "", "def", "random_ball", "(", "batch_size", ",", "z_dim", ",", "perturb", "=", "False", ")", ":", "\n", "    ", "if", "perturb", ":", "\n", "        ", "normal", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "z_dim", ",", "batch_size", ")", ")", "\n", "random_directions", "=", "normal", "/", "linalg", ".", "norm", "(", "normal", ",", "axis", "=", "0", ")", "\n", "random_radii", "=", "random", ".", "random", "(", "batch_size", ")", "**", "(", "1", "/", "z_dim", ")", "\n", "zs", "=", "1.0", "*", "(", "random_directions", "*", "random_radii", ")", ".", "T", "\n", "\n", "normal_perturb", "=", "normal", "+", "0.05", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "z_dim", ",", "batch_size", ")", ")", "\n", "perturb_random_directions", "=", "normal_perturb", "/", "linalg", ".", "norm", "(", "normal_perturb", ",", "axis", "=", "0", ")", "\n", "perturb_random_radii", "=", "random", ".", "random", "(", "batch_size", ")", "**", "(", "1", "/", "z_dim", ")", "\n", "zs_perturb", "=", "1.0", "*", "(", "perturb_random_directions", "*", "perturb_random_radii", ")", ".", "T", "\n", "return", "zs", ",", "zs_perturb", "\n", "", "else", ":", "\n", "        ", "normal", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "z_dim", ",", "batch_size", ")", ")", "\n", "random_directions", "=", "normal", "/", "linalg", ".", "norm", "(", "normal", ",", "axis", "=", "0", ")", "\n", "random_radii", "=", "random", ".", "random", "(", "batch_size", ")", "**", "(", "1", "/", "z_dim", ")", "\n", "zs", "=", "1.0", "*", "(", "random_directions", "*", "random_radii", ")", ".", "T", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot": [[89, 92], ["torch.randint", "torch.randint"], "function", ["None"], ["", "", "def", "sample_1hot", "(", "batch_size", ",", "num_classes", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "return", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "num_classes", ",", "size", "=", "(", "batch_size", ",", ")", ",", "\n", "device", "=", "device", ",", "dtype", "=", "torch", ".", "int64", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.make_mask": [[94, 104], ["labels.detach().cpu().numpy.detach().cpu().numpy", "numpy.zeros", "range", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type.to", "numpy.where", "labels.detach().cpu().numpy.detach().cpu", "torch.tensor", "torch.tensor", "labels.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "def", "make_mask", "(", "labels", ",", "n_cls", ",", "device", ")", ":", "\n", "    ", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n_samples", "=", "labels", ".", "shape", "[", "0", "]", "\n", "mask_multi", "=", "np", ".", "zeros", "(", "[", "n_cls", ",", "n_samples", "]", ")", "\n", "for", "c", "in", "range", "(", "n_cls", ")", ":", "\n", "        ", "c_indices", "=", "np", ".", "where", "(", "labels", "==", "c", ")", "\n", "mask_multi", "[", "c", ",", "c_indices", "]", "=", "+", "1", "\n", "\n", "", "mask_multi", "=", "torch", ".", "tensor", "(", "mask_multi", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "return", "mask_multi", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.target_class_sampler": [[106, 116], ["sum", "torch.DoubleTensor", "torch.DoubleTensor", "torch.utils.data.sampler.WeightedRandomSampler", "torch.utils.data.sampler.WeightedRandomSampler", "len"], "function", ["None"], ["", "def", "target_class_sampler", "(", "dataset", ",", "target_class", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "targets", "=", "dataset", ".", "data", ".", "targets", "\n", "", "except", ":", "\n", "        ", "targets", "=", "dataset", ".", "labels", "\n", "", "weights", "=", "[", "True", "if", "target", "==", "target_class", "else", "False", "for", "target", "in", "targets", "]", "\n", "num_samples", "=", "sum", "(", "weights", ")", "\n", "weights", "=", "torch", ".", "DoubleTensor", "(", "weights", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "weights", ")", ",", "replacement", "=", "False", ")", "\n", "return", "num_samples", ",", "sampler", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.load_checkpoint.load_checkpoint": [[15, 44], ["isinstance", "torch.load", "model.load_state_dict", "torch.load", "model.load_state_dict", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "optimizer.state.values", "state.items", "isinstance", "v.cuda"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], ["def", "load_checkpoint", "(", "model", ",", "optimizer", ",", "filename", ",", "metric", "=", "False", ",", "ema", "=", "False", ")", ":", "\n", "    ", "start_step", "=", "0", "\n", "if", "isinstance", "(", "model", ",", "encoder", ".", "VAE", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "return", "model", "\n", "", "if", "ema", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "return", "model", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "seed", "=", "checkpoint", "[", "'seed'", "]", "\n", "run_name", "=", "checkpoint", "[", "'run_name'", "]", "\n", "start_step", "=", "checkpoint", "[", "'step'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "ada_p", "=", "checkpoint", "[", "'ada_p'", "]", "\n", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "if", "metric", ":", "\n", "            ", "best_step", "=", "checkpoint", "[", "'best_step'", "]", "\n", "best_fid", "=", "checkpoint", "[", "'best_fid'", "]", "\n", "best_fid_checkpoint_path", "=", "checkpoint", "[", "'best_fid_checkpoint_path'", "]", "\n", "return", "model", ",", "optimizer", ",", "seed", ",", "run_name", ",", "start_step", ",", "ada_p", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", "\n", "", "", "return", "model", ",", "optimizer", ",", "seed", ",", "run_name", ",", "start_step", ",", "ada_p", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.make_hdf5.make_hdf5": [[41, 94], ["os.path.join", "os.path.isfile", "ValueError", "print", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "print", "enumerate", "tqdm.tqdm", "y.numpy.numpy", "h5py.File", "print", "f.create_dataset", "print", "f.create_dataset", "print", "h5py.File", "f[].resize", "f[].resize", "len", "str", "str", "len", "len"], "function", ["None"], ["def", "make_hdf5", "(", "model_config", ",", "train_config", ",", "mode", ")", ":", "\n", "    ", "if", "'hdf5'", "in", "model_config", "[", "'dataset_name'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'Reading from an HDF5 file which you will probably be '", "\n", "'about to overwrite! Override this error only if you know '", "\n", "'what you'", "'re doing!'", ")", "\n", "\n", "", "file_name", "=", "'{dataset_name}_{size}_{mode}.hdf5'", ".", "format", "(", "dataset_name", "=", "model_config", "[", "'dataset_name'", "]", ",", "size", "=", "model_config", "[", "'img_size'", "]", ",", "mode", "=", "mode", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "model_config", "[", "'data_path'", "]", ",", "file_name", ")", "\n", "train", "=", "True", "if", "mode", "==", "\"train\"", "else", "False", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "        ", "print", "(", "\"{file_name} exist!\\nThe file are located in the {file_path}\"", ".", "format", "(", "file_name", "=", "file_name", ",", "file_path", "=", "file_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "LoadDataset", "(", "model_config", "[", "'dataset_name'", "]", ",", "model_config", "[", "'data_path'", "]", ",", "train", "=", "train", ",", "download", "=", "True", ",", "resize_size", "=", "model_config", "[", "'img_size'", "]", ",", "\n", "hdf5_path", "=", "None", ",", "random_flip", "=", "False", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "model_config", "[", "'batch_size4prcsing'", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "False", ",", "\n", "num_workers", "=", "train_config", "[", "'num_workers'", "]", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "print", "(", "'Starting to load %s into an HDF5 file with chunk size %i and compression %s...'", "%", "(", "model_config", "[", "'dataset_name'", "]", ",", "\n", "model_config", "[", "'chunk_size'", "]", ",", "\n", "model_config", "[", "'compression'", "]", ")", ")", "\n", "# Loop over loader", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "# Numpyify x, y", "\n", "            ", "x", "=", "(", "255", "*", "(", "(", "x", "+", "1", ")", "/", "2.0", ")", ")", ".", "byte", "(", ")", ".", "numpy", "(", ")", "\n", "y", "=", "y", ".", "numpy", "(", ")", "\n", "# If we're on the first batch, prepare the hdf5", "\n", "if", "i", "==", "0", ":", "\n", "                ", "with", "h5", ".", "File", "(", "file_path", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "print", "(", "'Producing dataset of len %d'", "%", "len", "(", "loader", ".", "dataset", ")", ")", "\n", "imgs_dset", "=", "f", ".", "create_dataset", "(", "'imgs'", ",", "x", ".", "shape", ",", "dtype", "=", "'uint8'", ",", "maxshape", "=", "(", "len", "(", "loader", ".", "dataset", ")", ",", "3", ",", "\n", "model_config", "[", "'img_size'", "]", ",", "model_config", "[", "'img_size'", "]", ")", ",", "\n", "chunks", "=", "(", "model_config", "[", "'chunk_size'", "]", ",", "3", ",", "model_config", "[", "'img_size'", "]", ",", "model_config", "[", "'img_size'", "]", ")", ",", "compression", "=", "model_config", "[", "'compression'", "]", ")", "\n", "print", "(", "'Image chunks chosen as '", "+", "str", "(", "imgs_dset", ".", "chunks", ")", ")", "\n", "imgs_dset", "[", "...", "]", "=", "x", "\n", "\n", "labels_dset", "=", "f", ".", "create_dataset", "(", "'labels'", ",", "y", ".", "shape", ",", "dtype", "=", "'int64'", ",", "maxshape", "=", "(", "len", "(", "loader", ".", "dataset", ")", ",", ")", ",", "\n", "chunks", "=", "(", "model_config", "[", "'chunk_size'", "]", ",", ")", ",", "compression", "=", "model_config", "[", "'compression'", "]", ")", "\n", "print", "(", "'Label chunks chosen as '", "+", "str", "(", "labels_dset", ".", "chunks", ")", ")", "\n", "labels_dset", "[", "...", "]", "=", "y", "\n", "# Else append to the hdf5", "\n", "", "", "else", ":", "\n", "                ", "with", "h5", ".", "File", "(", "file_path", ",", "'a'", ")", "as", "f", ":", "\n", "                  ", "f", "[", "'imgs'", "]", ".", "resize", "(", "f", "[", "'imgs'", "]", ".", "shape", "[", "0", "]", "+", "x", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "f", "[", "'imgs'", "]", "[", "-", "x", ".", "shape", "[", "0", "]", ":", "]", "=", "x", "\n", "f", "[", "'labels'", "]", ".", "resize", "(", "f", "[", "'labels'", "]", ".", "shape", "[", "0", "]", "+", "y", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "f", "[", "'labels'", "]", "[", "-", "y", ".", "shape", "[", "0", "]", ":", "]", "=", "y", "\n", "", "", "", "", "return", "file_path", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug": [[15, 23], ["cr_diff_aug.random_flip", "cr_diff_aug.random_translation", "x.contiguous.contiguous"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.random_flip", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.random_translation"], ["def", "CR_DiffAug", "(", "x", ",", "flip", "=", "True", ",", "translation", "=", "True", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "x", "=", "random_flip", "(", "x", ",", "0.5", ")", "\n", "", "if", "translation", ":", "\n", "        ", "x", "=", "random_translation", "(", "x", ",", "1", "/", "8", ")", "\n", "", "if", "flip", "or", "translation", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.random_flip": [[25, 33], ["x.clone", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "flip_mask.type().view().repeat().to.type().view().repeat().to", "torch.flip().view", "torch.flip().view", "torch.FloatTensor", "torch.FloatTensor", "flip_mask.type().view().repeat().to.type().view().repeat", "torch.flip", "torch.flip", "x[].view", "flip_mask.type().view().repeat().to.type().view", "flip_mask.type().view().repeat().to.type"], "function", ["None"], ["", "def", "random_flip", "(", "x", ",", "p", ")", ":", "\n", "    ", "x_out", "=", "x", ".", "clone", "(", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "flip_prob", "=", "torch", ".", "FloatTensor", "(", "n", ",", "1", ")", ".", "uniform_", "(", "0.0", ",", "1.0", ")", "\n", "flip_mask", "=", "flip_prob", "<", "p", "\n", "flip_mask", "=", "flip_mask", ".", "type", "(", "torch", ".", "bool", ")", ".", "view", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "c", ",", "h", ",", "w", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x_out", "[", "flip_mask", "]", "=", "torch", ".", "flip", "(", "x", "[", "flip_mask", "]", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", ",", "[", "3", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.random_translation": [[35, 51], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "F.pad.permute().contiguous", "F.pad.permute"], "function", ["None"], ["", "def", "random_translation", "(", "x", ",", "ratio", ")", ":", "\n", "    ", "max_t_x", ",", "max_t_y", "=", "int", "(", "x", ".", "shape", "[", "2", "]", "*", "ratio", ")", ",", "int", "(", "x", ".", "shape", "[", "3", "]", "*", "ratio", ")", "\n", "t_x", "=", "torch", ".", "randint", "(", "-", "max_t_x", ",", "max_t_x", "+", "1", ",", "size", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "t_y", "=", "torch", ".", "randint", "(", "-", "max_t_y", ",", "max_t_y", "+", "1", ",", "size", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "shape", "[", "2", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "shape", "[", "3", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "\n", "grid_x", "=", "(", "grid_x", "+", "t_x", ")", "+", "max_t_x", "\n", "grid_y", "=", "(", "grid_y", "+", "t_y", ")", "+", "max_t_y", "\n", "x_pad", "=", "F", ".", "pad", "(", "input", "=", "x", ",", "pad", "=", "[", "max_t_y", ",", "max_t_y", ",", "max_t_x", ",", "max_t_x", "]", ",", "mode", "=", "'reflect'", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dummy_context_mgr.__enter__": [[39, 41], ["None"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dummy_context_mgr.__exit__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.__init__": [[46, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prev_ada_p", ",", "ada_target", ",", "ada_length", ",", "batch_size", ",", "rank", ")", ":", "\n", "        ", "self", ".", "prev_ada_p", "=", "prev_ada_p", "\n", "self", ".", "ada_target", "=", "ada_target", "\n", "self", ".", "ada_length", "=", "ada_length", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "rank", "=", "rank", "\n", "\n", "self", ".", "ada_aug_step", "=", "self", ".", "ada_target", "/", "self", ".", "ada_length", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.initialize": [[56, 63], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "ada_augment", "=", "torch", ".", "tensor", "(", "[", "0.0", ",", "0.0", "]", ",", "device", "=", "self", ".", "rank", ")", "\n", "if", "self", ".", "prev_ada_p", "is", "not", "None", ":", "\n", "            ", "self", ".", "ada_aug_p", "=", "self", ".", "prev_ada_p", "\n", "", "else", ":", "\n", "            ", "self", ".", "ada_aug_p", "=", "0.0", "\n", "", "return", "self", ".", "ada_aug_p", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update": [[65, 76], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "misc.Adaptive_Augment.ada_augment.tolist", "min", "misc.Adaptive_Augment.ada_augment.mul_", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "torch.sign().sum().item", "max", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign().sum", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "logits", ")", ":", "\n", "        ", "ada_aug_data", "=", "torch", ".", "tensor", "(", "(", "torch", ".", "sign", "(", "logits", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "logits", ".", "shape", "[", "0", "]", ")", ",", "device", "=", "self", ".", "rank", ")", "\n", "self", ".", "ada_augment", "+=", "ada_aug_data", "\n", "if", "self", ".", "ada_augment", "[", "1", "]", ">", "(", "self", ".", "batch_size", "*", "4", "-", "1", ")", ":", "\n", "            ", "authen_out_signs", ",", "num_outputs", "=", "self", ".", "ada_augment", ".", "tolist", "(", ")", "\n", "r_t_stat", "=", "authen_out_signs", "/", "num_outputs", "\n", "sign", "=", "1", "if", "r_t_stat", ">", "self", ".", "ada_target", "else", "-", "1", "\n", "self", ".", "ada_aug_p", "+=", "sign", "*", "self", ".", "ada_aug_step", "*", "num_outputs", "\n", "self", ".", "ada_aug_p", "=", "min", "(", "1.0", ",", "max", "(", "0.0", ",", "self", ".", "ada_aug_p", ")", ")", "\n", "self", ".", "ada_augment", ".", "mul_", "(", "0.0", ")", "\n", "", "return", "self", ".", "ada_aug_p", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.__init__": [[605, 607], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.__call__": [[608, 611], ["misc.SaveOutput.outputs.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "module", ",", "module_input", ")", ":", "\n", "# def __call__(self, module, module_in, module_out):", "\n", "        ", "self", ".", "outputs", ".", "append", "(", "module_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear": [[612, 614], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.flatten_dict": [[78, 89], ["init_dict.items", "type", "type", "res_dict.update", "misc.flatten_dict"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.flatten_dict"], ["", "", "def", "flatten_dict", "(", "init_dict", ")", ":", "\n", "    ", "res_dict", "=", "{", "}", "\n", "if", "type", "(", "init_dict", ")", "is", "not", "dict", ":", "\n", "        ", "return", "res_dict", "\n", "\n", "", "for", "k", ",", "v", "in", "init_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "dict", ":", "\n", "            ", "res_dict", ".", "update", "(", "flatten_dict", "(", "v", ")", ")", "\n", "", "else", ":", "\n", "            ", "res_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.setattr_cls_from_kwargs": [[91, 96], ["misc.flatten_dict", "flatten_dict.keys", "setattr"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.flatten_dict", "home.repos.pwc.inspect_result.cure-lab_contranet.models.ContraNetDict.ContraNetDict.keys"], ["", "def", "setattr_cls_from_kwargs", "(", "cls", ",", "kwargs", ")", ":", "\n", "    ", "kwargs", "=", "flatten_dict", "(", "kwargs", ")", "\n", "for", "key", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "value", "=", "kwargs", "[", "key", "]", "\n", "setattr", "(", "cls", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr": [[98, 108], ["itertools.chain", "misc.setattr_cls_from_kwargs", "train_configs.items", "model_configs.items"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.setattr_cls_from_kwargs"], ["", "", "def", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", ":", "\n", "    ", "cfgs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "chain", "(", "train_configs", ".", "items", "(", ")", ",", "model_configs", ".", "items", "(", ")", ")", ":", "\n", "        ", "cfgs", "[", "k", "]", "=", "v", "\n", "\n", "", "class", "cfg_container", ":", "pass", "\n", "cfg_container", ".", "train_configs", "=", "train_configs", "\n", "cfg_container", ".", "model_configs", "=", "model_configs", "\n", "setattr_cls_from_kwargs", "(", "cfg_container", ",", "cfgs", ")", "\n", "return", "cfg_container", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed": [[111, 117], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "def", "fix_all_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.setup": [[119, 140], ["torch.init_process_group", "torch.init_process_group"], "function", ["None"], ["", "def", "setup", "(", "rank", ",", "world_size", ",", "backend", "=", "\"nccl\"", ")", ":", "\n", "    ", "if", "sys", ".", "platform", "==", "'win32'", ":", "\n", "# Distributed package only covers collective communications with Gloo", "\n", "# backend and FileStore on Windows platform. Set init_method parameter", "\n", "# in init_process_group to a local file.", "\n", "# Example init_method=\"file:///f:/libtmp/some_file\"", "\n", "        ", "init_method", "=", "\"file:///{your local file path}\"", "\n", "\n", "# initialize the process group", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", ",", "\n", "init_method", "=", "init_method", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "world_size", "\n", ")", "\n", "", "else", ":", "\n", "# initialize the process group", "\n", "        ", "dist", ".", "init_process_group", "(", "backend", ",", "\n", "init_method", "=", "\"tcp://%s:%s\"", "%", "(", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", ",", "os", ".", "environ", "[", "'MASTER_PORT'", "]", ")", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.cleanup": [[142, 144], ["torch.destroy_process_group"], "function", ["None"], ["", "", "def", "cleanup", "(", ")", ":", "\n", "    ", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.count_parameters": [[146, 148], ["sum", "p.data.nelement", "module.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "module", ")", ":", "\n", "    ", "return", "'Number of parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.define_sampler": [[150, 159], ["None"], "function", ["None"], ["", "def", "define_sampler", "(", "dataset_name", ",", "conditional_strategy", ",", "batch_size", ",", "num_classes", ")", ":", "\n", "    ", "if", "conditional_strategy", "!=", "\"no\"", ":", "\n", "        ", "if", "dataset_name", "==", "\"cifar10\"", "or", "batch_size", ">=", "num_classes", "*", "8", ":", "\n", "            ", "sampler", "=", "\"class_order_all\"", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "\"class_order_some\"", "\n", "", "", "else", ":", "\n", "        ", "sampler", "=", "\"default\"", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.check_flags": [[161, 229], ["print", "warnings.warn", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "check_flags", "(", "train_configs", ",", "model_configs", ",", "n_gpus", ")", ":", "\n", "    ", "if", "model_configs", "[", "'train'", "]", "[", "'model'", "]", "[", "'architecture'", "]", "==", "\"dcgan\"", ":", "\n", "        ", "assert", "model_configs", "[", "'data_processing'", "]", "[", "'img_size'", "]", "==", "32", ",", "\"Sry,\\\n            StudioGAN does not support dcgan models for generation of images larger than 32 resolution.\"", "\n", "\n", "", "if", "train_configs", "[", "'freeze_layers'", "]", ">", "-", "1", ":", "\n", "        ", "assert", "train_configs", "[", "'checkpoint_folder'", "]", "is", "not", "None", ",", "\"Freezing discriminator needs a pre-trained model.\"", "\n", "\n", "", "if", "train_configs", "[", "'distributed_data_parallel'", "]", ":", "\n", "        ", "msg", "=", "\"StudioGAN does not support image visualization, k_nearest_neighbor, interpolation, frequency, and tsne analysis with DDP. \"", "+", "\"Please change DDP with a single GPU training or DataParallel instead.\"", "\n", "assert", "train_configs", "[", "'image_visualization'", "]", "+", "train_configs", "[", "'k_nearest_neighbor'", "]", "+", "train_configs", "[", "'interpolation'", "]", "+", "train_configs", "[", "'frequency_analysis'", "]", "+", "train_configs", "[", "'tsne_analysis'", "]", "==", "0", ",", "msg", "\n", "\n", "", "if", "model_configs", "[", "'train'", "]", "[", "'model'", "]", "[", "'conditional_strategy'", "]", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "        ", "assert", "not", "train_configs", "[", "'distributed_data_parallel'", "]", ",", "\"StudioGAN does not support DDP training for NT_Xent_GAN, Proxy_NCA_GAN, and ContraGAN\"", "\n", "\n", "", "if", "train_configs", "[", "'train'", "]", "*", "train_configs", "[", "'standing_statistics'", "]", ":", "\n", "        ", "print", "(", "\"When training, StudioGAN does not apply standing_statistics for evaluation. \"", "+", "\"After training is done, StudioGAN will accumulate batchnorm statistics and evaluate the trained model\"", ")", "\n", "\n", "", "if", "model_configs", "[", "'train'", "]", "[", "'model'", "]", "[", "'conditional_strategy'", "]", "==", "\"ContraGAN\"", ":", "\n", "        ", "assert", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'tempering_type'", "]", "==", "\"constant\"", "or", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'tempering_type'", "]", "==", "\"continuous\"", "or", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'tempering_type'", "]", "==", "\"discrete\"", ",", "\"Tempering_type should be one of constant, continuous, or discrete.\"", "\n", "\n", "", "if", "model_configs", "[", "'train'", "]", "[", "'model'", "]", "[", "'pos_collected_numerator'", "]", ":", "\n", "        ", "assert", "model_configs", "[", "'train'", "]", "[", "'model'", "]", "[", "'conditional_strategy'", "]", "==", "\"ContraGAN\"", ",", "\"Pos_collected_numerator option is not appliable except for ContraGAN.\"", "\n", "\n", "", "if", "train_configs", "[", "'distributed_data_parallel'", "]", ":", "\n", "        ", "msg", "=", "'Evaluation results of the image generation with DDP are not exact. '", "+", "'Please use a single GPU training mode or DataParallel for exact evluation.'", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "\n", "", "if", "model_configs", "[", "'data_processing'", "]", "[", "'dataset_name'", "]", "==", "'cifar10'", ":", "\n", "        ", "assert", "train_configs", "[", "'eval_type'", "]", "in", "[", "'train'", ",", "'test'", "]", ",", "\"Cifar10 does not contain dataset for validation.\"", "\n", "\n", "", "elif", "model_configs", "[", "'data_processing'", "]", "[", "'dataset_name'", "]", "in", "[", "'imagenet'", ",", "'tiny_imagenet'", ",", "'custom'", "]", ":", "\n", "        ", "assert", "train_configs", "[", "'eval_type'", "]", "==", "'train'", "or", "train_configs", "[", "'eval_type'", "]", "==", "'valid'", ",", "\"StudioGAN dose not support the evalutation protocol that uses the test dataset on imagenet, tiny imagenet, and custom datasets\"", "\n", "\n", "", "assert", "train_configs", "[", "'bn_stat_OnTheFly'", "]", "*", "train_configs", "[", "'standing_statistics'", "]", "==", "0", ",", "\"You can't turn on train_statistics and standing_statistics simultaneously.\"", "\n", "\n", "assert", "model_configs", "[", "'train'", "]", "[", "'optimization'", "]", "[", "'batch_size'", "]", "%", "n_gpus", "==", "0", ",", "\"Batch_size should be divided by the number of gpus.\"", "\n", "\n", "assert", "int", "(", "model_configs", "[", "'train'", "]", "[", "'training_and_sampling_setting'", "]", "[", "'diff_aug'", "]", ")", "*", "int", "(", "model_configs", "[", "'train'", "]", "[", "'training_and_sampling_setting'", "]", "[", "'ada'", "]", ")", "==", "0", ",", "\"You can't simultaneously apply Differentiable Augmentation (DiffAug) and Adaptive Discriminator Augmentation (ADA).\"", "\n", "\n", "assert", "int", "(", "train_configs", "[", "'mixed_precision'", "]", ")", "*", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'gradient_penalty_for_dis'", "]", ")", "==", "0", ",", "\"You can't simultaneously apply mixed precision training (mpc) and Gradient Penalty for WGAN-GP.\"", "\n", "\n", "assert", "int", "(", "train_configs", "[", "'mixed_precision'", "]", ")", "*", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'deep_regret_analysis_for_dis'", "]", ")", "==", "0", ",", "\"You can't simultaneously apply mixed precision training (mpc) and Deep Regret Analysis for DRAGAN.\"", "\n", "\n", "assert", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'cr'", "]", ")", "*", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'bcr'", "]", ")", "==", "0", "and", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'cr'", "]", ")", "*", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'zcr'", "]", ")", "==", "0", ",", "\"You can't simultaneously turn on Consistency Reg. (CR) and Improved Consistency Reg. (ICR).\"", "\n", "\n", "assert", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'gradient_penalty_for_dis'", "]", ")", "*", "int", "(", "model_configs", "[", "'train'", "]", "[", "'loss_function'", "]", "[", "'deep_regret_analysis_for_dis'", "]", ")", "==", "0", ",", "\"You can't simultaneously apply Gradient Penalty (GP) and Deep Regret Analysis (DRA).\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad": [[232, 255], ["isinstance", "isinstance", "len", "len", "model.named_parameters", "model.named_parameters", "model.named_parameters", "range"], "function", ["None"], ["", "def", "toggle_grad", "(", "model", ",", "on", ",", "freeze_layers", "=", "-", "1", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "or", "isinstance", "(", "model", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "num_blocks", "=", "len", "(", "model", ".", "module", ".", "in_dims", ")", "\n", "", "else", ":", "\n", "            ", "num_blocks", "=", "len", "(", "model", ".", "in_dims", ")", "\n", "\n", "", "assert", "freeze_layers", "<", "num_blocks", ",", "\"can't not freeze the {fl}th block > total {nb} blocks.\"", ".", "format", "(", "fl", "=", "freeze_layers", ",", "nb", "=", "num_blocks", ")", "\n", "\n", "if", "freeze_layers", "==", "-", "1", ":", "\n", "            ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "on", "\n", "", "", "else", ":", "\n", "            ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "on", "\n", "for", "layer", "in", "range", "(", "freeze_layers", ")", ":", "\n", "                    ", "block", "=", "\"blocks.{layer}\"", ".", "format", "(", "layer", "=", "layer", ")", "\n", "if", "block", "in", "name", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", "except", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "on", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.set_bn_train": [[257, 260], ["isinstance", "m.train"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train"], ["", "", "", "def", "set_bn_train", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.untrack_bn_statistics": [[261, 264], ["isinstance"], "function", ["None"], ["", "", "def", "untrack_bn_statistics", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "track_running_stats", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.track_bn_statistics": [[265, 268], ["isinstance"], "function", ["None"], ["", "", "def", "track_bn_statistics", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "track_running_stats", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.set_deterministic_op_train": [[270, 282], ["isinstance", "isinstance", "isinstance", "isinstance", "m.train", "m.train", "m.train", "m.train"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train"], ["", "", "def", "set_deterministic_op_train", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "Conv2d", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "linear", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "Embedding", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.reset_bn_stat": [[284, 287], ["isinstance", "m.reset_running_stats"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "", "def", "reset_bn_stat", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "reset_running_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.elapsed_time": [[289, 293], ["datetime.datetime.now", "str().split", "str"], "function", ["None"], ["", "", "def", "elapsed_time", "(", "start_time", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "elapsed", "=", "now", "-", "start_time", "\n", "return", "str", "(", "elapsed", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "# remove milliseconds", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.reshape_weight_to_matrix": [[295, 303], ["weight_mat.permute.size", "weight_mat.permute.reshape", "weight_mat.permute.permute", "range", "weight_mat.permute.dim"], "function", ["None"], ["", "def", "reshape_weight_to_matrix", "(", "weight", ")", ":", "\n", "    ", "weight_mat", "=", "weight", "\n", "dim", "=", "0", "\n", "if", "dim", "!=", "0", ":", "\n", "# permute dim to front", "\n", "        ", "weight_mat", "=", "weight_mat", ".", "permute", "(", "dim", ",", "*", "[", "d", "for", "d", "in", "range", "(", "weight_mat", ".", "dim", "(", ")", ")", "if", "d", "!=", "dim", "]", ")", "\n", "", "height", "=", "weight_mat", ".", "size", "(", "0", ")", "\n", "return", "weight_mat", ".", "reshape", "(", "height", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_string": [[305, 309], ["enumerate"], "function", ["None"], ["", "def", "find_string", "(", "list_", ",", "string", ")", ":", "\n", "    ", "for", "i", ",", "s", "in", "enumerate", "(", "list_", ")", ":", "\n", "        ", "if", "string", "==", "s", ":", "\n", "            ", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove": [[311, 314], ["os.path.isfile", "os.remove"], "function", ["None"], ["", "", "", "def", "find_and_remove", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn": [[316, 346], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.named_parameters", "misc.reshape_weight_to_matrix", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "name.split", "misc.find_string", "int", "int", "getattr", "name.split", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "isinstance", "isinstance", "misc.find_string", "isinstance", "isinstance", "getattr", "getattr", "isinstance", "isinstance", "int", "int"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.reshape_weight_to_matrix", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_string", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_string"], ["", "", "def", "calculate_all_sn", "(", "model", ")", ":", "\n", "    ", "sigmas", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "name", "and", "\"bn\"", "not", "in", "name", "and", "\"shared\"", "not", "in", "name", "and", "\"deconv\"", "not", "in", "name", ":", "\n", "                ", "if", "\"blocks\"", "in", "name", ":", "\n", "                    ", "splited_name", "=", "name", ".", "split", "(", "'.'", ")", "\n", "idx", "=", "find_string", "(", "splited_name", ",", "'blocks'", ")", "\n", "block_idx", "=", "int", "(", "splited_name", "[", "int", "(", "idx", "+", "1", ")", "]", ")", "\n", "module_idx", "=", "int", "(", "splited_name", "[", "int", "(", "idx", "+", "2", ")", "]", ")", "\n", "operation_name", "=", "splited_name", "[", "idx", "+", "3", "]", "\n", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "or", "isinstance", "(", "model", ",", "DistributedDataParallel", ")", ":", "\n", "                        ", "operations", "=", "model", ".", "module", ".", "blocks", "[", "block_idx", "]", "[", "module_idx", "]", "\n", "", "else", ":", "\n", "                        ", "operations", "=", "model", ".", "blocks", "[", "block_idx", "]", "[", "module_idx", "]", "\n", "", "operation", "=", "getattr", "(", "operations", ",", "operation_name", ")", "\n", "", "else", ":", "\n", "                    ", "splited_name", "=", "name", ".", "split", "(", "'.'", ")", "\n", "idx", "=", "find_string", "(", "splited_name", ",", "'module'", ")", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "or", "isinstance", "(", "model", ",", "DistributedDataParallel", ")", "else", "-", "1", "\n", "operation_name", "=", "splited_name", "[", "idx", "+", "1", "]", "\n", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "or", "isinstance", "(", "model", ",", "DistributedDataParallel", ")", ":", "\n", "                        ", "operation", "=", "getattr", "(", "model", ".", "module", ",", "operation_name", ")", "\n", "", "else", ":", "\n", "                        ", "operation", "=", "getattr", "(", "model", ",", "operation_name", ")", "\n", "\n", "", "", "weight_orig", "=", "reshape_weight_to_matrix", "(", "operation", ".", "weight_orig", ")", "\n", "weight_u", "=", "operation", ".", "weight_u", "\n", "weight_v", "=", "operation", ".", "weight_v", "\n", "sigmas", "[", "name", "]", "=", "torch", ".", "dot", "(", "weight_u", ",", "torch", ".", "mv", "(", "weight_orig", ",", "weight_v", ")", ")", "\n", "", "", "", "return", "sigmas", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.apply_accumulate_stat": [[348, 356], ["generator.train", "generator.apply", "range", "generator.eval", "random.randint", "utils.sample.sample_latents", "generator"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents"], ["", "def", "apply_accumulate_stat", "(", "generator", ",", "acml_step", ",", "prior", ",", "batch_size", ",", "z_dim", ",", "num_classes", ",", "device", ")", ":", "\n", "    ", "generator", ".", "train", "(", ")", "\n", "generator", ".", "apply", "(", "reset_bn_stat", ")", "\n", "for", "i", "in", "range", "(", "acml_step", ")", ":", "\n", "        ", "new_batch_size", "=", "random", ".", "randint", "(", "1", ",", "batch_size", ")", "\n", "z", ",", "fake_labels", "=", "sample_latents", "(", "prior", ",", "new_batch_size", ",", "z_dim", ",", "1", ",", "num_classes", ",", "None", ",", "device", ")", "\n", "generated_images", "=", "generator", "(", "z", ",", "fake_labels", ")", "\n", "", "generator", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode": [[358, 384], ["gen.train", "gen_tmp.train", "gen_tmp.apply", "gen_tmp.eval", "gen_tmp.apply", "gen_tmp.eval", "gen_tmp.apply", "gen_tmp.train", "misc.apply_accumulate_stat", "gen_tmp.eval", "gen_tmp.apply", "gen_tmp.apply", "gen_tmp.apply"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.apply_accumulate_stat"], ["", "def", "change_generator_mode", "(", "gen", ",", "gen_copy", ",", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "prior", ",", "batch_size", ",", "z_dim", ",", "num_classes", ",", "device", ",", "training", ",", "counter", ")", ":", "\n", "    ", "gen_tmp", "=", "gen", "if", "gen_copy", "is", "None", "else", "gen_copy", "\n", "\n", "if", "training", ":", "\n", "        ", "gen", ".", "train", "(", ")", "\n", "gen_tmp", ".", "train", "(", ")", "\n", "gen_tmp", ".", "apply", "(", "track_bn_statistics", ")", "\n", "return", "gen_tmp", "\n", "\n", "", "if", "standing_statistics", ":", "\n", "        ", "if", "counter", ">", "1", ":", "\n", "            ", "gen_tmp", ".", "eval", "(", ")", "\n", "gen_tmp", ".", "apply", "(", "set_deterministic_op_train", ")", "\n", "", "else", ":", "\n", "            ", "gen_tmp", ".", "train", "(", ")", "\n", "apply_accumulate_stat", "(", "gen_tmp", ",", "standing_step", ",", "prior", ",", "batch_size", ",", "z_dim", ",", "num_classes", ",", "device", ")", "\n", "gen_tmp", ".", "eval", "(", ")", "\n", "gen_tmp", ".", "apply", "(", "set_deterministic_op_train", ")", "\n", "", "", "else", ":", "\n", "        ", "gen_tmp", ".", "eval", "(", ")", "\n", "if", "bn_stat_OnTheFly", ":", "\n", "            ", "gen_tmp", ".", "apply", "(", "set_bn_train", ")", "\n", "gen_tmp", ".", "apply", "(", "untrack_bn_statistics", ")", "\n", "", "gen_tmp", ".", "apply", "(", "set_deterministic_op_train", ")", "\n", "", "return", "gen_tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas": [[386, 394], ["os.path.dirname", "torchvision.utils.save_image", "os.path.exists", "os.makedirs", "logger.info", "os.path.abspath"], "function", ["None"], ["", "def", "plot_img_canvas", "(", "images", ",", "save_path", ",", "nrow", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "directory", "=", "dirname", "(", "save_path", ")", "\n", "\n", "if", "not", "exists", "(", "abspath", "(", "directory", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_image", "(", "images", ",", "save_path", ",", "padding", "=", "0", ",", "nrow", "=", "nrow", ")", "\n", "if", "logging", ":", "logger", ".", "info", "(", "\"Saved image to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_pr_curve": [[396, 414], ["os.path.join", "os.path.join", "matplotlib.subplots", "ax.plot", "ax.plot", "ax.grid", "ax.set_xlabel", "ax.set_ylabel", "fig.tight_layout", "fig.savefig", "os.path.exists", "os.makedirs", "logger.info", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.plot"], ["", "def", "plot_pr_curve", "(", "precision", ",", "recall", ",", "run_name", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "directory", "=", "join", "(", "'./figures'", ",", "run_name", ")", "\n", "\n", "if", "not", "exists", "(", "abspath", "(", "directory", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_path", "=", "join", "(", "directory", ",", "\"pr_curve.png\"", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "linestyle", "=", "'--'", ")", "\n", "ax", ".", "plot", "(", "recall", ",", "precision", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "ax", ".", "set_xlabel", "(", "'Recall (Higher is better)'", ",", "fontsize", "=", "15", ")", "\n", "ax", ".", "set_ylabel", "(", "'Precision (Higher is better)'", ",", "fontsize", "=", "15", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "save_path", ")", "\n", "if", "logging", ":", "logger", ".", "info", "(", "\"Save image to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_spectrum_image": [[416, 435], ["os.path.join", "os.path.join", "matplotlib.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.set_title", "fig.add_subplot.imshow", "fig.add_subplot.set_title", "plt.figure.savefig", "os.path.exists", "os.makedirs", "logger.info", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.imshow", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.imshow"], ["", "def", "plot_spectrum_image", "(", "real_spectrum", ",", "fake_spectrum", ",", "run_name", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "directory", "=", "join", "(", "'./figures'", ",", "run_name", ")", "\n", "\n", "if", "not", "exists", "(", "abspath", "(", "directory", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_path", "=", "join", "(", "directory", ",", "\"dfft_spectrum.png\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "\n", "ax1", ".", "imshow", "(", "real_spectrum", ",", "cmap", "=", "'viridis'", ")", "\n", "ax1", ".", "set_title", "(", "\"Spectrum of real images\"", ")", "\n", "\n", "ax2", ".", "imshow", "(", "fake_spectrum", ",", "cmap", "=", "'viridis'", ")", "\n", "ax2", ".", "set_title", "(", "\"Spectrum of fake images\"", ")", "\n", "fig", ".", "savefig", "(", "save_path", ")", "\n", "if", "logging", ":", "logger", ".", "info", "(", "\"Save image to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_tsne_scatter_plot": [[437, 461], ["os.path.join", "os.path.join", "matplotlib.figure", "sns.scatterplot().legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "os.path.exists", "os.makedirs", "logger.info", "os.path.abspath", "sns.scatterplot", "sns.color_palette"], "function", ["None"], ["", "def", "plot_tsne_scatter_plot", "(", "df", ",", "tsne_results", ",", "flag", ",", "run_name", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "directory", "=", "join", "(", "'./figures'", ",", "run_name", ",", "flag", ")", "\n", "\n", "if", "not", "exists", "(", "abspath", "(", "directory", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_path", "=", "join", "(", "directory", ",", "\"tsne_scatter.png\"", ")", "\n", "\n", "df", "[", "'tsne-2d-one'", "]", "=", "tsne_results", "[", ":", ",", "0", "]", "\n", "df", "[", "'tsne-2d-two'", "]", "=", "tsne_results", "[", ":", ",", "1", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "sns", ".", "scatterplot", "(", "\n", "x", "=", "\"tsne-2d-one\"", ",", "y", "=", "\"tsne-2d-two\"", ",", "\n", "hue", "=", "\"labels\"", ",", "\n", "palette", "=", "sns", ".", "color_palette", "(", "\"hls\"", ",", "10", ")", ",", "\n", "data", "=", "df", ",", "\n", "legend", "=", "\"full\"", ",", "\n", "alpha", "=", "0.5", "\n", ")", ".", "legend", "(", "fontsize", "=", "15", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "title", "(", "\"TSNE result of {flag} images\"", ".", "format", "(", "flag", "=", "flag", ")", ",", "fontsize", "=", "25", ")", "\n", "plt", ".", "xlabel", "(", "''", ",", "fontsize", "=", "7", ")", "\n", "plt", ".", "ylabel", "(", "''", ",", "fontsize", "=", "7", ")", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "if", "logging", ":", "logger", ".", "info", "(", "\"Save image to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_sim_heatmap": [[463, 492], ["os.path.join", "os.path.join", "sns.set", "matplotlib.subplots", "sns.diverging_palette", "numpy.zeros_like", "sns.heatmap", "ax.set_title().set_fontsize", "ax.set_xlabel", "ax.set_ylabel", "fig.savefig", "os.path.exists", "os.makedirs", "logger.info", "os.path.abspath", "numpy.triu_indices_from", "ax.set_title"], "function", ["None"], ["", "def", "plot_sim_heatmap", "(", "similarity", ",", "xlabels", ",", "ylabels", ",", "run_name", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "directory", "=", "join", "(", "'./figures'", ",", "run_name", ")", "\n", "\n", "if", "not", "exists", "(", "abspath", "(", "directory", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_path", "=", "join", "(", "directory", ",", "\"sim_heatmap.png\"", ")", "\n", "\n", "sns", ".", "set", "(", "style", "=", "\"white\"", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "18", ",", "18", ")", ")", "\n", "cmap", "=", "sns", ".", "diverging_palette", "(", "220", ",", "20", ",", "as_cmap", "=", "True", ")", "\n", "# Generate a mask for the upper triangle", "\n", "mask", "=", "np", ".", "zeros_like", "(", "similarity", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "mask", "[", "np", ".", "triu_indices_from", "(", "mask", ",", "k", "=", "1", ")", "]", "=", "True", "\n", "\n", "\n", "# Draw the heatmap with the mask and correct aspect ratio", "\n", "sns", ".", "heatmap", "(", "similarity", ",", "mask", "=", "mask", ",", "cmap", "=", "cmap", ",", "center", "=", "0.5", ",", "\n", "xticklabels", "=", "xlabels", ",", "yticklabels", "=", "ylabels", ",", "\n", "square", "=", "True", ",", "linewidths", "=", ".5", ",", "fmt", "=", "'.2f'", ",", "\n", "annot", "=", "True", ",", "cbar_kws", "=", "{", "\"shrink\"", ":", ".5", "}", ",", "vmax", "=", "1", ")", "\n", "\n", "ax", ".", "set_title", "(", "\"Heatmap of cosine similarity scores\"", ")", ".", "set_fontsize", "(", "15", ")", "\n", "ax", ".", "set_xlabel", "(", "\"\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"\"", ")", "\n", "\n", "fig", ".", "savefig", "(", "save_path", ")", "\n", "if", "logging", ":", "logger", ".", "info", "(", "\"Save image to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_npz": [[494, 537], ["iter", "print", "os.path.join", "os.path.exists", "os.makedirs", "print", "os.path.join", "print", "numpy.savez", "math.ceil", "len", "math.ceil", "iter", "os.path.abspath", "shutil.rmtree", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "os.path.abspath", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "misc.dummy_context_mgr", "range", "float", "float", "float", "float", "metrics.FID.generate_images", "numpy.uint8", "labels.detach().cpu().numpy", "next", "labels.detach().cpu", "images.detach().cpu().numpy", "labels.detach", "images.detach().cpu", "images.detach"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.generate_images"], ["", "def", "save_images_npz", "(", "run_name", ",", "data_loader", ",", "num_samples", ",", "num_classes", ",", "generator", ",", "discriminator", ",", "is_generate", ",", "\n", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ")", ":", "\n", "    ", "if", "is_generate", "is", "True", ":", "\n", "        ", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "n_batches", "=", "math", ".", "ceil", "(", "float", "(", "num_samples", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "total_instance", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "n_batches", "=", "math", ".", "ceil", "(", "float", "(", "num_samples", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "type", "=", "\"fake\"", "if", "is_generate", "is", "True", "else", "\"real\"", "\n", "print", "(", "\"Save {num_samples} {type} images in npz format....\"", ".", "format", "(", "num_samples", "=", "num_samples", ",", "type", "=", "type", ")", ")", "\n", "\n", "directory", "=", "join", "(", "'./samples'", ",", "run_name", ",", "type", ",", "\"npz\"", ")", "\n", "if", "exists", "(", "abspath", "(", "directory", ")", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "abspath", "(", "directory", ")", ")", "\n", "", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "n_batches", ")", ",", "disable", "=", "False", ")", ":", "\n", "            ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "if", "is_generate", ":", "\n", "                ", "images", ",", "labels", "=", "generate_images", "(", "batch_size", ",", "generator", ",", "discriminator", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "\n", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "images", ",", "labels", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "break", "\n", "\n", "", "", "x", "+=", "[", "np", ".", "uint8", "(", "255", "*", "(", "images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", ")", "/", "2.", ")", "]", "\n", "y", "+=", "[", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "", "", "x", "=", "np", ".", "concatenate", "(", "x", ",", "0", ")", "[", ":", "num_samples", "]", "\n", "y", "=", "np", ".", "concatenate", "(", "y", ",", "0", ")", "[", ":", "num_samples", "]", "\n", "print", "(", "'Images shape: %s, Labels shape: %s'", "%", "(", "x", ".", "shape", ",", "y", ".", "shape", ")", ")", "\n", "npz_filename", "=", "join", "(", "directory", ",", "\"samples.npz\"", ")", "\n", "print", "(", "'Saving npz to %s'", "%", "npz_filename", ")", "\n", "np", ".", "savez", "(", "npz_filename", ",", "**", "{", "'x'", ":", "x", ",", "'y'", ":", "y", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_png": [[539, 580], ["iter", "print", "os.path.join", "os.path.exists", "os.makedirs", "range", "print", "math.ceil", "len", "math.ceil", "iter", "os.path.abspath", "shutil.rmtree", "os.makedirs", "tqdm.tqdm", "os.path.abspath", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "misc.dummy_context_mgr", "range", "enumerate", "float", "float", "float", "float", "str", "metrics.FID.generate_images", "images.detach", "next", "torchvision.utils.save_image", "os.path.join", "str", "labels[].item"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.generate_images"], ["", "def", "save_images_png", "(", "run_name", ",", "data_loader", ",", "num_samples", ",", "num_classes", ",", "generator", ",", "discriminator", ",", "is_generate", ",", "\n", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ")", ":", "\n", "    ", "if", "is_generate", "is", "True", ":", "\n", "        ", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "n_batches", "=", "math", ".", "ceil", "(", "float", "(", "num_samples", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "total_instance", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "n_batches", "=", "math", ".", "ceil", "(", "float", "(", "num_samples", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "type", "=", "\"fake\"", "if", "is_generate", "is", "True", "else", "\"real\"", "\n", "print", "(", "\"Save {num_samples} {type} images in png format....\"", ".", "format", "(", "num_samples", "=", "num_samples", ",", "type", "=", "type", ")", ")", "\n", "\n", "directory", "=", "join", "(", "'./samples'", ",", "run_name", ",", "type", ",", "\"png\"", ")", "\n", "if", "exists", "(", "abspath", "(", "directory", ")", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "abspath", "(", "directory", ")", ")", "\n", "", "os", ".", "makedirs", "(", "directory", ")", "\n", "for", "f", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "join", "(", "directory", ",", "str", "(", "f", ")", ")", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", "if", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "n_batches", ")", ",", "disable", "=", "False", ")", ":", "\n", "            ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "if", "is_generate", ":", "\n", "                ", "images", ",", "labels", "=", "generate_images", "(", "batch_size", ",", "generator", ",", "discriminator", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "\n", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "images", ",", "labels", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "break", "\n", "\n", "", "", "for", "idx", ",", "img", "in", "enumerate", "(", "images", ".", "detach", "(", ")", ")", ":", "\n", "                ", "if", "batch_size", "*", "i", "+", "idx", "<", "num_samples", ":", "\n", "                    ", "save_image", "(", "(", "img", "+", "1", ")", "/", "2", ",", "join", "(", "directory", ",", "str", "(", "labels", "[", "idx", "]", ".", "item", "(", ")", ")", ",", "'{idx}.png'", ".", "format", "(", "idx", "=", "batch_size", "*", "i", "+", "idx", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "", "", "", "", "print", "(", "'Save png to ./generated_images/%s'", "%", "run_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.generate_images_for_KNN": [[582, 602], ["utils.sample.sample_latents", "isinstance", "isinstance", "utils.losses.latent_optimise", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "gen_model", "list", "fake_labels.detach().cpu().numpy", "fake_labels.detach().cpu", "fake_labels.detach"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "def", "generate_images_for_KNN", "(", "batch_size", ",", "real_label", ",", "gen_model", ",", "dis_model", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ")", ":", "\n", "    ", "if", "isinstance", "(", "gen_model", ",", "DataParallel", ")", "or", "isinstance", "(", "gen_model", ",", "DistributedDataParallel", ")", ":", "\n", "        ", "z_dim", "=", "gen_model", ".", "module", ".", "z_dim", "\n", "num_classes", "=", "gen_model", ".", "module", ".", "num_classes", "\n", "conditional_strategy", "=", "dis_model", ".", "module", ".", "conditional_strategy", "\n", "", "else", ":", "\n", "        ", "z_dim", "=", "gen_model", ".", "z_dim", "\n", "num_classes", "=", "gen_model", ".", "num_classes", "\n", "conditional_strategy", "=", "dis_model", ".", "conditional_strategy", "\n", "\n", "", "zs", ",", "fake_labels", "=", "sample_latents", "(", "prior", ",", "batch_size", ",", "z_dim", ",", "truncated_factor", ",", "num_classes", ",", "None", ",", "device", ",", "real_label", ")", "\n", "\n", "if", "latent_op", ":", "\n", "        ", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "gen_model", ",", "dis_model", ",", "conditional_strategy", ",", "latent_op_step", ",", "1.0", ",", "\n", "latent_op_alpha", ",", "latent_op_beta", ",", "False", ",", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "batch_images", "=", "gen_model", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "", "return", "batch_images", ",", "list", "(", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_ortho_reg": [[616, 624], ["torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "m.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.t", "torch.t", "torch.t", "torch.t", "torch.mm.abs().sum", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.mm.abs"], "function", ["None"], ["", "", "def", "calculate_ortho_reg", "(", "m", ",", "rank", ")", ":", "\n", "    ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "        ", "reg", "=", "1e-6", "\n", "param_flat", "=", "m", ".", "view", "(", "m", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "sym", "=", "torch", ".", "mm", "(", "param_flat", ",", "torch", ".", "t", "(", "param_flat", ")", ")", "\n", "sym", "-=", "torch", ".", "eye", "(", "param_flat", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "rank", ")", "\n", "ortho_loss", "=", "reg", "*", "sym", ".", "abs", "(", ")", ".", "sum", "(", ")", "\n", "", "return", "ortho_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name": [[16, 21], ["format.format", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "make_run_name", "(", "format", ",", "framework", ",", "phase", ")", ":", "\n", "    ", "return", "format", ".", "format", "(", "\n", "framework", "=", "framework", ",", "\n", "phase", "=", "phase", ",", "\n", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger": [[24, 48], ["logging.getLogger", "os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.makedirs", "logging.FileHandler", "logging.StreamHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "[].split", "log_output.split"], "function", ["None"], ["", "def", "make_logger", "(", "run_name", ",", "log_output", ")", ":", "\n", "    ", "if", "log_output", "is", "not", "None", ":", "\n", "        ", "run_name", "=", "log_output", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "run_name", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "log_filepath", "=", "log_output", "if", "log_output", "is", "not", "None", "else", "join", "(", "'logs'", ",", "f'{run_name}.log'", ")", "\n", "\n", "log_dir", "=", "dirname", "(", "abspath", "(", "log_filepath", ")", ")", "\n", "if", "not", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "\n", "", "if", "not", "logger", ".", "handlers", ":", "# execute only if logger doesn't already exist", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_filepath", ",", "'a'", ",", "'utf-8'", ")", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "os", ".", "sys", ".", "stdout", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(levelname)s] %(asctime)s > %(message)s'", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir": [[50, 55], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.abspath"], "function", ["None"], ["", "def", "make_checkpoint_dir", "(", "checkpoint_dir", ",", "run_name", ")", ":", "\n", "    ", "checkpoint_dir", "=", "checkpoint_dir", "if", "checkpoint_dir", "is", "not", "None", "else", "join", "(", "'checkpoints'", ",", "run_name", ")", "\n", "if", "not", "exists", "(", "abspath", "(", "checkpoint_dir", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "return", "checkpoint_dir", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.ConditionalBatchNorm2d.__init__": [[81, 92], ["torch.Module.__init__", "model_ops.batchnorm_2d", "model_ops.sn_embedding", "model_ops.sn_embedding", "model_ops.embedding", "model_ops.embedding"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["self", ".", "embed1", "=", "sn_embedding", "(", "num_classes", ",", "num_features", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed0", "=", "embedding", "(", "num_classes", ",", "num_features", ")", "\n", "self", ".", "embed1", "=", "embedding", "(", "num_classes", ",", "num_features", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "gain", "=", "(", "1", "+", "self", ".", "embed0", "(", "y", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "embed1", "(", "y", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "out", "*", "gain", "+", "bias", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.ConditionalBatchNorm2d.forward": [[93, 98], ["model_ops.ConditionalBatchNorm2d.embed1().view", "model_ops.ConditionalBatchNorm2d.bn", "model_ops.ConditionalBatchNorm2d.embed1", "model_ops.ConditionalBatchNorm2d.embed0"], "methods", ["None"], ["", "", "class", "ConditionalBatchNorm2d_for_skip_and_shared", "(", "nn", ".", "Module", ")", ":", "\n", "# https://github.com/voletiv/self-attention-GAN-pytorch", "\n", "    ", "def", "__init__", "(", "self", ",", "num_features", ",", "z_dims_after_concat", ",", "spectral_norm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "bn", "=", "batchnorm_2d", "(", "num_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.ConditionalBatchNorm2d_for_skip_and_shared.__init__": [[102, 113], ["torch.Module.__init__", "model_ops.batchnorm_2d", "model_ops.snlinear", "model_ops.snlinear", "model_ops.linear", "model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["self", ".", "bias", "=", "snlinear", "(", "z_dims_after_concat", ",", "num_features", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gain", "=", "linear", "(", "z_dims_after_concat", ",", "num_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "linear", "(", "z_dims_after_concat", ",", "num_features", ",", "bias", "=", "False", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "gain", "=", "(", "1", "+", "self", ".", "gain", "(", "y", ")", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "bias", "(", "y", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "out", "*", "gain", "+", "bias", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.ConditionalBatchNorm2d_for_skip_and_shared.forward": [[114, 119], ["model_ops.ConditionalBatchNorm2d_for_skip_and_shared.bias().view", "model_ops.ConditionalBatchNorm2d_for_skip_and_shared.bn", "y.size", "y.size", "model_ops.ConditionalBatchNorm2d_for_skip_and_shared.bias", "model_ops.ConditionalBatchNorm2d_for_skip_and_shared.gain"], "methods", ["None"], ["", "", "class", "Self_Attn", "(", "nn", ".", "Module", ")", ":", "\n", "# https://github.com/voletiv/self-attention-GAN-pytorch", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "spectral_norm", ")", ":", "\n", "        ", "super", "(", "Self_Attn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.Self_Attn.__init__": [[123, 141], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Softmax", "torch.Softmax", "torch.Parameter", "torch.Parameter", "model_ops.snconv2d", "model_ops.snconv2d", "model_ops.snconv2d", "model_ops.snconv2d", "model_ops.conv2d", "model_ops.conv2d", "model_ops.conv2d", "model_ops.conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["self", ".", "conv1x1_g", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_attn", "=", "snconv2d", "(", "in_channels", "=", "in_channels", "//", "2", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1x1_theta", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_phi", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_g", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_attn", "=", "conv2d", "(", "in_channels", "=", "in_channels", "//", "2", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "sigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.Self_Attn.forward": [[142, 170], ["x.size", "model_ops.Self_Attn.conv1x1_theta", "theta.view.view.view", "model_ops.Self_Attn.conv1x1_phi", "model_ops.Self_Attn.maxpool", "phi.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model_ops.Self_Attn.softmax", "model_ops.Self_Attn.conv1x1_g", "model_ops.Self_Attn.maxpool", "g.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model_ops.Self_Attn.view", "model_ops.Self_Attn.conv1x1_attn", "theta.view.view.permute", "model_ops.Self_Attn.permute"], "methods", ["None"], ["\n", "_", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "# Theta path", "\n", "theta", "=", "self", ".", "conv1x1_theta", "(", "x", ")", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "ch", "//", "8", ",", "h", "*", "w", ")", "\n", "# Phi path", "\n", "phi", "=", "self", ".", "conv1x1_phi", "(", "x", ")", "\n", "phi", "=", "self", ".", "maxpool", "(", "phi", ")", "\n", "phi", "=", "phi", ".", "view", "(", "-", "1", ",", "ch", "//", "8", ",", "h", "*", "w", "//", "4", ")", "\n", "# Attn map", "\n", "attn", "=", "torch", ".", "bmm", "(", "theta", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "phi", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "# g path", "\n", "g", "=", "self", ".", "conv1x1_g", "(", "x", ")", "\n", "g", "=", "self", ".", "maxpool", "(", "g", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "ch", "//", "2", ",", "h", "*", "w", "//", "4", ")", "\n", "# Attn_g", "\n", "attn_g", "=", "torch", ".", "bmm", "(", "g", ",", "attn", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "attn_g", "=", "attn_g", ".", "view", "(", "-", "1", ",", "ch", "//", "2", ",", "h", ",", "w", ")", "\n", "attn_g", "=", "self", ".", "conv1x1_attn", "(", "attn_g", ")", "\n", "return", "x", "+", "self", ".", "sigma", "*", "attn_g", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights": [[15, 45], ["modules", "isinstance", "isinstance", "isinstance", "isinstance", "torch.nn.init.orthogonal_", "module.bias.data.fill_", "torch.nn.init.normal_", "torch.nn.init.orthogonal_", "module.bias.data.fill_", "torch.nn.init.xavier_uniform_", "print", "torch.nn.init.normal_", "module.bias.data.fill_", "torch.nn.init.xavier_uniform_", "print"], "function", ["None"], ["if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "elif", "initialize", "==", "'N02'", ":", "\n", "                ", "init", ".", "normal_", "(", "module", ".", "weight", ",", "0", ",", "0.02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "elif", "initialize", "in", "[", "'glorot'", ",", "'xavier'", "]", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'Init style not recognized...'", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "initialize", "==", "'ortho'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "module", ".", "weight", ")", "\n", "", "elif", "initialize", "==", "'N02'", ":", "\n", "                ", "init", ".", "normal_", "(", "module", ".", "weight", ",", "0", ",", "0.02", ")", "\n", "", "elif", "initialize", "in", "[", "'glorot'", ",", "'xavier'", "]", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Init style not recognized...'", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "", "", "def", "conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "\n", "", "def", "deconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d": [[47, 50], ["torch.Conv2d"], "function", ["None"], ["\n", "", "def", "linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.deconv2d": [[51, 54], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "embedding", "(", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "return", "nn", ".", "Embedding", "(", "num_embeddings", "=", "num_embeddings", ",", "embedding_dim", "=", "embedding_dim", ")", "\n", "\n", "", "def", "snconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear": [[55, 57], ["torch.Linear"], "function", ["None"], ["    ", "return", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding": [[58, 60], ["torch.Embedding"], "function", ["None"], ["", "def", "sndeconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", ",", "eps", "=", "1e-6", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d": [[61, 64], ["torch.nn.utils.spectral_norm", "torch.Conv2d"], "function", ["None"], ["\n", "", "def", "snlinear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "bias", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sndeconv2d": [[65, 68], ["torch.nn.utils.spectral_norm", "torch.ConvTranspose2d"], "function", ["None"], ["", "def", "sn_embedding", "(", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Embedding", "(", "num_embeddings", "=", "num_embeddings", ",", "embedding_dim", "=", "embedding_dim", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n", "", "def", "batchnorm_2d", "(", "in_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear": [[69, 71], ["torch.nn.utils.spectral_norm", "torch.Linear"], "function", ["None"], ["    ", "return", "nn", ".", "BatchNorm2d", "(", "in_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "True", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding": [[72, 74], ["torch.nn.utils.spectral_norm", "torch.Embedding"], "function", ["None"], ["", "class", "ConditionalBatchNorm2d", "(", "nn", ".", "Module", ")", ":", "\n", "# https://github.com/voletiv/self-attention-GAN-pytorch", "\n", "    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ",", "spectral_norm", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d": [[75, 77], ["torch.BatchNorm2d"], "function", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "bn", "=", "batchnorm_2d", "(", "num_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.translate_mat": [[48, 56], ["torch.eye().unsqueeze().repeat", "torch.stack", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["def", "translate_mat", "(", "t_x", ",", "t_y", ")", ":", "\n", "    ", "batch", "=", "t_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "translate", "=", "torch", ".", "stack", "(", "(", "t_x", ",", "t_y", ")", ",", "1", ")", "\n", "mat", "[", ":", ",", ":", "2", ",", "2", "]", "=", "translate", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.rotate_mat": [[58, 68], ["torch.eye().unsqueeze().repeat", "torch.sin", "torch.cos", "torch.stack().view", "torch.eye().unsqueeze", "torch.stack", "torch.eye"], "function", ["None"], ["", "def", "rotate_mat", "(", "theta", ")", ":", "\n", "    ", "batch", "=", "theta", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "sin_t", "=", "torch", ".", "sin", "(", "theta", ")", "\n", "cos_t", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "rot", "=", "torch", ".", "stack", "(", "(", "cos_t", ",", "-", "sin_t", ",", "sin_t", ",", "cos_t", ")", ",", "1", ")", ".", "view", "(", "batch", ",", "2", ",", "2", ")", "\n", "mat", "[", ":", ",", ":", "2", ",", ":", "2", "]", "=", "rot", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.scale_mat": [[70, 78], ["torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "scale_mat", "(", "s_x", ",", "s_y", ")", ":", "\n", "    ", "batch", "=", "s_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "mat", "[", ":", ",", "0", ",", "0", "]", "=", "s_x", "\n", "mat", "[", ":", ",", "1", ",", "1", "]", "=", "s_y", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.translate3d_mat": [[80, 88], ["torch.eye().unsqueeze().repeat", "torch.stack", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "translate3d_mat", "(", "t_x", ",", "t_y", ",", "t_z", ")", ":", "\n", "    ", "batch", "=", "t_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "translate", "=", "torch", ".", "stack", "(", "(", "t_x", ",", "t_y", ",", "t_z", ")", ",", "1", ")", "\n", "mat", "[", ":", ",", ":", "3", ",", "3", "]", "=", "translate", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.rotate3d_mat": [[90, 109], ["torch.eye().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.sin().view", "torch.cos().view", "torch.eye().unsqueeze().repeat", "torch.eye", "torch.tensor", "torch.sin", "torch.cos", "torch.eye().unsqueeze", "torch.tensor.unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "rotate3d_mat", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "batch", "=", "theta", ".", "shape", "[", "0", "]", "\n", "\n", "u_x", ",", "u_y", ",", "u_z", "=", "axis", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", "\n", "cross", "=", "torch", ".", "tensor", "(", "[", "(", "0", ",", "-", "u_z", ",", "u_y", ")", ",", "(", "u_z", ",", "0", ",", "-", "u_x", ")", ",", "(", "-", "u_y", ",", "u_x", ",", "0", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "outer", "=", "torch", ".", "tensor", "(", "axis", ")", "\n", "outer", "=", "(", "outer", ".", "unsqueeze", "(", "1", ")", "*", "outer", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "sin_t", "=", "torch", ".", "sin", "(", "theta", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "cos_t", "=", "torch", ".", "cos", "(", "theta", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "rot", "=", "cos_t", "*", "eye", "+", "sin_t", "*", "cross", "+", "(", "1", "-", "cos_t", ")", "*", "outer", "\n", "\n", "eye_4", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "eye_4", "[", ":", ",", ":", "3", ",", ":", "3", "]", "=", "rot", "\n", "\n", "return", "eye_4", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.scale3d_mat": [[111, 120], ["torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze", "torch.eye"], "function", ["None"], ["", "def", "scale3d_mat", "(", "s_x", ",", "s_y", ",", "s_z", ")", ":", "\n", "    ", "batch", "=", "s_x", ".", "shape", "[", "0", "]", "\n", "\n", "mat", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "mat", "[", ":", ",", "0", ",", "0", "]", "=", "s_x", "\n", "mat", "[", ":", ",", "1", ",", "1", "]", "=", "s_y", "\n", "mat", "[", ":", ",", "2", ",", "2", "]", "=", "s_z", "\n", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.luma_flip_mat": [[122, 130], ["torch.eye().unsqueeze().repeat", "torch.tensor", "i.view", "torch.eye().unsqueeze", "torch.ger", "torch.eye"], "function", ["None"], ["", "def", "luma_flip_mat", "(", "axis", ",", "i", ")", ":", "\n", "    ", "batch", "=", "i", ".", "shape", "[", "0", "]", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "axis", "=", "torch", ".", "tensor", "(", "axis", "+", "(", "0", ",", ")", ")", "\n", "flip", "=", "2", "*", "torch", ".", "ger", "(", "axis", ",", "axis", ")", "*", "i", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "eye", "-", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.saturation_mat": [[132, 141], ["torch.eye().unsqueeze().repeat", "torch.tensor", "torch.ger", "torch.eye().unsqueeze", "i.view", "torch.eye"], "function", ["None"], ["", "def", "saturation_mat", "(", "axis", ",", "i", ")", ":", "\n", "    ", "batch", "=", "i", ".", "shape", "[", "0", "]", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "axis", "=", "torch", ".", "tensor", "(", "axis", "+", "(", "0", ",", ")", ")", "\n", "axis", "=", "torch", ".", "ger", "(", "axis", ",", "axis", ")", "\n", "saturate", "=", "axis", "+", "(", "eye", "-", "axis", ")", "*", "i", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "saturate", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.lognormal_sample": [[143, 145], ["torch.empty().log_normal_", "torch.empty"], "function", ["None"], ["", "def", "lognormal_sample", "(", "size", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "log_normal_", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.category_sample": [[147, 152], ["torch.tensor", "torch.randint", "len"], "function", ["None"], ["", "def", "category_sample", "(", "size", ",", "categories", ")", ":", "\n", "    ", "category", "=", "torch", ".", "tensor", "(", "categories", ")", "\n", "sample", "=", "torch", ".", "randint", "(", "high", "=", "len", "(", "categories", ")", ",", "size", "=", "(", "size", ",", ")", ")", "\n", "\n", "return", "category", "[", "sample", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.uniform_sample": [[154, 156], ["torch.empty().uniform_", "torch.empty", "math.pi", "math.pi", "math.pi"], "function", ["None"], ["", "def", "uniform_sample", "(", "size", ",", "low", ",", "high", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "uniform_", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.normal_sample": [[158, 160], ["torch.empty().normal_", "torch.empty"], "function", ["None"], ["", "def", "normal_sample", "(", "size", ",", "mean", "=", "0", ",", "std", "=", "1", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "normal_", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.bernoulli_sample": [[162, 164], ["torch.empty().bernoulli_", "torch.empty"], "function", ["None"], ["", "def", "bernoulli_sample", "(", "size", ",", "p", ")", ":", "\n", "    ", "return", "torch", ".", "empty", "(", "size", ")", ".", "bernoulli_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply": [[166, 172], ["bernoulli_sample().view", "ada.bernoulli_sample"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.bernoulli_sample"], ["", "def", "random_mat_apply", "(", "p", ",", "transform", ",", "prev", ",", "eye", ")", ":", "\n", "    ", "size", "=", "transform", ".", "shape", "[", "0", "]", "\n", "select", "=", "bernoulli_sample", "(", "size", ",", "p", ")", ".", "view", "(", "size", ",", "1", ",", "1", ")", "\n", "select_transform", "=", "select", "*", "transform", "+", "(", "1", "-", "select", ")", "*", "eye", "\n", "\n", "return", "select_transform", "@", "prev", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.sample_affine": [[174, 231], ["torch.eye().unsqueeze().repeat", "ada.category_sample", "ada.scale_mat", "ada.random_mat_apply", "ada.category_sample", "ada.rotate_mat", "ada.random_mat_apply", "ada.uniform_sample", "ada.translate_mat", "ada.random_mat_apply", "ada.lognormal_sample", "ada.scale_mat", "ada.random_mat_apply", "ada.uniform_sample", "ada.rotate_mat", "ada.random_mat_apply", "ada.lognormal_sample", "ada.scale_mat", "ada.random_mat_apply", "ada.uniform_sample", "ada.rotate_mat", "ada.random_mat_apply", "ada.normal_sample", "ada.translate_mat", "ada.random_mat_apply", "torch.ones", "torch.round", "torch.round", "math.sqrt", "torch.eye().unsqueeze", "math.log", "math.log", "torch.eye"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.category_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.scale_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.category_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.rotate_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.uniform_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.translate_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.lognormal_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.scale_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.uniform_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.rotate_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.lognormal_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.scale_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.uniform_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.rotate_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.normal_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.translate_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply"], ["", "def", "sample_affine", "(", "p", ",", "size", ",", "height", ",", "width", ")", ":", "\n", "    ", "G", "=", "torch", ".", "eye", "(", "3", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "size", ",", "1", ",", "1", ")", "\n", "eye", "=", "G", "\n", "\n", "# flip", "\n", "param", "=", "category_sample", "(", "size", ",", "(", "0", ",", "1", ")", ")", "\n", "Gc", "=", "scale_mat", "(", "1", "-", "2.0", "*", "param", ",", "torch", ".", "ones", "(", "size", ")", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('flip', G, scale_mat(1 - 2.0 * param, torch.ones(size)), sep='\\n')", "\n", "\n", "# 90 rotate", "\n", "param", "=", "category_sample", "(", "size", ",", "(", "0", ",", "3", ")", ")", "\n", "Gc", "=", "rotate_mat", "(", "-", "math", ".", "pi", "/", "2", "*", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('90 rotate', G, rotate_mat(-math.pi / 2 * param), sep='\\n')", "\n", "\n", "# integer translate", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "0.125", ",", "0.125", ")", "\n", "param_height", "=", "torch", ".", "round", "(", "param", "*", "height", ")", "/", "height", "\n", "param_width", "=", "torch", ".", "round", "(", "param", "*", "width", ")", "/", "width", "\n", "Gc", "=", "translate_mat", "(", "param_width", ",", "param_height", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('integer translate', G, translate_mat(param_width, param_height), sep='\\n')", "\n", "\n", "# isotropic scale", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "0.2", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Gc", "=", "scale_mat", "(", "param", ",", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('isotropic scale', G, scale_mat(param, param), sep='\\n')", "\n", "\n", "p_rot", "=", "1", "-", "math", ".", "sqrt", "(", "1", "-", "p", ")", "\n", "\n", "# pre-rotate", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "math", ".", "pi", ",", "math", ".", "pi", ")", "\n", "Gc", "=", "rotate_mat", "(", "-", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p_rot", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('pre-rotate', G, rotate_mat(-param), sep='\\n')", "\n", "\n", "# anisotropic scale", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "0.2", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Gc", "=", "scale_mat", "(", "param", ",", "1", "/", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('anisotropic scale', G, scale_mat(param, 1 / param), sep='\\n')", "\n", "\n", "# post-rotate", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "math", ".", "pi", ",", "math", ".", "pi", ")", "\n", "Gc", "=", "rotate_mat", "(", "-", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p_rot", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('post-rotate', G, rotate_mat(-param), sep='\\n')", "\n", "\n", "# fractional translate", "\n", "param", "=", "normal_sample", "(", "size", ",", "std", "=", "0.125", ")", "\n", "Gc", "=", "translate_mat", "(", "param", ",", "param", ")", "\n", "G", "=", "random_mat_apply", "(", "p", ",", "Gc", ",", "G", ",", "eye", ")", "\n", "# print('fractional translate', G, translate_mat(param, param), sep='\\n')", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.sample_color": [[233, 265], ["torch.eye().unsqueeze().repeat", "ada.normal_sample", "ada.translate3d_mat", "ada.random_mat_apply", "ada.lognormal_sample", "ada.scale3d_mat", "ada.random_mat_apply", "ada.category_sample", "ada.luma_flip_mat", "ada.random_mat_apply", "ada.uniform_sample", "ada.rotate3d_mat", "ada.random_mat_apply", "ada.lognormal_sample", "ada.saturation_mat", "ada.random_mat_apply", "math.sqrt", "torch.eye().unsqueeze", "math.log", "math.log", "torch.eye"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.normal_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.translate3d_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.lognormal_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.scale3d_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.category_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.luma_flip_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.uniform_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.rotate3d_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.lognormal_sample", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.saturation_mat", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_mat_apply"], ["", "def", "sample_color", "(", "p", ",", "size", ")", ":", "\n", "    ", "C", "=", "torch", ".", "eye", "(", "4", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "size", ",", "1", ",", "1", ")", "\n", "eye", "=", "C", "\n", "axis_val", "=", "1", "/", "math", ".", "sqrt", "(", "3", ")", "\n", "axis", "=", "(", "axis_val", ",", "axis_val", ",", "axis_val", ")", "\n", "\n", "# brightness", "\n", "param", "=", "normal_sample", "(", "size", ",", "std", "=", "0.2", ")", "\n", "Cc", "=", "translate3d_mat", "(", "param", ",", "param", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# contrast", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "0.5", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Cc", "=", "scale3d_mat", "(", "param", ",", "param", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# luma flip", "\n", "param", "=", "category_sample", "(", "size", ",", "(", "0", ",", "1", ")", ")", "\n", "Cc", "=", "luma_flip_mat", "(", "axis", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# hue rotation", "\n", "param", "=", "uniform_sample", "(", "size", ",", "-", "math", ".", "pi", ",", "math", ".", "pi", ")", "\n", "Cc", "=", "rotate3d_mat", "(", "axis", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "# saturation", "\n", "param", "=", "lognormal_sample", "(", "size", ",", "std", "=", "1", "*", "math", ".", "log", "(", "2", ")", ")", "\n", "Cc", "=", "saturation_mat", "(", "axis", ",", "param", ")", "\n", "C", "=", "random_mat_apply", "(", "p", ",", "Cc", ",", "C", ",", "eye", ")", "\n", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid": [[267, 275], ["torch.empty", "torch.linspace", "torch.linspace().unsqueeze", "torch.linspace"], "function", ["None"], ["", "def", "make_grid", "(", "shape", ",", "x0", ",", "x1", ",", "y0", ",", "y1", ",", "device", ")", ":", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "shape", "\n", "grid", "=", "torch", ".", "empty", "(", "n", ",", "h", ",", "w", ",", "3", ",", "device", "=", "device", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "linspace", "(", "x0", ",", "x1", ",", "w", ",", "device", "=", "device", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "linspace", "(", "y0", ",", "y1", ",", "h", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "1", "\n", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.affine_grid": [[277, 280], ["grid.view", "mat.transpose"], "function", ["None"], ["", "def", "affine_grid", "(", "grid", ",", "mat", ")", ":", "\n", "    ", "n", ",", "h", ",", "w", ",", "_", "=", "grid", ".", "shape", "\n", "return", "(", "grid", ".", "view", "(", "n", ",", "h", "*", "w", ",", "3", ")", "@", "mat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "n", ",", "h", ",", "w", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.get_padding": [[282, 312], ["torch.tensor", "numpy.clip", "numpy.clip", "torch.tensor().t", "int", "int", "int", "int", "torch.tensor", "extreme.max", "extreme.min"], "function", ["None"], ["", "def", "get_padding", "(", "G", ",", "height", ",", "width", ",", "pad_k", ")", ":", "\n", "    ", "extreme", "=", "(", "\n", "G", "[", ":", ",", ":", "2", ",", ":", "]", "\n", "@", "torch", ".", "tensor", "(", "[", "(", "-", "1.0", ",", "-", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ",", "1", ")", ",", "(", "1", ",", "-", "1", ",", "1", ")", ",", "(", "1", ",", "1", ",", "1", ")", "]", ")", ".", "t", "(", ")", "\n", ")", "\n", "\n", "size", "=", "torch", ".", "tensor", "(", "(", "width", ",", "height", ")", ")", "\n", "\n", "pad_low", "=", "(", "\n", "(", "(", "extreme", ".", "min", "(", "-", "1", ")", ".", "values", "+", "1", ")", "*", "size", ")", "\n", ".", "clamp", "(", "max", "=", "0", ")", "\n", ".", "abs", "(", ")", "\n", ".", "ceil", "(", ")", "\n", ".", "max", "(", "0", ")", "\n", ".", "values", ".", "to", "(", "torch", ".", "int64", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "pad_high", "=", "(", "\n", "(", "extreme", ".", "max", "(", "-", "1", ")", ".", "values", "*", "size", "-", "size", ")", "\n", ".", "clamp", "(", "min", "=", "0", ")", "\n", ".", "ceil", "(", ")", "\n", ".", "max", "(", "0", ")", "\n", ".", "values", ".", "to", "(", "torch", ".", "int64", ")", "\n", ".", "tolist", "(", ")", "\n", ")", "\n", "\n", "h_pad_lth", "=", "np", ".", "clip", "(", "[", "pad_low", "[", "0", "]", ",", "pad_high", "[", "0", "]", "]", ",", "a_max", "=", "height", "-", "pad_k", "-", "1", ",", "a_min", "=", "-", "100000", ")", "\n", "w_pad_lth", "=", "np", ".", "clip", "(", "[", "pad_low", "[", "1", "]", ",", "pad_high", "[", "1", "]", "]", ",", "a_max", "=", "width", "-", "pad_k", "-", "1", ",", "a_min", "=", "-", "100000", ")", "\n", "\n", "return", "int", "(", "h_pad_lth", "[", "0", "]", ")", ",", "int", "(", "h_pad_lth", "[", "1", "]", ")", ",", "int", "(", "w_pad_lth", "[", "0", "]", ")", ",", "int", "(", "w_pad_lth", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.try_sample_affine_and_pad": [[314, 333], ["ada.get_padding", "torch.nn.functional.pad", "ada.sample_affine", "torch.inverse"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.get_padding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.sample_affine"], ["", "def", "try_sample_affine_and_pad", "(", "img", ",", "p", ",", "pad_k", ",", "G", "=", "None", ")", ":", "\n", "    ", "batch", ",", "_", ",", "height", ",", "width", "=", "img", ".", "shape", "\n", "\n", "G_try", "=", "G", "\n", "\n", "if", "G", "is", "None", ":", "\n", "        ", "G_try", "=", "sample_affine", "(", "p", ",", "batch", ",", "height", ",", "width", ")", "\n", "\n", "", "pad_x1", ",", "pad_x2", ",", "pad_y1", ",", "pad_y2", "=", "get_padding", "(", "\n", "torch", ".", "inverse", "(", "G_try", ")", ",", "height", ",", "width", ",", "pad_k", ",", "\n", ")", "\n", "\n", "img_pad", "=", "F", ".", "pad", "(", "\n", "img", ",", "\n", "(", "pad_x1", "+", "pad_k", ",", "pad_x2", "+", "pad_k", ",", "pad_y1", "+", "pad_k", ",", "pad_y2", "+", "pad_k", ")", ",", "\n", "mode", "=", "\"reflect\"", ",", "\n", ")", "\n", "\n", "return", "img_pad", ",", "G_try", ",", "(", "pad_x1", ",", "pad_x2", ",", "pad_y1", ",", "pad_y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_apply_affine": [[335, 390], ["len", "torch.as_tensor", "torch.ger().to", "torch.flip", "ada.try_sample_affine_and_pad", "utils.ada_op.upfirdn2d", "make_grid().to", "ada.affine_grid", "torch.nn.functional.grid_sample", "utils.ada_op.upfirdn2d", "[].to", "torch.tensor", "torch.ger", "ada.make_grid", "torch.tensor", "torch.inverse"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.try_sample_affine_and_pad", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.affine_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid"], ["", "def", "random_apply_affine", "(", "img", ",", "p", ",", "G", "=", "None", ",", "antialiasing_kernel", "=", "SYM6", ")", ":", "\n", "    ", "kernel", "=", "antialiasing_kernel", "\n", "len_k", "=", "len", "(", "kernel", ")", "\n", "pad_k", "=", "(", "len_k", "+", "1", ")", "//", "2", "\n", "\n", "kernel", "=", "torch", ".", "as_tensor", "(", "kernel", ")", "\n", "kernel", "=", "torch", ".", "ger", "(", "kernel", ",", "kernel", ")", ".", "to", "(", "img", ")", "\n", "kernel_flip", "=", "torch", ".", "flip", "(", "kernel", ",", "(", "0", ",", "1", ")", ")", "\n", "\n", "img_pad", ",", "G", ",", "(", "pad_x1", ",", "pad_x2", ",", "pad_y1", ",", "pad_y2", ")", "=", "try_sample_affine_and_pad", "(", "\n", "img", ",", "p", ",", "pad_k", ",", "G", "\n", ")", "\n", "\n", "p_ux1", "=", "pad_x1", "\n", "p_ux2", "=", "pad_x2", "+", "1", "\n", "p_uy1", "=", "pad_y1", "\n", "p_uy2", "=", "pad_y2", "+", "1", "\n", "w_p", "=", "img_pad", ".", "shape", "[", "3", "]", "-", "len_k", "+", "1", "\n", "h_p", "=", "img_pad", ".", "shape", "[", "2", "]", "-", "len_k", "+", "1", "\n", "h_o", "=", "img", ".", "shape", "[", "2", "]", "\n", "w_o", "=", "img", ".", "shape", "[", "3", "]", "\n", "img_2x", "=", "upfirdn2d", "(", "img_pad", ",", "kernel_flip", ",", "up", "=", "2", ")", "\n", "\n", "grid", "=", "make_grid", "(", "\n", "img_2x", ".", "shape", ",", "\n", "-", "2", "*", "p_ux1", "/", "w_o", "-", "1", ",", "\n", "2", "*", "(", "w_p", "-", "p_ux1", ")", "/", "w_o", "-", "1", ",", "\n", "-", "2", "*", "p_uy1", "/", "h_o", "-", "1", ",", "\n", "2", "*", "(", "h_p", "-", "p_uy1", ")", "/", "h_o", "-", "1", ",", "\n", "device", "=", "img_2x", ".", "device", ",", "\n", ")", ".", "to", "(", "img_2x", ")", "\n", "grid", "=", "affine_grid", "(", "grid", ",", "torch", ".", "inverse", "(", "G", ")", "[", ":", ",", ":", "2", ",", ":", "]", ".", "to", "(", "img_2x", ")", ")", "\n", "grid", "=", "grid", "*", "torch", ".", "tensor", "(", "\n", "[", "w_o", "/", "w_p", ",", "h_o", "/", "h_p", "]", ",", "device", "=", "grid", ".", "device", "\n", ")", "+", "torch", ".", "tensor", "(", "\n", "[", "(", "w_o", "+", "2", "*", "p_ux1", ")", "/", "w_p", "-", "1", ",", "(", "h_o", "+", "2", "*", "p_uy1", ")", "/", "h_p", "-", "1", "]", ",", "device", "=", "grid", ".", "device", "\n", ")", "\n", "\n", "img_affine", "=", "F", ".", "grid_sample", "(", "\n", "img_2x", ",", "grid", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ",", "padding_mode", "=", "\"zeros\"", "\n", ")", "\n", "\n", "img_down", "=", "upfirdn2d", "(", "img_affine", ",", "kernel", ",", "down", "=", "2", ")", "\n", "\n", "end_y", "=", "-", "pad_y2", "-", "1", "\n", "if", "end_y", "==", "0", ":", "\n", "        ", "end_y", "=", "img_down", ".", "shape", "[", "2", "]", "\n", "\n", "", "end_x", "=", "-", "pad_x2", "-", "1", "\n", "if", "end_x", "==", "0", ":", "\n", "        ", "end_x", "=", "img_down", ".", "shape", "[", "3", "]", "\n", "\n", "", "img", "=", "img_down", "[", ":", ",", ":", ",", "pad_y1", ":", "end_y", ",", "pad_x1", ":", "end_x", "]", "\n", "\n", "return", "img", ",", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.apply_color": [[392, 401], ["img.permute.permute", "mat[].transpose().view", "mat[].view", "img.permute.permute", "mat[].transpose"], "function", ["None"], ["", "def", "apply_color", "(", "img", ",", "mat", ")", ":", "\n", "    ", "batch", "=", "img", ".", "shape", "[", "0", "]", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "mat_mul", "=", "mat", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "batch", ",", "1", ",", "3", ",", "3", ")", "\n", "mat_add", "=", "mat", "[", ":", ",", ":", "3", ",", "3", "]", ".", "view", "(", "batch", ",", "1", ",", "1", ",", "3", ")", "\n", "img", "=", "img", "@", "mat_mul", "+", "mat_add", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_apply_color": [[403, 410], ["ada.apply_color", "ada.sample_color", "sample_color.to"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.apply_color", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.sample_color"], ["", "def", "random_apply_color", "(", "img", ",", "p", ",", "C", "=", "None", ")", ":", "\n", "    ", "if", "C", "is", "None", ":", "\n", "        ", "C", "=", "sample_color", "(", "p", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "img", "=", "apply_color", "(", "img", ",", "C", ".", "to", "(", "img", ")", ")", "\n", "\n", "return", "img", ",", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.augment": [[412, 417], ["ada.random_apply_affine", "ada.random_apply_color"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_apply_affine", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.random_apply_color"], ["", "def", "augment", "(", "img", ",", "p", ",", "transform_matrix", "=", "(", "None", ",", "None", ")", ")", ":", "\n", "    ", "img", ",", "G", "=", "random_apply_affine", "(", "img", ",", "p", ",", "transform_matrix", "[", "0", "]", ")", "\n", "img", ",", "C", "=", "random_apply_color", "(", "img", ",", "p", ",", "transform_matrix", "[", "1", "]", ")", "\n", "\n", "return", "img", ",", "(", "G", ",", "C", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Cross_Entropy_loss.__init__": [[93, 101], ["super().__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "spectral_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Cross_Entropy_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "spectral_norm", ":", "\n", "            ", "self", ".", "layer", "=", "snlinear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer", "=", "linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "True", ")", "\n", "", "self", ".", "ce_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Cross_Entropy_loss.forward": [[102, 105], ["losses.Cross_Entropy_loss.layer", "losses.Cross_Entropy_loss.ce_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embeds", ",", "labels", ")", ":", "\n", "        ", "logits", "=", "self", ".", "layer", "(", "embeds", ")", "\n", "return", "self", ".", "ce_loss", "(", "logits", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss.__init__": [[108, 115], ["super().__init__", "losses.Conditional_Contrastive_loss._calculate_similarity_matrix", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss._calculate_similarity_matrix"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "batch_size", ",", "pos_collected_numerator", ")", ":", "\n", "        ", "super", "(", "Conditional_Contrastive_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "pos_collected_numerator", "=", "pos_collected_numerator", "\n", "self", ".", "calculate_similarity_matrix", "=", "self", ".", "_calculate_similarity_matrix", "(", ")", "\n", "self", ".", "cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss._calculate_similarity_matrix": [[117, 119], ["None"], "methods", ["None"], ["", "def", "_calculate_similarity_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cosine_simililarity_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss.remove_diag": [[121, 128], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.type().to.type().to.type().to", "M[].view", "numpy.ones", "numpy.eye", "mask.type().to.type().to.type"], "methods", ["None"], ["", "def", "remove_diag", "(", "self", ",", "M", ")", ":", "\n", "        ", "h", ",", "w", "=", "M", ".", "shape", "\n", "assert", "h", "==", "w", ",", "\"h and w should be same\"", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "-", "np", ".", "eye", "(", "h", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "(", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "M", "[", "mask", "]", ".", "view", "(", "h", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss._cosine_simililarity_matrix": [[130, 133], ["losses.Conditional_Contrastive_loss.cosine_similarity", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "_cosine_simililarity_matrix", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "self", ".", "cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss.forward": [[135, 152], ["losses.Conditional_Contrastive_loss.calculate_similarity_matrix", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "losses.Conditional_Contrastive_loss.remove_diag", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "inst2inst_positives.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "losses.Conditional_Contrastive_loss.remove_diag", "losses.Conditional_Contrastive_loss.cosine_similarity", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss.remove_diag", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Conditional_Contrastive_loss.remove_diag"], ["", "def", "forward", "(", "self", ",", "inst_embed", ",", "proxy", ",", "negative_mask", ",", "labels", ",", "temperature", ",", "margin", ")", ":", "\n", "        ", "similarity_matrix", "=", "self", ".", "calculate_similarity_matrix", "(", "inst_embed", ",", "inst_embed", ")", "\n", "instance_zone", "=", "torch", ".", "exp", "(", "(", "self", ".", "remove_diag", "(", "similarity_matrix", ")", "-", "margin", ")", "/", "temperature", ")", "\n", "\n", "inst2proxy_positive", "=", "torch", ".", "exp", "(", "(", "self", ".", "cosine_similarity", "(", "inst_embed", ",", "proxy", ")", "-", "margin", ")", "/", "temperature", ")", "\n", "if", "self", ".", "pos_collected_numerator", ":", "\n", "            ", "mask_4_remove_negatives", "=", "negative_mask", "[", "labels", "]", "\n", "mask_4_remove_negatives", "=", "self", ".", "remove_diag", "(", "mask_4_remove_negatives", ")", "\n", "inst2inst_positives", "=", "instance_zone", "*", "mask_4_remove_negatives", "\n", "\n", "numerator", "=", "inst2proxy_positive", "+", "inst2inst_positives", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "numerator", "=", "inst2proxy_positive", "\n", "\n", "", "denomerator", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "inst2proxy_positive", ",", "dim", "=", "1", ")", ",", "instance_zone", "]", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "criterion", "=", "-", "torch", ".", "log", "(", "temperature", "*", "(", "numerator", "/", "denomerator", ")", ")", ".", "mean", "(", ")", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Proxy_NCA_loss.__init__": [[155, 162], ["super().__init__", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "embedding_layer", ",", "num_classes", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "Proxy_NCA_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "embedding_layer", "=", "embedding_layer", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Proxy_NCA_loss._get_positive_proxy_mask": [[164, 170], ["labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "numpy.ones", "numpy.eye", "labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "labels.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "def", "_get_positive_proxy_mask", "(", "self", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rvs_one_hot_target", "=", "np", ".", "ones", "(", "[", "self", ".", "num_classes", ",", "self", ".", "num_classes", "]", ")", "-", "np", ".", "eye", "(", "self", ".", "num_classes", ")", "\n", "rvs_one_hot_target", "=", "rvs_one_hot_target", "[", "labels", "]", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "(", "rvs_one_hot_target", ")", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "return", "mask", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Proxy_NCA_loss.forward": [[172, 182], ["torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "losses.Proxy_NCA_loss._get_positive_proxy_mask", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "negative_proxies.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "losses.Proxy_NCA_loss.cosine_similarity", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "losses.Proxy_NCA_loss.embedding_layer", "range"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.Proxy_NCA_loss._get_positive_proxy_mask"], ["", "def", "forward", "(", "self", ",", "inst_embed", ",", "proxy", ",", "labels", ")", ":", "\n", "        ", "all_labels", "=", "torch", ".", "tensor", "(", "[", "c", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", "]", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "positive_proxy_mask", "=", "self", ".", "_get_positive_proxy_mask", "(", "labels", ")", "\n", "negative_proxies", "=", "torch", ".", "exp", "(", "torch", ".", "mm", "(", "inst_embed", ",", "self", ".", "embedding_layer", "(", "all_labels", ")", ".", "T", ")", ")", "*", "positive_proxy_mask", "\n", "\n", "inst2proxy_positive", "=", "torch", ".", "exp", "(", "self", ".", "cosine_similarity", "(", "inst_embed", ",", "proxy", ")", ")", "\n", "numerator", "=", "inst2proxy_positive", "\n", "denomerator", "=", "negative_proxies", ".", "sum", "(", "dim", "=", "1", ")", "\n", "criterion", "=", "-", "torch", ".", "log", "(", "numerator", "/", "denomerator", ")", ".", "mean", "(", ")", "\n", "return", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss.__init__": [[185, 193], ["super().__init__", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "losses.NT_Xent_loss._get_correlated_mask().type", "losses.NT_Xent_loss._get_similarity_function", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "losses.NT_Xent_loss._get_correlated_mask"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss._get_similarity_function", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss._get_correlated_mask"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "batch_size", ",", "use_cosine_similarity", "=", "True", ")", ":", "\n", "        ", "super", "(", "NT_Xent_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "mask_samples_from_same_repr", "=", "self", ".", "_get_correlated_mask", "(", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "self", ".", "similarity_function", "=", "self", ".", "_get_similarity_function", "(", "use_cosine_similarity", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss._get_similarity_function": [[195, 201], ["torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["None"], ["", "def", "_get_similarity_function", "(", "self", ",", "use_cosine_similarity", ")", ":", "\n", "        ", "if", "use_cosine_similarity", ":", "\n", "            ", "self", ".", "_cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "return", "self", ".", "_cosine_simililarity", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_dot_simililarity", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss._get_correlated_mask": [[203, 210], ["numpy.eye", "numpy.eye", "numpy.eye", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.to", "torch.from_numpy.to", "torch.from_numpy.to"], "methods", ["None"], ["", "", "def", "_get_correlated_mask", "(", "self", ")", ":", "\n", "        ", "diag", "=", "np", ".", "eye", "(", "2", "*", "self", ".", "batch_size", ")", "\n", "l1", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "-", "self", ".", "batch_size", ")", "\n", "l2", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "self", ".", "batch_size", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "(", "diag", "+", "l1", "+", "l2", ")", ")", "\n", "mask", "=", "(", "1", "-", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "return", "mask", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss._dot_simililarity": [[212, 219], ["torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "x.unsqueeze", "y.T.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_dot_simililarity", "(", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "torch", ".", "tensordot", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "T", ".", "unsqueeze", "(", "0", ")", ",", "dims", "=", "2", ")", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, C, 2N)", "\n", "# v shape: (N, 2N)", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss._cosine_simililarity": [[221, 227], ["losses.NT_Xent_loss._cosine_similarity", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "_cosine_simililarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, 2N, C)", "\n", "# v shape: (N, 2N)", "\n", "        ", "v", "=", "self", ".", "_cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.NT_Xent_loss.forward": [[229, 247], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "losses.NT_Xent_loss.similarity_function", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "losses.NT_Xent_loss.criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "zis", ",", "zjs", ",", "temperature", ")", ":", "\n", "        ", "representations", "=", "torch", ".", "cat", "(", "[", "zjs", ",", "zis", "]", ",", "dim", "=", "0", ")", "\n", "\n", "similarity_matrix", "=", "self", ".", "similarity_function", "(", "representations", ",", "representations", ")", "\n", "\n", "# filter out the scores from the positive samples", "\n", "l_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "self", ".", "batch_size", ")", "\n", "r_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "-", "self", ".", "batch_size", ")", "\n", "positives", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "r_pos", "]", ")", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "1", ")", "\n", "\n", "negatives", "=", "similarity_matrix", "[", "self", ".", "mask_samples_from_same_repr", "]", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "positives", ",", "negatives", ")", ",", "dim", "=", "1", ")", "\n", "logits", "/=", "temperature", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "2", "*", "self", ".", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "return", "loss", "/", "(", "2", "*", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_dcgan_dis": [[21, 26], ["dis_out_real.get_device", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.mean", "torch.mean", "torch.mean", "torch.LogSigmoid", "torch.LogSigmoid"], "function", ["None"], ["def", "loss_dcgan_dis", "(", "dis_out_real", ",", "dis_out_fake", ")", ":", "\n", "    ", "device", "=", "dis_out_real", ".", "get_device", "(", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "dis_out_real", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ")", "\n", "dis_loss", "=", "-", "torch", ".", "mean", "(", "nn", ".", "LogSigmoid", "(", ")", "(", "dis_out_real", ")", "+", "nn", ".", "LogSigmoid", "(", ")", "(", "ones", "-", "dis_out_fake", ")", ")", "\n", "return", "dis_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_dcgan_gen": [[28, 30], ["torch.mean", "torch.mean", "torch.mean", "torch.LogSigmoid"], "function", ["None"], ["", "def", "loss_dcgan_gen", "(", "gen_out_fake", ")", ":", "\n", "    ", "return", "-", "torch", ".", "mean", "(", "nn", ".", "LogSigmoid", "(", ")", "(", "gen_out_fake", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_lsgan_dis": [[32, 35], ["dis_loss.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "loss_lsgan_dis", "(", "dis_out_real", ",", "dis_out_fake", ")", ":", "\n", "    ", "dis_loss", "=", "0.5", "*", "(", "dis_out_real", "-", "torch", ".", "ones_like", "(", "dis_out_real", ")", ")", "**", "2", "+", "0.5", "*", "(", "dis_out_fake", ")", "**", "2", "\n", "return", "dis_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_lsgan_gen": [[37, 40], ["gen_loss.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "loss_lsgan_gen", "(", "dis_out_fake", ")", ":", "\n", "    ", "gen_loss", "=", "0.5", "*", "(", "dis_out_fake", "-", "torch", ".", "ones_like", "(", "dis_out_fake", ")", ")", "**", "2", "\n", "return", "gen_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_hinge_dis": [[42, 44], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu", "torch.relu"], "function", ["None"], ["", "def", "loss_hinge_dis", "(", "dis_out_real", ",", "dis_out_fake", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "dis_out_real", ")", ")", "+", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "+", "dis_out_fake", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_hinge_gen": [[46, 48], ["torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "loss_hinge_gen", "(", "gen_out_fake", ")", ":", "\n", "    ", "return", "-", "torch", ".", "mean", "(", "gen_out_fake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_wgan_dis": [[50, 52], ["torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "loss_wgan_dis", "(", "dis_out_real", ",", "dis_out_fake", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "dis_out_fake", "-", "dis_out_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.loss_wgan_gen": [[54, 56], ["torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "loss_wgan_gen", "(", "gen_out_fake", ")", ":", "\n", "    ", "return", "-", "torch", ".", "mean", "(", "gen_out_fake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise": [[58, 75], ["range", "losses.calc_derv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "delta_z.norm", "delta_z.norm"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv"], ["", "def", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "gen_model", ",", "dis_model", ",", "conditional_strategy", ",", "latent_op_step", ",", "latent_op_rate", ",", "\n", "latent_op_alpha", ",", "latent_op_beta", ",", "trans_cost", ",", "default_device", ")", ":", "\n", "    ", "batch_size", "=", "zs", ".", "shape", "[", "0", "]", "\n", "for", "step", "in", "range", "(", "latent_op_step", ")", ":", "\n", "        ", "drop_mask", "=", "(", "torch", ".", "FloatTensor", "(", "batch_size", ",", "1", ")", ".", "uniform_", "(", ")", ">", "1", "-", "latent_op_rate", ")", ".", "to", "(", "default_device", ")", "\n", "z_gradients", ",", "z_gradients_norm", "=", "calc_derv", "(", "zs", ",", "fake_labels", ",", "dis_model", ",", "conditional_strategy", ",", "default_device", ",", "gen_model", ")", "\n", "delta_z", "=", "latent_op_alpha", "*", "z_gradients", "/", "(", "latent_op_beta", "+", "z_gradients_norm", ")", "\n", "zs", "=", "torch", ".", "clamp", "(", "zs", "+", "drop_mask", "*", "delta_z", ",", "-", "1.0", ",", "1.0", ")", "\n", "\n", "if", "trans_cost", ":", "\n", "            ", "if", "step", "==", "0", ":", "\n", "                ", "transport_cost", "=", "(", "delta_z", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "transport_cost", "+=", "(", "delta_z", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "", "return", "zs", ",", "trans_cost", "\n", "", "else", ":", "\n", "            ", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.set_temperature": [[77, 90], ["None"], "function", ["None"], ["", "", "", "def", "set_temperature", "(", "conditional_strategy", ",", "tempering_type", ",", "start_temperature", ",", "end_temperature", ",", "step_count", ",", "tempering_step", ",", "total_step", ")", ":", "\n", "    ", "if", "conditional_strategy", "==", "'ContraGAN'", ":", "\n", "        ", "if", "tempering_type", "==", "'continuous'", ":", "\n", "            ", "t", "=", "start_temperature", "+", "step_count", "*", "(", "end_temperature", "-", "start_temperature", ")", "/", "total_step", "\n", "", "elif", "tempering_type", "==", "'discrete'", ":", "\n", "            ", "tempering_interval", "=", "total_step", "//", "(", "tempering_step", "+", "1", ")", "\n", "t", "=", "start_temperature", "+", "(", "step_count", "//", "tempering_interval", ")", "*", "(", "end_temperature", "-", "start_temperature", ")", "/", "tempering_step", "\n", "", "else", ":", "\n", "            ", "t", "=", "start_temperature", "\n", "", "", "else", ":", "\n", "        ", "t", "=", "'no'", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv4gp": [[249, 277], ["torch.rand", "torch.rand", "torch.rand", "alpha.to.expand().contiguous().view", "alpha.to.to", "real_data.to.to", "autograd.Variable.to", "torch.autograd.Variable", "gradients.view.view", "netD", "torch.autograd.grad", "gradients.view.size", "alpha.to.expand().contiguous", "netD", "netD", "torch.ones().to", "torch.ones().to", "torch.ones().to", "alpha.to.expand", "gradients.view.norm", "torch.ones", "torch.ones", "torch.ones", "real_data.to.nelement", "netD.size"], "function", ["None"], ["", "", "def", "calc_derv4gp", "(", "netD", ",", "conditional_strategy", ",", "real_data", ",", "fake_data", ",", "real_labels", ",", "device", ")", ":", "\n", "    ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "real_data", ".", "shape", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "batch_size", ",", "real_data", ".", "nelement", "(", ")", "//", "batch_size", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "c", ",", "h", ",", "w", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "\n", "real_data", "=", "real_data", ".", "to", "(", "device", ")", "\n", "\n", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "        ", "_", ",", "_", ",", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'no'", "]", ":", "\n", "            ", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "        ", "_", ",", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "real_labels", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "gradients", "=", "gradients", ".", "view", "(", "gradients", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv4dra": [[279, 307], ["torch.rand", "torch.rand", "torch.rand", "alpha.to.to", "real_data.to.to", "autograd.Variable.to", "torch.autograd.Variable", "gradients.view.view", "torch.rand().to", "torch.rand().to", "torch.rand().to", "netD", "torch.autograd.grad", "gradients.view.size", "real_data.to.std", "netD", "torch.rand", "torch.rand", "torch.rand", "netD", "torch.ones().to", "torch.ones().to", "torch.ones().to", "real_data.to.size", "gradients.view.norm", "torch.ones", "torch.ones", "torch.ones", "netD.size"], "function", ["None"], ["", "def", "calc_derv4dra", "(", "netD", ",", "conditional_strategy", ",", "real_data", ",", "real_labels", ",", "device", ")", ":", "\n", "    ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "real_data", ".", "shape", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "\n", "real_data", "=", "real_data", ".", "to", "(", "device", ")", "\n", "differences", "=", "0.5", "*", "real_data", ".", "std", "(", ")", "*", "torch", ".", "rand", "(", "real_data", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "interpolates", "=", "real_data", "+", "(", "alpha", "*", "differences", ")", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "        ", "_", ",", "_", ",", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'no'", "]", ":", "\n", "            ", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "        ", "_", ",", "disc_interpolates", "=", "netD", "(", "interpolates", ",", "real_labels", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "gradients", "=", "gradients", ".", "view", "(", "gradients", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv": [[309, 328], ["torch.autograd.Variable", "netG", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "netD", "torch.autograd.grad", "netD", "gradients.norm", "netD", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "netD.size"], "function", ["None"], ["", "def", "calc_derv", "(", "inputs", ",", "labels", ",", "netD", ",", "conditional_strategy", ",", "device", ",", "netG", "=", "None", ")", ":", "\n", "    ", "zs", "=", "autograd", ".", "Variable", "(", "inputs", ",", "requires_grad", "=", "True", ")", "\n", "fake_images", "=", "netG", "(", "zs", ",", "labels", ")", "\n", "\n", "if", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "        ", "_", ",", "_", ",", "dis_out_fake", "=", "netD", "(", "fake_images", ",", "labels", ")", "\n", "", "elif", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'no'", "]", ":", "\n", "        ", "dis_out_fake", "=", "netD", "(", "fake_images", ",", "labels", ")", "\n", "", "elif", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "        ", "_", ",", "dis_out_fake", "=", "netD", "(", "fake_images", ",", "labels", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "dis_out_fake", ",", "inputs", "=", "zs", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "dis_out_fake", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "gradients_norm", "=", "torch", ".", "unsqueeze", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", ",", "dim", "=", "1", ")", "\n", "return", "gradients", ",", "gradients_norm", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.FusedLeakyReLUFunctionBackward.forward": [[46, 66], ["ctx.save_for_backward", "grad_output.new_empty", "fused.fused_bias_act", "fused.fused_bias_act.sum().detach", "list", "range", "fused.fused_bias_act.sum"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "out", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "empty", "=", "grad_output", ".", "new_empty", "(", "0", ")", "\n", "\n", "grad_input", "=", "fused", ".", "fused_bias_act", "(", "\n", "grad_output", ",", "empty", ",", "out", ",", "3", ",", "1", ",", "negative_slope", ",", "scale", "\n", ")", "\n", "\n", "dim", "=", "[", "0", "]", "\n", "\n", "if", "grad_input", ".", "ndim", ">", "2", ":", "\n", "            ", "dim", "+=", "list", "(", "range", "(", "2", ",", "grad_input", ".", "ndim", ")", ")", "\n", "\n", "", "grad_bias", "=", "grad_input", ".", "sum", "(", "dim", ")", ".", "detach", "(", ")", "\n", "\n", "return", "grad_input", ",", "grad_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.FusedLeakyReLUFunctionBackward.backward": [[67, 75], ["fused.fused_bias_act"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ",", "gradgrad_bias", ")", ":", "\n", "        ", "out", ",", "=", "ctx", ".", "saved_tensors", "\n", "gradgrad_out", "=", "fused", ".", "fused_bias_act", "(", "\n", "gradgrad_input", ",", "gradgrad_bias", ",", "out", ",", "3", ",", "1", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.FusedLeakyReLUFunction.forward": [[78, 87], ["input.new_empty", "fused.fused_bias_act", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "empty", "=", "input", ".", "new_empty", "(", "0", ")", "\n", "out", "=", "fused", ".", "fused_bias_act", "(", "input", ",", "bias", ",", "empty", ",", "3", ",", "0", ",", "negative_slope", ",", "scale", ")", "\n", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.FusedLeakyReLUFunction.backward": [[88, 97], ["FusedLeakyReLUFunctionBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "out", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", ",", "grad_bias", "=", "FusedLeakyReLUFunctionBackward", ".", "apply", "(", "\n", "grad_output", ",", "out", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "return", "grad_input", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.FusedLeakyReLU.__init__": [[100, 106], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channel", ")", ")", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.FusedLeakyReLU.forward": [[107, 109], ["fused_act.fused_leaky_relu"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "fused_leaky_relu", "(", "input", ",", "self", ".", "bias", ",", "self", ".", "negative_slope", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.fused_act.fused_leaky_relu": [[111, 123], ["FusedLeakyReLUFunction.apply", "torch.nn.functional.leaky_relu", "bias.view"], "function", ["None"], ["", "", "def", "fused_leaky_relu", "(", "input", ",", "bias", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "    ", "if", "input", ".", "device", ".", "type", "==", "\"cpu\"", ":", "\n", "        ", "rest_dim", "=", "[", "1", "]", "*", "(", "input", ".", "ndim", "-", "bias", ".", "ndim", "-", "1", ")", "\n", "return", "(", "\n", "F", ".", "leaky_relu", "(", "\n", "input", "+", "bias", ".", "view", "(", "1", ",", "bias", ".", "shape", "[", "0", "]", ",", "*", "rest_dim", ")", ",", "negative_slope", "=", "0.2", "\n", ")", "\n", "*", "scale", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "FusedLeakyReLUFunction", ".", "apply", "(", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2dBackward.forward": [[45, 86], ["grad_output.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "grad_input.view.view.view", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "grad_output", ",", "kernel", ",", "grad_kernel", ",", "up", ",", "down", ",", "pad", ",", "g_pad", ",", "in_size", ",", "out_size", "\n", ")", ":", "\n", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", "=", "g_pad", "\n", "\n", "grad_output", "=", "grad_output", ".", "reshape", "(", "-", "1", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", ",", "1", ")", "\n", "\n", "grad_input", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "grad_output", ",", "\n", "grad_kernel", ",", "\n", "down_x", ",", "\n", "down_y", ",", "\n", "up_x", ",", "\n", "up_y", ",", "\n", "g_pad_x0", ",", "\n", "g_pad_x1", ",", "\n", "g_pad_y0", ",", "\n", "g_pad_y1", ",", "\n", ")", "\n", "grad_input", "=", "grad_input", ".", "view", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "in_size", "[", "2", "]", ",", "in_size", "[", "3", "]", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ")", "\n", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "ctx", ".", "up_x", "=", "up_x", "\n", "ctx", ".", "up_y", "=", "up_y", "\n", "ctx", ".", "down_x", "=", "down_x", "\n", "ctx", ".", "down_y", "=", "down_y", "\n", "ctx", ".", "pad_x0", "=", "pad_x0", "\n", "ctx", ".", "pad_x1", "=", "pad_x1", "\n", "ctx", ".", "pad_y0", "=", "pad_y0", "\n", "ctx", ".", "pad_y1", "=", "pad_y1", "\n", "ctx", ".", "in_size", "=", "in_size", "\n", "ctx", ".", "out_size", "=", "out_size", "\n", "\n", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2dBackward.backward": [[87, 111], ["gradgrad_input.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "gradgrad_out.view.view.view"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ")", ":", "\n", "        ", "kernel", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "gradgrad_input", "=", "gradgrad_input", ".", "reshape", "(", "-", "1", ",", "ctx", ".", "in_size", "[", "2", "]", ",", "ctx", ".", "in_size", "[", "3", "]", ",", "1", ")", "\n", "\n", "gradgrad_out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "gradgrad_input", ",", "\n", "kernel", ",", "\n", "ctx", ".", "up_x", ",", "\n", "ctx", ".", "up_y", ",", "\n", "ctx", ".", "down_x", ",", "\n", "ctx", ".", "down_y", ",", "\n", "ctx", ".", "pad_x0", ",", "\n", "ctx", ".", "pad_x1", ",", "\n", "ctx", ".", "pad_y0", ",", "\n", "ctx", ".", "pad_y1", ",", "\n", ")", "\n", "# gradgrad_out = gradgrad_out.view(ctx.in_size[0], ctx.out_size[0], ctx.out_size[1], ctx.in_size[3])", "\n", "gradgrad_out", "=", "gradgrad_out", ".", "view", "(", "\n", "ctx", ".", "in_size", "[", "0", "]", ",", "ctx", ".", "in_size", "[", "1", "]", ",", "ctx", ".", "out_size", "[", "0", "]", ",", "ctx", ".", "out_size", "[", "1", "]", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.forward": [[114, 150], ["input.reshape.reshape.reshape", "ctx.save_for_backward", "upfirdn2d_op.upfirdn2d", "out.view.view.view", "torch.flip"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "up", ",", "down", ",", "pad", ")", ":", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "batch", ",", "channel", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "ctx", ".", "in_size", "=", "input", ".", "shape", "\n", "\n", "input", "=", "input", ".", "reshape", "(", "-", "1", ",", "in_h", ",", "in_w", ",", "1", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ",", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ")", "\n", "\n", "out_h", "=", "(", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", ")", "//", "down_y", "+", "1", "\n", "out_w", "=", "(", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", ")", "//", "down_x", "+", "1", "\n", "ctx", ".", "out_size", "=", "(", "out_h", ",", "out_w", ")", "\n", "\n", "ctx", ".", "up", "=", "(", "up_x", ",", "up_y", ")", "\n", "ctx", ".", "down", "=", "(", "down_x", ",", "down_y", ")", "\n", "ctx", ".", "pad", "=", "(", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", ")", "\n", "\n", "g_pad_x0", "=", "kernel_w", "-", "pad_x0", "-", "1", "\n", "g_pad_y0", "=", "kernel_h", "-", "pad_y0", "-", "1", "\n", "g_pad_x1", "=", "in_w", "*", "up_x", "-", "out_w", "*", "down_x", "+", "pad_x0", "-", "up_x", "+", "1", "\n", "g_pad_y1", "=", "in_h", "*", "up_y", "-", "out_h", "*", "down_y", "+", "pad_y0", "-", "up_y", "+", "1", "\n", "\n", "ctx", ".", "g_pad", "=", "(", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", ")", "\n", "\n", "out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", "\n", "# out = out.view(major, out_h, out_w, minor)", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "channel", ",", "out_h", ",", "out_w", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward": [[151, 168], ["UpFirDn2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "kernel", ",", "grad_kernel", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "UpFirDn2dBackward", ".", "apply", "(", "\n", "grad_output", ",", "\n", "kernel", ",", "\n", "grad_kernel", ",", "\n", "ctx", ".", "up", ",", "\n", "ctx", ".", "down", ",", "\n", "ctx", ".", "pad", ",", "\n", "ctx", ".", "g_pad", ",", "\n", "ctx", ".", "in_size", ",", "\n", "ctx", ".", "out_size", ",", "\n", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d": [[170, 182], ["upfirdn2d.upfirdn2d_native", "UpFirDn2d.apply"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d_native"], ["", "", "def", "upfirdn2d", "(", "input", ",", "kernel", ",", "up", "=", "1", ",", "down", "=", "1", ",", "pad", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "if", "input", ".", "device", ".", "type", "==", "\"cpu\"", ":", "\n", "        ", "out", "=", "upfirdn2d_native", "(", "\n", "input", ",", "kernel", ",", "up", ",", "up", ",", "down", ",", "down", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "out", "=", "UpFirDn2d", ".", "apply", "(", "\n", "input", ",", "kernel", ",", "(", "up", ",", "up", ")", ",", "(", "down", ",", "down", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.upfirdn2d_native": [[184, 226], ["input.reshape.reshape", "input.reshape.view", "torch.nn.functional.pad", "out.permute.view", "torch.nn.functional.pad", "out.permute.permute", "out.permute.reshape", "torch.flip().view", "torch.nn.functional.conv2d", "out.permute.reshape", "out.permute.permute", "out.permute.view", "max", "max", "max", "max", "torch.flip", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], ["", "def", "upfirdn2d_native", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", ":", "\n", "    ", "_", ",", "channel", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "input", "=", "input", ".", "reshape", "(", "-", "1", ",", "in_h", ",", "in_w", ",", "1", ")", "\n", "\n", "_", ",", "in_h", ",", "in_w", ",", "minor", "=", "input", ".", "shape", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "\n", "out", "=", "input", ".", "view", "(", "-", "1", ",", "in_h", ",", "1", ",", "in_w", ",", "1", ",", "minor", ")", "\n", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "0", ",", "0", ",", "0", ",", "up_x", "-", "1", ",", "0", ",", "0", ",", "0", ",", "up_y", "-", "1", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "in_h", "*", "up_y", ",", "in_w", "*", "up_x", ",", "minor", ")", "\n", "\n", "out", "=", "F", ".", "pad", "(", "\n", "out", ",", "[", "0", ",", "0", ",", "max", "(", "pad_x0", ",", "0", ")", ",", "max", "(", "pad_x1", ",", "0", ")", ",", "max", "(", "pad_y0", ",", "0", ")", ",", "max", "(", "pad_y1", ",", "0", ")", "]", "\n", ")", "\n", "out", "=", "out", "[", "\n", ":", ",", "\n", "max", "(", "-", "pad_y0", ",", "0", ")", ":", "out", ".", "shape", "[", "1", "]", "-", "max", "(", "-", "pad_y1", ",", "0", ")", ",", "\n", "max", "(", "-", "pad_x0", ",", "0", ")", ":", "out", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pad_x1", ",", "0", ")", ",", "\n", ":", ",", "\n", "]", "\n", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "[", "-", "1", ",", "1", ",", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", ",", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "]", "\n", ")", "\n", "w", "=", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "1", ",", "kernel_h", ",", "kernel_w", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "out", ",", "w", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "-", "1", ",", "\n", "minor", ",", "\n", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", "+", "1", ",", "\n", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", "+", "1", ",", "\n", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "out", "=", "out", "[", ":", ",", ":", ":", "down_y", ",", ":", ":", "down_x", ",", ":", "]", "\n", "\n", "out_h", "=", "(", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", ")", "//", "down_y", "+", "1", "\n", "out_w", "=", "(", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", ")", "//", "down_x", "+", "1", "\n", "\n", "return", "out", ".", "view", "(", "-", "1", ",", "channel", ",", "out_h", ",", "out_w", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.__init__": [[8, 19], ["visdom.Visdom"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "None", ",", "vis", "=", "None", ",", "enval", "=", "'hproto'", ",", "port", "=", "8097", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "enval", ",", "port", "=", "port", ")", "\n", "self", ".", "win", "=", "None", "\n", "self", ".", "win2", "=", "None", "\n", "self", ".", "epoch_list", "=", "[", "]", "\n", "self", ".", "train_loss_list", "=", "[", "]", "\n", "self", ".", "val_loss_list", "=", "[", "]", "\n", "self", ".", "epoch_list2", "=", "[", "]", "\n", "self", ".", "train_acc_list", "=", "[", "]", "\n", "self", ".", "val_acc_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.imshow": [[21, 37], ["img.numpy", "numpy.transpose", "numpy.swapaxes", "numpy.swapaxes", "tuple", "numpy.zeros", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "visdom_utils.VisFunc.vis.image", "tuple", "dict", "numpy.array"], "methods", ["None"], ["", "def", "imshow", "(", "self", ",", "img", ",", "title", "=", "' '", ",", "caption", "=", "' '", ",", "factor", "=", "1", ")", ":", "\n", "\n", "        ", "img", "=", "img", "/", "2", "+", "0.5", "# Unnormalize", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "obj", "=", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "obj", "=", "np", ".", "swapaxes", "(", "obj", ",", "0", ",", "2", ")", "\n", "obj", "=", "np", ".", "swapaxes", "(", "obj", ",", "1", ",", "2", ")", "\n", "\n", "imgsize", "=", "tuple", "(", "(", "np", ".", "array", "(", "obj", ".", "shape", "[", "1", ":", "]", ")", "*", "factor", ")", ".", "astype", "(", "int", ")", ")", "\n", "rgbArray", "=", "np", ".", "zeros", "(", "tuple", "(", "[", "3", "]", ")", "+", "imgsize", ",", "'float32'", ")", "\n", "rgbArray", "[", "0", ",", "...", "]", "=", "imresize", "(", "obj", "[", "0", ",", ":", ",", ":", "]", ",", "imgsize", ",", "'cubic'", ")", "\n", "rgbArray", "[", "1", ",", "...", "]", "=", "imresize", "(", "obj", "[", "1", ",", ":", ",", ":", "]", ",", "imgsize", ",", "'cubic'", ")", "\n", "rgbArray", "[", "2", ",", "...", "]", "=", "imresize", "(", "obj", "[", "2", ",", ":", ",", ":", "]", ",", "imgsize", ",", "'cubic'", ")", "\n", "\n", "self", ".", "vis", ".", "image", "(", "rgbArray", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", ",", "caption", "=", "caption", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.imshow_multi": [[40, 43], ["visdom_utils.VisFunc.imshow", "torchvision.utils.make_grid"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.imshow", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid"], ["", "def", "imshow_multi", "(", "self", ",", "imgs", ",", "nrow", "=", "10", ",", "title", "=", "' '", ",", "caption", "=", "' '", ",", "factor", "=", "1", ")", ":", "\n", "#self.imshow( make_grid(imgs,nrow,padding=padding), title, caption, factor)", "\n", "        ", "self", ".", "imshow", "(", "make_grid", "(", "imgs", ",", "nrow", ")", ",", "title", ",", "caption", ",", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.imshow_one_batch": [[45, 56], ["iter", "iter.next", "visdom_utils.VisFunc.imshow", "torchvision.utils.make_grid", "print", "print", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.imshow", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid"], ["", "def", "imshow_one_batch", "(", "self", ",", "loader", ",", "classes", "=", "None", ",", "factor", "=", "1", ")", ":", "\n", "        ", "dataiter", "=", "iter", "(", "loader", ")", "\n", "images", ",", "labels", "=", "dataiter", ".", "next", "(", ")", "\n", "self", ".", "imshow", "(", "make_grid", "(", "images", ",", "padding", ")", ")", "\n", "\n", "if", "classes", ":", "\n", "            ", "print", "(", "' '", ".", "join", "(", "'%5s'", "%", "classes", "[", "labels", "[", "j", "]", "]", "\n", "for", "j", "in", "range", "(", "loader", ".", "batch_size", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "' '", ".", "join", "(", "'%5s'", "%", "labels", "[", "j", "]", "\n", "for", "j", "in", "range", "(", "loader", ".", "batch_size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.plot": [[58, 91], ["visdom_utils.VisFunc.epoch_list.append", "visdom_utils.VisFunc.train_loss_list.append", "visdom_utils.VisFunc.val_loss_list.append", "visdom_utils.VisFunc.vis.line", "visdom_utils.VisFunc.vis.updateTrace", "visdom_utils.VisFunc.vis.updateTrace", "numpy.array", "numpy.array", "dict", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "plot", "(", "self", ",", "epoch", ",", "train_loss", ",", "val_loss", ",", "Des", ")", ":", "\n", "        ", "''' plot learning curve interactively with visdom '''", "\n", "self", ".", "epoch_list", ".", "append", "(", "epoch", ")", "\n", "self", ".", "train_loss_list", ".", "append", "(", "train_loss", ")", "\n", "self", ".", "val_loss_list", ".", "append", "(", "val_loss", ")", "\n", "\n", "if", "not", "self", ".", "win", ":", "\n", "# send line plot", "\n", "# embed()", "\n", "            ", "self", ".", "win", "=", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "[", "[", "self", ".", "train_loss_list", "[", "-", "1", "]", ",", "self", ".", "val_loss_list", "[", "-", "1", "]", "]", "]", ")", ",", "\n", "opts", "=", "dict", "(", "\n", "title", "=", "'Learning Curve ('", "+", "Des", "+", "')'", ",", "\n", "xlabel", "=", "'Epoch'", ",", "\n", "ylabel", "=", "'Loss'", ",", "\n", "legend", "=", "[", "'train_loss'", ",", "'val_loss'", "]", ",", "\n", "#caption=Des", "\n", ")", ")", "\n", "# send text memo (configuration)", "\n", "#  self.vis.text(str(Des))", "\n", "", "else", ":", "\n", "            ", "self", ".", "vis", ".", "updateTrace", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list", "[", "-", "2", ":", "]", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "train_loss_list", "[", "-", "2", ":", "]", ")", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "name", "=", "'train_loss'", ",", "\n", ")", "\n", "self", ".", "vis", ".", "updateTrace", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list", "[", "-", "2", ":", "]", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "val_loss_list", "[", "-", "2", ":", "]", ")", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "name", "=", "'val_loss'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.acc_plot": [[94, 126], ["visdom_utils.VisFunc.epoch_list2.append", "visdom_utils.VisFunc.train_acc_list.append", "visdom_utils.VisFunc.val_acc_list.append", "visdom_utils.VisFunc.vis.line", "visdom_utils.VisFunc.vis.updateTrace", "visdom_utils.VisFunc.vis.updateTrace", "numpy.array", "numpy.array", "dict", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "acc_plot", "(", "self", ",", "epoch", ",", "train_acc", ",", "val_acc", ",", "Des", ")", ":", "\n", "        ", "''' plot learning curve interactively with visdom '''", "\n", "self", ".", "epoch_list2", ".", "append", "(", "epoch", ")", "\n", "self", ".", "train_acc_list", ".", "append", "(", "train_acc", ")", "\n", "self", ".", "val_acc_list", ".", "append", "(", "val_acc", ")", "\n", "\n", "if", "not", "self", ".", "win2", ":", "\n", "# send line plot", "\n", "# embed()", "\n", "            ", "self", ".", "win2", "=", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list2", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "[", "[", "self", ".", "train_acc_list", "[", "-", "1", "]", ",", "self", ".", "val_acc_list", "[", "-", "1", "]", "]", "]", ")", ",", "\n", "opts", "=", "dict", "(", "\n", "title", "=", "'Accuracy Curve ('", "+", "Des", "+", "')'", ",", "\n", "xlabel", "=", "'Epoch'", ",", "\n", "ylabel", "=", "'Accuracy'", ",", "\n", "legend", "=", "[", "'train_accuracy'", ",", "'val_accuracy'", "]", "\n", ")", ")", "\n", "# send text memo (configuration)", "\n", "# self.vis.text(str(self.config))", "\n", "", "else", ":", "\n", "            ", "self", ".", "vis", ".", "updateTrace", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list2", "[", "-", "2", ":", "]", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "train_acc_list", "[", "-", "2", ":", "]", ")", ",", "\n", "win", "=", "self", ".", "win2", ",", "\n", "name", "=", "'train_accuracy'", ",", "\n", ")", "\n", "self", ".", "vis", ".", "updateTrace", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list2", "[", "-", "2", ":", "]", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "val_acc_list", "[", "-", "2", ":", "]", ")", ",", "\n", "win", "=", "self", ".", "win2", ",", "\n", "name", "=", "'val_accuracy'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.plot2": [[129, 163], ["visdom_utils.VisFunc.epoch_list.append", "visdom_utils.VisFunc.train_loss_list.append", "visdom_utils.VisFunc.val_loss_list.append", "visdom_utils.VisFunc.vis.updateTrace", "visdom_utils.VisFunc.vis.updateTrace", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "plot2", "(", "self", ",", "epoch", ",", "train_loss", ",", "val_loss", ",", "Des", ",", "win", ")", ":", "\n", "        ", "''' plot learning curve interactively with visdom '''", "\n", "self", ".", "epoch_list", ".", "append", "(", "epoch", ")", "\n", "self", ".", "train_loss_list", ".", "append", "(", "train_loss", ")", "\n", "self", ".", "val_loss_list", ".", "append", "(", "val_loss", ")", "\n", "\n", "if", "not", "self", ".", "win", ":", "\n", "            ", "self", ".", "win", "=", "win", "\n", "# send line plot", "\n", "# embed()", "\n", "#self.win = self.vis.line(", "\n", "#    X=np.array(self.epoch_list),", "\n", "#    Y=np.array([[self.train_loss_list[-1], self.val_loss_list[-1]]]),", "\n", "#    opts=dict(", "\n", "#        title='Learning Curve (' + Des +')',", "\n", "#        xlabel='Epoch',", "\n", "#        ylabel='Loss',", "\n", "#        legend=['train_loss', 'val_loss'],", "\n", "#        #caption=Des", "\n", "#    ))", "\n", "## send text memo (configuration)", "\n", "#  self.vis.text(str(Des))", "\n", "", "else", ":", "\n", "            ", "self", ".", "vis", ".", "updateTrace", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list", "[", "-", "2", ":", "]", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "train_loss_list", "[", "-", "2", ":", "]", ")", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "name", "=", "'train_loss2'", ",", "\n", ")", "\n", "self", ".", "vis", ".", "updateTrace", "(", "\n", "X", "=", "np", ".", "array", "(", "self", ".", "epoch_list", "[", "-", "2", ":", "]", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "val_loss_list", "[", "-", "2", ":", "]", ")", ",", "\n", "win", "=", "self", ".", "win", ",", "\n", "name", "=", "'val_lossi2'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.One_Hot.__init__": [[10, 14], ["torch.nn.Module.__init__", "torch.sparse.torch.eye"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["import", "numpy", "as", "np", "\n", "import", "foolbox", "as", "fb", "\n", "\n", "\n", "def", "make_logger", "(", "run_name", ",", "log_output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.One_Hot.forward": [[14, 17], ["X_in.long.long.long", "torch.autograd.Variable", "utils.One_Hot.ones.index_select"], "methods", ["None"], ["def", "make_logger", "(", "run_name", ",", "log_output", ")", ":", "\n", "    ", "if", "log_output", "is", "not", "None", ":", "\n", "        ", "run_name", "=", "log_output", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "# get and set root logger", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.One_Hot.__repr__": [[17, 19], ["None"], "methods", ["None"], ["", "logger", "=", "logging", ".", "getLogger", "(", ")", "# get and set root logger", "\n", "logger", ".", "propagate", "=", "False", "\n", "log_filepath", "=", "log_output", "if", "log_output", "is", "not", "None", "else", "os", ".", "path", ".", "join", "(", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda": [[21, 24], ["tensor.cuda"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], ["\n", "log_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "log_filepath", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.str2bool": [[25, 34], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["\n", "", "if", "not", "logger", ".", "handlers", ":", "# execute only if logger doesn't already exist", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_filepath", ",", "'a'", ",", "'utf-8'", ")", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "os", ".", "sys", ".", "stdout", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'[%(levelname)s] %(asctime)s > %(message)s'", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.print_network": [[36, 42], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "return", "logger", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.rm_dir": [[44, 64], ["pathlib.Path().resolve", "list", "print", "Path().resolve.iterdir", "Path().resolve.is_dir", "Path().resolve.rmdir", "Path().resolve.rmdir", "pathlib.Path", "Path().resolve.is_file", "Path().resolve.is_dir", "len", "print", "path.is_file", "print", "path.unlink", "utils.rm_dir", "print"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.rm_dir"], ["class_num", "=", "10", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "\"Note: This generate is for {} classes\"", ".", "format", "(", "class_num", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "img", "=", "DiffAugment", "(", "img", ",", "policy", "=", "policy", ")", "\n", "\n", "latent_i", "=", "encoder", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "\n", "y", "=", "label", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "z", "=", "vae", "(", "latent_i", ")", "\n", "img_pos", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y", ")", "\n", "img_pos", "=", "DiffAugment", "(", "img_pos", ",", "policy", "=", "policy", ")", "\n", "\n", "if", "next", ":", "\n", "            ", "Int_Modi", "=", "1", "\n", "", "else", ":", "\n", "            ", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "int", "(", "class_num", "-", "1", ")", ")", "\n", "", "wrong_y", "=", "(", "(", "y", "+", "Int_Modi", ")", "%", "int", "(", "class_num", ")", ")", ".", "to", "(", "device", ")", "\n", "img_neg", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "wrong_y", ")", "\n", "img_neg", "=", "DiffAugment", "(", "img_neg", ",", "policy", "=", "policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where": [[65, 72], ["cond.float.float"], "function", ["None"], ["", "return", "img", ",", "img_pos", ",", "img_neg", ",", "y", ",", "wrong_y", "\n", "\n", "\n", "", "def", "gen_with_pn", "(", "img", ",", "pos_label", ",", "neg_label", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "latent_i", "=", "encoder", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "_", ",", "_", ",", "z", "=", "vae", "(", "latent_i", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.DiscOptBlock.__init__": [[74, 102], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.DiscOptBlock.forward": [[104, 120], ["contraNetattack.DiscOptBlock.conv2d1", "contraNetattack.DiscOptBlock.activation", "contraNetattack.DiscOptBlock.conv2d2", "contraNetattack.DiscOptBlock.average_pooling", "contraNetattack.DiscOptBlock.average_pooling", "contraNetattack.DiscOptBlock.conv2d0", "contraNetattack.DiscOptBlock.bn1", "contraNetattack.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.DiscBlock.__init__": [[123, 160], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snconv2d", "conv2d", "batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.DiscBlock.forward": [[162, 185], ["contraNetattack.DiscBlock.activation", "contraNetattack.DiscBlock.conv2d1", "contraNetattack.DiscBlock.activation", "contraNetattack.DiscBlock.conv2d2", "contraNetattack.DiscBlock.bn1", "contraNetattack.DiscBlock.bn2", "contraNetattack.DiscBlock.average_pooling", "contraNetattack.DiscBlock.conv2d0", "contraNetattack.DiscBlock.bn0", "contraNetattack.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.Discriminator.__init__": [[188, 278], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "contraNetattack.DiscOptBlock", "contraNetattack.DiscBlock", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.Discriminator.forward": [[280, 316], ["enumerate", "contraNetattack.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "contraNetattack.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "contraNetattack.Discriminator.embedding", "contraNetattack.Discriminator.linear2", "contraNetattack.Discriminator.linear1", "contraNetattack.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "contraNetattack.Discriminator.activation", "contraNetattack.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "contraNetattack.Discriminator.linear4", "contraNetattack.Discriminator.embedding", "contraNetattack.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "# with torch.cuda.amp.autocast() if self.mixed_precision is True and evaluation is False else dummy_context_mgr() as mp:", "\n", "\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "", "", "", "mlploss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.__init__": [[339, 385], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "lib.ssim", "lib.ssim"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim"], ["\t", "def", "__init__", "(", "self", ",", "classifier", ",", "encoder", ",", "vae", ",", "gen", ",", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "discriminator", ",", "classifier_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "detector_loss", "=", "None", ",", "steps", "=", "100", ",", "alpha", "=", "1", "/", "255", ",", "eps", "=", "8", "/", "255", ",", "use_projection", "=", "True", ",", "projection_norm", "=", "'linf'", ",", "target", "=", "None", ",", "lmbd", "=", "0", ",", "k", "=", "None", ",", "project_detector", "=", "True", ",", "project_classifier", "=", "True", ",", "img_min", "=", "0", ",", "img_max", "=", "1", ")", ":", "\n", "\t\t", "'''\n\t\t:param classifier: model used for classification\n\t\t:param detector: model used for detection\n\t\t:param classifier_loss: loss used for classification model\n\t\t:param detector_loss: loss used for detection model. Need to have __call__ method which outputs adversarial scores ranging from 0 to 1 (0 if not afversarial and 1 if adversarial)\n\t\t:param steps: number of steps for which to perform gradient descent/ascent\n\t\t:param alpha: step size\n\t\t:param eps: constraint on noise that can be applied to images\n\t\t:param use_projection: True if gradients should be projected onto each other\n\t\t:param projection_norm: 'linf' or 'l2' for regularization of gradients\n\t\t:param target: target label to attack. if None, an untargeted attack is run\n\t\t:param lmbd: hyperparameter for 'f + lmbd * g' when 'use_projection' is False \n\t\t:param k: if not None, take gradients of g onto f every kth step\n\t\t:param project_detector: if True, take gradients of g onto f\n\t\t:param project_classifier: if True, take gradients of f onto g\n\t\t'''", "\n", "self", ".", "classifier", "=", "classifier", "\n", "# self.detector = detector", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "classifier_loss", "=", "classifier_loss", "\n", "self", ".", "detector_loss", "=", "detector_loss", "\n", "self", ".", "use_projection", "=", "use_projection", "\n", "self", ".", "projection_norm", "=", "projection_norm", "\n", "self", ".", "project_classifier", "=", "project_classifier", "\n", "self", ".", "project_detector", "=", "project_detector", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "lmbd", "=", "lmbd", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "img_min", "=", "img_min", "\n", "self", ".", "img_max", "=", "img_max", "\n", "#contraNet", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "gen", "=", "gen", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "genmodel", "=", "genmodel", "\n", "self", ".", "orimodel", "=", "orimodel", "\n", "self", ".", "mlpModel", "=", "mlpModel", "\n", "self", ".", "target_", "=", "True", "\n", "# metrics to keep track of", "\n", "self", ".", "all_classifier_losses", "=", "[", "]", "\n", "self", ".", "all_detector_losses", "=", "[", "]", "\n", "ssim_size_average", "=", "lambda", "x", ",", "y", ":", "ssim_package", ".", "ssim", "(", "x", ",", "y", ",", "size_average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.attack_batch": [[386, 565], ["inputs.clone().detach", "inputs.clone().detach().cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inputs.detach().cpu().numpy", "tqdm.auto.tqdm.auto.tqdm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.zeros", "numpy.zeros", "numpy.zeros", "contraNetattack.PGD.target.to", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "contraNetattack.PGD.classifier", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "contraNetattack.PGD.backward", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "contraNetattack.PGD.encoder", "contraNetattack.PGD.vae", "contraNetattack.PGD.gen", "contraNetattack.PGD.orimodel", "contraNetattack.PGD.genmodel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "contraNetattack.PGD.mlpModel", "contraNetattack.PGD.discriminator", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.abs().mean().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "torch.clamp().detach.grad.cpu().detach", "contraNetattack.PGD.all_classifier_losses.append", "contraNetattack.PGD.all_detector_losses.append", "tqdm.auto.tqdm.auto.tqdm.set_description", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "torch.clamp().detach.cpu().detach().numpy", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "inputs.clone", "inputs.clone().detach().cpu", "len", "inputs.detach().cpu", "contraNetattack.normalize", "contraNetattack.PGD.classifier_loss", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "contraNetattack.PGD.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "torch.mean.detach().data.item", "len", "contraNetattack.PGD.cpu().detach().numpy", "numpy.any", "numpy.any", "numpy.any", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.detach", "torch.clamp().detach.to", "torch.clamp().detach.to", "torch.clamp().detach.to", "torch.clamp().detach.to", "torch.clamp().detach.to", "torch.clamp().detach.to", "torch.clamp().detach.to", "torch.clamp().detach.to", "torch.clamp().detach.to", "contraNetattack.PGD.classifier_loss", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "torch.clamp().detach.grad.cpu", "contraNetattack.PGD.cpu().detach().numpy().argmax", "contraNetattack.PGD.cpu().numpy", "contraNetattack.PGD.cpu().detach().numpy().argmax", "targets.numpy", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.clamp().detach.cpu().detach", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.isnan", "numpy.isnan", "numpy.isnan", "print", "print", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "grad_norms.view", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "Exception", "torch.sign.cuda", "torch.sign.cuda", "torch.sign.cuda", "torch.sign.cuda", "torch.sign.cuda", "torch.sign.cuda", "torch.sign.cuda", "torch.sign.cuda", "torch.sign.cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "inputs.clone().detach", "inputs.detach", "ssim_size_average", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "contraNetattack.PGD.cpu().detach", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "numpy.mean", "numpy.mean", "numpy.mean", "torch.sign.view", "torch.sign.view", "torch.sign.view", "torch.sign.view", "torch.sign.view", "torch.sign.view", "torch.sign.view", "torch.sign.view", "torch.sign.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "contraNetattack.PGD.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "contraNetattack.PGD.cpu().detach().numpy", "contraNetattack.PGD.cpu", "contraNetattack.PGD.cpu().detach().numpy", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.clamp().detach.cpu", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "numpy.isnan", "numpy.isnan", "numpy.isnan", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "inputs.clone", "len", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp().detach.grad.cpu().detach.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp().detach.grad.cpu().detach.view", "contraNetattack.PGD.cpu", "numpy.arange", "numpy.arange", "numpy.arange", "contraNetattack.PGD.cpu().detach().numpy.argmax", "contraNetattack.PGD.cpu().numpy", "numpy.arange", "numpy.arange", "numpy.arange", "contraNetattack.PGD.cpu().detach().numpy.argmax", "targets.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "torch.sign.numpy", "contraNetattack.PGD.cpu().detach", "contraNetattack.PGD.cpu().detach", "torch.clamp().detach.grad.cpu().detach.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp().detach.grad.cpu().detach.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "contraNetattack.PGD.cpu", "contraNetattack.PGD.cpu", "contraNetattack.PGD.cpu", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view", "torch.clamp().detach.grad.cpu().detach.view"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], ["", "def", "attack_batch", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "\t\t", "adv_images", "=", "inputs", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "original_inputs_numpy", "=", "inputs", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "#  alarm_targets = torch.tensor(np.zeros(len(inputs)).reshape(-1, 1))", "\n", "\n", "# ideally no adversarial images should be detected", "\n", "alarm_targets", "=", "torch", ".", "tensor", "(", "np", ".", "zeros", "(", "len", "(", "inputs", ")", ")", ")", "\n", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "\n", "# targeted attack", "\n", "if", "self", ".", "target_", ":", "\n", "\t\t\t", "targeted_targets", "=", "self", ".", "target", ".", "to", "(", "device", ")", "\n", "\n", "", "advx_final", "=", "inputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss_final", "=", "np", ".", "zeros", "(", "inputs", ".", "shape", "[", "0", "]", ")", "+", "np", ".", "inf", "\n", "\n", "progress", "=", "tqdm", "(", "range", "(", "self", ".", "steps", ")", ")", "\n", "for", "i", "in", "progress", ":", "\n", "\t\t\t", "adv_images", ".", "requires_grad", "=", "True", "\n", "\n", "# calculating gradient of classifier w.r.t. images", "\n", "outputs", "=", "self", ".", "classifier", "(", "normalize", "(", "adv_images", ".", "to", "(", "device", ")", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "\t\t\t\t", "loss_classifier", "=", "1", "*", "self", ".", "classifier_loss", "(", "outputs", ",", "targeted_targets", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "loss_classifier", "=", "self", ".", "classifier_loss", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "loss_classifier", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "grad_classifier", "=", "adv_images", ".", "grad", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# calculating gradient of detector w.r.t. images", "\n", "adv_images", ".", "grad", "=", "None", "\n", "# adv_scores = self.detector(adv_images.to(device))", "\n", "\n", "\n", "adv_scale", "=", "adv_images", "*", "2", "-", "1", "# generator wants [-1, 1]", "\n", "\n", "latent_i", "=", "self", ".", "encoder", "(", "adv_scale", ")", "\n", "z_mean", ",", "z_log_var", ",", "z", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "# y_to_contranet = torch.argmax(y_onehot, dim=1)", "\n", "fake", "=", "self", ".", "gen", "(", "z", ",", "targeted_targets", ")", "\n", "\n", "feat_emb", ",", "_", "=", "self", ".", "orimodel", "(", "adv_scale", ")", "#needs [-1,1]", "\n", "feat_pos", ",", "_", "=", "self", ".", "genmodel", "(", "fake", ")", "\n", "pos_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_pos", "]", ",", "dim", "=", "1", ")", "\n", "y_mlp_pos", "=", "torch", ".", "ones", "(", "len", "(", "adv_scale", ")", ")", ".", "long", "(", ")", ".", "to", "(", "'cuda'", ")", "\n", "pos_pred", "=", "self", ".", "mlpModel", "(", "(", "pos_pair", ",", "targeted_targets", ")", ")", "\n", "\n", "dis_out_fake", "=", "self", ".", "discriminator", "(", "fake", ",", "targeted_targets", ")", "\n", "\n", "D_loss", "=", "0", "-", "dis_out_fake", "*", "1.0", "\n", "mlploss_withoutreduction", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss_mlp", "=", "mlploss_withoutreduction", "(", "pos_pred", ",", "y_mlp_pos", ")", "\n", "loss_img_l2", "=", "torch", ".", "abs", "(", "(", "fake", "-", "adv_scale", ")", "**", "2", ")", ".", "mean", "(", "(", "1", ",", "2", ",", "3", ")", ",", "True", ")", ".", "reshape", "(", "64", ")", "\n", "# print(\"l2 loss shape\",loss_img_l2.shape)", "\n", "loss_img_ssim", "=", "-", "torch", ".", "log", "(", "ssim_size_average", "(", "fake", ",", "adv_scale", ")", "+", "1e-15", ")", "\n", "# needs to be modified ", "\n", "# if self.detector_loss:", "\n", "#     loss_detector = -self.detector_loss(adv_scores, alarm_targets)", "\n", "# else:", "\n", "#     loss_detector = torch.mean(adv_scores)", "\n", "\n", "adv_scores", "=", "(", "loss_img_l2", "+", "loss_img_ssim", "+", "loss_mlp", "+", "D_loss", ")", "\n", "# adv_scores= loss_mlp", "\n", "loss_detector", "=", "torch", ".", "mean", "(", "adv_scores", ")", "\n", "loss_detector", ".", "backward", "(", ")", "\n", "grad_detector", "=", "adv_images", ".", "grad", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "\n", "self", ".", "all_classifier_losses", ".", "append", "(", "loss_classifier", ".", "detach", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "self", ".", "all_detector_losses", ".", "append", "(", "loss_detector", ".", "detach", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "progress", ".", "set_description", "(", "\"Losses (%.3f/%.3f)\"", "%", "(", "np", ".", "mean", "(", "self", ".", "all_classifier_losses", "[", "-", "10", ":", "]", ")", ",", "\n", "np", ".", "mean", "(", "self", ".", "all_detector_losses", "[", "-", "10", ":", "]", ")", ")", ")", "\n", "\n", "if", "self", ".", "target_", ":", "\n", "\t\t\t\t", "has_attack_succeeded", "=", "(", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "1", ")", "==", "targeted_targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# print(\"has_attack_succeeded\", has_attack_succeeded.sum())", "\n", "", "else", ":", "\n", "\t\t\t\t", "has_attack_succeeded", "=", "(", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "argmax", "(", "1", ")", "!=", "targets", ".", "numpy", "(", ")", ")", "\n", "\n", "", "adv_images_np", "=", "adv_images", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "# print(torch.max(torch.abs(adv_images-inputs)))", "\n", "# print('b',torch.max(torch.abs(torch.tensor(advx_final)-inputs)))", "\n", "for", "i", "in", "range", "(", "len", "(", "advx_final", ")", ")", ":", "\n", "# print(\"has_attack_succeeded\",has_attack_succeeded.shape)", "\n", "# print(\"loss_final\",loss_final.shape)", "\n", "# print(adv_scores.shape)", "\n", "\t\t\t\t", "if", "has_attack_succeeded", "[", "i", "]", "and", "loss_final", "[", "i", "]", ">", "adv_scores", "[", "i", "]", ":", "\n", "# print(\"assign\", i, np.max(advx_final[i]-original_inputs_numpy[i]))", "\n", "\t\t\t\t\t", "advx_final", "[", "i", "]", "=", "adv_images_np", "[", "i", "]", "\n", "loss_final", "[", "i", "]", "=", "adv_scores", "[", "i", "]", "\n", "#print(\"Update\", i, adv_scores[i])", "\n", "\n", "# using hyperparameter to combine gradient of classifier and gradient of detector", "\n", "", "", "if", "not", "self", ".", "use_projection", ":", "\n", "\t\t\t\t", "grad", "=", "grad_classifier", "+", "self", ".", "lmbd", "*", "grad_detector", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "self", ".", "project_detector", ":", "\n", "# using Orthogonal Projected Gradient Descent    ", "\n", "# projection of gradient of detector on gradient of classifier", "\n", "# then grad_d' = grad_d - (project grad_d onto grad_c)", "\n", "\t\t\t\t\t", "grad_detector_proj", "=", "grad_detector", "-", "torch", ".", "bmm", "(", "(", "torch", ".", "bmm", "(", "grad_detector", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_classifier", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", "/", "(", "1e-20", "+", "torch", ".", "bmm", "(", "grad_classifier", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_classifier", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "grad_classifier", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ")", ".", "view", "(", "grad_detector", ".", "shape", ")", "\n", "proj_c", "=", "torch", ".", "bmm", "(", "(", "torch", ".", "bmm", "(", "grad_detector", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_classifier", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", "/", "(", "1e-20", "+", "torch", ".", "bmm", "(", "grad_classifier", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_classifier", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "grad_classifier", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ")", ".", "view", "(", "grad_detector", ".", "shape", ")", "\n", "# print('minus', (grad_detector-proj_c).mean())", "\n", "# print(\"grad_detector\", grad_detector.mean())", "\n", "# detector_effect_of_proj = (grad_detector.sign()*grad_detector_proj.sign()).sum()", "\n", "# print('detector_effect_of_proj',detector_effect_of_proj)", "\n", "# reference = (grad_detector.sign()*grad_detector.sign()).sum()", "\n", "#print('reference:',(grad_detector.sign()*grad_detector.sign()).sum())", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "grad_detector_proj", "=", "grad_detector", "\n", "# print(\"project_classifier\",self.project_classifier)", "\n", "", "if", "self", ".", "project_classifier", ":", "\n", "# print(\"project_classifier\",self.project_classifier)", "\n", "# using Orthogonal Projected Gradient Descent    ", "\n", "# projection of gradient of detector on gradient of classifier", "\n", "# then grad_c' = grad_c - (project grad_c onto grad_d)", "\n", "\t\t\t\t\t", "grad_classifier_proj", "=", "grad_classifier", "-", "torch", ".", "bmm", "(", "(", "torch", ".", "bmm", "(", "grad_classifier", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_detector", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", "/", "(", "1e-20", "+", "torch", ".", "bmm", "(", "grad_detector", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_detector", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "grad_detector", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ")", ".", "view", "(", "grad_classifier", ".", "shape", ")", "\n", "proj_d", "=", "torch", ".", "bmm", "(", "(", "torch", ".", "bmm", "(", "grad_classifier", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_detector", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", "/", "(", "1e-20", "+", "torch", ".", "bmm", "(", "grad_detector", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ",", "grad_detector", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ",", "grad_detector", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ")", ".", "view", "(", "grad_classifier", ".", "shape", ")", "\n", "# print(\"proj_d\",proj_d.mean())", "\n", "# print(\"grad_classifier\",grad_classifier.mean())", "\n", "# effect_of_proj = (grad_classifier_proj.sign() * grad_classifier.sign()).sum()", "\n", "# print(\"classifier effect of proj:\", effect_of_proj)", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "grad_classifier_proj", "=", "grad_classifier", "\n", "\n", "# making sure adversarial images have crossed decision boundary ", "\n", "", "outputs_perturbed", "=", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "self", ".", "target_", ":", "\n", "\t\t\t\t\t", "outputs_perturbed", "[", "np", ".", "arange", "(", "targeted_targets", ".", "shape", "[", "0", "]", ")", ",", "targets", "]", "+=", ".05", "\n", "has_attack_succeeded", "=", "np", ".", "array", "(", "(", "outputs_perturbed", ".", "argmax", "(", "1", ")", "==", "targeted_targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "outputs_perturbed", "[", "np", ".", "arange", "(", "targets", ".", "shape", "[", "0", "]", ")", ",", "targets", "]", "+=", ".05", "\n", "has_attack_succeeded", "=", "np", ".", "array", "(", "(", "outputs_perturbed", ".", "argmax", "(", "1", ")", "!=", "targets", ".", "numpy", "(", ")", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "#print('correct frac', has_attack_succeeded.mean())", "\n", "#print('really adv target reached', (outputs.argmax(1).cpu().detach().numpy() == self.target).mean())", "\n", "\n", "", "if", "self", ".", "k", ":", "\n", "# take gradients of g onto f every kth step", "\n", "\t\t\t\t\t", "if", "i", "%", "self", ".", "k", "==", "0", ":", "\n", "\t\t\t\t\t\t", "grad", "=", "grad_detector_proj", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "grad", "=", "grad_classifier_proj", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "grad", "=", "grad_classifier_proj", "*", "(", "1", "-", "has_attack_succeeded", ")", "+", "grad_detector_proj", "*", "has_attack_succeeded", "\n", "grad_", "=", "grad_classifier", "*", "(", "1", "-", "has_attack_succeeded", ")", "+", "grad_detector", "*", "has_attack_succeeded", "\n", "# difference = (grad_ - grad).sum()", "\n", "\n", "# precent = difference/reference", "\n", "# print(\"grad_proj\", grad.sign().sum())", "\n", "# print(\"precent\",precent)", "\n", "", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "grad", ".", "numpy", "(", ")", ")", ")", ":", "\n", "\t\t\t\t\t", "print", "(", "np", ".", "mean", "(", "np", ".", "isnan", "(", "grad", ".", "numpy", "(", ")", ")", ")", ")", "\n", "print", "(", "\"ABORT\"", ")", "\n", "break", "\n", "\n", "", "", "if", "self", ".", "target_", ":", "\n", "\t\t\t\t", "grad", "=", "-", "grad", "\n", "\n", "# l2 regularization", "\n", "", "if", "self", ".", "projection_norm", "==", "'l2'", ":", "\n", "\t\t\t\t", "grad_norms", "=", "torch", ".", "norm", "(", "grad", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "+", "1e-20", "\n", "grad", "=", "grad", "/", "grad_norms", ".", "view", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "# linf regularization", "\n", "", "elif", "self", ".", "projection_norm", "==", "'linf'", ":", "\n", "\t\t\t\t", "grad", "=", "torch", ".", "sign", "(", "grad", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "Exception", "(", "'Incorrect Projection Norm'", ")", "\n", "\n", "", "adv_images", "=", "adv_images", ".", "detach", "(", ")", "+", "self", ".", "alpha", "*", "grad", ".", "cuda", "(", ")", "\n", "delta", "=", "torch", ".", "clamp", "(", "adv_images", "-", "torch", ".", "tensor", "(", "original_inputs_numpy", ")", ".", "cuda", "(", ")", ",", "min", "=", "-", "self", ".", "eps", ",", "max", "=", "self", ".", "eps", ")", "\n", "adv_images", "=", "torch", ".", "clamp", "(", "torch", ".", "tensor", "(", "original_inputs_numpy", ")", ".", "cuda", "(", ")", "+", "delta", ",", "min", "=", "self", ".", "img_min", ",", "max", "=", "self", ".", "img_max", ")", ".", "detach", "(", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "advx_final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.attack": [[566, 571], ["contraNetattack.PGD.attack_batch", "adv_images.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.attack_batch"], ["", "def", "attack", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "\t\t", "adv_images", "=", "[", "]", "\n", "batch_adv_images", "=", "self", ".", "attack_batch", "(", "inputs", ",", "targets", ")", "\n", "adv_images", ".", "append", "(", "batch_adv_images", ")", "\n", "return", "torch", ".", "cat", "(", "adv_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize": [[326, 328], ["None"], "function", ["None"], ["def", "normalize", "(", "X", ")", ":", "\n", "\t", "return", "(", "X", "-", "mean", ")", "/", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.sample_targetlabel": [[330, 338], ["torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "index.size", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "index.size"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "def", "sample_targetlabel", "(", "y", ",", "num_classes", "=", "10", ")", ":", "\n", "\t", "y_target", "=", "torch", ".", "randint_like", "(", "y", ",", "0", ",", "10", ")", ".", "cuda", "(", ")", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "while", "index", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "\t\t", "y_target_new", "=", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "index", ".", "size", "(", "0", ")", ",", ")", ")", ".", "cuda", "(", ")", "\n", "y_target", "[", "index", "]", "=", "y_target_new", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "", "return", "y_target", "\n", "", "class", "PGD", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.test": [[572, 760], ["densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "Discriminator().to", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Discriminator().to.load_state_dict", "dis_model.eval", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "mlpModel.eval().to", "orimodel.eval().to", "genmodel.eval().to", "orimodel.query_features", "genmodel.query_features", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "time.strftime", "utils.log.make_logger", "lib.ssim", "time.localtime", "misc.generate1", "contraNetattack.sample_targetlabel", "utils.log.make_logger.info", "len", "contraNetattack.PGD", "enumerate", "densenet.densenet169", "densenet169().to.eval", "contraNetattack.Discriminator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mlpModel.eval", "orimodel.eval", "genmodel.eval", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "utils.log.make_logger.info", "utils.log.make_logger.info", "range", "len", "contraNetattack.PGD.attack", "print", "encoder", "sample_targetlabel.long().cuda", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "nn.CrossEntropyLoss.", "vae", "gen", "orimodel", "genmodel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "mlpModel", "dis_model", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "nn.CrossEntropyLoss.", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "numpy.array", "numpy.array", "numpy.array", "img.clone", "pgd.attack.min", "img.to", "torch.tensor().cuda.to", "img_to_classifier.to", "encoder.to", "z.to", "ssim_size_average", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "str", "sample_targetlabel.long", "torch.tensor().cuda.to", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "Exception", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "str", "str", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ssim_size_average().mean", "str", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.array", "numpy.array", "numpy.array", "str", "len", "ssim_size_average", "str", "Exception"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1", "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.sample_targetlabel", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.PGD.attack", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], ["", "", "def", "test", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "inference_m", ",", "writer", ",", "adaptive_PGD_loss", ",", "attack_iteration", ",", "test_sample_number", ",", "fpr", ")", ":", "\n", "\t", "checkpoint_path", "=", "'./'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "\n", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "device", ")", "\n", "d_checkpoint_dir", "=", "'./pretrain'", "\n", "denoisecGAN_adding_noise_adv_best", "=", "'/dis.pth'", "\n", "d_checkpoint_dir", "=", "d_checkpoint_dir", "+", "denoisecGAN_adding_noise_adv_best", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "dis_model", "=", "Dis", "\n", "\n", "dis_model", ".", "eval", "(", ")", "\n", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "\n", "global", "test_iter", "\n", "mlpModel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "genmodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "query_features", "(", ")", "\n", "genmodel", ".", "query_features", "(", ")", "\n", "\n", "ssim_size_average", "=", "lambda", "x", ",", "y", ":", "ssim_package", ".", "ssim", "(", "x", ",", "y", ",", "size_average", "=", "False", ")", "\n", "\n", "classifier_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "mlploss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "pred_list", ",", "pos_pred_list", ",", "neg_pred_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_id", "=", "0", "\n", "acc_batch", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "\n", "tested_number", "=", "0", "\n", "\n", "date", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n", "logger", "=", "make_logger", "(", "date", "+", "\"__pgd_inf_targeted_attack_loss_\"", "+", "adaptive_PGD_loss", ",", "None", ")", "\n", "\n", "for", "img", ",", "classId", "in", "dataset", ":", "\n", "\t\t", "img", ",", "img_pos", ",", "img_neg", ",", "class_id", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "next", "=", "True", ")", "\n", "y_target", "=", "sample_targetlabel", "(", "class_id", ",", "num_classes", "=", "10", ")", "\n", "attack_args", "=", "{", "'use_projection'", ":", "True", ",", "'eps'", ":", "0.01", ",", "'alpha'", ":", ".001", ",", "'steps'", ":", "1000", ",", "\n", "'projection_norm'", ":", "'linf'", ",", "'target'", ":", "y_target", ",", "'project_detector'", ":", "False", ",", "'project_classifier'", ":", "False", ",", "\n", "}", "\n", "logger", ".", "info", "(", "'attack_parameters:{}'", ".", "format", "(", "attack_args", ")", ")", "\n", "# save acc values and ensure test sample at least test_sample_number samples", "\n", "if", "data_id", "*", "len", "(", "img", ")", ">", "test_sample_number", ":", "\n", "\t\t\t", "output_acc_name", "=", "date", "+", "\"fpr:\"", "+", "str", "(", "fpr", ")", "+", "\"opgd\"", "+", "str", "(", "attack_args", "[", "'eps'", "]", ")", "+", "str", "(", "attack_args", "[", "'project_detector'", "]", ")", "+", "\"adaptive_pgd_targeted_loss==\"", "+", "adaptive_PGD_loss", "\n", "acc", "=", "1", "-", "(", "numpy", ".", "array", "(", "acc_batch", ")", "/", "tested_number", ")", "\n", "numpy", ".", "save", "(", "output_acc_name", ",", "acc", ")", "\n", "numpy", ".", "save", "(", "\"fpr:\"", "+", "str", "(", "fpr", ")", "+", "\"opgd\"", "+", "str", "(", "attack_args", "[", "'eps'", "]", ")", "+", "str", "(", "attack_args", "[", "'project_detector'", "]", ")", "+", "\"_adaptive_pgd_targeted_loss==\"", "+", "adaptive_PGD_loss", ",", "acc", ")", "\n", "logger", ".", "info", "(", "\"acc is saved as {}.npy and {}.npy\"", ".", "format", "(", "output_acc_name", ",", "\"adaptive_pgd_targeted_loss__\"", "+", "adaptive_PGD_loss", ")", ")", "\n", "break", "\n", "", "data_id", "=", "data_id", "+", "1", "\n", "\n", "\n", "\n", "# epsilon_list = [0.01, 0.03, 0.05, 0.07, 0.1, 0.15, 0.2, 0.3, 0.4, 0.5]", "\n", "epsilon_list", "=", "[", "attack_args", "[", "'eps'", "]", "]", "\n", "tested_number", "+=", "len", "(", "img", ")", "\n", "\n", "\n", "pgd", "=", "PGD", "(", "classifier", ",", "encoder", ",", "vae", ",", "gen", ",", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "dis_model", ",", "**", "attack_args", ")", "\n", "iteration", "=", "1", "\n", "for", "i", ",", "epsilon", "in", "enumerate", "(", "epsilon_list", ")", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "'==============epsilon={}================'", ".", "format", "(", "epsilon", ")", ")", "\n", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "\t\t\t\t", "x_adv", "=", "pgd", ".", "attack", "(", "img", ".", "clone", "(", ")", ",", "classId", ")", "\n", "print", "(", "\"x_adv.min()\"", ",", "x_adv", ".", "min", "(", ")", ")", "\n", "# img = img.detach()", "\n", "# img.requires_grad = True  ", "\n", "img", "=", "(", "2", "*", "x_adv", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "latent_i", "=", "encoder", "(", "img", ".", "to", "(", "device", ")", ")", "\n", "\n", "y", "=", "y_target", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "img_to_classifier", "=", "(", "(", "(", "img", "+", "1", ")", "/", "2", ")", "-", "mean", ".", "to", "(", "device", ")", ")", "/", "std", ".", "to", "(", "device", ")", "\n", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "device", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "loss_classifier", "=", "classifier_criterion", "(", "outputs", ",", "y", ")", "# untarget attack ", "\n", "\n", "\n", "z_mean", ",", "z_log_var", ",", "z", "=", "vae", "(", "latent_i", ".", "to", "(", "device", ")", ")", "\n", "\n", "#fake = gen(z.to(device), y_classifier)# here we feed generator the y_classifier to act the practical secnoria", "\n", "fake", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y_classifier", ")", "\n", "\n", "feat_emb", ",", "_", "=", "orimodel", "(", "img", ")", "\n", "feat_pos", ",", "_", "=", "genmodel", "(", "fake", ")", "\n", "pos_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_pos", "]", ",", "dim", "=", "1", ")", "\n", "y_mlp_pos", "=", "torch", ".", "ones", "(", "len", "(", "img", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "#target attack, used for mlp when conduct target attacks ", "\n", "\n", "\n", "pos_pred", "=", "mlpModel", "(", "(", "pos_pair", ",", "y_classifier", ")", ")", "\n", "#pos_pred = mlpModel((pos_pair, y_classifier))# we feed mlp the y_classifier to suite to the real world", "\n", "\n", "if", "fpr", "==", "5", ":", "\n", "\n", "\t\t\t\t\t", "dis_threshold", "=", "-", "1.334", "\n", "dml_threshold", "=", "0.0107", "\n", "ssim_threshold", "=", "0.0551", "\n", "", "elif", "fpr", "==", "50", ":", "\n", "\t\t\t\t\t", "dis_threshold", "=", "-", "0.82401925", "\n", "dml_threshold", "=", "0.963490069", "\n", "ssim_threshold", "=", "0.34621650", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "Exception", "(", "'fpr==5% or 50%'", ")", "\n", "\n", "", "pred_y", "=", "(", "pos_pred", "[", ":", ",", "1", "]", ">", "dml_threshold", ")", ".", "long", "(", ")", "\n", "dml_decision", "=", "pred_y", "\n", "dis_out_fake", "=", "dis_model", "(", "fake", ",", "y_classifier", ")", "\n", "\n", "dis_decision", "=", "(", "dis_out_fake", ">", "dis_threshold", ")", "*", "1", "\n", "ssim_decision", "=", "(", "ssim_size_average", "(", "fake", ",", "img", ")", ">", "ssim_threshold", ")", "\n", "# l2_decision = torch.norm(fake - img, 2, dim=(1, 2, 3)) < l2_threshold", "\n", "D_loss", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "dis_out_fake", ")", ")", "\n", "if", "j", "==", "(", "iteration", "-", "1", ")", ":", "\n", "\n", "\t\t\t\t\t", "judgement_equation_ssim_dml_dis", "=", "(", "pred_y", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "dis_decision", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "ssim_decision", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "y_classifier", "!=", "class_id", ")", ".", "cpu", "(", ")", "*", "(", "y_classifier", "==", "y_target", ")", ".", "cpu", "(", ")", "\n", "acc_batch", "[", "i", "]", "+=", "torch", ".", "sum", "(", "judgement_equation_ssim_dml_dis", ")", "\n", "logger", ".", "info", "(", "\"fpr:{}%\"", ".", "format", "(", "fpr", ")", ")", "\n", "logger", ".", "info", "(", "\"targeted y                    :{}\"", ".", "format", "(", "y_target", ")", ")", "\n", "logger", ".", "info", "(", "\"adv_img classifier prediction:{}\"", ".", "format", "(", "y_classifier", ")", ")", "\n", "logger", ".", "info", "(", "\"targeted_y==adv_img_y         :{}\"", ".", "format", "(", "(", "y_classifier", "==", "y_target", ")", "*", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"all_targeted successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "==", "y_target", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"all_incorrect successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "!=", "class_id", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"dml_decision:{}\"", ".", "format", "(", "dml_decision", "*", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"dis_decision:{}\"", ".", "format", "(", "dis_decision", "*", "1", ")", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\">>>>>total_tested sample number:{}\"", ".", "format", "(", "tested_number", ")", ")", "\n", "logger", ".", "info", "(", "\"=====pgd_adaptive_targeted_attack_successful_rate:{}=========\"", ".", "format", "(", "numpy", ".", "array", "(", "acc_batch", ")", "/", "tested_number", ")", ")", "\n", "\n", "\n", "\n", "", "loss_mlp", "=", "mlploss", "(", "pos_pred", ",", "y_mlp_pos", ")", "#untarget attack, the groundtruth is all ones.", "\n", "\n", "\n", "loss_img_l2", "=", "torch", ".", "abs", "(", "(", "fake", "-", "img", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "loss_img_ssim", "=", "-", "torch", ".", "log", "(", "ssim_size_average", "(", "fake", ",", "img", ")", ".", "mean", "(", ")", "+", "1e-15", ")", "\n", "\n", "if", "adaptive_PGD_loss", "==", "\"all\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_l2", "+", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dis_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dis_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dis\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "loss_mlp", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dis\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "Exception", "(", "\"adaptive loss not implemented!!!\"", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "", "return", "acc_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.get_cuda_state": [[9, 27], ["isinstance", "hasattr", "TypeError", "next", "obj.parameters", "type"], "function", ["None"], ["def", "get_cuda_state", "(", "obj", ")", ":", "\n", "    ", "\"\"\"\n    Get cuda state of any object.\n\n    :param obj: an object (a tensor or an `torch.nn.Module`)\n    :raise TypeError:\n    :return: True if the object or the parameter set of the object\n             is on GPU\n    \"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "next", "(", "obj", ".", "parameters", "(", ")", ")", ".", "is_cuda", "\n", "", "except", "StopIteration", ":", "\n", "            ", "return", "None", "\n", "", "", "elif", "hasattr", "(", "obj", ",", "'is_cuda'", ")", ":", "\n", "        ", "return", "obj", ".", "is_cuda", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'unrecognized type ({}) in args'", ".", "format", "(", "type", "(", "obj", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.is_cuda_consistent": [[29, 54], ["dict", "runutils.get_cuda_state", "dict.get"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.get_cuda_state", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.get"], ["", "", "def", "is_cuda_consistent", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    See if the cuda states are consistent among variables (of type either\n    tensors or torch.autograd.Variable). For example,\n\n        import torch\n        from torch.autograd import Variable\n        import torch.nn as nn\n\n        net = nn.Linear(512, 10)\n        tensor = torch.rand(10, 10).cuda()\n        assert not is_cuda_consistent(net=net, tensor=tensor)\n\n    :param args: the variables to test\n    :return: True if len(args) == 0 or the cuda states of all elements in args\n             are consistent; False otherwise\n    \"\"\"", "\n", "result", "=", "dict", "(", ")", "\n", "for", "v", "in", "args", ":", "\n", "        ", "cur_cuda_state", "=", "get_cuda_state", "(", "v", ")", "\n", "cuda_state", "=", "result", ".", "get", "(", "'cuda'", ",", "cur_cuda_state", ")", "\n", "if", "cur_cuda_state", "is", "not", "cuda_state", ":", "\n", "            ", "return", "False", "\n", "", "result", "[", "'cuda'", "]", "=", "cur_cuda_state", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.make_cuda_consistent": [[55, 81], ["list", "tuple", "runutils.get_cuda_state", "ValueError", "runutils.get_cuda_state", "list.append", "type", "v.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.get_cuda_state", "home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.get_cuda_state", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], ["", "def", "make_cuda_consistent", "(", "refobj", ",", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    Attempt to make the cuda states of args consistent with that of ``refobj``.\n    If any element of args is a Variable and the cuda state of the element is\n    inconsistent with ``refobj``, raise ValueError, since changing the cuda state\n    of a Variable involves rewrapping it in a new Variable, which changes the\n    semantics of the code.\n\n    :param refobj: either the referential object or the cuda state of the\n           referential object\n    :param args: the variables to test\n    :return: tuple of the same data as ``args`` but on the same device as\n             ``refobj``\n    \"\"\"", "\n", "ref_cuda_state", "=", "refobj", "if", "type", "(", "refobj", ")", "is", "bool", "else", "get_cuda_state", "(", "refobj", ")", "\n", "if", "ref_cuda_state", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'cannot determine the cuda state of `refobj` ({})'", "\n", ".", "format", "(", "refobj", ")", ")", "\n", "\n", "", "result_args", "=", "list", "(", ")", "\n", "for", "v", "in", "args", ":", "\n", "        ", "cuda_state", "=", "get_cuda_state", "(", "v", ")", "\n", "if", "cuda_state", "!=", "ref_cuda_state", ":", "\n", "            ", "v", "=", "v", ".", "cuda", "(", ")", "\n", "", "result_args", ".", "append", "(", "v", ")", "\n", "", "return", "tuple", "(", "result_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.predict": [[82, 96], ["torch.autograd.Variable", "net", "runutils.make_cuda_consistent", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.util.runutils.make_cuda_consistent"], ["", "def", "predict", "(", "net", ",", "inputs", ")", ":", "\n", "    ", "\"\"\"\n    Predict labels. The cuda state of `net` decides that of the returned\n    prediction tensor.\n\n    :param net: the network\n    :param inputs: the input tensor (non Variable), of dimension [B x C x W x H]\n    :return: prediction tensor (LongTensor), of dimension [B]\n    \"\"\"", "\n", "inputs", "=", "make_cuda_consistent", "(", "net", ",", "inputs", ")", "[", "0", "]", "\n", "inputs_var", "=", "Variable", "(", "inputs", ")", "\n", "outputs_var", "=", "net", "(", "inputs_var", ")", "\n", "predictions", "=", "torch", ".", "max", "(", "outputs_var", ".", "data", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "return", "predictions", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.roc_plot.roc_auc": [[6, 24], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "matplotlib.switch_backend", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.visdom_utils.VisFunc.plot"], ["def", "roc_auc", "(", "labels", ",", "losses", ")", ":", "\n", "    ", "fpt", ",", "tpt", ",", "thresholds", "=", "roc_curve", "(", "labels", ",", "losses", ")", "\n", "roc_auc", "=", "auc", "(", "fpt", ",", "tpt", ")", "\n", "plt", ".", "switch_backend", "(", "'Agg'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "lw", "=", "2", "\n", "plt", ".", "plot", "(", "fpt", ",", "tpt", ",", "color", "=", "'red'", ",", "\n", "lw", "=", "lw", ",", "label", "=", "'ROC curve (auc = %0.2f)'", "%", "roc_auc", ")", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "'blue'", ",", "lw", "=", "lw", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlabel", "(", "'False Positive Rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True Positive Rate'", ")", "\n", "plt", ".", "title", "(", "'adversarial detect roc curve'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "\n", "fig", ".", "savefig", "(", "'./output/roc.png'", ",", "dpi", "=", "fig", ".", "dpi", ")", "\n", "\n", "return", "roc_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.roc_plot.creterion_func": [[25, 36], ["pandas.DataFrame", "pd.DataFrame.to_csv", "matplotlib.figure", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.xticks", "plt.figure.savefig", "matplotlib.show", "numpy.arange", "numpy.arange", "len", "len"], "function", ["None"], ["", "def", "creterion_func", "(", "benign_losses", ",", "adv_losses", ")", ":", "\n", "    ", "benign_losses", "=", "benign_losses", "[", ":", "]", "\n", "adv_losses", "=", "adv_losses", "[", ":", "]", "\n", "creterion", "=", "pd", ".", "DataFrame", "(", "[", "benign_losses", ",", "adv_losses", "]", ")", "\n", "creterion", ".", "to_csv", "(", "'./output/creterion.csv'", ",", "index", "=", "False", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "scatter", "(", "np", ".", "arange", "(", "len", "(", "benign_losses", ")", ")", ",", "benign_losses", ",", "color", "=", "'cornflowerblue'", ",", "s", "=", "3", ",", "marker", "=", "'o'", ")", "\n", "plt", ".", "scatter", "(", "np", ".", "arange", "(", "len", "(", "adv_losses", ")", ")", ",", "adv_losses", ",", "color", "=", "'crimson'", ",", "s", "=", "3", ",", "marker", "=", "'*'", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "fig", ".", "savefig", "(", "'./output/creterion.png'", ",", "dpi", "=", "400", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.wordProcess.wordIndex.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "self", ".", "word_to_idx", "=", "{", "}", "\n", "self", ".", "word_count", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.wordProcess.wordIndex.add_word": [[10, 17], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word_to_idx", ":", "\n", "            ", "self", ".", "word_to_idx", "[", "word", "]", "=", "self", ".", "count", "\n", "self", ".", "word_count", "[", "word", "]", "=", "1", "\n", "self", ".", "count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "word_count", "[", "word", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.wordProcess.wordIndex.add_text": [[18, 21], ["text.split", "wordProcess.wordIndex.add_word"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.util.wordProcess.wordIndex.add_word"], ["", "", "def", "add_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "for", "word", "in", "text", ".", "split", "(", "' '", ")", ":", "\n", "            ", "self", ".", "add_word", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.wordProcess.normalizeString": [[23, 32], ["re.sub.lower().strip", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.lower"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.sub", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.sub", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.sub", "home.repos.pwc.inspect_result.cure-lab_contranet.models.model_utils.sub"], ["", "", "", "def", "normalizeString", "(", "s", ")", ":", "\n", "    ", "s", "=", "s", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "s", "=", "re", ".", "sub", "(", "r\"<br />\"", ",", "r\" \"", ",", "s", ")", "\n", "# s = re.sub(' +',' ',s)", "\n", "s", "=", "re", ".", "sub", "(", "r'(\\W)(?=\\1)'", ",", "''", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r\"([.!?])\"", ",", "r\" \\1\"", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r\"[^a-zA-Z.!?]+\"", ",", "r\" \"", ",", "s", ")", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.util.wordProcess.limitDict": [[34, 44], ["sorted", "classObj.word_count.items"], "function", ["None"], ["", "def", "limitDict", "(", "limit", ",", "classObj", ")", ":", "\n", "    ", "dict1", "=", "sorted", "(", "classObj", ".", "word_count", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "count", "=", "0", "\n", "for", "x", ",", "y", "in", "dict1", ":", "\n", "        ", "if", "count", ">=", "limit", "-", "1", ":", "\n", "            ", "classObj", ".", "word_to_idx", "[", "x", "]", "=", "limit", "\n", "", "else", ":", "\n", "            ", "classObj", ".", "word_to_idx", "[", "x", "]", "=", "count", "\n", "\n", "", "count", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.__init__": [[64, 92], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "snconv2d", "snconv2d", "snconv2d", "conv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.forward": [[94, 110], ["robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.conv2d1", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.activation", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.conv2d2", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.average_pooling", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.average_pooling", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.conv2d0", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.bn1", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.__init__": [[113, 150], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snconv2d", "snconv2d", "conv2d", "conv2d", "batchnorm_2d", "batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snconv2d", "conv2d", "batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.forward": [[152, 175], ["robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.activation", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.conv2d1", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.activation", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.conv2d2", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.bn1", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.bn2", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.average_pooling", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.conv2d0", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.bn0", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.Discriminator.__init__": [[178, 268], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "snlinear", "linear", "init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "snlinear", "sn_embedding", "linear", "embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "snlinear", "sn_embedding", "linear", "embedding", "robust_classifier_adaptive_targeted_PGD_linf.DiscOptBlock", "robust_classifier_adaptive_targeted_PGD_linf.DiscBlock", "Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "snlinear", "linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.Discriminator.forward": [[270, 306], ["enumerate", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.embedding", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.linear2", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.linear1", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.activation", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.linear4", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.embedding", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "# with torch.cuda.amp.autocast() if self.mixed_precision is True and evaluation is False else dummy_context_mgr() as mp:", "\n", "\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.sample_targetlabel": [[307, 315], ["torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.randint_like().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "index.size", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "index.size"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "", "", "def", "sample_targetlabel", "(", "y", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "y_target", "=", "torch", ".", "randint_like", "(", "y", ",", "0", ",", "10", ")", ".", "cuda", "(", ")", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "while", "index", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "        ", "y_target_new", "=", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "index", ".", "size", "(", "0", ")", ",", ")", ")", ".", "cuda", "(", ")", "\n", "y_target", "[", "index", "]", "=", "y_target_new", "\n", "index", "=", "torch", ".", "where", "(", "y_target", "==", "y", ")", "[", "0", "]", "\n", "", "return", "y_target", "\n", "", "def", "test", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.test": [[315, 510], ["robustbench.load_model", "robustbench.load_model.eval().to", "Discriminator().to", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Discriminator().to.load_state_dict", "dis_model.eval", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "mlpModel.eval().to", "orimodel.eval().to", "genmodel.eval().to", "orimodel.query_features", "genmodel.query_features", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "time.strftime", "utils.log.make_logger", "lib.ssim", "time.localtime", "misc.generate1", "img.to.retain_grad", "real.retain_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "robust_classifier_adaptive_targeted_PGD_linf.sample_targetlabel", "enumerate", "robustbench.load_model.eval", "robust_classifier_adaptive_targeted_PGD_linf.Discriminator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mlpModel.eval", "orimodel.eval", "genmodel.eval", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "utils.log.make_logger.info", "utils.log.make_logger.info", "range", "len", "img.to.detach", "encoder", "sample_targetlabel.long().cuda", "robustbench.load_model.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "nn.CrossEntropyLoss.", "vae", "gen", "orimodel", "genmodel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "mlpModel", "dis_model", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "nn.CrossEntropyLoss.", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "adaptive_loss.backward", "x_grad.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "torch.clamp().detach_", "img.to.to", "numpy.array", "numpy.array", "img.to.to", "img_to_classifier.to", "encoder.to", "z.to", "ssim_size_average", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "sample_targetlabel.long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ssim_size_average().mean", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.array", "numpy.array", "len", "ssim_size_average", "Exception"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.models.MobileNetV2.MobileNetV2.query_features", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.misc.utils.generate1", "home.repos.pwc.inspect_result.cure-lab_contranet.ATC_ContraNet.robust_classifier_adaptive_targeted_PGD_linf.sample_targetlabel", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward"], ["", "def", "test", "(", "orimodel", ",", "genmodel", ",", "mlpModel", ",", "device", ",", "dataset", ",", "encoder", ",", "vae", ",", "gen", ",", "\n", "inference_m", ",", "writer", ",", "adaptive_PGD_loss", ",", "attack_iteration", ",", "test_sample_number", ")", ":", "\n", "\t", "classifier", "=", "load_model", "(", "model_name", "=", "\"Gowal2020Uncovering_70_16\"", ",", "dataset", "=", "'cifar10'", ",", "threat_model", "=", "'Linf'", ")", "\n", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "device", ")", "\n", "d_checkpoint_dir", "=", "'./pretrain'", "\n", "denoisecGAN_adding_noise_adv_best", "=", "/", "dis", ".", "pth", "\n", "d_checkpoint_dir", "=", "d_checkpoint_dir", "+", "denoisecGAN_adding_noise_adv_best", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "dis_model", "=", "Dis", "\n", "\n", "dis_model", ".", "eval", "(", ")", "\n", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "\n", "global", "test_iter", "\n", "mlpModel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "genmodel", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "orimodel", ".", "query_features", "(", ")", "\n", "genmodel", ".", "query_features", "(", ")", "\n", "\n", "ssim_size_average", "=", "lambda", "x", ",", "y", ":", "ssim_package", ".", "ssim", "(", "x", ",", "y", ",", "size_average", "=", "False", ")", "\n", "\n", "classifier_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "mlploss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "pred_list", ",", "pos_pred_list", ",", "neg_pred_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "data_id", "=", "0", "\n", "acc_batch", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "\n", "tested_number", "=", "0", "\n", "\n", "date", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n", "logger", "=", "make_logger", "(", "date", "+", "\"__pgd_inf_targeted_attack_loss_\"", "+", "adaptive_PGD_loss", ",", "None", ")", "\n", "\n", "for", "img", ",", "classId", "in", "dataset", ":", "\n", "\n", "# save acc values and ensure test sample at least test_sample_number samples", "\n", "\t\t", "if", "data_id", "*", "len", "(", "img", ")", ">", "test_sample_number", ":", "\n", "\t\t\t", "output_acc_name", "=", "date", "+", "\"_robustcls_adaptive_pgd_targeted_loss==\"", "+", "adaptive_PGD_loss", "\n", "acc", "=", "1", "-", "(", "numpy", ".", "array", "(", "acc_batch", ")", "/", "tested_number", ")", "\n", "numpy", ".", "save", "(", "output_acc_name", ",", "acc", ")", "\n", "numpy", ".", "save", "(", "\"robustcls_adaptive_pgd_targeted_loss==\"", "+", "adaptive_PGD_loss", ",", "acc", ")", "\n", "logger", ".", "info", "(", "\"acc is saved as {}.npy and {}.npy\"", ".", "format", "(", "output_acc_name", ",", "\"adaptive_pgd_targeted_loss__\"", "+", "adaptive_PGD_loss", ")", ")", "\n", "break", "\n", "", "data_id", "=", "data_id", "+", "1", "\n", "img", ",", "img_pos", ",", "img_neg", ",", "class_id", ",", "wrong_y", "=", "utils", ".", "generate1", "(", "\n", "img", ",", "classId", ",", "device", ",", "encoder", ",", "vae", ",", "gen", ",", "next", "=", "True", ")", "\n", "\n", "iteration", "=", "attack_iteration", "\n", "real", "=", "img", "# used to clip the input image", "\n", "img", ".", "requires_grad", "=", "True", "\n", "real", ".", "requires_grad", "=", "True", "\n", "img", ".", "retain_grad", "(", ")", "\n", "real", ".", "retain_grad", "(", ")", "\n", "\n", "\n", "x_adv_image", "=", "torch", ".", "zeros", "(", "10", ",", "3", ",", "32", ",", "32", ")", "\n", "fake_adv_image", "=", "torch", ".", "zeros", "(", "10", ",", "3", ",", "32", ",", "32", ")", "\n", "epsilon_list", "=", "[", "0.01", ",", "0.03", ",", "0.05", ",", "0.07", ",", "0.1", ",", "0.15", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "\n", "tested_number", "+=", "len", "(", "img", ")", "\n", "y_target", "=", "sample_targetlabel", "(", "class_id", ",", "num_classes", "=", "10", ")", "\n", "\n", "for", "i", ",", "epsilon", "in", "enumerate", "(", "epsilon_list", ")", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "'==============epsilon={}================'", ".", "format", "(", "epsilon", ")", ")", "\n", "for", "j", "in", "range", "(", "iteration", ")", ":", "\n", "\n", "\t\t\t\t", "img", "=", "img", ".", "detach", "(", ")", "\n", "img", ".", "requires_grad", "=", "True", "\n", "\n", "latent_i", "=", "encoder", "(", "img", ".", "to", "(", "device", ")", ")", "\n", "\n", "y", "=", "y_target", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "img_to_classifier", "=", "(", "(", "(", "img", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "device", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "loss_classifier", "=", "classifier_criterion", "(", "outputs", ",", "y", ")", "# untarget attack ", "\n", "\n", "\n", "z_mean", ",", "z_log_var", ",", "z", "=", "vae", "(", "latent_i", ".", "to", "(", "device", ")", ")", "\n", "\n", "#fake = gen(z.to(device), y_classifier)# here we feed generator the y_classifier to act the practical secnoria", "\n", "fake", "=", "gen", "(", "z", ".", "to", "(", "device", ")", ",", "y_classifier", ")", "\n", "\n", "feat_emb", ",", "_", "=", "orimodel", "(", "img", ")", "\n", "feat_pos", ",", "_", "=", "genmodel", "(", "fake", ")", "\n", "pos_pair", "=", "torch", ".", "cat", "(", "[", "feat_emb", ",", "feat_pos", "]", ",", "dim", "=", "1", ")", "\n", "y_mlp_pos", "=", "torch", ".", "ones", "(", "len", "(", "img", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "#target attack, used for mlp when conduct target attacks ", "\n", "\n", "\n", "pos_pred", "=", "mlpModel", "(", "(", "pos_pair", ",", "y_classifier", ")", ")", "\n", "#pos_pred = mlpModel((pos_pair, y_classifier))# we feed mlp the y_classifier to suite to the real world", "\n", "\n", "\n", "# # the final hope", "\n", "dis_threshold", "=", "-", "1.334", "\n", "dml_threshold", "=", "0.0107", "\n", "ssim_threshold", "=", "0.2365", "\n", "\n", "# l2_threshold = 41.6996", "\n", "\n", "pred_y", "=", "(", "pos_pred", "[", ":", ",", "1", "]", ">", "dml_threshold", ")", ".", "long", "(", ")", "\n", "dml_decision", "=", "pred_y", "\n", "dis_out_fake", "=", "dis_model", "(", "fake", ",", "y_classifier", ")", "\n", "\n", "dis_decision", "=", "(", "dis_out_fake", ">", "dis_threshold", ")", "*", "1", "\n", "ssim_decision", "=", "(", "ssim_size_average", "(", "fake", ",", "img", ")", ">", "ssim_threshold", ")", "\n", "# l2_decision = torch.norm(fake - img, 2, dim=(1, 2, 3)) < l2_threshold", "\n", "D_loss", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "dis_out_fake", ")", ")", "\n", "if", "j", "==", "(", "iteration", "-", "1", ")", ":", "\n", "\n", "\t\t\t\t\t", "judgement_equation_ssim_dml_dis", "=", "(", "pred_y", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "dis_decision", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "ssim_decision", "==", "1", ")", ".", "cpu", "(", ")", "*", "(", "y_classifier", "!=", "class_id", ")", ".", "cpu", "(", ")", "*", "(", "y_classifier", "==", "y_target", ")", ".", "cpu", "(", ")", "\n", "acc_batch", "[", "i", "]", "+=", "torch", ".", "sum", "(", "judgement_equation_ssim_dml_dis", ")", "\n", "logger", ".", "info", "(", "\"targeted y                    :{}\"", ".", "format", "(", "y_target", ")", ")", "\n", "logger", ".", "info", "(", "\"adv_img classifier prediction:{}\"", ".", "format", "(", "y_classifier", ")", ")", "\n", "logger", ".", "info", "(", "\"targeted_y==adv_img_y         :{}\"", ".", "format", "(", "(", "y_classifier", "==", "y_target", ")", "*", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"all_targeted successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "==", "y_target", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"all_incorrect successful:{}\"", ".", "format", "(", "torch", ".", "sum", "(", "y_classifier", "!=", "class_id", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"dml_decision:{}\"", ".", "format", "(", "dml_decision", "*", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"dis_decision:{}\"", ".", "format", "(", "dis_decision", "*", "1", ")", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\">>>>>total_tested sample number:{}\"", ".", "format", "(", "tested_number", ")", ")", "\n", "logger", ".", "info", "(", "\"=====pgd_adaptive_targeted_attack_successful_rate:{}=========\"", ".", "format", "(", "numpy", ".", "array", "(", "acc_batch", ")", "/", "tested_number", ")", ")", "\n", "\n", "\n", "\n", "", "loss_mlp", "=", "mlploss", "(", "pos_pred", ",", "y_mlp_pos", ")", "#untarget attack, the groundtruth is all ones.", "\n", "\n", "\n", "loss_img_l2", "=", "torch", ".", "abs", "(", "(", "fake", "-", "img", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n", "loss_img_ssim", "=", "-", "torch", ".", "log", "(", "ssim_size_average", "(", "fake", ",", "img", ")", ".", "mean", "(", ")", "+", "1e-15", ")", "\n", "\n", "if", "adaptive_PGD_loss", "==", "\"all\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_l2", "+", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dis_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dis_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dis\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim_dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "+", "loss_mlp", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dml\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "loss_mlp", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"dis\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_classifier", "+", "D_loss", "\n", "", "elif", "adaptive_PGD_loss", "==", "\"ssim\"", ":", "\n", "\t\t\t\t\t", "adaptive_loss", "=", "loss_img_ssim", "+", "loss_classifier", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "Exception", "(", "\"adaptive loss not implemented!!!\"", ")", "\n", "\n", "\n", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "adaptive_loss", ".", "backward", "(", ")", "\n", "x_grad", "=", "img", ".", "grad", ".", "data", "\n", "\n", "sign_x_grad", "=", "x_grad", ".", "sign", "(", ")", "\n", "# This part is different from BIM", "\n", "\n", "alpha", "=", "epsilon", "/", "iteration", "\n", "x_adv", "=", "img", "-", "alpha", "*", "sign_x_grad", "# for target attack the operator should be \"-\"", "\n", "eta", "=", "torch", ".", "clamp", "(", "x_adv", "-", "real", ",", "min", "=", "-", "epsilon", ",", "max", "=", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "real", "+", "eta", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", ".", "detach_", "(", ")", "\n", "\n", "img", "=", "x_adv", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "return", "acc_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.__init__": [[72, 229], ["datetime.datetime.datetime.now", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "utils.misc.define_sampler", "pytorch_ssim.SSIM().to", "torch.new_group", "torch.new_group", "torch.new_group", "torch.new_group", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "utils.losses.Conditional_Contrastive_loss", "pytorch_ssim.SSIM", "isinstance", "isinstance", "utils.losses.Proxy_NCA_loss", "utils.losses.NT_Xent_loss", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.define_sampler"], ["\t", "def", "__init__", "(", "self", ",", "cfgs", ",", "run_name", ",", "best_step", ",", "logger", ",", "writer", ",", "n_gpus", ",", "gen_model", ",", "dis_model", ",", "d2dis_model", ",", "inception_model", ",", "Gen_copy", ",", "\n", "Gen_ema", ",", "train_dataset", ",", "eval_dataset", ",", "train_dataloader", ",", "eval_dataloader", ",", "G_optimizer", ",", "D_optimizer", ",", "d2D_optimizer", ",", "G_loss", ",", "\n", "D_loss", ",", "d2D_loss", ",", "prev_ada_p", ",", "global_rank", ",", "local_rank", ",", "bn_stat_OnTheFly", ",", "checkpoint_dir", ",", "mu", ",", "sigma", ",", "best_fid", ",", "\n", "best_fid_checkpoint_path", ",", "encoder", ",", "vae", ",", "opt_encoder", ")", ":", "\n", "\n", "\t\t", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "best_step", "=", "best_step", "#0", "\n", "self", ".", "seed", "=", "cfgs", ".", "seed", "#-1", "\n", "self", ".", "dataset_name", "=", "cfgs", ".", "dataset_name", "#CIFAR10", "\n", "self", ".", "eval_type", "=", "cfgs", ".", "eval_type", "# train", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "num_workers", "=", "cfgs", ".", "num_workers", "# 8", "\n", "self", ".", "n_gpus", "=", "n_gpus", "\n", "\n", "self", ".", "gen_model", "=", "gen_model", "\n", "self", ".", "dis_model", "=", "dis_model", "\n", "self", ".", "d2dis_model", "=", "d2dis_model", "\n", "\n", "self", ".", "inception_model", "=", "inception_model", "\n", "self", ".", "Gen_copy", "=", "Gen_copy", "\n", "self", ".", "Gen_ema", "=", "Gen_ema", "\n", "\n", "self", ".", "train_dataset", "=", "train_dataset", "\n", "self", ".", "eval_dataset", "=", "eval_dataset", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "eval_dataloader", "=", "eval_dataloader", "\n", "\n", "self", ".", "freeze_layers", "=", "cfgs", ".", "freeze_layers", "# of layers for freezing discriminator", "\n", "\n", "self", ".", "conditional_strategy", "=", "cfgs", ".", "conditional_strategy", "#ProjGAN", "\n", "self", ".", "pos_collected_numerator", "=", "cfgs", ".", "pos_collected_numerator", "#False", "\n", "self", ".", "z_dim", "=", "cfgs", ".", "z_dim", "#80", "\n", "self", ".", "num_classes", "=", "cfgs", ".", "num_classes", "#10", "\n", "self", ".", "hypersphere_dim", "=", "cfgs", ".", "hypersphere_dim", "#N/A", "\n", "self", ".", "d_spectral_norm", "=", "cfgs", ".", "d_spectral_norm", "# true", "\n", "self", ".", "g_spectral_norm", "=", "cfgs", ".", "g_spectral_norm", "#true", "\n", "\n", "self", ".", "G_optimizer", "=", "G_optimizer", "\n", "self", ".", "D_optimizer", "=", "D_optimizer", "\n", "self", ".", "d2D_optimizer", "=", "d2D_optimizer", "\n", "\n", "self", ".", "batch_size", "=", "cfgs", ".", "batch_size", "#64", "\n", "self", ".", "g_steps_per_iter", "=", "cfgs", ".", "g_steps_per_iter", "# 1", "\n", "self", ".", "d_steps_per_iter", "=", "cfgs", ".", "d_steps_per_iter", "# 5", "\n", "self", ".", "accumulation_steps", "=", "cfgs", ".", "accumulation_steps", "#1", "\n", "self", ".", "total_step", "=", "cfgs", ".", "total_step", "#20,0000", "\n", "\n", "self", ".", "G_loss", "=", "G_loss", "# loss_hinge_gen", "\n", "self", ".", "D_loss", "=", "D_loss", "# loss_hinge_dis", "\n", "\n", "self", ".", "d2D_loss", "=", "d2D_loss", "\n", "\n", "self", ".", "contrastive_lambda", "=", "cfgs", ".", "contrastive_lambda", "#NA", "\n", "self", ".", "margin", "=", "cfgs", ".", "margin", "#NA", "\n", "self", ".", "tempering_type", "=", "cfgs", ".", "tempering_type", "#NA", "\n", "self", ".", "tempering_step", "=", "cfgs", ".", "tempering_step", "#NA", "\n", "self", ".", "start_temperature", "=", "cfgs", ".", "start_temperature", "#NA", "\n", "self", ".", "end_temperature", "=", "cfgs", ".", "end_temperature", "#NA", "\n", "self", ".", "weight_clipping_for_dis", "=", "cfgs", ".", "weight_clipping_for_dis", "#False", "\n", "self", ".", "weight_clipping_bound", "=", "cfgs", ".", "weight_clipping_bound", "# NA", "\n", "self", ".", "gradient_penalty_for_dis", "=", "cfgs", ".", "gradient_penalty_for_dis", "#False", "\n", "self", ".", "gradient_penalty_lambda", "=", "cfgs", ".", "gradient_penalty_lambda", "#NA", "\n", "self", ".", "deep_regret_analysis_for_dis", "=", "cfgs", ".", "deep_regret_analysis_for_dis", "#False", "\n", "self", ".", "regret_penalty_lambda", "=", "cfgs", ".", "regret_penalty_lambda", "#NA", "\n", "self", ".", "cr", "=", "cfgs", ".", "cr", "#False", "\n", "self", ".", "cr_lambda", "=", "cfgs", ".", "cr_lambda", "#NA", "\n", "self", ".", "bcr", "=", "cfgs", ".", "bcr", "#False", "\n", "self", ".", "real_lambda", "=", "cfgs", ".", "real_lambda", "#NA", "\n", "self", ".", "fake_lambda", "=", "cfgs", ".", "fake_lambda", "#NA", "\n", "self", ".", "zcr", "=", "cfgs", ".", "zcr", "# False", "\n", "self", ".", "gen_lambda", "=", "cfgs", ".", "gen_lambda", "#NA", "\n", "self", ".", "dis_lambda", "=", "cfgs", ".", "dis_lambda", "#NA", "\n", "self", ".", "sigma_noise", "=", "cfgs", ".", "sigma_noise", "#AN", "\n", "\n", "self", ".", "diff_aug", "=", "cfgs", ".", "diff_aug", "# True", "\n", "self", ".", "ada", "=", "cfgs", ".", "ada", "# False", "\n", "self", ".", "prev_ada_p", "=", "prev_ada_p", "# None", "\n", "self", ".", "ada_target", "=", "cfgs", ".", "ada_target", "# NA", "\n", "self", ".", "ada_length", "=", "cfgs", ".", "ada_length", "# NA", "\n", "self", ".", "prior", "=", "cfgs", ".", "prior", "#\"gaussian\"", "\n", "self", ".", "truncated_factor", "=", "cfgs", ".", "truncated_factor", "# 1", "\n", "self", ".", "ema", "=", "cfgs", ".", "ema", "# True", "\n", "self", ".", "latent_op", "=", "cfgs", ".", "latent_op", "# False", "\n", "self", ".", "latent_op_rate", "=", "cfgs", ".", "latent_op_rate", "# NA", "\n", "self", ".", "latent_op_step", "=", "cfgs", ".", "latent_op_step", "# NA", "\n", "self", ".", "latent_op_step4eval", "=", "cfgs", ".", "latent_op_step4eval", "#NA", "\n", "self", ".", "latent_op_alpha", "=", "cfgs", ".", "latent_op_alpha", "# NA", "\n", "self", ".", "latent_op_beta", "=", "cfgs", ".", "latent_op_beta", "#NA", "\n", "self", ".", "latent_norm_reg_weight", "=", "cfgs", ".", "latent_norm_reg_weight", "#NA", "\n", "\n", "self", ".", "global_rank", "=", "global_rank", "# global_rank = local_rank", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "bn_stat_OnTheFly", "=", "bn_stat_OnTheFly", "\n", "self", ".", "print_every", "=", "cfgs", ".", "print_every", "# 100", "\n", "self", ".", "save_every", "=", "cfgs", ".", "save_every", "# 200", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "# checkpoint folder", "\n", "self", ".", "evaluate", "=", "cfgs", ".", "eval", "# main args eval = True", "\n", "self", ".", "mu", "=", "mu", "# mu, sigma = prepare_inception_moments(...)", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "best_fid", "=", "best_fid", "# 0", "\n", "self", ".", "best_fid_checkpoint_path", "=", "best_fid_checkpoint_path", "# None", "\n", "self", ".", "distributed_data_parallel", "=", "cfgs", ".", "distributed_data_parallel", "# False", "\n", "self", ".", "mixed_precision", "=", "cfgs", ".", "mixed_precision", "# False", "\n", "self", ".", "synchronized_bn", "=", "cfgs", ".", "synchronized_bn", "# ? False", "\n", "\n", "self", ".", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "self", ".", "l2_loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "ce_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "policy", "=", "\"color,translation,cutout\"", "\n", "self", ".", "sampler", "=", "define_sampler", "(", "self", ".", "dataset_name", ",", "self", ".", "conditional_strategy", ",", "self", ".", "batch_size", ",", "self", ".", "num_classes", ")", "#\"class_order_all\"", "\n", "self", ".", "counter", "=", "0", "\n", "\n", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "opt_encoder", "=", "opt_encoder", "\n", "#self.encoder = torch.nn.DataParallel(encoder.Encoder(isize=32, nz=80, nc=3, ndf=64), device_ids=[0,1]).to(self.local_rank)", "\n", "#self.vae = torch.nn.DataParallel(encoder.VAE(), device_ids=[0]).to(self.local_rank)", "\n", "#self.opt_encoder = torch.optim.Adam([{'params':self.encoder.parameters()},{'params':self.vae.parameters()}], self.cfgs.g_lr, [self.cfgs.beta1, self.cfgs.beta2], eps=1e-6)", "\n", "self", ".", "ssim", "=", "ssim_package", ".", "SSIM", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "tensorboard_root", "=", "\"./results\"", "\n", "#self.writer =  SummaryWriter(self.tensorboard_root)", "\n", "\n", "\n", "if", "self", ".", "distributed_data_parallel", ":", "self", ".", "group", "=", "dist", ".", "new_group", "(", "[", "n", "for", "n", "in", "range", "(", "self", ".", "n_gpus", ")", "]", ")", "\n", "if", "self", ".", "mixed_precision", ":", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "#if self.ada: self.adtv_aug = Adaptive_Augment(self.prev_ada_p, self.ada_target, self.ada_length, self.batch_size, self.local_rank)", "\n", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", "]", ":", "\n", "\t\t\t", "if", "isinstance", "(", "self", ".", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t", "self", ".", "embedding_layer", "=", "self", ".", "dis_model", ".", "module", ".", "embedding", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "embedding_layer", "=", "self", ".", "dis_model", ".", "embedding", "\n", "\n", "", "", "if", "self", ".", "conditional_strategy", "==", "'ContraGAN'", ":", "\n", "\t\t\t", "self", ".", "contrastive_criterion", "=", "Conditional_Contrastive_loss", "(", "self", ".", "local_rank", ",", "self", ".", "batch_size", ",", "self", ".", "pos_collected_numerator", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'Proxy_NCA_GAN'", ":", "\n", "\t\t\t", "self", ".", "NCA_criterion", "=", "Proxy_NCA_loss", "(", "self", ".", "local_rank", ",", "self", ".", "embedding_layer", ",", "self", ".", "num_classes", ",", "self", ".", "batch_size", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'NT_Xent_GAN'", ":", "\n", "\t\t\t", "self", ".", "NT_Xent_criterion", "=", "NT_Xent_loss", "(", "self", ".", "local_rank", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pass", "\n", "\n", "", "if", "self", ".", "dataset_name", "==", "\"imagenet\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'valid'", ":", "50000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"tiny_imagenet\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'valid'", ":", "10000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"cifar10\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'test'", ":", "10000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"custom\"", ":", "\n", "\t\t\t", "num_train_images", ",", "num_eval_images", "=", "len", "(", "self", ".", "train_dataset", ".", "data", ")", ",", "len", "(", "self", ".", "eval_dataset", ".", "data", ")", "\n", "self", ".", "num_eval", "=", "{", "'train'", ":", "num_train_images", ",", "'valid'", ":", "num_eval_images", "}", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.train": [[232, 643], ["worker_train_d2D.make_worker.dis_model.train", "worker_train_d2D.make_worker.gen_model.train", "worker_train_d2D.make_worker.d2dis_model.train", "worker_train_d2D.make_worker.encoder.train", "worker_train_d2D.make_worker.vae.train", "iter", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "worker_train_d2D.make_worker.Gen_copy.train", "worker_train_d2D.make_worker.logger.info", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "utils.losses.set_temperature", "range", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "range", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "worker_train_d2D.make_worker.D_optimizer.zero_grad", "worker_train_d2D.make_worker.d2D_optimizer.zero_grad", "range", "worker_train_d2D.make_worker.G_optimizer.zero_grad", "worker_train_d2D.make_worker.opt_encoder.zero_grad", "range", "LOG_FORMAT.format", "worker_train_d2D.make_worker.logger.info", "worker_train_d2D.make_worker.writer.add_scalars", "torch.barrier", "torch.barrier", "torch.barrier", "torch.barrier", "worker_train_d2D.make_worker.scaler.step", "worker_train_d2D.make_worker.scaler.update", "worker_train_d2D.make_worker.D_optimizer.step", "worker_train_d2D.make_worker.d2D_optimizer.step", "worker_train_d2D.make_worker.dis_model.parameters", "utils.misc.calculate_all_sn", "utils.misc.calculate_all_sn", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.scaler.step", "worker_train_d2D.make_worker.scaler.update", "worker_train_d2D.make_worker.G_optimizer.step", "worker_train_d2D.make_worker.opt_encoder.step", "worker_train_d2D.make_worker.Gen_ema.update", "worker_train_d2D.make_worker.gen_model.eval", "worker_train_d2D.make_worker.gen_model", "worker_train_d2D.make_worker.gen_model", "worker_train_d2D.make_worker.writer.add_image", "worker_train_d2D.make_worker.writer.add_image", "worker_train_d2D.make_worker.writer.add_image", "worker_train_d2D.make_worker.writer.add_image", "worker_train_d2D.make_worker.writer.add_image", "worker_train_d2D.make_worker.writer.add_image", "worker_train_d2D.make_worker.writer.add_image", "worker_train_d2D.make_worker.gen_model.train", "utils.misc.calculate_all_sn", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.writer.add_scalar", "worker_train_d2D.make_worker.evaluation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "next", "utils.diff_aug.DiffAugment.to", "real_labels.to", "worker_train_d2D.make_worker.gen_model", "random.randint", "random.randint", "random.randint", "random.randint", "worker_train_d2D.make_worker.gen_model", "worker_train_d2D.make_worker.gen_model", "worker_train_d2D.make_worker.D_loss", "worker_train_d2D.make_worker.d2D_loss", "worker_train_d2D.make_worker.scaler.scale().backward", "worker_train_d2D.make_worker.backward", "p.data.clamp_", "worker_train_d2D.make_worker.gen_model", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "worker_train_d2D.make_worker.G_loss", "worker_train_d2D.make_worker.G_loss", "worker_train_d2D.make_worker.scaler.scale().backward", "gen_acml_loss.backward", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "utils.misc.elapsed_time", "dis_acml_loss_watch.item", "worker_train_d2D.make_worker.item", "gen_acml_loss.item", "worker_train_d2D.make_worker.item", "worker_train_d2D.make_worker.item", "gen_l2_loss_watch.item", "gen_l1_loss.item", "gen_l2_loss_watch.item", "gen_lat_loss.item", "gen_ori_loss.item", "worker_train_d2D.make_worker.item", "gen_acml_loss.item", "worker_train_d2D.make_worker.save", "worker_train_d2D.make_worker.save", "iter", "next", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "utils.diff_aug.DiffAugment", "utils.sample.sample_latents", "worker_train_d2D.make_worker.encoder", "worker_train_d2D.make_worker.vae", "worker_train_d2D.make_worker.encoder", "worker_train_d2D.make_worker.vae", "utils.losses.latent_optimise", "utils.diff_aug.DiffAugment", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "utils.cr_diff_aug.CR_DiffAug", "worker_train_d2D.make_worker.l2_loss", "utils.cr_diff_aug.CR_DiffAug", "utils.cr_diff_aug.CR_DiffAug", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.gen_model", "worker_train_d2D.make_worker.l2_loss", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "utils.sample.sample_latents", "worker_train_d2D.make_worker.encoder", "worker_train_d2D.make_worker.vae", "utils.losses.latent_optimise", "utils.diff_aug.DiffAugment", "worker_train_d2D.make_worker.dis_model", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "worker_train_d2D.make_worker.gen_model", "worker_train_d2D.make_worker.ce_loss", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.d2dis_model", "worker_train_d2D.make_worker.d2dis_model", "worker_train_d2D.make_worker.ce_loss", "worker_train_d2D.make_worker.ce_loss", "utils.cr_diff_aug.CR_DiffAug", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.l2_loss", "utils.losses.calc_derv4gp", "utils.losses.calc_derv4dra", "worker_train_d2D.make_worker.scaler.scale", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.d2dis_model", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.scaler.scale", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.NT_Xent_criterion", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "utils.sample.make_mask", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.ssim", "worker_train_d2D.make_worker.contrastive_criterion", "worker_train_d2D.make_worker.NCA_criterion", "utils.sample.make_mask", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.l2_loss", "worker_train_d2D.make_worker.G_loss", "worker_train_d2D.make_worker.NCA_criterion", "utils.cr_diff_aug.CR_DiffAug", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.contrastive_criterion", "worker_train_d2D.make_worker.G_loss", "worker_train_d2D.make_worker.G_loss", "worker_train_d2D.make_worker.NT_Xent_criterion", "z_log_var.exp"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.set_temperature", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.evaluation", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv4gp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv4dra", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.make_mask", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.make_mask", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug"], ["", "", "def", "train", "(", "self", ",", "current_step", ",", "total_step", ")", ":", "\n", "\t\t", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "self", ".", "d2dis_model", ".", "train", "(", ")", "\n", "self", ".", "encoder", ".", "train", "(", ")", "\n", "self", ".", "vae", ".", "train", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "train", "(", ")", "\n", "\n", "", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "current_step", "\n", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "\n", "ones", "=", "numpy", ".", "ones", "(", "self", ".", "cfgs", ".", "batch_size", ")", "\n", "zeros", "=", "numpy", ".", "zeros", "(", "self", ".", "cfgs", ".", "batch_size", ")", "\n", "y0_wrong_label_airplane", "=", "torch", ".", "from_numpy", "(", "zeros", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "y1_wrong_label_car", "=", "torch", ".", "from_numpy", "(", "ones", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "#self.ada_aug_p = self.adtv_aug.initialize() if self.ada else 'No' # ada adaptive data augmentation", "\n", "self", ".", "ada_aug_p", "=", "'No'", "#self.adtv_aug.initialize() if self.ada else 'No' # ada adaptive data augmentation", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t\t", "real_images_for_gen", "=", "None", "\n", "real_labels_for_gen", "=", "None", "\n", "# ================== TRAIN D ================== #", "\n", "toggle_grad", "(", "self", ".", "dis_model", ",", "on", "=", "True", ",", "freeze_layers", "=", "self", ".", "freeze_layers", ")", "# toggle_grad in misc.py", "\n", "toggle_grad", "(", "self", ".", "d2dis_model", ",", "on", "=", "True", ",", "freeze_layers", "=", "self", ".", "freeze_layers", ")", "\n", "toggle_grad", "(", "self", ".", "gen_model", ",", "on", "=", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "\n", "t", "=", "set_temperature", "(", "self", ".", "conditional_strategy", ",", "self", ".", "tempering_type", ",", "self", ".", "start_temperature", ",", "self", ".", "end_temperature", ",", "step_count", ",", "self", ".", "tempering_step", ",", "total_step", ")", "\n", "\n", "for", "step_index", "in", "range", "(", "self", ".", "d_steps_per_iter", ")", ":", "\n", "\t\t\t\t", "self", ".", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "d2D_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "acml_index", "in", "range", "(", "self", ".", "accumulation_steps", ")", ":", "# self.accumulation_steps = 1", "\n", "\t\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t\t\t\t", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "real_labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "real_images_for_gen", "=", "real_images", "\n", "real_labels_for_gen", "=", "real_labels", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "# amp = automatic mixed precision package torch.cuda.amp", "\n", "\t\t\t\t\t\t", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "real_images", "=", "DiffAugment", "(", "real_images", ",", "policy", "=", "self", ".", "policy", ")", "\n", "# if self.ada:", "\n", "#     real_images, _ = augment(real_images, self.ada_aug_p)", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "# zs, fake_labels = sample_latents(self.prior, self.batch_size, self.z_dim, 1, self.num_classes,", "\n", "#                                  None, self.local_rank)", "\n", "\t\t\t\t\t\t\t", "latent_i", "=", "self", ".", "encoder", "(", "real_images", ")", "\n", "z_mean", ",", "z_log_var", ",", "zs", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "\n", "latent_i_ori", "=", "self", ".", "encoder", "(", "real_images_for_gen", ")", "\n", "z_mean_ori", ",", "z_log_var_ori", ",", "zs_ori", "=", "self", ".", "vae", "(", "latent_i_ori", ")", "\n", "\n", "\n", "fake_labels", "=", "real_labels", "#already to devices", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "fake_images", "=", "self", ".", "gen_model", "(", "zs", ",", "fake_labels", ")", "\n", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels_ori", "=", "self", ".", "gen_model", "(", "zs_ori", ",", "wrong_labels", ")", "\n", "fake_images_2d_ori", "=", "self", ".", "gen_model", "(", "zs_ori", ",", "real_labels", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "fake_images", "=", "DiffAugment", "(", "fake_images", ",", "policy", "=", "self", ".", "policy", ")", "\n", "#fake_images_wrong_labels = DiffAugment(fake_images_wrong_labels_ori, policy=self.policy)", "\n", "# if self.ada:", "\n", "#     fake_images, _ = augment(fake_images, self.ada_aug_p)", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "cls_out_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "\n", "\n", "difference_pos", "=", "real_images_for_gen", "-", "fake_images_2d_ori", "\n", "difference_neg", "=", "real_images_for_gen", "-", "fake_images_wrong_labels_ori", "\n", "dis_out_pos", "=", "self", ".", "d2dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "self", ".", "d2dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "\n", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t", "cls_proxies_real", ",", "cls_embed_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "dis_acml_loss", "=", "self", ".", "D_loss", "(", "dis_out_real", ",", "dis_out_fake", ")", "\n", "d2dis_acml_loss", "=", "self", ".", "d2D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "(", "self", ".", "ce_loss", "(", "cls_out_real", ",", "real_labels", ")", "+", "self", ".", "ce_loss", "(", "cls_out_fake", ",", "fake_labels", ")", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"NT_Xent_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "real_images_aug", "=", "CR_DiffAug", "(", "real_images", ")", "\n", "_", ",", "cls_embed_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "dis_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NT_Xent_criterion", "(", "cls_embed_real", ",", "cls_embed_real_aug", ",", "t", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"Proxy_NCA_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NCA_criterion", "(", "cls_embed_real", ",", "cls_proxies_real", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ContraGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "real_cls_mask", "=", "make_mask", "(", "real_labels", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ")", "\n", "dis_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "contrastive_criterion", "(", "cls_embed_real", ",", "cls_proxies_real", ",", "\n", "real_cls_mask", ",", "real_labels", ",", "t", ",", "self", ".", "margin", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "pass", "\n", "\n", "", "if", "self", ".", "cr", ":", "\n", "\t\t\t\t\t\t\t", "real_images_aug", "=", "CR_DiffAug", "(", "real_images", ")", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_out_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_consistency_loss", "=", "self", ".", "l2_loss", "(", "cls_out_real", ",", "cls_out_real_aug", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t\t", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "_", ",", "cls_embed_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_consistency_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_real", ",", "cls_embed_real_aug", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "consistency_loss", "=", "self", ".", "l2_loss", "(", "dis_out_real", ",", "dis_out_real_aug", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "consistency_loss", "+=", "cls_consistency_loss", "\n", "", "dis_acml_loss", "+=", "self", ".", "cr_lambda", "*", "consistency_loss", "\n", "\n", "", "if", "self", ".", "bcr", ":", "\n", "\t\t\t\t\t\t\t", "real_images_aug", "=", "CR_DiffAug", "(", "real_images", ")", "\n", "fake_images_aug", "=", "CR_DiffAug", "(", "fake_images", ")", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_out_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_out_fake_aug", ",", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "cls_bcr_real_loss", "=", "self", ".", "l2_loss", "(", "cls_out_real", ",", "cls_out_real_aug", ")", "\n", "cls_bcr_fake_loss", "=", "self", ".", "l2_loss", "(", "cls_out_fake", ",", "cls_out_fake_aug", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t\t", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_proxies_real_aug", ",", "cls_embed_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_proxies_fake_aug", ",", "cls_embed_fake_aug", ",", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "cls_bcr_real_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_real", ",", "cls_embed_real_aug", ")", "\n", "cls_bcr_fake_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_fake", ",", "cls_embed_fake_aug", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "bcr_real_loss", "=", "self", ".", "l2_loss", "(", "dis_out_real", ",", "dis_out_real_aug", ")", "\n", "bcr_fake_loss", "=", "self", ".", "l2_loss", "(", "dis_out_fake", ",", "dis_out_fake_aug", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "bcr_real_loss", "+=", "cls_bcr_real_loss", "\n", "bcr_fake_loss", "+=", "cls_bcr_fake_loss", "\n", "", "dis_acml_loss", "+=", "self", ".", "real_lambda", "*", "bcr_real_loss", "+", "self", ".", "fake_lambda", "*", "bcr_fake_loss", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_zaug", "=", "self", ".", "gen_model", "(", "zs_t", ",", "fake_labels", ")", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_out_fake_zaug", ",", "dis_out_fake_zaug", "=", "self", ".", "dis_model", "(", "fake_images_zaug", ",", "fake_labels", ")", "\n", "cls_zcr_dis_loss", "=", "self", ".", "l2_loss", "(", "cls_out_fake", ",", "cls_out_fake_zaug", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t\t", "dis_out_fake_zaug", "=", "self", ".", "dis_model", "(", "fake_images_zaug", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_proxies_fake_zaug", ",", "cls_embed_fake_zaug", ",", "dis_out_fake_zaug", "=", "self", ".", "dis_model", "(", "fake_images_zaug", ",", "fake_labels", ")", "\n", "cls_zcr_dis_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_fake", ",", "cls_embed_fake_zaug", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "zcr_dis_loss", "=", "self", ".", "l2_loss", "(", "dis_out_fake", ",", "dis_out_fake_zaug", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "zcr_dis_loss", "+=", "cls_zcr_dis_loss", "\n", "", "dis_acml_loss", "+=", "self", ".", "dis_lambda", "*", "zcr_dis_loss", "\n", "\n", "", "if", "self", ".", "gradient_penalty_for_dis", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "self", ".", "gradient_penalty_lambda", "*", "calc_derv4gp", "(", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "real_images", ",", "\n", "fake_images", ",", "real_labels", ",", "self", ".", "local_rank", ")", "\n", "", "if", "self", ".", "deep_regret_analysis_for_dis", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "self", ".", "regret_penalty_lambda", "*", "calc_derv4dra", "(", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "real_images", ",", "\n", "real_labels", ",", "self", ".", "local_rank", ")", "\n", "# if self.ada:", "\n", "#     self.ada_aug_p = self.adtv_aug.update(dis_out_real)", "\n", "\n", "", "dis_acml_loss_watch", "=", "dis_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "d2dis_acml_loss", "=", "d2dis_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "dis_acml_loss", "=", "dis_acml_loss", "/", "self", ".", "accumulation_steps", "+", "d2dis_acml_loss", "\n", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t\t", "self", ".", "scaler", ".", "scale", "(", "dis_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis_acml_loss", ".", "backward", "(", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t", "self", ".", "scaler", ".", "step", "(", "self", ".", "D_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "D_optimizer", ".", "step", "(", ")", "\n", "self", ".", "d2D_optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "weight_clipping_for_dis", ":", "\n", "\t\t\t\t\t", "for", "p", "in", "self", ".", "dis_model", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t\t\t", "p", ".", "data", ".", "clamp_", "(", "-", "self", ".", "weight_clipping_bound", ",", "self", ".", "weight_clipping_bound", ")", "\n", "\n", "", "", "", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "step_count", "!=", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "if", "self", ".", "d_spectral_norm", ":", "\n", "\t\t\t\t\t", "dis_sigmas", "=", "calculate_all_sn", "(", "self", ".", "dis_model", ")", "\n", "d2dis_sigmas", "=", "calculate_all_sn", "(", "self", ".", "d2dis_model", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_dis'", ",", "dis_sigmas", ",", "step_count", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_d2dis'", ",", "d2dis_sigmas", ",", "step_count", ")", "\n", "# ================== TRAIN G ================== #", "\n", "", "", "toggle_grad", "(", "self", ".", "dis_model", ",", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "toggle_grad", "(", "self", ".", "d2dis_model", ",", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "toggle_grad", "(", "self", ".", "gen_model", ",", "True", ",", "freeze_layers", "=", "-", "1", ")", "\n", "\n", "for", "step_index", "in", "range", "(", "self", ".", "g_steps_per_iter", ")", ":", "\n", "\t\t\t\t", "self", ".", "G_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "opt_encoder", ".", "zero_grad", "(", ")", "\n", "for", "acml_step", "in", "range", "(", "self", ".", "accumulation_steps", ")", ":", "#accumulation_steps=1", "\n", "\n", "\n", "\n", "\t\t\t\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "# loading data", "\n", "# try:", "\n", "#     real_images, real_labels = next(train_iter)", "\n", "# except StopIteration:", "\n", "#     train_iter = iter(self.train_dataloader)", "\n", "#     real_images, real_labels = next(train_iter)", "\n", "\n", "\t\t\t\t\t\t", "real_images", ",", "real_labels", "=", "real_images_for_gen", ",", "real_labels_for_gen", "\n", "\n", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "#zs, fake_labels = sample_latents(self.prior, self.batch_size, self.z_dim, 1, self.num_classes,", "\n", "#                                None, self.local_rank)", "\n", "\t\t\t\t\t\t\t", "latent_i", "=", "self", ".", "encoder", "(", "real_images", ")", "\n", "z_mean", ",", "z_log_var", ",", "zs", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "fake_labels", "=", "real_labels", "\n", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "transport_cost", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "True", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "fake_images_ori", "=", "self", ".", "gen_model", "(", "zs", ",", "fake_labels", ")", "\n", "#wrong_labels = ((real_labels + Int_Modi) % 10).to(self.local_rank)", "\n", "\n", "#fake_images_wrong_labels  = self.gen_model(zs, wrong_labels)", "\n", "\n", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "fake_images", "=", "DiffAugment", "(", "fake_images_ori", ",", "policy", "=", "self", ".", "policy", ")", "\n", "# if self.ada:", "\n", "#     fake_images, _ = augment(fake_images, self.ada_aug_p)", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "dis_out_pos", "=", "self", ".", "d2dis_model", "(", "(", "real_images", "-", "fake_images_ori", ")", ",", "fake_labels", ")", "\n", "#dis_out_neg = self.d2dis_model((real_images - fake_images_wrong_labels), wrong_labels)", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t", "fake_cls_mask", "=", "make_mask", "(", "fake_labels", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ")", "\n", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "", "loss_img_ssim", "=", "-", "torch", ".", "log", "(", "self", ".", "ssim", "(", "fake_images_ori", ",", "real_images", ")", "+", "1e-15", ")", "\n", "loss_lat", "=", "0.5", "*", "(", "z_log_var", ".", "exp", "(", ")", "+", "z_mean", "**", "2", "-", "1", "-", "z_log_var", ")", ".", "mean", "(", ")", "\n", "loss_img_l2", "=", "torch", ".", "abs", "(", "(", "fake_images_ori", "-", "real_images", ")", "**", "2", ")", ".", "mean", "(", ")", "#torch.nn.MSELoss(fake_images_ori, real_images).mean() #t", "\n", "loss_img_l1", "=", "torch", ".", "abs", "(", "fake_images_ori", "-", "real_images", ")", ".", "mean", "(", ")", "\n", "\n", "gen_acml_loss_watch_g_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "\n", "gen_acml_loss_watch_g_loss_2", "=", "self", ".", "G_loss", "(", "dis_out_pos", ")", "\n", "\n", "gen_l2_loss_watch", "=", "loss_img_l2", "\n", "gen_ssim_loss_watch", "=", "5", "*", "loss_img_ssim", "\n", "gen_lat_loss", "=", "loss_lat", "\n", "gen_l1_loss", "=", "loss_img_l1", "\n", "gen_ori_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "+", "loss_img_l2", "+", "5", "*", "loss_img_ssim", "+", "loss_lat", "+", "loss_img_l1", "\n", "\n", "gen_acml_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "+", "self", ".", "G_loss", "(", "dis_out_pos", ")", "+", "loss_img_l2", "+", "5", "*", "loss_img_ssim", "+", "loss_lat", "+", "loss_img_l1", "\n", "\n", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "transport_cost", "*", "self", ".", "latent_norm_reg_weight", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_zaug", "=", "self", ".", "gen_model", "(", "zs_t", ",", "fake_labels", ")", "\n", "zcr_gen_loss", "=", "-", "1", "*", "self", ".", "l2_loss", "(", "fake_images", ",", "fake_images_zaug", ")", "\n", "gen_acml_loss", "+=", "self", ".", "gen_lambda", "*", "zcr_gen_loss", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "ce_loss", "(", "cls_out_fake", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ContraGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "contrastive_criterion", "(", "cls_embed_fake", ",", "cls_proxies_fake", ",", "fake_cls_mask", ",", "fake_labels", ",", "t", ",", "self", ".", "margin", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"Proxy_NCA_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NCA_criterion", "(", "cls_embed_fake", ",", "cls_proxies_fake", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"NT_Xent_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_aug", "=", "CR_DiffAug", "(", "fake_images", ")", "\n", "_", ",", "cls_embed_fake_aug", ",", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NT_Xent_criterion", "(", "cls_embed_fake", ",", "cls_embed_fake_aug", ",", "t", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "pass", "\n", "\n", "", "gen_acml_loss", "=", "gen_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "\n", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t\t", "self", ".", "scaler", ".", "scale", "(", "gen_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "gen_acml_loss", ".", "backward", "(", ")", "\n", "\n", "", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t", "self", ".", "scaler", ".", "step", "(", "self", ".", "G_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "G_optimizer", ".", "step", "(", ")", "\n", "self", ".", "opt_encoder", ".", "step", "(", ")", "\n", "\n", "# if ema is True: we update parameters of the Gen_copy in adaptive way.", "\n", "", "if", "self", ".", "ema", ":", "\n", "\t\t\t\t\t", "self", ".", "Gen_ema", ".", "update", "(", "step_count", ")", "\n", "\n", "", "step_count", "+=", "1", "\n", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "gen_model", ".", "eval", "(", ")", "\n", "wrong_label_airplane", "=", "self", ".", "gen_model", "(", "zs", ",", "y0_wrong_label_airplane", ")", "\n", "wrong_label_car", "=", "self", ".", "gen_model", "(", "zs", ",", "y1_wrong_label_car", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'fake'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "fake_images_ori", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'real'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "real_images", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'fake_aug'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "fake_images", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'wrong_label_airplane'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "wrong_label_airplane", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'wrong_label_car'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "wrong_label_car", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'difference_pos'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "difference_pos", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'difference_neg'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "difference_neg", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "\n", "\n", "", "", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "log_message", "=", "LOG_FORMAT", ".", "format", "(", "step", "=", "step_count", ",", "\n", "progress", "=", "step_count", "/", "total_step", ",", "\n", "elapsed", "=", "elapsed_time", "(", "self", ".", "start_time", ")", ",", "\n", "# temperature=t,", "\n", "# ada_p=self.ada_aug_p,", "\n", "dis_loss", "=", "dis_acml_loss_watch", ".", "item", "(", ")", ",", "\n", "d2dis_loss", "=", "d2dis_acml_loss", ".", "item", "(", ")", ",", "\n", "gen_loss", "=", "gen_acml_loss", ".", "item", "(", ")", ",", "\n", "gen_acml_loss_watch_g_loss", "=", "gen_acml_loss_watch_g_loss", ".", "item", "(", ")", ",", "\n", "gen_acml_loss_watch_g_loss_2", "=", "gen_acml_loss_watch_g_loss_2", ".", "item", "(", ")", ",", "\n", "gen_l2_loss_watch", "=", "gen_l2_loss_watch", ".", "item", "(", ")", ",", "\n", "gen_l1_loss", "=", "gen_l1_loss", ".", "item", "(", ")", ",", "\n", "gen_ssim_loss_watch", "=", "gen_l2_loss_watch", ".", "item", "(", ")", ",", "\n", "gen_lat_loss", "=", "gen_lat_loss", ".", "item", "(", ")", ",", "\n", "gen_ori_loss", "=", "gen_ori_loss", ".", "item", "(", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_message", ")", "\n", "\n", "\n", "if", "self", ".", "g_spectral_norm", ":", "\n", "\t\t\t\t\t", "gen_sigmas", "=", "calculate_all_sn", "(", "self", ".", "gen_model", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_gen'", ",", "gen_sigmas", ",", "step_count", ")", "\n", "\n", "", "self", ".", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", ",", "\n", "'generator'", ":", "gen_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "ada", ":", "\n", "\t\t\t\t\t", "self", ".", "writer", ".", "add_scalar", "(", "'ada_p'", ",", "self", ".", "ada_aug_p", ",", "step_count", ")", "\n", "\n", "", "", "if", "step_count", "%", "self", ".", "save_every", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t\t", "if", "self", ".", "evaluate", ":", "\n", "\t\t\t\t\t", "is_best", "=", "self", ".", "evaluation", "(", "step_count", ",", "False", ",", "\"N/A\"", ")", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "save", "(", "step_count", ",", "is_best", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "save", "(", "step_count", ",", "False", ")", "\n", "\n", "", "", "if", "self", ".", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t\t\t", "dist", ".", "barrier", "(", "self", ".", "group", ")", "\n", "\n", "", "", "return", "step_count", "-", "1", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.save": [[647, 747], ["worker_train_d2D.make_worker.dis_model.eval", "worker_train_d2D.make_worker.d2dis_model.eval", "worker_train_d2D.make_worker.gen_model.eval", "worker_train_d2D.make_worker.encoder.eval", "worker_train_d2D.make_worker.vae.eval", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "worker_train_d2D.make_worker.dis_model.train", "worker_train_d2D.make_worker.d2dis_model.train", "worker_train_d2D.make_worker.gen_model.train", "worker_train_d2D.make_worker.encoder.train", "worker_train_d2D.make_worker.vae.train", "worker_train_d2D.make_worker.Gen_copy.eval", "isinstance", "isinstance", "gen.state_dict", "worker_train_d2D.make_worker.G_optimizer.state_dict", "dis.state_dict", "worker_train_d2D.make_worker.D_optimizer.state_dict", "d2dis.state_dict", "worker_train_d2D.make_worker.d2D_optimizer.state_dict", "enc_save.state_dict", "worker_train_d2D.make_worker.opt_encoder.state_dict", "vae_save.state_dict", "len", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "worker_train_d2D.make_worker.Gen_copy.train", "glob.glob", "len", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "gen_copy.state_dict", "len", "utils.misc.find_and_remove", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "worker_train_d2D.make_worker.logger.info", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "str", "str", "str", "str", "str", "glob.glob", "glob.glob", "len", "utils.misc.find_and_remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "str", "str", "str", "str", "str", "os.path.join", "glob.glob", "str", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "def", "save", "(", "self", ",", "step", ",", "is_best", ")", ":", "\n", "\t\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "self", ".", "d2dis_model", ".", "eval", "(", ")", "\n", "self", ".", "gen_model", ".", "eval", "(", ")", "\n", "self", ".", "encoder", ".", "eval", "(", ")", "\n", "self", ".", "vae", ".", "eval", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "eval", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "gen_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "gen_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t", "gen", ",", "dis", "=", "self", ".", "gen_model", ".", "module", ",", "self", ".", "dis_model", ".", "module", "\n", "d2dis", "=", "self", ".", "d2dis_model", ".", "module", "\n", "enc_save", "=", "self", ".", "encoder", ".", "module", "\n", "vae_save", "=", "self", ".", "vae", ".", "module", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t\t", "gen_copy", "=", "self", ".", "Gen_copy", ".", "module", "\n", "", "", "else", ":", "\n", "\t\t\t", "gen", ",", "dis", "=", "self", ".", "gen_model", ",", "self", ".", "dis_model", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t\t", "gen_copy", "=", "self", ".", "Gen_copy", "\n", "\n", "", "", "g_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "gen", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "G_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", "}", "\n", "\n", "d_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "D_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "d2d_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "d2dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "d2D_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "e_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "enc_save", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "opt_encoder", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "v_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "vae_save", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d2d_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "e_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "v_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "g_states", ",", "g_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "d2d_states", ",", "d2d_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "e_states", ",", "e_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "v_states", ",", "v_checkpoint_output_path", ")", "\n", "\n", "if", "when", "==", "\"best\"", ":", "\n", "\t\t\t", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step*.pth\"", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "", "g_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d2d_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "e_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "v_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_states", ",", "g_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "d2d_states", ",", "d2d_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "e_states", ",", "e_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "v_states", ",", "v_checkpoint_output_path_", ")", "\n", "", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "g_ema_states", "=", "{", "'state_dict'", ":", "gen_copy", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_ema_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_ema_states", ",", "g_ema_checkpoint_output_path", ")", "\n", "\n", "if", "when", "==", "\"best\"", ":", "\n", "\t\t\t\t", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_ema_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_ema_states", ",", "g_ema_checkpoint_output_path_", ")", "\n", "\n", "", "", "if", "self", ".", "logger", ":", "\n", "\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "self", ".", "checkpoint_dir", ")", ")", "\n", "\n", "", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "self", ".", "d2dis_model", ".", "train", "(", ")", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "self", ".", "encoder", ".", "train", "(", ")", "\n", "self", ".", "vae", ".", "train", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "train", "(", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.evaluation": [[751, 830], ["worker_train_d2D.make_worker.dis_model.eval", "utils.misc.change_generator_mode", "metrics.FID.calculate_fid_score", "metrics.IS.calculate_incep_score", "metrics.F_beta.calculate_f_beta_score", "utils.misc.plot_pr_curve", "worker_train_d2D.make_worker.dis_model.train", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "worker_train_d2D.make_worker.logger.info", "worker_train_d2D.make_worker.embedding_layer", "worker_train_d2D.make_worker.cosine_similarity", "utils.misc.plot_sim_heatmap", "metrics.Accuracy.calculate_accuracy", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.writer.add_figure", "worker_train_d2D.make_worker.logger.info", "worker_train_d2D.make_worker.logger.info", "worker_train_d2D.make_worker.logger.info", "worker_train_d2D.make_worker.logger.info", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to.detach().cpu().numpy", "torch.tensor().to.detach().cpu().numpy", "torch.tensor().to.detach().cpu().numpy", "torch.tensor().to.detach().cpu().numpy", "worker_train_d2D.make_worker.unsqueeze", "worker_train_d2D.make_worker.unsqueeze", "worker_train_d2D.make_worker.detach().cpu().numpy", "metrics.Accuracy.calculate_accuracy", "worker_train_d2D.make_worker.writer.add_scalars", "worker_train_d2D.make_worker.writer.add_figure", "worker_train_d2D.make_worker.logger.info", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to.detach().cpu", "torch.tensor().to.detach().cpu", "torch.tensor().to.detach().cpu", "torch.tensor().to.detach().cpu", "worker_train_d2D.make_worker.detach().cpu", "str", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "str", "str", "str", "random.sample", "random.sample", "random.sample", "random.sample", "torch.tensor().to.detach", "torch.tensor().to.detach", "torch.tensor().to.detach", "torch.tensor().to.detach", "worker_train_d2D.make_worker.detach", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_fid_score", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.calculate_incep_score", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.calculate_f_beta_score", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_pr_curve", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_sim_heatmap", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.Accuracy.calculate_accuracy", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.Accuracy.calculate_accuracy"], ["", "", "def", "evaluation", "(", "self", ",", "step", ",", "standing_statistics", ",", "standing_step", ")", ":", "# standing_statistics=False standing_step=NA", "\n", "\t\t", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "\"Start Evaluation ({step} Step): {run_name}\"", ".", "format", "(", "step", "=", "step", ",", "run_name", "=", "self", ".", "run_name", ")", ")", "\n", "is_best", "=", "False", "\n", "num_split", ",", "num_run4PR", ",", "num_cluster4PR", ",", "beta4PR", "=", "1", ",", "10", ",", "20", ",", "8", "\n", "\n", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "# change_generator_mode is in misc.py", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "fid_score", ",", "self", ".", "m1", ",", "self", ".", "s1", "=", "calculate_fid_score", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "inception_model", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step4eval", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "self", ".", "logger", ",", "self", ".", "mu", ",", "self", ".", "sigma", ",", "self", ".", "run_name", ")", "\n", "\n", "kl_score", ",", "kl_std", "=", "calculate_incep_score", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "inception_model", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step4eval", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "num_split", ",", "self", ".", "local_rank", ",", "self", ".", "logger", ")", "\n", "\n", "precision", ",", "recall", ",", "f_beta", ",", "f_beta_inv", "=", "calculate_f_beta_score", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "inception_model", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "num_run4PR", ",", "num_cluster4PR", ",", "beta4PR", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "\n", "self", ".", "latent_op_step4eval", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "self", ".", "logger", ")", "\n", "PR_Curve", "=", "plot_pr_curve", "(", "precision", ",", "recall", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", "]", ":", "\n", "\t\t\t\t", "if", "self", ".", "dataset_name", "==", "\"cifar10\"", ":", "\n", "\t\t\t\t\t", "classes", "=", "torch", ".", "tensor", "(", "[", "c", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "labels", "=", "[", "\"airplane\"", ",", "\"automobile\"", ",", "\"bird\"", ",", "\"cat\"", ",", "\"deer\"", ",", "\"dog\"", ",", "\"frog\"", ",", "\"horse\"", ",", "\"ship\"", ",", "\"truck\"", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "num_classes", ">", "10", ":", "\n", "\t\t\t\t\t\t", "classes", "=", "torch", ".", "tensor", "(", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "num_classes", ")", ",", "10", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "classes", "=", "torch", ".", "tensor", "(", "[", "c", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "", "labels", "=", "classes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "proxies", "=", "self", ".", "embedding_layer", "(", "classes", ")", "\n", "sim_p", "=", "self", ".", "cosine_similarity", "(", "proxies", ".", "unsqueeze", "(", "1", ")", ",", "proxies", ".", "unsqueeze", "(", "0", ")", ")", "\n", "sim_heatmap", "=", "plot_sim_heatmap", "(", "sim_p", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "labels", ",", "labels", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "D_loss", ".", "__name__", "!=", "\"loss_wgan_dis\"", ":", "\n", "\t\t\t\t", "real_train_acc", ",", "fake_acc", "=", "calculate_accuracy", "(", "self", ".", "train_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "D_loss", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "cr", "=", "self", ".", "cr", ",", "logger", "=", "self", ".", "logger", ",", "eval_generated_sample", "=", "True", ")", "\n", "\n", "if", "self", ".", "eval_type", "==", "'train'", ":", "\n", "\t\t\t\t\t", "acc_dict", "=", "{", "'real_train'", ":", "real_train_acc", ",", "'fake'", ":", "fake_acc", "}", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_eval_acc", "=", "calculate_accuracy", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "D_loss", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "cr", "=", "self", ".", "cr", ",", "logger", "=", "self", ".", "logger", ",", "eval_generated_sample", "=", "False", ")", "\n", "acc_dict", "=", "{", "'real_train'", ":", "real_train_acc", ",", "'real_valid'", ":", "real_eval_acc", ",", "'fake'", ":", "fake_acc", "}", "\n", "\n", "", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "writer", ".", "add_scalars", "(", "'Accuracy'", ",", "acc_dict", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "best_fid", "is", "None", ":", "\n", "\t\t\t\t", "self", ".", "best_fid", ",", "self", ".", "best_step", ",", "is_best", ",", "f_beta_best", ",", "f_beta_inv_best", "=", "fid_score", ",", "step", ",", "True", ",", "f_beta", ",", "f_beta_inv", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "fid_score", "<=", "self", ".", "best_fid", ":", "\n", "\t\t\t\t\t", "self", ".", "best_fid", ",", "self", ".", "best_step", ",", "is_best", ",", "f_beta_best", ",", "f_beta_inv_best", "=", "fid_score", ",", "step", ",", "True", ",", "f_beta", ",", "f_beta_inv", "\n", "\n", "", "", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "writer", ".", "add_scalars", "(", "'FID score'", ",", "{", "'using {type} moments'", ".", "format", "(", "type", "=", "self", ".", "eval_type", ")", ":", "fid_score", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'F_beta score'", ",", "{", "'{num} generated images'", ".", "format", "(", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ")", ":", "f_beta", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'F_beta_inv score'", ",", "{", "'{num} generated images'", ".", "format", "(", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ")", ":", "f_beta_inv", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'IS score'", ",", "{", "'{num} generated images'", ".", "format", "(", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ")", ":", "kl_score", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_figure", "(", "'PR_Curve'", ",", "PR_Curve", ",", "global_step", "=", "step", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", "]", ":", "\n", "\t\t\t\t\t", "self", ".", "writer", ".", "add_figure", "(", "'Similarity_heatmap'", ",", "sim_heatmap", ",", "global_step", "=", "step", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'F_{beta} score (Step: {step}, Using {type} images): {F_beta}'", ".", "format", "(", "beta", "=", "beta4PR", ",", "step", "=", "step", ",", "type", "=", "self", ".", "eval_type", ",", "F_beta", "=", "f_beta", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'F_1/{beta} score (Step: {step}, Using {type} images): {F_beta_inv}'", ".", "format", "(", "beta", "=", "beta4PR", ",", "step", "=", "step", ",", "type", "=", "self", ".", "eval_type", ",", "F_beta_inv", "=", "f_beta_inv", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'FID score (Step: {step}, Using {type} moments): {FID}'", ".", "format", "(", "step", "=", "step", ",", "type", "=", "self", ".", "eval_type", ",", "FID", "=", "fid_score", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Inception score (Step: {step}, {num} generated images): {IS}'", ".", "format", "(", "step", "=", "step", ",", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ",", "IS", "=", "kl_score", ")", ")", "\n", "if", "self", ".", "train", ":", "\n", "\t\t\t\t\t", "self", ".", "logger", ".", "info", "(", "'Best FID score (Step: {step}, Using {type} moments): {FID}'", ".", "format", "(", "step", "=", "self", ".", "best_step", ",", "type", "=", "self", ".", "eval_type", ",", "FID", "=", "self", ".", "best_fid", ")", ")", "\n", "\n", "", "", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "", "return", "is_best", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.save_images": [[834, 853], ["worker_train_d2D.make_worker.logger.info", "worker_train_d2D.make_worker.dis_model.eval", "utils.misc.change_generator_mode", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "utils.misc.save_images_png", "utils.misc.save_images_npz"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_png", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_npz"], ["", "def", "save_images", "(", "self", ",", "is_generate", ",", "standing_statistics", ",", "standing_step", ",", "png", "=", "True", ",", "npz", "=", "True", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start save images....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "if", "png", ":", "\n", "\t\t\t\t", "save_images_png", "(", "self", ".", "run_name", ",", "self", ".", "eval_dataloader", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "self", ".", "num_classes", ",", "generator", ",", "\n", "self", ".", "dis_model", ",", "is_generate", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "\n", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "", "if", "npz", ":", "\n", "\t\t\t\t", "save_images_npz", "(", "self", ".", "run_name", ",", "self", ".", "eval_dataloader", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "self", ".", "num_classes", ",", "generator", ",", "\n", "self", ".", "dis_model", ",", "is_generate", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "\n", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.run_image_visualization": [[857, 884], ["worker_train_d2D.make_worker.logger.info", "utils.misc.change_generator_mode", "utils.misc.change_generator_mode.", "utils.misc.plot_img_canvas", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "utils.misc.change_generator_mode.detach().cpu", "utils.misc.change_generator_mode.detach"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_image_visualization", "(", "self", ",", "nrow", ",", "ncol", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start visualize images....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "None", ",", "\n", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "\n", "", "generated_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "plot_img_canvas", "(", "(", "generated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/generated_canvas.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.run_nearest_neighbor": [[888, 938], ["worker_train_d2D.make_worker.logger.info", "utils.misc.change_generator_mode", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "tqdm.tqdm.tqdm", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "range", "utils.misc.generate_images_for_KNN", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "utils.sample.target_class_sampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "next", "real_images.to.to.to", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "numpy.concatenate", "numpy.concatenate", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "real_images.to.to.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.misc.plot_img_canvas", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "list", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "real_images.to.to.detach().cpu", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "real_images.to.to.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "real_images.to.to.detach", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "real_images.to.to.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "real_images.to.to.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.generate_images_for_KNN", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.target_class_sampler", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas"], ["", "", "def", "run_nearest_neighbor", "(", "self", ",", "nrow", ",", "ncol", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start nearest neighbor analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "resnet50_model", "=", "torch", ".", "hub", ".", "load", "(", "'pytorch/vision:v0.6.0'", ",", "'resnet50'", ",", "pretrained", "=", "True", ")", "\n", "resnet50_conv", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet50_model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "if", "self", ".", "n_gpus", ">", "1", ":", "\n", "\t\t\t\t", "resnet50_conv", "=", "DataParallel", "(", "resnet50_conv", ",", "output_device", "=", "self", ".", "local_rank", ")", "\n", "", "resnet50_conv", ".", "eval", "(", ")", "\n", "\n", "for", "c", "in", "tqdm", "(", "range", "(", "self", ".", "num_classes", ")", ")", ":", "\n", "\t\t\t\t", "fake_images", ",", "fake_labels", "=", "generate_images_for_KNN", "(", "self", ".", "batch_size", ",", "c", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "fake_image", "=", "torch", ".", "unsqueeze", "(", "fake_images", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "fake_anchor_embedding", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "(", "fake_image", "+", "1", ")", "/", "2", ")", ")", "\n", "\n", "num_samples", ",", "target_sampler", "=", "target_class_sampler", "(", "self", ".", "train_dataset", ",", "c", ")", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "num_samples", ">=", "self", ".", "batch_size", "else", "num_samples", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "sampler", "=", "target_sampler", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_samples", "//", "batch_size", ")", ":", "\n", "\t\t\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "real_images", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "real_embeddings", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ")", "\n", "if", "batch_idx", "==", "0", ":", "\n", "\t\t\t\t\t\t", "distances", "=", "torch", ".", "square", "(", "real_embeddings", "-", "fake_anchor_embedding", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "holder", "=", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "distances", "=", "np", ".", "concatenate", "(", "[", "distances", ",", "torch", ".", "square", "(", "real_embeddings", "-", "fake_anchor_embedding", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "holder", "=", "np", ".", "concatenate", "(", "[", "holder", ",", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "nearest_indices", "=", "(", "-", "distances", ")", ".", "argsort", "(", ")", "[", "-", "(", "ncol", "-", "1", ")", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "c", "%", "nrow", "==", "0", ":", "\n", "\t\t\t\t\t", "canvas", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "c", "%", "nrow", "==", "nrow", "-", "1", ":", "\n", "\t\t\t\t\t", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "plot_img_canvas", "(", "(", "torch", ".", "from_numpy", "(", "canvas", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/Fake_anchor_{ncol}NN_{cls}_classes.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ",", "ncol", "=", "ncol", ",", "cls", "=", "c", "+", "1", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.run_linear_interpolation": [[942, 979], ["worker_train_d2D.make_worker.logger.info", "utils.misc.change_generator_mode", "tqdm.tqdm.tqdm", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "range", "utils.misc.change_generator_mode.", "utils.misc.plot_img_canvas", "isinstance", "isinstance", "int", "int", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.biggan_utils.interp().view.repeat().view", "utils.biggan_utils.interp().view", "utils.sample.sample_1hot", "shared().view", "utils.biggan_utils.interp().view.repeat().view", "utils.biggan_utils.interp().view", "utils.biggan_utils.interp().view.repeat", "utils.biggan_utils.interp", "shared", "utils.biggan_utils.interp().view.repeat", "utils.biggan_utils.interp", "utils.misc.change_generator_mode.detach().cpu", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "shared().view", "shared().view", "utils.misc.change_generator_mode.detach", "shared", "shared", "utils.sample.sample_1hot", "utils.sample.sample_1hot"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.interp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.interp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot"], ["", "", "def", "run_linear_interpolation", "(", "self", ",", "nrow", ",", "ncol", ",", "fix_z", ",", "fix_y", ",", "standing_statistics", ",", "standing_step", ",", "num_images", "=", "100", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start linear interpolation analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "shared", "=", "generator", ".", "module", ".", "shared", "if", "isinstance", "(", "generator", ",", "DataParallel", ")", "or", "isinstance", "(", "generator", ",", "DistributedDataParallel", ")", "else", "generator", ".", "shared", "\n", "assert", "int", "(", "fix_z", ")", "*", "int", "(", "fix_y", ")", "!=", "1", ",", "\"unable to switch fix_z and fix_y on together!\"", "\n", "\n", "for", "num", "in", "tqdm", "(", "range", "(", "num_images", ")", ")", ":", "\n", "\t\t\t\t", "if", "fix_z", ":", "\n", "\t\t\t\t\t", "zs", "=", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "zs", "=", "zs", ".", "repeat", "(", "1", ",", "ncol", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "name", "=", "\"fix_z\"", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", "=", "interp", "(", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "ncol", "-", "2", ")", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "\n", "", "if", "fix_y", ":", "\n", "\t\t\t\t\t", "ys", "=", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "ys", "=", "shared", "(", "ys", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", "\n", "ys", "=", "ys", ".", "repeat", "(", "1", ",", "ncol", ",", "1", ")", ".", "view", "(", "nrow", "*", "(", "ncol", ")", ",", "-", "1", ")", "\n", "name", "=", "\"fix_y\"", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "ys", "=", "interp", "(", "shared", "(", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ")", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", ",", "\n", "shared", "(", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ")", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", ",", "\n", "ncol", "-", "2", ")", ".", "view", "(", "nrow", "*", "(", "ncol", ")", ",", "-", "1", ")", "\n", "\n", "", "interpolated_images", "=", "generator", "(", "zs", ",", "None", ",", "shared_label", "=", "ys", ",", "evaluation", "=", "True", ")", "\n", "\n", "plot_img_canvas", "(", "(", "interpolated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/{num}_Interpolated_images_{fix_flag}.png\"", ".", "format", "(", "num", "=", "num", ",", "run_name", "=", "self", ".", "run_name", ",", "fix_flag", "=", "name", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "False", ")", "\n", "\n", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.run_frequency_analysis": [[983, 1041], ["worker_train_d2D.make_worker.logger.info", "utils.misc.change_generator_mode", "iter", "range", "numpy.shape", "numpy.shape", "tqdm.tqdm.tqdm", "utils.misc.plot_spectrum_image", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "next", "utils.misc.change_generator_mode.detach().cpu().numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.fft.fftshift", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.misc.change_generator_mode.detach().cpu", "scipy.ndimage.median_filter", "scipy.ndimage.median_filter", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "utils.misc.change_generator_mode.detach", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "utils.misc.change_generator_mode."], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_frequency_analysis", "(", "self", ",", "num_images", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start frequency analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "num_batches", "=", "num_images", "//", "self", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "None", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "real_images", "=", "np", ".", "asarray", "(", "(", "real_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "fake_images", "=", "np", ".", "asarray", "(", "(", "fake_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "real_array", "=", "real_images", "\n", "fake_array", "=", "fake_images", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_array", "=", "np", ".", "concatenate", "(", "[", "real_array", ",", "real_images", "]", ",", "axis", "=", "0", ")", "\n", "fake_array", "=", "np", ".", "concatenate", "(", "[", "fake_array", ",", "fake_images", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "N", ",", "C", ",", "H", ",", "W", "=", "np", ".", "shape", "(", "real_array", ")", "\n", "real_r", ",", "real_g", ",", "real_b", "=", "real_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "real_gray", "=", "0.2989", "*", "real_r", "+", "0.5870", "*", "real_g", "+", "0.1140", "*", "real_b", "\n", "fake_r", ",", "fake_g", ",", "fake_b", "=", "fake_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "fake_gray", "=", "0.2989", "*", "fake_r", "+", "0.5870", "*", "fake_g", "+", "0.1140", "*", "fake_b", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "N", ")", ")", ":", "\n", "\t\t\t\t", "real_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "real_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "real_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "fake_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "fake_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "fake_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "\n", "real_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "real_gray_f", ")", "\n", "fake_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "fake_gray_f", ")", "\n", "\n", "if", "j", "==", "0", ":", "\n", "\t\t\t\t\t", "real_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "\n", "", "", "plot_spectrum_image", "(", "real_gray_spectrum", ",", "fake_gray_spectrum", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker_train_d2D.make_worker.run_tsne": [[1045, 1135], ["worker_train_d2D.make_worker.logger.info", "utils.misc.change_generator_mode", "utils.misc.SaveOutput", "iter", "dis_model.named_children", "range", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "utils.misc.plot_tsne_scatter_plot", "sklearn.manifold.TSNE.fit_transform", "utils.misc.plot_tsne_scatter_plot", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "isinstance", "isinstance", "len", "next", "utils.misc.change_generator_mode.", "utils.misc.SaveOutput.clear", "utils.misc.SaveOutput.clear", "layer.register_forward_pre_hook", "hook_handles.append", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "real_images.to", "real_labels.to", "worker_train_d2D.make_worker.dis_model", "[].detach().cpu().numpy", "real_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "worker_train_d2D.make_worker.dis_model", "[].detach().cpu().numpy", "fake_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.random.permutation", "numpy.random.permutation", "worker_train_d2D.make_worker.dis_model", "worker_train_d2D.make_worker.dis_model", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "worker_train_d2D.make_worker.dis_model", "[].detach().cpu", "real_labels.detach().cpu", "[].cpu().detach().numpy", "real_labels.detach().cpu().numpy", "worker_train_d2D.make_worker.dis_model", "[].detach().cpu", "fake_labels.detach().cpu", "[].cpu().detach().numpy", "fake_labels.detach().cpu().numpy", "[].detach", "real_labels.detach", "[].cpu().detach", "real_labels.detach().cpu", "[].detach", "fake_labels.detach", "[].cpu().detach", "fake_labels.detach().cpu", "[].cpu", "real_labels.detach", "[].cpu", "fake_labels.detach"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_tsne", "(", "self", ",", "dataloader", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start tsne analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "if", "isinstance", "(", "self", ".", "gen_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "gen_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t", "dis_model", "=", "self", ".", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t", "dis_model", "=", "self", ".", "dis_model", "\n", "\n", "", "save_output", "=", "SaveOutput", "(", ")", "\n", "hook_handles", "=", "[", "]", "\n", "real", ",", "fake", "=", "{", "}", ",", "{", "}", "\n", "tsne_iter", "=", "iter", "(", "dataloader", ")", "\n", "num_batches", "=", "len", "(", "dataloader", ".", "dataset", ")", "//", "self", ".", "batch_size", "\n", "for", "name", ",", "layer", "in", "dis_model", ".", "named_children", "(", ")", ":", "\n", "\t\t\t\t", "if", "name", "==", "\"linear1\"", ":", "\n", "\t\t\t\t\t", "handle", "=", "layer", ".", "register_forward_pre_hook", "(", "save_output", ")", "\n", "hook_handles", ".", "append", "(", "handle", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "None", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "next", "(", "tsne_iter", ")", "\n", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "real_labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t", "cls_out_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t", "cls_proxies_real", ",", "cls_embed_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "real", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "real", "[", "\"labels\"", "]", "=", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "real", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"labels\"", "]", ",", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "fake", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "fake", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"labels\"", "]", ",", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "# t-SNE", "\n", "", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "verbose", "=", "1", ",", "perplexity", "=", "40", ",", "n_iter", "=", "300", ")", "\n", "if", "self", ".", "num_classes", ">", "10", ":", "\n", "\t\t\t\t ", "cls_indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_classes", ")", "[", ":", "10", "]", "\n", "real", "[", "\"embeds\"", "]", "=", "real", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "real", "[", "\"labels\"", "]", "=", "real", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"embeds\"", "]", "=", "fake", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"labels\"", "]", "=", "fake", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "\n", "", "real_tsne_results", "=", "tsne", ".", "fit_transform", "(", "real", "[", "\"embeds\"", "]", ")", "\n", "plot_tsne_scatter_plot", "(", "real", ",", "real_tsne_results", ",", "\"real\"", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "fake_tsne_results", "=", "tsne", ".", "fit_transform", "(", "fake", "[", "\"embeds\"", "]", ")", "\n", "plot_tsne_scatter_plot", "(", "fake", ",", "fake_tsne_results", ",", "\"fake\"", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.encoder.__init__": [[5, 19], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["class", "Encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "isize", ",", "nz", ",", "nc", ",", "ndf", ",", "add_final_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "encoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "encoder", ".", "add_module", "(", "'initial-conv-{0}-{1}'", ".", "format", "(", "nc", ",", "ndf", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "encoder", ".", "add_module", "(", "'initial-relu-{0}'", ".", "format", "(", "ndf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "csize", ",", "cndf", "=", "isize", "/", "2", ",", "ndf", "\n", "\n", "while", "csize", ">", "4", ":", "\n", "            ", "in_feat", "=", "cndf", "\n", "out_feat", "=", "cndf", "*", "2", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-{1}'", ".", "format", "(", "in_feat", ",", "out_feat", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_feat", ",", "out_feat", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.encoder.encode": [[19, 29], ["encoder.encoder.relu", "encoder.encoder.relu", "encoder.encoder.relu", "encoder.encoder.relu", "encoder.encoder.relu", "h5.view.view.view", "encoder.encoder.e8", "encoder.encoder.e1", "encoder.encoder.e2", "encoder.encoder.e4", "encoder.encoder.e5", "encoder.encoder.e7", "encoder.encoder.e3", "encoder.encoder.e6"], "methods", ["None"], ["nn", ".", "Conv2d", "(", "in_feat", ",", "out_feat", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-batchnorm'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_feat", ")", ")", "\n", "encoder", ".", "add_module", "(", "'pyramid-{0}-relu'", ".", "format", "(", "out_feat", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "cndf", "=", "cndf", "*", "2", "\n", "csize", "=", "csize", "/", "2", "\n", "", "if", "add_final_conv", ":", "\n", "            ", "encoder", ".", "add_module", "(", "'final-{0}-{1}-conv'", ".", "format", "(", "cndf", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "cndf", ",", "nz", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.encoder.forward": [[30, 33], ["encoder.encoder.encode"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.encoder.encode"], ["", "self", ".", "encoder", "=", "encoder", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "encoder", "(", "input", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.Encoder.__init__": [[36, 61], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Sequential.add_module", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["\n", "", "", "class", "VAE", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "isize", "=", "32", ",", "nz", "=", "80", ",", "n_extra_layers", "=", "0", ",", "add_final_conv", "=", "True", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "isize", "=", "isize", "\n", "self", ".", "nz", "=", "nz", "\n", "self", ".", "nc", "=", "3", "\n", "self", ".", "ndf", "=", "64", "\n", "self", ".", "device", "=", "\"cuda\"", "\n", "\n", "self", ".", "z_mean_calc", "=", "nn", ".", "Linear", "(", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u5747\u503c \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "self", ".", "z_log_var_calc", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "nz", ",", "self", ".", "nz", ")", "# \u591a\u52a0\u4e00\u5c42\u8868\u793a\u6bcf\u4e2a\u72ec\u7acbz\u7684\u65b9\u5dee \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "z_mean", "=", "self", ".", "z_mean_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "z_log_var", "=", "self", ".", "z_log_var_calc", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ")", "\n", "\n", "#stamp = self.get_stamp(target,opt)", "\n", "\n", "# \u7ee7\u7eed\u4f20\u64ad\u7684\u90e8\u5206", "\n", "z_mean_0", "=", "z_mean", "# * stamp", "\n", "z_log_var_0", "=", "z_log_var", "# * stamp", "\n", "epsilon", "=", "torch", ".", "randn", "(", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.Encoder.forward": [[62, 65], ["encoder.Encoder.encoder"], "methods", ["None"], ["size", "=", "(", "z_mean_0", ".", "view", "(", "-", "1", ",", "self", ".", "nz", ")", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "nz", ")", ")", ".", "to", "(", "\n", "self", ".", "device", ")", "# Sampling", "\n", "# Sampling", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.VAE.__init__": [[71, 84], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["#z_log_var_flip = (1-z_log_var) * (1-stamp)", "\n", "\n", "# \u7ec4\u5408\u5728\u4e00\u8d77\u8fd4\u56de", "\n", "z_mean_ret", "=", "z_mean_0", "# + z_mean_flip", "\n", "z_log_var_ret", "=", "z_log_var_0", "# + z_log_var_flip", "\n", "\n", "return", "z_mean_ret", ",", "z_log_var_ret", ",", "latent_i_star", ".", "float", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.encoder.VAE.forward": [[86, 110], ["encoder.VAE.z_mean_calc", "encoder.VAE.z_log_var_calc", "torch.randn().to", "input.view", "input.view", "latent_i_star.type", "torch.randn", "torch.exp", "z_mean_0.view"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.DiscOptBlock.__init__": [[108, 136], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.DiscOptBlock.forward": [[138, 154], ["mydiscriminator.DiscOptBlock.conv2d1", "mydiscriminator.DiscOptBlock.activation", "mydiscriminator.DiscOptBlock.conv2d2", "mydiscriminator.DiscOptBlock.average_pooling", "mydiscriminator.DiscOptBlock.average_pooling", "mydiscriminator.DiscOptBlock.conv2d0", "mydiscriminator.DiscOptBlock.bn1", "mydiscriminator.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.DiscBlock.__init__": [[157, 194], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.DiscBlock.forward": [[196, 219], ["mydiscriminator.DiscBlock.activation", "mydiscriminator.DiscBlock.conv2d1", "mydiscriminator.DiscBlock.activation", "mydiscriminator.DiscBlock.conv2d2", "mydiscriminator.DiscBlock.bn1", "mydiscriminator.DiscBlock.bn2", "mydiscriminator.DiscBlock.average_pooling", "mydiscriminator.DiscBlock.conv2d0", "mydiscriminator.DiscBlock.bn0", "mydiscriminator.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.Discriminator.__init__": [[223, 313], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "mydiscriminator.DiscOptBlock", "mydiscriminator.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.Discriminator.forward": [[315, 351], ["enumerate", "mydiscriminator.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "mydiscriminator.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "mydiscriminator.Discriminator.embedding", "mydiscriminator.Discriminator.linear2", "mydiscriminator.Discriminator.linear1", "mydiscriminator.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mydiscriminator.Discriminator.activation", "mydiscriminator.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "mydiscriminator.Discriminator.linear4", "mydiscriminator.Discriminator.embedding", "mydiscriminator.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.main": [[353, 606], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "mydiscriminator.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "dis_model.eval", "iter", "range", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "dis_acml_loss.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "dis_acml_loss.item", "next", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "glob.glob", "glob.glob", "iter", "next", "os.path.join", "glob.glob", "glob.glob", "str", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "320", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/src/checkpoints/model=D-current-weights-step=37500.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "#step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "", "", "", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "real_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "real_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "length", "=", "0", "\n", "for", "i", "in", "range", "(", "30", ")", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\t\t\t\t\t", "i", "=", "i", "+", "1", "\n", "try", ":", "\n", "\t\t\t\t\t\t", "test_images", ",", "test_labels", "=", "next", "(", "test_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t\t\t\t", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "length", "=", "len", "(", "test_iter", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "next", "(", "test_iter", ")", "\n", "", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "test_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "test_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy", "=", "acc", "/", "(", "320.0", "*", "30", "*", "2", ")", "\n", "print", "(", "\"accuracy of discriminator is:\"", ",", "accuracy", ")", "\n", "\n", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator.save": [[612, 626], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.__init__": [[105, 133], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.forward": [[135, 151], ["shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.conv2d1", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.activation", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.conv2d2", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.average_pooling", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.average_pooling", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.conv2d0", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.bn1", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.DiscBlock.__init__": [[154, 191], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.DiscBlock.forward": [[193, 216], ["shift_distributation_y_using_discriminator_as_dml.DiscBlock.activation", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.conv2d1", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.activation", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.conv2d2", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.bn1", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.bn2", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.average_pooling", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.conv2d0", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.bn0", "shift_distributation_y_using_discriminator_as_dml.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.Discriminator.__init__": [[220, 310], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "shift_distributation_y_using_discriminator_as_dml.DiscOptBlock", "shift_distributation_y_using_discriminator_as_dml.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.Discriminator.forward": [[312, 348], ["enumerate", "shift_distributation_y_using_discriminator_as_dml.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "shift_distributation_y_using_discriminator_as_dml.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "shift_distributation_y_using_discriminator_as_dml.Discriminator.embedding", "shift_distributation_y_using_discriminator_as_dml.Discriminator.linear2", "shift_distributation_y_using_discriminator_as_dml.Discriminator.linear1", "shift_distributation_y_using_discriminator_as_dml.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "shift_distributation_y_using_discriminator_as_dml.Discriminator.activation", "shift_distributation_y_using_discriminator_as_dml.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "shift_distributation_y_using_discriminator_as_dml.Discriminator.linear4", "shift_distributation_y_using_discriminator_as_dml.Discriminator.embedding", "shift_distributation_y_using_discriminator_as_dml.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.main": [[350, 713], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "densenet169().to.", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "foolbox.attacks.LinfProjectedGradientDescentAttack", "fb.attacks.LinfProjectedGradientDescentAttack.", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "shift_distributation_y_using_discriminator_as_dml.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "img_to_classifier.to", "x_adv_to_classifier.to", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "random.randint", "random.randint", "random.randint", "gen_model", "gen_model", "dis_model", "dis_model", "gen_model", "gen_model", "dis_model", "dis_model", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "iter", "next", "numpy.random.random", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "os.path.join", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "dis_acml_loss.item", "fb.attacks.LinfProjectedGradientDescentAttack.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "x_adv_test_to_classifier.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./adv_train_mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "local_rank", "=", "rank", "\n", "# adding classifier", "\n", "checkpoint_path", "=", "'/research/dept6/yjyang/SP2020/V2CIFAR10_Generation/cifar10_models/state_dicts'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "max_iter", "=", "100", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"shift_distributation_y_pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./adv_train_mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/best_version1_cifar10_checkpoints/acc93.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "# for state in D_optimizer.state.values():", "\n", "# \tfor k, v in state.items():", "\n", "# \t\tif isinstance(v, torch.Tensor):", "\n", "# \t\t\tstate[k] = v.cuda()", "\n", "\n", "\n", "# step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./adv_train_mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "data_id", "=", "0", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "data_id", "=", "data_id", "+", "1", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "\n", "# adding some noise to real_images", "\n", "#real_images = torch.empty_like(real_images, dtype=real_images.dtype).uniform_(-2/128.0, 2/128.0) + real_images", "\n", "img_to_classifier", "=", "(", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "#acc_of_classifier = fb.utils.accuracy(fmodel, (real_images+1)/2, real_labels)", "\n", "#logger.info(\"data_id:{}\".format(data_id))", "\n", "#logger.info(\"acc of classifier is:{}\".format(acc_of_classifier))", "\n", "# if data_id%2 == 0: # 50% training adversarial samples", "\n", "# generating AE samples \t", "\n", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "*", "0.5", "+", "0.02", "# enlarge epsilon to ensure the successful attack", "\n", "# \t#print(epsilon)", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier_ori", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "attack", "=", "fb", ".", "attacks", ".", "LinfProjectedGradientDescentAttack", "(", "steps", "=", "40", ")", "\n", "raw", ",", "x_adv", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ",", "y_classifier_ori", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "x_adv_to_classifier", "=", "(", "(", "x_adv", "-", "mean", ")", "/", "std", ")", "\n", "outputs", "=", "classifier", "(", "x_adv_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "# \t#x_adv = torch.FloatTensor(x_adv).to(local_rank)", "\n", "# \t#real_images = (torch.tensor(x_adv)*2.0 -1).to(local_rank)", "\n", "# \t#print(x_adv.type())", "\n", "# \treal_images = (x_adv*2 -1).to(local_rank)", "\n", "\n", "# else:", "\n", "# adding some noise to real_images", "\n", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "2", "/", "128.0", ",", "2", "/", "128.0", ")", "+", "real_images", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "\n", "\n", "#if data_id%2 == 0:", "\n", "# shift wrong_labels the same as AE samples", "\n", "if", "data_id", "%", "9", "==", "0", ":", "# 10% random samples", "\n", "\t\t\t", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "", "else", ":", "\n", "# filter out the successful AEs", "\n", "\t\t\t", "wrong_labels", "=", "y_classifier", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "real_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "epsilon", "=", "0.2", "#np.random.random() * 0.5", "\n", "raw", ",", "x_adv_test", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "test_images", "+", "1", ")", "/", "2", ")", ",", "test_labels", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "test_images", "=", "(", "x_adv_test", "*", "2.0", ")", "-", "1.0", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "#Int_Modi = random.randint(1, 9)", "\n", "#wrong_labels = ((test_labels + Int_Modi) % 10).to(local_rank)", "\n", "x_adv_test_to_classifier", "=", "(", "(", "x_adv_test", "-", "mean", ")", "/", "std", ")", "\n", "outputs_test", "=", "classifier", "(", "x_adv_test_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs_test", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"shift_distributation_y_accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"shift_distributation_y_pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"shift_distributation_y_neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"shift_distributation_y_best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"shift_distributation_y__pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"shift_distributation_y__pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"shift_distributation_y__pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"shift_distributation_y__pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"shift_distributation_y__pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"shift_distributation_y__pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.shift_distributation_y_using_discriminator_as_dml.save": [[719, 733], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.DiscOptBlock.__init__": [[105, 133], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.DiscOptBlock.forward": [[135, 151], ["using_discriminator_as_dml_training.DiscOptBlock.conv2d1", "using_discriminator_as_dml_training.DiscOptBlock.activation", "using_discriminator_as_dml_training.DiscOptBlock.conv2d2", "using_discriminator_as_dml_training.DiscOptBlock.average_pooling", "using_discriminator_as_dml_training.DiscOptBlock.average_pooling", "using_discriminator_as_dml_training.DiscOptBlock.conv2d0", "using_discriminator_as_dml_training.DiscOptBlock.bn1", "using_discriminator_as_dml_training.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.DiscBlock.__init__": [[154, 191], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.DiscBlock.forward": [[193, 216], ["using_discriminator_as_dml_training.DiscBlock.activation", "using_discriminator_as_dml_training.DiscBlock.conv2d1", "using_discriminator_as_dml_training.DiscBlock.activation", "using_discriminator_as_dml_training.DiscBlock.conv2d2", "using_discriminator_as_dml_training.DiscBlock.bn1", "using_discriminator_as_dml_training.DiscBlock.bn2", "using_discriminator_as_dml_training.DiscBlock.average_pooling", "using_discriminator_as_dml_training.DiscBlock.conv2d0", "using_discriminator_as_dml_training.DiscBlock.bn0", "using_discriminator_as_dml_training.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.Discriminator.__init__": [[220, 310], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "using_discriminator_as_dml_training.DiscOptBlock", "using_discriminator_as_dml_training.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.Discriminator.forward": [[312, 348], ["enumerate", "using_discriminator_as_dml_training.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "using_discriminator_as_dml_training.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "using_discriminator_as_dml_training.Discriminator.embedding", "using_discriminator_as_dml_training.Discriminator.linear2", "using_discriminator_as_dml_training.Discriminator.linear1", "using_discriminator_as_dml_training.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "using_discriminator_as_dml_training.Discriminator.activation", "using_discriminator_as_dml_training.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "using_discriminator_as_dml_training.Discriminator.linear4", "using_discriminator_as_dml_training.Discriminator.embedding", "using_discriminator_as_dml_training.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.main": [[350, 698], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "foolbox.utils.accuracy", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "using_discriminator_as_dml_training.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "densenet169().to.", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "foolbox.attacks.LinfProjectedGradientDescentAttack", "fb.attacks.LinfProjectedGradientDescentAttack.", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "random.randint", "random.randint", "random.randint", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "iter", "next", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "img_to_classifier.to", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "x_adv_to_classifier.to", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "os.path.join", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "dis_acml_loss.item", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "fb.attacks.LinfProjectedGradientDescentAttack.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "x_adv_test_to_classifier.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./best_version1_cifar10_checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./adv_train_mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "local_rank", "=", "rank", "\n", "# adding classifier", "\n", "checkpoint_path", "=", "'/research/dept6/yjyang/SP2020/V2CIFAR10_Generation/cifar10_models/state_dicts'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "max_iter", "=", "100", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/best_version1_cifar10_checkpoints/acc93.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "# for state in D_optimizer.state.values():", "\n", "# \tfor k, v in state.items():", "\n", "# \t\tif isinstance(v, torch.Tensor):", "\n", "# \t\t\tstate[k] = v.cuda()", "\n", "\n", "\n", "# step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./Advtrain_mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "data_id", "=", "0", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "data_id", "=", "data_id", "+", "1", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "# adding some noise to real_images", "\n", "#real_images = torch.empty_like(real_images, dtype=real_images.dtype).uniform_(-2/128.0, 2/128.0) + real_images", "\n", "img_to_classifier", "=", "(", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "(", "real_images", "+", "1", ")", "/", "2", ",", "real_labels", ")", "\n", "logger", ".", "info", "(", "\"data_id:{}\"", ".", "format", "(", "data_id", ")", ")", "\n", "logger", ".", "info", "(", "\"acc of classifier is:{}\"", ".", "format", "(", "acc_of_classifier", ")", ")", "\n", "if", "data_id", "%", "2", "==", "0", ":", "# 50% training adversarial samples", "\n", "\t\t\t", "epsilon", "=", "torch", ".", "rand", "(", "1", ")", ".", "to", "(", "local_rank", ")", "*", "0.5", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier_ori", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "attack", "=", "fb", ".", "attacks", ".", "LinfProjectedGradientDescentAttack", "(", "steps", "=", "40", ")", "\n", "\n", "raw", ",", "x_adv", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ",", "y_classifier_ori", ",", "epsilons", "=", "epsilon", ")", "\n", "#x_adv = torch.FloatTensor(x_adv).to(local_rank)", "\n", "real_images", "=", "(", "torch", ".", "tensor", "(", "x_adv", ")", "*", "2.0", "-", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "#print(x_adv.type())", "\n", "real_images", "=", "(", "x_adv", "*", "2", "-", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "", "else", ":", "\n", "# adding some noise to real_images", "\n", "\t\t\t", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "2", "/", "128.0", ",", "2", "/", "128.0", ")", "+", "real_images", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "\n", "if", "data_id", "%", "2", "==", "0", ":", "\n", "\t\t\t", "x_adv_to_classifier", "=", "(", "(", "x_adv", "-", "mean", ")", "/", "std", ")", "\n", "outputs", "=", "classifier", "(", "x_adv_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "wrong_labels", "=", "y_classifier", "\n", "", "else", ":", "\n", "\t\t\t", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "epsilon", "=", "torch", ".", "rand", "(", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "raw", ",", "x_adv_test", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "test_images", "+", "1", ")", "/", "2", ")", ",", "test_labels", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "test_images", "=", "(", "x_adv_test", "*", "2.0", ")", "-", "1.0", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "#Int_Modi = random.randint(1, 9)", "\n", "#wrong_labels = ((test_labels + Int_Modi) % 10).to(local_rank)", "\n", "x_adv_test_to_classifier", "=", "(", "(", "x_adv_test", "-", "mean", ")", "/", "std", ")", "\n", "outputs_test", "=", "classifier", "(", "x_adv_test_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs_test", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training.save": [[704, 718], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.main.main": [[25, 108], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.log.make_run_name", "utils.misc.check_flags", "argparse.ArgumentParser.print_help", "sys.exit", "vars", "utils.make_hdf5.make_hdf5", "utils.misc.fix_all_seed", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "print", "torch.spawn", "loader.prepare_train_eval", "open", "json.load", "train_configs[].split"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.check_flags", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.make_hdf5.make_hdf5", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.loader.prepare_train_eval"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/invencoder_config.json'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "type", "=", "str", ",", "default", "=", "'../pertrain_model'", ")", "\n", "parser", ".", "add_argument", "(", "'-current'", ",", "'--load_current'", ",", "default", "=", "False", ",", "help", "=", "'whether you load the current or best checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-DDP'", ",", "'--distributed_data_parallel'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'-nr'", ",", "'--nr'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'ranking within the nodes'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'seed for generating random numbers'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'-sync_bn'", ",", "'--synchronized_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on synchronized batchnorm'", ")", "\n", "parser", ".", "add_argument", "(", "'-mpc'", ",", "'--mixed_precision'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on mixed precision training'", ")", "\n", "parser", ".", "add_argument", "(", "'-LARS'", ",", "'--LARS_optimizer'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on LARS optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'-rm_API'", ",", "'--disable_debugging_API'", ",", "default", "=", "False", ",", "help", "=", "'whether disable pytorch autograd debugging mode'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--reduce_train_dataset'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'control the number of train dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'-stat_otf'", ",", "'--bn_stat_OnTheFly'", ",", "action", "=", "'store_true'", ",", "help", "=", "'when evaluating, use the statistics of a batch'", ")", "\n", "parser", ".", "add_argument", "(", "'-std_stat'", ",", "'--standing_statistics'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--standing_step'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'# of steps for accumulation batchnorm'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_layers'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'# of layers for freezing discriminator'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--load_all_data_in_memory'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--save_images'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-iv'", ",", "'--image_visualization'", ",", "default", "=", "True", ",", "help", "=", "'select whether conduct image visualization'", ")", "\n", "parser", ".", "add_argument", "(", "'-knn'", ",", "'--k_nearest_neighbor'", ",", "action", "=", "'store_true'", ",", "help", "=", "'select whether conduct k-nearest neighbor analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-itp'", ",", "'--interpolation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct interpolation analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-fa'", ",", "'--frequency_analysis'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct frequency analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-tsne'", ",", "'--tsne_analysis'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct tsne analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'--nrow'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of rows to plot image canvas'", ")", "\n", "parser", ".", "add_argument", "(", "'--ncol'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of cols to plot image canvas'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "args", ".", "train", "and", "not", "args", ".", "eval", "and", "not", "args", ".", "save_images", "and", "not", "args", ".", "image_visualization", "and", "not", "args", ".", "k_nearest_neighbor", "and", "not", "args", ".", "interpolation", "and", "not", "args", ".", "frequency_analysis", "and", "not", "args", ".", "tsne_analysis", ":", "\n", "        ", "parser", ".", "print_help", "(", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "            ", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "hdf5_path_train", "=", "make_hdf5", "(", "model_configs", "[", "'data_processing'", "]", ",", "train_configs", ",", "mode", "=", "\"train\"", ")", "if", "train_configs", "[", "'load_all_data_in_memory'", "]", "else", "None", "\n", "\n", "if", "train_configs", "[", "'seed'", "]", "==", "-", "1", ":", "\n", "        ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "True", ",", "False", "\n", "", "else", ":", "\n", "        ", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "if", "train_configs", "[", "'disable_debugging_API'", "]", ":", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "False", ")", "\n", "check_flags", "(", "train_configs", ",", "model_configs", ",", "world_size", ")", "\n", "\n", "if", "train_configs", "[", "'distributed_data_parallel'", "]", "and", "world_size", ">", "1", ":", "\n", "        ", "print", "(", "\"Train the models through DistributedDataParallel (DDP) mode.\"", ")", "\n", "mp", ".", "spawn", "(", "prepare_train_eval", ",", "nprocs", "=", "gpus_per_node", ",", "args", "=", "(", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "\n", "train_configs", ",", "model_configs", ",", "hdf5_path_train", ")", ")", "\n", "", "else", ":", "\n", "        ", "prepare_train_eval", "(", "rank", ",", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "train_configs", ",", "model_configs", ",", "hdf5_path_train", "=", "hdf5_path_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.__init__": [[72, 229], ["datetime.datetime.datetime.now", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "utils.misc.define_sampler", "pytorch_ssim.SSIM().to", "torch.new_group", "torch.new_group", "torch.new_group", "torch.new_group", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "utils.losses.Conditional_Contrastive_loss", "pytorch_ssim.SSIM", "isinstance", "isinstance", "utils.losses.Proxy_NCA_loss", "utils.losses.NT_Xent_loss", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.define_sampler"], ["\t", "def", "__init__", "(", "self", ",", "cfgs", ",", "run_name", ",", "best_step", ",", "logger", ",", "writer", ",", "n_gpus", ",", "gen_model", ",", "dis_model", ",", "d2dis_model", ",", "inception_model", ",", "Gen_copy", ",", "\n", "Gen_ema", ",", "train_dataset", ",", "eval_dataset", ",", "train_dataloader", ",", "eval_dataloader", ",", "G_optimizer", ",", "D_optimizer", ",", "d2D_optimizer", ",", "G_loss", ",", "\n", "D_loss", ",", "d2D_loss", ",", "prev_ada_p", ",", "global_rank", ",", "local_rank", ",", "bn_stat_OnTheFly", ",", "checkpoint_dir", ",", "mu", ",", "sigma", ",", "best_fid", ",", "\n", "best_fid_checkpoint_path", ",", "encoder", ",", "vae", ",", "opt_encoder", ")", ":", "\n", "\n", "\t\t", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "best_step", "=", "best_step", "#0", "\n", "self", ".", "seed", "=", "cfgs", ".", "seed", "#-1", "\n", "self", ".", "dataset_name", "=", "cfgs", ".", "dataset_name", "#CIFAR10", "\n", "self", ".", "eval_type", "=", "cfgs", ".", "eval_type", "# train", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "num_workers", "=", "cfgs", ".", "num_workers", "# 8", "\n", "self", ".", "n_gpus", "=", "n_gpus", "\n", "\n", "self", ".", "gen_model", "=", "gen_model", "\n", "self", ".", "dis_model", "=", "dis_model", "\n", "self", ".", "d2dis_model", "=", "d2dis_model", "\n", "\n", "self", ".", "inception_model", "=", "inception_model", "\n", "self", ".", "Gen_copy", "=", "Gen_copy", "\n", "self", ".", "Gen_ema", "=", "Gen_ema", "\n", "\n", "self", ".", "train_dataset", "=", "train_dataset", "\n", "self", ".", "eval_dataset", "=", "eval_dataset", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "eval_dataloader", "=", "eval_dataloader", "\n", "\n", "self", ".", "freeze_layers", "=", "cfgs", ".", "freeze_layers", "# of layers for freezing discriminator", "\n", "\n", "self", ".", "conditional_strategy", "=", "cfgs", ".", "conditional_strategy", "#ProjGAN", "\n", "self", ".", "pos_collected_numerator", "=", "cfgs", ".", "pos_collected_numerator", "#False", "\n", "self", ".", "z_dim", "=", "cfgs", ".", "z_dim", "#80", "\n", "self", ".", "num_classes", "=", "cfgs", ".", "num_classes", "#10", "\n", "self", ".", "hypersphere_dim", "=", "cfgs", ".", "hypersphere_dim", "#N/A", "\n", "self", ".", "d_spectral_norm", "=", "cfgs", ".", "d_spectral_norm", "# true", "\n", "self", ".", "g_spectral_norm", "=", "cfgs", ".", "g_spectral_norm", "#true", "\n", "\n", "self", ".", "G_optimizer", "=", "G_optimizer", "\n", "self", ".", "D_optimizer", "=", "D_optimizer", "\n", "self", ".", "d2D_optimizer", "=", "d2D_optimizer", "\n", "\n", "self", ".", "batch_size", "=", "cfgs", ".", "batch_size", "#64", "\n", "self", ".", "g_steps_per_iter", "=", "cfgs", ".", "g_steps_per_iter", "# 1", "\n", "self", ".", "d_steps_per_iter", "=", "cfgs", ".", "d_steps_per_iter", "# 5", "\n", "self", ".", "accumulation_steps", "=", "cfgs", ".", "accumulation_steps", "#1", "\n", "self", ".", "total_step", "=", "cfgs", ".", "total_step", "#20,0000", "\n", "\n", "self", ".", "G_loss", "=", "G_loss", "# loss_hinge_gen", "\n", "self", ".", "D_loss", "=", "D_loss", "# loss_hinge_dis", "\n", "\n", "self", ".", "d2D_loss", "=", "d2D_loss", "\n", "\n", "self", ".", "contrastive_lambda", "=", "cfgs", ".", "contrastive_lambda", "#NA", "\n", "self", ".", "margin", "=", "cfgs", ".", "margin", "#NA", "\n", "self", ".", "tempering_type", "=", "cfgs", ".", "tempering_type", "#NA", "\n", "self", ".", "tempering_step", "=", "cfgs", ".", "tempering_step", "#NA", "\n", "self", ".", "start_temperature", "=", "cfgs", ".", "start_temperature", "#NA", "\n", "self", ".", "end_temperature", "=", "cfgs", ".", "end_temperature", "#NA", "\n", "self", ".", "weight_clipping_for_dis", "=", "cfgs", ".", "weight_clipping_for_dis", "#False", "\n", "self", ".", "weight_clipping_bound", "=", "cfgs", ".", "weight_clipping_bound", "# NA", "\n", "self", ".", "gradient_penalty_for_dis", "=", "cfgs", ".", "gradient_penalty_for_dis", "#False", "\n", "self", ".", "gradient_penalty_lambda", "=", "cfgs", ".", "gradient_penalty_lambda", "#NA", "\n", "self", ".", "deep_regret_analysis_for_dis", "=", "cfgs", ".", "deep_regret_analysis_for_dis", "#False", "\n", "self", ".", "regret_penalty_lambda", "=", "cfgs", ".", "regret_penalty_lambda", "#NA", "\n", "self", ".", "cr", "=", "cfgs", ".", "cr", "#False", "\n", "self", ".", "cr_lambda", "=", "cfgs", ".", "cr_lambda", "#NA", "\n", "self", ".", "bcr", "=", "cfgs", ".", "bcr", "#False", "\n", "self", ".", "real_lambda", "=", "cfgs", ".", "real_lambda", "#NA", "\n", "self", ".", "fake_lambda", "=", "cfgs", ".", "fake_lambda", "#NA", "\n", "self", ".", "zcr", "=", "cfgs", ".", "zcr", "# False", "\n", "self", ".", "gen_lambda", "=", "cfgs", ".", "gen_lambda", "#NA", "\n", "self", ".", "dis_lambda", "=", "cfgs", ".", "dis_lambda", "#NA", "\n", "self", ".", "sigma_noise", "=", "cfgs", ".", "sigma_noise", "#AN", "\n", "\n", "self", ".", "diff_aug", "=", "cfgs", ".", "diff_aug", "# True", "\n", "self", ".", "ada", "=", "cfgs", ".", "ada", "# False", "\n", "self", ".", "prev_ada_p", "=", "prev_ada_p", "# None", "\n", "self", ".", "ada_target", "=", "cfgs", ".", "ada_target", "# NA", "\n", "self", ".", "ada_length", "=", "cfgs", ".", "ada_length", "# NA", "\n", "self", ".", "prior", "=", "cfgs", ".", "prior", "#\"gaussian\"", "\n", "self", ".", "truncated_factor", "=", "cfgs", ".", "truncated_factor", "# 1", "\n", "self", ".", "ema", "=", "cfgs", ".", "ema", "# True", "\n", "self", ".", "latent_op", "=", "cfgs", ".", "latent_op", "# False", "\n", "self", ".", "latent_op_rate", "=", "cfgs", ".", "latent_op_rate", "# NA", "\n", "self", ".", "latent_op_step", "=", "cfgs", ".", "latent_op_step", "# NA", "\n", "self", ".", "latent_op_step4eval", "=", "cfgs", ".", "latent_op_step4eval", "#NA", "\n", "self", ".", "latent_op_alpha", "=", "cfgs", ".", "latent_op_alpha", "# NA", "\n", "self", ".", "latent_op_beta", "=", "cfgs", ".", "latent_op_beta", "#NA", "\n", "self", ".", "latent_norm_reg_weight", "=", "cfgs", ".", "latent_norm_reg_weight", "#NA", "\n", "\n", "self", ".", "global_rank", "=", "global_rank", "# global_rank = local_rank", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "bn_stat_OnTheFly", "=", "bn_stat_OnTheFly", "\n", "self", ".", "print_every", "=", "cfgs", ".", "print_every", "# 100", "\n", "self", ".", "save_every", "=", "cfgs", ".", "save_every", "# 200", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "# checkpoint folder", "\n", "self", ".", "evaluate", "=", "cfgs", ".", "eval", "# main args eval = True", "\n", "self", ".", "mu", "=", "mu", "# mu, sigma = prepare_inception_moments(...)", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "best_fid", "=", "best_fid", "# 0", "\n", "self", ".", "best_fid_checkpoint_path", "=", "best_fid_checkpoint_path", "# None", "\n", "self", ".", "distributed_data_parallel", "=", "cfgs", ".", "distributed_data_parallel", "# False", "\n", "self", ".", "mixed_precision", "=", "cfgs", ".", "mixed_precision", "# False", "\n", "self", ".", "synchronized_bn", "=", "cfgs", ".", "synchronized_bn", "# ? False", "\n", "\n", "self", ".", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "self", ".", "l2_loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "ce_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "policy", "=", "\"color,translation,cutout\"", "\n", "self", ".", "sampler", "=", "define_sampler", "(", "self", ".", "dataset_name", ",", "self", ".", "conditional_strategy", ",", "self", ".", "batch_size", ",", "self", ".", "num_classes", ")", "#\"class_order_all\"", "\n", "self", ".", "counter", "=", "0", "\n", "\n", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "opt_encoder", "=", "opt_encoder", "\n", "#self.encoder = torch.nn.DataParallel(encoder.Encoder(isize=32, nz=80, nc=3, ndf=64), device_ids=[0,1]).to(self.local_rank)", "\n", "#self.vae = torch.nn.DataParallel(encoder.VAE(), device_ids=[0]).to(self.local_rank)", "\n", "#self.opt_encoder = torch.optim.Adam([{'params':self.encoder.parameters()},{'params':self.vae.parameters()}], self.cfgs.g_lr, [self.cfgs.beta1, self.cfgs.beta2], eps=1e-6)", "\n", "self", ".", "ssim", "=", "ssim_package", ".", "SSIM", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "tensorboard_root", "=", "\"./results\"", "\n", "#self.writer =  SummaryWriter(self.tensorboard_root)", "\n", "\n", "\n", "if", "self", ".", "distributed_data_parallel", ":", "self", ".", "group", "=", "dist", ".", "new_group", "(", "[", "n", "for", "n", "in", "range", "(", "self", ".", "n_gpus", ")", "]", ")", "\n", "if", "self", ".", "mixed_precision", ":", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "#if self.ada: self.adtv_aug = Adaptive_Augment(self.prev_ada_p, self.ada_target, self.ada_length, self.batch_size, self.local_rank)", "\n", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", "]", ":", "\n", "\t\t\t", "if", "isinstance", "(", "self", ".", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t", "self", ".", "embedding_layer", "=", "self", ".", "dis_model", ".", "module", ".", "embedding", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "embedding_layer", "=", "self", ".", "dis_model", ".", "embedding", "\n", "\n", "", "", "if", "self", ".", "conditional_strategy", "==", "'ContraGAN'", ":", "\n", "\t\t\t", "self", ".", "contrastive_criterion", "=", "Conditional_Contrastive_loss", "(", "self", ".", "local_rank", ",", "self", ".", "batch_size", ",", "self", ".", "pos_collected_numerator", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'Proxy_NCA_GAN'", ":", "\n", "\t\t\t", "self", ".", "NCA_criterion", "=", "Proxy_NCA_loss", "(", "self", ".", "local_rank", ",", "self", ".", "embedding_layer", ",", "self", ".", "num_classes", ",", "self", ".", "batch_size", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'NT_Xent_GAN'", ":", "\n", "\t\t\t", "self", ".", "NT_Xent_criterion", "=", "NT_Xent_loss", "(", "self", ".", "local_rank", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pass", "\n", "\n", "", "if", "self", ".", "dataset_name", "==", "\"imagenet\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'valid'", ":", "50000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"tiny_imagenet\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'valid'", ":", "10000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"cifar10\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'test'", ":", "10000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"custom\"", ":", "\n", "\t\t\t", "num_train_images", ",", "num_eval_images", "=", "len", "(", "self", ".", "train_dataset", ".", "data", ")", ",", "len", "(", "self", ".", "eval_dataset", ".", "data", ")", "\n", "self", ".", "num_eval", "=", "{", "'train'", ":", "num_train_images", ",", "'valid'", ":", "num_eval_images", "}", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.train": [[232, 643], ["worker.make_worker.dis_model.train", "worker.make_worker.gen_model.train", "worker.make_worker.d2dis_model.eval", "worker.make_worker.encoder.train", "worker.make_worker.vae.train", "iter", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "worker.make_worker.Gen_copy.train", "worker.make_worker.logger.info", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "utils.losses.set_temperature", "range", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "range", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "worker.make_worker.D_optimizer.zero_grad", "range", "worker.make_worker.G_optimizer.zero_grad", "worker.make_worker.opt_encoder.zero_grad", "range", "LOG_FORMAT.format", "worker.make_worker.logger.info", "worker.make_worker.writer.add_scalars", "torch.barrier", "torch.barrier", "torch.barrier", "torch.barrier", "worker.make_worker.scaler.step", "worker.make_worker.scaler.update", "worker.make_worker.D_optimizer.step", "worker.make_worker.dis_model.parameters", "utils.misc.calculate_all_sn", "utils.misc.calculate_all_sn", "worker.make_worker.writer.add_scalars", "worker.make_worker.writer.add_scalars", "worker.make_worker.scaler.step", "worker.make_worker.scaler.update", "worker.make_worker.G_optimizer.step", "worker.make_worker.opt_encoder.step", "worker.make_worker.Gen_ema.update", "worker.make_worker.gen_model.eval", "worker.make_worker.gen_model", "worker.make_worker.gen_model", "worker.make_worker.writer.add_image", "worker.make_worker.writer.add_image", "worker.make_worker.writer.add_image", "worker.make_worker.writer.add_image", "worker.make_worker.writer.add_image", "worker.make_worker.writer.add_image", "worker.make_worker.writer.add_image", "worker.make_worker.gen_model.train", "utils.misc.calculate_all_sn", "worker.make_worker.writer.add_scalars", "worker.make_worker.writer.add_scalar", "worker.make_worker.evaluation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "next", "utils.diff_aug.DiffAugment.to", "real_labels.to", "worker.make_worker.gen_model", "random.randint", "random.randint", "random.randint", "random.randint", "worker.make_worker.gen_model", "worker.make_worker.gen_model", "worker.make_worker.D_loss", "worker.make_worker.d2D_loss", "worker.make_worker.scaler.scale().backward", "worker.make_worker.backward", "p.data.clamp_", "worker.make_worker.gen_model", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "worker.make_worker.G_loss", "worker.make_worker.G_loss", "worker.make_worker.scaler.scale().backward", "gen_acml_loss.backward", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "utils.misc.elapsed_time", "dis_acml_loss_watch.item", "worker.make_worker.item", "gen_acml_loss.item", "worker.make_worker.item", "worker.make_worker.item", "gen_l2_loss_watch.item", "gen_l1_loss.item", "gen_l2_loss_watch.item", "gen_lat_loss.item", "gen_ori_loss.item", "worker.make_worker.item", "gen_acml_loss.item", "worker.make_worker.save", "worker.make_worker.save", "iter", "next", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "utils.diff_aug.DiffAugment", "utils.sample.sample_latents", "worker.make_worker.encoder", "worker.make_worker.vae", "worker.make_worker.encoder", "worker.make_worker.vae", "utils.losses.latent_optimise", "utils.diff_aug.DiffAugment", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "utils.cr_diff_aug.CR_DiffAug", "worker.make_worker.l2_loss", "utils.cr_diff_aug.CR_DiffAug", "utils.cr_diff_aug.CR_DiffAug", "worker.make_worker.l2_loss", "worker.make_worker.l2_loss", "worker.make_worker.gen_model", "worker.make_worker.l2_loss", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "utils.sample.sample_latents", "worker.make_worker.encoder", "worker.make_worker.vae", "utils.losses.latent_optimise", "utils.diff_aug.DiffAugment", "worker.make_worker.dis_model", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "worker.make_worker.gen_model", "worker.make_worker.ce_loss", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "worker.make_worker.d2dis_model", "worker.make_worker.d2dis_model", "worker.make_worker.ce_loss", "worker.make_worker.ce_loss", "utils.cr_diff_aug.CR_DiffAug", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "worker.make_worker.l2_loss", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "worker.make_worker.l2_loss", "worker.make_worker.l2_loss", "worker.make_worker.dis_model", "worker.make_worker.l2_loss", "utils.losses.calc_derv4gp", "utils.losses.calc_derv4dra", "worker.make_worker.scaler.scale", "worker.make_worker.dis_model", "worker.make_worker.d2dis_model", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "worker.make_worker.l2_loss", "worker.make_worker.scaler.scale", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "worker.make_worker.NT_Xent_criterion", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "utils.sample.make_mask", "worker.make_worker.dis_model", "worker.make_worker.ssim", "worker.make_worker.contrastive_criterion", "worker.make_worker.NCA_criterion", "utils.sample.make_mask", "worker.make_worker.dis_model", "worker.make_worker.l2_loss", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "worker.make_worker.l2_loss", "worker.make_worker.l2_loss", "worker.make_worker.dis_model", "worker.make_worker.l2_loss", "worker.make_worker.G_loss", "worker.make_worker.NCA_criterion", "utils.cr_diff_aug.CR_DiffAug", "worker.make_worker.dis_model", "worker.make_worker.contrastive_criterion", "worker.make_worker.G_loss", "worker.make_worker.G_loss", "worker.make_worker.NT_Xent_criterion", "z_log_var.exp"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.set_temperature", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.evaluation", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv4gp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.calc_derv4dra", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.make_mask", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.make_mask", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug"], ["", "", "def", "train", "(", "self", ",", "current_step", ",", "total_step", ")", ":", "\n", "\t\t", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "self", ".", "d2dis_model", ".", "eval", "(", ")", "\n", "self", ".", "encoder", ".", "train", "(", ")", "\n", "self", ".", "vae", ".", "train", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "train", "(", ")", "\n", "\n", "", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "current_step", "\n", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "\n", "ones", "=", "numpy", ".", "ones", "(", "self", ".", "cfgs", ".", "batch_size", ")", "\n", "zeros", "=", "numpy", ".", "zeros", "(", "self", ".", "cfgs", ".", "batch_size", ")", "\n", "y0_wrong_label_airplane", "=", "torch", ".", "from_numpy", "(", "zeros", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "y1_wrong_label_car", "=", "torch", ".", "from_numpy", "(", "ones", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "#self.ada_aug_p = self.adtv_aug.initialize() if self.ada else 'No' # ada adaptive data augmentation", "\n", "self", ".", "ada_aug_p", "=", "'No'", "#self.adtv_aug.initialize() if self.ada else 'No' # ada adaptive data augmentation", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t\t", "real_images_for_gen", "=", "None", "\n", "real_labels_for_gen", "=", "None", "\n", "# ================== TRAIN D ================== #", "\n", "toggle_grad", "(", "self", ".", "dis_model", ",", "on", "=", "True", ",", "freeze_layers", "=", "self", ".", "freeze_layers", ")", "# toggle_grad in misc.py", "\n", "toggle_grad", "(", "self", ".", "d2dis_model", ",", "on", "=", "True", ",", "freeze_layers", "=", "self", ".", "freeze_layers", ")", "\n", "toggle_grad", "(", "self", ".", "gen_model", ",", "on", "=", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "\n", "t", "=", "set_temperature", "(", "self", ".", "conditional_strategy", ",", "self", ".", "tempering_type", ",", "self", ".", "start_temperature", ",", "self", ".", "end_temperature", ",", "step_count", ",", "self", ".", "tempering_step", ",", "total_step", ")", "\n", "\n", "for", "step_index", "in", "range", "(", "self", ".", "d_steps_per_iter", ")", ":", "\n", "\t\t\t\t", "self", ".", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "#self.d2D_optimizer.zero_grad()", "\n", "for", "acml_index", "in", "range", "(", "self", ".", "accumulation_steps", ")", ":", "# self.accumulation_steps = 1", "\n", "\t\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t\t\t\t", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "real_labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "real_images_for_gen", "=", "real_images", "\n", "real_labels_for_gen", "=", "real_labels", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "# amp = automatic mixed precision package torch.cuda.amp", "\n", "\t\t\t\t\t\t", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "real_images", "=", "DiffAugment", "(", "real_images", ",", "policy", "=", "self", ".", "policy", ")", "\n", "# if self.ada:", "\n", "#     real_images, _ = augment(real_images, self.ada_aug_p)", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "# zs, fake_labels = sample_latents(self.prior, self.batch_size, self.z_dim, 1, self.num_classes,", "\n", "#                                  None, self.local_rank)", "\n", "\t\t\t\t\t\t\t", "latent_i", "=", "self", ".", "encoder", "(", "real_images", ")", "\n", "z_mean", ",", "z_log_var", ",", "zs", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "\n", "latent_i_ori", "=", "self", ".", "encoder", "(", "real_images_for_gen", ")", "\n", "z_mean_ori", ",", "z_log_var_ori", ",", "zs_ori", "=", "self", ".", "vae", "(", "latent_i_ori", ")", "\n", "\n", "\n", "fake_labels", "=", "real_labels", "#already to devices", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "fake_images", "=", "self", ".", "gen_model", "(", "zs", ",", "fake_labels", ")", "\n", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels_ori", "=", "self", ".", "gen_model", "(", "zs_ori", ",", "wrong_labels", ")", "\n", "fake_images_2d_ori", "=", "self", ".", "gen_model", "(", "zs_ori", ",", "real_labels", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "fake_images", "=", "DiffAugment", "(", "fake_images", ",", "policy", "=", "self", ".", "policy", ")", "\n", "#fake_images_wrong_labels = DiffAugment(fake_images_wrong_labels_ori, policy=self.policy)", "\n", "# if self.ada:", "\n", "#     fake_images, _ = augment(fake_images, self.ada_aug_p)", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "cls_out_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "\n", "\n", "difference_pos", "=", "real_images_for_gen", "-", "fake_images_2d_ori", "\n", "difference_neg", "=", "real_images_for_gen", "-", "fake_images_wrong_labels_ori", "\n", "dis_out_pos", "=", "self", ".", "d2dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "self", ".", "d2dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "\n", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t", "cls_proxies_real", ",", "cls_embed_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "dis_acml_loss", "=", "self", ".", "D_loss", "(", "dis_out_real", ",", "dis_out_fake", ")", "\n", "d2dis_acml_loss", "=", "self", ".", "d2D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "(", "self", ".", "ce_loss", "(", "cls_out_real", ",", "real_labels", ")", "+", "self", ".", "ce_loss", "(", "cls_out_fake", ",", "fake_labels", ")", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"NT_Xent_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "real_images_aug", "=", "CR_DiffAug", "(", "real_images", ")", "\n", "_", ",", "cls_embed_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "dis_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NT_Xent_criterion", "(", "cls_embed_real", ",", "cls_embed_real_aug", ",", "t", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"Proxy_NCA_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NCA_criterion", "(", "cls_embed_real", ",", "cls_proxies_real", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ContraGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "real_cls_mask", "=", "make_mask", "(", "real_labels", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ")", "\n", "dis_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "contrastive_criterion", "(", "cls_embed_real", ",", "cls_proxies_real", ",", "\n", "real_cls_mask", ",", "real_labels", ",", "t", ",", "self", ".", "margin", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "pass", "\n", "\n", "", "if", "self", ".", "cr", ":", "\n", "\t\t\t\t\t\t\t", "real_images_aug", "=", "CR_DiffAug", "(", "real_images", ")", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_out_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_consistency_loss", "=", "self", ".", "l2_loss", "(", "cls_out_real", ",", "cls_out_real_aug", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t\t", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "_", ",", "cls_embed_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_consistency_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_real", ",", "cls_embed_real_aug", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "consistency_loss", "=", "self", ".", "l2_loss", "(", "dis_out_real", ",", "dis_out_real_aug", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "consistency_loss", "+=", "cls_consistency_loss", "\n", "", "dis_acml_loss", "+=", "self", ".", "cr_lambda", "*", "consistency_loss", "\n", "\n", "", "if", "self", ".", "bcr", ":", "\n", "\t\t\t\t\t\t\t", "real_images_aug", "=", "CR_DiffAug", "(", "real_images", ")", "\n", "fake_images_aug", "=", "CR_DiffAug", "(", "fake_images", ")", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_out_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_out_fake_aug", ",", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "cls_bcr_real_loss", "=", "self", ".", "l2_loss", "(", "cls_out_real", ",", "cls_out_real_aug", ")", "\n", "cls_bcr_fake_loss", "=", "self", ".", "l2_loss", "(", "cls_out_fake", ",", "cls_out_fake_aug", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t\t", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_proxies_real_aug", ",", "cls_embed_real_aug", ",", "dis_out_real_aug", "=", "self", ".", "dis_model", "(", "real_images_aug", ",", "real_labels", ")", "\n", "cls_proxies_fake_aug", ",", "cls_embed_fake_aug", ",", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "cls_bcr_real_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_real", ",", "cls_embed_real_aug", ")", "\n", "cls_bcr_fake_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_fake", ",", "cls_embed_fake_aug", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "bcr_real_loss", "=", "self", ".", "l2_loss", "(", "dis_out_real", ",", "dis_out_real_aug", ")", "\n", "bcr_fake_loss", "=", "self", ".", "l2_loss", "(", "dis_out_fake", ",", "dis_out_fake_aug", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "bcr_real_loss", "+=", "cls_bcr_real_loss", "\n", "bcr_fake_loss", "+=", "cls_bcr_fake_loss", "\n", "", "dis_acml_loss", "+=", "self", ".", "real_lambda", "*", "bcr_real_loss", "+", "self", ".", "fake_lambda", "*", "bcr_fake_loss", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_zaug", "=", "self", ".", "gen_model", "(", "zs_t", ",", "fake_labels", ")", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_out_fake_zaug", ",", "dis_out_fake_zaug", "=", "self", ".", "dis_model", "(", "fake_images_zaug", ",", "fake_labels", ")", "\n", "cls_zcr_dis_loss", "=", "self", ".", "l2_loss", "(", "cls_out_fake", ",", "cls_out_fake_zaug", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t\t", "dis_out_fake_zaug", "=", "self", ".", "dis_model", "(", "fake_images_zaug", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "cls_proxies_fake_zaug", ",", "cls_embed_fake_zaug", ",", "dis_out_fake_zaug", "=", "self", ".", "dis_model", "(", "fake_images_zaug", ",", "fake_labels", ")", "\n", "cls_zcr_dis_loss", "=", "self", ".", "l2_loss", "(", "cls_embed_fake", ",", "cls_embed_fake_zaug", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "zcr_dis_loss", "=", "self", ".", "l2_loss", "(", "dis_out_fake", ",", "dis_out_fake_zaug", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "\"ACGAN\"", ",", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t\t", "zcr_dis_loss", "+=", "cls_zcr_dis_loss", "\n", "", "dis_acml_loss", "+=", "self", ".", "dis_lambda", "*", "zcr_dis_loss", "\n", "\n", "", "if", "self", ".", "gradient_penalty_for_dis", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "self", ".", "gradient_penalty_lambda", "*", "calc_derv4gp", "(", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "real_images", ",", "\n", "fake_images", ",", "real_labels", ",", "self", ".", "local_rank", ")", "\n", "", "if", "self", ".", "deep_regret_analysis_for_dis", ":", "\n", "\t\t\t\t\t\t\t", "dis_acml_loss", "+=", "self", ".", "regret_penalty_lambda", "*", "calc_derv4dra", "(", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "real_images", ",", "\n", "real_labels", ",", "self", ".", "local_rank", ")", "\n", "# if self.ada:", "\n", "#     self.ada_aug_p = self.adtv_aug.update(dis_out_real)", "\n", "\n", "", "dis_acml_loss_watch", "=", "dis_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "d2dis_acml_loss", "=", "d2dis_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "dis_acml_loss", "=", "dis_acml_loss", "/", "self", ".", "accumulation_steps", "#+ d2dis_acml_loss", "\n", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t\t", "self", ".", "scaler", ".", "scale", "(", "dis_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis_acml_loss", ".", "backward", "(", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t", "self", ".", "scaler", ".", "step", "(", "self", ".", "D_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "D_optimizer", ".", "step", "(", ")", "\n", "#self.d2D_optimizer.step()", "\n", "\n", "", "if", "self", ".", "weight_clipping_for_dis", ":", "\n", "\t\t\t\t\t", "for", "p", "in", "self", ".", "dis_model", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t\t\t", "p", ".", "data", ".", "clamp_", "(", "-", "self", ".", "weight_clipping_bound", ",", "self", ".", "weight_clipping_bound", ")", "\n", "\n", "", "", "", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "step_count", "!=", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "if", "self", ".", "d_spectral_norm", ":", "\n", "\t\t\t\t\t", "dis_sigmas", "=", "calculate_all_sn", "(", "self", ".", "dis_model", ")", "\n", "d2dis_sigmas", "=", "calculate_all_sn", "(", "self", ".", "d2dis_model", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_dis'", ",", "dis_sigmas", ",", "step_count", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_d2dis'", ",", "d2dis_sigmas", ",", "step_count", ")", "\n", "# ================== TRAIN G ================== #", "\n", "", "", "toggle_grad", "(", "self", ".", "dis_model", ",", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "toggle_grad", "(", "self", ".", "d2dis_model", ",", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "toggle_grad", "(", "self", ".", "gen_model", ",", "True", ",", "freeze_layers", "=", "-", "1", ")", "\n", "\n", "for", "step_index", "in", "range", "(", "self", ".", "g_steps_per_iter", ")", ":", "\n", "\t\t\t\t", "self", ".", "G_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "opt_encoder", ".", "zero_grad", "(", ")", "\n", "for", "acml_step", "in", "range", "(", "self", ".", "accumulation_steps", ")", ":", "#accumulation_steps=1", "\n", "\n", "\n", "\n", "\t\t\t\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "# loading data", "\n", "# try:", "\n", "#     real_images, real_labels = next(train_iter)", "\n", "# except StopIteration:", "\n", "#     train_iter = iter(self.train_dataloader)", "\n", "#     real_images, real_labels = next(train_iter)", "\n", "\n", "\t\t\t\t\t\t", "real_images", ",", "real_labels", "=", "real_images_for_gen", ",", "real_labels_for_gen", "\n", "\n", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "#zs, fake_labels = sample_latents(self.prior, self.batch_size, self.z_dim, 1, self.num_classes,", "\n", "#                                None, self.local_rank)", "\n", "\t\t\t\t\t\t\t", "latent_i", "=", "self", ".", "encoder", "(", "real_images", ")", "\n", "z_mean", ",", "z_log_var", ",", "zs", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "fake_labels", "=", "real_labels", "\n", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "transport_cost", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "True", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "fake_images_ori", "=", "self", ".", "gen_model", "(", "zs", ",", "fake_labels", ")", "\n", "#wrong_labels = ((real_labels + Int_Modi) % 10).to(self.local_rank)", "\n", "\n", "#fake_images_wrong_labels  = self.gen_model(zs, wrong_labels)", "\n", "\n", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "fake_images", "=", "DiffAugment", "(", "fake_images_ori", ",", "policy", "=", "self", ".", "policy", ")", "\n", "# if self.ada:", "\n", "#     fake_images, _ = augment(fake_images, self.ada_aug_p)", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "dis_out_pos", "=", "self", ".", "d2dis_model", "(", "(", "real_images", "-", "fake_images_ori", ")", ",", "fake_labels", ")", "\n", "#dis_out_neg = self.d2dis_model((real_images - fake_images_wrong_labels), wrong_labels)", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t", "fake_cls_mask", "=", "make_mask", "(", "fake_labels", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ")", "\n", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "", "loss_img_ssim", "=", "-", "torch", ".", "log", "(", "self", ".", "ssim", "(", "fake_images_ori", ",", "real_images", ")", "+", "1e-15", ")", "\n", "loss_lat", "=", "0.5", "*", "(", "z_log_var", ".", "exp", "(", ")", "+", "z_mean", "**", "2", "-", "1", "-", "z_log_var", ")", ".", "mean", "(", ")", "\n", "loss_img_l2", "=", "torch", ".", "abs", "(", "(", "fake_images_ori", "-", "real_images", ")", "**", "2", ")", ".", "mean", "(", ")", "#torch.nn.MSELoss(fake_images_ori, real_images).mean() #t", "\n", "loss_img_l1", "=", "torch", ".", "abs", "(", "fake_images_ori", "-", "real_images", ")", ".", "mean", "(", ")", "\n", "\n", "gen_acml_loss_watch_g_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "\n", "gen_acml_loss_watch_g_loss_2", "=", "self", ".", "G_loss", "(", "dis_out_pos", ")", "\n", "\n", "gen_l2_loss_watch", "=", "loss_img_l2", "\n", "gen_ssim_loss_watch", "=", "5", "*", "loss_img_ssim", "\n", "gen_lat_loss", "=", "loss_lat", "\n", "gen_l1_loss", "=", "loss_img_l1", "\n", "gen_ori_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "+", "loss_img_l2", "+", "5", "*", "loss_img_ssim", "+", "loss_lat", "+", "loss_img_l1", "\n", "\n", "gen_acml_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "+", "self", ".", "G_loss", "(", "dis_out_pos", ")", "+", "loss_img_l2", "+", "5", "*", "loss_img_ssim", "+", "loss_lat", "+", "loss_img_l1", "\n", "\n", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "transport_cost", "*", "self", ".", "latent_norm_reg_weight", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_zaug", "=", "self", ".", "gen_model", "(", "zs_t", ",", "fake_labels", ")", "\n", "zcr_gen_loss", "=", "-", "1", "*", "self", ".", "l2_loss", "(", "fake_images", ",", "fake_images_zaug", ")", "\n", "gen_acml_loss", "+=", "self", ".", "gen_lambda", "*", "zcr_gen_loss", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "ce_loss", "(", "cls_out_fake", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ContraGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "contrastive_criterion", "(", "cls_embed_fake", ",", "cls_proxies_fake", ",", "fake_cls_mask", ",", "fake_labels", ",", "t", ",", "self", ".", "margin", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"Proxy_NCA_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NCA_criterion", "(", "cls_embed_fake", ",", "cls_proxies_fake", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"NT_Xent_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_aug", "=", "CR_DiffAug", "(", "fake_images", ")", "\n", "_", ",", "cls_embed_fake_aug", ",", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NT_Xent_criterion", "(", "cls_embed_fake", ",", "cls_embed_fake_aug", ",", "t", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "pass", "\n", "\n", "", "gen_acml_loss", "=", "gen_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "\n", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t\t", "self", ".", "scaler", ".", "scale", "(", "gen_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "gen_acml_loss", ".", "backward", "(", ")", "\n", "\n", "", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t", "self", ".", "scaler", ".", "step", "(", "self", ".", "G_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "G_optimizer", ".", "step", "(", ")", "\n", "self", ".", "opt_encoder", ".", "step", "(", ")", "\n", "\n", "# if ema is True: we update parameters of the Gen_copy in adaptive way.", "\n", "", "if", "self", ".", "ema", ":", "\n", "\t\t\t\t\t", "self", ".", "Gen_ema", ".", "update", "(", "step_count", ")", "\n", "\n", "", "step_count", "+=", "1", "\n", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "gen_model", ".", "eval", "(", ")", "\n", "wrong_label_airplane", "=", "self", ".", "gen_model", "(", "zs", ",", "y0_wrong_label_airplane", ")", "\n", "wrong_label_car", "=", "self", ".", "gen_model", "(", "zs", ",", "y1_wrong_label_car", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'fake'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "fake_images_ori", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'real'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "real_images", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'fake_aug'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "fake_images", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'wrong_label_airplane'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "wrong_label_airplane", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'wrong_label_car'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "wrong_label_car", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'difference_pos'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "difference_pos", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'difference_neg'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "difference_neg", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "\n", "\n", "", "", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "log_message", "=", "LOG_FORMAT", ".", "format", "(", "step", "=", "step_count", ",", "\n", "progress", "=", "step_count", "/", "total_step", ",", "\n", "elapsed", "=", "elapsed_time", "(", "self", ".", "start_time", ")", ",", "\n", "# temperature=t,", "\n", "# ada_p=self.ada_aug_p,", "\n", "dis_loss", "=", "dis_acml_loss_watch", ".", "item", "(", ")", ",", "\n", "d2dis_loss", "=", "d2dis_acml_loss", ".", "item", "(", ")", ",", "\n", "gen_loss", "=", "gen_acml_loss", ".", "item", "(", ")", ",", "\n", "gen_acml_loss_watch_g_loss", "=", "gen_acml_loss_watch_g_loss", ".", "item", "(", ")", ",", "\n", "gen_acml_loss_watch_g_loss_2", "=", "gen_acml_loss_watch_g_loss_2", ".", "item", "(", ")", ",", "\n", "gen_l2_loss_watch", "=", "gen_l2_loss_watch", ".", "item", "(", ")", ",", "\n", "gen_l1_loss", "=", "gen_l1_loss", ".", "item", "(", ")", ",", "\n", "gen_ssim_loss_watch", "=", "gen_l2_loss_watch", ".", "item", "(", ")", ",", "\n", "gen_lat_loss", "=", "gen_lat_loss", ".", "item", "(", ")", ",", "\n", "gen_ori_loss", "=", "gen_ori_loss", ".", "item", "(", ")", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_message", ")", "\n", "\n", "\n", "if", "self", ".", "g_spectral_norm", ":", "\n", "\t\t\t\t\t", "gen_sigmas", "=", "calculate_all_sn", "(", "self", ".", "gen_model", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_gen'", ",", "gen_sigmas", ",", "step_count", ")", "\n", "\n", "", "self", ".", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", ",", "\n", "'generator'", ":", "gen_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "ada", ":", "\n", "\t\t\t\t\t", "self", ".", "writer", ".", "add_scalar", "(", "'ada_p'", ",", "self", ".", "ada_aug_p", ",", "step_count", ")", "\n", "\n", "", "", "if", "step_count", "%", "self", ".", "save_every", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t\t", "if", "self", ".", "evaluate", ":", "\n", "\t\t\t\t\t", "is_best", "=", "self", ".", "evaluation", "(", "step_count", ",", "False", ",", "\"N/A\"", ")", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "save", "(", "step_count", ",", "is_best", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "save", "(", "step_count", ",", "False", ")", "\n", "\n", "", "", "if", "self", ".", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t\t\t", "dist", ".", "barrier", "(", "self", ".", "group", ")", "\n", "\n", "", "", "return", "step_count", "-", "1", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.save": [[647, 747], ["worker.make_worker.dis_model.eval", "worker.make_worker.d2dis_model.eval", "worker.make_worker.gen_model.eval", "worker.make_worker.encoder.eval", "worker.make_worker.vae.eval", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "worker.make_worker.dis_model.train", "worker.make_worker.gen_model.train", "worker.make_worker.encoder.train", "worker.make_worker.vae.train", "worker.make_worker.Gen_copy.eval", "isinstance", "isinstance", "gen.state_dict", "worker.make_worker.G_optimizer.state_dict", "dis.state_dict", "worker.make_worker.D_optimizer.state_dict", "d2dis.state_dict", "worker.make_worker.d2D_optimizer.state_dict", "enc_save.state_dict", "worker.make_worker.opt_encoder.state_dict", "vae_save.state_dict", "len", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "worker.make_worker.Gen_copy.train", "glob.glob", "len", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "gen_copy.state_dict", "len", "utils.misc.find_and_remove", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "worker.make_worker.logger.info", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "str", "str", "str", "str", "str", "glob.glob", "glob.glob", "len", "utils.misc.find_and_remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "str", "str", "str", "str", "str", "os.path.join", "glob.glob", "str", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "def", "save", "(", "self", ",", "step", ",", "is_best", ")", ":", "\n", "\t\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "self", ".", "d2dis_model", ".", "eval", "(", ")", "\n", "self", ".", "gen_model", ".", "eval", "(", ")", "\n", "self", ".", "encoder", ".", "eval", "(", ")", "\n", "self", ".", "vae", ".", "eval", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "eval", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "gen_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "gen_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t", "gen", ",", "dis", "=", "self", ".", "gen_model", ".", "module", ",", "self", ".", "dis_model", ".", "module", "\n", "d2dis", "=", "self", ".", "d2dis_model", ".", "module", "\n", "enc_save", "=", "self", ".", "encoder", ".", "module", "\n", "vae_save", "=", "self", ".", "vae", ".", "module", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t\t", "gen_copy", "=", "self", ".", "Gen_copy", ".", "module", "\n", "", "", "else", ":", "\n", "\t\t\t", "gen", ",", "dis", "=", "self", ".", "gen_model", ",", "self", ".", "dis_model", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t\t", "gen_copy", "=", "self", ".", "Gen_copy", "\n", "\n", "", "", "g_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "gen", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "G_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", "}", "\n", "\n", "d_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "D_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "d2d_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "d2dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "d2D_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "e_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "enc_save", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "opt_encoder", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "v_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "vae_save", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d2d_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "e_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "v_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "g_states", ",", "g_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "d2d_states", ",", "d2d_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "e_states", ",", "e_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "v_states", ",", "v_checkpoint_output_path", ")", "\n", "\n", "if", "when", "==", "\"best\"", ":", "\n", "\t\t\t", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step*.pth\"", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "", "g_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d2d_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=d2D-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "e_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "v_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_states", ",", "g_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "d2d_states", ",", "d2d_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "e_states", ",", "e_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "v_states", ",", "v_checkpoint_output_path_", ")", "\n", "", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "g_ema_states", "=", "{", "'state_dict'", ":", "gen_copy", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_ema_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_ema_states", ",", "g_ema_checkpoint_output_path", ")", "\n", "\n", "if", "when", "==", "\"best\"", ":", "\n", "\t\t\t\t", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_ema_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_ema_states", ",", "g_ema_checkpoint_output_path_", ")", "\n", "\n", "", "", "if", "self", ".", "logger", ":", "\n", "\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "self", ".", "checkpoint_dir", ")", ")", "\n", "\n", "", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "#self.d2dis_model.train()", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "self", ".", "encoder", ".", "train", "(", ")", "\n", "self", ".", "vae", ".", "train", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "train", "(", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.evaluation": [[751, 830], ["worker.make_worker.dis_model.eval", "utils.misc.change_generator_mode", "metrics.FID.calculate_fid_score", "metrics.IS.calculate_incep_score", "metrics.F_beta.calculate_f_beta_score", "utils.misc.plot_pr_curve", "worker.make_worker.dis_model.train", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "worker.make_worker.logger.info", "worker.make_worker.embedding_layer", "worker.make_worker.cosine_similarity", "utils.misc.plot_sim_heatmap", "metrics.Accuracy.calculate_accuracy", "worker.make_worker.writer.add_scalars", "worker.make_worker.writer.add_scalars", "worker.make_worker.writer.add_scalars", "worker.make_worker.writer.add_scalars", "worker.make_worker.writer.add_figure", "worker.make_worker.logger.info", "worker.make_worker.logger.info", "worker.make_worker.logger.info", "worker.make_worker.logger.info", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to.detach().cpu().numpy", "torch.tensor().to.detach().cpu().numpy", "torch.tensor().to.detach().cpu().numpy", "torch.tensor().to.detach().cpu().numpy", "worker.make_worker.unsqueeze", "worker.make_worker.unsqueeze", "worker.make_worker.detach().cpu().numpy", "metrics.Accuracy.calculate_accuracy", "worker.make_worker.writer.add_scalars", "worker.make_worker.writer.add_figure", "worker.make_worker.logger.info", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to.detach().cpu", "torch.tensor().to.detach().cpu", "torch.tensor().to.detach().cpu", "torch.tensor().to.detach().cpu", "worker.make_worker.detach().cpu", "str", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "str", "str", "str", "random.sample", "random.sample", "random.sample", "random.sample", "torch.tensor().to.detach", "torch.tensor().to.detach", "torch.tensor().to.detach", "torch.tensor().to.detach", "worker.make_worker.detach", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_fid_score", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.calculate_incep_score", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.calculate_f_beta_score", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_pr_curve", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_sim_heatmap", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.Accuracy.calculate_accuracy", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.Accuracy.calculate_accuracy"], ["", "", "def", "evaluation", "(", "self", ",", "step", ",", "standing_statistics", ",", "standing_step", ")", ":", "# standing_statistics=False standing_step=NA", "\n", "\t\t", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "\"Start Evaluation ({step} Step): {run_name}\"", ".", "format", "(", "step", "=", "step", ",", "run_name", "=", "self", ".", "run_name", ")", ")", "\n", "is_best", "=", "False", "\n", "num_split", ",", "num_run4PR", ",", "num_cluster4PR", ",", "beta4PR", "=", "1", ",", "10", ",", "20", ",", "8", "\n", "\n", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "# change_generator_mode is in misc.py", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "fid_score", ",", "self", ".", "m1", ",", "self", ".", "s1", "=", "calculate_fid_score", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "inception_model", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step4eval", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "self", ".", "logger", ",", "self", ".", "mu", ",", "self", ".", "sigma", ",", "self", ".", "run_name", ")", "\n", "\n", "kl_score", ",", "kl_std", "=", "calculate_incep_score", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "inception_model", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step4eval", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "num_split", ",", "self", ".", "local_rank", ",", "self", ".", "logger", ")", "\n", "\n", "precision", ",", "recall", ",", "f_beta", ",", "f_beta_inv", "=", "calculate_f_beta_score", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "inception_model", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "num_run4PR", ",", "num_cluster4PR", ",", "beta4PR", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "\n", "self", ".", "latent_op_step4eval", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "self", ".", "logger", ")", "\n", "PR_Curve", "=", "plot_pr_curve", "(", "precision", ",", "recall", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", "]", ":", "\n", "\t\t\t\t", "if", "self", ".", "dataset_name", "==", "\"cifar10\"", ":", "\n", "\t\t\t\t\t", "classes", "=", "torch", ".", "tensor", "(", "[", "c", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "labels", "=", "[", "\"airplane\"", ",", "\"automobile\"", ",", "\"bird\"", ",", "\"cat\"", ",", "\"deer\"", ",", "\"dog\"", ",", "\"frog\"", ",", "\"horse\"", ",", "\"ship\"", ",", "\"truck\"", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "num_classes", ">", "10", ":", "\n", "\t\t\t\t\t\t", "classes", "=", "torch", ".", "tensor", "(", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "num_classes", ")", ",", "10", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "classes", "=", "torch", ".", "tensor", "(", "[", "c", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "", "labels", "=", "classes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "proxies", "=", "self", ".", "embedding_layer", "(", "classes", ")", "\n", "sim_p", "=", "self", ".", "cosine_similarity", "(", "proxies", ".", "unsqueeze", "(", "1", ")", ",", "proxies", ".", "unsqueeze", "(", "0", ")", ")", "\n", "sim_heatmap", "=", "plot_sim_heatmap", "(", "sim_p", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "labels", ",", "labels", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "D_loss", ".", "__name__", "!=", "\"loss_wgan_dis\"", ":", "\n", "\t\t\t\t", "real_train_acc", ",", "fake_acc", "=", "calculate_accuracy", "(", "self", ".", "train_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "D_loss", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "cr", "=", "self", ".", "cr", ",", "logger", "=", "self", ".", "logger", ",", "eval_generated_sample", "=", "True", ")", "\n", "\n", "if", "self", ".", "eval_type", "==", "'train'", ":", "\n", "\t\t\t\t\t", "acc_dict", "=", "{", "'real_train'", ":", "real_train_acc", ",", "'fake'", ":", "fake_acc", "}", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_eval_acc", "=", "calculate_accuracy", "(", "self", ".", "eval_dataloader", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "D_loss", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "\n", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ",", "cr", "=", "self", ".", "cr", ",", "logger", "=", "self", ".", "logger", ",", "eval_generated_sample", "=", "False", ")", "\n", "acc_dict", "=", "{", "'real_train'", ":", "real_train_acc", ",", "'real_valid'", ":", "real_eval_acc", ",", "'fake'", ":", "fake_acc", "}", "\n", "\n", "", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "writer", ".", "add_scalars", "(", "'Accuracy'", ",", "acc_dict", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "best_fid", "is", "None", ":", "\n", "\t\t\t\t", "self", ".", "best_fid", ",", "self", ".", "best_step", ",", "is_best", ",", "f_beta_best", ",", "f_beta_inv_best", "=", "fid_score", ",", "step", ",", "True", ",", "f_beta", ",", "f_beta_inv", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "fid_score", "<=", "self", ".", "best_fid", ":", "\n", "\t\t\t\t\t", "self", ".", "best_fid", ",", "self", ".", "best_step", ",", "is_best", ",", "f_beta_best", ",", "f_beta_inv_best", "=", "fid_score", ",", "step", ",", "True", ",", "f_beta", ",", "f_beta_inv", "\n", "\n", "", "", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "writer", ".", "add_scalars", "(", "'FID score'", ",", "{", "'using {type} moments'", ".", "format", "(", "type", "=", "self", ".", "eval_type", ")", ":", "fid_score", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'F_beta score'", ",", "{", "'{num} generated images'", ".", "format", "(", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ")", ":", "f_beta", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'F_beta_inv score'", ",", "{", "'{num} generated images'", ".", "format", "(", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ")", ":", "f_beta_inv", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'IS score'", ",", "{", "'{num} generated images'", ".", "format", "(", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ")", ":", "kl_score", "}", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_figure", "(", "'PR_Curve'", ",", "PR_Curve", ",", "global_step", "=", "step", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", "]", ":", "\n", "\t\t\t\t\t", "self", ".", "writer", ".", "add_figure", "(", "'Similarity_heatmap'", ",", "sim_heatmap", ",", "global_step", "=", "step", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'F_{beta} score (Step: {step}, Using {type} images): {F_beta}'", ".", "format", "(", "beta", "=", "beta4PR", ",", "step", "=", "step", ",", "type", "=", "self", ".", "eval_type", ",", "F_beta", "=", "f_beta", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'F_1/{beta} score (Step: {step}, Using {type} images): {F_beta_inv}'", ".", "format", "(", "beta", "=", "beta4PR", ",", "step", "=", "step", ",", "type", "=", "self", ".", "eval_type", ",", "F_beta_inv", "=", "f_beta_inv", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'FID score (Step: {step}, Using {type} moments): {FID}'", ".", "format", "(", "step", "=", "step", ",", "type", "=", "self", ".", "eval_type", ",", "FID", "=", "fid_score", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Inception score (Step: {step}, {num} generated images): {IS}'", ".", "format", "(", "step", "=", "step", ",", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ")", ",", "IS", "=", "kl_score", ")", ")", "\n", "if", "self", ".", "train", ":", "\n", "\t\t\t\t\t", "self", ".", "logger", ".", "info", "(", "'Best FID score (Step: {step}, Using {type} moments): {FID}'", ".", "format", "(", "step", "=", "self", ".", "best_step", ",", "type", "=", "self", ".", "eval_type", ",", "FID", "=", "self", ".", "best_fid", ")", ")", "\n", "\n", "", "", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "", "return", "is_best", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.save_images": [[834, 853], ["worker.make_worker.logger.info", "worker.make_worker.dis_model.eval", "utils.misc.change_generator_mode", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "utils.misc.save_images_png", "utils.misc.save_images_npz"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_png", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_npz"], ["", "def", "save_images", "(", "self", ",", "is_generate", ",", "standing_statistics", ",", "standing_step", ",", "png", "=", "True", ",", "npz", "=", "True", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start save images....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "if", "png", ":", "\n", "\t\t\t\t", "save_images_png", "(", "self", ".", "run_name", ",", "self", ".", "eval_dataloader", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "self", ".", "num_classes", ",", "generator", ",", "\n", "self", ".", "dis_model", ",", "is_generate", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "\n", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "", "if", "npz", ":", "\n", "\t\t\t\t", "save_images_npz", "(", "self", ".", "run_name", ",", "self", ".", "eval_dataloader", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "self", ".", "num_classes", ",", "generator", ",", "\n", "self", ".", "dis_model", ",", "is_generate", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "\n", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.run_image_visualization": [[857, 884], ["worker.make_worker.logger.info", "utils.misc.change_generator_mode", "utils.misc.change_generator_mode.", "utils.misc.plot_img_canvas", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "utils.misc.change_generator_mode.detach().cpu", "utils.misc.change_generator_mode.detach"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_image_visualization", "(", "self", ",", "nrow", ",", "ncol", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start visualize images....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "None", ",", "\n", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "\n", "", "generated_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "plot_img_canvas", "(", "(", "generated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/generated_canvas.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.run_nearest_neighbor": [[888, 938], ["worker.make_worker.logger.info", "utils.misc.change_generator_mode", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "tqdm.tqdm.tqdm", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "range", "utils.misc.generate_images_for_KNN", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "utils.sample.target_class_sampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "next", "real_images.to.to.to", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "numpy.concatenate", "numpy.concatenate", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "real_images.to.to.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.misc.plot_img_canvas", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "list", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "real_images.to.to.detach().cpu", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "real_images.to.to.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "real_images.to.to.detach", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "real_images.to.to.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "real_images.to.to.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.generate_images_for_KNN", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.target_class_sampler", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas"], ["", "", "def", "run_nearest_neighbor", "(", "self", ",", "nrow", ",", "ncol", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start nearest neighbor analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "resnet50_model", "=", "torch", ".", "hub", ".", "load", "(", "'pytorch/vision:v0.6.0'", ",", "'resnet50'", ",", "pretrained", "=", "True", ")", "\n", "resnet50_conv", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet50_model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "if", "self", ".", "n_gpus", ">", "1", ":", "\n", "\t\t\t\t", "resnet50_conv", "=", "DataParallel", "(", "resnet50_conv", ",", "output_device", "=", "self", ".", "local_rank", ")", "\n", "", "resnet50_conv", ".", "eval", "(", ")", "\n", "\n", "for", "c", "in", "tqdm", "(", "range", "(", "self", ".", "num_classes", ")", ")", ":", "\n", "\t\t\t\t", "fake_images", ",", "fake_labels", "=", "generate_images_for_KNN", "(", "self", ".", "batch_size", ",", "c", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "fake_image", "=", "torch", ".", "unsqueeze", "(", "fake_images", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "fake_anchor_embedding", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "(", "fake_image", "+", "1", ")", "/", "2", ")", ")", "\n", "\n", "num_samples", ",", "target_sampler", "=", "target_class_sampler", "(", "self", ".", "train_dataset", ",", "c", ")", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "num_samples", ">=", "self", ".", "batch_size", "else", "num_samples", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "sampler", "=", "target_sampler", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_samples", "//", "batch_size", ")", ":", "\n", "\t\t\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "real_images", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "real_embeddings", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ")", "\n", "if", "batch_idx", "==", "0", ":", "\n", "\t\t\t\t\t\t", "distances", "=", "torch", ".", "square", "(", "real_embeddings", "-", "fake_anchor_embedding", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "holder", "=", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "distances", "=", "np", ".", "concatenate", "(", "[", "distances", ",", "torch", ".", "square", "(", "real_embeddings", "-", "fake_anchor_embedding", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "holder", "=", "np", ".", "concatenate", "(", "[", "holder", ",", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "nearest_indices", "=", "(", "-", "distances", ")", ".", "argsort", "(", ")", "[", "-", "(", "ncol", "-", "1", ")", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "c", "%", "nrow", "==", "0", ":", "\n", "\t\t\t\t\t", "canvas", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "c", "%", "nrow", "==", "nrow", "-", "1", ":", "\n", "\t\t\t\t\t", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "plot_img_canvas", "(", "(", "torch", ".", "from_numpy", "(", "canvas", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/Fake_anchor_{ncol}NN_{cls}_classes.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ",", "ncol", "=", "ncol", ",", "cls", "=", "c", "+", "1", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.run_linear_interpolation": [[942, 979], ["worker.make_worker.logger.info", "utils.misc.change_generator_mode", "tqdm.tqdm.tqdm", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "range", "utils.misc.change_generator_mode.", "utils.misc.plot_img_canvas", "isinstance", "isinstance", "int", "int", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.biggan_utils.interp().view.repeat().view", "utils.biggan_utils.interp().view", "utils.sample.sample_1hot", "shared().view", "utils.biggan_utils.interp().view.repeat().view", "utils.biggan_utils.interp().view", "utils.biggan_utils.interp().view.repeat", "utils.biggan_utils.interp", "shared", "utils.biggan_utils.interp().view.repeat", "utils.biggan_utils.interp", "utils.misc.change_generator_mode.detach().cpu", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "shared().view", "shared().view", "utils.misc.change_generator_mode.detach", "shared", "shared", "utils.sample.sample_1hot", "utils.sample.sample_1hot"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.interp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.interp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot"], ["", "", "def", "run_linear_interpolation", "(", "self", ",", "nrow", ",", "ncol", ",", "fix_z", ",", "fix_y", ",", "standing_statistics", ",", "standing_step", ",", "num_images", "=", "100", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start linear interpolation analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "shared", "=", "generator", ".", "module", ".", "shared", "if", "isinstance", "(", "generator", ",", "DataParallel", ")", "or", "isinstance", "(", "generator", ",", "DistributedDataParallel", ")", "else", "generator", ".", "shared", "\n", "assert", "int", "(", "fix_z", ")", "*", "int", "(", "fix_y", ")", "!=", "1", ",", "\"unable to switch fix_z and fix_y on together!\"", "\n", "\n", "for", "num", "in", "tqdm", "(", "range", "(", "num_images", ")", ")", ":", "\n", "\t\t\t\t", "if", "fix_z", ":", "\n", "\t\t\t\t\t", "zs", "=", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "zs", "=", "zs", ".", "repeat", "(", "1", ",", "ncol", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "name", "=", "\"fix_z\"", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", "=", "interp", "(", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "ncol", "-", "2", ")", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "\n", "", "if", "fix_y", ":", "\n", "\t\t\t\t\t", "ys", "=", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "ys", "=", "shared", "(", "ys", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", "\n", "ys", "=", "ys", ".", "repeat", "(", "1", ",", "ncol", ",", "1", ")", ".", "view", "(", "nrow", "*", "(", "ncol", ")", ",", "-", "1", ")", "\n", "name", "=", "\"fix_y\"", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "ys", "=", "interp", "(", "shared", "(", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ")", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", ",", "\n", "shared", "(", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ")", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", ",", "\n", "ncol", "-", "2", ")", ".", "view", "(", "nrow", "*", "(", "ncol", ")", ",", "-", "1", ")", "\n", "\n", "", "interpolated_images", "=", "generator", "(", "zs", ",", "None", ",", "shared_label", "=", "ys", ",", "evaluation", "=", "True", ")", "\n", "\n", "plot_img_canvas", "(", "(", "interpolated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/{num}_Interpolated_images_{fix_flag}.png\"", ".", "format", "(", "num", "=", "num", ",", "run_name", "=", "self", ".", "run_name", ",", "fix_flag", "=", "name", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "False", ")", "\n", "\n", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.run_frequency_analysis": [[983, 1041], ["worker.make_worker.logger.info", "utils.misc.change_generator_mode", "iter", "range", "numpy.shape", "numpy.shape", "tqdm.tqdm.tqdm", "utils.misc.plot_spectrum_image", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "next", "utils.misc.change_generator_mode.detach().cpu().numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.fft.fftshift", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.misc.change_generator_mode.detach().cpu", "scipy.ndimage.median_filter", "scipy.ndimage.median_filter", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "utils.misc.change_generator_mode.detach", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "utils.misc.change_generator_mode."], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_frequency_analysis", "(", "self", ",", "num_images", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start frequency analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "num_batches", "=", "num_images", "//", "self", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "None", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "real_images", "=", "np", ".", "asarray", "(", "(", "real_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "fake_images", "=", "np", ".", "asarray", "(", "(", "fake_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "real_array", "=", "real_images", "\n", "fake_array", "=", "fake_images", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_array", "=", "np", ".", "concatenate", "(", "[", "real_array", ",", "real_images", "]", ",", "axis", "=", "0", ")", "\n", "fake_array", "=", "np", ".", "concatenate", "(", "[", "fake_array", ",", "fake_images", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "N", ",", "C", ",", "H", ",", "W", "=", "np", ".", "shape", "(", "real_array", ")", "\n", "real_r", ",", "real_g", ",", "real_b", "=", "real_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "real_gray", "=", "0.2989", "*", "real_r", "+", "0.5870", "*", "real_g", "+", "0.1140", "*", "real_b", "\n", "fake_r", ",", "fake_g", ",", "fake_b", "=", "fake_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "fake_gray", "=", "0.2989", "*", "fake_r", "+", "0.5870", "*", "fake_g", "+", "0.1140", "*", "fake_b", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "N", ")", ")", ":", "\n", "\t\t\t\t", "real_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "real_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "real_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "fake_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "fake_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "fake_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "\n", "real_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "real_gray_f", ")", "\n", "fake_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "fake_gray_f", ")", "\n", "\n", "if", "j", "==", "0", ":", "\n", "\t\t\t\t\t", "real_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "\n", "", "", "plot_spectrum_image", "(", "real_gray_spectrum", ",", "fake_gray_spectrum", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.worker.make_worker.run_tsne": [[1045, 1135], ["worker.make_worker.logger.info", "utils.misc.change_generator_mode", "utils.misc.SaveOutput", "iter", "dis_model.named_children", "range", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "utils.misc.plot_tsne_scatter_plot", "sklearn.manifold.TSNE.fit_transform", "utils.misc.plot_tsne_scatter_plot", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "isinstance", "isinstance", "len", "next", "utils.misc.change_generator_mode.", "utils.misc.SaveOutput.clear", "utils.misc.SaveOutput.clear", "layer.register_forward_pre_hook", "hook_handles.append", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "real_images.to", "real_labels.to", "worker.make_worker.dis_model", "[].detach().cpu().numpy", "real_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "worker.make_worker.dis_model", "[].detach().cpu().numpy", "fake_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.random.permutation", "numpy.random.permutation", "worker.make_worker.dis_model", "worker.make_worker.dis_model", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "worker.make_worker.dis_model", "[].detach().cpu", "real_labels.detach().cpu", "[].cpu().detach().numpy", "real_labels.detach().cpu().numpy", "worker.make_worker.dis_model", "[].detach().cpu", "fake_labels.detach().cpu", "[].cpu().detach().numpy", "fake_labels.detach().cpu().numpy", "[].detach", "real_labels.detach", "[].cpu().detach", "real_labels.detach().cpu", "[].detach", "fake_labels.detach", "[].cpu().detach", "fake_labels.detach().cpu", "[].cpu", "real_labels.detach", "[].cpu", "fake_labels.detach"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_tsne", "(", "self", ",", "dataloader", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start tsne analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "if", "isinstance", "(", "self", ".", "gen_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "gen_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t", "dis_model", "=", "self", ".", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t", "dis_model", "=", "self", ".", "dis_model", "\n", "\n", "", "save_output", "=", "SaveOutput", "(", ")", "\n", "hook_handles", "=", "[", "]", "\n", "real", ",", "fake", "=", "{", "}", ",", "{", "}", "\n", "tsne_iter", "=", "iter", "(", "dataloader", ")", "\n", "num_batches", "=", "len", "(", "dataloader", ".", "dataset", ")", "//", "self", ".", "batch_size", "\n", "for", "name", ",", "layer", "in", "dis_model", ".", "named_children", "(", ")", ":", "\n", "\t\t\t\t", "if", "name", "==", "\"linear1\"", ":", "\n", "\t\t\t\t\t", "handle", "=", "layer", ".", "register_forward_pre_hook", "(", "save_output", ")", "\n", "hook_handles", ".", "append", "(", "handle", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "None", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "next", "(", "tsne_iter", ")", "\n", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "real_labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t", "cls_out_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t", "cls_proxies_real", ",", "cls_embed_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "real", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "real", "[", "\"labels\"", "]", "=", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "real", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"labels\"", "]", ",", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "fake", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "fake", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"labels\"", "]", ",", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "# t-SNE", "\n", "", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "verbose", "=", "1", ",", "perplexity", "=", "40", ",", "n_iter", "=", "300", ")", "\n", "if", "self", ".", "num_classes", ">", "10", ":", "\n", "\t\t\t\t ", "cls_indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_classes", ")", "[", ":", "10", "]", "\n", "real", "[", "\"embeds\"", "]", "=", "real", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "real", "[", "\"labels\"", "]", "=", "real", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"embeds\"", "]", "=", "fake", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"labels\"", "]", "=", "fake", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "\n", "", "real_tsne_results", "=", "tsne", ".", "fit_transform", "(", "real", "[", "\"embeds\"", "]", ")", "\n", "plot_tsne_scatter_plot", "(", "real", ",", "real_tsne_results", ",", "\"real\"", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "fake_tsne_results", "=", "tsne", ".", "fit_transform", "(", "fake", "[", "\"embeds\"", "]", ")", "\n", "plot_tsne_scatter_plot", "(", "fake", ",", "fake_tsne_results", ",", "\"fake\"", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.__init__": [[105, 133], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.forward": [[135, 151], ["adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.conv2d1", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.activation", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.conv2d2", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.average_pooling", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.average_pooling", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.conv2d0", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.bn1", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.DiscBlock.__init__": [[154, 191], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.DiscBlock.forward": [[193, 216], ["adding_bengin_noise_using_discriminator_as_dml.DiscBlock.activation", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.conv2d1", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.activation", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.conv2d2", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.bn1", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.bn2", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.average_pooling", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.conv2d0", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.bn0", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.Discriminator.__init__": [[220, 310], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "adding_bengin_noise_using_discriminator_as_dml.DiscOptBlock", "adding_bengin_noise_using_discriminator_as_dml.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.Discriminator.forward": [[312, 348], ["enumerate", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.embedding", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.linear2", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.linear1", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.activation", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.linear4", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.embedding", "adding_bengin_noise_using_discriminator_as_dml.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.main": [[350, 705], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "foolbox.utils.accuracy", "foolbox.attacks.LinfProjectedGradientDescentAttack", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "adding_bengin_noise_using_discriminator_as_dml.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "utils.log.make_logger.info", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "iter", "next", "numpy.random.random", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "os.path.join", "dis_acml_loss.item", "fb.attacks.LinfProjectedGradientDescentAttack.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "x_adv_test_to_classifier.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints/22000step_adding_noise_cGAN_backup\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./adv_train_mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "local_rank", "=", "rank", "\n", "# adding classifier", "\n", "checkpoint_path", "=", "'/research/dept6/yjyang/SP2020/V2CIFAR10_Generation/cifar10_models/state_dicts'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "max_iter", "=", "100", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"adding_noise_pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./advtrain_discriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"current\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/adding_noise_pn_old_model_batchsize64_acc=D-current-weights-step=57000.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "# discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "# Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "# D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "# for state in D_optimizer.state.values():", "\n", "# \tfor k, v in state.items():", "\n", "# \t\tif isinstance(v, torch.Tensor):", "\n", "# \t\t\tstate[k] = v.cuda()", "\n", "\n", "\n", "# step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./adv_train_mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "data_id", "=", "0", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "data_id", "=", "data_id", "+", "1", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "\n", "#adding some noise to real_images", "\n", "if", "data_id", "%", "2", "==", "0", ":", "\n", "\t\t\t", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "*", "0.5", "\n", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "epsilon", ",", "+", "epsilon", ")", "+", "real_images", "#images from dataset are bound in[-1, 1]", "\n", "", "img_to_classifier", "=", "(", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "(", "real_images", "+", "1", ")", "/", "2", ",", "real_labels", ")", "\n", "#logger.info(\"data_id:{}\".format(data_id))", "\n", "if", "step_count", "%", "100", "==", "0", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "\"acc of classifier is:{}\"", ".", "format", "(", "acc_of_classifier", ")", ")", "\n", "# if data_id%2 == 0: # 50% training adversarial samples", "\n", "# \tepsilon = np.random.random()*0.5", "\n", "# \t#print(epsilon)", "\n", "# \toutputs = classifier(img_to_classifier.to(local_rank))", "\n", "# \ty_classifier_ori = torch.argmax(outputs, dim=1).to(local_rank)", "\n", "", "attack", "=", "fb", ".", "attacks", ".", "LinfProjectedGradientDescentAttack", "(", "steps", "=", "40", ")", "\n", "# \traw, x_adv, is_adv = attack(fmodel, ((real_images+1)/2), y_classifier_ori, epsilons=epsilon)", "\n", "# \t#x_adv = torch.FloatTensor(x_adv).to(local_rank)", "\n", "# \t#real_images = (torch.tensor(x_adv)*2.0 -1).to(local_rank)", "\n", "# \t#print(x_adv.type())", "\n", "# \treal_images = (x_adv*2 -1).to(local_rank)", "\n", "\n", "# else:", "\n", "# \t# adding some noise to real_images", "\n", "# \treal_images = torch.empty_like(real_images, dtype=real_images.dtype).uniform_(-2/128.0, 2/128.0) + real_images", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "\n", "# if data_id%2 == 0:", "\n", "# \tx_adv_to_classifier = ((x_adv - mean)/std)", "\n", "# \toutputs = classifier(x_adv_to_classifier.to(local_rank))", "\n", "# \ty_classifier = torch.argmax(outputs, dim=1)", "\n", "\n", "# \twrong_labels = y_classifier", "\n", "# else:", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "#epsilon = np.random.random() * 0.5", "\n", "epsilon", "=", "0.03", "\n", "raw", ",", "x_adv_test", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "test_images", "+", "1", ")", "/", "2", ")", ",", "test_labels", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "test_images", "=", "(", "x_adv_test", "*", "2.0", ")", "-", "1.0", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "#Int_Modi = random.randint(1, 9)", "\n", "#wrong_labels = ((test_labels + Int_Modi) % 10).to(local_rank)", "\n", "x_adv_test_to_classifier", "=", "(", "(", "x_adv_test", "-", "mean", ")", "/", "std", ")", "\n", "outputs_test", "=", "classifier", "(", "x_adv_test_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs_test", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"adding_noise_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"adding_noise_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"adding_noise_pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"adding_noise_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"adding_noise_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"adding_noise_pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_bengin_noise_using_discriminator_as_dml.save": [[711, 725], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.FocalLoss.__init__": [[105, 111], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1", ",", "gamma", "=", "2", ",", "logits", "=", "False", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "logits", "=", "logits", "\n", "self", ".", "reduce", "=", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.FocalLoss.forward": [[112, 124], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "logits", ":", "\n", "            ", "BCE_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "inputs", ",", "targets", ",", "reduce", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "BCE_loss", "=", "F", ".", "binary_cross_entropy", "(", "inputs", ",", "targets", ",", "reduce", "=", "False", ")", "\n", "", "pt", "=", "torch", ".", "exp", "(", "-", "BCE_loss", ")", "\n", "F_loss", "=", "self", ".", "alpha", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "BCE_loss", "\n", "\n", "if", "self", ".", "reduce", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "F_loss", ")", "\n", "", "else", ":", "\n", "            ", "return", "F_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.DiscOptBlock.__init__": [[127, 155], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.DiscOptBlock.forward": [[157, 173], ["focal_loss_mydiscriminator.DiscOptBlock.conv2d1", "focal_loss_mydiscriminator.DiscOptBlock.activation", "focal_loss_mydiscriminator.DiscOptBlock.conv2d2", "focal_loss_mydiscriminator.DiscOptBlock.average_pooling", "focal_loss_mydiscriminator.DiscOptBlock.average_pooling", "focal_loss_mydiscriminator.DiscOptBlock.conv2d0", "focal_loss_mydiscriminator.DiscOptBlock.bn1", "focal_loss_mydiscriminator.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.DiscBlock.__init__": [[176, 213], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.DiscBlock.forward": [[215, 238], ["focal_loss_mydiscriminator.DiscBlock.activation", "focal_loss_mydiscriminator.DiscBlock.conv2d1", "focal_loss_mydiscriminator.DiscBlock.activation", "focal_loss_mydiscriminator.DiscBlock.conv2d2", "focal_loss_mydiscriminator.DiscBlock.bn1", "focal_loss_mydiscriminator.DiscBlock.bn2", "focal_loss_mydiscriminator.DiscBlock.average_pooling", "focal_loss_mydiscriminator.DiscBlock.conv2d0", "focal_loss_mydiscriminator.DiscBlock.bn0", "focal_loss_mydiscriminator.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.Discriminator.__init__": [[242, 332], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "focal_loss_mydiscriminator.DiscOptBlock", "focal_loss_mydiscriminator.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.Discriminator.forward": [[334, 370], ["enumerate", "focal_loss_mydiscriminator.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "focal_loss_mydiscriminator.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "focal_loss_mydiscriminator.Discriminator.embedding", "focal_loss_mydiscriminator.Discriminator.linear2", "focal_loss_mydiscriminator.Discriminator.linear1", "focal_loss_mydiscriminator.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "focal_loss_mydiscriminator.Discriminator.activation", "focal_loss_mydiscriminator.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "focal_loss_mydiscriminator.Discriminator.linear4", "focal_loss_mydiscriminator.Discriminator.embedding", "focal_loss_mydiscriminator.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.main": [[372, 661], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "focal_loss_mydiscriminator.FocalLoss", "FocalLoss.", "focal_loss_criterion.backward", "torch.optim.Adam.step", "open", "json.load", "focal_loss_mydiscriminator.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "iter", "next", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "os.path.join", "len", "len", "focal_loss_criterion.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "focal_loss_criterion.item", "test_labels.size", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./best_version1_cifar10_checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "d_checkpoint_dir", "=", "\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/best_version1_cifar10_checkpoints/acc93.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "# discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "# Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "# D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "# for state in D_optimizer.state.values():", "\n", "# \tfor k, v in state.items():", "\n", "# \t\tif isinstance(v, torch.Tensor):", "\n", "# \t\t\tstate[k] = v.cuda()", "\n", "\n", "\n", "#step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Discriminator checkpoint is {}'", ".", "format", "(", "d_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "real_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "real_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "#dis_acml_loss = D_loss(dis_out_pos, dis_out_neg)*1.0", "\n", "# adding focal loss", "\n", "focal_loss_input", "=", "torch", ".", "cat", "(", "[", "dis_out_pos", ",", "dis_out_neg", "]", ")", "\n", "targets_ones", "=", "torch", ".", "ones", "(", "len", "(", "dis_out_pos", ")", ")", ".", "to", "(", "local_rank", ")", "\n", "targets_zeros", "=", "torch", ".", "zeros", "(", "len", "(", "dis_out_neg", ")", ")", ".", "to", "(", "local_rank", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "targets_ones", "*", "1.0", ",", "targets_zeros", "*", "1.0", "]", ")", "\n", "focal_loss_criterion", "=", "FocalLoss", "(", "alpha", "=", "2", ",", "gamma", "=", "2", ",", "logits", "=", "True", ")", "\n", "#dis_acml_loss = focal_loss_criterion(focal_loss_input, targets)", "\n", "dis_acml_loss", "=", "focal_loss_criterion", "(", "focal_loss_input", ",", "targets", ")", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "test_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "test_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0.5", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0.5", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.focal_loss_mydiscriminator.save": [[667, 681], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.DiscOptBlock.__init__": [[108, 136], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.DiscOptBlock.forward": [[138, 154], ["batchsize320_mydiscriminator.DiscOptBlock.conv2d1", "batchsize320_mydiscriminator.DiscOptBlock.activation", "batchsize320_mydiscriminator.DiscOptBlock.conv2d2", "batchsize320_mydiscriminator.DiscOptBlock.average_pooling", "batchsize320_mydiscriminator.DiscOptBlock.average_pooling", "batchsize320_mydiscriminator.DiscOptBlock.conv2d0", "batchsize320_mydiscriminator.DiscOptBlock.bn1", "batchsize320_mydiscriminator.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.DiscBlock.__init__": [[157, 194], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.DiscBlock.forward": [[196, 219], ["batchsize320_mydiscriminator.DiscBlock.activation", "batchsize320_mydiscriminator.DiscBlock.conv2d1", "batchsize320_mydiscriminator.DiscBlock.activation", "batchsize320_mydiscriminator.DiscBlock.conv2d2", "batchsize320_mydiscriminator.DiscBlock.bn1", "batchsize320_mydiscriminator.DiscBlock.bn2", "batchsize320_mydiscriminator.DiscBlock.average_pooling", "batchsize320_mydiscriminator.DiscBlock.conv2d0", "batchsize320_mydiscriminator.DiscBlock.bn0", "batchsize320_mydiscriminator.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.Discriminator.__init__": [[223, 313], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "batchsize320_mydiscriminator.DiscOptBlock", "batchsize320_mydiscriminator.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.Discriminator.forward": [[315, 351], ["enumerate", "batchsize320_mydiscriminator.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "batchsize320_mydiscriminator.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "batchsize320_mydiscriminator.Discriminator.embedding", "batchsize320_mydiscriminator.Discriminator.linear2", "batchsize320_mydiscriminator.Discriminator.linear1", "batchsize320_mydiscriminator.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "batchsize320_mydiscriminator.Discriminator.activation", "batchsize320_mydiscriminator.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "batchsize320_mydiscriminator.Discriminator.linear4", "batchsize320_mydiscriminator.Discriminator.embedding", "batchsize320_mydiscriminator.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.main": [[353, 606], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "batchsize320_mydiscriminator.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "dis_model.eval", "iter", "range", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "dis_acml_loss.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "dis_acml_loss.item", "next", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "glob.glob", "glob.glob", "iter", "next", "os.path.join", "glob.glob", "glob.glob", "str", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "320", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/src/checkpoints/model=D-current-weights-step=37500.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "#step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "", "", "", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "real_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "real_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "length", "=", "0", "\n", "for", "i", "in", "range", "(", "30", ")", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\t\t\t\t\t", "i", "=", "i", "+", "1", "\n", "try", ":", "\n", "\t\t\t\t\t\t", "test_images", ",", "test_labels", "=", "next", "(", "test_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t\t\t\t", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "length", "=", "len", "(", "test_iter", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "next", "(", "test_iter", ")", "\n", "", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "test_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "test_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy", "=", "acc", "/", "(", "320.0", "*", "30", "*", "2", ")", "\n", "print", "(", "\"accuracy of discriminator is:\"", ",", "accuracy", ")", "\n", "\n", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize320_mydiscriminator.save": [[612, 626], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.__init__": [[60, 205], ["datetime.datetime.datetime.now", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "utils.misc.define_sampler", "pytorch_ssim.SSIM().to", "torch.new_group", "torch.new_group", "torch.new_group", "torch.new_group", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "utils.misc.Adaptive_Augment", "utils.losses.Conditional_Contrastive_loss", "pytorch_ssim.SSIM", "isinstance", "isinstance", "utils.losses.Proxy_NCA_loss", "utils.losses.NT_Xent_loss", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.define_sampler"], ["\t", "def", "__init__", "(", "self", ",", "cfgs", ",", "run_name", ",", "best_step", ",", "logger", ",", "writer", ",", "n_gpus", ",", "gen_model", ",", "dis_model", ",", "inception_model", ",", "Gen_copy", ",", "\n", "Gen_ema", ",", "train_dataset", ",", "eval_dataset", ",", "train_dataloader", ",", "eval_dataloader", ",", "G_optimizer", ",", "D_optimizer", ",", "G_loss", ",", "\n", "D_loss", ",", "prev_ada_p", ",", "global_rank", ",", "local_rank", ",", "bn_stat_OnTheFly", ",", "checkpoint_dir", ",", "mu", ",", "sigma", ",", "best_fid", ",", "\n", "best_fid_checkpoint_path", ",", "encoder", ",", "vae", ",", "opt_encoder", ")", ":", "\n", "\n", "\t\t", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "best_step", "=", "best_step", "\n", "self", ".", "seed", "=", "cfgs", ".", "seed", "\n", "self", ".", "dataset_name", "=", "cfgs", ".", "dataset_name", "\n", "self", ".", "eval_type", "=", "cfgs", ".", "eval_type", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "num_workers", "=", "cfgs", ".", "num_workers", "\n", "self", ".", "n_gpus", "=", "n_gpus", "\n", "\n", "self", ".", "gen_model", "=", "gen_model", "\n", "self", ".", "dis_model", "=", "dis_model", "\n", "self", ".", "inception_model", "=", "inception_model", "\n", "self", ".", "Gen_copy", "=", "Gen_copy", "\n", "self", ".", "Gen_ema", "=", "Gen_ema", "\n", "\n", "self", ".", "train_dataset", "=", "train_dataset", "\n", "self", ".", "eval_dataset", "=", "eval_dataset", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "eval_dataloader", "=", "eval_dataloader", "\n", "\n", "self", ".", "freeze_layers", "=", "cfgs", ".", "freeze_layers", "\n", "\n", "self", ".", "conditional_strategy", "=", "cfgs", ".", "conditional_strategy", "\n", "self", ".", "pos_collected_numerator", "=", "cfgs", ".", "pos_collected_numerator", "\n", "self", ".", "z_dim", "=", "cfgs", ".", "z_dim", "\n", "self", ".", "num_classes", "=", "cfgs", ".", "num_classes", "\n", "self", ".", "hypersphere_dim", "=", "cfgs", ".", "hypersphere_dim", "\n", "self", ".", "d_spectral_norm", "=", "cfgs", ".", "d_spectral_norm", "\n", "self", ".", "g_spectral_norm", "=", "cfgs", ".", "g_spectral_norm", "\n", "\n", "self", ".", "G_optimizer", "=", "G_optimizer", "\n", "self", ".", "D_optimizer", "=", "D_optimizer", "\n", "self", ".", "batch_size", "=", "cfgs", ".", "batch_size", "\n", "self", ".", "g_steps_per_iter", "=", "cfgs", ".", "g_steps_per_iter", "\n", "self", ".", "d_steps_per_iter", "=", "cfgs", ".", "d_steps_per_iter", "\n", "self", ".", "accumulation_steps", "=", "cfgs", ".", "accumulation_steps", "\n", "self", ".", "total_step", "=", "cfgs", ".", "total_step", "\n", "\n", "self", ".", "G_loss", "=", "G_loss", "\n", "self", ".", "D_loss", "=", "D_loss", "\n", "\n", "self", ".", "contrastive_lambda", "=", "cfgs", ".", "contrastive_lambda", "\n", "self", ".", "margin", "=", "cfgs", ".", "margin", "\n", "self", ".", "tempering_type", "=", "cfgs", ".", "tempering_type", "\n", "self", ".", "tempering_step", "=", "cfgs", ".", "tempering_step", "\n", "self", ".", "start_temperature", "=", "cfgs", ".", "start_temperature", "\n", "self", ".", "end_temperature", "=", "cfgs", ".", "end_temperature", "\n", "self", ".", "weight_clipping_for_dis", "=", "cfgs", ".", "weight_clipping_for_dis", "\n", "self", ".", "weight_clipping_bound", "=", "cfgs", ".", "weight_clipping_bound", "\n", "self", ".", "gradient_penalty_for_dis", "=", "cfgs", ".", "gradient_penalty_for_dis", "\n", "self", ".", "gradient_penalty_lambda", "=", "cfgs", ".", "gradient_penalty_lambda", "\n", "self", ".", "deep_regret_analysis_for_dis", "=", "cfgs", ".", "deep_regret_analysis_for_dis", "\n", "self", ".", "regret_penalty_lambda", "=", "cfgs", ".", "regret_penalty_lambda", "\n", "self", ".", "cr", "=", "cfgs", ".", "cr", "\n", "self", ".", "cr_lambda", "=", "cfgs", ".", "cr_lambda", "\n", "self", ".", "bcr", "=", "cfgs", ".", "bcr", "\n", "self", ".", "real_lambda", "=", "cfgs", ".", "real_lambda", "\n", "self", ".", "fake_lambda", "=", "cfgs", ".", "fake_lambda", "\n", "self", ".", "zcr", "=", "cfgs", ".", "zcr", "\n", "self", ".", "gen_lambda", "=", "cfgs", ".", "gen_lambda", "\n", "self", ".", "dis_lambda", "=", "cfgs", ".", "dis_lambda", "\n", "self", ".", "sigma_noise", "=", "cfgs", ".", "sigma_noise", "\n", "\n", "self", ".", "diff_aug", "=", "cfgs", ".", "diff_aug", "\n", "self", ".", "ada", "=", "cfgs", ".", "ada", "\n", "self", ".", "prev_ada_p", "=", "prev_ada_p", "\n", "self", ".", "ada_target", "=", "cfgs", ".", "ada_target", "\n", "self", ".", "ada_length", "=", "cfgs", ".", "ada_length", "\n", "self", ".", "prior", "=", "cfgs", ".", "prior", "\n", "self", ".", "truncated_factor", "=", "cfgs", ".", "truncated_factor", "\n", "self", ".", "ema", "=", "cfgs", ".", "ema", "\n", "self", ".", "latent_op", "=", "cfgs", ".", "latent_op", "\n", "self", ".", "latent_op_rate", "=", "cfgs", ".", "latent_op_rate", "\n", "self", ".", "latent_op_step", "=", "cfgs", ".", "latent_op_step", "\n", "self", ".", "latent_op_step4eval", "=", "cfgs", ".", "latent_op_step4eval", "\n", "self", ".", "latent_op_alpha", "=", "cfgs", ".", "latent_op_alpha", "\n", "self", ".", "latent_op_beta", "=", "cfgs", ".", "latent_op_beta", "\n", "self", ".", "latent_norm_reg_weight", "=", "cfgs", ".", "latent_norm_reg_weight", "\n", "\n", "self", ".", "global_rank", "=", "global_rank", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "bn_stat_OnTheFly", "=", "bn_stat_OnTheFly", "\n", "self", ".", "print_every", "=", "cfgs", ".", "print_every", "\n", "self", ".", "save_every", "=", "cfgs", ".", "save_every", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "evaluate", "=", "cfgs", ".", "eval", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "best_fid", "=", "best_fid", "\n", "self", ".", "best_fid_checkpoint_path", "=", "best_fid_checkpoint_path", "\n", "self", ".", "distributed_data_parallel", "=", "cfgs", ".", "distributed_data_parallel", "\n", "self", ".", "mixed_precision", "=", "cfgs", ".", "mixed_precision", "\n", "self", ".", "synchronized_bn", "=", "cfgs", ".", "synchronized_bn", "\n", "\n", "self", ".", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "self", ".", "l2_loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "ce_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "policy", "=", "\"color,translation,cutout\"", "\n", "self", ".", "sampler", "=", "define_sampler", "(", "self", ".", "dataset_name", ",", "self", ".", "conditional_strategy", ",", "self", ".", "batch_size", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "vae", "=", "vae", "\n", "self", ".", "opt_encoder", "=", "opt_encoder", "\n", "self", ".", "ssim", "=", "ssim_package", ".", "SSIM", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "tensorboard_root", "=", "\"./results\"", "\n", "\n", "if", "self", ".", "distributed_data_parallel", ":", "self", ".", "group", "=", "dist", ".", "new_group", "(", "[", "n", "for", "n", "in", "range", "(", "self", ".", "n_gpus", ")", "]", ")", "\n", "if", "self", ".", "mixed_precision", ":", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "if", "self", ".", "ada", ":", "self", ".", "adtv_aug", "=", "Adaptive_Augment", "(", "self", ".", "prev_ada_p", ",", "self", ".", "ada_target", ",", "self", ".", "ada_length", ",", "self", ".", "batch_size", ",", "self", ".", "local_rank", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ProjGAN'", ",", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", "]", ":", "\n", "\t\t\t", "if", "isinstance", "(", "self", ".", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t", "self", ".", "embedding_layer", "=", "self", ".", "dis_model", ".", "module", ".", "embedding", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "embedding_layer", "=", "self", ".", "dis_model", ".", "embedding", "\n", "\n", "", "", "if", "self", ".", "conditional_strategy", "==", "'ContraGAN'", ":", "\n", "\t\t\t", "self", ".", "contrastive_criterion", "=", "Conditional_Contrastive_loss", "(", "self", ".", "local_rank", ",", "self", ".", "batch_size", ",", "self", ".", "pos_collected_numerator", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'Proxy_NCA_GAN'", ":", "\n", "\t\t\t", "self", ".", "NCA_criterion", "=", "Proxy_NCA_loss", "(", "self", ".", "local_rank", ",", "self", ".", "embedding_layer", ",", "self", ".", "num_classes", ",", "self", ".", "batch_size", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'NT_Xent_GAN'", ":", "\n", "\t\t\t", "self", ".", "NT_Xent_criterion", "=", "NT_Xent_loss", "(", "self", ".", "local_rank", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pass", "\n", "\n", "", "if", "self", ".", "dataset_name", "==", "\"imagenet\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'valid'", ":", "50000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"tiny_imagenet\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'valid'", ":", "10000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"cifar10\"", ":", "\n", "\t\t\t", "self", ".", "num_eval", "=", "{", "'train'", ":", "50000", ",", "'test'", ":", "10000", "}", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"custom\"", ":", "\n", "\t\t\t", "num_train_images", ",", "num_eval_images", "=", "len", "(", "self", ".", "train_dataset", ".", "data", ")", ",", "len", "(", "self", ".", "eval_dataset", ".", "data", ")", "\n", "self", ".", "num_eval", "=", "{", "'train'", ":", "num_train_images", ",", "'valid'", ":", "num_eval_images", "}", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train": [[208, 531], ["adding_noise_worker.make_worker.dis_model.train", "adding_noise_worker.make_worker.gen_model.train", "adding_noise_worker.make_worker.encoder.train", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "iter", "adding_noise_worker.make_worker.Gen_copy.train", "adding_noise_worker.make_worker.logger.info", "adding_noise_worker.make_worker.adtv_aug.initialize", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "utils.losses.set_temperature", "range", "utils.misc.toggle_grad", "utils.misc.toggle_grad", "range", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "adding_noise_worker.make_worker.opt_encoder.zero_grad", "adding_noise_worker.make_worker.D_optimizer.zero_grad", "range", "adding_noise_worker.make_worker.G_optimizer.zero_grad", "adding_noise_worker.make_worker.opt_encoder.zero_grad", "range", "LOG_FORMAT.format", "adding_noise_worker.make_worker.logger.info", "adding_noise_worker.make_worker.writer.add_scalars", "torch.barrier", "torch.barrier", "torch.barrier", "torch.barrier", "print", "numpy.random.random", "numpy.random.random", "adding_noise_worker.make_worker.scaler.step", "adding_noise_worker.make_worker.scaler.update", "adding_noise_worker.make_worker.D_optimizer.step", "adding_noise_worker.make_worker.dis_model.parameters", "utils.misc.calculate_all_sn", "adding_noise_worker.make_worker.writer.add_scalars", "adding_noise_worker.make_worker.scaler.step", "adding_noise_worker.make_worker.scaler.update", "adding_noise_worker.make_worker.G_optimizer.step", "adding_noise_worker.make_worker.opt_encoder.step", "adding_noise_worker.make_worker.Gen_ema.update", "adding_noise_worker.make_worker.gen_model.eval", "adding_noise_worker.make_worker.gen_model", "adding_noise_worker.make_worker.gen_model", "adding_noise_worker.make_worker.writer.add_image", "adding_noise_worker.make_worker.writer.add_image", "adding_noise_worker.make_worker.writer.add_image", "adding_noise_worker.make_worker.writer.add_image", "adding_noise_worker.make_worker.writer.add_image", "adding_noise_worker.make_worker.gen_model.train", "utils.misc.calculate_all_sn", "adding_noise_worker.make_worker.writer.add_scalars", "adding_noise_worker.make_worker.writer.add_scalar", "adding_noise_worker.make_worker.evaluation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "next", "torch.clamp.to", "torch.clamp.to", "torch.clamp.to", "torch.clamp.to", "real_labels.to", "torch.clamp.min", "torch.clamp.min", "torch.clamp.min", "torch.clamp.min", "adding_noise_worker.make_worker.gen_model", "random.randint", "random.randint", "random.randint", "random.randint", "adding_noise_worker.make_worker.gen_model", "adding_noise_worker.make_worker.gen_model", "adding_noise_worker.make_worker.D_loss", "adding_noise_worker.make_worker.scaler.scale().backward", "adding_noise_worker.make_worker.backward", "p.data.clamp_", "numpy.random.random", "numpy.random.random", "adding_noise_worker.make_worker.gen_model", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "adding_noise_worker.make_worker.G_loss", "adding_noise_worker.make_worker.scaler.scale().backward", "gen_acml_loss.backward", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "utils.misc.elapsed_time", "dis_acml_loss_watch.item", "gen_acml_loss.item", "adding_noise_worker.make_worker.item", "gen_l2_loss_watch.item", "gen_l1_loss.item", "gen_l2_loss_watch.item", "gen_lat_loss.item", "adding_noise_worker.make_worker.item", "gen_acml_loss.item", "adding_noise_worker.make_worker.save", "adding_noise_worker.make_worker.save", "iter", "next", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "utils.diff_aug.DiffAugment", "augment", "utils.sample.sample_latents", "adding_noise_worker.make_worker.encoder", "adding_noise_worker.make_worker.vae", "adding_noise_worker.make_worker.encoder", "adding_noise_worker.make_worker.vae", "utils.losses.latent_optimise", "utils.diff_aug.DiffAugment", "augment", "adding_noise_worker.make_worker.dis_model", "adding_noise_worker.make_worker.dis_model", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "numpy.random.random", "numpy.random.random", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "utils.sample.sample_latents", "adding_noise_worker.make_worker.encoder", "print", "adding_noise_worker.make_worker.vae", "utils.losses.latent_optimise", "utils.diff_aug.DiffAugment", "adding_noise_worker.make_worker.dis_model", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "adding_noise_worker.make_worker.gen_model", "adding_noise_worker.make_worker.ce_loss", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "adding_noise_worker.make_worker.dis_model", "adding_noise_worker.make_worker.dis_model", "adding_noise_worker.make_worker.scaler.scale", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.clamp.min", "torch.clamp.min", "torch.clamp.min", "torch.clamp.min", "adding_noise_worker.make_worker.dis_model", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "adding_noise_worker.make_worker.l2_loss", "adding_noise_worker.make_worker.scaler.scale", "numpy.random.random", "numpy.random.random", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "adding_noise_worker.make_worker.dis_model", "adding_noise_worker.make_worker.dis_model", "utils.sample.make_mask", "adding_noise_worker.make_worker.dis_model", "adding_noise_worker.make_worker.ssim", "adding_noise_worker.make_worker.contrastive_criterion", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "adding_noise_worker.make_worker.G_loss", "adding_noise_worker.make_worker.NCA_criterion", "utils.cr_diff_aug.CR_DiffAug", "adding_noise_worker.make_worker.dis_model", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "adding_noise_worker.make_worker.NT_Xent_criterion", "z_log_var.exp"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.initialize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.set_temperature", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.Adaptive_Augment.update", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.evaluation", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.make_grid", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.augment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.ada.augment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.make_mask", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.cr_diff_aug.CR_DiffAug"], ["", "", "def", "train", "(", "self", ",", "current_step", ",", "total_step", ")", ":", "\n", "\t\t", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "self", ".", "encoder", ".", "train", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "train", "(", ")", "\n", "", "ones", "=", "numpy", ".", "ones", "(", "self", ".", "cfgs", ".", "batch_size", ")", "\n", "zeros", "=", "numpy", ".", "zeros", "(", "self", ".", "cfgs", ".", "batch_size", ")", "\n", "y0_wrong_label_airplane", "=", "torch", ".", "from_numpy", "(", "zeros", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "y1_wrong_label_car", "=", "torch", ".", "from_numpy", "(", "ones", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "current_step", "\n", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "\n", "self", ".", "ada_aug_p", "=", "self", ".", "adtv_aug", ".", "initialize", "(", ")", "if", "self", ".", "ada", "else", "'No'", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "# ================== TRAIN D ================== #", "\n", "\t\t\t", "toggle_grad", "(", "self", ".", "dis_model", ",", "on", "=", "True", ",", "freeze_layers", "=", "-", "1", ")", "\n", "toggle_grad", "(", "self", ".", "gen_model", ",", "on", "=", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "t", "=", "set_temperature", "(", "self", ".", "conditional_strategy", ",", "self", ".", "tempering_type", ",", "self", ".", "start_temperature", ",", "self", ".", "end_temperature", ",", "step_count", ",", "self", ".", "tempering_step", ",", "total_step", ")", "\n", "for", "step_index", "in", "range", "(", "self", ".", "d_steps_per_iter", ")", ":", "\n", "\t\t\t\t", "self", ".", "opt_encoder", ".", "zero_grad", "(", ")", "\n", "self", ".", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "acml_index", "in", "range", "(", "self", ".", "accumulation_steps", ")", ":", "\n", "\t\t\t\t\t", "try", ":", "\n", "\t\t\t\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t\t\t\t", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "real_labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "print", "(", "real_images", ".", "min", "(", ")", ")", "\n", "real_images_for_gen", "=", "real_images", "\n", "real_labels_for_gen", "=", "real_labels", "\n", "\n", "flag", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t\t\t\t", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "real_images", "=", "DiffAugment", "(", "real_images", ",", "policy", "=", "self", ".", "policy", ")", "\n", "real_images_without_noise", "=", "real_images", "\n", "if", "flag", ">", "0.2", ":", "\n", "\t\t\t\t\t\t\t\t", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "*", "0.51", "\n", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "epsilon", ",", "+", "epsilon", ")", "+", "real_images", "\n", "real_images", "=", "torch", ".", "clamp", "(", "real_images", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "\n", "", "", "if", "self", ".", "ada", ":", "\n", "\t\t\t\t\t\t\t", "real_images", ",", "_", "=", "augment", "(", "real_images", ",", "self", ".", "ada_aug_p", ")", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "#zs, fake_labels = sample_latents(self.prior, self.batch_size, self.z_dim, 1, self.num_classes,", "\n", "#\t\t\t\t\t\t\t\t None, self.local_rank)", "\n", "\n", "\t\t\t\t\t\t\t", "latent_i", "=", "self", ".", "encoder", "(", "real_images", ")", "\n", "z_mean", ",", "z_log_var", ",", "zs", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "\n", "latent_i_ori", "=", "self", ".", "encoder", "(", "real_images_for_gen", ")", "\n", "z_mean_ori", ",", "z_log_var_ori", ",", "zs_ori", "=", "self", ".", "vae", "(", "latent_i_ori", ")", "\n", "\n", "\n", "fake_labels", "=", "real_labels", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "\n", "", "fake_images", "=", "self", ".", "gen_model", "(", "zs", ",", "fake_labels", ")", "\n", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels_ori", "=", "self", ".", "gen_model", "(", "zs_ori", ",", "wrong_labels", ")", "\n", "fake_images_2d_ori", "=", "self", ".", "gen_model", "(", "zs_ori", ",", "real_labels", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "fake_images", "=", "DiffAugment", "(", "fake_images", ",", "policy", "=", "self", ".", "policy", ")", "\n", "", "if", "self", ".", "ada", ":", "\n", "\t\t\t\t\t\t\t", "fake_images", ",", "_", "=", "augment", "(", "fake_images", ",", "self", ".", "ada_aug_p", ")", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "cls_out_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images_without_noise", ",", "real_labels", ")", "# compare fake with clean images", "\n", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t", "cls_proxies_real", ",", "cls_embed_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "dis_acml_loss", "=", "self", ".", "D_loss", "(", "dis_out_real", ",", "dis_out_fake", ")", "\n", "\n", "dis_acml_loss", "=", "dis_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "#encoder_loss = encoder_loss/self.accumulation_steps", "\n", "\n", "dis_acml_loss_watch", "=", "dis_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "#d2dis_acml_loss = d2dis_acml_loss/self.accumulation_steps", "\n", "dis_acml_loss", "=", "dis_acml_loss", "/", "self", ".", "accumulation_steps", "# + d2dis_acml_loss", "\n", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t\t", "self", ".", "scaler", ".", "scale", "(", "dis_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis_acml_loss", ".", "backward", "(", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t", "self", ".", "scaler", ".", "step", "(", "self", ".", "D_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "D_optimizer", ".", "step", "(", ")", "\n", "#self.d2D_optimizer.step()", "\n", "\n", "", "if", "self", ".", "weight_clipping_for_dis", ":", "\n", "\t\t\t\t\t", "for", "p", "in", "self", ".", "dis_model", ".", "parameters", "(", ")", ":", "\n", "\t\t\t\t\t\t", "p", ".", "data", ".", "clamp_", "(", "-", "self", ".", "weight_clipping_bound", ",", "self", ".", "weight_clipping_bound", ")", "\n", "\n", "", "", "", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "step_count", "!=", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "if", "self", ".", "d_spectral_norm", ":", "\n", "\t\t\t\t\t", "dis_sigmas", "=", "calculate_all_sn", "(", "self", ".", "dis_model", ")", "\n", "#d2dis_sigmas = calculate_all_sn(self.d2dis_model)", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_dis'", ",", "dis_sigmas", ",", "step_count", ")", "\n", "#self.writer.add_scalars('SN_of_d2dis', d2dis_sigmas, step_count)", "\n", "# ================== TRAIN G ================== #", "\n", "", "", "toggle_grad", "(", "self", ".", "dis_model", ",", "False", ",", "freeze_layers", "=", "-", "1", ")", "\n", "#toggle_grad(self.d2dis_model, False, freeze_layers=-1)", "\n", "toggle_grad", "(", "self", ".", "gen_model", ",", "True", ",", "freeze_layers", "=", "-", "1", ")", "\n", "\n", "for", "step_index", "in", "range", "(", "self", ".", "g_steps_per_iter", ")", ":", "\n", "\t\t\t\t", "self", ".", "G_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "opt_encoder", ".", "zero_grad", "(", ")", "\n", "for", "acml_step", "in", "range", "(", "self", ".", "accumulation_steps", ")", ":", "#accumulation_steps=1", "\n", "\n", "\n", "\n", "\t\t\t\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "# loading data", "\n", "# try:", "\n", "#     real_images, real_labels = next(train_iter)", "\n", "# except StopIteration:", "\n", "#     train_iter = iter(self.train_dataloader)", "\n", "#     real_images, real_labels = next(train_iter)", "\n", "\n", "\t\t\t\t\t\t", "real_images", ",", "real_labels", "=", "real_images_for_gen", ",", "real_labels_for_gen", "\n", "real_images_without_noise", "=", "real_images", "\n", "flag", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "if", "flag", ">", "0.2", ":", "\n", "\t\t\t\t\t\t\t", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "epsilon", ",", "+", "epsilon", ")", "+", "real_images", "\n", "real_images", "=", "torch", ".", "clamp", "(", "real_images", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "#zs, fake_labels = sample_latents(self.prior, self.batch_size, self.z_dim, 1, self.num_classes,", "\n", "#                                None, self.local_rank)", "\n", "\t\t\t\t\t\t\t", "latent_i", "=", "self", ".", "encoder", "(", "real_images", ")", "\n", "print", "(", "\"real_images min:\"", ",", "real_images", ".", "min", "(", ")", ")", "\n", "z_mean", ",", "z_log_var", ",", "zs", "=", "self", ".", "vae", "(", "latent_i", ")", "\n", "fake_labels", "=", "real_labels", "\n", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "zs", ",", "transport_cost", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "\n", "self", ".", "latent_op_beta", ",", "True", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "fake_images_ori", "=", "self", ".", "gen_model", "(", "zs", ",", "fake_labels", ")", "\n", "#wrong_labels = ((real_labels + Int_Modi) % 10).to(self.local_rank)", "\n", "\n", "#fake_images_wrong_labels  = self.gen_model(zs, wrong_labels)", "\n", "\n", "if", "self", ".", "diff_aug", ":", "\n", "\t\t\t\t\t\t\t", "fake_images", "=", "DiffAugment", "(", "fake_images_ori", ",", "policy", "=", "self", ".", "policy", ")", "\n", "# if self.ada:", "\n", "#     fake_images, _ = augment(fake_images, self.ada_aug_p)", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t\t\t", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "#dis_out_pos = self.d2dis_model((real_images - fake_images_ori), fake_labels)", "\n", "#dis_out_neg = self.d2dis_model((real_images - fake_images_wrong_labels), wrong_labels)", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t\t\t", "fake_cls_mask", "=", "make_mask", "(", "fake_labels", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ")", "\n", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "NotImplementedError", "\n", "", "loss_img_ssim", "=", "-", "torch", ".", "log", "(", "self", ".", "ssim", "(", "fake_images_ori", ",", "real_images_without_noise", ")", "+", "1e-15", ")", "\n", "loss_lat", "=", "0.5", "*", "(", "z_log_var", ".", "exp", "(", ")", "+", "z_mean", "**", "2", "-", "1", "-", "z_log_var", ")", ".", "mean", "(", ")", "\n", "loss_img_l2", "=", "torch", ".", "abs", "(", "(", "fake_images_ori", "-", "real_images_without_noise", ")", "**", "2", ")", ".", "mean", "(", ")", "#torch.nn.MSELoss(fake_images_ori, real_images).mean() #t", "\n", "loss_img_l1", "=", "torch", ".", "abs", "(", "fake_images_ori", "-", "real_images_without_noise", ")", ".", "mean", "(", ")", "\n", "\n", "gen_acml_loss_watch_g_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "\n", "#gen_acml_loss_watch_g_loss_2 = self.G_loss(dis_out_pos)", "\n", "\n", "gen_l2_loss_watch", "=", "loss_img_l2", "\n", "gen_ssim_loss_watch", "=", "5", "*", "loss_img_ssim", "\n", "gen_lat_loss", "=", "loss_lat", "\n", "gen_l1_loss", "=", "loss_img_l1", "\n", "#gen_ori_loss=self.G_loss(dis_out_fake)  + loss_img_l2 + 5 * loss_img_ssim + loss_lat + loss_img_l1 ", "\n", "\n", "gen_acml_loss", "=", "self", ".", "G_loss", "(", "dis_out_fake", ")", "+", "loss_img_l2", "+", "5", "*", "loss_img_ssim", "+", "loss_lat", "+", "loss_img_l1", "\n", "\n", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "transport_cost", "*", "self", ".", "latent_norm_reg_weight", "\n", "\n", "", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_zaug", "=", "self", ".", "gen_model", "(", "zs_t", ",", "fake_labels", ")", "\n", "zcr_gen_loss", "=", "-", "1", "*", "self", ".", "l2_loss", "(", "fake_images", ",", "fake_images_zaug", ")", "\n", "gen_acml_loss", "+=", "self", ".", "gen_lambda", "*", "zcr_gen_loss", "\n", "\n", "", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "ce_loss", "(", "cls_out_fake", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ContraGAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "contrastive_criterion", "(", "cls_embed_fake", ",", "cls_proxies_fake", ",", "fake_cls_mask", ",", "fake_labels", ",", "t", ",", "self", ".", "margin", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"Proxy_NCA_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NCA_criterion", "(", "cls_embed_fake", ",", "cls_proxies_fake", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"NT_Xent_GAN\"", ":", "\n", "\t\t\t\t\t\t\t", "fake_images_aug", "=", "CR_DiffAug", "(", "fake_images", ")", "\n", "_", ",", "cls_embed_fake_aug", ",", "dis_out_fake_aug", "=", "self", ".", "dis_model", "(", "fake_images_aug", ",", "fake_labels", ")", "\n", "gen_acml_loss", "+=", "self", ".", "contrastive_lambda", "*", "self", ".", "NT_Xent_criterion", "(", "cls_embed_fake", ",", "cls_embed_fake_aug", ",", "t", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "pass", "\n", "\n", "", "gen_acml_loss", "=", "gen_acml_loss", "/", "self", ".", "accumulation_steps", "\n", "\n", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t\t", "self", ".", "scaler", ".", "scale", "(", "gen_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "gen_acml_loss", ".", "backward", "(", ")", "\n", "\n", "", "", "if", "self", ".", "mixed_precision", ":", "\n", "\t\t\t\t\t", "self", ".", "scaler", ".", "step", "(", "self", ".", "G_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "self", ".", "G_optimizer", ".", "step", "(", ")", "\n", "self", ".", "opt_encoder", ".", "step", "(", ")", "\n", "\n", "# if ema is True: we update parameters of the Gen_copy in adaptive way.", "\n", "", "if", "self", ".", "ema", ":", "\n", "\t\t\t\t\t", "self", ".", "Gen_ema", ".", "update", "(", "step_count", ")", "\n", "\n", "", "step_count", "+=", "1", "\n", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t\t", "self", ".", "gen_model", ".", "eval", "(", ")", "\n", "wrong_label_airplane", "=", "self", ".", "gen_model", "(", "zs", ",", "y0_wrong_label_airplane", ")", "\n", "wrong_label_car", "=", "self", ".", "gen_model", "(", "zs", ",", "y1_wrong_label_car", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'fake'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "fake_images_ori", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'real'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "real_images", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'fake_aug'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "fake_images", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'wrong_label_airplane'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "wrong_label_airplane", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "\n", "'wrong_label_car'", ",", "torchvision", ".", "utils", ".", "make_grid", "(", "\n", "wrong_label_car", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", ",", "global_step", "=", "step_count", ")", "\n", "#self.writer.add_image(", "\n", "#'difference_pos', torchvision.utils.make_grid(", "\n", "#difference_pos, nrow=8, normalize=True, scale_each=True), global_step=step_count)", "\n", "#self.writer.add_image(", "\n", "#'difference_neg', torchvision.utils.make_grid(", "\n", "#difference_neg, nrow=8, normalize=True, scale_each=True), global_step=step_count)", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "\n", "\n", "", "", "if", "step_count", "%", "self", ".", "print_every", "==", "0", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "log_message", "=", "LOG_FORMAT", ".", "format", "(", "step", "=", "step_count", ",", "\n", "progress", "=", "step_count", "/", "total_step", ",", "\n", "elapsed", "=", "elapsed_time", "(", "self", ".", "start_time", ")", ",", "\n", "# temperature=t,", "\n", "# ada_p=self.ada_aug_p,", "\n", "dis_loss", "=", "dis_acml_loss_watch", ".", "item", "(", ")", ",", "\n", "#d2dis_loss=d2dis_acml_loss.item(),", "\n", "gen_loss", "=", "gen_acml_loss", ".", "item", "(", ")", ",", "\n", "gen_acml_loss_watch_g_loss", "=", "gen_acml_loss_watch_g_loss", ".", "item", "(", ")", ",", "\n", "#gen_acml_loss_watch_g_loss_2=gen_acml_loss_watch_g_loss_2.item(),", "\n", "gen_l2_loss_watch", "=", "gen_l2_loss_watch", ".", "item", "(", ")", ",", "\n", "gen_l1_loss", "=", "gen_l1_loss", ".", "item", "(", ")", ",", "\n", "gen_ssim_loss_watch", "=", "gen_l2_loss_watch", ".", "item", "(", ")", ",", "\n", "gen_lat_loss", "=", "gen_lat_loss", ".", "item", "(", ")", ",", "\n", "#gen_ori_loss=gen_ori_loss.item()", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_message", ")", "\n", "\n", "\n", "if", "self", ".", "g_spectral_norm", ":", "\n", "\t\t\t\t\t", "gen_sigmas", "=", "calculate_all_sn", "(", "self", ".", "gen_model", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "'SN_of_gen'", ",", "gen_sigmas", ",", "step_count", ")", "\n", "\n", "", "self", ".", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", ",", "\n", "'generator'", ":", "gen_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "ada", ":", "\n", "\t\t\t\t\t", "self", ".", "writer", ".", "add_scalar", "(", "'ada_p'", ",", "self", ".", "ada_aug_p", ",", "step_count", ")", "\n", "\n", "", "", "if", "step_count", "%", "self", ".", "save_every", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t\t", "if", "self", ".", "evaluate", ":", "\n", "\t\t\t\t\t", "is_best", "=", "self", ".", "evaluation", "(", "step_count", ",", "False", ",", "\"N/A\"", ")", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "save", "(", "step_count", ",", "is_best", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "save", "(", "step_count", ",", "False", ")", "\n", "\n", "", "", "if", "self", ".", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t\t\t", "dist", ".", "barrier", "(", "self", ".", "group", ")", "\n", "\n", "", "", "return", "step_count", "-", "1", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.save": [[535, 635], ["adding_noise_worker.make_worker.dis_model.eval", "adding_noise_worker.make_worker.gen_model.eval", "adding_noise_worker.make_worker.encoder.eval", "adding_noise_worker.make_worker.vae.eval", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "adding_noise_worker.make_worker.dis_model.train", "adding_noise_worker.make_worker.gen_model.train", "adding_noise_worker.make_worker.encoder.train", "adding_noise_worker.make_worker.vae.train", "adding_noise_worker.make_worker.Gen_copy.eval", "isinstance", "isinstance", "gen.state_dict", "adding_noise_worker.make_worker.G_optimizer.state_dict", "dis.state_dict", "adding_noise_worker.make_worker.D_optimizer.state_dict", "enc_save.state_dict", "adding_noise_worker.make_worker.opt_encoder.state_dict", "vae_save.state_dict", "len", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "adding_noise_worker.make_worker.Gen_copy.train", "glob.glob", "len", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "utils.misc.find_and_remove", "gen_copy.state_dict", "len", "utils.misc.find_and_remove", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "adding_noise_worker.make_worker.logger.info", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "str", "str", "str", "str", "glob.glob", "glob.glob", "len", "utils.misc.find_and_remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "str", "str", "str", "str", "os.path.join", "glob.glob", "str", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "str", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "def", "save", "(", "self", ",", "step", ",", "is_best", ")", ":", "\n", "\t\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "#self.d2dis_model.eval()", "\n", "self", ".", "gen_model", ".", "eval", "(", ")", "\n", "self", ".", "encoder", ".", "eval", "(", ")", "\n", "self", ".", "vae", ".", "eval", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "eval", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "gen_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "gen_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t", "gen", ",", "dis", "=", "self", ".", "gen_model", ".", "module", ",", "self", ".", "dis_model", ".", "module", "\n", "#d2dis = self.d2dis_model.module", "\n", "enc_save", "=", "self", ".", "encoder", ".", "module", "\n", "vae_save", "=", "self", ".", "vae", ".", "module", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t\t", "gen_copy", "=", "self", ".", "Gen_copy", ".", "module", "\n", "", "", "else", ":", "\n", "\t\t\t", "gen", ",", "dis", "=", "self", ".", "gen_model", ",", "self", ".", "dis_model", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t\t", "gen_copy", "=", "self", ".", "Gen_copy", "\n", "\n", "", "", "g_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "gen", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "G_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", "}", "\n", "\n", "d_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "D_optimizer", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "#d2d_states = {'seed': self.seed, 'run_name': self.run_name, 'step': step, 'best_step': self.best_step,", "\n", "#\t\t\t'state_dict': d2dis.state_dict(), 'optimizer': self.d2D_optimizer.state_dict(), 'ada_p': self.ada_aug_p,", "\n", "#\t\t\t'best_fid': self.best_fid, 'best_fid_checkpoint_path': self.checkpoint_dir}", "\n", "e_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "enc_save", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "opt_encoder", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "v_states", "=", "{", "'seed'", ":", "self", ".", "seed", ",", "'run_name'", ":", "self", ".", "run_name", ",", "'step'", ":", "step", ",", "'best_step'", ":", "self", ".", "best_step", ",", "\n", "'state_dict'", ":", "vae_save", ".", "state_dict", "(", ")", ",", "'ada_p'", ":", "self", ".", "ada_aug_p", ",", "\n", "'best_fid'", ":", "self", ".", "best_fid", ",", "'best_fid_checkpoint_path'", ":", "self", ".", "checkpoint_dir", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "#find_and_remove(glob.glob(join(self.checkpoint_dir,\"model=d2D-{when}-weights-step*.pth\".format(when=when)))[0])", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "#d2d_checkpoint_output_path = join(self.checkpoint_dir, \"model=d2D-{when}-weights-step={step}.pth\".format(when=when, step=str(step)))", "\n", "e_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "v_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "torch", ".", "save", "(", "g_states", ",", "g_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "#torch.save(d2d_states, d2d_checkpoint_output_path)", "\n", "torch", ".", "save", "(", "e_states", ",", "e_checkpoint_output_path", ")", "\n", "torch", ".", "save", "(", "v_states", ",", "v_checkpoint_output_path", ")", "\n", "\n", "if", "when", "==", "\"best\"", ":", "\n", "\t\t\t", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step*.pth\"", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "#find_and_remove(glob.glob(join(self.checkpoint_dir,\"model=d2D-current-weights-step*.pth\"))[0])", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-current-weights-step*.pth\"", ")", ")", "[", "0", "]", ")", "\n", "", "g_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "d_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=D-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "#d2d_checkpoint_output_path_ = join(self.checkpoint_dir, \"model=d2D-current-weights-step={step}.pth\".format(step=str(step)))", "\n", "e_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=E-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "v_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=V-current-weights-step={step}.pth\"", ".", "format", "(", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_states", ",", "g_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path_", ")", "\n", "#torch.save(d2d_states, d2d_checkpoint_output_path_)", "\n", "torch", ".", "save", "(", "e_states", ",", "e_checkpoint_output_path_", ")", "\n", "torch", ".", "save", "(", "v_states", ",", "v_checkpoint_output_path_", ")", "\n", "", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "g_ema_states", "=", "{", "'state_dict'", ":", "gen_copy", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_ema_checkpoint_output_path", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_ema_states", ",", "g_ema_checkpoint_output_path", ")", "\n", "\n", "if", "when", "==", "\"best\"", ":", "\n", "\t\t\t\t", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "g_ema_checkpoint_output_path_", "=", "join", "(", "self", ".", "checkpoint_dir", ",", "\"model=G_ema-current-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "g_ema_states", ",", "g_ema_checkpoint_output_path_", ")", "\n", "\n", "", "", "if", "self", ".", "logger", ":", "\n", "\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "self", ".", "checkpoint_dir", ")", ")", "\n", "\n", "", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "#self.d2dis_model.train()", "\n", "self", ".", "gen_model", ".", "train", "(", ")", "\n", "self", ".", "encoder", ".", "train", "(", ")", "\n", "self", ".", "vae", ".", "train", "(", ")", "\n", "if", "self", ".", "Gen_copy", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "Gen_copy", ".", "train", "(", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.evaluation": [[639, 720], ["adding_noise_worker.make_worker.dis_model.train", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "adding_noise_worker.make_worker.logger.info"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode"], ["", "", "def", "evaluation", "(", "self", ",", "step", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "\"Start Evaluation ({step} Step): {run_name}\"", ".", "format", "(", "step", "=", "step", ",", "run_name", "=", "self", ".", "run_name", ")", ")", "\n", "is_best", "=", "False", "\n", "num_split", ",", "num_run4PR", ",", "num_cluster4PR", ",", "beta4PR", "=", "1", ",", "10", ",", "20", ",", "8", "\n", "\n", "# self.dis_model.eval()", "\n", "# generator = change_generator_mode(self.gen_model, self.Gen_copy, self.bn_stat_OnTheFly, standing_statistics, standing_step,", "\n", "# \t\t\t\t\t\t\t\t  self.prior, self.batch_size, self.z_dim, self.num_classes, self.local_rank, training=False, counter=self.counter)", "\n", "\n", "# fid_score, self.m1, self.s1 = calculate_fid_score(self.eval_dataloader, generator, self.dis_model.module, self.inception_model, self.num_eval[self.eval_type],", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\t  self.truncated_factor, self.prior, self.latent_op, self.latent_op_step4eval, self.latent_op_alpha,", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\t  self.latent_op_beta, self.local_rank, self.logger, self.mu, self.sigma, self.run_name)", "\n", "\n", "# kl_score, kl_std = calculate_incep_score(self.eval_dataloader, generator, self.dis_model.module, self.inception_model, self.num_eval[self.eval_type],", "\n", "# \t\t\t\t\t\t\t\t\t\t self.truncated_factor, self.prior, self.latent_op, self.latent_op_step4eval, self.latent_op_alpha,", "\n", "# \t\t\t\t\t\t\t\t\t\t self.latent_op_beta, num_split, self.local_rank, self.logger)", "\n", "\n", "# precision, recall, f_beta, f_beta_inv = calculate_f_beta_score(self.eval_dataloader, generator, self.dis_model.module, self.inception_model, self.num_eval[self.eval_type],", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   num_run4PR, num_cluster4PR, beta4PR, self.truncated_factor, self.prior, self.latent_op,", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   self.latent_op_step4eval, self.latent_op_alpha, self.latent_op_beta, self.local_rank, self.logger)", "\n", "# PR_Curve = plot_pr_curve(precision, recall, self.run_name, self.logger, logging=True)", "\n", "\n", "# if self.conditional_strategy in ['ProjGAN', 'ContraGAN', 'Proxy_NCA_GAN']:", "\n", "# \tif self.dataset_name == \"cifar10\":", "\n", "# \t\tclasses = torch.tensor([c for c in range(self.num_classes)], dtype=torch.long).to(self.local_rank)", "\n", "# \t\tlabels = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]", "\n", "# \telse:", "\n", "# \t\tif self.num_classes > 10:", "\n", "# \t\t\tclasses = torch.tensor(random.sample(range(0, self.num_classes), 10), dtype=torch.long).to(self.local_rank)", "\n", "# \t\telse:", "\n", "# \t\t\tclasses = torch.tensor([c for c in range(self.num_classes)], dtype=torch.long).to(self.local_rank)", "\n", "# \t\tlabels = classes.detach().cpu().numpy()", "\n", "# \tproxies = self.embedding_layer(classes)", "\n", "# \tsim_p = self.cosine_similarity(proxies.unsqueeze(1), proxies.unsqueeze(0))", "\n", "# \tsim_heatmap = plot_sim_heatmap(sim_p.detach().cpu().numpy(), labels, labels, self.run_name, self.logger, logging=True)", "\n", "\n", "# if self.D_loss.__name__ != \"loss_wgan_dis\":", "\n", "# \treal_train_acc, fake_acc = calculate_accuracy(self.train_dataloader, generator, self.dis_model.module, self.D_loss, self.num_eval[self.eval_type],", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\t  self.truncated_factor, self.prior, self.latent_op, self.latent_op_step, self.latent_op_alpha,", "\n", "# \t\t\t\t\t\t\t\t\t\t\t\t  self.latent_op_beta, self.local_rank, cr=self.cr, logger=self.logger, eval_generated_sample=True)", "\n", "\n", "# \tif self.eval_type == 'train':", "\n", "# \t\tacc_dict = {'real_train': real_train_acc, 'fake': fake_acc}", "\n", "# \telse:", "\n", "# \t\treal_eval_acc = calculate_accuracy(self.eval_dataloader, generator, self.dis_model.module, self.D_loss, self.num_eval[self.eval_type],", "\n", "# \t\t\t\t\t\t\t\t\t\t   self.truncated_factor, self.prior, self.latent_op, self.latent_op_step, self.latent_op_alpha,", "\n", "# \t\t\t\t\t\t\t\t\t\t   self. latent_op_beta, self.local_rank, cr=self.cr, logger=self.logger, eval_generated_sample=False)", "\n", "# \t\tacc_dict = {'real_train': real_train_acc, 'real_valid': real_eval_acc, 'fake': fake_acc}", "\n", "\n", "# \tif self.global_rank == 0: self.writer.add_scalars('Accuracy', acc_dict, step)", "\n", "\n", "# if self.best_fid is None:", "\n", "# \tself.best_fid, self.best_step, is_best, f_beta_best, f_beta_inv_best = fid_score, step, True, f_beta, f_beta_inv", "\n", "# else:", "\n", "# \tif fid_score <= self.best_fid:", "\n", "# \t\tself.best_fid, self.best_step, is_best, f_beta_best, f_beta_inv_best = fid_score, step, True, f_beta, f_beta_inv", "\n", "\n", "# if self.global_rank == 0:", "\n", "# \tself.writer.add_scalars('FID score', {'using {type} moments'.format(type=self.eval_type):fid_score}, step)", "\n", "# \tself.writer.add_scalars('F_beta score', {'{num} generated images'.format(num=str(self.num_eval[self.eval_type])):f_beta}, step)", "\n", "# \tself.writer.add_scalars('F_beta_inv score', {'{num} generated images'.format(num=str(self.num_eval[self.eval_type])):f_beta_inv}, step)", "\n", "# \tself.writer.add_scalars('IS score', {'{num} generated images'.format(num=str(self.num_eval[self.eval_type])):kl_score}, step)", "\n", "# \tself.writer.add_figure('PR_Curve', PR_Curve, global_step=step)", "\n", "# \tif self.conditional_strategy in ['ProjGAN', 'ContraGAN', 'Proxy_NCA_GAN']:", "\n", "# \t\tself.writer.add_figure('Similarity_heatmap', sim_heatmap, global_step=step)", "\n", "# \tself.logger.info('F_{beta} score (Step: {step}, Using {type} images): {F_beta}'.format(beta=beta4PR, step=step, type=self.eval_type, F_beta=f_beta))", "\n", "# \tself.logger.info('F_1/{beta} score (Step: {step}, Using {type} images): {F_beta_inv}'.format(beta=beta4PR, step=step, type=self.eval_type, F_beta_inv=f_beta_inv))", "\n", "# \tself.logger.info('FID score (Step: {step}, Using {type} moments): {FID}'.format(step=step, type=self.eval_type, FID=fid_score))", "\n", "# \tself.logger.info('Inception score (Step: {step}, {num} generated images): {IS}'.format(step=step, num=str(self.num_eval[self.eval_type]), IS=kl_score))", "\n", "# \tif self.train:", "\n", "# \t\tself.logger.info('Best FID score (Step: {step}, Using {type} moments): {FID}'.format(step=self.best_step, type=self.eval_type, FID=self.best_fid))", "\n", "\n", "# self.run_image_visualization(nrow=self.cfgs.nrow, ncol=self.cfgs.ncol, standing_statistics=False, standing_step=\"N/A\")", "\n", "\n", "self", ".", "dis_model", ".", "train", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "", "return", "is_best", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.save_images": [[724, 740], ["adding_noise_worker.make_worker.logger.info", "adding_noise_worker.make_worker.dis_model.eval", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "utils.misc.save_images_png", "utils.misc.save_images_npz"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_png", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.save_images_npz"], ["", "def", "save_images", "(", "self", ",", "is_generate", ",", "standing_statistics", ",", "standing_step", ",", "png", "=", "True", ",", "npz", "=", "True", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start save images....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "self", ".", "dis_model", ".", "eval", "(", ")", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "if", "png", ":", "\n", "\t\t\t\t", "save_images_png", "(", "self", ".", "run_name", ",", "self", ".", "eval_dataloader", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "self", ".", "num_classes", ",", "generator", ",", "\n", "self", ".", "dis_model", ",", "is_generate", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "\n", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "", "if", "npz", ":", "\n", "\t\t\t\t", "save_images_npz", "(", "self", ".", "run_name", ",", "self", ".", "eval_dataloader", ",", "self", ".", "num_eval", "[", "self", ".", "eval_type", "]", ",", "self", ".", "num_classes", ",", "generator", ",", "\n", "self", ".", "dis_model", ",", "is_generate", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "self", ".", "latent_op_step", ",", "\n", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_image_visualization": [[747, 774], ["adding_noise_worker.make_worker.logger.info", "utils.misc.change_generator_mode", "utils.misc.change_generator_mode.", "utils.misc.plot_img_canvas", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "utils.misc.change_generator_mode.detach().cpu", "utils.misc.change_generator_mode.detach"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "", "def", "run_image_visualization", "(", "self", ",", "nrow", ",", "ncol", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start visualize images....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "None", ",", "\n", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ",", "sampler", "=", "self", ".", "sampler", ")", "\n", "\n", "", "generated_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "plot_img_canvas", "(", "(", "generated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/generated_canvas.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_nearest_neighbor": [[778, 828], ["adding_noise_worker.make_worker.logger.info", "utils.misc.change_generator_mode", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "tqdm.tqdm.tqdm", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "range", "utils.misc.generate_images_for_KNN", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "utils.sample.target_class_sampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "next", "real_images.to.to.to", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "numpy.concatenate", "numpy.concatenate", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "real_images.to.to.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.misc.plot_img_canvas", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "list", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "real_images.to.to.detach().cpu", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "real_images.to.to.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.unsqueeze.detach().cpu().numpy", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "real_images.to.to.detach", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "real_images.to.to.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach().cpu", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "real_images.to.to.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.unsqueeze.detach", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.generate_images_for_KNN", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.target_class_sampler", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas"], ["", "", "def", "run_nearest_neighbor", "(", "self", ",", "nrow", ",", "ncol", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start nearest neighbor analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "resnet50_model", "=", "torch", ".", "hub", ".", "load", "(", "'pytorch/vision:v0.6.0'", ",", "'resnet50'", ",", "pretrained", "=", "True", ")", "\n", "resnet50_conv", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet50_model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "if", "self", ".", "n_gpus", ">", "1", ":", "\n", "\t\t\t\t", "resnet50_conv", "=", "DataParallel", "(", "resnet50_conv", ",", "output_device", "=", "self", ".", "local_rank", ")", "\n", "", "resnet50_conv", ".", "eval", "(", ")", "\n", "\n", "for", "c", "in", "tqdm", "(", "range", "(", "self", ".", "num_classes", ")", ")", ":", "\n", "\t\t\t\t", "fake_images", ",", "fake_labels", "=", "generate_images_for_KNN", "(", "self", ".", "batch_size", ",", "c", ",", "generator", ",", "self", ".", "dis_model", ",", "self", ".", "truncated_factor", ",", "self", ".", "prior", ",", "self", ".", "latent_op", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "self", ".", "local_rank", ")", "\n", "fake_image", "=", "torch", ".", "unsqueeze", "(", "fake_images", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "fake_anchor_embedding", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "(", "fake_image", "+", "1", ")", "/", "2", ")", ")", "\n", "\n", "num_samples", ",", "target_sampler", "=", "target_class_sampler", "(", "self", ".", "train_dataset", ",", "c", ")", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "num_samples", ">=", "self", ".", "batch_size", "else", "num_samples", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "sampler", "=", "target_sampler", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_samples", "//", "batch_size", ")", ":", "\n", "\t\t\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "real_images", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "real_embeddings", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ")", "\n", "if", "batch_idx", "==", "0", ":", "\n", "\t\t\t\t\t\t", "distances", "=", "torch", ".", "square", "(", "real_embeddings", "-", "fake_anchor_embedding", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "holder", "=", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "distances", "=", "np", ".", "concatenate", "(", "[", "distances", ",", "torch", ".", "square", "(", "real_embeddings", "-", "fake_anchor_embedding", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "holder", "=", "np", ".", "concatenate", "(", "[", "holder", ",", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "nearest_indices", "=", "(", "-", "distances", ")", ".", "argsort", "(", ")", "[", "-", "(", "ncol", "-", "1", ")", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "c", "%", "nrow", "==", "0", ":", "\n", "\t\t\t\t\t", "canvas", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "c", "%", "nrow", "==", "nrow", "-", "1", ":", "\n", "\t\t\t\t\t", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "plot_img_canvas", "(", "(", "torch", ".", "from_numpy", "(", "canvas", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/Fake_anchor_{ncol}NN_{cls}_classes.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ",", "ncol", "=", "ncol", ",", "cls", "=", "c", "+", "1", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_linear_interpolation": [[832, 869], ["adding_noise_worker.make_worker.logger.info", "utils.misc.change_generator_mode", "tqdm.tqdm.tqdm", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "range", "utils.misc.change_generator_mode.", "utils.misc.plot_img_canvas", "isinstance", "isinstance", "int", "int", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.biggan_utils.interp().view.repeat().view", "utils.biggan_utils.interp().view", "utils.sample.sample_1hot", "shared().view", "utils.biggan_utils.interp().view.repeat().view", "utils.biggan_utils.interp().view", "utils.biggan_utils.interp().view.repeat", "utils.biggan_utils.interp", "shared", "utils.biggan_utils.interp().view.repeat", "utils.biggan_utils.interp", "utils.misc.change_generator_mode.detach().cpu", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "shared().view", "shared().view", "utils.misc.change_generator_mode.detach", "shared", "shared", "utils.sample.sample_1hot", "utils.sample.sample_1hot"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.interp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.biggan_utils.interp", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_1hot"], ["", "", "def", "run_linear_interpolation", "(", "self", ",", "nrow", ",", "ncol", ",", "fix_z", ",", "fix_y", ",", "standing_statistics", ",", "standing_step", ",", "num_images", "=", "100", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start linear interpolation analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "assert", "self", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch size should be devided by 8!\"", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "shared", "=", "generator", ".", "module", ".", "shared", "if", "isinstance", "(", "generator", ",", "DataParallel", ")", "or", "isinstance", "(", "generator", ",", "DistributedDataParallel", ")", "else", "generator", ".", "shared", "\n", "assert", "int", "(", "fix_z", ")", "*", "int", "(", "fix_y", ")", "!=", "1", ",", "\"unable to switch fix_z and fix_y on together!\"", "\n", "\n", "for", "num", "in", "tqdm", "(", "range", "(", "num_images", ")", ")", ":", "\n", "\t\t\t\t", "if", "fix_z", ":", "\n", "\t\t\t\t\t", "zs", "=", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "zs", "=", "zs", ".", "repeat", "(", "1", ",", "ncol", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "name", "=", "\"fix_z\"", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", "=", "interp", "(", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "torch", ".", "randn", "(", "nrow", ",", "1", ",", "self", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "ncol", "-", "2", ")", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ")", "\n", "\n", "", "if", "fix_y", ":", "\n", "\t\t\t\t\t", "ys", "=", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "ys", "=", "shared", "(", "ys", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", "\n", "ys", "=", "ys", ".", "repeat", "(", "1", ",", "ncol", ",", "1", ")", ".", "view", "(", "nrow", "*", "(", "ncol", ")", ",", "-", "1", ")", "\n", "name", "=", "\"fix_y\"", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "ys", "=", "interp", "(", "shared", "(", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ")", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", ",", "\n", "shared", "(", "sample_1hot", "(", "nrow", ",", "self", ".", "num_classes", ")", ")", ".", "view", "(", "nrow", ",", "1", ",", "-", "1", ")", ",", "\n", "ncol", "-", "2", ")", ".", "view", "(", "nrow", "*", "(", "ncol", ")", ",", "-", "1", ")", "\n", "\n", "", "interpolated_images", "=", "generator", "(", "zs", ",", "None", ",", "shared_label", "=", "ys", ",", "evaluation", "=", "True", ")", "\n", "\n", "plot_img_canvas", "(", "(", "interpolated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", ",", "\"./figures/{run_name}/{num}_Interpolated_images_{fix_flag}.png\"", ".", "format", "(", "num", "=", "num", ",", "run_name", "=", "self", ".", "run_name", ",", "fix_flag", "=", "name", ")", ",", "ncol", ",", "self", ".", "logger", ",", "logging", "=", "False", ")", "\n", "\n", "", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_frequency_analysis": [[873, 931], ["adding_noise_worker.make_worker.logger.info", "utils.misc.change_generator_mode", "iter", "range", "numpy.shape", "numpy.shape", "tqdm.tqdm.tqdm", "utils.misc.plot_spectrum_image", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "next", "utils.misc.change_generator_mode.detach().cpu().numpy", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.fft.fftshift", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.misc.change_generator_mode.detach().cpu", "scipy.ndimage.median_filter", "scipy.ndimage.median_filter", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "utils.misc.change_generator_mode.detach", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "utils.misc.change_generator_mode."], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_frequency_analysis", "(", "self", ",", "num_images", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start frequency analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "\n", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "num_batches", "=", "num_images", "//", "self", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "None", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "real_images", "=", "np", ".", "asarray", "(", "(", "real_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "fake_images", "=", "np", ".", "asarray", "(", "(", "fake_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "real_array", "=", "real_images", "\n", "fake_array", "=", "fake_images", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_array", "=", "np", ".", "concatenate", "(", "[", "real_array", ",", "real_images", "]", ",", "axis", "=", "0", ")", "\n", "fake_array", "=", "np", ".", "concatenate", "(", "[", "fake_array", ",", "fake_images", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "N", ",", "C", ",", "H", ",", "W", "=", "np", ".", "shape", "(", "real_array", ")", "\n", "real_r", ",", "real_g", ",", "real_b", "=", "real_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "real_gray", "=", "0.2989", "*", "real_r", "+", "0.5870", "*", "real_g", "+", "0.1140", "*", "real_b", "\n", "fake_r", ",", "fake_g", ",", "fake_b", "=", "fake_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "fake_gray", "=", "0.2989", "*", "fake_r", "+", "0.5870", "*", "fake_g", "+", "0.1140", "*", "fake_b", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "N", ")", ")", ":", "\n", "\t\t\t\t", "real_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "real_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "real_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "fake_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "fake_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "fake_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "\n", "real_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "real_gray_f", ")", "\n", "fake_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "fake_gray_f", ")", "\n", "\n", "if", "j", "==", "0", ":", "\n", "\t\t\t\t\t", "real_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "\n", "", "", "plot_spectrum_image", "(", "real_gray_spectrum", ",", "fake_gray_spectrum", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_tsne": [[935, 1025], ["adding_noise_worker.make_worker.logger.info", "utils.misc.change_generator_mode", "utils.misc.SaveOutput", "iter", "dis_model.named_children", "range", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "utils.misc.plot_tsne_scatter_plot", "sklearn.manifold.TSNE.fit_transform", "utils.misc.plot_tsne_scatter_plot", "utils.misc.change_generator_mode", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.misc.dummy_context_mgr", "isinstance", "isinstance", "len", "next", "utils.misc.change_generator_mode.", "utils.misc.SaveOutput.clear", "utils.misc.SaveOutput.clear", "layer.register_forward_pre_hook", "hook_handles.append", "utils.sample.sample_latents", "utils.sample.sample_latents", "utils.losses.latent_optimise", "real_images.to", "real_labels.to", "adding_noise_worker.make_worker.dis_model", "[].detach().cpu().numpy", "real_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "adding_noise_worker.make_worker.dis_model", "[].detach().cpu().numpy", "fake_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.random.permutation", "numpy.random.permutation", "adding_noise_worker.make_worker.dis_model", "adding_noise_worker.make_worker.dis_model", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "adding_noise_worker.make_worker.dis_model", "[].detach().cpu", "real_labels.detach().cpu", "[].cpu().detach().numpy", "real_labels.detach().cpu().numpy", "adding_noise_worker.make_worker.dis_model", "[].detach().cpu", "fake_labels.detach().cpu", "[].cpu().detach().numpy", "fake_labels.detach().cpu().numpy", "[].detach", "real_labels.detach", "[].cpu().detach", "real_labels.detach().cpu", "[].detach", "fake_labels.detach", "[].cpu().detach", "fake_labels.detach().cpu", "[].cpu", "real_labels.detach", "[].cpu", "fake_labels.detach"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.change_generator_mode", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "", "def", "run_tsne", "(", "self", ",", "dataloader", ",", "standing_statistics", ",", "standing_step", ")", ":", "\n", "\t\t", "if", "self", ".", "global_rank", "==", "0", ":", "self", ".", "logger", ".", "info", "(", "'Start tsne analysis....'", ")", "\n", "if", "standing_statistics", ":", "self", ".", "counter", "+=", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "self", ".", "latent_op", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "\t\t\t", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "False", ",", "counter", "=", "self", ".", "counter", ")", "\n", "if", "isinstance", "(", "self", ".", "gen_model", ",", "DataParallel", ")", "or", "isinstance", "(", "self", ".", "gen_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t", "dis_model", "=", "self", ".", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t", "dis_model", "=", "self", ".", "dis_model", "\n", "\n", "", "save_output", "=", "SaveOutput", "(", ")", "\n", "hook_handles", "=", "[", "]", "\n", "real", ",", "fake", "=", "{", "}", ",", "{", "}", "\n", "tsne_iter", "=", "iter", "(", "dataloader", ")", "\n", "num_batches", "=", "len", "(", "dataloader", ".", "dataset", ")", "//", "self", ".", "batch_size", "\n", "for", "name", ",", "layer", "in", "dis_model", ".", "named_children", "(", ")", ":", "\n", "\t\t\t\t", "if", "name", "==", "\"linear1\"", ":", "\n", "\t\t\t\t\t", "handle", "=", "layer", ".", "register_forward_pre_hook", "(", "save_output", ")", "\n", "hook_handles", ".", "append", "(", "handle", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "zcr", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", ",", "zs_t", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "self", ".", "sigma_noise", ",", "self", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "zs", ",", "fake_labels", "=", "sample_latents", "(", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "1", ",", "self", ".", "num_classes", ",", "\n", "None", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "if", "self", ".", "latent_op", ":", "\n", "\t\t\t\t\t", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "self", ".", "gen_model", ",", "self", ".", "dis_model", ",", "self", ".", "conditional_strategy", ",", "\n", "self", ".", "latent_op_step", ",", "self", ".", "latent_op_rate", ",", "self", ".", "latent_op_alpha", ",", "self", ".", "latent_op_beta", ",", "\n", "False", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "next", "(", "tsne_iter", ")", "\n", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "real_labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t", "cls_out_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t", "cls_proxies_real", ",", "cls_embed_real", ",", "dis_out_real", "=", "self", ".", "dis_model", "(", "real_images", ",", "real_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "real", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "real", "[", "\"labels\"", "]", "=", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "real", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "real", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"labels\"", "]", ",", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "\t\t\t\t\t", "cls_out_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "\"ProjGAN\"", "or", "self", ".", "conditional_strategy", "==", "\"no\"", ":", "\n", "\t\t\t\t\t", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "\"NT_Xent_GAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"ContraGAN\"", "]", ":", "\n", "\t\t\t\t\t", "cls_proxies_fake", ",", "cls_embed_fake", ",", "dis_out_fake", "=", "self", ".", "dis_model", "(", "fake_images", ",", "fake_labels", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "\t\t\t\t\t", "fake", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "fake", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"labels\"", "]", ",", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "# t-SNE", "\n", "", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "verbose", "=", "1", ",", "perplexity", "=", "40", ",", "n_iter", "=", "300", ")", "\n", "if", "self", ".", "num_classes", ">", "10", ":", "\n", "\t\t\t\t ", "cls_indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_classes", ")", "[", ":", "10", "]", "\n", "real", "[", "\"embeds\"", "]", "=", "real", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "real", "[", "\"labels\"", "]", "=", "real", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"embeds\"", "]", "=", "fake", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"labels\"", "]", "=", "fake", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "\n", "", "real_tsne_results", "=", "tsne", ".", "fit_transform", "(", "real", "[", "\"embeds\"", "]", ")", "\n", "plot_tsne_scatter_plot", "(", "real", ",", "real_tsne_results", ",", "\"real\"", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "fake_tsne_results", "=", "tsne", ".", "fit_transform", "(", "fake", "[", "\"embeds\"", "]", ")", "\n", "plot_tsne_scatter_plot", "(", "fake", ",", "fake_tsne_results", ",", "\"fake\"", ",", "self", ".", "run_name", ",", "self", ".", "logger", ",", "logging", "=", "True", ")", "\n", "\n", "generator", "=", "change_generator_mode", "(", "self", ".", "gen_model", ",", "self", ".", "Gen_copy", ",", "self", ".", "bn_stat_OnTheFly", ",", "standing_statistics", ",", "standing_step", ",", "\n", "self", ".", "prior", ",", "self", ".", "batch_size", ",", "self", ".", "z_dim", ",", "self", ".", "num_classes", ",", "self", ".", "local_rank", ",", "training", "=", "True", ",", "counter", "=", "self", ".", "counter", ")", "\n", "################################################################################################################################", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.DiscOptBlock.__init__": [[105, 133], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.DiscOptBlock.forward": [[135, 151], ["using_discriminator_as_dml_training_b.DiscOptBlock.conv2d1", "using_discriminator_as_dml_training_b.DiscOptBlock.activation", "using_discriminator_as_dml_training_b.DiscOptBlock.conv2d2", "using_discriminator_as_dml_training_b.DiscOptBlock.average_pooling", "using_discriminator_as_dml_training_b.DiscOptBlock.average_pooling", "using_discriminator_as_dml_training_b.DiscOptBlock.conv2d0", "using_discriminator_as_dml_training_b.DiscOptBlock.bn1", "using_discriminator_as_dml_training_b.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.DiscBlock.__init__": [[154, 191], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.DiscBlock.forward": [[193, 216], ["using_discriminator_as_dml_training_b.DiscBlock.activation", "using_discriminator_as_dml_training_b.DiscBlock.conv2d1", "using_discriminator_as_dml_training_b.DiscBlock.activation", "using_discriminator_as_dml_training_b.DiscBlock.conv2d2", "using_discriminator_as_dml_training_b.DiscBlock.bn1", "using_discriminator_as_dml_training_b.DiscBlock.bn2", "using_discriminator_as_dml_training_b.DiscBlock.average_pooling", "using_discriminator_as_dml_training_b.DiscBlock.conv2d0", "using_discriminator_as_dml_training_b.DiscBlock.bn0", "using_discriminator_as_dml_training_b.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.Discriminator.__init__": [[220, 310], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "using_discriminator_as_dml_training_b.DiscOptBlock", "using_discriminator_as_dml_training_b.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.Discriminator.forward": [[312, 348], ["enumerate", "using_discriminator_as_dml_training_b.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "using_discriminator_as_dml_training_b.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "using_discriminator_as_dml_training_b.Discriminator.embedding", "using_discriminator_as_dml_training_b.Discriminator.linear2", "using_discriminator_as_dml_training_b.Discriminator.linear1", "using_discriminator_as_dml_training_b.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "using_discriminator_as_dml_training_b.Discriminator.activation", "using_discriminator_as_dml_training_b.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "using_discriminator_as_dml_training_b.Discriminator.linear4", "using_discriminator_as_dml_training_b.Discriminator.embedding", "using_discriminator_as_dml_training_b.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.main": [[350, 701], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "foolbox.utils.accuracy", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "using_discriminator_as_dml_training_b.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "densenet169().to.", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "foolbox.attacks.LinfProjectedGradientDescentAttack", "fb.attacks.LinfProjectedGradientDescentAttack.", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "random.randint", "random.randint", "random.randint", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "iter", "next", "numpy.random.random", "img_to_classifier.to", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "x_adv_to_classifier.to", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "os.path.join", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "dis_acml_loss.item", "fb.attacks.LinfProjectedGradientDescentAttack.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "numpy.random.random", "x_adv_test_to_classifier.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./best_version1_cifar10_checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./adv_train_mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "local_rank", "=", "rank", "\n", "# adding classifier", "\n", "checkpoint_path", "=", "'/research/dept6/yjyang/SP2020/V2CIFAR10_Generation/cifar10_models/state_dicts'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "max_iter", "=", "100", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/best_version1_cifar10_checkpoints/acc93.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "# for state in D_optimizer.state.values():", "\n", "# \tfor k, v in state.items():", "\n", "# \t\tif isinstance(v, torch.Tensor):", "\n", "# \t\t\tstate[k] = v.cuda()", "\n", "\n", "\n", "# step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./Advtrain_mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "data_id", "=", "0", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "data_id", "=", "data_id", "+", "1", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "\n", "# adding some noise to real_images", "\n", "#real_images = torch.empty_like(real_images, dtype=real_images.dtype).uniform_(-2/128.0, 2/128.0) + real_images", "\n", "img_to_classifier", "=", "(", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "(", "real_images", "+", "1", ")", "/", "2", ",", "real_labels", ")", "\n", "#logger.info(\"data_id:{}\".format(data_id))", "\n", "#logger.info(\"acc of classifier is:{}\".format(acc_of_classifier))", "\n", "if", "data_id", "%", "2", "==", "0", ":", "# 50% training adversarial samples", "\n", "\t\t\t", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "*", "0.5", "\n", "#print(epsilon)", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier_ori", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "attack", "=", "fb", ".", "attacks", ".", "LinfProjectedGradientDescentAttack", "(", "steps", "=", "40", ")", "\n", "raw", ",", "x_adv", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ",", "y_classifier_ori", ",", "epsilons", "=", "epsilon", ")", "\n", "#x_adv = torch.FloatTensor(x_adv).to(local_rank)", "\n", "#real_images = (torch.tensor(x_adv)*2.0 -1).to(local_rank)", "\n", "#print(x_adv.type())", "\n", "real_images", "=", "(", "x_adv", "*", "2", "-", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "", "else", ":", "\n", "# adding some noise to real_images", "\n", "\t\t\t", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "2", "/", "128.0", ",", "2", "/", "128.0", ")", "+", "real_images", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "\n", "if", "data_id", "%", "2", "==", "0", ":", "\n", "\t\t\t", "x_adv_to_classifier", "=", "(", "(", "x_adv", "-", "mean", ")", "/", "std", ")", "\n", "outputs", "=", "classifier", "(", "x_adv_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "wrong_labels", "=", "y_classifier", "\n", "", "else", ":", "\n", "\t\t\t", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "*", "0.5", "\n", "raw", ",", "x_adv_test", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "test_images", "+", "1", ")", "/", "2", ")", ",", "test_labels", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "test_images", "=", "(", "x_adv_test", "*", "2.0", ")", "-", "1.0", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "#Int_Modi = random.randint(1, 9)", "\n", "#wrong_labels = ((test_labels + Int_Modi) % 10).to(local_rank)", "\n", "x_adv_test_to_classifier", "=", "(", "(", "x_adv_test", "-", "mean", ")", "/", "std", ")", "\n", "outputs_test", "=", "classifier", "(", "x_adv_test_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs_test", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.using_discriminator_as_dml_training_b.save": [[707, 721], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.inception_tf13.prepare_parser": [[28, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "prepare_parser", "(", ")", ":", "\n", "  ", "usage", "=", "'Parser for TF1.3- Inception Score scripts.'", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "usage", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--run_name'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Which experiment'", "'s samples.npz file to pull and evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--type'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'[real, fake]'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'Default overall batchsize (default: %(default)s)'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.inception_tf13.run": [[43, 127], ["inception_tf13.run._init_inception"], "function", ["None"], ["", "def", "run", "(", "config", ")", ":", "\n", "# Inception with TF1.3 or earlier.", "\n", "# Call this function with list of images. Each of elements should be a ", "\n", "# numpy array with values ranging from 0 to 255.", "\n", "  ", "def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "    ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "      ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "config", "[", "'batch_size'", "]", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "preds", ",", "pools", "=", "[", "]", ",", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "trange", "(", "n_batches", ")", ":", "\n", "        ", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", ",", "pool", "=", "sess", ".", "run", "(", "[", "softmax", ",", "pool3", "]", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "pools", ".", "append", "(", "pool", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", ",", "np", ".", "squeeze", "(", "np", ".", "concatenate", "(", "pools", ",", "0", ")", ")", "\n", "# Init inception", "\n", "", "", "def", "_init_inception", "(", ")", ":", "\n", "    ", "global", "softmax", ",", "pool3", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "      ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "          ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "            ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "              ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "              ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "# if softmax is None: # No need to functionalize like this.", "\n", "", "", "_init_inception", "(", ")", "\n", "\n", "fname", "=", "'%s/%s/%s/%s/samples.npz'", "%", "(", "\"samples\"", ",", "config", "[", "'run_name'", "]", ",", "config", "[", "'type'", "]", ",", "\"npz\"", ")", "\n", "print", "(", "'loading %s ...'", "%", "fname", ")", "\n", "ims", "=", "np", ".", "load", "(", "fname", ")", "[", "'x'", "]", "\n", "import", "time", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "inc_mean", ",", "inc_std", ",", "pool_activations", "=", "get_inception_score", "(", "list", "(", "ims", ".", "swapaxes", "(", "1", ",", "2", ")", ".", "swapaxes", "(", "2", ",", "3", ")", ")", ",", "splits", "=", "1", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Inception took %3f seconds, score of %3f +/- %3f.'", "%", "(", "t1", "-", "t0", ",", "inc_mean", ",", "inc_std", ")", ")", "\n", "", "def", "main", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.inception_tf13.main": [[127, 133], ["inception_tf13.prepare_parser", "vars", "print", "inception_tf13.run", "prepare_parser.parse_args"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.inception_tf13.prepare_parser", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.inception_tf13.run"], ["", "def", "main", "(", ")", ":", "\n", "# parse command line and run", "\n", "  ", "parser", "=", "prepare_parser", "(", ")", "\n", "config", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "print", "(", "config", ")", "\n", "run", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.mydiscriminator_main.main": [[31, 114], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.log.make_run_name", "utils.misc.check_flags", "argparse.ArgumentParser.print_help", "sys.exit", "vars", "utils.make_hdf5.make_hdf5", "utils.misc.fix_all_seed", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "print", "torch.spawn", "loader.prepare_train_eval", "open", "json.load", "train_configs[].split"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.check_flags", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.make_hdf5.make_hdf5", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.loader.prepare_train_eval"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/2discriminator_DiffAugGAN_v1.json'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints/2discriminator_DiffAugGAN_v1-train-2021_03_18_11_12_25'", ")", "\n", "parser", ".", "add_argument", "(", "'-current'", ",", "'--load_current'", ",", "default", "=", "False", ",", "help", "=", "'whether you load the current or best checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-DDP'", ",", "'--distributed_data_parallel'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'-nr'", ",", "'--nr'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'ranking within the nodes'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'seed for generating random numbers'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'-sync_bn'", ",", "'--synchronized_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on synchronized batchnorm'", ")", "\n", "parser", ".", "add_argument", "(", "'-mpc'", ",", "'--mixed_precision'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on mixed precision training'", ")", "\n", "parser", ".", "add_argument", "(", "'-LARS'", ",", "'--LARS_optimizer'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on LARS optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'-rm_API'", ",", "'--disable_debugging_API'", ",", "default", "=", "False", ",", "help", "=", "'whether disable pytorch autograd debugging mode'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--reduce_train_dataset'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'control the number of train dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'-stat_otf'", ",", "'--bn_stat_OnTheFly'", ",", "action", "=", "'store_true'", ",", "help", "=", "'when evaluating, use the statistics of a batch'", ")", "\n", "parser", ".", "add_argument", "(", "'-std_stat'", ",", "'--standing_statistics'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--standing_step'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'# of steps for accumulation batchnorm'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_layers'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'# of layers for freezing discriminator'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--load_all_data_in_memory'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--save_images'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-iv'", ",", "'--image_visualization'", ",", "default", "=", "True", ",", "help", "=", "'select whether conduct image visualization'", ")", "\n", "parser", ".", "add_argument", "(", "'-knn'", ",", "'--k_nearest_neighbor'", ",", "action", "=", "'store_true'", ",", "help", "=", "'select whether conduct k-nearest neighbor analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-itp'", ",", "'--interpolation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct interpolation analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-fa'", ",", "'--frequency_analysis'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct frequency analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-tsne'", ",", "'--tsne_analysis'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct tsne analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'--nrow'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of rows to plot image canvas'", ")", "\n", "parser", ".", "add_argument", "(", "'--ncol'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of cols to plot image canvas'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "args", ".", "train", "and", "not", "args", ".", "eval", "and", "not", "args", ".", "save_images", "and", "not", "args", ".", "image_visualization", "and", "not", "args", ".", "k_nearest_neighbor", "and", "not", "args", ".", "interpolation", "and", "not", "args", ".", "frequency_analysis", "and", "not", "args", ".", "tsne_analysis", ":", "\n", "        ", "parser", ".", "print_help", "(", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "            ", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "hdf5_path_train", "=", "make_hdf5", "(", "model_configs", "[", "'data_processing'", "]", ",", "train_configs", ",", "mode", "=", "\"train\"", ")", "if", "train_configs", "[", "'load_all_data_in_memory'", "]", "else", "None", "\n", "\n", "if", "train_configs", "[", "'seed'", "]", "==", "-", "1", ":", "\n", "        ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "True", ",", "False", "\n", "", "else", ":", "\n", "        ", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "if", "train_configs", "[", "'disable_debugging_API'", "]", ":", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "False", ")", "\n", "check_flags", "(", "train_configs", ",", "model_configs", ",", "world_size", ")", "\n", "\n", "if", "train_configs", "[", "'distributed_data_parallel'", "]", "and", "world_size", ">", "1", ":", "\n", "        ", "print", "(", "\"Train the models through DistributedDataParallel (DDP) mode.\"", ")", "\n", "mp", ".", "spawn", "(", "prepare_train_eval", ",", "nprocs", "=", "gpus_per_node", ",", "args", "=", "(", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "\n", "train_configs", ",", "model_configs", ",", "hdf5_path_train", ")", ")", "\n", "", "else", ":", "\n", "        ", "prepare_train_eval", "(", "rank", ",", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "train_configs", ",", "model_configs", ",", "hdf5_path_train", "=", "hdf5_path_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.__init__": [[108, 136], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.forward": [[138, 154], ["noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.conv2d1", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.activation", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.conv2d2", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.average_pooling", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.average_pooling", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.conv2d0", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.bn1", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.__init__": [[157, 194], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.forward": [[196, 219], ["noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.activation", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.conv2d1", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.activation", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.conv2d2", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.bn1", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.bn2", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.average_pooling", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.conv2d0", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.bn0", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.__init__": [[223, 313], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscOptBlock", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.forward": [[315, 351], ["enumerate", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.embedding", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.linear2", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.linear1", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.activation", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.linear4", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.embedding", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.main": [[353, 822], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "torch.utils.tensorboard.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "foolbox.utils.accuracy", "utils.diff_aug.DiffAugment", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "torch.utils.tensorboard.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "torch.clamp.to", "real_labels.to", "numpy.random.random", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "D_loss", "utils.log.make_logger.info", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "dis_acml_loss.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "foolbox.attacks.LinfProjectedGradientDescentAttack", "fb.attacks.LinfProjectedGradientDescentAttack.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x_adv_test_to_classifier.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "accuracy_clean.item", "accuracy_pos_clean.item", "accuracy_neg_clean.item", "accuracy_adv.item", "accuracy_pos_adv.item", "accuracy_neg_adv.item", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best_clean.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best_clean.item", "acc_best_adv.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best_adv.item", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "\n", "# using more step noise trained cGAN", "\n", "#parser.add_argument('--checkpoint_folder', default=\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/22000step_adding_noise_cGAN_backup\")#22000step_adding_noise_cGAN_backup", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/adding_noise_config-train-2021_05_08_11_29_36\"", ")", "#112000stepcGAN #22000step_adding_noise_cGAN_backup", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./noisecGAN_adding_noise_discriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "local_rank", "=", "rank", "\n", "# adding classifier", "\n", "checkpoint_path", "=", "'/research/dept6/yjyang/SP2020/V2CIFAR10_Generation/cifar10_models/state_dicts'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "max_iter", "=", "100", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"noisecGAN_adding_noise_discriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./noisecGAN_advtrain_discriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"current\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "\n", "\n", "\n", "# loading denoisecGAN", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/22000step_adding_noise_cGAN_backup/denoisecGAN_adding_noise_pn_overall_model_batchsize64_acc=D-current-weights-step=200000.pth\"", "\n", "d_checkpoint_dir", "=", "\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/adding_noise_config-train-2021_05_08_11_29_36/denoisecGAN_adding_noise_pn_overall_model_batchsize64_acc=D-current-weights-step=299000.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "\n", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "D_optimizer", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "", "", "step_dis", "=", "discriminator_checkpoint", "[", "'step'", "]", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./noisecGAN_advtrain_discriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "2000000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best_clean", "=", "0", "\n", "acc_best_adv", "=", "0", "\n", "data_id", "=", "0", "\n", "epoch", "=", "0", "\n", "\n", "\n", "#adding learning rate scheduler", "\n", "\n", "\n", "#lambda1 = lambda epoch: epoch // 30", "\n", "# lambda2 = lambda epoch: 0.95**(epoch//30)", "\n", "# scheduler = LambdaLR(D_optimizer, lr_lambda=[lambda2], verbose=True)", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "data_id", "=", "data_id", "+", "1", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "epoch", "=", "epoch", "+", "1", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "#if epoch%30 == 0:", "\n", "# scheduler.step()", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "\n", "#adding some noise to real_images: half clean half adding random noise", "\n", "if", "data_id", "%", "2", "==", "0", ":", "\n", "\t\t\t", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "#epsilon should be enlarged to 1 in bound[-1, 1] and will then scale to [-0.5,1.5] when bounded back to [0, 1] ", "\n", "real_images", "=", "torch", ".", "clamp", "(", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "epsilon", ",", "+", "epsilon", ")", "+", "real_images", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "#images from dataset are bound in[-1, 1]", "\n", "", "img_to_classifier", "=", "(", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "(", "real_images", "+", "1", ")", "/", "2", ",", "real_labels", ")", "\n", "#logger.info(\"data_id:{}\".format(data_id))", "\n", "# if step_count % 100 == 0:", "\n", "# \tlogger.info(\"acc of classifier is:{}\".format(acc_of_classifier))", "\n", "# if data_id%2 == 0: # 50% training adversarial samples", "\n", "# \tepsilon = np.random.random()*0.5", "\n", "# \t#print(epsilon)", "\n", "# \toutputs = classifier(img_to_classifier.to(local_rank))", "\n", "# \ty_classifier_ori = torch.argmax(outputs, dim=1).to(local_rank)", "\n", "\n", "# \traw, x_adv, is_adv = attack(fmodel, ((real_images+1)/2), y_classifier_ori, epsilons=epsilon)", "\n", "# \t#x_adv = torch.FloatTensor(x_adv).to(local_rank)", "\n", "# \t#real_images = (torch.tensor(x_adv)*2.0 -1).to(local_rank)", "\n", "# \t#print(x_adv.type())", "\n", "# \treal_images = (x_adv*2 -1).to(local_rank)", "\n", "\n", "# else:", "\n", "# \t# adding some noise to real_images", "\n", "# \treal_images = torch.empty_like(real_images, dtype=real_images.dtype).uniform_(-2/128.0, 2/128.0) + real_images", "\n", "\n", "# adding data augmentation to enhance discriminator", "\n", "policy", "=", "\"color,translation,cutout\"", "\n", "real_images", "=", "DiffAugment", "(", "real_images", ",", "policy", "=", "policy", ")", "\n", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "\n", "# if data_id%2 == 0:", "\n", "# \tx_adv_to_classifier = ((x_adv - mean)/std)", "\n", "# \toutputs = classifier(x_adv_to_classifier.to(local_rank))", "\n", "# \ty_classifier = torch.argmax(outputs, dim=1)", "\n", "\n", "# \twrong_labels = y_classifier", "\n", "# else:", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"step is :{}\"", ".", "format", "(", "step_count", ")", ")", "\n", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'clean_adv_discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "\n", "", "if", "step_count", "%", "100", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc_clean", "=", "0", "\n", "acc_pos_clean", "=", "0", "\n", "acc_neg_clean", "=", "0", "\n", "\n", "acc_adv", "=", "0", "\n", "acc_pos_adv", "=", "0", "\n", "acc_neg_adv", "=", "0", "\n", "length", "=", "0", "\n", "\n", "i", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "\t\t\t\t\t", "i", "=", "i", "+", "1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "if", "i", ">", "5", ":", "\n", "\t\t\t\t\t\t", "break", "\n", "\n", "", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "# if i%2 == 0:", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "\n", "# test on clean sample with wrong labels", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "# x_adv_test_to_classifier = ((x_adv_test - mean)/std)", "\n", "# outputs_test = classifier(x_adv_test_to_classifier.to(local_rank))", "\n", "# y_classifier = torch.argmax(outputs_test, dim=1)", "\n", "# wrong_labels = y_classifier", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc_pos_clean", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg_clean", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc_clean", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "#print(torch.sum(decision_pos))", "\n", "\n", "# testing on AEs with perturbation 0.03", "\n", "#epsilon = np.random.random() * 0.5", "\n", "\n", "\n", "epsilon", "=", "0.03", "\n", "attack", "=", "fb", ".", "attacks", ".", "LinfProjectedGradientDescentAttack", "(", "steps", "=", "40", ")", "\n", "raw", ",", "x_adv_test", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "test_images", "+", "1", ")", "/", "2", ")", ",", "test_labels", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "test_images_adv", "=", "(", "x_adv_test", "*", "2.0", ")", "-", "1.0", "\n", "\n", "latent_i_test_adv", "=", "encoder", "(", "test_images_adv", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real_adv", "=", "vae", "(", "latent_i_test_adv", ")", "\n", "\n", "# get the predicted result of AE target on classifier", "\n", "x_adv_test_to_classifier", "=", "(", "(", "x_adv_test", "-", "mean", ")", "/", "std", ")", "\n", "outputs_test", "=", "classifier", "(", "x_adv_test_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier_adv", "=", "torch", ".", "argmax", "(", "outputs_test", ",", "dim", "=", "1", ")", "\n", "wrong_labels_adv", "=", "y_classifier_adv", "\n", "\n", "#fake_images_correct_labels = gen_model(zs_real_adv, test_labels)", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real_adv", ",", "wrong_labels_adv", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels_adv", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "decision_neg_", "=", "dis_out_neg", ">", "0", "\n", "decision_neg", "=", "decision_neg", "*", "is_adv", "\n", "fail_attack_decision_neg", "=", "decision_neg_", "*", "(", "~", "is_adv", ")", "\n", "\n", "acc_pos_adv", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg_adv", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "+", "torch", ".", "sum", "(", "fail_attack_decision_neg", ")", "\n", "\n", "acc_adv", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", "+", "torch", ".", "sum", "(", "fail_attack_decision_neg", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "# results on clean samples", "\n", "", "accuracy_pos_clean", "=", "acc_pos_clean", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg_clean", "=", "acc_neg_clean", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_clean", "=", "acc_clean", "/", "(", "length", "*", "2.0", ")", "\n", "# results on adv samples", "\n", "accuracy_pos_adv", "=", "acc_pos_adv", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg_adv", "=", "acc_neg_adv", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_adv", "=", "acc_adv", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_accuracy_clean  is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy_clean", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_pos___acc_clean is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos_clean", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_neg___acc_clean is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg_clean", ".", "item", "(", ")", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"adding_noise_accuracy_adv   is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy_adv", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_pos___acc_adv  is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos_adv", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"adding_noise_neg___acc_adv  is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg_adv", ".", "item", "(", ")", ")", ")", "\n", "# save the best model on clean sample", "\n", "if", "accuracy_clean", ">", "acc_best_clean", ":", "\n", "\t\t\t\t\t", "acc_best_clean", "=", "accuracy_clean", "\n", "\n", "logger", ".", "info", "(", "\">>>>>>>>>>>>>>>>>>clean best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best_clean", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_cleanvsadv_best_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_cleanvsadv_best_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_cleanvsadv_best_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best_clean", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save clean best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "# save the best model on 0.03 AE sample", "\n", "", "if", "accuracy_adv", ">", "acc_best_adv", ":", "\n", "\t\t\t\t\t", "acc_best_adv", "=", "accuracy_adv", "\n", "\n", "logger", ".", "info", "(", "\">>>>>>>>>>>>>>>>>>>adv best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best_adv", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_adv_best_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_adv_best_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_adv_best_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best_adv", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save adv best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_pn_overall_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_pn_overall_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"denoisecGAN_adding_noise_pn_overall_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.noisecGAN_adding_bengin_noise_augmentation_using_discriminator_as_dml.save": [[828, 842], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_loader.prepare_train_eval": [[28, 317], ["utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.invencoder_resnet.Generator().to", "models.invencoder_resnet.Discriminator().to", "encoder.Encoder().to", "encoder.VAE().to", "utils.log.make_checkpoint_dir", "adding_noise_worker.make_worker", "print", "utils.misc.setup", "torch.cuda.set_device", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "int", "torch.utils.data.random_split", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.utils.data.distributed.DistributedSampler", "utils.log.make_logger.info", "utils.log.make_logger.info", "models.invencoder_resnet.Generator().to", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.optim.SGD", "torch.optim.SGD", "torchlars.LARS", "torchlars.LARS", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "metrics.inception_network.InceptionV3().to", "metrics.prepare_inception_moments.prepare_inception_moments", "adding_noise_worker.make_worker.train", "adding_noise_worker.make_worker.evaluation", "adding_noise_worker.make_worker.save_images", "adding_noise_worker.make_worker.run_image_visualization", "adding_noise_worker.make_worker.run_nearest_neighbor", "adding_noise_worker.make_worker.run_linear_interpolation", "adding_noise_worker.make_worker.run_linear_interpolation", "adding_noise_worker.make_worker.run_frequency_analysis", "adding_noise_worker.make_worker.run_tsne", "models.invencoder_resnet.Generator", "models.invencoder_resnet.Discriminator", "encoder.Encoder", "encoder.VAE", "utils.log.make_logger.info", "utils.biggan_utils.ema_DP_SyncBN", "utils.biggan_utils.ema", "utils.misc.count_parameters", "utils.misc.count_parameters", "utils.misc.count_parameters", "filter", "filter", "torch.optim.RMSprop", "torch.optim.RMSprop", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "utils.load_checkpoint.load_checkpoint", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.misc.toggle_grad", "torch.nn.parallel.DistributedDataParallel", "os.path.join", "len", "models.invencoder_resnet.Generator", "convert_model().to.parameters", "convert_model().to.parameters", "filter", "filter", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "torch.distributed.new_group", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "sync_batchnorm.batchnorm.convert_model().to", "sync_batchnorm.batchnorm.convert_model().to", "metrics.inception_network.InceptionV3", "torch.nn.DataParallel", "len", "len", "len", "len", "convert_model().to.parameters", "convert_model().to.parameters", "filter", "filter", "os.path.join", "os.path.join", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "sync_batchnorm.batchnorm.convert_model().to", "convert_model().to.parameters", "convert_model().to.parameters", "sync_batchnorm.batchnorm.convert_model", "sync_batchnorm.batchnorm.convert_model", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "range", "sync_batchnorm.batchnorm.convert_model"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.setup", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.prepare_inception_moments.prepare_inception_moments", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.evaluation", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.save_images", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_image_visualization", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_nearest_neighbor", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_linear_interpolation", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_linear_interpolation", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_frequency_analysis", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_tsne", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.count_parameters", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.count_parameters", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.count_parameters", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model"], ["def", "prepare_train_eval", "(", "local_rank", ",", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "train_configs", ",", "model_configs", ",", "hdf5_path_train", ")", ":", "\n", "\t", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "prev_ada_p", ",", "step", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", ",", "mu", ",", "sigma", ",", "inception_model", "=", "None", ",", "0", ",", "0", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "run_name__", "=", "run_name", "\n", "if", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t", "global_rank", "=", "cfgs", ".", "nr", "*", "(", "gpus_per_node", ")", "+", "local_rank", "\n", "print", "(", "\"Use GPU: {} for training.\"", ".", "format", "(", "global_rank", ")", ")", "\n", "setup", "(", "global_rank", ",", "world_size", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t", "global_rank", "=", "local_rank", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./adding_noise_cGAN_logs'", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "##### load dataset #####", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "resize_size", "=", "cfgs", ".", "img_size", ",", "\n", "hdf5_path", "=", "hdf5_path_train", ",", "random_flip", "=", "cfgs", ".", "random_flip_preprocessing", ")", "\n", "if", "cfgs", ".", "reduce_train_dataset", "<", "1.0", ":", "\n", "\t\t", "num_train", "=", "int", "(", "cfgs", ".", "reduce_train_dataset", "*", "len", "(", "train_dataset", ")", ")", "\n", "train_dataset", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "train_dataset", ",", "[", "num_train", ",", "len", "(", "train_dataset", ")", "-", "num_train", "]", ")", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets...'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "resize_size", "=", "cfgs", ".", "img_size", ",", "\n", "hdf5_path", "=", "None", ",", "random_flip", "=", "False", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "\n", "if", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "cfgs", ".", "batch_size", "=", "cfgs", ".", "batch_size", "//", "world_size", "\n", "", "else", ":", "\n", "\t\t", "train_sampler", "=", "None", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "##### build model #####", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "#module = __import__('models.{architecture}'.format(architecture=cfgs.architecture), fromlist=['something'])", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Modules are located on models.{architecture}.'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "cfgs", ".", "mixed_precision", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "Dis", "=", "module", ".", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "cfgs", ".", "mixed_precision", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "#d2Dis = module.Discriminator(cfgs.img_size, cfgs.d_conv_dim, cfgs.d_spectral_norm, cfgs.attention, cfgs.attention_after_nth_dis_block,", "\n", "#cfgs.activation_fn, cfgs.conditional_strategy, cfgs.hypersphere_dim, cfgs.num_classes, cfgs.nonlinear_embed,", "\n", "#cfgs.normalize_embed, cfgs.d_init, cfgs.D_depth, cfgs.mixed_precision).to(local_rank)", "\n", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "# encoder = module.invencoder(cfgs.img_size, cfgs.d_conv_dim, cfgs.d_spectral_norm, cfgs.attention, cfgs.attention_after_nth_dis_block,", "\n", "# \t\t\t\t\t\t   cfgs.activation_fn, cfgs.conditional_strategy, cfgs.hypersphere_dim, cfgs.num_classes, cfgs.nonlinear_embed,", "\n", "# \t\t\t\t\t\t   cfgs.normalize_embed, cfgs.d_init, cfgs.D_depth, cfgs.mixed_precision).to(local_rank)", "\n", "\n", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Prepare EMA for G with decay of {}.'", ".", "format", "(", "cfgs", ".", "ema_decay", ")", ")", "\n", "Gen_copy", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "initialize", "=", "False", ",", "G_depth", "=", "cfgs", ".", "G_depth", ",", "mixed_precision", "=", "cfgs", ".", "mixed_precision", ")", ".", "to", "(", "local_rank", ")", "\n", "if", "not", "cfgs", ".", "distributed_data_parallel", "and", "world_size", ">", "1", "and", "cfgs", ".", "synchronized_bn", ":", "\n", "\t\t\t", "Gen_ema", "=", "ema_DP_SyncBN", "(", "Gen", ",", "Gen_copy", ",", "cfgs", ".", "ema_decay", ",", "cfgs", ".", "ema_start", ")", "\n", "", "else", ":", "\n", "\t\t\t", "Gen_ema", "=", "ema", "(", "Gen", ",", "Gen_copy", ",", "cfgs", ".", "ema_decay", ",", "cfgs", ".", "ema_start", ")", "\n", "", "", "else", ":", "\n", "\t\t", "Gen_copy", ",", "Gen_ema", "=", "None", ",", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "count_parameters", "(", "Gen", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "Gen", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "count_parameters", "(", "Dis", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "Dis", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "count_parameters", "(", "encoder", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "encoder", ")", "\n", "\n", "# if local_rank == 0: logger.info(count_parameters(d2Dis))", "\n", "# if local_rank == 0: logger.info(d2Dis)", "\n", "\n", "### define loss functions and optimizers", "\n", "G_loss", "=", "{", "'vanilla'", ":", "loss_dcgan_gen", ",", "'least_square'", ":", "loss_lsgan_gen", ",", "'hinge'", ":", "loss_hinge_gen", ",", "'wasserstein'", ":", "loss_wgan_gen", "}", "\n", "D_loss", "=", "{", "'vanilla'", ":", "loss_dcgan_dis", ",", "'least_square'", ":", "loss_lsgan_dis", ",", "'hinge'", ":", "loss_hinge_dis", ",", "'wasserstein'", ":", "loss_wgan_dis", "}", "\n", "#d2D_loss = loss_hinge_dis", "\n", "\n", "if", "cfgs", ".", "optimizer", "==", "\"SGD\"", ":", "\n", "\t\t", "G_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "nesterov", "=", "cfgs", ".", "nesterov", ")", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "nesterov", "=", "cfgs", ".", "nesterov", ")", "\n", "", "elif", "cfgs", ".", "optimizer", "==", "\"RMSprop\"", ":", "\n", "\t\t", "G_optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "alpha", "=", "cfgs", ".", "alpha", ")", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "alpha", "=", "cfgs", ".", "alpha", ")", "\n", "", "elif", "cfgs", ".", "optimizer", "==", "\"Adam\"", ":", "\n", "\t\t", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "#d2D_optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, d2Dis.parameters()), cfgs.d_lr, [cfgs.beta1, cfgs.beta2], eps=1e-6)", "\n", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "#opt_encoder = torch.optim.Adam(filter(lambda p: p.requires_grad, encoder.parameters()), cfgs.d_lr, [cfgs.beta1, cfgs.beta2], eps=1e-6)", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "cfgs", ".", "LARS_optimizer", ":", "\n", "\t\t", "G_optimizer", "=", "LARS", "(", "optimizer", "=", "G_optimizer", ",", "eps", "=", "1e-8", ",", "trust_coef", "=", "0.001", ")", "\n", "D_optimizer", "=", "LARS", "(", "optimizer", "=", "D_optimizer", ",", "eps", "=", "1e-8", ",", "trust_coef", "=", "0.001", ")", "\n", "\n", "##### load checkpoints if needed #####", "\n", "", "checkpoint_dir_save", "=", "make_checkpoint_dir", "(", "None", ",", "run_name", ")", "# the path used to save the models", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "\t\t", "when", "=", "\"current\"", "if", "cfgs", ".", "load_current", "is", "True", "else", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "d_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d2d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=2D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d2d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/diff_best_batchsize64_acc=D-current-weights-step=139500acc=0.9378999471664429.pth\"", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "\n", "Dis", ",", "D_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", "=", "load_checkpoint", "(", "Dis", ",", "D_optimizer", ",", "d_checkpoint_dir", ",", "metric", "=", "True", ")", "\n", "\n", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "#if local_rank == 0: logger = make_logger(run_name, None)", "\n", "cfgs", ".", "ema", "=", "True", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t", "g_ema_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "Gen_copy", "=", "load_checkpoint", "(", "Gen_copy", ",", "None", ",", "g_ema_checkpoint_dir", ",", "ema", "=", "cfgs", ".", "ema", ")", "\n", "Gen_ema", ".", "source", ",", "Gen_ema", ".", "target", "=", "Gen", ",", "Gen_copy", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./adding_noise_cGAN_logs'", ",", "run_name__", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "cfgs", ".", "seed", "=", "trained_seed", "\n", "if", "cfgs", ".", "train_configs", "[", "'train'", "]", ":", "\n", "\t\t\t", "assert", "cfgs", ".", "seed", "==", "trained_seed", ",", "\"Seed for sampling random numbers should be same!\"", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Discriminator checkpoint is {}'", ".", "format", "(", "d_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('2Discriminator checkpoint is {}'.format(d2d_checkpoint_dir))", "\n", "\n", "if", "cfgs", ".", "freeze_layers", ">", "-", "1", ":", "\n", "\t\t\t", "prev_ada_p", ",", "step", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", "=", "None", ",", "0", ",", "0", ",", "None", ",", "None", "\n", "\n", "\n", "##### wrap models with DP and convert BN to Sync BN #####", "\n", "", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "if", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t\t", "if", "cfgs", ".", "synchronized_bn", ":", "\n", "\t\t\t\t", "process_group", "=", "torch", ".", "distributed", ".", "new_group", "(", "[", "w", "for", "w", "in", "range", "(", "world_size", ")", "]", ")", "\n", "Gen", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Gen", ",", "process_group", ")", "\n", "Dis", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Dis", ",", "process_group", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t\t", "Gen_copy", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Gen_copy", ",", "process_group", ")", "\n", "\n", "", "", "Gen", "=", "DDP", "(", "Gen", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "Dis", "=", "DDP", "(", "Dis", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t", "Gen_copy", "=", "DDP", "(", "Gen_copy", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "# d2Dis = DataParallel(d2Dis, output_device=local_rank)", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t", "Gen_copy", "=", "DataParallel", "(", "Gen_copy", ",", "output_device", "=", "local_rank", ")", "\n", "\n", "", "if", "cfgs", ".", "synchronized_bn", ":", "\n", "\t\t\t\t", "Gen", "=", "convert_model", "(", "Gen", ")", ".", "to", "(", "local_rank", ")", "\n", "Dis", "=", "convert_model", "(", "Dis", ")", ".", "to", "(", "local_rank", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t\t", "Gen_copy", "=", "convert_model", "(", "Gen_copy", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "##### load the inception network and prepare first/secend moments for calculating FID #####", "\n", "", "", "", "", "if", "cfgs", ".", "eval", ":", "\n", "\t\t", "inception_model", "=", "InceptionV3", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "if", "world_size", ">", "1", "and", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t\t", "toggle_grad", "(", "inception_model", ",", "on", "=", "True", ")", "\n", "inception_model", "=", "DDP", "(", "inception_model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "broadcast_buffers", "=", "False", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "elif", "world_size", ">", "1", "and", "cfgs", ".", "distributed_data_parallel", "is", "False", ":", "\n", "\t\t\t", "inception_model", "=", "DataParallel", "(", "inception_model", ",", "output_device", "=", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pass", "\n", "\n", "", "mu", ",", "sigma", "=", "prepare_inception_moments", "(", "dataloader", "=", "eval_dataloader", ",", "\n", "generator", "=", "Gen", ",", "\n", "eval_mode", "=", "cfgs", ".", "eval_type", ",", "\n", "inception_model", "=", "inception_model", ",", "\n", "splits", "=", "1", ",", "\n", "run_name", "=", "run_name__", ",", "\n", "logger", "=", "logger", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "", "worker", "=", "make_worker", "(", "\n", "cfgs", "=", "cfgs", ",", "\n", "run_name", "=", "run_name", ",", "\n", "best_step", "=", "best_step", ",", "\n", "logger", "=", "logger", ",", "\n", "writer", "=", "writer", ",", "\n", "n_gpus", "=", "world_size", ",", "\n", "gen_model", "=", "Gen", ",", "\n", "dis_model", "=", "Dis", ",", "\n", "#d2dis_model=d2Dis,", "\n", "inception_model", "=", "inception_model", ",", "\n", "Gen_copy", "=", "Gen_copy", ",", "\n", "Gen_ema", "=", "Gen_ema", ",", "\n", "train_dataset", "=", "train_dataset", ",", "\n", "eval_dataset", "=", "eval_dataset", ",", "\n", "train_dataloader", "=", "train_dataloader", ",", "\n", "eval_dataloader", "=", "eval_dataloader", ",", "\n", "G_optimizer", "=", "G_optimizer", ",", "\n", "D_optimizer", "=", "D_optimizer", ",", "\n", "#d2D_optimizer=None,", "\n", "G_loss", "=", "G_loss", "[", "cfgs", ".", "adv_loss", "]", ",", "\n", "D_loss", "=", "D_loss", "[", "cfgs", ".", "adv_loss", "]", ",", "\n", "#d2D_loss=None,", "\n", "prev_ada_p", "=", "prev_ada_p", ",", "\n", "global_rank", "=", "global_rank", ",", "\n", "local_rank", "=", "local_rank", ",", "\n", "bn_stat_OnTheFly", "=", "cfgs", ".", "bn_stat_OnTheFly", ",", "\n", "checkpoint_dir", "=", "checkpoint_dir_save", ",", "#notice", "\n", "mu", "=", "mu", ",", "\n", "sigma", "=", "sigma", ",", "\n", "best_fid", "=", "best_fid", ",", "\n", "best_fid_checkpoint_path", "=", "best_fid_checkpoint_path", ",", "\n", "\n", "encoder", "=", "encoder", ",", "\n", "vae", "=", "vae", ",", "\n", "opt_encoder", "=", "opt_encoder", ",", "\n", "\n", ")", "\n", "step", "=", "step", "\n", "if", "cfgs", ".", "train_configs", "[", "'train'", "]", ":", "\n", "\t\t", "step", "=", "worker", ".", "train", "(", "current_step", "=", "step", ",", "total_step", "=", "cfgs", ".", "total_step", ")", "\n", "\n", "", "if", "cfgs", ".", "eval", ":", "\n", "\t\t", "is_save", "=", "worker", ".", "evaluation", "(", "step", "=", "step", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "save_images", ":", "\n", "\t\t", "worker", ".", "save_images", "(", "is_generate", "=", "True", ",", "png", "=", "True", ",", "npz", "=", "True", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "image_visualization", ":", "\n", "\t\t", "worker", ".", "run_image_visualization", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "k_nearest_neighbor", ":", "\n", "\t\t", "worker", ".", "run_nearest_neighbor", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "interpolation", ":", "\n", "\t\t", "assert", "cfgs", ".", "architecture", "in", "[", "\"big_resnet\"", ",", "\"biggan_deep\"", "]", ",", "\"StudioGAN does not support interpolation analysis except for biggan and biggan_deep.\"", "\n", "worker", ".", "run_linear_interpolation", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "fix_z", "=", "True", ",", "fix_y", "=", "False", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "worker", ".", "run_linear_interpolation", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "fix_z", "=", "False", ",", "fix_y", "=", "True", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "frequency_analysis", ":", "\n", "\t\t", "worker", ".", "run_frequency_analysis", "(", "num_images", "=", "len", "(", "train_dataset", ")", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "tsne_analysis", ":", "\n", "\t\t", "worker", ".", "run_tsne", "(", "dataloader", "=", "eval_dataloader", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.DiscOptBlock.__init__": [[108, 136], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.DiscOptBlock.forward": [[138, 154], ["batchsize64_mydiscriminator.DiscOptBlock.conv2d1", "batchsize64_mydiscriminator.DiscOptBlock.activation", "batchsize64_mydiscriminator.DiscOptBlock.conv2d2", "batchsize64_mydiscriminator.DiscOptBlock.average_pooling", "batchsize64_mydiscriminator.DiscOptBlock.average_pooling", "batchsize64_mydiscriminator.DiscOptBlock.conv2d0", "batchsize64_mydiscriminator.DiscOptBlock.bn1", "batchsize64_mydiscriminator.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.DiscBlock.__init__": [[157, 194], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.DiscBlock.forward": [[196, 219], ["batchsize64_mydiscriminator.DiscBlock.activation", "batchsize64_mydiscriminator.DiscBlock.conv2d1", "batchsize64_mydiscriminator.DiscBlock.activation", "batchsize64_mydiscriminator.DiscBlock.conv2d2", "batchsize64_mydiscriminator.DiscBlock.bn1", "batchsize64_mydiscriminator.DiscBlock.bn2", "batchsize64_mydiscriminator.DiscBlock.average_pooling", "batchsize64_mydiscriminator.DiscBlock.conv2d0", "batchsize64_mydiscriminator.DiscBlock.bn0", "batchsize64_mydiscriminator.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.Discriminator.__init__": [[223, 313], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "batchsize64_mydiscriminator.DiscOptBlock", "batchsize64_mydiscriminator.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.Discriminator.forward": [[315, 351], ["enumerate", "batchsize64_mydiscriminator.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "batchsize64_mydiscriminator.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "batchsize64_mydiscriminator.Discriminator.embedding", "batchsize64_mydiscriminator.Discriminator.linear2", "batchsize64_mydiscriminator.Discriminator.linear1", "batchsize64_mydiscriminator.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "batchsize64_mydiscriminator.Discriminator.activation", "batchsize64_mydiscriminator.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "batchsize64_mydiscriminator.Discriminator.linear4", "batchsize64_mydiscriminator.Discriminator.embedding", "batchsize64_mydiscriminator.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.main": [[353, 624], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "batchsize64_mydiscriminator.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "dis_model.eval", "iter", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "dis_acml_loss.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "accuracy.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/src/checkpoints/model=D-current-weights-step=37500.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "#step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "", "", "", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "real_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "real_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "test_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "test_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.batchsize64_mydiscriminator.save": [[630, 644], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._DenseLayer.__init__": [[11, 24], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._DenseLayer.forward": [[25, 31], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_2.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._DenseBlock.__init__": [[34, 40], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "\n", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._Transition.__init__": [[43, 50], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.DenseNet.__init__": [[66, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet._Transition", "densenet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "10", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "\n", "# CIFAR-10: kernel_size 7 ->3, stride 2->1, padding 3->1", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "## END", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "# Official init from torch repo.", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.DenseNet.forward": [[113, 119], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "densenet.DenseNet.classifier", "densenet.DenseNet.size", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet": [[120, 127], ["densenet.DenseNet", "os.path.dirname", "torch.load", "torch.load", "torch.load", "DenseNet.load_state_dict"], "function", ["None"], ["", "", "def", "_densenet", "(", "arch", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "pretrained", ",", "progress", ",", "device", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "script_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "script_dir", "+", "'/state_dicts/'", "+", "arch", "+", "'.pt'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet121": [[129, 139], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet121", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet121'", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet161": [[141, 151], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet161", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet161'", ",", "48", ",", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "96", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169": [[153, 163], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet169", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet169'", ",", "32", ",", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet201": [[165, 175], ["densenet._densenet"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet._densenet"], ["", "def", "densenet201", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "device", "=", "'cpu'", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet201'", ",", "32", ",", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "device", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.DiscOptBlock.__init__": [[104, 132], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.DiscOptBlock.forward": [[134, 150], ["diff_model_batchsize64_mydiscriminator.DiscOptBlock.conv2d1", "diff_model_batchsize64_mydiscriminator.DiscOptBlock.activation", "diff_model_batchsize64_mydiscriminator.DiscOptBlock.conv2d2", "diff_model_batchsize64_mydiscriminator.DiscOptBlock.average_pooling", "diff_model_batchsize64_mydiscriminator.DiscOptBlock.average_pooling", "diff_model_batchsize64_mydiscriminator.DiscOptBlock.conv2d0", "diff_model_batchsize64_mydiscriminator.DiscOptBlock.bn1", "diff_model_batchsize64_mydiscriminator.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.DiscBlock.__init__": [[153, 190], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.DiscBlock.forward": [[192, 215], ["diff_model_batchsize64_mydiscriminator.DiscBlock.activation", "diff_model_batchsize64_mydiscriminator.DiscBlock.conv2d1", "diff_model_batchsize64_mydiscriminator.DiscBlock.activation", "diff_model_batchsize64_mydiscriminator.DiscBlock.conv2d2", "diff_model_batchsize64_mydiscriminator.DiscBlock.bn1", "diff_model_batchsize64_mydiscriminator.DiscBlock.bn2", "diff_model_batchsize64_mydiscriminator.DiscBlock.average_pooling", "diff_model_batchsize64_mydiscriminator.DiscBlock.conv2d0", "diff_model_batchsize64_mydiscriminator.DiscBlock.bn0", "diff_model_batchsize64_mydiscriminator.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.Discriminator.__init__": [[219, 309], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "diff_model_batchsize64_mydiscriminator.DiscOptBlock", "diff_model_batchsize64_mydiscriminator.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.Discriminator.forward": [[311, 347], ["enumerate", "diff_model_batchsize64_mydiscriminator.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "diff_model_batchsize64_mydiscriminator.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "diff_model_batchsize64_mydiscriminator.Discriminator.embedding", "diff_model_batchsize64_mydiscriminator.Discriminator.linear2", "diff_model_batchsize64_mydiscriminator.Discriminator.linear1", "diff_model_batchsize64_mydiscriminator.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "diff_model_batchsize64_mydiscriminator.Discriminator.activation", "diff_model_batchsize64_mydiscriminator.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "diff_model_batchsize64_mydiscriminator.Discriminator.linear4", "diff_model_batchsize64_mydiscriminator.Discriminator.embedding", "diff_model_batchsize64_mydiscriminator.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.main": [[349, 626], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "utils.diff_aug.DiffAugment", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "utils.diff_aug.DiffAugment", "random.randint", "random.randint", "random.randint", "gen_model", "utils.diff_aug.DiffAugment", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "diff_model_batchsize64_mydiscriminator.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "utils.diff_aug.DiffAugment.to", "real_labels.to", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "dis_model.eval", "iter", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "dis_acml_loss.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "accuracy.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "policy", "=", "\"color,translation,cutout\"", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/src/checkpoints/model=D-current-weights-step=37500.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "#step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "", "", "", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "real_images", "=", "DiffAugment", "(", "real_images", ",", "policy", "=", "policy", ")", "\n", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "fake_images_correct_labels", "=", "DiffAugment", "(", "fake_images_correct_labels", ",", "policy", "=", "policy", ")", "\n", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "fake_images_wrong_labels", "=", "DiffAugment", "(", "fake_images_wrong_labels", ",", "policy", "=", "policy", ")", "\n", "\n", "difference_pos", "=", "real_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "real_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "test_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "test_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"diff_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"diff_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"diff_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"diff_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"diff_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"diff_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.diff_model_batchsize64_mydiscriminator.save": [[632, 646], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.__init__": [[105, 133], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.forward": [[135, 151], ["enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.conv2d1", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.activation", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.conv2d2", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.average_pooling", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.average_pooling", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.conv2d0", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.bn1", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.__init__": [[154, 191], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.forward": [[193, 216], ["enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.activation", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.conv2d1", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.activation", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.conv2d2", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.bn1", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.bn2", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.average_pooling", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.conv2d0", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.bn0", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.Discriminator.__init__": [[220, 310], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "enhance_advtrain_using_discriminator_as_dml_training.DiscOptBlock", "enhance_advtrain_using_discriminator_as_dml_training.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.Discriminator.forward": [[312, 348], ["enumerate", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.embedding", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.linear2", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.linear1", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.activation", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.linear4", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.embedding", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.main": [[350, 723], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "foolbox.utils.accuracy", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enhance_advtrain_using_discriminator_as_dml_training.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "densenet169().to.", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "foolbox.attacks.LinfProjectedGradientDescentAttack", "foolbox.attacks.LinfBasicIterativeAttack", "fb.attacks.LinfProjectedGradientDescentAttack.", "fb.attacks.LinfBasicIterativeAttack.", "numpy.random.random", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "gen_model", "dis_model", "dis_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "img_to_classifier.to", "x_adv_to_classifier.to", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "numpy.random.random", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "dis_acml_loss.item", "fb.attacks.LinfProjectedGradientDescentAttack.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "dis_acml_loss.item", "test_images.to", "test_labels.to", "x_adv_test_to_classifier.to", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./adv_train_mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "local_rank", "=", "rank", "\n", "# adding classifier", "\n", "checkpoint_path", "=", "'/research/dept6/yjyang/SP2020/V2CIFAR10_Generation/cifar10_models/state_dicts'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "max_iter", "=", "100", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"enhance_advtrain_pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "scheduler", "=", "ReduceLROnPlateau", "(", "D_optimizer", ",", "'min'", ")", "\n", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "d_checkpoint_dir", "=", "\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/enhance_advtrain_pn_old_model_batchsize64_acc=D-current-weights-step=11000.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "\n", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "D_optimizer", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "", "", "step_dis", "=", "discriminator_checkpoint", "[", "'step'", "]", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./Advtrain_mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Discriminator checkpoint is {}'", ".", "format", "(", "d_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "data_id", "=", "0", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "data_id", "=", "data_id", "+", "1", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "\n", "# adding some noise to real_images", "\n", "#real_images = torch.empty_like(real_images, dtype=real_images.dtype).uniform_(-2/128.0, 2/128.0) + real_images", "\n", "img_to_classifier", "=", "(", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "(", "real_images", "+", "1", ")", "/", "2", ",", "real_labels", ")", "\n", "#logger.info(\"data_id:{}\".format(data_id))", "\n", "#logger.info(\"acc of classifier is:{}\".format(acc_of_classifier))", "\n", "if", "data_id", "%", "2", "==", "0", ":", "# 50% training adversarial samples", "\n", "\n", "\t\t\t", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "*", "0.5", "+", "0.005", "\n", "#print(epsilon)", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier_ori", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "attack", "=", "fb", ".", "attacks", ".", "LinfProjectedGradientDescentAttack", "(", "steps", "=", "40", ")", "\n", "attack_bim", "=", "fb", ".", "attacks", ".", "LinfBasicIterativeAttack", "(", "steps", "=", "40", ")", "\n", "raw_pgd", ",", "x_adv_pgd", ",", "is_adv_pgd", "=", "attack", "(", "fmodel", ",", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ",", "y_classifier_ori", ",", "epsilons", "=", "epsilon", ")", "\n", "raw_bim", ",", "x_adv_bim", ",", "is_adv_bim", "=", "attack_bim", "(", "fmodel", ",", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ",", "y_classifier_ori", ",", "epsilons", "=", "epsilon", ")", "\n", "#x_adv = torch.FloatTensor(x_adv).to(local_rank)", "\n", "#real_images = (torch.tensor(x_adv)*2.0 -1).to(local_rank)", "\n", "#print(x_adv.type())", "\n", "select", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "if", "select", ">", "0.5", ":", "\n", "\t\t\t\t", "real_images", "=", "(", "x_adv_pgd", "*", "2", "-", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "x_adv", "=", "x_adv_pgd", "\n", "is_adv", "=", "is_adv_pgd", "\n", "", "else", ":", "\n", "\t\t\t\t", "real_images", "=", "(", "x_adv_bim", "*", "2", "-", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "x_adv", "=", "x_adv_bim", "\n", "is_adv", "=", "is_adv_bim", "\n", "", "", "else", ":", "\n", "# adding some noise to real_images", "\n", "\t\t\t", "if", "data_id", "%", "3", "==", "0", ":", "\n", "\t\t\t\t", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "2", "/", "128.0", ",", "2", "/", "128.0", ")", "+", "real_images", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "", "", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "\n", "if", "data_id", "%", "2", "==", "0", ":", "\n", "\t\t\t", "x_adv_to_classifier", "=", "(", "(", "x_adv", "-", "mean", ")", "/", "std", ")", "\n", "outputs", "=", "classifier", "(", "x_adv_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "real_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "\n", "#wrong_labels = y_classifier", "\n", "", "else", ":", "\n", "\t\t\t", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"advtrain_Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'advtrain_Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t", "scheduler", ".", "step", "(", "dis_acml_loss", ")", "\n", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "#length = test_labels.size(0) + length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "epsilon", "=", "0.03", "#np.random.random() * 0.5", "\n", "raw", ",", "x_adv_test", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "test_images", "+", "1", ")", "/", "2", ")", ",", "test_labels", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "test_images", "=", "(", "x_adv_test", "*", "2.0", ")", "-", "1.0", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "#Int_Modi = random.randint(1, 9)", "\n", "#wrong_labels = ((test_labels + Int_Modi) % 10).to(local_rank)", "\n", "x_adv_test_to_classifier", "=", "(", "(", "x_adv_test", "-", "mean", ")", "/", "std", ")", "\n", "outputs_test", "=", "classifier", "(", "x_adv_test_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs_test", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "wrong_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "test_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "length", "=", "length", "+", "len", "(", "dis_out_neg", ")", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "logger", ".", "info", "(", "\"length is:{}\"", ".", "format", "(", "length", ")", ")", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"enhance_advtrain_accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"enhance_advtrain_pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"enhance_advtrain_neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\">>>>>>>>>>>>>>>enhance_advtrain_best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"enhance_advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"enhance_advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"enhance_advtrain_pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"enhance_advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"enhance_advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"enhance_advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.enhance_advtrain_using_discriminator_as_dml_training.save": [[729, 743], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.DiscOptBlock.__init__": [[108, 136], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.DiscOptBlock.forward": [[138, 154], ["old_model_batchsize64_mydiscriminator.DiscOptBlock.conv2d1", "old_model_batchsize64_mydiscriminator.DiscOptBlock.activation", "old_model_batchsize64_mydiscriminator.DiscOptBlock.conv2d2", "old_model_batchsize64_mydiscriminator.DiscOptBlock.average_pooling", "old_model_batchsize64_mydiscriminator.DiscOptBlock.average_pooling", "old_model_batchsize64_mydiscriminator.DiscOptBlock.conv2d0", "old_model_batchsize64_mydiscriminator.DiscOptBlock.bn1", "old_model_batchsize64_mydiscriminator.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.DiscBlock.__init__": [[157, 194], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.DiscBlock.forward": [[196, 219], ["old_model_batchsize64_mydiscriminator.DiscBlock.activation", "old_model_batchsize64_mydiscriminator.DiscBlock.conv2d1", "old_model_batchsize64_mydiscriminator.DiscBlock.activation", "old_model_batchsize64_mydiscriminator.DiscBlock.conv2d2", "old_model_batchsize64_mydiscriminator.DiscBlock.bn1", "old_model_batchsize64_mydiscriminator.DiscBlock.bn2", "old_model_batchsize64_mydiscriminator.DiscBlock.average_pooling", "old_model_batchsize64_mydiscriminator.DiscBlock.conv2d0", "old_model_batchsize64_mydiscriminator.DiscBlock.bn0", "old_model_batchsize64_mydiscriminator.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.Discriminator.__init__": [[223, 313], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "old_model_batchsize64_mydiscriminator.DiscOptBlock", "old_model_batchsize64_mydiscriminator.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.Discriminator.forward": [[315, 351], ["enumerate", "old_model_batchsize64_mydiscriminator.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "old_model_batchsize64_mydiscriminator.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "old_model_batchsize64_mydiscriminator.Discriminator.embedding", "old_model_batchsize64_mydiscriminator.Discriminator.linear2", "old_model_batchsize64_mydiscriminator.Discriminator.linear1", "old_model_batchsize64_mydiscriminator.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "old_model_batchsize64_mydiscriminator.Discriminator.activation", "old_model_batchsize64_mydiscriminator.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "old_model_batchsize64_mydiscriminator.Discriminator.linear4", "old_model_batchsize64_mydiscriminator.Discriminator.embedding", "old_model_batchsize64_mydiscriminator.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.main": [[353, 635], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "old_model_batchsize64_mydiscriminator.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "dis_acml_loss.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "dis_acml_loss.item", "test_labels.size", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./best_version1_cifar10_checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "d_checkpoint_dir", "=", "\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/best_version1_cifar10_checkpoints/acc93.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "\n", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "D_optimizer", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "", "", "step_dis", "=", "discriminator_checkpoint", "[", "'step'", "]", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Discriminator checkpoint is {}'", ".", "format", "(", "d_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "length", "=", "test_labels", ".", "size", "(", "0", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\"best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.old_model_batchsize64_mydiscriminator.save": [[641, 655], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_main.main": [[25, 108], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.log.make_run_name", "utils.misc.check_flags", "argparse.ArgumentParser.print_help", "sys.exit", "vars", "utils.make_hdf5.make_hdf5", "utils.misc.fix_all_seed", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "print", "torch.spawn", "adding_noise_loader.prepare_train_eval", "open", "json.load", "train_configs[].split"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.check_flags", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.make_hdf5.make_hdf5", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.loader.prepare_train_eval"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/adding_noise_config.json'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints/adding_noise_config-train-2021_05_08_11_29_36'", ")", "\n", "parser", ".", "add_argument", "(", "'-current'", ",", "'--load_current'", ",", "default", "=", "True", ",", "help", "=", "'whether you load the current or best checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-DDP'", ",", "'--distributed_data_parallel'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'-nr'", ",", "'--nr'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'ranking within the nodes'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'seed for generating random numbers'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'-sync_bn'", ",", "'--synchronized_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on synchronized batchnorm'", ")", "\n", "parser", ".", "add_argument", "(", "'-mpc'", ",", "'--mixed_precision'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on mixed precision training'", ")", "\n", "parser", ".", "add_argument", "(", "'-LARS'", ",", "'--LARS_optimizer'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether turn on LARS optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'-rm_API'", ",", "'--disable_debugging_API'", ",", "default", "=", "False", ",", "help", "=", "'whether disable pytorch autograd debugging mode'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--reduce_train_dataset'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'control the number of train dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'-stat_otf'", ",", "'--bn_stat_OnTheFly'", ",", "action", "=", "'store_true'", ",", "help", "=", "'when evaluating, use the statistics of a batch'", ")", "\n", "parser", ".", "add_argument", "(", "'-std_stat'", ",", "'--standing_statistics'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--standing_step'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'# of steps for accumulation batchnorm'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_layers'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'# of layers for freezing discriminator'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-l'", ",", "'--load_all_data_in_memory'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--save_images'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-iv'", ",", "'--image_visualization'", ",", "default", "=", "True", ",", "help", "=", "'select whether conduct image visualization'", ")", "\n", "parser", ".", "add_argument", "(", "'-knn'", ",", "'--k_nearest_neighbor'", ",", "action", "=", "'store_true'", ",", "help", "=", "'select whether conduct k-nearest neighbor analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-itp'", ",", "'--interpolation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct interpolation analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-fa'", ",", "'--frequency_analysis'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct frequency analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'-tsne'", ",", "'--tsne_analysis'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether conduct tsne analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'--nrow'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of rows to plot image canvas'", ")", "\n", "parser", ".", "add_argument", "(", "'--ncol'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of cols to plot image canvas'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "args", ".", "train", "and", "not", "args", ".", "eval", "and", "not", "args", ".", "save_images", "and", "not", "args", ".", "image_visualization", "and", "not", "args", ".", "k_nearest_neighbor", "and", "not", "args", ".", "interpolation", "and", "not", "args", ".", "frequency_analysis", "and", "not", "args", ".", "tsne_analysis", ":", "\n", "        ", "parser", ".", "print_help", "(", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "            ", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "hdf5_path_train", "=", "make_hdf5", "(", "model_configs", "[", "'data_processing'", "]", ",", "train_configs", ",", "mode", "=", "\"train\"", ")", "if", "train_configs", "[", "'load_all_data_in_memory'", "]", "else", "None", "\n", "\n", "if", "train_configs", "[", "'seed'", "]", "==", "-", "1", ":", "\n", "        ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "True", ",", "False", "\n", "", "else", ":", "\n", "        ", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "if", "train_configs", "[", "'disable_debugging_API'", "]", ":", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "False", ")", "\n", "check_flags", "(", "train_configs", ",", "model_configs", ",", "world_size", ")", "\n", "\n", "if", "train_configs", "[", "'distributed_data_parallel'", "]", "and", "world_size", ">", "1", ":", "\n", "        ", "print", "(", "\"Train the models through DistributedDataParallel (DDP) mode.\"", ")", "\n", "mp", ".", "spawn", "(", "prepare_train_eval", ",", "nprocs", "=", "gpus_per_node", ",", "args", "=", "(", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "\n", "train_configs", ",", "model_configs", ",", "hdf5_path_train", ")", ")", "\n", "", "else", ":", "\n", "        ", "prepare_train_eval", "(", "rank", ",", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "train_configs", ",", "model_configs", ",", "hdf5_path_train", "=", "hdf5_path_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint": [[10, 39], ["isinstance", "torch.load", "model.load_state_dict", "torch.load", "model.load_state_dict", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "optimizer.state.values", "state.items", "isinstance", "v.cuda"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], ["def", "load_checkpoint", "(", "model", ",", "optimizer", ",", "filename", ",", "metric", "=", "False", ",", "ema", "=", "False", ")", ":", "\n", "    ", "start_step", "=", "0", "\n", "if", "isinstance", "(", "model", ",", "encoder", ".", "VAE", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "return", "model", "\n", "", "if", "ema", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "return", "model", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "seed", "=", "checkpoint", "[", "'seed'", "]", "\n", "run_name", "=", "checkpoint", "[", "'run_name'", "]", "\n", "start_step", "=", "checkpoint", "[", "'step'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "ada_p", "=", "checkpoint", "[", "'ada_p'", "]", "\n", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "if", "metric", ":", "\n", "            ", "best_step", "=", "checkpoint", "[", "'best_step'", "]", "\n", "best_fid", "=", "checkpoint", "[", "'best_fid'", "]", "\n", "best_fid_checkpoint_path", "=", "checkpoint", "[", "'best_fid_checkpoint_path'", "]", "\n", "return", "model", ",", "optimizer", ",", "seed", ",", "run_name", ",", "start_step", ",", "ada_p", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", "\n", "", "", "return", "model", ",", "optimizer", ",", "seed", ",", "run_name", ",", "start_step", ",", "ada_p", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.DiscOptBlock.__init__": [[105, 133], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.DiscOptBlock.forward": [[135, 151], ["advtrain_using_discriminator_as_dml_training.DiscOptBlock.conv2d1", "advtrain_using_discriminator_as_dml_training.DiscOptBlock.activation", "advtrain_using_discriminator_as_dml_training.DiscOptBlock.conv2d2", "advtrain_using_discriminator_as_dml_training.DiscOptBlock.average_pooling", "advtrain_using_discriminator_as_dml_training.DiscOptBlock.average_pooling", "advtrain_using_discriminator_as_dml_training.DiscOptBlock.conv2d0", "advtrain_using_discriminator_as_dml_training.DiscOptBlock.bn1", "advtrain_using_discriminator_as_dml_training.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.DiscBlock.__init__": [[154, 191], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.DiscBlock.forward": [[193, 216], ["advtrain_using_discriminator_as_dml_training.DiscBlock.activation", "advtrain_using_discriminator_as_dml_training.DiscBlock.conv2d1", "advtrain_using_discriminator_as_dml_training.DiscBlock.activation", "advtrain_using_discriminator_as_dml_training.DiscBlock.conv2d2", "advtrain_using_discriminator_as_dml_training.DiscBlock.bn1", "advtrain_using_discriminator_as_dml_training.DiscBlock.bn2", "advtrain_using_discriminator_as_dml_training.DiscBlock.average_pooling", "advtrain_using_discriminator_as_dml_training.DiscBlock.conv2d0", "advtrain_using_discriminator_as_dml_training.DiscBlock.bn0", "advtrain_using_discriminator_as_dml_training.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.Discriminator.__init__": [[220, 310], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "advtrain_using_discriminator_as_dml_training.DiscOptBlock", "advtrain_using_discriminator_as_dml_training.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.Discriminator.forward": [[312, 348], ["enumerate", "advtrain_using_discriminator_as_dml_training.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "advtrain_using_discriminator_as_dml_training.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "advtrain_using_discriminator_as_dml_training.Discriminator.embedding", "advtrain_using_discriminator_as_dml_training.Discriminator.linear2", "advtrain_using_discriminator_as_dml_training.Discriminator.linear1", "advtrain_using_discriminator_as_dml_training.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "advtrain_using_discriminator_as_dml_training.Discriminator.activation", "advtrain_using_discriminator_as_dml_training.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "advtrain_using_discriminator_as_dml_training.Discriminator.linear4", "advtrain_using_discriminator_as_dml_training.Discriminator.embedding", "advtrain_using_discriminator_as_dml_training.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.main": [[350, 711], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "densenet.densenet169().to", "os.path.join", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "densenet169().to.load_state_dict", "densenet169().to.eval().to", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "dict", "foolbox.PyTorchModel", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "foolbox.utils.accuracy", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "densenet.densenet169", "densenet169().to.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "advtrain_using_discriminator_as_dml_training.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "densenet169().to.", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "torch.argmax().to", "foolbox.attacks.LinfProjectedGradientDescentAttack", "fb.attacks.LinfProjectedGradientDescentAttack.", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "gen_model", "dis_model", "dis_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "img_to_classifier.to", "x_adv_to_classifier.to", "dis_model.eval", "iter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "numpy.random.random", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "dis_acml_loss.item", "fb.attacks.LinfProjectedGradientDescentAttack.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "densenet169().to.", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gen_model", "dis_model", "dis_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "utils.log.make_logger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "dis_acml_loss.item", "test_images.to", "test_labels.to", "x_adv_test_to_classifier.to", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "glob.glob", "glob.glob", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "accuracy.item", "accuracy_pos.item", "accuracy_neg.item", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "acc_best.item", "os.path.join", "glob.glob", "glob.glob", "str", "acc_best.item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.densenet.densenet169", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./adv_train_mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "local_rank", "=", "rank", "\n", "# adding classifier", "\n", "checkpoint_path", "=", "'/research/dept6/yjyang/SP2020/V2CIFAR10_Generation/cifar10_models/state_dicts'", "\n", "classifier", "=", "densenet169", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "classifier_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"densenet169.pt\"", ")", "\n", "classifier_ckpt", "=", "torch", ".", "load", "(", "classifier_path", ")", "\n", "classifier", ".", "load_state_dict", "(", "classifier_ckpt", ")", "\n", "classifier", ".", "eval", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mean", "=", "mean", "[", ":", ",", "None", ",", "None", "]", "\n", "std", "=", "std", "[", ":", ",", "None", ",", "None", "]", "\n", "bounds", "=", "(", "0", ",", "1", ")", "\n", "preprocessing", "=", "dict", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "axis", "=", "-", "3", ")", "\n", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "classifier", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "max_iter", "=", "100", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"pn_batchsize64_mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "64", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "d_checkpoint_dir", "=", "\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/advtrain_pn_old_model_batchsize64_acc=D-current-weights-step=26500.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "discriminator_checkpoint", "=", "torch", ".", "load", "(", "d_checkpoint_dir", ")", "\n", "\n", "\n", "Dis", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "D_optimizer", ".", "load_state_dict", "(", "discriminator_checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "", "", "step_dis", "=", "discriminator_checkpoint", "[", "'step'", "]", "\n", "\n", "\n", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "_", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./Advtrain_mydiscriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "acc_best", "=", "0", "\n", "data_id", "=", "0", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "data_id", "=", "data_id", "+", "1", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "\n", "# adding some noise to real_images", "\n", "#real_images = torch.empty_like(real_images, dtype=real_images.dtype).uniform_(-2/128.0, 2/128.0) + real_images", "\n", "img_to_classifier", "=", "(", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", "-", "mean", ")", "/", "std", "\n", "\n", "acc_of_classifier", "=", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "(", "real_images", "+", "1", ")", "/", "2", ",", "real_labels", ")", "\n", "#logger.info(\"data_id:{}\".format(data_id))", "\n", "#logger.info(\"acc of classifier is:{}\".format(acc_of_classifier))", "\n", "if", "data_id", "%", "2", "==", "0", ":", "# 50% training adversarial samples", "\n", "\t\t\t", "epsilon", "=", "np", ".", "random", ".", "random", "(", ")", "*", "0.5", "+", "0.005", "\n", "#print(epsilon)", "\n", "outputs", "=", "classifier", "(", "img_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier_ori", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "attack", "=", "fb", ".", "attacks", ".", "LinfProjectedGradientDescentAttack", "(", "steps", "=", "40", ")", "\n", "raw", ",", "x_adv", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "real_images", "+", "1", ")", "/", "2", ")", ",", "y_classifier_ori", ",", "epsilons", "=", "epsilon", ")", "\n", "#x_adv = torch.FloatTensor(x_adv).to(local_rank)", "\n", "#real_images = (torch.tensor(x_adv)*2.0 -1).to(local_rank)", "\n", "#print(x_adv.type())", "\n", "real_images", "=", "(", "x_adv", "*", "2", "-", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "", "else", ":", "\n", "# adding some noise to real_images", "\n", "\t\t\t", "if", "data_id", "%", "3", "==", "0", ":", "\n", "\t\t\t\t", "real_images", "=", "torch", ".", "empty_like", "(", "real_images", ",", "dtype", "=", "real_images", ".", "dtype", ")", ".", "uniform_", "(", "-", "2", "/", "128.0", ",", "2", "/", "128.0", ")", "+", "real_images", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "", "", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "\n", "if", "data_id", "%", "2", "==", "0", ":", "\n", "\t\t\t", "x_adv_to_classifier", "=", "(", "(", "x_adv", "-", "mean", ")", "/", "std", ")", "\n", "outputs", "=", "classifier", "(", "x_adv_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "real_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "\n", "#wrong_labels = y_classifier", "\n", "", "else", ":", "\n", "\t\t\t", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"advtrain_Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'advtrain_Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "acc_pos", "=", "0", "\n", "acc_neg", "=", "0", "\n", "length", "=", "0", "\n", "for", "data", "in", "test_iter", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\n", "#i = i + 1", "\n", "#try:", "\n", "#\ttest_images, test_labels = next(test_iter)", "\n", "#except StopIteration:", "\n", "#test_iter = iter(eval_dataloader)", "\n", "\n", "\t\t\t\t\t", "test_images", ",", "test_labels", "=", "data", "\n", "#length = test_labels.size(0) + length", "\n", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "#epsilon = np.random.random() * 0.5", "\n", "epsilon", "=", "0.03", "\n", "raw", ",", "x_adv_test", ",", "is_adv", "=", "attack", "(", "fmodel", ",", "(", "(", "test_images", "+", "1", ")", "/", "2", ")", ",", "test_labels", ",", "epsilons", "=", "epsilon", ")", "\n", "\n", "test_images", "=", "(", "x_adv_test", "*", "2.0", ")", "-", "1.0", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "#Int_Modi = random.randint(1, 9)", "\n", "#wrong_labels = ((test_labels + Int_Modi) % 10).to(local_rank)", "\n", "x_adv_test_to_classifier", "=", "(", "(", "x_adv_test", "-", "mean", ")", "/", "std", ")", "\n", "outputs_test", "=", "classifier", "(", "x_adv_test_to_classifier", ".", "to", "(", "local_rank", ")", ")", "\n", "y_classifier", "=", "torch", ".", "argmax", "(", "outputs_test", ",", "dim", "=", "1", ")", "\n", "wrong_labels", "=", "y_classifier", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "wrong_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ",", "test_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", "[", "torch", ".", "where", "(", "is_adv", "==", "1", ")", "]", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "length", "=", "length", "+", "len", "(", "dis_out_neg", ")", "\n", "\n", "acc_pos", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "acc_neg", "+=", "torch", ".", "sum", "(", "decision_neg", ")", "\n", "\n", "acc", "+=", "(", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_neg", ")", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy_pos", "=", "acc_pos", "/", "(", "length", "*", "1.0", ")", "\n", "accuracy_neg", "=", "acc_neg", "/", "(", "length", "*", "1.0", ")", "\n", "logger", ".", "info", "(", "\"length is:{}\"", ".", "format", "(", "length", ")", ")", "\n", "accuracy", "=", "acc", "/", "(", "length", "*", "2.0", ")", "\n", "logger", ".", "info", "(", "\"advtrain_accuracy is {accuracy}\"", ".", "format", "(", "accuracy", "=", "accuracy", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"advtrain_pos___acc is {accuracy_pos}\"", ".", "format", "(", "accuracy_pos", "=", "accuracy_pos", ".", "item", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"advtrain_neg___acc is {accuracy_neg}\"", ".", "format", "(", "accuracy_neg", "=", "accuracy_neg", ".", "item", "(", ")", ")", ")", "\n", "if", "accuracy", ">", "acc_best", ":", "\n", "\t\t\t\t\t", "acc_best", "=", "accuracy", "\n", "\n", "logger", ".", "info", "(", "\">>>>>>>>>>>>>>>advtrain_best_acc is {acc_best}\"", ".", "format", "(", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_best_batchsize64_acc=D-{when}-weights-step={step}acc={acc_best}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ",", "acc_best", "=", "acc_best", ".", "item", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save best model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"advtrain_pn_old_model_batchsize64_acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.advtrain_using_discriminator_as_dml_training.save": [[717, 731], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.loader.prepare_train_eval": [[32, 320], ["utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "__import__.Generator().to", "__import__.Discriminator().to", "__import__.Discriminator().to", "encoder.Encoder().to", "encoder.VAE().to", "utils.log.make_checkpoint_dir", "worker.make_worker", "print", "utils.misc.setup", "torch.cuda.set_device", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "int", "torch.utils.data.random_split", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.utils.data.distributed.DistributedSampler", "utils.log.make_logger.info", "utils.log.make_logger.info", "__import__.Generator().to", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.optim.SGD", "torch.optim.SGD", "torchlars.LARS", "torchlars.LARS", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "metrics.inception_network.InceptionV3().to", "metrics.prepare_inception_moments.prepare_inception_moments", "worker.make_worker.train", "worker.make_worker.evaluation", "worker.make_worker.save_images", "worker.make_worker.run_image_visualization", "worker.make_worker.run_nearest_neighbor", "worker.make_worker.run_linear_interpolation", "worker.make_worker.run_linear_interpolation", "worker.make_worker.run_frequency_analysis", "worker.make_worker.run_tsne", "__import__.Generator", "__import__.Discriminator", "__import__.Discriminator", "encoder.Encoder", "encoder.VAE", "utils.log.make_logger.info", "utils.biggan_utils.ema_DP_SyncBN", "utils.biggan_utils.ema", "utils.misc.count_parameters", "utils.misc.count_parameters", "utils.misc.count_parameters", "filter", "filter", "torch.optim.RMSprop", "torch.optim.RMSprop", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "utils.load_checkpoint.load_checkpoint", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.misc.toggle_grad", "torch.nn.parallel.DistributedDataParallel", "os.path.join", "len", "__import__.Generator", "convert_model().to.parameters", "convert_model().to.parameters", "filter", "filter", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "isinstance", "glob.glob", "torch.distributed.new_group", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "sync_batchnorm.batchnorm.convert_model().to", "sync_batchnorm.batchnorm.convert_model().to", "metrics.inception_network.InceptionV3", "torch.nn.DataParallel", "len", "len", "len", "len", "convert_model().to.parameters", "convert_model().to.parameters", "filter", "filter", "filter", "v.cuda", "os.path.join", "os.path.join", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "sync_batchnorm.batchnorm.convert_model().to", "convert_model().to.parameters", "convert_model().to.parameters", "torch.nn.DataParallel.parameters", "sync_batchnorm.batchnorm.convert_model", "sync_batchnorm.batchnorm.convert_model", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "range", "sync_batchnorm.batchnorm.convert_model"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.setup", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.prepare_inception_moments.prepare_inception_moments", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.evaluation", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.save_images", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_image_visualization", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_nearest_neighbor", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_linear_interpolation", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_linear_interpolation", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_frequency_analysis", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.run_tsne", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.count_parameters", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.count_parameters", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.count_parameters", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model"], ["def", "prepare_train_eval", "(", "local_rank", ",", "gpus_per_node", ",", "world_size", ",", "run_name", ",", "train_configs", ",", "model_configs", ",", "hdf5_path_train", ")", ":", "\n", "\t", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "prev_ada_p", ",", "step", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", ",", "mu", ",", "sigma", ",", "inception_model", "=", "None", ",", "0", ",", "0", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "run_name__", "=", "run_name", "\n", "if", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t", "global_rank", "=", "cfgs", ".", "nr", "*", "(", "gpus_per_node", ")", "+", "local_rank", "\n", "print", "(", "\"Use GPU: {} for training.\"", ".", "format", "(", "global_rank", ")", ")", "\n", "setup", "(", "global_rank", ",", "world_size", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t", "global_rank", "=", "local_rank", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./logs'", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "##### load dataset #####", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "resize_size", "=", "cfgs", ".", "img_size", ",", "\n", "hdf5_path", "=", "hdf5_path_train", ",", "random_flip", "=", "cfgs", ".", "random_flip_preprocessing", ")", "\n", "if", "cfgs", ".", "reduce_train_dataset", "<", "1.0", ":", "\n", "\t\t", "num_train", "=", "int", "(", "cfgs", ".", "reduce_train_dataset", "*", "len", "(", "train_dataset", ")", ")", "\n", "train_dataset", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "train_dataset", ",", "[", "num_train", ",", "len", "(", "train_dataset", ")", "-", "num_train", "]", ")", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets...'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "resize_size", "=", "cfgs", ".", "img_size", ",", "\n", "hdf5_path", "=", "None", ",", "random_flip", "=", "False", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "\n", "if", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "cfgs", ".", "batch_size", "=", "cfgs", ".", "batch_size", "//", "world_size", "\n", "", "else", ":", "\n", "\t\t", "train_sampler", "=", "None", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "##### build model #####", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Modules are located on models.{architecture}.'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "cfgs", ".", "mixed_precision", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "Dis", "=", "module", ".", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "cfgs", ".", "mixed_precision", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "d2Dis", "=", "module", ".", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "cfgs", ".", "mixed_precision", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Prepare EMA for G with decay of {}.'", ".", "format", "(", "cfgs", ".", "ema_decay", ")", ")", "\n", "Gen_copy", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "initialize", "=", "False", ",", "G_depth", "=", "cfgs", ".", "G_depth", ",", "mixed_precision", "=", "cfgs", ".", "mixed_precision", ")", ".", "to", "(", "local_rank", ")", "\n", "if", "not", "cfgs", ".", "distributed_data_parallel", "and", "world_size", ">", "1", "and", "cfgs", ".", "synchronized_bn", ":", "\n", "\t\t\t", "Gen_ema", "=", "ema_DP_SyncBN", "(", "Gen", ",", "Gen_copy", ",", "cfgs", ".", "ema_decay", ",", "cfgs", ".", "ema_start", ")", "\n", "", "else", ":", "\n", "\t\t\t", "Gen_ema", "=", "ema", "(", "Gen", ",", "Gen_copy", ",", "cfgs", ".", "ema_decay", ",", "cfgs", ".", "ema_start", ")", "\n", "", "", "else", ":", "\n", "\t\t", "Gen_copy", ",", "Gen_ema", "=", "None", ",", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "count_parameters", "(", "Gen", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "Gen", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "count_parameters", "(", "Dis", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "Dis", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "count_parameters", "(", "d2Dis", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "d2Dis", ")", "\n", "\n", "### define loss functions and optimizers", "\n", "G_loss", "=", "{", "'vanilla'", ":", "loss_dcgan_gen", ",", "'least_square'", ":", "loss_lsgan_gen", ",", "'hinge'", ":", "loss_hinge_gen", ",", "'wasserstein'", ":", "loss_wgan_gen", "}", "\n", "D_loss", "=", "{", "'vanilla'", ":", "loss_dcgan_dis", ",", "'least_square'", ":", "loss_lsgan_dis", ",", "'hinge'", ":", "loss_hinge_dis", ",", "'wasserstein'", ":", "loss_wgan_dis", "}", "\n", "d2D_loss", "=", "loss_hinge_dis", "\n", "\n", "if", "cfgs", ".", "optimizer", "==", "\"SGD\"", ":", "\n", "\t\t", "G_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "nesterov", "=", "cfgs", ".", "nesterov", ")", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "nesterov", "=", "cfgs", ".", "nesterov", ")", "\n", "", "elif", "cfgs", ".", "optimizer", "==", "\"RMSprop\"", ":", "\n", "\t\t", "G_optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "alpha", "=", "cfgs", ".", "alpha", ")", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "momentum", "=", "cfgs", ".", "momentum", ",", "alpha", "=", "cfgs", ".", "alpha", ")", "\n", "", "elif", "cfgs", ".", "optimizer", "==", "\"Adam\"", ":", "\n", "\t\t", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "d2D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "d2Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "cfgs", ".", "LARS_optimizer", ":", "\n", "\t\t", "G_optimizer", "=", "LARS", "(", "optimizer", "=", "G_optimizer", ",", "eps", "=", "1e-8", ",", "trust_coef", "=", "0.001", ")", "\n", "D_optimizer", "=", "LARS", "(", "optimizer", "=", "D_optimizer", ",", "eps", "=", "1e-8", ",", "trust_coef", "=", "0.001", ")", "\n", "\n", "##### load checkpoints if needed #####", "\n", "", "checkpoint_dir_save", "=", "make_checkpoint_dir", "(", "None", ",", "run_name", ")", "# the path used to save the models", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "\t\t", "when", "=", "\"current\"", "if", "cfgs", ".", "load_current", "is", "True", "else", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "d_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d2d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=2D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "d2d_checkpoint_dir", "=", "\"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/cifar10_new_src/checkpoints/diff_best_batchsize64_acc=D-current-weights-step=139500acc=0.9378999471664429.pth\"", "\n", "\n", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "\n", "Dis", ",", "D_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", "=", "load_checkpoint", "(", "Dis", ",", "D_optimizer", ",", "d_checkpoint_dir", ",", "metric", "=", "True", ")", "\n", "#d2Dis, d2D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "#\tload_checkpoint(2Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "d2discriminator_checkpoint", "=", "torch", ".", "load", "(", "d2d_checkpoint_dir", ")", "\n", "\n", "\n", "d2Dis", ".", "load_state_dict", "(", "d2discriminator_checkpoint", "[", "'state_dict'", "]", ")", "\n", "d2D_optimizer", ".", "load_state_dict", "(", "d2discriminator_checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "for", "state", "in", "d2D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t", "g_ema_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "Gen_copy", "=", "load_checkpoint", "(", "Gen_copy", ",", "None", ",", "g_ema_checkpoint_dir", ",", "ema", "=", "True", ")", "\n", "Gen_ema", ".", "source", ",", "Gen_ema", ".", "target", "=", "Gen", ",", "Gen_copy", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./logs'", ",", "run_name__", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "if", "cfgs", ".", "train_configs", "[", "'train'", "]", ":", "\n", "\t\t\t", "assert", "cfgs", ".", "seed", "==", "trained_seed", ",", "\"Seed for sampling random numbers should be same!\"", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Discriminator checkpoint is {}'", ".", "format", "(", "d_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'2Discriminator checkpoint is {}'", ".", "format", "(", "d2d_checkpoint_dir", ")", ")", "\n", "\n", "if", "cfgs", ".", "freeze_layers", ">", "-", "1", ":", "\n", "\t\t\t", "prev_ada_p", ",", "step", ",", "best_step", ",", "best_fid", ",", "best_fid_checkpoint_path", "=", "None", ",", "0", ",", "0", ",", "None", ",", "None", "\n", "\n", "\n", "##### wrap models with DP and convert BN to Sync BN #####", "\n", "", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "if", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t\t", "if", "cfgs", ".", "synchronized_bn", ":", "\n", "\t\t\t\t", "process_group", "=", "torch", ".", "distributed", ".", "new_group", "(", "[", "w", "for", "w", "in", "range", "(", "world_size", ")", "]", ")", "\n", "Gen", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Gen", ",", "process_group", ")", "\n", "Dis", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Dis", ",", "process_group", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t\t", "Gen_copy", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Gen_copy", ",", "process_group", ")", "\n", "\n", "", "", "Gen", "=", "DDP", "(", "Gen", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "Dis", "=", "DDP", "(", "Dis", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t", "Gen_copy", "=", "DDP", "(", "Gen_copy", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "d2Dis", "=", "DataParallel", "(", "d2Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t", "Gen_copy", "=", "DataParallel", "(", "Gen_copy", ",", "output_device", "=", "local_rank", ")", "\n", "\n", "", "if", "cfgs", ".", "synchronized_bn", ":", "\n", "\t\t\t\t", "Gen", "=", "convert_model", "(", "Gen", ")", ".", "to", "(", "local_rank", ")", "\n", "Dis", "=", "convert_model", "(", "Dis", ")", ".", "to", "(", "local_rank", ")", "\n", "if", "cfgs", ".", "ema", ":", "\n", "\t\t\t\t\t", "Gen_copy", "=", "convert_model", "(", "Gen_copy", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "##### load the inception network and prepare first/secend moments for calculating FID #####", "\n", "", "", "", "", "if", "cfgs", ".", "eval", ":", "\n", "\t\t", "inception_model", "=", "InceptionV3", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "if", "world_size", ">", "1", "and", "cfgs", ".", "distributed_data_parallel", ":", "\n", "\t\t\t", "toggle_grad", "(", "inception_model", ",", "on", "=", "True", ")", "\n", "inception_model", "=", "DDP", "(", "inception_model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "broadcast_buffers", "=", "False", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "elif", "world_size", ">", "1", "and", "cfgs", ".", "distributed_data_parallel", "is", "False", ":", "\n", "\t\t\t", "inception_model", "=", "DataParallel", "(", "inception_model", ",", "output_device", "=", "local_rank", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pass", "\n", "\n", "", "mu", ",", "sigma", "=", "prepare_inception_moments", "(", "dataloader", "=", "eval_dataloader", ",", "\n", "generator", "=", "Gen", ",", "\n", "eval_mode", "=", "cfgs", ".", "eval_type", ",", "\n", "inception_model", "=", "inception_model", ",", "\n", "splits", "=", "1", ",", "\n", "run_name", "=", "run_name__", ",", "\n", "logger", "=", "logger", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "", "worker", "=", "make_worker", "(", "\n", "cfgs", "=", "cfgs", ",", "\n", "run_name", "=", "run_name", ",", "\n", "best_step", "=", "50000", ",", "#best_step,", "\n", "logger", "=", "logger", ",", "\n", "writer", "=", "writer", ",", "\n", "n_gpus", "=", "world_size", ",", "\n", "gen_model", "=", "Gen", ",", "\n", "dis_model", "=", "Dis", ",", "\n", "d2dis_model", "=", "d2Dis", ",", "\n", "inception_model", "=", "inception_model", ",", "\n", "Gen_copy", "=", "Gen_copy", ",", "\n", "Gen_ema", "=", "Gen_ema", ",", "\n", "train_dataset", "=", "train_dataset", ",", "\n", "eval_dataset", "=", "eval_dataset", ",", "\n", "train_dataloader", "=", "train_dataloader", ",", "\n", "eval_dataloader", "=", "eval_dataloader", ",", "\n", "G_optimizer", "=", "G_optimizer", ",", "\n", "D_optimizer", "=", "D_optimizer", ",", "\n", "d2D_optimizer", "=", "d2D_optimizer", ",", "\n", "G_loss", "=", "G_loss", "[", "cfgs", ".", "adv_loss", "]", ",", "\n", "D_loss", "=", "D_loss", "[", "cfgs", ".", "adv_loss", "]", ",", "\n", "d2D_loss", "=", "d2D_loss", ",", "\n", "prev_ada_p", "=", "prev_ada_p", ",", "\n", "global_rank", "=", "global_rank", ",", "\n", "local_rank", "=", "local_rank", ",", "\n", "bn_stat_OnTheFly", "=", "cfgs", ".", "bn_stat_OnTheFly", ",", "\n", "checkpoint_dir", "=", "checkpoint_dir_save", ",", "#notice", "\n", "mu", "=", "mu", ",", "\n", "sigma", "=", "sigma", ",", "\n", "best_fid", "=", "best_fid", ",", "\n", "best_fid_checkpoint_path", "=", "'./checkpoints/fixed_d2D'", ",", "#best_fid_checkpoint_path,", "\n", "\n", "encoder", "=", "encoder", ",", "\n", "vae", "=", "vae", ",", "\n", "opt_encoder", "=", "opt_encoder", ",", "\n", "\n", ")", "\n", "\n", "if", "cfgs", ".", "train_configs", "[", "'train'", "]", ":", "\n", "\t\t", "step", "=", "worker", ".", "train", "(", "current_step", "=", "step", ",", "total_step", "=", "cfgs", ".", "total_step", ")", "\n", "\n", "", "if", "cfgs", ".", "eval", ":", "\n", "\t\t", "is_save", "=", "worker", ".", "evaluation", "(", "step", "=", "step", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "save_images", ":", "\n", "\t\t", "worker", ".", "save_images", "(", "is_generate", "=", "True", ",", "png", "=", "True", ",", "npz", "=", "True", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "image_visualization", ":", "\n", "\t\t", "worker", ".", "run_image_visualization", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "k_nearest_neighbor", ":", "\n", "\t\t", "worker", ".", "run_nearest_neighbor", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "interpolation", ":", "\n", "\t\t", "assert", "cfgs", ".", "architecture", "in", "[", "\"big_resnet\"", ",", "\"biggan_deep\"", "]", ",", "\"StudioGAN does not support interpolation analysis except for biggan and biggan_deep.\"", "\n", "worker", ".", "run_linear_interpolation", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "fix_z", "=", "True", ",", "fix_y", "=", "False", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "worker", ".", "run_linear_interpolation", "(", "nrow", "=", "cfgs", ".", "nrow", ",", "ncol", "=", "cfgs", ".", "ncol", ",", "fix_z", "=", "False", ",", "fix_y", "=", "True", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "frequency_analysis", ":", "\n", "\t\t", "worker", ".", "run_frequency_analysis", "(", "num_images", "=", "len", "(", "train_dataset", ")", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "\n", "", "if", "cfgs", ".", "tsne_analysis", ":", "\n", "\t\t", "worker", ".", "run_tsne", "(", "dataloader", "=", "eval_dataloader", ",", "\n", "standing_statistics", "=", "cfgs", ".", "standing_statistics", ",", "standing_step", "=", "cfgs", ".", "standing_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.DiscOptBlock.__init__": [[101, 129], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ")", ":", "\n", "\t\t", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "\n", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.DiscOptBlock.forward": [[131, 147], ["train_discriminator.DiscOptBlock.conv2d1", "train_discriminator.DiscOptBlock.activation", "train_discriminator.DiscOptBlock.conv2d2", "train_discriminator.DiscOptBlock.average_pooling", "train_discriminator.DiscOptBlock.average_pooling", "train_discriminator.DiscOptBlock.conv2d0", "train_discriminator.DiscOptBlock.bn1", "train_discriminator.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.DiscBlock.__init__": [[150, 187], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snconv2d", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "utils.model_ops.batchnorm_2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snconv2d", "utils.model_ops.conv2d", "utils.model_ops.batchnorm_2d", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snconv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.batchnorm_2d"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "d_spectral_norm", ",", "activation_fn", ",", "downsample", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_spectral_norm", "=", "d_spectral_norm", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "\t\t\t", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "snconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "snconv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "conv2d0", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "conv2d1", "=", "conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "\t\t\t\t", "self", ".", "bn0", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "", "self", ".", "bn1", "=", "batchnorm_2d", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "batchnorm_2d", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.DiscBlock.forward": [[189, 212], ["train_discriminator.DiscBlock.activation", "train_discriminator.DiscBlock.conv2d1", "train_discriminator.DiscBlock.activation", "train_discriminator.DiscBlock.conv2d2", "train_discriminator.DiscBlock.bn1", "train_discriminator.DiscBlock.bn2", "train_discriminator.DiscBlock.average_pooling", "train_discriminator.DiscBlock.conv2d0", "train_discriminator.DiscBlock.bn0", "train_discriminator.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x0", "=", "x", "\n", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "\t\t\t", "if", "self", ".", "d_spectral_norm", "is", "False", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "\t\t\t\t", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.Discriminator.__init__": [[216, 306], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.model_ops.snlinear", "utils.model_ops.linear", "utils.model_ops.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "utils.model_ops.snlinear", "utils.model_ops.sn_embedding", "utils.model_ops.linear", "utils.model_ops.embedding", "train_discriminator.DiscOptBlock", "train_discriminator.DiscBlock", "utils.model_ops.Self_Attn", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "utils.model_ops.snlinear", "utils.model_ops.linear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.init_weights", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.sn_embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.snlinear", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.linear"], ["def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "d_spectral_norm", ",", "attention", ",", "attention_after_nth_dis_block", ",", "activation_fn", ",", "conditional_strategy", ",", "\n", "hypersphere_dim", ",", "num_classes", ",", "nonlinear_embed", ",", "normalize_embed", ",", "initialize", ",", "D_depth", ",", "mixed_precision", ")", ":", "\n", "\t\t", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "}", "\n", "\n", "d_down", "=", "{", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "}", "\n", "\n", "self", ".", "nonlinear_embed", "=", "nonlinear_embed", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "conditional_strategy", "=", "conditional_strategy", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "\t\t\t", "if", "index", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ")", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "d_spectral_norm", "=", "d_spectral_norm", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "==", "attention_after_nth_dis_block", "and", "attention", "is", "True", ":", "\n", "\t\t\t\t", "self", ".", "blocks", "+=", "[", "[", "Self_Attn", "(", "self", ".", "out_dims", "[", "index", "]", ",", "d_spectral_norm", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "if", "activation_fn", "==", "\"ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"ELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_fn", "==", "\"GELU\"", ":", "\n", "\t\t\t", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "if", "d_spectral_norm", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "snlinear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "sn_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "snlinear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "linear1", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ")", "\n", "if", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "self", ".", "linear2", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "self", ".", "linear3", "=", "linear", "(", "in_features", "=", "hypersphere_dim", ",", "out_features", "=", "hypersphere_dim", ")", "\n", "", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "hypersphere_dim", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "self", ".", "embedding", "=", "embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "self", ".", "linear4", "=", "linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pass", "\n", "\n", "# Weight init", "\n", "", "", "if", "initialize", "is", "not", "False", ":", "\n", "\t\t\t", "init_weights", "(", "self", ".", "modules", ",", "initialize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.Discriminator.forward": [[308, 344], ["enumerate", "train_discriminator.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.misc.dummy_context_mgr", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "block", "train_discriminator.Discriminator.linear1", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "train_discriminator.Discriminator.embedding", "train_discriminator.Discriminator.linear2", "train_discriminator.Discriminator.linear1", "train_discriminator.Discriminator.linear3", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "train_discriminator.Discriminator.activation", "train_discriminator.Discriminator.linear1", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "train_discriminator.Discriminator.linear4", "train_discriminator.Discriminator.embedding", "train_discriminator.Discriminator.linear1"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.OrthogonalPGD.contraNetattack.normalize", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "evaluation", "=", "False", ")", ":", "\n", "\t\t", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "is", "True", "and", "evaluation", "is", "False", "else", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "\t\t\t", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\t\t\t\t", "for", "block", "in", "blocklist", ":", "\n", "\t\t\t\t\t", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "self", ".", "conditional_strategy", "==", "'no'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "return", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "in", "[", "'ContraGAN'", ",", "'Proxy_NCA_GAN'", ",", "'NT_Xent_GAN'", "]", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "cls_embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "if", "self", ".", "nonlinear_embed", ":", "\n", "\t\t\t\t\t", "cls_embed", "=", "self", ".", "linear3", "(", "self", ".", "activation", "(", "cls_embed", ")", ")", "\n", "", "if", "self", ".", "normalize_embed", ":", "\n", "\t\t\t\t\t", "cls_proxy", "=", "F", ".", "normalize", "(", "cls_proxy", ",", "dim", "=", "1", ")", "\n", "cls_embed", "=", "F", ".", "normalize", "(", "cls_embed", ",", "dim", "=", "1", ")", "\n", "", "return", "cls_proxy", ",", "cls_embed", ",", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ProjGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "proj", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "return", "proj", "+", "authen_output", "\n", "\n", "", "elif", "self", ".", "conditional_strategy", "==", "'ACGAN'", ":", "\n", "\t\t\t\t", "authen_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "cls_output", "=", "self", ".", "linear4", "(", "h", ")", "\n", "return", "cls_output", ",", "authen_output", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.main": [[346, 602], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.misc.fix_all_seed", "utils.misc.dict2clsattr", "data_utils.load_dataset.LoadDataset", "data_utils.load_dataset.LoadDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "__import__", "Discriminator().to", "__import__.Generator().to", "encoder.Encoder().to", "encoder.VAE().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "gen_model.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "dis_model.train", "iter", "datetime.datetime.now", "vars", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "warnings.warn", "utils.log.make_run_name", "tensorboardX.SummaryWriter", "utils.log.make_logger", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "filter", "filter", "utils.log.make_checkpoint_dir", "utils.log.make_checkpoint_dir", "torch.optim.Adam.state.values", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "utils.load_checkpoint.load_checkpoint", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.log.make_logger.info", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "dis_acml_loss.backward", "torch.optim.Adam.step", "open", "json.load", "train_discriminator.Discriminator", "__import__.Generator", "encoder.Encoder", "encoder.VAE", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.exists", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "state.items", "utils.log.make_logger", "tensorboardX.SummaryWriter", "utils.log.make_logger.info", "utils.log.make_logger.info", "utils.log.make_logger.info", "next", "real_images.to", "real_labels.to", "D_loss", "utils.log.make_logger.info", "writer.add_scalars", "os.path.join", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "isinstance", "iter", "next", "dis_model.eval", "iter", "range", "print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "len", "len", "v.cuda", "os.path.join", "dis_acml_loss.item", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "gen_model", "random.randint", "random.randint", "random.randint", "gen_model", "dis_model", "dis_model", "isinstance", "isinstance", "dis.state_dict", "torch.optim.Adam.state_dict", "len", "utils.misc.find_and_remove", "utils.log.make_logger.info", "train_configs[].split", "dis_acml_loss.item", "next", "test_images.to", "test_labels.to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "glob.glob", "glob.glob", "iter", "next", "os.path.join", "glob.glob", "glob.glob", "str", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.fix_all_seed", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.dict2clsattr", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_run_name", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_checkpoint_dir", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.save_checkpoints.load_checkpoint", "home.repos.pwc.inspect_result.cure-lab_contranet.ada_op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.log.make_logger", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'./configs/CIFAR10/DiffAugGAN(P).json'", ")", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--nodes'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_folder'", ",", "default", "=", "\"./checkpoints\"", ")", "\n", "parser", ".", "add_argument", "(", "'--load_current'", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_output_path'", ",", "default", "=", "\"./mydiscriminator_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--train'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--eval'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'control log interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'control evaluation and save interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_type'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'[train/valid/test]'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "if", "args", ".", "config_path", "is", "not", "None", ":", "\n", "\t\t", "with", "open", "(", "args", ".", "config_path", ")", "as", "f", ":", "\n", "\t\t\t", "model_configs", "=", "json", ".", "load", "(", "f", ")", "\n", "", "train_configs", "=", "vars", "(", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n", "\n", "", "fix_all_seed", "(", "train_configs", "[", "'seed'", "]", ")", "\n", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "train_configs", "[", "'nodes'", "]", "\n", "if", "world_size", "==", "1", ":", "\n", "\t\t", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "run_name", "=", "\"mydiscriminator_\"", "+", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "framework", "=", "train_configs", "[", "'config_path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "phase", "=", "'train'", ")", "\n", "#print(run_name)", "\n", "\n", "cfgs", "=", "dict2clsattr", "(", "train_configs", ",", "model_configs", ")", "\n", "step", "=", "0", "\n", "best_step", "=", "0", "\n", "global_rank", "=", "local_rank", "=", "rank", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "\"./mydiscriminator_logs\"", ",", "run_name", ")", ")", "if", "local_rank", "==", "0", "else", "None", "\n", "if", "local_rank", "==", "0", ":", "\n", "\t\t", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "logger", ".", "info", "(", "'Run name : {run_name}'", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "logger", ".", "info", "(", "train_configs", ")", "\n", "logger", ".", "info", "(", "model_configs", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", "=", "None", "\n", "\n", "", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load train datasets...'", ")", "\n", "train_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Train dataset size : {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Load {mode} datasets ....'", ".", "format", "(", "mode", "=", "cfgs", ".", "eval_type", ")", ")", "\n", "\n", "eval_mode", "=", "True", "if", "cfgs", ".", "eval_type", "==", "'train'", "else", "False", "\n", "\n", "eval_dataset", "=", "LoadDataset", "(", "cfgs", ".", "dataset_name", ",", "cfgs", ".", "data_path", ",", "train", "=", "eval_mode", ",", "download", "=", "True", ",", "\n", "resize_size", "=", "cfgs", ".", "img_size", ",", "hdf5_path", "=", "None", ",", "random_flip", "=", "True", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Eval dataset size: {dataset_size}'", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "train_sampler", "=", "None", "\n", "cfgs", ".", "batch_size", "=", "320", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "batch_size", "=", "cfgs", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Build model...'", ")", "\n", "module", "=", "__import__", "(", "'models.{architecture}'", ".", "format", "(", "architecture", "=", "cfgs", ".", "architecture", ")", ",", "fromlist", "=", "[", "'something'", "]", ")", "\n", "Dis", "=", "Discriminator", "(", "cfgs", ".", "img_size", ",", "cfgs", ".", "d_conv_dim", ",", "cfgs", ".", "d_spectral_norm", ",", "cfgs", ".", "attention", ",", "cfgs", ".", "attention_after_nth_dis_block", ",", "\n", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "hypersphere_dim", ",", "cfgs", ".", "num_classes", ",", "cfgs", ".", "nonlinear_embed", ",", "\n", "cfgs", ".", "normalize_embed", ",", "cfgs", ".", "d_init", ",", "cfgs", ".", "D_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "Gen", "=", "module", ".", "Generator", "(", "cfgs", ".", "z_dim", ",", "cfgs", ".", "shared_dim", ",", "cfgs", ".", "img_size", ",", "cfgs", ".", "g_conv_dim", ",", "cfgs", ".", "g_spectral_norm", ",", "cfgs", ".", "attention", ",", "\n", "cfgs", ".", "attention_after_nth_gen_block", ",", "cfgs", ".", "activation_fn", ",", "cfgs", ".", "conditional_strategy", ",", "cfgs", ".", "num_classes", ",", "\n", "cfgs", ".", "g_init", ",", "cfgs", ".", "G_depth", ",", "False", ")", ".", "to", "(", "local_rank", ")", "\n", "encoder", "=", "encoder_source", ".", "Encoder", "(", "isize", "=", "32", ",", "nz", "=", "80", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ".", "to", "(", "local_rank", ")", "\n", "vae", "=", "encoder_source", ".", "VAE", "(", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "D_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Dis", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "d_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "G_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "Gen", ".", "parameters", "(", ")", ")", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "opt_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "encoder", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "vae", ".", "parameters", "(", ")", "}", "]", ",", "cfgs", ".", "g_lr", ",", "[", "cfgs", ".", "beta1", ",", "cfgs", ".", "beta2", "]", ",", "eps", "=", "1e-6", ")", "\n", "\n", "if", "cfgs", ".", "checkpoint_folder", "is", "None", ":", "\n", "\t\t", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "", "else", ":", "\n", "#when = \"current\" if cfgs.load_current is True else \"best\"", "\n", "\t\t", "when", "=", "\"best\"", "\n", "if", "not", "exists", "(", "abspath", "(", "cfgs", ".", "checkpoint_folder", ")", ")", ":", "\n", "\t\t\t", "raise", "NotADirectoryError", "\n", "", "checkpoint_dir", "=", "make_checkpoint_dir", "(", "cfgs", ".", "checkpoint_folder", ",", "run_name", ")", "\n", "# g_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=G-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# d_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# e_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=E-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "# v_checkpoint_dir = glob.glob(join(checkpoint_dir,\"model=V-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "g_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#d_checkpoint_dir = glob.glob(join(cfgs.checkpoint_folder,\"model=D-{when}-weights-step*.pth\".format(when=when)))[0]", "\n", "#d_checkpoint_dir = \"/research/dept6/yjyang/SP2020/PyTorch-StudioGAN/src/checkpoints/model=D-current-weights-step=37500.pth\"", "\n", "e_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=E-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "v_checkpoint_dir", "=", "glob", ".", "glob", "(", "join", "(", "cfgs", ".", "checkpoint_folder", ",", "\"model=V-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "#discriminator_checkpoint = torch.load(d_checkpoint_dir)", "\n", "\n", "\n", "#Dis.load_state_dict(discriminator_checkpoint['state_dict'])", "\n", "#D_optimizer.load_state_dict(discriminator_checkpoint['optimizer'])", "\n", "\n", "for", "state", "in", "D_optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "\t\t\t", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "\t\t\t\t\t", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "\n", "#step_dis = discriminator_checkpoint['step']", "\n", "\n", "\n", "\n", "\n", "", "", "", "Gen", ",", "G_optimizer", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "Gen", ",", "G_optimizer", ",", "g_checkpoint_dir", ")", "\n", "# Dis, D_optimizer, trained_seed, run_name, step, prev_ada_p, best_step, best_fid, best_fid_checkpoint_path =\\", "\n", "# \t load_checkpoint(Dis, D_optimizer, d_checkpoint_dir, metric=True)", "\n", "encoder", ",", "opt_encoder", ",", "trained_seed", ",", "run_name", ",", "step", ",", "prev_ada_p", "=", "load_checkpoint", "(", "encoder", ",", "opt_encoder", ",", "e_checkpoint_dir", ")", "\n", "vae", "=", "load_checkpoint", "(", "vae", ",", "opt_encoder", ",", "v_checkpoint_dir", ")", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", "=", "make_logger", "(", "run_name", ",", "None", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "join", "(", "'./train_discriminator_logs'", ",", "run_name", ")", ")", "if", "global_rank", "==", "0", "else", "None", "\n", "# if cfgs.train_configs['train']:", "\n", "# \tassert cfgs.seed == trained_seed, \"Seed for sampling random numbers should be same!\"", "\n", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'Generator checkpoint is {}'", ".", "format", "(", "g_checkpoint_dir", ")", ")", "\n", "#if local_rank == 0: logger.info('Discriminator checkpoint is {}'.format(d_checkpoint_dir))", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'encoder checkpoint is {}'", ".", "format", "(", "e_checkpoint_dir", ")", ")", "\n", "if", "local_rank", "==", "0", ":", "logger", ".", "info", "(", "'vae checkpoint is {}'", ".", "format", "(", "v_checkpoint_dir", ")", ")", "\n", "\n", "\n", "", "if", "world_size", ">", "1", ":", "\n", "\t\t", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "local_rank", ")", "\n", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "local_rank", ")", "\n", "encoder", "=", "DataParallel", "(", "encoder", ",", "output_device", "=", "local_rank", ")", "\n", "vae", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vae", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "", "gen_model", "=", "Gen", "\n", "dis_model", "=", "Dis", "\n", "D_loss", "=", "loss_hinge_dis", "\n", "gen_model", ".", "eval", "(", ")", "\n", "vae", ".", "eval", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "dis_model", ".", "train", "(", ")", "\n", "total_step", "=", "200000", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "'Start training....'", ")", "\n", "step_count", "=", "0", "#step_dis", "\n", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "while", "step_count", "<=", "total_step", ":", "\n", "\t\t", "D_optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "\t\t\t", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t", "train_iter", "=", "iter", "(", "train_dataloader", ")", "\n", "real_images", ",", "real_labels", "=", "next", "(", "train_iter", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "local_rank", ")", ",", "real_labels", ".", "to", "(", "local_rank", ")", "\n", "#real_images = DiffAugment(real_images, policy=policy)", "\n", "latent_i_real", "=", "encoder", "(", "real_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_real", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "real_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "real_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "\n", "# here changed to use generation alone to train the discriminator ", "\n", "\n", "difference_pos", "=", "fake_images_correct_labels", "\n", "difference_neg", "=", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "real_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "dis_acml_loss", "=", "D_loss", "(", "dis_out_pos", ",", "dis_out_neg", ")", "*", "1.0", "\n", "\n", "dis_acml_loss", ".", "backward", "(", ")", "\n", "D_optimizer", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "if", "step_count", "%", "100", "==", "0", "and", "global_rank", "==", "0", ":", "\n", "# print(dis_acml_loss.item())", "\n", "# log_message = LOG_FORMAT.format(step=step_count,", "\n", "# \t\t\t\t\t\t\t\tprogress=step_count/total_step,", "\n", "# \t\t\t\t\t\t\t\telapsed=elapsed_time(start_time),", "\n", "# \t\t\t\t\t\t\t\ttemperature=0,", "\n", "# \t\t\t\t\t\t\t\tada_p='No',", "\n", "# \t\t\t\t\t\t\t\tdis_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\tgen_loss=dis_acml_loss.item(),", "\n", "# \t\t\t\t\t\t\t\t)", "\n", "\t\t\t", "logger", ".", "info", "(", "\"Dis_loss is {dis_loss_is}\"", ".", "format", "(", "dis_loss_is", "=", "dis_acml_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "writer", ".", "add_scalars", "(", "'Losses'", ",", "{", "'discriminator'", ":", "dis_acml_loss", ".", "item", "(", ")", "}", ",", "step_count", ")", "\n", "", "if", "step_count", "%", "500", "==", "0", "or", "step_count", "==", "total_step", ":", "\n", "\t\t\t", "if", "global_rank", "==", "0", ":", "\n", "\t\t\t\t", "when", "=", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "i", "=", "0", "\n", "sum_pos", "=", "0", "\n", "sum_neg", "=", "0", "\n", "acc", "=", "0", "\n", "length", "=", "0", "\n", "for", "i", "in", "range", "(", "30", ")", ":", "\n", "#print(\"{i} is :\".format(i=i))", "\n", "\t\t\t\t\t", "i", "=", "i", "+", "1", "\n", "try", ":", "\n", "\t\t\t\t\t\t", "test_images", ",", "test_labels", "=", "next", "(", "test_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "\t\t\t\t\t\t", "test_iter", "=", "iter", "(", "eval_dataloader", ")", "\n", "length", "=", "len", "(", "test_iter", ")", "+", "length", "\n", "test_images", ",", "test_labels", "=", "next", "(", "test_iter", ")", "\n", "", "test_images", ",", "test_labels", "=", "test_images", ".", "to", "(", "local_rank", ")", ",", "test_labels", ".", "to", "(", "local_rank", ")", "\n", "\n", "latent_i_test", "=", "encoder", "(", "test_images", ")", "\n", "z_mean_real", ",", "z_log_var_real", ",", "zs_real", "=", "vae", "(", "latent_i_test", ")", "\n", "\n", "fake_images_correct_labels", "=", "gen_model", "(", "zs_real", ",", "test_labels", ")", "\n", "Int_Modi", "=", "random", ".", "randint", "(", "1", ",", "9", ")", "\n", "wrong_labels", "=", "(", "(", "test_labels", "+", "Int_Modi", ")", "%", "10", ")", ".", "to", "(", "local_rank", ")", "\n", "\n", "fake_images_wrong_labels", "=", "gen_model", "(", "zs_real", ",", "wrong_labels", ")", "\n", "difference_pos", "=", "test_images", "-", "fake_images_correct_labels", "\n", "difference_neg", "=", "test_images", "-", "fake_images_wrong_labels", "\n", "dis_out_pos", "=", "dis_model", "(", "difference_pos", ",", "test_labels", ")", "\n", "dis_out_neg", "=", "dis_model", "(", "difference_neg", ",", "wrong_labels", ")", "\n", "decision_pos", "=", "dis_out_pos", ">", "0", "\n", "#print(decision_pos)", "\n", "decision_neg", "=", "dis_out_neg", "<", "0", "\n", "\n", "acc", "+=", "torch", ".", "sum", "(", "decision_pos", ")", "+", "torch", ".", "sum", "(", "decision_pos", ")", "\n", "#print(torch.sum(decision_pos))", "\n", "", "accuracy", "=", "acc", "/", "(", "320.0", "*", "30", "*", "2", ")", "\n", "print", "(", "\"accuracy of discriminator is:\"", ",", "accuracy", ")", "\n", "\n", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t\t\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"acc=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save": [[608, 622], ["dis_model.eval", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dis_model.train", "isinstance", "isinstance", "dis.state_dict", "D_optimizer.state_dict", "len", "utils.misc.find_and_remove", "logger.info", "glob.glob", "glob.glob", "os.path.join", "glob.glob", "glob.glob", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.train_discriminator.save", "home.repos.pwc.inspect_result.cure-lab_contranet.cifar10_ContraNet.adding_noise_worker.make_worker.train", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.find_and_remove"], ["", "", "", "", "def", "save", "(", "step", ",", "is_best", ")", ":", "\n", "\t", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "dis_model", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "dis_model", ",", "DataParallel", ")", "or", "isinstance", "(", "dis_model", ",", "DistributedDataParallel", ")", ":", "\n", "\t\t", "dis", "=", "dis_model", ".", "module", "\n", "", "else", ":", "\n", "\t\t", "dis", "=", "dis_model", "\n", "", "d_states", "=", "{", "'seed'", ":", "seed", ",", "'run_name'", ":", "run_name", ",", "'step'", ":", "step_count", ",", "'state_dict'", ":", "dis", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "D_optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "len", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", ")", ">=", "1", ":", "\n", "\t\t", "find_and_remove", "(", "glob", ".", "glob", "(", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", ")", "\n", "", "d_checkpoint_output_path", "=", "join", "(", "checkpoint_dir", ",", "\"model=D-{when}-weights-step={step}.pth\"", ".", "format", "(", "when", "=", "when", ",", "step", "=", "str", "(", "step_count", ")", ")", ")", "\n", "torch", ".", "save", "(", "d_states", ",", "d_checkpoint_output_path", ")", "\n", "if", "global_rank", "==", "0", ":", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "d_checkpoint_dir", ")", ")", "\n", "dis_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.RandomCropLongEdge.__call__": [[29, 37], ["torchvision.functional.crop", "min", "min", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["        ", "size", "=", "(", "min", "(", "img", ".", "size", ")", ",", "min", "(", "img", ".", "size", ")", ")", "\n", "# Only step forward along this edge if it's the long edge", "\n", "i", "=", "(", "0", "if", "size", "[", "0", "]", "==", "img", ".", "size", "[", "0", "]", "\n", "else", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "img", ".", "size", "[", "0", "]", "-", "size", "[", "0", "]", ")", ")", "\n", "j", "=", "(", "0", "if", "size", "[", "1", "]", "==", "img", ".", "size", "[", "1", "]", "\n", "else", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "img", ".", "size", "[", "1", "]", "-", "size", "[", "1", "]", ")", ")", "\n", "return", "transforms", ".", "functional", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.RandomCropLongEdge.__repr__": [[38, 40], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.CenterCropLongEdge.__call__": [[48, 50], ["torchvision.functional.center_crop", "min"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "transforms", ".", "functional", ".", "center_crop", "(", "img", ",", "min", "(", "img", ".", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.CenterCropLongEdge.__repr__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.LoadDataset.__init__": [[56, 86], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "load_dataset.LoadDataset.load_dataset", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToPILImage", "torchvision.RandomHorizontalFlip", "load_dataset.RandomCropLongEdge", "torchvision.Resize", "load_dataset.CenterCropLongEdge", "torchvision.Resize"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.LoadDataset.load_dataset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "dataset_name", ",", "data_path", ",", "train", ",", "download", ",", "resize_size", ",", "\n", "hdf5_path", "=", "None", ",", "random_flip", "=", "False", ",", "norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "LoadDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "download", "=", "download", "\n", "self", ".", "resize_size", "=", "resize_size", "\n", "self", ".", "hdf5_path", "=", "hdf5_path", "\n", "self", ".", "random_flip", "=", "random_flip", "\n", "self", ".", "norm_mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "self", ".", "norm_std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "if", "self", ".", "hdf5_path", "is", "None", ":", "\n", "            ", "if", "self", ".", "dataset_name", "in", "[", "'cifar10'", ",", "'cifar100'", "]", ":", "\n", "                ", "self", ".", "transforms", "=", "[", "]", "\n", "", "elif", "self", ".", "dataset_name", "in", "[", "\"tiny_imagenet\"", ",", "'MNIST'", "]", ":", "\n", "                ", "self", ".", "transforms", "=", "[", "transforms", ".", "Resize", "(", "self", ".", "resize_size", ")", "]", "\n", "", "elif", "self", ".", "dataset_name", "in", "[", "'imagenet'", ",", "'gtsrb'", ",", "'custom'", "]", ":", "\n", "                ", "if", "train", ":", "\n", "                    ", "self", ".", "transforms", "=", "[", "\n", "RandomCropLongEdge", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "self", ".", "resize_size", ")", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "transforms", "=", "[", "\n", "CenterCropLongEdge", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "self", ".", "resize_size", ")", "]", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "transforms", "=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.LoadDataset.load_dataset": [[88, 134], ["print", "torchvision.datasets.CIFAR10", "h5py.File", "print", "os.path.join", "torchvision.datasets.ImageFolder", "os.path.join", "h5py.File", "print", "os.path.join", "torchvision.datasets.ImageFolder", "h5py.File", "print", "os.path.join", "torchvision.datasets.ImageFolder", "h5py.File"], "methods", ["None"], ["            ", "self", ".", "transforms", "+=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", "]", "\n", "\n", "", "self", ".", "transforms", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "norm", ":", "\n", "            ", "if", "self", ".", "dataset_name", "==", "\"MNIST\"", ":", "\n", "                ", "self", ".", "transforms", "+=", "[", "\n", "transforms", ".", "Normalize", "(", "self", ".", "norm_mean", "[", ":", "1", "]", ",", "self", ".", "norm_std", "[", ":", "1", "]", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "transforms", "+=", "[", "\n", "transforms", ".", "Normalize", "(", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ")", "\n", "]", "\n", "", "", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "self", ".", "transforms", ")", "\n", "print", "(", "self", ".", "transforms", ")", "\n", "\n", "self", ".", "load_dataset", "(", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset_name", "==", "'cifar10'", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n", "self", ".", "labels", "=", "f", "[", "'labels'", "]", "[", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "CIFAR10", "(", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ")", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "download", "=", "self", ".", "download", ")", "\n", "", "", "elif", "self", ".", "dataset_name", "==", "'cifar100'", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n", "self", ".", "labels", "=", "f", "[", "'labels'", "]", "[", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "CIFAR100", "(", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ")", ",", "\n", "train", "=", "self", ".", "train", ",", "\n", "download", "=", "self", ".", "download", ")", "\n", "", "", "elif", "self", ".", "dataset_name", "==", "'MNIST'", ":", "\n", "            ", "self", ".", "data", "=", "MNIST", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ")", ",", "\n", "train", "=", "self", ".", "train", ",", "download", "=", "self", ".", "download", ")", "\n", "", "elif", "self", ".", "dataset_name", "==", "'imagenet'", ":", "\n", "            ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Loading %s into memory...'", "%", "self", ".", "hdf5_path", ")", "\n", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "self", ".", "data", "=", "f", "[", "'imgs'", "]", "[", ":", "]", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.LoadDataset.__len__": [[136, 142], ["len"], "methods", ["None"], ["", "", "else", ":", "\n", "                ", "mode", "=", "'train'", "if", "self", ".", "train", "==", "True", "else", "'valid'", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "'ILSVRC2012'", ",", "mode", ")", "\n", "self", ".", "data", "=", "ImageFolder", "(", "root", "=", "root", ")", "\n", "\n", "", "", "elif", "self", ".", "dataset_name", "==", "'gtsrb'", ":", "\n", "            ", "self", ".", "root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'GTSRB'", ")", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.data_utils.load_dataset.LoadDataset.__getitem__": [[144, 152], ["load_dataset.LoadDataset.transforms", "load_dataset.LoadDataset.transforms", "int", "numpy.transpose", "int"], "methods", ["None"], ["self", ".", "csv_file_name", "=", "'training.csv'", "if", "self", ".", "train", "else", "'test.csv'", "\n", "\n", "csv_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root_dir", ",", "self", ".", "sub_directory", ",", "self", ".", "csv_file_name", "\n", ")", "\n", "\n", "self", ".", "csv_data", "=", "pd", ".", "read_csv", "(", "csv_file_path", ")", "\n", "\n", "", "elif", "self", ".", "dataset_name", "==", "\"tiny_imagenet\"", ":", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.SSIM.__init__": [[42, 48], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.create_window"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.SSIM.forward": [[49, 66], ["img1.size", "__init__._ssim", "__init__.create_window", "window.cuda.cuda.type_as", "__init__.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__._ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.create_window", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.gaussian": [[8, 11], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.create_window": [[12, 18], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "__init__.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.gaussian"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__._ssim": [[19, 40], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.model_ops.conv2d"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.ssim": [[67, 76], ["img1.size", "__init__.create_window", "window.cuda.type_as", "__init__._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__.create_window", "home.repos.pwc.inspect_result.cure-lab_contranet.pytorch_ssim.__init__._ssim", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.cuda"], []], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[89, 93], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.replicate.execute_replication_callbacks": [[52, 73], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.replicate.patch_replication_callback": [[95, 120], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.__init__": [[46, 50], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.put": [[51, 56], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.get": [[57, 65], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SlavePipe.run_slave": [[74, 79], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.__init__": [[92, 102], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.__getstate__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.__setstate__": [[106, 108], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.register_slave": [[109, 126], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.misc.SaveOutput.clear"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.run_master": [[127, 159], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.nr_slaves": [[160, 163], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[41, 54], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[77, 92], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "if", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'track_running_stats=False is not supported by the SynchronizedBatchNorm.'", ")", "\n", "\n", "", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[93, 124], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[125, 134], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[135, 157], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[158, 176], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[234, 238], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[296, 300], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[359, 363], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._sum_ft": [[62, 65], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm._unsqueeze_ft": [[67, 70], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[365, 378], ["None"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model": [[380, 422], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[52, 63], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[64, 67], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[68, 72], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[73, 99], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.Accuracy.calculate_accuracy": [[22, 122], ["iter", "isinstance", "isinstance", "logger.info", "tqdm.tqdm", "tqdm.tqdm", "range", "utils.sample.sample_latents", "next", "generator", "len", "len", "len", "len", "range", "next", "len", "len", "utils.losses.latent_optimise", "real_images.to", "real_labels.to", "torch.no_grad", "discriminator.detach().cpu().numpy", "discriminator.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.where", "numpy.where", "real_images.to", "real_labels.to", "torch.no_grad", "discriminator.detach().cpu().numpy", "numpy.asarray", "numpy.concatenate", "numpy.concatenate", "numpy.where", "discriminator", "discriminator", "discriminator", "discriminator", "discriminator", "discriminator.detach().cpu", "discriminator.detach().cpu", "discriminator", "discriminator.detach().cpu", "len", "discriminator", "discriminator", "len", "len", "len", "len", "discriminator", "len", "discriminator.detach", "discriminator.detach", "discriminator.detach"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where", "home.repos.pwc.inspect_result.cure-lab_contranet.utilss.utils.where"], ["def", "calculate_accuracy", "(", "dataloader", ",", "generator", ",", "discriminator", ",", "D_loss", ",", "num_evaluate", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "\n", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "cr", ",", "logger", ",", "eval_generated_sample", "=", "False", ")", ":", "\n", "    ", "data_iter", "=", "iter", "(", "dataloader", ")", "\n", "batch_size", "=", "dataloader", ".", "batch_size", "\n", "disable_tqdm", "=", "device", "!=", "0", "\n", "\n", "if", "isinstance", "(", "generator", ",", "DataParallel", ")", "or", "isinstance", "(", "generator", ",", "DistributedDataParallel", ")", ":", "\n", "        ", "z_dim", "=", "generator", ".", "module", ".", "z_dim", "\n", "num_classes", "=", "generator", ".", "module", ".", "num_classes", "\n", "conditional_strategy", "=", "discriminator", ".", "module", ".", "conditional_strategy", "\n", "", "else", ":", "\n", "        ", "z_dim", "=", "generator", ".", "z_dim", "\n", "num_classes", "=", "generator", ".", "num_classes", "\n", "conditional_strategy", "=", "discriminator", ".", "conditional_strategy", "\n", "\n", "", "total_batch", "=", "num_evaluate", "//", "batch_size", "\n", "\n", "if", "D_loss", ".", "__name__", "in", "[", "\"loss_dcgan_dis\"", ",", "\"loss_lsgan_dis\"", "]", ":", "\n", "        ", "cutoff", "=", "0.5", "\n", "", "elif", "D_loss", ".", "__name__", "==", "\"loss_hinge_dis\"", ":", "\n", "        ", "cutoff", "=", "0.0", "\n", "", "elif", "D_loss", ".", "__name__", "==", "\"loss_wgan_dis\"", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "\"Calculate Accuracies....\"", ")", "\n", "\n", "if", "eval_generated_sample", ":", "\n", "        ", "for", "batch_id", "in", "tqdm", "(", "range", "(", "total_batch", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "            ", "zs", ",", "fake_labels", "=", "sample_latents", "(", "prior", ",", "batch_size", ",", "z_dim", ",", "truncated_factor", ",", "num_classes", ",", "None", ",", "device", ")", "\n", "if", "latent_op", ":", "\n", "                ", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "generator", ",", "discriminator", ",", "conditional_strategy", ",", "latent_op_step", ",", "\n", "1.0", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "False", ",", "device", ")", "\n", "\n", "", "real_images", ",", "real_labels", "=", "next", "(", "data_iter", ")", "\n", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "device", ")", ",", "real_labels", ".", "to", "(", "device", ")", "\n", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "conditional_strategy", "in", "[", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "                    ", "_", ",", "_", ",", "dis_out_fake", "=", "discriminator", "(", "fake_images", ",", "fake_labels", ")", "\n", "_", ",", "_", ",", "dis_out_real", "=", "discriminator", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "                    ", "_", ",", "dis_out_fake", "=", "discriminator", "(", "fake_images", ",", "fake_labels", ")", "\n", "_", ",", "dis_out_real", "=", "discriminator", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "==", "\"ProjGAN\"", "or", "conditional_strategy", "==", "\"no\"", ":", "\n", "                    ", "dis_out_fake", "=", "discriminator", "(", "fake_images", ",", "fake_labels", ")", "\n", "dis_out_real", "=", "discriminator", "(", "real_images", ",", "real_labels", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "dis_out_fake", "=", "dis_out_fake", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dis_out_real", "=", "dis_out_real", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "batch_id", "==", "0", ":", "\n", "                ", "confid", "=", "np", ".", "concatenate", "(", "(", "dis_out_fake", ",", "dis_out_real", ")", ",", "axis", "=", "0", ")", "\n", "confid_label", "=", "np", ".", "concatenate", "(", "(", "[", "0.0", "]", "*", "len", "(", "dis_out_fake", ")", ",", "[", "1.0", "]", "*", "len", "(", "dis_out_real", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "confid", "=", "np", ".", "concatenate", "(", "(", "confid", ",", "dis_out_fake", ",", "dis_out_real", ")", ",", "axis", "=", "0", ")", "\n", "confid_label", "=", "np", ".", "concatenate", "(", "(", "confid_label", ",", "[", "0.0", "]", "*", "len", "(", "dis_out_fake", ")", ",", "[", "1.0", "]", "*", "len", "(", "dis_out_real", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "real_confid", "=", "confid", "[", "confid_label", "==", "1.0", "]", "\n", "fake_confid", "=", "confid", "[", "confid_label", "==", "0.0", "]", "\n", "\n", "true_positive", "=", "real_confid", "[", "np", ".", "where", "(", "real_confid", ">", "cutoff", ")", "]", "\n", "true_negative", "=", "fake_confid", "[", "np", ".", "where", "(", "fake_confid", "<", "cutoff", ")", "]", "\n", "\n", "only_real_acc", "=", "len", "(", "true_positive", ")", "/", "len", "(", "real_confid", ")", "\n", "only_fake_acc", "=", "len", "(", "true_negative", ")", "/", "len", "(", "fake_confid", ")", "\n", "\n", "return", "only_real_acc", ",", "only_fake_acc", "\n", "", "else", ":", "\n", "        ", "for", "batch_id", "in", "tqdm", "(", "range", "(", "total_batch", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "            ", "real_images", ",", "real_labels", "=", "next", "(", "data_iter", ")", "\n", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "device", ")", ",", "real_labels", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "conditional_strategy", "in", "[", "\"ContraGAN\"", ",", "\"Proxy_NCA_GAN\"", ",", "\"NT_Xent_GAN\"", "]", ":", "\n", "                    ", "_", ",", "_", ",", "dis_out_real", "=", "discriminator", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "==", "\"ACGAN\"", ":", "\n", "                    ", "_", ",", "dis_out_real", "=", "discriminator", "(", "real_images", ",", "real_labels", ")", "\n", "", "elif", "conditional_strategy", "==", "\"ProjGAN\"", "or", "conditional_strategy", "==", "\"no\"", ":", "\n", "                    ", "dis_out_real", "=", "discriminator", "(", "real_images", ",", "real_labels", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "dis_out_real", "=", "dis_out_real", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "batch_id", "==", "0", ":", "\n", "                ", "confid", "=", "dis_out_real", "\n", "confid_label", "=", "np", ".", "asarray", "(", "[", "1.0", "]", "*", "len", "(", "dis_out_real", ")", ",", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "confid", "=", "np", ".", "concatenate", "(", "(", "confid", ",", "dis_out_real", ")", ",", "axis", "=", "0", ")", "\n", "confid_label", "=", "np", ".", "concatenate", "(", "(", "confid_label", ",", "[", "1.0", "]", "*", "len", "(", "dis_out_real", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "real_confid", "=", "confid", "[", "confid_label", "==", "1.0", "]", "\n", "true_positive", "=", "real_confid", "[", "np", ".", "where", "(", "real_confid", ">", "cutoff", ")", "]", "\n", "only_real_acc", "=", "len", "(", "true_positive", ")", "/", "len", "(", "real_confid", ")", "\n", "\n", "return", "only_real_acc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.InceptionV3.__init__": [[23, 96], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "inception_network.fid_inception_v3", "inception_network.InceptionV3.blocks.append", "inception_network.InceptionV3.blocks.append", "inception_network.InceptionV3.blocks.append", "inception_network.InceptionV3.blocks.append", "inception_network.InceptionV3.parameters", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.Linear", "torch.Linear", "torch.Linear", "inception_network.InceptionV3.fc.weight.copy_", "inception_network.InceptionV3.fc.bias.copy_"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.fid_inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "False", ",", "\n", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "state_dict", ",", "inception", "=", "fid_inception_v3", "(", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "1008", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc", ".", "weight", ".", "copy_", "(", "state_dict", "[", "'fc.weight'", "]", ")", "\n", "self", ".", "fc", ".", "bias", ".", "copy_", "(", "state_dict", "[", "'fc.bias'", "]", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.InceptionV3.forward": [[98, 128], ["enumerate", "torch.dropout", "torch.dropout", "torch.dropout", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "inception_network.InceptionV3.fc", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "False", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "logit", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionA.__init__": [[159, 161], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionA.forward": [[162, 180], ["inception_network.FIDInceptionA.branch1x1", "inception_network.FIDInceptionA.branch5x5_1", "inception_network.FIDInceptionA.branch5x5_2", "inception_network.FIDInceptionA.branch3x3dbl_1", "inception_network.FIDInceptionA.branch3x3dbl_2", "inception_network.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_network.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionC.__init__": [[184, 186], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionC.forward": [[187, 208], ["inception_network.FIDInceptionC.branch1x1", "inception_network.FIDInceptionC.branch7x7_1", "inception_network.FIDInceptionC.branch7x7_2", "inception_network.FIDInceptionC.branch7x7_3", "inception_network.FIDInceptionC.branch7x7dbl_1", "inception_network.FIDInceptionC.branch7x7dbl_2", "inception_network.FIDInceptionC.branch7x7dbl_3", "inception_network.FIDInceptionC.branch7x7dbl_4", "inception_network.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_network.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_1.__init__": [[212, 214], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_1.forward": [[215, 241], ["inception_network.FIDInceptionE_1.branch1x1", "inception_network.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_network.FIDInceptionE_1.branch3x3dbl_1", "inception_network.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_network.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_network.FIDInceptionE_1.branch3x3_2a", "inception_network.FIDInceptionE_1.branch3x3_2b", "inception_network.FIDInceptionE_1.branch3x3dbl_3a", "inception_network.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_2.__init__": [[245, 247], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.FIDInceptionE_2.forward": [[248, 275], ["inception_network.FIDInceptionE_2.branch1x1", "inception_network.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_network.FIDInceptionE_2.branch3x3dbl_1", "inception_network.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception_network.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_network.FIDInceptionE_2.branch3x3_2a", "inception_network.FIDInceptionE_2.branch3x3_2b", "inception_network.FIDInceptionE_2.branch3x3dbl_3a", "inception_network.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.inception_network.fid_inception_v3": [[130, 155], ["torchvision.models.inception_v3", "inception_network.FIDInceptionA", "inception_network.FIDInceptionA", "inception_network.FIDInceptionA", "inception_network.FIDInceptionC", "inception_network.FIDInceptionC", "inception_network.FIDInceptionC", "inception_network.FIDInceptionC", "inception_network.FIDInceptionE_1", "inception_network.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], ["", "", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "models", ".", "inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ")", "\n", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "# inception.fc = nn.Linear(2048, 1008, bias=False)", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "state_dict", ",", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.prepare_inception_moments.prepare_inception_moments": [[15, 54], ["inception_model.eval", "os.path.abspath", "os.path.isfile", "os.path.join", "metrics.FID.calculate_activation_statistics", "numpy.savez", "metrics.IS.evaluator", "metrics.IS.evaluator.eval_dataset", "numpy.load", "numpy.load", "logger.info", "logger.info", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_activation_statistics", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.eval_dataset"], ["def", "prepare_inception_moments", "(", "dataloader", ",", "eval_mode", ",", "generator", ",", "inception_model", ",", "splits", ",", "run_name", ",", "logger", ",", "device", ")", ":", "\n", "    ", "dataset_name", "=", "dataloader", ".", "dataset", ".", "dataset_name", "\n", "inception_model", ".", "eval", "(", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "\"./data\"", ",", "dataset_name", "+", "\"_\"", "+", "eval_mode", "+", "'_'", "+", "'inception_moments.npz'", ")", ")", "\n", "is_file", "=", "os", ".", "path", ".", "isfile", "(", "save_path", ")", "\n", "\n", "if", "is_file", ":", "\n", "        ", "mu", "=", "np", ".", "load", "(", "save_path", ")", "[", "'mu'", "]", "\n", "sigma", "=", "np", ".", "load", "(", "save_path", ")", "[", "'sigma'", "]", "\n", "", "else", ":", "\n", "        ", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "'Calculate moments of {} dataset'", ".", "format", "(", "eval_mode", ")", ")", "\n", "mu", ",", "sigma", "=", "calculate_activation_statistics", "(", "data_loader", "=", "dataloader", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "None", ",", "\n", "inception_model", "=", "inception_model", ",", "\n", "n_generate", "=", "None", ",", "\n", "truncated_factor", "=", "None", ",", "\n", "prior", "=", "None", ",", "\n", "is_generate", "=", "False", ",", "\n", "latent_op", "=", "False", ",", "\n", "latent_op_step", "=", "None", ",", "\n", "latent_op_alpha", "=", "None", ",", "\n", "latent_op_beta", "=", "None", ",", "\n", "device", "=", "device", ",", "\n", "tqdm_disable", "=", "False", ",", "\n", "run_name", "=", "run_name", ")", "\n", "\n", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "'Save calculated means and covariances to disk...'", ")", "\n", "np", ".", "savez", "(", "save_path", ",", "**", "{", "'mu'", ":", "mu", ",", "'sigma'", ":", "sigma", "}", ")", "\n", "\n", "", "if", "is_file", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "'calculate inception score of {} dataset.'", ".", "format", "(", "eval_mode", ")", ")", "\n", "evaluator_instance", "=", "evaluator", "(", "inception_model", ",", "device", "=", "device", ")", "\n", "is_score", ",", "is_std", "=", "evaluator_instance", ".", "eval_dataset", "(", "dataloader", ",", "splits", "=", "splits", ")", "\n", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "'Inception score={is_score}-Inception_std={is_std}'", ".", "format", "(", "is_score", "=", "is_score", ",", "is_std", "=", "is_std", ")", ")", "\n", "", "return", "mu", ",", "sigma", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.__init__": [[40, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inception_model", ",", "device", ")", ":", "\n", "        ", "self", ".", "inception_model", "=", "inception_model", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "disable_tqdm", "=", "device", "!=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.generate_images": [[46, 66], ["utils.sample.sample_latents", "isinstance", "isinstance", "utils.losses.latent_optimise", "torch.no_grad", "gen"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "def", "generate_images", "(", "self", ",", "gen", ",", "dis", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "batch_size", ")", ":", "\n", "        ", "if", "isinstance", "(", "gen", ",", "DataParallel", ")", "or", "isinstance", "(", "gen", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "z_dim", "=", "gen", ".", "module", ".", "z_dim", "\n", "num_classes", "=", "gen", ".", "module", ".", "num_classes", "\n", "conditional_strategy", "=", "dis", ".", "module", ".", "conditional_strategy", "\n", "", "else", ":", "\n", "            ", "z_dim", "=", "gen", ".", "z_dim", "\n", "num_classes", "=", "gen", ".", "num_classes", "\n", "conditional_strategy", "=", "dis", ".", "conditional_strategy", "\n", "\n", "", "zs", ",", "fake_labels", "=", "sample_latents", "(", "prior", ",", "batch_size", ",", "z_dim", ",", "truncated_factor", ",", "num_classes", ",", "None", ",", "self", ".", "device", ")", "\n", "\n", "if", "latent_op", ":", "\n", "            ", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "gen", ",", "dis", ",", "conditional_strategy", ",", "latent_op_step", ",", "1.0", ",", "latent_op_alpha", ",", "\n", "latent_op_beta", ",", "False", ",", "self", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_images", "=", "gen", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "", "return", "batch_images", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.inception_softmax": [[68, 72], ["torch.no_grad", "F_beta.precision_recall.inception_model"], "methods", ["None"], ["", "def", "inception_softmax", "(", "self", ",", "batch_images", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embeddings", ",", "logits", "=", "self", ".", "inception_model", "(", "batch_images", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.cluster_into_bins": [[74, 86], ["numpy.vstack", "sklearn.cluster.MiniBatchKMeans", "sklearn.cluster.MiniBatchKMeans.fit", "numpy.histogram", "numpy.histogram", "len", "len"], "methods", ["None"], ["", "def", "cluster_into_bins", "(", "self", ",", "real_embeds", ",", "fake_embeds", ",", "num_clusters", ")", ":", "\n", "        ", "representations", "=", "np", ".", "vstack", "(", "[", "real_embeds", ",", "fake_embeds", "]", ")", "\n", "kmeans", "=", "MiniBatchKMeans", "(", "n_clusters", "=", "num_clusters", ",", "n_init", "=", "10", ")", "\n", "labels", "=", "kmeans", ".", "fit", "(", "representations", ")", ".", "labels_", "\n", "\n", "real_labels", "=", "labels", "[", ":", "len", "(", "real_embeds", ")", "]", "\n", "fake_labels", "=", "labels", "[", "len", "(", "real_embeds", ")", ":", "]", "\n", "\n", "real_density", "=", "np", ".", "histogram", "(", "real_labels", ",", "bins", "=", "num_clusters", ",", "range", "=", "[", "0", ",", "num_clusters", "]", ",", "density", "=", "True", ")", "[", "0", "]", "\n", "fake_density", "=", "np", ".", "histogram", "(", "fake_labels", ",", "bins", "=", "num_clusters", ",", "range", "=", "[", "0", ",", "num_clusters", "]", ",", "density", "=", "True", ")", "[", "0", "]", "\n", "\n", "return", "real_density", ",", "fake_density", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.compute_PRD": [[88, 107], ["numpy.linspace", "numpy.tan", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.minimum().sum", "max", "numpy.clip", "numpy.clip", "numpy.max", "numpy.max", "ValueError", "numpy.minimum"], "methods", ["None"], ["", "def", "compute_PRD", "(", "self", ",", "real_density", ",", "fake_density", ",", "num_angles", "=", "1001", ",", "epsilon", "=", "1e-10", ")", ":", "\n", "        ", "angles", "=", "np", ".", "linspace", "(", "epsilon", ",", "np", ".", "pi", "/", "2", "-", "epsilon", ",", "num", "=", "num_angles", ")", "\n", "slopes", "=", "np", ".", "tan", "(", "angles", ")", "\n", "\n", "slopes_2d", "=", "np", ".", "expand_dims", "(", "slopes", ",", "1", ")", "\n", "\n", "real_density_2d", "=", "np", ".", "expand_dims", "(", "real_density", ",", "0", ")", "\n", "fake_density_2d", "=", "np", ".", "expand_dims", "(", "fake_density", ",", "0", ")", "\n", "\n", "precision", "=", "np", ".", "minimum", "(", "real_density_2d", "*", "slopes_2d", ",", "fake_density_2d", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "recall", "=", "precision", "/", "slopes", "\n", "\n", "max_val", "=", "max", "(", "np", ".", "max", "(", "precision", ")", ",", "np", ".", "max", "(", "recall", ")", ")", "\n", "if", "max_val", ">", "1.001", ":", "\n", "            ", "raise", "ValueError", "(", "'Detected value > 1.001, this should not happen.'", ")", "\n", "", "precision", "=", "np", ".", "clip", "(", "precision", ",", "0", ",", "1", ")", "\n", "recall", "=", "np", ".", "clip", "(", "recall", ",", "0", ",", "1", ")", "\n", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.compute_precision_recall": [[108, 142], ["iter", "int", "tqdm.tqdm.tqdm", "range", "numpy.mean", "numpy.mean", "math.ceil", "range", "next", "F_beta.precision_recall.generate_images", "F_beta.precision_recall.inception_softmax().detach().cpu().numpy", "F_beta.precision_recall.inception_softmax().detach().cpu().numpy", "F_beta.precision_recall.cluster_into_bins", "F_beta.precision_recall.compute_PRD", "precisions.append", "recalls.append", "real_images.to", "real_labels.to", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "float", "float", "F_beta.precision_recall.inception_softmax().detach().cpu", "F_beta.precision_recall.inception_softmax().detach().cpu", "numpy.array", "numpy.array", "F_beta.precision_recall.inception_softmax().detach", "F_beta.precision_recall.inception_softmax().detach", "F_beta.precision_recall.inception_softmax", "F_beta.precision_recall.inception_softmax"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.generate_images", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.cluster_into_bins", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.compute_PRD", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.inception_softmax", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.inception_softmax"], ["", "def", "compute_precision_recall", "(", "self", ",", "dataloader", ",", "gen", ",", "dis", ",", "num_generate", ",", "num_runs", ",", "num_clusters", ",", "truncated_factor", ",", "prior", ",", "\n", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "batch_size", ",", "device", ",", "num_angles", "=", "1001", ")", ":", "\n", "        ", "dataset_iter", "=", "iter", "(", "dataloader", ")", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "num_generate", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ",", "disable", "=", "self", ".", "disable_tqdm", ")", ":", "\n", "            ", "real_images", ",", "real_labels", "=", "next", "(", "dataset_iter", ")", "\n", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "device", ")", ",", "real_labels", ".", "to", "(", "self", ".", "device", ")", "\n", "fake_images", "=", "self", ".", "generate_images", "(", "gen", ",", "dis", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "\n", "latent_op_alpha", ",", "latent_op_beta", ",", "batch_size", ")", "\n", "\n", "real_embed", "=", "self", ".", "inception_softmax", "(", "real_images", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fake_embed", "=", "self", ".", "inception_softmax", "(", "fake_images", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "real_embeds", "=", "np", ".", "array", "(", "real_embed", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "fake_embeds", "=", "np", ".", "array", "(", "fake_embed", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "                ", "real_embeds", "=", "np", ".", "concatenate", "(", "[", "real_embeds", ",", "np", ".", "array", "(", "real_embed", ",", "dtype", "=", "np", ".", "float64", ")", "]", ",", "axis", "=", "0", ")", "\n", "fake_embeds", "=", "np", ".", "concatenate", "(", "[", "fake_embeds", ",", "np", ".", "array", "(", "fake_embed", ",", "dtype", "=", "np", ".", "float64", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "real_embeds", "=", "real_embeds", "[", ":", "num_generate", "]", "\n", "fake_embeds", "=", "fake_embeds", "[", ":", "num_generate", "]", "\n", "\n", "precisions", "=", "[", "]", "\n", "recalls", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_runs", ")", ":", "\n", "            ", "real_density", ",", "fake_density", "=", "self", ".", "cluster_into_bins", "(", "real_embeds", ",", "fake_embeds", ",", "num_clusters", ")", "\n", "precision", ",", "recall", "=", "self", ".", "compute_PRD", "(", "real_density", ",", "fake_density", ",", "num_angles", "=", "num_angles", ")", "\n", "precisions", ".", "append", "(", "precision", ")", "\n", "recalls", ".", "append", "(", "recall", ")", "\n", "\n", "", "mean_precision", "=", "np", ".", "mean", "(", "precisions", ",", "axis", "=", "0", ")", "\n", "mean_recall", "=", "np", ".", "mean", "(", "recalls", ",", "axis", "=", "0", ")", "\n", "\n", "return", "mean_precision", ",", "mean_recall", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.compute_f_beta": [[144, 146], ["None"], "methods", ["None"], ["", "def", "compute_f_beta", "(", "self", ",", "precision", ",", "recall", ",", "beta", "=", "1", ",", "epsilon", "=", "1e-10", ")", ":", "\n", "        ", "return", "(", "1", "+", "beta", "**", "2", ")", "*", "(", "precision", "*", "recall", ")", "/", "(", "(", "beta", "**", "2", "*", "precision", ")", "+", "recall", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.calculate_f_beta_score": [[148, 168], ["inception_model.eval", "F_beta.precision_recall", "F_beta.precision_recall.compute_precision_recall", "numpy.max", "numpy.max", "logger.info", "ValueError", "ValueError", "ValueError", "F_beta.precision_recall.compute_f_beta", "F_beta.precision_recall.compute_f_beta", "str"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.compute_precision_recall", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.compute_f_beta", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.F_beta.precision_recall.compute_f_beta"], ["", "", "def", "calculate_f_beta_score", "(", "dataloader", ",", "gen", ",", "dis", ",", "inception_model", ",", "num_generate", ",", "num_runs", ",", "num_clusters", ",", "beta", ",", "truncated_factor", ",", "\n", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "logger", ")", ":", "\n", "    ", "inception_model", ".", "eval", "(", ")", "\n", "\n", "batch_size", "=", "dataloader", ".", "batch_size", "\n", "PR", "=", "precision_recall", "(", "inception_model", ",", "device", "=", "device", ")", "\n", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "\"Calculate F_beta Score....\"", ")", "\n", "precision", ",", "recall", "=", "PR", ".", "compute_precision_recall", "(", "dataloader", ",", "gen", ",", "dis", ",", "num_generate", ",", "num_runs", ",", "num_clusters", ",", "truncated_factor", ",", "\n", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "batch_size", ",", "device", ")", "\n", "\n", "if", "not", "(", "(", "precision", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "precision", "<=", "1", ")", ".", "all", "(", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'All values in precision must be in [0, 1].'", ")", "\n", "", "if", "not", "(", "(", "recall", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "recall", "<=", "1", ")", ".", "all", "(", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'All values in recall must be in [0, 1].'", ")", "\n", "", "if", "beta", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Given parameter beta %s must be positive.'", "%", "str", "(", "beta", ")", ")", "\n", "\n", "", "f_beta", "=", "np", ".", "max", "(", "PR", ".", "compute_f_beta", "(", "precision", ",", "recall", ",", "beta", "=", "beta", ")", ")", "\n", "f_beta_inv", "=", "np", ".", "max", "(", "PR", ".", "compute_f_beta", "(", "precision", ",", "recall", ",", "beta", "=", "1", "/", "beta", ")", ")", "\n", "return", "precision", ",", "recall", ",", "f_beta", ",", "f_beta_inv", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.__init__": [[20, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inception_model", ",", "device", ")", ":", "\n", "        ", "self", ".", "inception_model", "=", "inception_model", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "disable_tqdm", "=", "device", "!=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.generate_images": [[25, 45], ["utils.sample.sample_latents", "isinstance", "isinstance", "utils.losses.latent_optimise", "torch.no_grad", "gen"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "def", "generate_images", "(", "self", ",", "gen", ",", "dis", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "batch_size", ")", ":", "\n", "        ", "if", "isinstance", "(", "gen", ",", "DataParallel", ")", "or", "isinstance", "(", "gen", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "z_dim", "=", "gen", ".", "module", ".", "z_dim", "\n", "num_classes", "=", "gen", ".", "module", ".", "num_classes", "\n", "conditional_strategy", "=", "dis", ".", "module", ".", "conditional_strategy", "\n", "", "else", ":", "\n", "            ", "z_dim", "=", "gen", ".", "z_dim", "\n", "num_classes", "=", "gen", ".", "num_classes", "\n", "conditional_strategy", "=", "dis", ".", "conditional_strategy", "\n", "\n", "", "zs", ",", "fake_labels", "=", "sample_latents", "(", "prior", ",", "batch_size", ",", "z_dim", ",", "truncated_factor", ",", "num_classes", ",", "None", ",", "self", ".", "device", ")", "\n", "\n", "if", "latent_op", ":", "\n", "            ", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "gen", ",", "dis", ",", "conditional_strategy", ",", "latent_op_step", ",", "1.0", ",", "latent_op_alpha", ",", "\n", "latent_op_beta", ",", "False", ",", "self", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_images", "=", "gen", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "", "return", "batch_images", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.inception_softmax": [[47, 52], ["torch.no_grad", "IS.evaluator.inception_model", "torch.nn.functional.softmax"], "methods", ["None"], ["", "def", "inception_softmax", "(", "self", ",", "batch_images", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embeddings", ",", "logits", "=", "self", ".", "inception_model", "(", "batch_images", ")", "\n", "y", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.kl_scores": [[54, 68], ["torch.no_grad", "range", "torch.cat", "torch.mean().detach().cpu().numpy", "torch.std().detach().cpu().numpy", "torch.mean", "torch.exp", "torch.cat.append", "torch.sum", "torch.exp.unsqueeze", "torch.mean().detach().cpu", "torch.std().detach().cpu", "torch.log", "torch.log", "torch.unsqueeze", "torch.mean().detach", "torch.std().detach", "torch.mean", "torch.mean", "torch.std"], "methods", ["None"], ["", "def", "kl_scores", "(", "self", ",", "ys", ",", "splits", ")", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "n_images", "=", "ys", ".", "shape", "[", "0", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "splits", ")", ":", "\n", "                ", "part", "=", "ys", "[", "(", "j", "*", "n_images", "//", "splits", ")", ":", "(", "(", "j", "+", "1", ")", "*", "n_images", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "torch", ".", "log", "(", "part", ")", "-", "torch", ".", "log", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "kl", "=", "torch", ".", "exp", "(", "kl", ")", "\n", "scores", ".", "append", "(", "kl", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "scores", "=", "torch", ".", "cat", "(", "scores", ",", "0", ")", "\n", "m_scores", "=", "torch", ".", "mean", "(", "scores", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "m_std", "=", "torch", ".", "std", "(", "scores", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "m_scores", ",", "m_std", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.eval_gen": [[70, 84], ["int", "tqdm.tqdm.tqdm", "math.ceil", "range", "IS.evaluator.generate_images", "IS.evaluator.inception_softmax", "torch.cat.append", "torch.no_grad", "torch.cat", "IS.evaluator.kl_scores", "float", "float"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.generate_images", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.inception_softmax", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.kl_scores"], ["", "def", "eval_gen", "(", "self", ",", "gen", ",", "dis", ",", "n_eval", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "\n", "latent_op_beta", ",", "split", ",", "batch_size", ")", ":", "\n", "        ", "ys", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n_eval", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ",", "disable", "=", "self", ".", "disable_tqdm", ")", ":", "\n", "            ", "batch_images", "=", "self", ".", "generate_images", "(", "gen", ",", "dis", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "\n", "latent_op_alpha", ",", "latent_op_beta", ",", "batch_size", ")", "\n", "y", "=", "self", ".", "inception_softmax", "(", "batch_images", ")", "\n", "ys", ".", "append", "(", "y", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ys", "=", "torch", ".", "cat", "(", "ys", ",", "0", ")", "\n", "m_scores", ",", "m_std", "=", "self", ".", "kl_scores", "(", "ys", "[", ":", "n_eval", "]", ",", "splits", "=", "split", ")", "\n", "", "return", "m_scores", ",", "m_std", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.eval_dataset": [[86, 103], ["len", "int", "iter", "tqdm.tqdm.tqdm", "math.ceil", "range", "next", "batch_images.to.to.to", "IS.evaluator.inception_softmax", "torch.cat.append", "torch.no_grad", "torch.cat", "IS.evaluator.kl_scores", "float", "float"], "methods", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.inception_softmax", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.kl_scores"], ["", "def", "eval_dataset", "(", "self", ",", "dataloader", ",", "splits", ")", ":", "\n", "        ", "batch_size", "=", "dataloader", ".", "batch_size", "\n", "n_images", "=", "len", "(", "dataloader", ".", "dataset", ")", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n_images", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "dataset_iter", "=", "iter", "(", "dataloader", ")", "\n", "ys", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ",", "disable", "=", "self", ".", "disable_tqdm", ")", ":", "\n", "            ", "feed_list", "=", "next", "(", "dataset_iter", ")", "\n", "batch_images", ",", "batch_labels", "=", "feed_list", "[", "0", "]", ",", "feed_list", "[", "1", "]", "\n", "batch_images", "=", "batch_images", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "self", ".", "inception_softmax", "(", "batch_images", ")", "\n", "ys", ".", "append", "(", "y", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ys", "=", "torch", ".", "cat", "(", "ys", ",", "0", ")", "\n", "m_scores", ",", "m_std", "=", "self", ".", "kl_scores", "(", "ys", ",", "splits", "=", "splits", ")", "\n", "", "return", "m_scores", ",", "m_std", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.calculate_incep_score": [[105, 115], ["inception_model.eval", "IS.evaluator", "IS.evaluator.eval_gen", "logger.info"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.IS.evaluator.eval_gen"], ["", "", "def", "calculate_incep_score", "(", "dataloader", ",", "generator", ",", "discriminator", ",", "inception_model", ",", "n_generate", ",", "truncated_factor", ",", "prior", ",", "\n", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "splits", ",", "device", ",", "logger", ")", ":", "\n", "    ", "inception_model", ".", "eval", "(", ")", "\n", "\n", "batch_size", "=", "dataloader", ".", "batch_size", "\n", "evaluator_instance", "=", "evaluator", "(", "inception_model", ",", "device", "=", "device", ")", "\n", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "\"Calculating Inception Score....\"", ")", "\n", "kl_score", ",", "kl_std", "=", "evaluator_instance", ".", "eval_gen", "(", "generator", ",", "discriminator", ",", "n_generate", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "\n", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "splits", ",", "batch_size", ")", "\n", "return", "kl_score", ",", "kl_std", "\n", "", ""]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_frechet_distance": [[36, 83], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.generate_images": [[84, 105], ["utils.sample.sample_latents", "isinstance", "isinstance", "utils.losses.latent_optimise", "torch.no_grad", "gen"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.utils.sample.sample_latents", "home.repos.pwc.inspect_result.cure-lab_contranet.utils.losses.latent_optimise"], ["", "def", "generate_images", "(", "batch_size", ",", "gen", ",", "dis", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "latent_op_step", ",", "\n", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ")", ":", "\n", "    ", "if", "isinstance", "(", "gen", ",", "DataParallel", ")", "or", "isinstance", "(", "gen", ",", "DistributedDataParallel", ")", ":", "\n", "        ", "z_dim", "=", "gen", ".", "module", ".", "z_dim", "\n", "num_classes", "=", "gen", ".", "module", ".", "num_classes", "\n", "conditional_strategy", "=", "dis", ".", "module", ".", "conditional_strategy", "\n", "", "else", ":", "\n", "        ", "z_dim", "=", "gen", ".", "z_dim", "\n", "num_classes", "=", "gen", ".", "num_classes", "\n", "conditional_strategy", "=", "dis", ".", "conditional_strategy", "\n", "\n", "", "zs", ",", "fake_labels", "=", "sample_latents", "(", "prior", ",", "batch_size", ",", "z_dim", ",", "truncated_factor", ",", "num_classes", ",", "None", ",", "device", ")", "\n", "\n", "if", "latent_op", ":", "\n", "        ", "zs", "=", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "gen", ",", "dis", ",", "conditional_strategy", ",", "latent_op_step", ",", "1.0", ",", "latent_op_alpha", ",", "\n", "latent_op_beta", ",", "False", ",", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "batch_images", "=", "gen", "(", "zs", ",", "fake_labels", ",", "evaluation", "=", "True", ")", "\n", "\n", "", "return", "batch_images", ",", "fake_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.get_activations": [[107, 167], ["numpy.empty", "tqdm.tqdm", "math.ceil", "len", "math.ceil", "iter", "range", "isinstance", "isinstance", "FID.generate_images", "images.to.to", "float", "float", "float", "float", "torch.no_grad", "inception_model", "embeddings.cpu().data.numpy().reshape", "embeddings[].cpu().data.numpy().reshape", "next", "images.to.to", "torch.no_grad", "inception_model", "embeddings.cpu().data.numpy().reshape", "embeddings[].cpu().data.numpy().reshape", "embeddings.cpu().data.numpy", "embeddings[].cpu().data.numpy", "embeddings.cpu().data.numpy", "embeddings[].cpu().data.numpy", "embeddings.cpu", "embeddings[].cpu", "embeddings.cpu", "embeddings[].cpu"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.generate_images"], ["", "def", "get_activations", "(", "data_loader", ",", "generator", ",", "discriminator", ",", "inception_model", ",", "n_generate", ",", "truncated_factor", ",", "prior", ",", "is_generate", ",", "\n", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "tqdm_disable", "=", "False", ",", "run_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- data_loader      : data_loader of training images\n    -- generator        : instance of GANs' generator\n    -- inception_model  : Instance of inception model\n\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "if", "is_generate", "is", "True", ":", "\n", "        ", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "total_instance", "=", "n_generate", "\n", "n_batches", "=", "math", ".", "ceil", "(", "float", "(", "total_instance", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "data_loader", ".", "batch_size", "\n", "total_instance", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "n_batches", "=", "math", ".", "ceil", "(", "float", "(", "total_instance", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "", "num_classes", "=", "generator", ".", "module", ".", "num_classes", "if", "isinstance", "(", "generator", ",", "DataParallel", ")", "or", "isinstance", "(", "generator", ",", "DistributedDataParallel", ")", "else", "generator", ".", "num_classes", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "total_instance", ",", "2048", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "n_batches", ")", ",", "disable", "=", "tqdm_disable", ")", ":", "\n", "        ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "if", "is_generate", "is", "True", ":", "\n", "            ", "images", ",", "labels", "=", "generate_images", "(", "batch_size", ",", "generator", ",", "discriminator", ",", "truncated_factor", ",", "prior", ",", "latent_op", ",", "\n", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "embeddings", ",", "logits", "=", "inception_model", "(", "images", ")", "\n", "\n", "", "if", "total_instance", ">=", "batch_size", ":", "\n", "                ", "pred_arr", "[", "start", ":", "end", "]", "=", "embeddings", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "pred_arr", "[", "start", ":", "]", "=", "embeddings", "[", ":", "total_instance", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "total_instance", ",", "-", "1", ")", "\n", "\n", "", "total_instance", "-=", "images", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "feed_list", "=", "next", "(", "data_iter", ")", "\n", "images", "=", "feed_list", "[", "0", "]", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "embeddings", ",", "logits", "=", "inception_model", "(", "images", ")", "\n", "\n", "", "if", "total_instance", ">=", "batch_size", ":", "\n", "                    ", "pred_arr", "[", "start", ":", "end", "]", "=", "embeddings", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "pred_arr", "[", "start", ":", "]", "=", "embeddings", "[", ":", "total_instance", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "total_instance", ",", "-", "1", ")", "\n", "", "total_instance", "-=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "", "except", "StopIteration", ":", "\n", "                ", "break", "\n", "", "", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_activation_statistics": [[169, 176], ["FID.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.get_activations"], ["", "def", "calculate_activation_statistics", "(", "data_loader", ",", "generator", ",", "discriminator", ",", "inception_model", ",", "n_generate", ",", "truncated_factor", ",", "prior", ",", "\n", "is_generate", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "tqdm_disable", ",", "run_name", "=", "None", ")", ":", "\n", "    ", "act", "=", "get_activations", "(", "data_loader", ",", "generator", ",", "discriminator", ",", "inception_model", ",", "n_generate", ",", "truncated_factor", ",", "prior", ",", "\n", "is_generate", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "tqdm_disable", ",", "run_name", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_fid_score": [[178, 196], ["inception_model.eval", "FID.calculate_activation_statistics", "FID.calculate_frechet_distance", "logger.info", "FID.calculate_activation_statistics"], "function", ["home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_activation_statistics", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_frechet_distance", "home.repos.pwc.inspect_result.cure-lab_contranet.metrics.FID.calculate_activation_statistics"], ["", "def", "calculate_fid_score", "(", "data_loader", ",", "generator", ",", "discriminator", ",", "inception_model", ",", "n_generate", ",", "truncated_factor", ",", "prior", ",", "\n", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "logger", ",", "pre_cal_mean", "=", "None", ",", "pre_cal_std", "=", "None", ",", "run_name", "=", "None", ")", ":", "\n", "    ", "disable_tqdm", "=", "device", "!=", "0", "\n", "inception_model", ".", "eval", "(", ")", "\n", "\n", "if", "device", "==", "0", ":", "logger", ".", "info", "(", "\"Calculating FID Score....\"", ")", "\n", "if", "pre_cal_mean", "is", "not", "None", "and", "pre_cal_std", "is", "not", "None", ":", "\n", "        ", "m1", ",", "s1", "=", "pre_cal_mean", ",", "pre_cal_std", "\n", "", "else", ":", "\n", "        ", "m1", ",", "s1", "=", "calculate_activation_statistics", "(", "data_loader", ",", "generator", ",", "discriminator", ",", "inception_model", ",", "n_generate", ",", "truncated_factor", ",", "\n", "prior", ",", "False", ",", "False", ",", "0", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "tqdm_disable", "=", "disable_tqdm", ")", "\n", "\n", "", "m2", ",", "s2", "=", "calculate_activation_statistics", "(", "data_loader", ",", "generator", ",", "discriminator", ",", "inception_model", ",", "n_generate", ",", "truncated_factor", ",", "prior", ",", "\n", "True", ",", "latent_op", ",", "latent_op_step", ",", "latent_op_alpha", ",", "latent_op_beta", ",", "device", ",", "tqdm_disable", "=", "disable_tqdm", ",", "run_name", "=", "run_name", ")", "\n", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", ",", "m1", ",", "s1", "\n", "", ""]]}