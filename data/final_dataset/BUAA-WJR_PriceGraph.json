{"home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.price_embedding.struc2vec_embedding": [[19, 41], ["os.path.join", "os.path.join", "pickle.load.items", "open", "pickle.load", "os.path.exists", "os.makedirs", "numpy.array", "networkx.Graph", "range", "ge.Struc2Vec", "ge.Struc2Vec.train", "ge.Struc2Vec.get_embeddings", "open", "json.dump", "len", "list", "nx.Graph.add_edges_from", "v.tolist", "os.path.join", "str", "zip", "model.get_embeddings.items", "range", "numpy.where", "len"], "function", ["None"], ["def", "struc2vec_embedding", "(", "input_", ")", ":", "\n", "    ", "file_", ",", "em_size", ",", "PI", "=", "input_", "\n", "vg_file", "=", "os", ".", "path", ".", "join", "(", "'../VG'", ",", "PI", ",", "file_", ")", "\n", "with", "open", "(", "vg_file", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "vgs", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "em_dir", "=", "os", ".", "path", ".", "join", "(", "'../Struc2vec'", ",", "PI", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "em_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "em_dir", ")", "\n", "", "ems", "=", "{", "}", "\n", "for", "d", ",", "adj", "in", "vgs", ".", "items", "(", ")", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "20", ")", "]", ")", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "adj_nodes", "=", "labels", "[", "np", ".", "where", "(", "adj", "[", "i", "]", "==", "1", ")", "]", "\n", "edges", "=", "list", "(", "zip", "(", "*", "[", "[", "labels", "[", "i", "]", "]", "*", "len", "(", "adj_nodes", ")", ",", "adj_nodes", "]", ")", ")", "\n", "G", ".", "add_edges_from", "(", "edges", ")", "\n", "", "model", "=", "Struc2Vec", "(", "G", ",", "walk_length", "=", "10", ",", "num_walks", "=", "80", ",", "workers", "=", "40", ",", "verbose", "=", "40", ",", "stay_prob", "=", "0.3", ",", "opt1_reduce_len", "=", "True", ",", "opt2_reduce_sim_calc", "=", "True", ",", "opt3_num_layers", "=", "None", ",", "temp_path", "=", "'./temp_struc2vec_%s/'", "%", "PI", ",", "reuse", "=", "False", ")", "#init model", "\n", "model", ".", "train", "(", "embed_size", "=", "em_size", ",", "window_size", "=", "3", ",", "workers", "=", "40", ",", "iter", "=", "5", ")", "# train model", "\n", "embeddings", "=", "model", ".", "get_embeddings", "(", ")", "# get embedding vectors", "\n", "ems", "[", "d", "]", "=", "{", "k", ":", "v", ".", "tolist", "(", ")", "for", "k", ",", "v", "in", "embeddings", ".", "items", "(", ")", "}", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "em_dir", ",", "'%s.json'", "%", "file_", "[", ":", "-", "7", "]", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "ems", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.price_ci.vg_ci": [[16, 33], ["os.path.join", "pickle.load.items", "os.path.join", "open", "pickle.load", "numpy.array", "networkx.Graph", "range", "lib.ci.collective_influence", "open", "json.dump", "list", "nx.Graph.add_edges_from", "str", "zip", "range", "numpy.where", "len"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.ci.collective_influence"], ["def", "vg_ci", "(", "_input", ")", ":", "\n", "    ", "file_", ",", "PI", ",", "T", "=", "_input", "\n", "graph_file", "=", "os", ".", "path", ".", "join", "(", "'../VG'", ",", "PI", ",", "file_", ")", "\n", "with", "open", "(", "graph_file", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "vgs", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "cis", "=", "{", "}", "\n", "for", "d", ",", "adj", "in", "vgs", ".", "items", "(", ")", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "20", ")", "]", ")", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "            ", "vg_adjs", "=", "labels", "[", "np", ".", "where", "(", "adj", "[", "i", "]", "==", "1", ")", "]", "\n", "edges", "=", "list", "(", "zip", "(", "*", "[", "[", "labels", "[", "i", "]", "]", "*", "len", "(", "vg_adjs", ")", ",", "vg_adjs", "]", ")", ")", "\n", "G", ".", "add_edges_from", "(", "edges", ")", "\n", "", "cis", "[", "d", "]", "=", "collective_influence", "(", "G", ")", "\n", "", "ci_file", "=", "os", ".", "path", ".", "join", "(", "'../CI'", ",", "PI", ",", "'%s.json'", "%", "file_", "[", ":", "-", "7", "]", ")", "\n", "with", "open", "(", "ci_file", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "cis", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.__init__": [[83, 107], ["trainer.load_dataset", "lib.model.PriceGraph", "lib.model.output_layer", "torch.cuda.is_available", "torch.optim.Adam", "torch.optim.Adam", "torch.nn.BCELoss", "trainer.Trainer.emtree.cuda", "trainer.Trainer.output.cuda", "trainer.Trainer.emtree.parameters", "trainer.Trainer.output.parameters", "min", "max"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_dataset"], ["    ", "def", "__init__", "(", "self", ",", "time_step", ",", "hidden_size", ",", "lr", ",", "batch_size", "=", "256", ",", "drop_ratio", "=", "0", ",", "split", "=", "20", ")", ":", "\n", "        ", "self", ".", "time_step", "=", "time_step", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "learning_rate", "=", "lr", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_ratio", "=", "drop_ratio", "\n", "self", ".", "validation_ratio", "=", "split", "\n", "\n", "self", ".", "train", ",", "self", ".", "test", "=", "load_dataset", "(", ")", "\n", "feature_size", "=", "self", ".", "train", "[", "'close_ems'", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "emtree", "=", "PriceGraph", "(", "feature_size", ",", "hidden_size", ",", "time_step", ",", "drop_ratio", ")", "\n", "self", ".", "output", "=", "output_layer", "(", "last_hidden_size", "=", "hidden_size", ",", "output_size", "=", "1", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "emtree", "=", "self", ".", "emtree", ".", "cuda", "(", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "cuda", "(", ")", "\n", "", "self", ".", "emtree_optim", "=", "optim", ".", "Adam", "(", "self", ".", "emtree", ".", "parameters", "(", ")", ",", "lr", ",", "weight_decay", "=", "L2", ")", "\n", "self", ".", "output_optim", "=", "optim", ".", "Adam", "(", "self", ".", "output", ".", "parameters", "(", ")", ",", "lr", ",", "weight_decay", "=", "L2", ")", "\n", "\n", "self", ".", "loss_func", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "test_acc_max", "=", "0", "\n", "self", ".", "model_name", "=", "'%s_%s_S%s_f%s_h%s_b%s_t%s'", "%", "(", "min", "(", "years", ")", ",", "max", "(", "years", ")", ",", "Season", ",", "self", ".", "feature_size", ",", "self", ".", "hidden_size", ",", "self", ".", "batch_size", ",", "self", ".", "time_step", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.metrics": [[108, 114], ["sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score"], "methods", ["None"], ["", "def", "metrics", "(", "self", ",", "ori_y", ",", "results", ")", ":", "\n", "        ", "accuracy", "=", "accuracy_score", "(", "ori_y", ",", "results", ")", "\n", "precision", "=", "precision_score", "(", "ori_y", ",", "results", ",", "labels", "=", "[", "1", "]", ",", "average", "=", "None", ")", "[", "0", "]", "\n", "recall", "=", "recall_score", "(", "ori_y", ",", "results", ",", "labels", "=", "[", "1", "]", ",", "average", "=", "None", ")", "[", "0", "]", "\n", "f1", "=", "f1_score", "(", "ori_y", ",", "results", ",", "labels", "=", "[", "1", "]", ",", "average", "=", "None", ")", "[", "0", "]", "\n", "return", "accuracy", ",", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.train_minibatch": [[115, 168], ["len", "range", "random.sample", "numpy.array", "range", "print", "print", "print", "trainer.Trainer.metrics", "print", "print", "trainer.Trainer.validation", "max", "print", "print", "print", "trainer.Trainer.validation", "max", "print", "print", "range", "int", "len", "trainer.Trainer.to_variable", "trainer.Trainer.emtree", "trainer.Trainer.output", "y_predict.extend", "trainer.Trainer.loss_func", "trainer.Trainer.emtree_optim.zero_grad", "trainer.Trainer.output_optim.zero_grad", "trainer.Trainer.backward", "trainer.Trainer.emtree_optim.step", "trainer.Trainer.output_optim.step", "trainer.Trainer.data.item", "list", "len", "len", "torch.save", "torch.save", "trainer.Trainer.train.items", "trainer.Trainer.train.items", "out3.data.cpu().numpy", "max", "max", "trainer.Trainer.emtree.state_dict", "trainer.Trainer.output.state_dict", "trainer.Trainer.to_variable", "out3.data.cpu", "len", "sum", "sum", "str", "str"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.metrics", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.validation", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.validation", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.to_variable", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.to_variable"], ["", "def", "train_minibatch", "(", "self", ",", "num_epochs", ")", ":", "\n", "        ", "train_size", "=", "len", "(", "self", ".", "train", "[", "'ts'", "]", ")", "\n", "result", "=", "{", "}", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "loss_sum", "=", "0", "\n", "y_predict", "=", "[", "]", "\n", "# randomly select validation set", "\n", "validation_index", "=", "random", ".", "sample", "(", "range", "(", "train_size", ")", ",", "int", "(", "train_size", "*", "self", ".", "validation_ratio", "/", "100.", ")", ")", "\n", "validation_mask", "=", "np", ".", "array", "(", "[", "False", "]", "*", "train_size", ")", "\n", "validation_mask", "[", "validation_index", "]", "=", "True", "\n", "train_data", "=", "{", "k", ":", "v", "[", "~", "validation_mask", "]", "for", "k", ",", "v", "in", "self", ".", "train", ".", "items", "(", ")", "}", "\n", "val_data", "=", "{", "k", ":", "v", "[", "validation_mask", "]", "for", "k", ",", "v", "in", "self", ".", "train", ".", "items", "(", ")", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "train_data", "[", "'ts'", "]", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "                ", "batch", "=", "[", "{", "yi", ":", "self", ".", "to_variable", "(", "train_data", "[", "'%s_%s'", "%", "(", "xi", ",", "yi", ")", "]", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", "\n", "for", "yi", "in", "[", "'ems'", ",", "'ys'", ",", "'cis'", "]", "}", "for", "xi", "in", "x_column", "]", "\n", "var_t", "=", "self", ".", "to_variable", "(", "train_data", "[", "'ts'", "]", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", "\n", "out1", "=", "self", ".", "emtree", "(", "batch", ")", "\n", "out2", "=", "self", ".", "output", "(", "out1", ")", "\n", "out3", "=", "(", "out2", ">=", "0.5", ")", "+", "0", "\n", "y_predict", ".", "extend", "(", "out3", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "loss", "=", "self", ".", "loss_func", "(", "out2", ",", "var_t", ")", "\n", "self", ".", "emtree_optim", ".", "zero_grad", "(", ")", "\n", "self", ".", "output_optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "emtree_optim", ".", "step", "(", ")", "\n", "self", ".", "output_optim", ".", "step", "(", ")", "\n", "loss_sum", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "\n", "", "print", "(", "'\\n--------------------------------------------------------------\\n'", ")", "\n", "print", "(", "'epoch [%d] finished, the average loss is %f\\n'", "%", "(", "epoch", ",", "loss_sum", "*", "self", ".", "batch_size", "/", "len", "(", "train_data", "[", "'ts'", "]", ")", ")", ")", "\n", "\n", "print", "(", "'Train:\\n'", ")", "\n", "accuracy", ",", "precision", ",", "recall", ",", "f1", "=", "self", ".", "metrics", "(", "list", "(", "train_data", "[", "'ts'", "]", ")", ",", "y_predict", ")", "\n", "print", "(", "'Accuracy:%.4f\\tPrecision:%.4f\\tRecall:%.4f\\tF1:%.4f\\n'", "%", "(", "accuracy", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "\n", "print", "(", "'Validation:\\n'", ")", "\n", "validation_random", "=", "max", "(", "[", "sum", "(", "val_data", "[", "'ts'", "]", "==", "r", ")", "for", "r", "in", "[", "0", ",", "1", "]", "]", ")", "*", "1.", "/", "len", "(", "val_data", "[", "'ts'", "]", ")", "\n", "accuracy", ",", "precision", ",", "recall", ",", "f1", "=", "self", ".", "validation", "(", "val_data", ")", "\n", "acc_max_diff", "=", "max", "(", "acc_max_diff", ",", "accuracy", "-", "validation_random", ")", "\n", "print", "(", "'Accuracy:%.4f\\tPrecision:%.4f\\tRecall:%.4f\\tF1:%.4f\\n'", "%", "(", "accuracy", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "print", "(", "'Random:%.4f\\tMaxAccDiff:%.6f\\n'", "%", "(", "validation_random", ",", "acc_max_diff", ")", ")", "\n", "\n", "print", "(", "'Test:\\n'", ")", "\n", "test_random", "=", "max", "(", "[", "sum", "(", "self", ".", "test", "[", "'ts'", "]", "==", "r", ")", "for", "r", "in", "[", "0", ",", "1", "]", "]", ")", "*", "1.", "/", "len", "(", "self", ".", "test", "[", "'ts'", "]", ")", "\n", "accuracy", ",", "precision", ",", "recall", ",", "f1", "=", "self", ".", "validation", "(", "self", ".", "test", ")", "\n", "acc_max", "=", "max", "(", "acc_max", ",", "accuracy", ")", "\n", "print", "(", "'Accuracy:%.4f\\tPrecision:%.4f\\tRecall:%.4f\\tF1:%.4f\\n'", "%", "(", "accuracy", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "print", "(", "'Random:%.4f\\tMaxAcc:%.4f\\n'", "%", "(", "test_random", ",", "acc_max", ")", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "interval", "==", "0", "or", "epoch", "+", "1", "==", "num_epochs", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "emtree", ".", "state_dict", "(", ")", ",", "'../models/emtree_%s_%s.model'", "%", "(", "self", ".", "model_name", ",", "str", "(", "epoch", "+", "1", ")", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "output", ".", "state_dict", "(", ")", ",", "'../models/output_%s_%s.model'", "%", "(", "self", ".", "model_name", ",", "str", "(", "epoch", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.validation": [[169, 179], ["range", "trainer.Trainer.metrics", "len", "trainer.Trainer.emtree", "trainer.Trainer.output", "y_predict.extend", "list", "out3.data.cpu().numpy", "trainer.Trainer.to_variable", "out3.data.cpu"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.metrics", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.to_variable"], ["", "", "", "def", "validation", "(", "self", ",", "data", ")", ":", "\n", "        ", "y_predict", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", "[", "'ts'", "]", ")", ",", "self", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "[", "{", "yi", ":", "self", ".", "to_variable", "(", "data", "[", "'%s_%s'", "%", "(", "xi", ",", "yi", ")", "]", "[", "i", ":", "i", "+", "self", ".", "batch_size", "]", ")", "\n", "for", "yi", "in", "[", "'ems'", ",", "'ys'", ",", "'cis'", "]", "}", "for", "xi", "in", "x_column", "]", "\n", "out1", "=", "self", ".", "emtree", "(", "batch", ")", "\n", "out2", "=", "self", ".", "output", "(", "out1", ")", "\n", "out3", "=", "(", "out2", ">=", "0.5", ")", "+", "0", "\n", "y_predict", ".", "extend", "(", "out3", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "self", ".", "metrics", "(", "list", "(", "data", "[", "'ts'", "]", ")", ",", "y_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.to_variable": [[180, 185], ["torch.cuda.is_available", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "to_variable", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "torch", ".", "Tensor", "(", "x", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "Tensor", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.load_model": [[186, 191], ["trainer.Trainer.emtree.load_state_dict", "trainer.Trainer.output.load_state_dict", "torch.load", "torch.load"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "emtree_path", "=", "'../models/emtree_%s_%s.model'", "%", "(", "self", ".", "model_name", ",", "epoch", ")", "\n", "output_path", "=", "'../models/output_%s_%s.model'", "%", "(", "self", ".", "model_name", ",", "epoch", ")", "\n", "self", ".", "emtree", ".", "load_state_dict", "(", "torch", ".", "load", "(", "emtree_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "output", ".", "load_state_dict", "(", "torch", ".", "load", "(", "output_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.load_model_2019": [[192, 197], ["trainer.Trainer.emtree.load_state_dict", "trainer.Trainer.output.load_state_dict", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_model_2019", "(", "self", ",", "season", ")", ":", "\n", "        ", "emtree_path", "=", "'../models/PriceGraph_emtree_S%s.model'", "%", "season", "\n", "output_path", "=", "'../models/PriceGraph_output_S%s.model'", "%", "season", "\n", "self", ".", "emtree", ".", "load_state_dict", "(", "torch", ".", "load", "(", "emtree_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "self", ".", "output", ".", "load_state_dict", "(", "torch", ".", "load", "(", "output_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.test_data": [[198, 211], ["range", "trainer.Trainer.metrics", "print", "len", "trainer.Trainer.emtree", "trainer.Trainer.output", "y_predict.extend", "list", "out3.data.cpu().numpy", "trainer.Trainer.to_variable", "out3.data.cpu"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.metrics", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.Trainer.to_variable"], ["", "def", "test_data", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "test", "\n", "y_predict", "=", "[", "]", "\n", "bs", "=", "self", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", "[", "'ts'", "]", ")", ",", "bs", ")", ":", "\n", "            ", "batch", "=", "[", "{", "yi", ":", "self", ".", "to_variable", "(", "data", "[", "'%s_%s'", "%", "(", "xi", ",", "yi", ")", "]", "[", "i", ":", "i", "+", "bs", "]", ")", "\n", "for", "yi", "in", "[", "'ems'", ",", "'ys'", ",", "'cis'", "]", "}", "for", "xi", "in", "x_column", "]", "\n", "out1", "=", "self", ".", "emtree", "(", "batch", ")", "\n", "out2", "=", "self", ".", "output", "(", "out1", ")", "\n", "out3", "=", "(", "out2", ">=", "0.5", ")", "+", "0", "\n", "y_predict", ".", "extend", "(", "out3", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "accuracy", ",", "precision", ",", "recall", ",", "f1", "=", "self", ".", "metrics", "(", "list", "(", "data", "[", "'ts'", "]", ")", ",", "y_predict", ")", "\n", "print", "(", "'Accuracy:%.4f\\tPrecision:%.4f\\tRecall:%.4f\\tF1:%.4f\\n'", "%", "(", "accuracy", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.data_filter": [[32, 41], ["len", "range", "numpy.array", "list", "dataset.items"], "function", ["None"], ["def", "data_filter", "(", "dataset", ")", ":", "\n", "    ", "sample_len", "=", "len", "(", "dataset", "[", "'close_ems'", "]", ")", "\n", "mask", "=", "[", "True", "]", "*", "sample_len", "\n", "for", "i", "in", "range", "(", "sample_len", ")", ":", "\n", "        ", "for", "xi", "in", "x_column", ":", "\n", "            ", "s", "=", "dataset", "[", "xi", "+", "'_ems'", "]", "[", "i", "]", "\n", "if", "s", ".", "shape", "!=", "(", "20", ",", "32", ")", ":", "\n", "                ", "mask", "[", "i", "]", "=", "False", "\n", "", "", "", "return", "{", "k", ":", "np", ".", "array", "(", "list", "(", "v", "[", "mask", "]", ")", ")", "for", "k", ",", "v", "in", "dataset", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_season": [[43, 46], ["open", "trainer.data_filter", "os.path.join", "pickle.load"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.data_filter"], ["", "def", "load_season", "(", "season", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'../dataset'", ",", "'2019_S%s.pickle'", "%", "season", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "return", "data_filter", "(", "pickle", ".", "load", "(", "fp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.merge_season": [[48, 53], ["trainer.load_season", "dataset.keys", "numpy.append"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_season"], ["", "", "def", "merge_season", "(", "dataset", ",", "season", ")", ":", "\n", "    ", "data", "=", "load_season", "(", "season", ")", "\n", "for", "key", "in", "dataset", ".", "keys", "(", ")", ":", "\n", "        ", "dataset", "[", "key", "]", "=", "np", ".", "append", "(", "dataset", "[", "key", "]", ",", "data", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_year": [[55, 58], ["open", "trainer.data_filter", "os.path.join", "pickle.load"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.data_filter"], ["", "def", "load_year", "(", "year", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'../dataset'", ",", "'%s.pickle'", "%", "year", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "return", "data_filter", "(", "pickle", ".", "load", "(", "fp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_train": [[60, 70], ["trainer.load_year", "load_year.keys", "numpy.append"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_year"], ["", "", "def", "load_train", "(", "years", ")", ":", "\n", "    ", "train", "=", "None", "\n", "for", "y", "in", "years", ":", "\n", "        ", "dataset", "=", "load_year", "(", "y", ")", "\n", "if", "train", "is", "None", ":", "\n", "            ", "train", "=", "dataset", "\n", "continue", "\n", "", "for", "key", "in", "dataset", ".", "keys", "(", ")", ":", "\n", "            ", "train", "[", "key", "]", "=", "np", ".", "append", "(", "train", "[", "key", "]", ",", "dataset", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "", "", "return", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_dataset": [[72, 80], ["trainer.load_train", "range", "trainer.load_season", "numpy.array", "numpy.array", "trainer.merge_season"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_train", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.load_season", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.merge_season"], ["", "def", "load_dataset", "(", ")", ":", "\n", "    ", "train", "=", "load_train", "(", "years", ")", "\n", "for", "s", "in", "range", "(", "1", ",", "Season", ")", ":", "\n", "        ", "train", "=", "merge_season", "(", "train", ",", "s", ")", "\n", "", "test", "=", "load_season", "(", "Season", ")", "\n", "train", "[", "'ts'", "]", "=", "np", ".", "array", "(", "train", "[", "'close_t'", "]", ")", "\n", "test", "[", "'ts'", "]", "=", "np", ".", "array", "(", "test", "[", "'close_t'", "]", ")", "\n", "return", "train", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.trainer.getArgParser": [[213, 255], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "getArgParser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train the price graph model on stock'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-e'", ",", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'the number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-b'", ",", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'the mini-batch size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-ts'", ",", "'--timestep'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'the length of time_step'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-hs'", ",", "'--hiddensize'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'the length of hidden size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-y'", ",", "'--years'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'an integer for the accumulator'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-sn'", ",", "'--season'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'the test season of 2019'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-dr'", ",", "'--dropratio'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'the ratio of drop'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-s'", ",", "'--split'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'the split ratio of validation set'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-i'", ",", "'--interval'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'save models every interval epoch'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-l'", ",", "'--lrate'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-l2'", ",", "'--l2rate'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'L2 penalty lambda'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-t'", ",", "'--test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'train or test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test_2019'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'test with models for 2019'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.load_stock": [[19, 23], ["pandas.read_csv", "pd.read_csv.set_index", "os.path.join", "pd.read_csv.index.astype"], "function", ["None"], ["def", "load_stock", "(", "s", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "'../data'", ",", "s", ")", ",", "index_col", "=", "0", ")", "\n", "df", ".", "set_index", "(", "df", ".", "index", ".", "astype", "(", "'str'", ")", ",", "inplace", "=", "True", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.load_ci": [[25, 28], ["open", "json.load", "os.path.join"], "function", ["None"], ["", "def", "load_ci", "(", "f", ",", "xi", "=", "'close'", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'../CI'", ",", "xi", ",", "'%s.json'", "%", "f", "[", ":", "-", "4", "]", ")", ")", "as", "fp", ":", "\n", "        ", "return", "json", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.load_embedding": [[30, 36], ["open", "json.load", "os.path.join"], "function", ["None"], ["", "", "def", "load_embedding", "(", "f", ",", "xi", "=", "'close'", ",", "ti", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'../Struc2vec'", ",", "xi", ",", "'%s.json'", "%", "f", "[", ":", "-", "4", "]", ")", ")", "as", "fp", ":", "\n", "        ", "j", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "if", "ti", "is", "not", "None", ":", "\n", "        ", "return", "{", "d", ":", "j", "[", "d", "]", "for", "d", "in", "ti", "if", "d", "in", "j", "}", "\n", "", "return", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.z_score": [[38, 40], ["df.std", "df.mean"], "function", ["None"], ["", "def", "z_score", "(", "df", ")", ":", "\n", "    ", "return", "(", "df", "-", "df", ".", "mean", "(", ")", ")", "/", "df", ".", "std", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.stock_sample": [[42, 88], ["list().index", "[].copy", "numpy.array", "numpy.isnan().any", "numpy.array", "numpy.array", "numpy.isnan().any", "dataset.z_score", "len", "dataset.z_score", "numpy.array", "list", "numpy.isnan", "range", "range", "numpy.array", "numpy.isnan", "str"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.z_score", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.z_score"], ["", "def", "stock_sample", "(", "input_", ")", ":", "\n", "    ", "s", ",", "d", "=", "input_", "\n", "T", "=", "20", "\n", "df", "=", "global_df", "[", "s", "]", "\n", "if", "d", "not", "in", "df", ".", "index", ":", "\n", "        ", "return", "\n", "", "iloc", "=", "list", "(", "df", ".", "index", ")", ".", "index", "(", "d", ")", "+", "1", "\n", "if", "iloc", "<", "T", ":", "# not enough history data", "\n", "        ", "return", "\n", "", "xss", "=", "{", "}", "\n", "for", "xi", "in", "x_column", ":", "\n", "# t", "\n", "        ", "t", "=", "1", "if", "df", ".", "iloc", "[", "iloc", "+", "target", "-", "1", ",", ":", "]", "[", "xi", "]", ">", "df", ".", "loc", "[", "d", ",", "xi", "]", "else", "0", "\n", "# y", "\n", "y", "=", "df", ".", "iloc", "[", "iloc", "-", "T", ":", "iloc", "]", "[", "xi", "]", ".", "copy", "(", ")", "\n", "yz", "=", "np", ".", "array", "(", "z_score", "(", "y", ")", ")", "\n", "if", "np", ".", "isnan", "(", "yz", ")", ".", "any", "(", ")", ":", "\n", "            ", "return", "\n", "# ems", "\n", "", "ems", "=", "global_ems", "[", "s", "]", "[", "xi", "]", "\n", "if", "d", "not", "in", "ems", ":", "\n", "            ", "return", "\n", "", "keys", "=", "[", "'%s'", "%", "i", "for", "i", "in", "range", "(", "T", ")", "]", "\n", "emd", "=", "np", ".", "array", "(", "[", "ems", "[", "d", "]", "[", "k", "]", "for", "k", "in", "keys", "]", ")", "\n", "if", "len", "(", "emd", ")", "<", "T", ":", "\n", "            ", "return", "\n", "# ci", "\n", "", "cis", "=", "global_ci", "[", "s", "]", "[", "xi", "]", "\n", "if", "d", "not", "in", "cis", ":", "\n", "            ", "return", "\n", "", "cid", "=", "cis", "[", "d", "]", "\n", "cid", "=", "[", "cid", "[", "str", "(", "i", ")", "]", "for", "i", "in", "range", "(", "T", ")", "]", "\n", "ciz", "=", "np", ".", "array", "(", "z_score", "(", "np", ".", "array", "(", "cid", ")", ")", ")", "\n", "if", "np", ".", "isnan", "(", "ciz", ")", ".", "any", "(", ")", ":", "\n", "            ", "ciz", "=", "np", ".", "array", "(", "cid", ")", "\n", "", "xss", "[", "'%s_ems'", "%", "xi", "]", "=", "emd", "\n", "xss", "[", "'%s_ys'", "%", "xi", "]", "=", "yz", "\n", "xss", "[", "'%s_cis'", "%", "xi", "]", "=", "ciz", "\n", "xss", "[", "'%s_t'", "%", "xi", "]", "=", "t", "\n", "", "return", "s", ",", "d", ",", "xss", "[", "'close_t'", "]", ",", "xss", "[", "'close_ems'", "]", ",", "xss", "[", "'close_ys'", "]", ",", "xss", "[", "'close_cis'", "]", ",", "xss", "[", "'open_t'", "]", ",", "xss", "[", "'open_ems'", "]", ",", "xss", "[", "'open_ys'", "]", ",", "xss", "[", "'open_cis'", "]", ",", "xss", "[", "'high_t'", "]", ",", "xss", "[", "'high_ems'", "]", ",", "xss", "[", "'high_ys'", "]", ",", "xss", "[", "'high_cis'", "]", ",", "xss", "[", "'low_t'", "]", ",", "xss", "[", "'low_ems'", "]", ",", "xss", "[", "'low_ys'", "]", ",", "xss", "[", "'low_cis'", "]", ",", "xss", "[", "'vol_t'", "]", ",", "xss", "[", "'vol_ems'", "]", ",", "xss", "[", "'vol_ys'", "]", ",", "xss", "[", "'vol_cis'", "]", ",", "xss", "[", "'amount_t'", "]", ",", "xss", "[", "'amount_ems'", "]", ",", "xss", "[", "'amount_ys'", "]", ",", "xss", "[", "'amount_cis'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.sample_by_dates": [[90, 113], ["os.listdir", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "filter", "zip", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "sample_by_dates", "(", "dates", ")", ":", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "'../data'", ")", "\n", "fds", "=", "[", "(", "f", ",", "d", ")", "for", "d", "in", "dates", "for", "f", "in", "files", "]", "\n", "pool", "=", "Pool", "(", ")", "\n", "samples", "=", "pool", ".", "map", "(", "stock_sample", ",", "fds", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "samples", "=", "filter", "(", "lambda", "s", ":", "s", "is", "not", "None", ",", "samples", ")", "\n", "stocks", ",", "days", ",", "close_t", ",", "close_ems", ",", "close_ys", ",", "close_cis", ",", "open_t", ",", "open_ems", ",", "open_ys", ",", "open_cis", ",", "high_t", ",", "high_ems", ",", "high_ys", ",", "high_cis", ",", "low_t", ",", "low_ems", ",", "low_ys", ",", "low_cis", ",", "vol_t", ",", "vol_ems", ",", "vol_ys", ",", "vol_cis", ",", "amount_t", ",", "amount_ems", ",", "amount_ys", ",", "amount_cis", "=", "zip", "(", "*", "samples", ")", "\n", "return", "{", "'stock'", ":", "np", ".", "array", "(", "stocks", ")", ",", "'day'", ":", "np", ".", "array", "(", "days", ")", ",", "\n", "'close_t'", ":", "np", ".", "array", "(", "close_t", ")", ",", "'close_ems'", ":", "np", ".", "array", "(", "close_ems", ")", ",", "'close_ys'", ":", "np", ".", "array", "(", "close_ys", ")", ",", "'close_cis'", ":", "np", ".", "array", "(", "close_cis", ")", ",", "\n", "'open_t'", ":", "np", ".", "array", "(", "open_t", ")", ",", "'open_ems'", ":", "np", ".", "array", "(", "open_ems", ")", ",", "'open_ys'", ":", "np", ".", "array", "(", "open_ys", ")", ",", "'open_cis'", ":", "np", ".", "array", "(", "open_cis", ")", ",", "\n", "'high_t'", ":", "np", ".", "array", "(", "high_t", ")", ",", "'high_ems'", ":", "np", ".", "array", "(", "high_ems", ")", ",", "'high_ys'", ":", "np", ".", "array", "(", "high_ys", ")", ",", "'high_cis'", ":", "np", ".", "array", "(", "high_cis", ")", ",", "\n", "'low_t'", ":", "np", ".", "array", "(", "low_t", ")", ",", "'low_ems'", ":", "np", ".", "array", "(", "low_ems", ")", ",", "'low_ys'", ":", "np", ".", "array", "(", "low_ys", ")", ",", "'low_cis'", ":", "np", ".", "array", "(", "low_cis", ")", ",", "\n", "'vol_t'", ":", "np", ".", "array", "(", "vol_t", ")", ",", "'vol_ems'", ":", "np", ".", "array", "(", "vol_ems", ")", ",", "'vol_ys'", ":", "np", ".", "array", "(", "vol_ys", ")", ",", "'vol_cis'", ":", "np", ".", "array", "(", "vol_cis", ")", ",", "\n", "'amount_t'", ":", "np", ".", "array", "(", "amount_t", ")", ",", "'amount_ems'", ":", "np", ".", "array", "(", "amount_ems", ")", ",", "'amount_ys'", ":", "np", ".", "array", "(", "amount_ys", ")", ",", "'amount_cis'", ":", "np", ".", "array", "(", "amount_cis", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.generate_data_year": [[116, 125], ["datetime.datetime", "dataset.sample_by_dates", "open", "pickle.dump", "range", "dataset.load_embedding", "os.path.join", "datetime.timedelta"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.sample_by_dates", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.load_embedding"], ["", "def", "generate_data_year", "(", "year", ")", ":", "\n", "    ", "global", "global_ems", "\n", "start_date", "=", "datetime", "(", "year", ",", "1", ",", "1", ")", "\n", "days", "=", "[", "(", "start_date", "+", "timedelta", "(", "days", "=", "i", ")", ")", ".", "strftime", "(", "'%Y%m%d'", ")", "for", "i", "in", "range", "(", "366", ")", "]", "\n", "days", "=", "[", "d", "for", "d", "in", "days", "if", "'%s0101'", "%", "year", "<=", "d", "<=", "'%s1231'", "%", "year", "]", "\n", "global_ems", "=", "{", "f", ":", "{", "xc", ":", "load_embedding", "(", "f", ",", "xc", ",", "days", ")", "for", "xc", "in", "x_column", "}", "for", "f", "in", "files", "}", "\n", "dataset", "=", "sample_by_dates", "(", "days", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'../dataset'", ",", "'%s.pickle'", "%", "year", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "dataset", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.generate_data_season": [[127, 137], ["datetime.datetime", "dataset.sample_by_dates", "str().zfill", "str().zfill", "open", "pickle.dump", "range", "dataset.load_embedding", "os.path.join", "str", "str", "datetime.timedelta"], "function", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.sample_by_dates", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.dataset.load_embedding"], ["", "", "def", "generate_data_season", "(", "year", ",", "season", ")", ":", "\n", "    ", "global", "global_ems", "\n", "start_date", "=", "datetime", "(", "year", ",", "sm", ",", "1", ")", "\n", "days", "=", "[", "(", "start_date", "+", "timedelta", "(", "days", "=", "i", ")", ")", ".", "strftime", "(", "'%Y%m%d'", ")", "for", "i", "in", "range", "(", "366", ")", "]", "\n", "sm", ",", "em", "=", "str", "(", "(", "season", "-", "1", ")", "*", "3", "+", "1", ")", ".", "zfill", "(", "2", ")", ",", "str", "(", "season", "*", "3", ")", ".", "zfill", "(", "2", ")", "\n", "days", "=", "[", "d", "for", "d", "in", "days", "if", "'%s%s01'", "%", "(", "year", ",", "sm", ")", "<=", "d", "<=", "'%s%s31'", "%", "(", "year", ",", "em", ")", "]", "\n", "global_ems", "=", "{", "f", ":", "{", "xc", ":", "load_embedding", "(", "f", ",", "xc", ",", "days", ")", "for", "xc", "in", "x_column", "}", "for", "f", "in", "files", "}", "\n", "dataset", "=", "sample_by_dates", "(", "days", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'../dataset'", ",", "'%s_S%s.pickle'", "%", "(", "year", ",", "season", ")", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "dataset", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.code.price_graph.make_visibility_graph": [[19, 38], ["os.path.join", "os.path.join", "pandas.read_csv", "pd.read_csv.set_index", "os.path.join", "pd.read_csv.index.astype", "list().index", "pyunicorn.timeseries.visibility_graph.VisibilityGraph", "open", "pickle.dump", "len", "list", "set"], "function", ["None"], ["def", "make_visibility_graph", "(", "input_", ")", ":", "\n", "    ", "file_", ",", "PI", ",", "T", "=", "input_", "\n", "vg_dir", "=", "os", ".", "path", ".", "join", "(", "'../VG'", ",", "PI", ")", "\n", "vg_file", "=", "os", ".", "path", ".", "join", "(", "vg_dir", ",", "'%s.pickle'", "%", "file_", "[", ":", "-", "4", "]", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "'../data'", ",", "file_", ")", ",", "index_col", "=", "0", ")", "\n", "df", ".", "set_index", "(", "df", ".", "index", ".", "astype", "(", "'str'", ")", ",", "inplace", "=", "True", ")", "\n", "vgs", "=", "{", "}", "\n", "for", "i", "in", "df", ".", "index", ":", "\n", "        ", "iloc", "=", "list", "(", "df", ".", "index", ")", ".", "index", "(", "i", ")", "\n", "if", "df", ".", "loc", "[", ":", "i", ",", ":", "]", ".", "shape", "[", "0", "]", "<", "T", ":", "\n", "            ", "continue", "\n", "", "time_series", "=", "df", ".", "iloc", "[", "iloc", "-", "T", "+", "1", ":", "iloc", "+", "1", "]", "[", "PI", "]", "\n", "if", "len", "(", "set", "(", "time_series", ".", "values", ")", ")", "==", "1", ":", "\n", "            ", "continue", "\n", "", "net", "=", "timeseries", ".", "visibility_graph", ".", "VisibilityGraph", "(", "time_series", ".", "values", ")", "\n", "vgs", "[", "i", "]", "=", "net", ".", "adjacency", "\n", "", "with", "open", "(", "vg_file", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "vgs", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.ci.collective_influence": [[19, 74], ["dict", "G.nodes", "networkx.single_source_shortest_path_length", "G.degree", "reduced_degree", "sum", "nx.single_source_shortest_path_length.items", "map"], "function", ["None"], ["def", "collective_influence", "(", "G", ",", "u", "=", "None", ",", "distance", "=", "2", ")", ":", "\n", "    ", "r\"\"\"Collective influence of a network node.\n    The collective influence [1]_ [2]_ of a network node is the product of its\n    reduced degree and the total reduced degree of all nodes at distance `d`\n    from it.\n    .. math::\n        \\text{CI}_l (i) = (k_i - 1) \\sum_{j \\in \\partial \\text{Ball}(i,j)} (k_j - 1)\n    Collective influence describes how many nodes can be reached from a given\n    node. Removing nodes with high collective influence is more effective in\n    fragmenting and destroying a network than nodes selected by other methods\n    (e.g. PageRank or closeness centrality).\n    Parameters\n    ---------\n    G : graph\n      A NetworkX graph\n    u : node, optional\n      Return only the value for node u\n    distance : optional (default=2)\n    Returns\n    -------\n    nodes : dictionary\n      Dictionary of nodes with collective influence as the value.\n    References\n    ----------\n      [1] Flaviano Morone and Hern\u00e1n A. Makse:\n      Influence maximization in complex networks through optimal percolation\n      Nature 524, 65\u201368 (06 August 2015)\n      doi: 10.1038/nature14604\n      [2] Istv\u00e1n A. Kov\u00e1cs and Albert-L\u00e1szl\u00f3 Barab\u00e1si:\n      Network science: Destruction perfected\n      Nature 524, 38\u201339 (06 August 2015)\n      doi: 10.1038/524038a\n    \"\"\"", "\n", "\n", "reduced_degree", "=", "lambda", "node", ":", "G", ".", "degree", "(", "node", ")", "-", "1", "\n", "\n", "if", "u", "is", "None", ":", "\n", "        ", "nodes", "=", "G", ".", "nodes", "(", ")", "\n", "", "else", ":", "\n", "        ", "nodes", "=", "[", "u", "]", "\n", "", "collective_influence", "=", "dict", "(", ")", "\n", "for", "node", "in", "nodes", ":", "\n", "# Find all nodes at 'distance' steps from node", "\n", "        ", "path_lengths", "=", "nx", ".", "single_source_shortest_path_length", "(", "\n", "G", ",", "source", "=", "node", ",", "cutoff", "=", "distance", "\n", ")", "\n", "frontier_nodes", "=", "{", "\n", "node", "for", "node", ",", "path_length", "in", "path_lengths", ".", "items", "(", ")", "\n", "if", "path_length", "==", "distance", "\n", "}", "\n", "collective_influence", "[", "node", "]", "=", "reduced_degree", "(", "node", ")", "*", "sum", "(", "map", "(", "reduced_degree", ",", "frontier_nodes", ")", ")", "\n", "", "if", "u", "is", "not", "None", ":", "\n", "        ", "return", "collective_influence", "[", "u", "]", "\n", "", "else", ":", "\n", "        ", "return", "collective_influence", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnEncoder.__init__": [[11, 26], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "time_step", ",", "drop_ratio", ")", ":", "\n", "        ", "super", "(", "AttnEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "T", "=", "time_step", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "1", ")", "\n", "# nn.Linear: y=xA+b", "\n", "self", ".", "attn1", "=", "nn", ".", "Linear", "(", "in_features", "=", "2", "*", "hidden_size", ",", "out_features", "=", "self", ".", "T", ")", "\n", "self", ".", "attn2", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "T", ",", "out_features", "=", "self", ".", "T", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "attn3", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "T", ",", "out_features", "=", "1", ")", "\n", "#self.attn = nn.Sequential(attn1, attn2, nn.Tanh(), attn3)", "\n", "self", ".", "drop_ratio", "=", "drop_ratio", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_ratio", "/", "100.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnEncoder.forward": [[28, 68], ["model.AttnEncoder.drop", "model.AttnEncoder.size", "model.AttnEncoder.init_variable", "model.AttnEncoder.init_variable", "model.AttnEncoder.init_variable", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.AttnEncoder.attn1", "model.AttnEncoder.attn2", "model.AttnEncoder.attn3", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.AttnEncoder.lstm", "model.AttnEncoder.drop", "model.AttnEncoder.permute", "model.AttnEncoder.tanh", "torch.softmax", "torch.softmax", "torch.mul.unsqueeze", "torch.mul.unsqueeze", "model.AttnEncoder.embedding_hidden", "model.AttnEncoder.embedding_hidden", "model.AttnEncoder.view", "model.AttnEncoder.init_variable"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.embedding_hidden", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.embedding_hidden", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable"], ["", "def", "forward", "(", "self", ",", "driving_x", ")", ":", "\n", "# driving_x: batch_size, T, input_size", "\n", "        ", "driving_x", "=", "self", ".", "drop", "(", "driving_x", ")", "\n", "batch_size", "=", "driving_x", ".", "size", "(", "0", ")", "\n", "# batch_size * time_step * hidden_size", "\n", "code", "=", "self", ".", "init_variable", "(", "batch_size", ",", "self", ".", "T", ",", "self", ".", "hidden_size", ")", "\n", "# initialize hidden state (output)", "\n", "h", "=", "self", ".", "init_variable", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "# initialize cell state", "\n", "s", "=", "self", ".", "init_variable", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "for", "t", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "# batch_size * input_size * (2 * hidden_size)", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "embedding_hidden", "(", "h", ")", ",", "self", ".", "embedding_hidden", "(", "s", ")", ")", ",", "2", ")", "\n", "# batch_size * input_size * T", "\n", "z1", "=", "self", ".", "attn1", "(", "x", ")", "\n", "# batch_size * input_size * T", "\n", "z2", "=", "self", ".", "attn2", "(", "driving_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "# batch_size * input_size * T", "\n", "x", "=", "z1", "+", "z2", "\n", "# batch_size * input_size * 1", "\n", "z3", "=", "self", ".", "attn3", "(", "self", ".", "tanh", "(", "x", ")", ")", "\n", "if", "batch_size", ">", "1", ":", "\n", "# batch_size * input_size", "\n", "                ", "attn_w", "=", "F", ".", "softmax", "(", "z3", ".", "view", "(", "batch_size", ",", "self", ".", "input_size", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "attn_w", "=", "self", ".", "init_variable", "(", "batch_size", ",", "self", ".", "input_size", ")", "+", "1", "\n", "# batch_size * input_size (element dot multi)", "\n", "", "weighted_x", "=", "torch", ".", "mul", "(", "attn_w", ",", "driving_x", "[", ":", ",", "t", ",", ":", "]", ")", "\n", "_", ",", "states", "=", "self", ".", "lstm", "(", "weighted_x", ".", "unsqueeze", "(", "0", ")", ",", "(", "h", ",", "s", ")", ")", "\n", "h", "=", "states", "[", "0", "]", "# 1, batch_size, hidden_size", "\n", "s", "=", "states", "[", "1", "]", "\n", "\n", "# encoding result", "\n", "# batch_size * time_step * encoder_hidden_size", "\n", "code", "[", ":", ",", "t", ",", ":", "]", "=", "h", "\n", "\n", "", "if", "self", ".", "drop_ratio", ">", "0", ":", "\n", "            ", "code", "=", "self", ".", "drop", "(", "code", ")", "\n", "\n", "", "return", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnEncoder.init_variable": [[69, 74], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "zero_tensor.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "init_variable", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "zero_tensor", "=", "torch", ".", "zeros", "(", "args", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "zero_tensor", "=", "zero_tensor", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "zero_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnEncoder.embedding_hidden": [[75, 77], ["x.repeat().permute", "x.repeat"], "methods", ["None"], ["", "def", "embedding_hidden", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "repeat", "(", "self", ".", "input_size", ",", "1", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.__init__": [[80, 94], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "code_hidden_size", ",", "hidden_size", ",", "time_step", ")", ":", "\n", "        ", "super", "(", "AttnDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "code_hidden_size", "=", "code_hidden_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "T", "=", "time_step", "\n", "\n", "self", ".", "attn1", "=", "nn", ".", "Linear", "(", "in_features", "=", "2", "*", "hidden_size", ",", "out_features", "=", "code_hidden_size", ")", "\n", "self", ".", "attn2", "=", "nn", ".", "Linear", "(", "in_features", "=", "code_hidden_size", ",", "out_features", "=", "code_hidden_size", ")", "\n", "self", ".", "attn_ci", "=", "nn", ".", "Linear", "(", "in_features", "=", "time_step", ",", "out_features", "=", "code_hidden_size", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "attn3", "=", "nn", ".", "Linear", "(", "in_features", "=", "code_hidden_size", ",", "out_features", "=", "1", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "1", ",", "hidden_size", "=", "self", ".", "hidden_size", ")", "\n", "self", ".", "tilde", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "code_hidden_size", "+", "1", ",", "out_features", "=", "1", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "in_features", "=", "code_hidden_size", "+", "hidden_size", ",", "out_features", "=", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.forward": [[95, 137], ["h.size", "model.AttnDecoder.init_variable", "model.AttnDecoder.init_variable", "model.AttnDecoder.init_variable", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.AttnDecoder.output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.AttnDecoder.attn1", "model.AttnDecoder.attn2", "model.AttnDecoder.attn_ci", "model.AttnDecoder.attn3", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.AttnDecoder.tilde", "model.AttnDecoder.lstm", "model.AttnDecoder.embedding_hidden", "model.AttnDecoder.tanh", "torch.softmax", "torch.softmax", "model.AttnDecoder.unsqueeze", "model.AttnDecoder.squeeze", "model.AttnDecoder.embedding_hidden", "model.AttnDecoder.embedding_hidden", "cis.unsqueeze", "model.AttnDecoder.view", "model.AttnDecoder.init_variable", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "y_seq[].unsqueeze", "torch.softmax.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.embedding_hidden", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.embedding_hidden", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.embedding_hidden", "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable"], ["", "def", "forward", "(", "self", ",", "h", ",", "y_seq", ",", "cis", ")", ":", "\n", "# h: batch_size * time_step * layer1_hidden_size", "\n", "# y_seq: batch_size * time_step", "\n", "# cis: batch_size * time_step", "\n", "        ", "batch_size", "=", "h", ".", "size", "(", "0", ")", "\n", "d", "=", "self", ".", "init_variable", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "s", "=", "self", ".", "init_variable", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "ct", "=", "self", ".", "init_variable", "(", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "# batch_size * time_step * (2 * decoder_hidden_size)", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "embedding_hidden", "(", "d", ")", ",", "self", ".", "embedding_hidden", "(", "s", ")", ")", ",", "2", ")", "\n", "# batch_size * time_step * layer1_hidden_size", "\n", "z1", "=", "self", ".", "attn1", "(", "x", ")", "\n", "# batch_size * time_step * layer1_hidden_size", "\n", "z2", "=", "self", ".", "attn2", "(", "h", ")", "\n", "# b * T --> 1 * b * T --> b * T * T --> b * T * layer1_hidden_size", "\n", "zci", "=", "self", ".", "attn_ci", "(", "self", ".", "embedding_hidden", "(", "cis", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "x", "=", "z1", "+", "z2", "+", "zci", "\n", "# batch_size * time_step * 1", "\n", "z3", "=", "self", ".", "attn3", "(", "self", ".", "tanh", "(", "x", ")", ")", "\n", "if", "batch_size", ">", "1", ":", "\n", "# batch_size * time_step", "\n", "                ", "beta_t", "=", "F", ".", "softmax", "(", "z3", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "beta_t", "=", "self", ".", "init_variable", "(", "batch_size", ",", "self", ".", "code_hidden_size", ")", "+", "1", "\n", "# batch_size * layer1_hidden_size", "\n", "# batch matrix mul: \u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662fbatch_size\uff0c\u7136\u540e\u5269\u4e0b\u7684\u5f53\u666e\u901a\u77e9\u9635\u4e58", "\n", "", "ct", "=", "torch", ".", "bmm", "(", "beta_t", ".", "unsqueeze", "(", "1", ")", ",", "h", ")", ".", "squeeze", "(", "1", ")", "# (b, 1, T) * (b, T, m)", "\n", "# batch_size * (1 + layer1_hidden_size)", "\n", "yc", "=", "torch", ".", "cat", "(", "(", "y_seq", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", ",", "ct", ")", ",", "dim", "=", "1", ")", "\n", "# batch_size * (1 + layer1_hidden_size)", "\n", "y_tilde", "=", "self", ".", "tilde", "(", "yc", ")", "\n", "_", ",", "states", "=", "self", ".", "lstm", "(", "y_tilde", ".", "unsqueeze", "(", "0", ")", ",", "(", "d", ",", "s", ")", ")", "\n", "d", "=", "states", "[", "0", "]", "# 1, batch_size, hidden_size", "\n", "s", "=", "states", "[", "1", "]", "\n", "\n", "# return d.squeese(0)", "\n", "# batch_size * (hidden_size + last_layer_hidden_size)", "\n", "", "dt_ct", "=", "torch", ".", "cat", "(", "(", "d", ".", "squeeze", "(", "0", ")", ",", "ct", ")", ",", "dim", "=", "1", ")", "\n", "# batch_size * hidden_size", "\n", "return", "self", ".", "output", "(", "dt_ct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.init_variable": [[138, 143], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "zero_tensor.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "init_variable", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "zero_tensor", "=", "torch", ".", "zeros", "(", "args", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "zero_tensor", "=", "zero_tensor", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "zero_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.AttnDecoder.embedding_hidden": [[144, 146], ["x.repeat().permute", "x.repeat"], "methods", ["None"], ["", "def", "embedding_hidden", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "repeat", "(", "self", ".", "T", ",", "1", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.DarnnCI.__init__": [[149, 153], ["torch.nn.Module.__init__", "model.AttnEncoder", "model.AttnDecoder"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "time_step", ",", "drop_ratio", ")", ":", "\n", "        ", "super", "(", "DarnnCI", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "AttnEncoder", "(", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "time_step", "=", "time_step", ",", "drop_ratio", "=", "drop_ratio", ")", "\n", "self", ".", "layer2", "=", "AttnDecoder", "(", "code_hidden_size", "=", "hidden_size", ",", "hidden_size", "=", "hidden_size", ",", "time_step", "=", "time_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.DarnnCI.forward": [[154, 158], ["model.DarnnCI.layer1", "model.DarnnCI.layer2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "var_x", ",", "var_y", ",", "var_ci", ")", ":", "\n", "        ", "out1", "=", "self", ".", "layer1", "(", "var_x", ")", "\n", "out2", "=", "self", ".", "layer2", "(", "out1", ",", "var_y", ",", "var_ci", ")", "\n", "return", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.SelfAttention.__init__": [[161, 169], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_hidden_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "SelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "last_hidden_size", "=", "last_hidden_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "self", ".", "wq", "=", "nn", ".", "Linear", "(", "in_features", "=", "last_hidden_size", ",", "out_features", "=", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "wk", "=", "nn", ".", "Linear", "(", "in_features", "=", "last_hidden_size", ",", "out_features", "=", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "wv", "=", "nn", ".", "Linear", "(", "in_features", "=", "last_hidden_size", ",", "out_features", "=", "hidden_size", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.SelfAttention.forward": [[170, 181], ["model.SelfAttention.wq", "model.SelfAttention.wk", "model.SelfAttention.wv", "model.SelfAttention.size", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "math.sqrt", "model.SelfAttention.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "# h: batch_size * last_hidden_size", "\n", "        ", "q", "=", "self", ".", "wq", "(", "h", ")", "\n", "k", "=", "self", ".", "wk", "(", "h", ")", "\n", "v", "=", "self", ".", "wv", "(", "h", ")", "\n", "\n", "dk", "=", "q", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "torch", ".", "mm", "(", "q", ",", "k", ".", "t", "(", ")", ")", "/", "math", ".", "sqrt", "(", "dk", ")", "# (b, hidden_size) * (hidden_size, b) ==> (b, b)", "\n", "beta", "=", "F", ".", "softmax", "(", "z", ",", "dim", "=", "1", ")", "\n", "st", "=", "torch", ".", "mm", "(", "beta", ",", "v", ")", "# (b, b) * (b, hidden_size) ==> (b, hidden_size)", "\n", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.PriceGraph.__init__": [[184, 188], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.SelfAttention", "model.DarnnCI", "range"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "time_step", ",", "drop_ratio", ")", ":", "\n", "        ", "super", "(", "PriceGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "das", "=", "nn", ".", "ModuleList", "(", "[", "DarnnCI", "(", "input_size", ",", "hidden_size", ",", "time_step", ",", "drop_ratio", ")", "for", "i", "in", "range", "(", "6", ")", "]", ")", "\n", "self", ".", "attn", "=", "SelfAttention", "(", "hidden_size", ",", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.PriceGraph.forward": [[189, 195], ["range", "model.PriceGraph.attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "var", ")", ":", "\n", "        ", "out", "=", "0", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "out", "+=", "self", ".", "das", "[", "i", "]", "(", "var", "[", "i", "]", "[", "'ems'", "]", ",", "var", "[", "i", "]", "[", "'ys'", "]", ",", "var", "[", "i", "]", "[", "'cis'", "]", ")", "\n", "# batch * hidden_size", "\n", "", "return", "self", ".", "attn", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.__init__": [[198, 202], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_hidden_size", ",", "output_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "output_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ln", "=", "nn", ".", "Linear", "(", "in_features", "=", "last_hidden_size", ",", "out_features", "=", "output_size", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BUAA-WJR_PriceGraph.lib.model.output_layer.forward": [[203, 209], ["model.output_layer.ln", "model.output_layer.sigmoid", "model.output_layer.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "st", ")", ":", "\n", "#st: b * last_hidden_size", "\n", "        ", "y_res", "=", "self", ".", "ln", "(", "st", ")", "\n", "# y_res: (batch_size, 1)", "\n", "y_res", "=", "self", ".", "sigmoid", "(", "y_res", ".", "squeeze", "(", "1", ")", ")", "\n", "return", "y_res", "# batch_size", "\n", "\n"]]}