{"home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.transforms.Random2DTranslation.__init__": [[17, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "p", "=", "0.5", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.transforms.Random2DTranslation.__call__": [[23, 41], ["img.resize", "int", "int", "img.resize.crop", "random.random", "img.resize", "int", "int", "round", "round", "round", "round", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "", "new_width", ",", "new_height", "=", "int", "(", "round", "(", "self", ".", "width", "*", "1.125", ")", ")", ",", "int", "(", "round", "(", "self", ".", "height", "*", "1.125", ")", ")", "\n", "resized_img", "=", "img", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ",", "self", ".", "interpolation", ")", "\n", "x_maxrange", "=", "new_width", "-", "self", ".", "width", "\n", "y_maxrange", "=", "new_height", "-", "self", ".", "height", "\n", "x1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "x_maxrange", ")", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "y_maxrange", ")", ")", ")", "\n", "croped_img", "=", "resized_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "width", ",", "y1", "+", "self", ".", "height", ")", ")", "\n", "return", "croped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.Mars.__init__": [[34, 95], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "data_manager.Mars._check_before_run", "data_manager.Mars._get_names", "data_manager.Mars._get_names", "[].squeeze", "data_manager.Mars._process_data", "data_manager.Mars._process_data", "data_manager.Mars._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "scipy.io.loadmat", "scipy.io.loadmat", "range", "scipy.io.loadmat"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._check_before_run", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.Mars._get_names", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.Mars._get_names", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data"], ["def", "__init__", "(", "self", ",", "root", "=", "'/media/socialab/4C09C760503E353F/Datasets/MARS'", ",", "min_seq_len", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'mars'", ")", "\n", "\n", "root", "=", "self", ".", "root", "\n", "self", ".", "train_name_path", "=", "osp", ".", "join", "(", "root", ",", "'info/train_name.txt'", ")", "\n", "self", ".", "test_name_path", "=", "osp", ".", "join", "(", "root", ",", "'info/test_name.txt'", ")", "\n", "self", ".", "track_train_info_path", "=", "osp", ".", "join", "(", "root", ",", "'info/tracks_train_info.mat'", ")", "\n", "self", ".", "track_test_info_path", "=", "osp", ".", "join", "(", "root", ",", "'info/tracks_test_info.mat'", ")", "\n", "self", ".", "query_IDX_path", "=", "osp", ".", "join", "(", "root", ",", "'info/query_IDX.mat'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "# prepare meta data", "\n", "train_names", "=", "self", ".", "_get_names", "(", "self", ".", "train_name_path", ")", "\n", "test_names", "=", "self", ".", "_get_names", "(", "self", ".", "test_name_path", ")", "\n", "track_train", "=", "loadmat", "(", "self", ".", "track_train_info_path", ")", "[", "'track_train_info'", "]", "# numpy.ndarray (8298, 4)", "\n", "track_test", "=", "loadmat", "(", "self", ".", "track_test_info_path", ")", "[", "'track_test_info'", "]", "# numpy.ndarray (12180, 4)", "\n", "query_IDX", "=", "loadmat", "(", "self", ".", "query_IDX_path", ")", "[", "'query_IDX'", "]", ".", "squeeze", "(", ")", "# numpy.ndarray (1980,)", "\n", "query_IDX", "-=", "1", "# index from 0", "\n", "track_query", "=", "track_test", "[", "query_IDX", ",", ":", "]", "\n", "gallery_IDX", "=", "[", "i", "for", "i", "in", "range", "(", "track_test", ".", "shape", "[", "0", "]", ")", "if", "i", "not", "in", "query_IDX", "]", "\n", "track_gallery", "=", "track_test", "[", "gallery_IDX", ",", ":", "]", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_train_imgs", "=", "self", ".", "_process_data", "(", "train_names", ",", "track_train", ",", "home_dir", "=", "'bbox_train'", ",", "relabel", "=", "True", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_query_imgs", "=", "self", ".", "_process_data", "(", "test_names", ",", "track_query", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_gallery_imgs", "=", "self", ".", "_process_data", "(", "test_names", ",", "track_gallery", ",", "home_dir", "=", "'bbox_test'", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "min_seq_len", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_train_imgs", "+", "num_query_imgs", "+", "num_gallery_imgs", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> MARS loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.Mars._check_before_run": [[96, 110], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_name_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_name_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_train_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_train_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "track_test_info_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "track_test_info_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_IDX_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_IDX_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.Mars._get_names": [[111, 118], ["open", "line.rstrip", "names.append"], "methods", ["None"], ["", "", "def", "_get_names", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "new_line", "=", "line", ".", "rstrip", "(", ")", "\n", "names", ".", "append", "(", "new_line", ")", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.Mars._process_data": [[119, 156], ["list", "len", "range", "len", "set", "meta_data[].tolist", "len", "len", "os.join", "os.join", "len", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "enumerate", "set", "set", "len"], "methods", ["None"], ["", "def", "_process_data", "(", "self", ",", "names", ",", "meta_data", ",", "home_dir", "=", "None", ",", "relabel", "=", "False", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "assert", "home_dir", "in", "[", "'bbox_train'", ",", "'bbox_test'", "]", "\n", "num_tracklets", "=", "meta_data", ".", "shape", "[", "0", "]", "\n", "pid_list", "=", "list", "(", "set", "(", "meta_data", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", ")", ")", "\n", "num_pids", "=", "len", "(", "pid_list", ")", "\n", "\n", "if", "relabel", ":", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_list", ")", "}", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "\n", "for", "tracklet_idx", "in", "range", "(", "num_tracklets", ")", ":", "\n", "            ", "data", "=", "meta_data", "[", "tracklet_idx", ",", "...", "]", "\n", "start_index", ",", "end_index", ",", "pid", ",", "camid", "=", "data", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "img_names", "=", "names", "[", "start_index", "-", "1", ":", "end_index", "]", "\n", "\n", "# make sure image names correspond to the same person", "\n", "pnames", "=", "[", "img_name", "[", ":", "4", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "pnames", ")", ")", "==", "1", ",", "\"Error: a single tracklet contains different person images\"", "\n", "\n", "# make sure all images are captured under the same camera", "\n", "camnames", "=", "[", "img_name", "[", "5", "]", "for", "img_name", "in", "img_names", "]", "\n", "assert", "len", "(", "set", "(", "camnames", ")", ")", "==", "1", ",", "\"Error: images are captured under different cameras!\"", "\n", "\n", "# append image names with directory information", "\n", "img_paths", "=", "[", "osp", ".", "join", "(", "self", ".", "root", ",", "home_dir", ",", "img_name", "[", ":", "4", "]", ",", "img_name", ")", "for", "img_name", "in", "img_names", "]", "\n", "if", "len", "(", "img_paths", ")", ">=", "min_seq_len", ":", "\n", "                ", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_paths", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PRID2011.__init__": [[181, 227], ["data_manager.PRID2011._check_before_run", "utils.read_json", "print", "print", "data_manager.PRID2011._process_data", "data_manager.PRID2011._process_data", "data_manager.PRID2011._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "len", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._check_before_run", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.read_json", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data"], ["def", "__init__", "(", "self", ",", "split_id", "=", "0", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "self", ".", "_check_before_run", "(", ")", "\n", "splits", "=", "read_json", "(", "self", ".", "split_path", ")", "\n", "print", "(", "len", "(", "splits", ")", ")", "\n", "if", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"split_id exceeds range, received {}, but expected between 0 and {}\"", ".", "format", "(", "split_id", ",", "len", "(", "splits", ")", "-", "1", ")", ")", "\n", "", "split", "=", "splits", "[", "split_id", "]", "\n", "train_dirs", ",", "test_dirs", "=", "split", "[", "'train'", "]", ",", "split", "[", "'test'", "]", "\n", "print", "(", "\"# train identites: {}, # test identites {}\"", ".", "format", "(", "len", "(", "train_dirs", ")", ",", "len", "(", "test_dirs", ")", ")", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_data", "(", "train_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "False", ",", "cam2", "=", "True", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> PRID-2011 loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PRID2011._check_before_run": [[228, 232], ["os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PRID2011._process_data": [[233, 261], ["len", "len", "enumerate", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "len", "len", "os.join", "os.join", "len", "len"], "methods", ["None"], ["", "", "def", "_process_data", "(", "self", ",", "dirnames", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", ":", "\n", "        ", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "dirnames", ")", "}", "\n", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "if", "cam1", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_a_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "0", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "if", "cam2", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_b_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "1", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "num_pids", "=", "len", "(", "dirnames", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE.__init__": [[300, 368], ["data_manager.PDESTRE._check_before_run", "print", "data_manager.PDESTRE._read_seqmaps", "data_manager.PDESTRE._read_seqmaps", "data_manager.PDESTRE._read_seqmaps", "print", "list", "data_manager.PDESTRE._process_data", "list", "data_manager.PDESTRE._process_data", "data_manager.PDESTRE._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "ValueError", "open", "str", "str", "str", "len", "len", "len", "str", "f.write", "f.write"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._check_before_run", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE._read_seqmaps", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE._read_seqmaps", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE._read_seqmaps", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.write", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.write"], ["def", "__init__", "(", "self", ",", "split_id", "=", "0", ",", "min_seq_len", "=", "0", ")", ":", "\n", "        ", "self", ".", "_check_before_run", "(", ")", "\n", "max_splits", "=", "5", "\n", "print", "(", "split_id", ")", "\n", "if", "split_id", ">", "(", "max_splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"split_id exceeds range, received {}, but expected between 0 and {}\"", ".", "format", "(", "split_id", ",", "(", "max_splits", ")", "-", "1", ")", ")", "\n", "# splits = read_json(self.split_path)", "\n", "# if split_id >= len(splits):", "\n", "#     raise ValueError(", "\n", "#         \"split_id exceeds range, received {}, but expected between 0 and {}\".format(split_id, len(splits) - 1))", "\n", "# split = splits[split_id]", "\n", "# train_dirs, query_dirs,test_dirs = split['Train'],split['Test'],split['Query']", "\n", "", "Train_name", "=", "self", ".", "split_path", "+", "'Train_'", "+", "str", "(", "split_id", ")", "+", "'.txt'", "\n", "train_dirs", "=", "self", ".", "_read_seqmaps", "(", "Train_name", ")", "\n", "query_name", "=", "self", ".", "split_path", "+", "'Query_'", "+", "str", "(", "split_id", ")", "+", "'.txt'", "\n", "query_dirs", "=", "self", ".", "_read_seqmaps", "(", "query_name", ")", "\n", "gallery_name", "=", "self", ".", "split_path", "+", "'Gallery_'", "+", "str", "(", "split_id", ")", "+", "'.txt'", "\n", "test_dirs", "=", "self", ".", "_read_seqmaps", "(", "gallery_name", ")", "\n", "print", "(", "\"# train videos: {}, # Query videos {}, # Gallery videos {}\"", ".", "format", "(", "len", "(", "train_dirs", ")", ",", "len", "(", "query_dirs", ")", ",", "\n", "len", "(", "test_dirs", ")", ")", ")", "\n", "# print(\"train\")", "\n", "train_dir2pid", "=", "list", "(", ")", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", ",", "train_pid_list", "=", "self", ".", "_process_data", "(", "train_dirs", ",", "train_dir2pid", ",", "0", ")", "\n", "# print(\"query\")", "\n", "test_dir2pid", "=", "list", "(", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", ",", "test_pid_list", "=", "self", ".", "_process_data", "(", "query_dirs", ",", "test_dir2pid", ",", "0", ")", "\n", "# print(\"gallery\")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", ",", "gal_pid_list", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "test_pid_list", ",", "1", ")", "\n", "##save the list for display", "\n", "text_file", "=", "self", ".", "test_out_path", "+", "'/test_outnew1_'", "+", "str", "(", "split_id", ")", "+", "'.txt'", "\n", "cout_list", "=", "0", "\n", "with", "open", "(", "text_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "item", "in", "gal_pid_list", ":", "\n", "                ", "f", ".", "write", "(", "\"%s,\"", "%", "cout_list", ")", "\n", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "cout_list", "+=", "1", "\n", "", "", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "+", "num_gallery_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> PDESTRE loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE._read_seqmaps": [[369, 378], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "open", "line.strip", "fid.readlines"], "methods", ["None"], ["", "def", "_read_seqmaps", "(", "self", ",", "fname", ")", ":", "\n", "        ", "\"\"\"\n        seqmap: list the sequence name to be evaluated\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", ",", "'File %s not exists!'", "%", "fname", "\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "fid", ":", "\n", "            ", "lines", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "fid", ".", "readlines", "(", ")", "]", "\n", "seqnames", "=", "lines", "\n", "", "return", "seqnames", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE._check_before_run": [[379, 383], ["os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE.keyFunc": [[384, 387], ["re.compile", "int", "re.compile.sub"], "methods", ["None"], ["", "", "def", "keyFunc", "(", "afilename", ")", ":", "\n", "        ", "nondigits", "=", "re", ".", "compile", "(", "\"\\D\"", ")", "\n", "return", "int", "(", "nondigits", ".", "sub", "(", "\"\"", ",", "afilename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.PDESTRE._process_data": [[388, 465], ["list", "len", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.join", "os.join", "list", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "len", "len", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "enumerate", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "open", "int", "pid_folder.split", "enumerate", "int", "os.join", "os.join", "glob.glob", "list", "tuple", "pid_folder.split", "tracklets.append", "num_imgs_per_tracklet.append", "str", "f.write", "f.write", "dir2pid.append", "os.join", "os.join", "os.path.getsize", "os.path.getsize", "os.path.getsize", "os.path.getsize", "len", "len", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.write", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.write"], ["", "def", "_process_data", "(", "self", ",", "dirnames", ",", "dir2pid", ",", "test_flag", ")", ":", "\n", "        ", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "##convert PID", "\n", "PID_LIST", "=", "list", "(", ")", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "pid_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "dirname", ")", "\n", "P_ID", "=", "os", ".", "path", ".", "basename", "(", "pid_path", ")", "[", ":", "-", "2", "]", "\n", "pid_dirnames", "=", "os", ".", "listdir", "(", "pid_path", ")", "\n", "#    listOfFiles += [os.path.join(dirpath, file) for file in filenames]", "\n", "for", "pidfolder", "in", "pid_dirnames", ":", "\n", "                ", "if", "int", "(", "pidfolder", ")", ">", "0", ":", "\n", "                    ", "pid_folder", "=", "P_ID", "+", "'-'", "+", "pidfolder", "\n", "pid_int", "=", "pid_folder", ".", "split", "(", "'-'", ")", "\n", "pid", "=", "(", "(", "\"\"", ".", "join", "(", "pid_int", ")", ")", ")", "\n", "if", "pid", "not", "in", "dir2pid", ":", "\n", "                        ", "dir2pid", ".", "append", "(", "pid", ")", "\n", "", "if", "test_flag", "==", "1", ":", "\n", "                        ", "if", "pid", "not", "in", "PID_LIST", ":", "\n", "                            ", "PID_LIST", ".", "append", "(", "pid", ")", "\n", "", "", "", "", "", "if", "test_flag", "==", "1", ":", "\n", "            ", "test_dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "PID_LIST", ")", "}", "\n", "", "dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "dir2pid", ")", "}", "\n", "# print(dirname2pid)", "\n", "nums_pid", "=", "0", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "pid_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "dirname", ")", "\n", "Sequence_id", "=", "os", ".", "path", ".", "basename", "(", "pid_path", ")", "[", "-", "1", "]", "\n", "P_ID", "=", "os", ".", "path", ".", "basename", "(", "pid_path", ")", "[", ":", "-", "2", "]", "\n", "listOfFiles", "=", "list", "(", ")", "\n", "pid_dirnames", "=", "os", ".", "listdir", "(", "pid_path", ")", "\n", "#    listOfFiles += [os.path.join(dirpath, file) for file in filenames]", "\n", "for", "pidfolder", "in", "pid_dirnames", ":", "\n", "                ", "if", "int", "(", "pidfolder", ")", ">", "0", ":", "\n", "                    ", "person_dir", "=", "osp", ".", "join", "(", "pid_path", ",", "pidfolder", ")", "\n", "img_list", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.jpg'", ")", ")", "\n", "img_names_list", "=", "list", "(", ")", "\n", "for", "imag", "in", "img_list", ":", "\n", "                        ", "Input_im_size", "=", "os", ".", "path", ".", "getsize", "(", "imag", ")", "\n", "if", "Input_im_size", ">", "0", ":", "\n", "                            ", "img_names_list", ".", "append", "(", "imag", ")", "\n", "", "img_names", "=", "img_names_list", "\n", "", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "# print(\"The image length is \", len(img_names))", "\n", "# if len(img_names)==0:", "\n", "#    print(\"The foldes name\", dirname, \"The folder\",pidfolder)", "\n", "#   assert len(img_names) > 0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "# image_files=next(os.walk(person_dir))[2]", "\n", "# sorted_image_files=natsorted(image_files)", "\n", "# for im in sorted_image_files:", "\n", "#   img_names = osp.join(person_dir, im)", "\n", "#  assert len(img_names) > 0", "\n", "# #img_names = tuple(img_names)", "\n", "pid_folder", "=", "P_ID", "+", "'-'", "+", "pidfolder", "\n", "pid_int", "=", "pid_folder", ".", "split", "(", "'-'", ")", "\n", "pid", "=", "(", "(", "\"\"", ".", "join", "(", "pid_int", ")", ")", ")", "\n", "pid", "=", "dirname2pid", "[", "pid", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "Sequence_id", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "nums_pid", "=", "nums_pid", "+", "1", "\n", "\n", "", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "if", "test_flag", "==", "1", ":", "\n", "            ", "num_pids", "=", "len", "(", "test_dirname2pid", ")", "\n", "##write test qids", "\n", "text_file", "=", "self", ".", "test_out_path", "+", "'/test_ids_'", "+", "str", "(", "3", ")", "+", "'.txt'", "\n", "cout_list", "=", "0", "\n", "with", "open", "(", "text_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "for", "item", "in", "test_dirname2pid", ":", "\n", "                    ", "f", ".", "write", "(", "\"%s,\"", "%", "cout_list", ")", "\n", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "cout_list", "+=", "1", "\n", "", "", "", "else", ":", "\n", "            ", "num_pids", "=", "len", "(", "dirname2pid", ")", "\n", "", "pid_dirlt", "=", "dir2pid", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", ",", "pid_dirlt", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.DukeMTMCVidReID.__init__": [[483, 535], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "data_manager.DukeMTMCVidReID._download_data", "data_manager.DukeMTMCVidReID._check_before_run", "print", "data_manager.DukeMTMCVidReID._process_dir", "data_manager.DukeMTMCVidReID._process_dir", "data_manager.DukeMTMCVidReID._process_dir", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._download_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._check_before_run", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.DukeMTMCVidReID._process_dir", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.DukeMTMCVidReID._process_dir", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.DukeMTMCVidReID._process_dir"], ["def", "__init__", "(", "self", ",", "root", "=", "'../data'", ",", "min_seq_len", "=", "0", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "dataset_url", "=", "'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-VideoReID.zip'", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-VideoReID/train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-VideoReID/query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-VideoReID/gallery'", ")", "\n", "self", ".", "split_train_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_train.json'", ")", "\n", "self", ".", "split_query_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_query.json'", ")", "\n", "self", ".", "split_gallery_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'split_gallery.json'", ")", "\n", "\n", "self", ".", "min_seq_len", "=", "min_seq_len", "\n", "self", ".", "_download_data", "(", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "print", "(", "\n", "\"Note: if root path is changed, the previously generated json files need to be re-generated (so delete them first)\"", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "split_train_json_path", ",", "relabel", "=", "True", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "self", ".", "split_query_json_path", ",", "relabel", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "self", ".", "split_gallery_json_path", ",", "relabel", "=", "False", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> DukeMTMC-VideoReID loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.DukeMTMCVidReID._download_data": [[536, 553], ["os.exists", "os.exists", "print", "utils.mkdir_if_missing", "os.join", "os.join", "print", "urllib.URLopener", "urllib.URLopener.retrieve", "print", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "print", "os.basename", "os.basename"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.close"], ["", "def", "_download_data", "(", "self", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "print", "(", "\"This dataset has been downloaded.\"", ")", "\n", "return", "\n", "\n", "", "print", "(", "\"Creating directory {}\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "mkdir_if_missing", "(", "self", ".", "dataset_dir", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "osp", ".", "basename", "(", "self", ".", "dataset_url", ")", ")", "\n", "\n", "print", "(", "\"Downloading DukeMTMC-VideoReID dataset\"", ")", "\n", "url_opener", "=", "urllib", ".", "URLopener", "(", ")", "\n", "url_opener", ".", "retrieve", "(", "self", ".", "dataset_url", ",", "fpath", ")", "\n", "\n", "print", "(", "\"Extracting files\"", ")", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "self", ".", "dataset_dir", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.DukeMTMCVidReID._check_before_run": [[554, 564], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.DukeMTMCVidReID._process_dir": [[565, 627], ["os.exists", "os.exists", "print", "glob.glob", "print", "set", "len", "len", "print", "utils.write_json", "print", "utils.read_json", "os.join", "os.join", "int", "set.add", "int", "glob.glob", "len", "os.basename", "os.basename", "enumerate", "os.basename", "os.basename", "os.join", "os.join", "glob.glob", "len", "num_imgs_per_tracklet.append", "range", "os.basename", "os.basename", "tuple", "tracklets.append", "os.join", "os.join", "glob.glob", "tuple.append", "os.basename.find", "str().zfill", "os.join", "os.join", "len", "print", "int", "int", "str"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.write_json", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.read_json"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "json_path", ",", "relabel", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "print", "(", "\"=> {} generated before, awesome!\"", ".", "format", "(", "json_path", ")", ")", "\n", "split", "=", "read_json", "(", "json_path", ")", "\n", "return", "split", "[", "'tracklets'", "]", ",", "split", "[", "'num_tracklets'", "]", ",", "split", "[", "'num_pids'", "]", ",", "split", "[", "'num_imgs_per_tracklet'", "]", "\n", "\n", "", "print", "(", "\"=> Automatically generating split (might take a while for the first time, have a coffe)\"", ")", "\n", "pdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*'", ")", ")", "# avoid .DS_Store", "\n", "print", "(", "\"Processing {} with {} person identities\"", ".", "format", "(", "dir_path", ",", "len", "(", "pdirs", ")", ")", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "for", "pdir", "in", "pdirs", ":", "\n", "            ", "pid", "=", "int", "(", "osp", ".", "basename", "(", "pdir", ")", ")", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "tdirs", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "pdir", ",", "'*'", ")", ")", "\n", "for", "tdir", "in", "tdirs", ":", "\n", "                ", "raw_img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*.jpg'", ")", ")", "\n", "num_imgs", "=", "len", "(", "raw_img_paths", ")", "\n", "\n", "if", "num_imgs", "<", "self", ".", "min_seq_len", ":", "\n", "                    ", "continue", "\n", "\n", "", "num_imgs_per_tracklet", ".", "append", "(", "num_imgs", ")", "\n", "img_paths", "=", "[", "]", "\n", "for", "img_idx", "in", "range", "(", "num_imgs", ")", ":", "\n", "# some tracklet starts from 0002 instead of 0001", "\n", "                    ", "img_idx_name", "=", "'F'", "+", "str", "(", "img_idx", "+", "1", ")", ".", "zfill", "(", "4", ")", "\n", "res", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "tdir", ",", "'*'", "+", "img_idx_name", "+", "'*.jpg'", ")", ")", "\n", "if", "len", "(", "res", ")", "==", "0", ":", "\n", "                        ", "print", "(", "\"Warn: index name {} in {} is missing, jump to next\"", ".", "format", "(", "img_idx_name", ",", "tdir", ")", ")", "\n", "continue", "\n", "", "img_paths", ".", "append", "(", "res", "[", "0", "]", ")", "\n", "", "img_name", "=", "osp", ".", "basename", "(", "img_paths", "[", "0", "]", ")", "\n", "if", "img_name", ".", "find", "(", "'_'", ")", "==", "-", "1", ":", "\n", "# old naming format: 0001C6F0099X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "5", "]", ")", "-", "1", "\n", "", "else", ":", "\n", "# new naming format: 0001_C6_F0099_X30823.jpg", "\n", "                    ", "camid", "=", "int", "(", "img_name", "[", "6", "]", ")", "-", "1", "\n", "", "img_paths", "=", "tuple", "(", "img_paths", ")", "\n", "tracklets", ".", "append", "(", "(", "img_paths", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "", "num_pids", "=", "len", "(", "pid_container", ")", "\n", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "\n", "print", "(", "\"Saving split to {}\"", ".", "format", "(", "json_path", ")", ")", "\n", "split_dict", "=", "{", "\n", "'tracklets'", ":", "tracklets", ",", "\n", "'num_tracklets'", ":", "num_tracklets", ",", "\n", "'num_pids'", ":", "num_pids", ",", "\n", "'num_imgs_per_tracklet'", ":", "num_imgs_per_tracklet", ",", "\n", "}", "\n", "write_json", "(", "split_dict", ",", "json_path", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID.__init__": [[653, 701], ["data_manager.iLIDSVID._download_data", "data_manager.iLIDSVID._check_before_run", "data_manager.iLIDSVID._prepare_split", "utils.read_json", "print", "data_manager.iLIDSVID._process_data", "data_manager.iLIDSVID._process_data", "data_manager.iLIDSVID._process_data", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._download_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._check_before_run", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._prepare_split", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.read_json", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data"], ["def", "__init__", "(", "self", ",", "split_id", "=", "9", ")", ":", "\n", "        ", "self", ".", "_download_data", "(", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "self", ".", "_prepare_split", "(", ")", "\n", "splits", "=", "read_json", "(", "self", ".", "split_path", ")", "\n", "if", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"split_id exceeds range, received {}, but expected between 0 and {}\"", ".", "format", "(", "split_id", ",", "len", "(", "splits", ")", "-", "1", ")", ")", "\n", "", "split", "=", "splits", "[", "split_id", "]", "\n", "train_dirs", ",", "test_dirs", "=", "split", "[", "'train'", "]", ",", "split", "[", "'test'", "]", "\n", "print", "(", "\"# train identites: {}, # test identites {}\"", ".", "format", "(", "len", "(", "train_dirs", ")", ",", "len", "(", "test_dirs", ")", ")", ")", "\n", "\n", "train", ",", "num_train_tracklets", ",", "num_train_pids", ",", "num_imgs_train", "=", "self", ".", "_process_data", "(", "train_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", "\n", "query", ",", "num_query_tracklets", ",", "num_query_pids", ",", "num_imgs_query", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "True", ",", "cam2", "=", "False", ")", "\n", "gallery", ",", "num_gallery_tracklets", ",", "num_gallery_pids", ",", "num_imgs_gallery", "=", "self", ".", "_process_data", "(", "test_dirs", ",", "cam1", "=", "False", ",", "cam2", "=", "True", ")", "\n", "\n", "num_imgs_per_tracklet", "=", "num_imgs_train", "+", "num_imgs_query", "+", "num_imgs_gallery", "\n", "min_num", "=", "np", ".", "min", "(", "num_imgs_per_tracklet", ")", "\n", "max_num", "=", "np", ".", "max", "(", "num_imgs_per_tracklet", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "num_imgs_per_tracklet", ")", "\n", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_tracklets", "=", "num_train_tracklets", "+", "num_query_tracklets", "+", "num_gallery_tracklets", "\n", "\n", "print", "(", "\"=> iLIDS-VID loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_tracklets", ")", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.1f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._download_data": [[702, 718], ["os.exists", "os.exists", "utils.mkdir_if_missing", "os.join", "os.join", "print", "urllib.URLopener", "urllib.URLopener.retrieve", "print", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "print", "os.basename", "os.basename"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.close"], ["", "def", "_download_data", "(", "self", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "print", "(", "\"This dataset has been downloaded.\"", ")", "\n", "return", "\n", "\n", "", "mkdir_if_missing", "(", "self", ".", "root", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "osp", ".", "basename", "(", "self", ".", "dataset_url", ")", ")", "\n", "\n", "print", "(", "\"Downloading iLIDS-VID dataset\"", ")", "\n", "url_opener", "=", "urllib", ".", "URLopener", "(", ")", "\n", "url_opener", ".", "retrieve", "(", "self", ".", "dataset_url", ",", "fpath", ")", "\n", "\n", "print", "(", "\"Extracting files\"", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "fpath", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._check_before_run": [[719, 727], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "root", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "data_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "split_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._prepare_split": [[728, 768], ["print", "os.exists", "os.exists", "print", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "range", "print", "print", "utils.write_json", "scipy.io.loadmat", "set", "set", "sorted", "sorted", "splits.append", "list", "list", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.write_json"], ["", "", "def", "_prepare_split", "(", "self", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_path", ")", ":", "\n", "            ", "print", "(", "\"Creating splits\"", ")", "\n", "mat_split_data", "=", "loadmat", "(", "self", ".", "split_mat_path", ")", "[", "'ls_set'", "]", "\n", "\n", "num_splits", "=", "mat_split_data", ".", "shape", "[", "0", "]", "\n", "num_total_ids", "=", "mat_split_data", ".", "shape", "[", "1", "]", "\n", "assert", "num_splits", "==", "10", "\n", "assert", "num_total_ids", "==", "300", "\n", "num_ids_each", "=", "num_total_ids", "/", "2", "\n", "\n", "# pids in mat_split_data are indices, so we need to transform them", "\n", "# to real pids", "\n", "person_cam1_dirs", "=", "os", ".", "listdir", "(", "self", ".", "cam_1_path", ")", "\n", "person_cam2_dirs", "=", "os", ".", "listdir", "(", "self", ".", "cam_2_path", ")", "\n", "\n", "# make sure persons in one camera view can be found in the other camera view", "\n", "assert", "set", "(", "person_cam1_dirs", ")", "==", "set", "(", "person_cam2_dirs", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "for", "i_split", "in", "range", "(", "num_splits", ")", ":", "\n", "# first 50% for testing and the remaining for training, following Wang et al. ECCV'14.", "\n", "                ", "train_idxs", "=", "sorted", "(", "list", "(", "mat_split_data", "[", "i_split", ",", "num_ids_each", ":", "]", ")", ")", "\n", "test_idxs", "=", "sorted", "(", "list", "(", "mat_split_data", "[", "i_split", ",", ":", "num_ids_each", "]", ")", ")", "\n", "\n", "train_idxs", "=", "[", "int", "(", "i", ")", "-", "1", "for", "i", "in", "train_idxs", "]", "\n", "test_idxs", "=", "[", "int", "(", "i", ")", "-", "1", "for", "i", "in", "test_idxs", "]", "\n", "\n", "# transform pids to person dir names", "\n", "train_dirs", "=", "[", "person_cam1_dirs", "[", "i", "]", "for", "i", "in", "train_idxs", "]", "\n", "test_dirs", "=", "[", "person_cam1_dirs", "[", "i", "]", "for", "i", "in", "test_idxs", "]", "\n", "\n", "split", "=", "{", "'train'", ":", "train_dirs", ",", "'test'", ":", "test_dirs", "}", "\n", "splits", ".", "append", "(", "split", ")", "\n", "\n", "", "print", "(", "\"Totally {} splits are created, following Wang et al. ECCV'14\"", ".", "format", "(", "len", "(", "splits", ")", ")", ")", "\n", "print", "(", "\"Split file is saved to {}\"", ".", "format", "(", "self", ".", "split_path", ")", ")", "\n", "write_json", "(", "splits", ",", "self", ".", "split_path", ")", "\n", "\n", "", "print", "(", "\"Splits created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.iLIDSVID._process_data": [[769, 797], ["len", "len", "enumerate", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "glob.glob", "tuple", "tracklets.append", "num_imgs_per_tracklet.append", "os.join", "os.join", "len", "len", "os.join", "os.join", "len", "len"], "methods", ["None"], ["", "def", "_process_data", "(", "self", ",", "dirnames", ",", "cam1", "=", "True", ",", "cam2", "=", "True", ")", ":", "\n", "        ", "tracklets", "=", "[", "]", "\n", "num_imgs_per_tracklet", "=", "[", "]", "\n", "dirname2pid", "=", "{", "dirname", ":", "i", "for", "i", ",", "dirname", "in", "enumerate", "(", "dirnames", ")", "}", "\n", "\n", "for", "dirname", "in", "dirnames", ":", "\n", "            ", "if", "cam1", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_1_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "0", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "if", "cam2", ":", "\n", "                ", "person_dir", "=", "osp", ".", "join", "(", "self", ".", "cam_2_path", ",", "dirname", ")", "\n", "img_names", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "person_dir", ",", "'*.png'", ")", ")", "\n", "assert", "len", "(", "img_names", ")", ">", "0", "\n", "img_names", "=", "tuple", "(", "img_names", ")", "\n", "pid", "=", "dirname2pid", "[", "dirname", "]", "\n", "tracklets", ".", "append", "(", "(", "img_names", ",", "pid", ",", "1", ")", ")", "\n", "num_imgs_per_tracklet", ".", "append", "(", "len", "(", "img_names", ")", ")", "\n", "\n", "", "", "num_tracklets", "=", "len", "(", "tracklets", ")", "\n", "num_pids", "=", "len", "(", "dirnames", ")", "\n", "\n", "return", "tracklets", ",", "num_tracklets", ",", "num_pids", ",", "num_imgs_per_tracklet", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.get_names": [[810, 812], ["__factory.keys"], "function", ["None"], ["def", "get_names", "(", ")", ":", "\n", "    ", "return", "__factory", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.init_dataset": [[814, 818], ["__factory.keys", "KeyError"], "function", ["None"], ["", "def", "init_dataset", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", "not", "in", "__factory", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unknown dataset: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__factory", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.samplers.RandomIdentitySampler.__init__": [[18, 26], ["collections.defaultdict", "enumerate", "list", "len", "samplers.RandomIdentitySampler.index_dic[].append", "samplers.RandomIdentitySampler.index_dic.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.samplers.RandomIdentitySampler.__iter__": [[27, 37], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_identities", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "replace", "=", "False", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", "else", "True", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "replace", ")", "\n", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.samplers.RandomIdentitySampler.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_identities", "*", "self", ".", "num_instances", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.eval_metrics.evaluate": [[5, 55], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["def", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "50", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.VideoDataset.__init__": [[31, 36], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "seq_len", "=", "15", ",", "sample", "=", "'evenly'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "sample", "=", "sample", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.VideoDataset.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.VideoDataset.__getitem__": [[40, 145], ["len", "range", "max", "random.randint", "min", "list", "numpy.array", "torch.cat", "numpy.array", "torch.cat", "len", "numpy.concatenate.append", "int", "video_loader.read_image", "video_loader.VideoDataset.unsqueeze", "torch.cat.append", "numpy.arange", "numpy.arange", "numpy.concatenate", "len", "numpy.concatenate.append", "int", "video_loader.read_image", "video_loader.VideoDataset.unsqueeze", "torch.cat.append", "list", "indices_list.append", "torch.stack", "KeyError", "len", "video_loader.VideoDataset.transform", "int", "len", "video_loader.VideoDataset.transform", "range", "indices_list.append", "last_seq.append", "torch.cat", "imgs_list.append", "len", "len", "int", "video_loader.read_image", "video_loader.VideoDataset.unsqueeze", "torch.cat.append", "numpy.ones().astype", "video_loader.VideoDataset.transform", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.read_image", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.read_image", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_paths", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "num", "=", "len", "(", "img_paths", ")", "\n", "if", "self", ".", "sample", "==", "'random'", ":", "\n", "            ", "\"\"\"\n            Randomly sample seq_len consecutive frames from num frames,\n            if num is smaller than seq_len, then replicate items.\n            This sampling strategy is used in training phase.\n            \"\"\"", "\n", "frame_indices", "=", "range", "(", "num", ")", "\n", "rand_end", "=", "max", "(", "0", ",", "len", "(", "frame_indices", ")", "-", "self", ".", "seq_len", "-", "1", ")", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "seq_len", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "indices", "=", "list", "(", "frame_indices", "[", "begin_index", ":", "end_index", "]", ")", "\n", "\n", "for", "index", "in", "indices", ":", "\n", "                ", "if", "len", "(", "indices", ")", ">=", "self", ".", "seq_len", ":", "\n", "                    ", "break", "\n", "", "indices", ".", "append", "(", "index", ")", "\n", "", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "index", "in", "indices", ":", "\n", "                ", "index", "=", "int", "(", "index", ")", "\n", "img_path", "=", "img_paths", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                    ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "", "imgs", "=", "torch", ".", "cat", "(", "imgs", ",", "dim", "=", "0", ")", "\n", "# imgs=imgs.permute(1,0,2,3)", "\n", "return", "imgs", ",", "pid", ",", "camid", "\n", "\n", "", "if", "self", ".", "sample", "==", "'evenly'", ":", "\n", "            ", "\"\"\"\n            Evenly sample seq_len items from num items.\n            \"\"\"", "\n", "if", "num", ">=", "self", ".", "seq_len", ":", "\n", "                ", "num", "-=", "num", "%", "self", ".", "seq_len", "\n", "indices", "=", "np", ".", "arange", "(", "0", ",", "num", ",", "int", "(", "num", "/", "self", ".", "seq_len", ")", ")", "\n", "", "else", ":", "\n", "# if num is smaller than seq_len, simply replicate the last image", "\n", "# until the seq_len requirement is satisfied", "\n", "                ", "indices", "=", "np", ".", "arange", "(", "0", ",", "num", ")", "\n", "num_pads", "=", "self", ".", "seq_len", "-", "num", "\n", "indices", "=", "np", ".", "concatenate", "(", "[", "indices", ",", "np", ".", "ones", "(", "num_pads", ")", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "num", "-", "1", ")", "]", ")", "\n", "\n", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "seq_len", "\n", "\n", "for", "index", "in", "indices", ":", "\n", "                ", "if", "len", "(", "indices", ")", ">=", "self", ".", "seq_len", ":", "\n", "                    ", "break", "\n", "", "indices", ".", "append", "(", "index", ")", "\n", "", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "index", "in", "indices", ":", "\n", "                ", "index", "=", "int", "(", "index", ")", "\n", "img_path", "=", "img_paths", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                    ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "", "imgs", "=", "torch", ".", "cat", "(", "imgs", ",", "dim", "=", "0", ")", "\n", "# imgs=imgs.permute(1,0,2,3)", "\n", "return", "imgs", ",", "pid", ",", "camid", "\n", "\n", "", "elif", "self", ".", "sample", "==", "'dense'", ":", "\n", "            ", "\"\"\"\n            Sample all frames in a video into a list of clips, each clip contains seq_len frames, batch_size needs to be set to 1.\n            This sampling strategy is used in test phase.\n            \"\"\"", "\n", "cur_index", "=", "0", "\n", "frame_indices", "=", "list", "(", "range", "(", "num", ")", ")", "\n", "indices_list", "=", "[", "]", "\n", "while", "num", "-", "cur_index", ">", "self", ".", "seq_len", ":", "\n", "                ", "indices_list", ".", "append", "(", "frame_indices", "[", "cur_index", ":", "cur_index", "+", "self", ".", "seq_len", "]", ")", "\n", "cur_index", "+=", "self", ".", "seq_len", "\n", "", "last_seq", "=", "frame_indices", "[", "cur_index", ":", "]", "\n", "for", "index", "in", "last_seq", ":", "\n", "                ", "if", "len", "(", "last_seq", ")", ">=", "self", ".", "seq_len", ":", "\n", "                    ", "break", "\n", "", "last_seq", ".", "append", "(", "index", ")", "\n", "", "indices_list", ".", "append", "(", "last_seq", ")", "\n", "\n", "imgs_list", "=", "[", "]", "\n", "for", "indices", "in", "indices_list", ":", "\n", "                ", "imgs", "=", "[", "]", "\n", "for", "index", "in", "indices", ":", "\n", "                    ", "index", "=", "int", "(", "index", ")", "\n", "img_path", "=", "img_paths", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                        ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "", "imgs", "=", "torch", ".", "cat", "(", "imgs", ",", "dim", "=", "0", ")", "\n", "# imgs=imgs.permute(1,0,2,3)", "\n", "imgs_list", ".", "append", "(", "imgs", ")", "\n", "", "imgs_array", "=", "torch", ".", "stack", "(", "imgs_list", ")", "\n", "return", "imgs_array", ",", "pid", ",", "camid", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unknown sample method: {}. Expected one of {}\"", ".", "format", "(", "self", ".", "sample", ",", "self", ".", "sample_methods", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.read_image": [[11, 23], ["PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"Keep reading image until succeed.\n    This can avoid IOError incurred by heavy IO process.\"\"\"", "\n", "got_img", "=", "False", "\n", "while", "not", "got_img", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "\"IOError incurred when reading '{}'. Will redo. Don't worry. Just chill.\"", ".", "format", "(", "img_path", ")", ")", "\n", "pass", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.main": [[93, 251], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "print", "data_manager.init_dataset", "transforms.Compose", "transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "models.init_model", "print", "losses.SymbolicTripletLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.time", "range", "round", "str", "print", "os.path.dirname", "os.path.dirname", "os.exists", "os.makedirs", "os.makedirs", "utils.Logger", "utils.Logger", "print", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "video_loader.VideoDataset", "video_loader.VideoDataset", "video_loader.VideoDataset", "print", "print", "nn.DataParallel().cuda.state_dict", "print", "model.state_dict.update", "nn.DataParallel().cuda.load_state_dict", "torch.DataParallel().cuda", "nn.DataParallel().cuda.parameters", "torch.optim.lr_scheduler.StepLR", "print", "main_symbolic_temporal_pooling.test", "print", "main_symbolic_temporal_pooling.train", "datetime.timedelta", "os.join", "os.join", "transforms.Random2DTranslation", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "samplers.RandomIdentitySampler", "os.path.exists", "os.path.exists", "IOError", "torch.load", "torch.load", "torch.load", "len", "len", "lr_scheduler.StepLR.step", "print", "main_symbolic_temporal_pooling.test", "utils.save_checkpoint", "utils.disable_all_print_once", "time.time", "pretrained_state.items", "sum", "torch.DataParallel", "nn.DataParallel().cuda.module.state_dict", "nn.DataParallel().cuda.state_dict", "os.join", "utils.get_currenttime_prefix", "val.size", "current_model_state[].size", "p.numel", "nn.DataParallel().cuda.parameters", "str"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.data_manager.init_dataset", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.__init__.init_model", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.test", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.train", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.test", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.disable_all_print_once", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_currenttime_prefix"], ["def", "main", "(", ")", ":", "\n", "    ", "args", ".", "save_dir", "=", "args", ".", "arch", "+", "'_'", "+", "args", ".", "save_dir", "\n", "args", ".", "save_prefix", "=", "args", ".", "arch", "+", "'_'", "+", "args", ".", "save_dir", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_devices", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "use_cpu", ":", "\n", "        ", "use_gpu", "=", "True", "\n", "", "use_gpu", "=", "True", "\n", "# append date with save_dir", "\n", "args", ".", "save_dir", "=", "'../scratch/'", "+", "utils", ".", "get_currenttime_prefix", "(", ")", "+", "'_'", "+", "args", ".", "dataset", "+", "'_'", "+", "args", ".", "save_dir", "\n", "if", "args", ".", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "args", ".", "save_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "pretrained_model", ")", "\n", "\n", "", "if", "not", "osp", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_train.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_test.txt'", ")", ")", "\n", "", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "print", "(", "\"Currently using GPU {}\"", ".", "format", "(", "args", ".", "gpu_devices", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Currently using CPU (GPU is highly recommended)\"", ")", "\n", "\n", "", "print", "(", "\"Initializing dataset {}\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "dataset", "=", "data_manager", ".", "init_dataset", "(", "name", "=", "args", ".", "dataset", ")", "\n", "\n", "transform_train", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Random2DTranslation", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "pin_memory", "=", "True", "if", "use_gpu", "else", "False", "\n", "\n", "trainloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "train", ",", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "sample", "=", "args", ".", "data_selection", ",", "transform", "=", "transform_train", ")", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "\n", "dataset", ".", "train", ",", "num_instances", "=", "args", ".", "num_instances", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "queryloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "query", ",", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "sample", "=", "'dense'", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "galleryloader", "=", "DataLoader", "(", "\n", "VideoDataset", "(", "dataset", ".", "gallery", ",", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "sample", "=", "'dense'", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "print", "(", "\"Initializing model: {}\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "arch", ",", "num_classes", "=", "dataset", ".", "num_train_pids", ",", "seq_len", "=", "args", ".", "seq_len", ")", "\n", "\n", "# pretrained model loading", "\n", "if", "args", ".", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "pretrained_model", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"Can't find pretrained model: {}\"", ".", "format", "(", "\n", "args", ".", "pretrained_model", ")", ")", "\n", "", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "args", ".", "pretrained_model", ")", ")", "\n", "pretrained_state", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ")", "[", "'state_dict'", "]", "\n", "print", "(", "len", "(", "pretrained_state", ")", ",", "' keys in pretrained model'", ")", "\n", "\n", "current_model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_state", "=", "{", "key", ":", "val", "\n", "for", "key", ",", "val", "in", "pretrained_state", ".", "items", "(", ")", "\n", "if", "key", "in", "current_model_state", "and", "val", ".", "size", "(", ")", "==", "current_model_state", "[", "key", "]", ".", "size", "(", ")", "}", "\n", "\n", "print", "(", "len", "(", "pretrained_state", ")", ",", "\n", "' keys in pretrained model are available in current model'", ")", "\n", "current_model_state", ".", "update", "(", "pretrained_state", ")", "\n", "model", ".", "load_state_dict", "(", "current_model_state", ")", "\n", "\n", "", "print", "(", "\"Model size: {:.5f}M\"", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "criterion_htri", "=", "SymbolicTripletLoss", "(", "margin", "=", "args", ".", "margin", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "if", "args", ".", "stepsize", ">", "0", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "args", ".", "stepsize", ",", "gamma", "=", "args", ".", "gamma", ")", "\n", "", "start_epoch", "=", "args", ".", "start_epoch", "\n", "#args.evaluate=True", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "\"Evaluate only\"", ")", "\n", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "use_gpu", ")", "\n", "return", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "best_rank1", "=", "-", "np", ".", "inf", "\n", "\n", "is_first_time", "=", "True", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epoch", ")", ":", "\n", "        ", "print", "(", "\"==> Epoch {}/{}\"", ".", "format", "(", "epoch", "+", "1", ",", "args", ".", "max_epoch", ")", ")", "\n", "\n", "train", "(", "model", ",", "criterion_htri", ",", "\n", "optimizer", ",", "trainloader", ",", "use_gpu", ")", "\n", "\n", "if", "args", ".", "stepsize", ">", "0", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "rank1", "=", "'NA'", "\n", "is_best", "=", "False", "\n", "\n", "if", "args", ".", "eval_step", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_step", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "args", ".", "max_epoch", ":", "\n", "            ", "print", "(", "\"==> Test\"", ")", "\n", "rank1", "=", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "use_gpu", ")", "\n", "is_best", "=", "rank1", ">", "best_rank1", "\n", "if", "is_best", ":", "\n", "                ", "best_rank1", "=", "rank1", "\n", "\n", "# save the model as required", "\n", "", "", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_step", "==", "0", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'rank1'", ":", "rank1", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "is_best", ",", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_prefix", "+", "'checkpoint_ep'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth.tar'", ")", ")", "\n", "\n", "", "is_first_time", "=", "False", "\n", "if", "not", "is_first_time", ":", "\n", "            ", "utils", ".", "disable_all_print_once", "(", ")", "\n", "\n", "", "", "elapsed", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "print", "(", "\"Finished. Total elapsed time (h:m:s): {}\"", ".", "format", "(", "elapsed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.train": [[253, 282], ["model.train", "utils.AverageMeter", "time.time", "enumerate", "tqdm.tqdm", "imgs.view.size", "imgs.view.view", "model", "numpy.asarray", "utils.get_symbolic_feature", "criterion_htri", "torch.autograd.Variable", "optimizer.zero_grad", "torch.autograd.Variable.backward", "optimizer.step", "utils.AverageMeter.update", "torch.autograd.Variable", "torch.autograd.Variable", "np.asarray.data.cpu", "torch.autograd.Variable.item", "pids.size", "print", "imgs.view.cuda", "pids.cuda", "len"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.train", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_symbolic_feature", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.update"], ["", "def", "train", "(", "model", ",", "criterion_htri", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "import", "time", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "tqdm", "(", "trainloader", ")", ")", ":", "\n", "        ", "if", "use_gpu", ":", "\n", "             ", "imgs", ",", "pids", "=", "imgs", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", "\n", "", "imgs", ",", "pids", "=", "Variable", "(", "imgs", ")", ",", "Variable", "(", "pids", ")", "\n", "b", ",", "n", ",", "c", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "\n", "\n", "imgs", "=", "imgs", ".", "view", "(", "b", "*", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "outputs", ",", "features", "=", "model", "(", "imgs", ")", "\n", "\n", "features", "=", "np", ".", "asarray", "(", "features", ".", "data", ".", "cpu", "(", ")", ")", "\n", "histqf", "=", "get_symbolic_feature", "(", "features", ",", "b", "*", "n", ",", "n", ")", "\n", "htri_loss1", "=", "criterion_htri", "(", "histqf", ",", "pids", ")", "\n", "loss", "=", "htri_loss1", "\n", "loss", "=", "Variable", "(", "loss", ",", "requires_grad", "=", "True", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\"Batch {}/{}\\t Loss {:.6f} ({:.6f})\"", ".", "format", "(", "batch_idx", "+", "\n", "1", ",", "len", "(", "trainloader", ")", ",", "losses", ".", "val", ",", "losses", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.test": [[284, 355], ["model.eval", "print", "enumerate", "numpy.asarray", "numpy.asarray", "print", "enumerate", "numpy.asarray", "numpy.asarray", "print", "utils.compute_distance", "print", "eval_metrics.evaluate", "print", "print", "print", "print", "tqdm.tqdm", "qf.append", "np.asarray.extend", "np.asarray.extend", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "tqdm.tqdm", "gf.append", "np.asarray.extend", "np.asarray.extend", "print", "imgs.view.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "imgs.view.size", "imgs.view.view", "model", "numpy.asarray", "range", "imgs.view.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "imgs.view.size", "imgs.view.view", "model", "numpy.asarray", "range", "np.asarray.data.cpu", "statsmodels.distributions.empirical_distribution.ECDF", "hist_feat.append", "np.asarray.data.cpu", "statsmodels.distributions.empirical_distribution.ECDF", "hist_feat.append"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.compute_distance", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.eval_metrics.evaluate"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "use_gpu", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "query_size", "=", "0", "\n", "test_size", "=", "0", "\n", "print", "(", "'extracting query feats'", ")", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "tqdm", "(", "queryloader", ")", ")", ":", "\n", "        ", "if", "use_gpu", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "b", ",", "n", ",", "s", ",", "c", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "\n", "imgs", "=", "imgs", ".", "view", "(", "b", "*", "n", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "features", "=", "model", "(", "imgs", ")", "\n", "features", "=", "np", ".", "asarray", "(", "features", ".", "data", ".", "cpu", "(", ")", ")", "\n", "hist_feat", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "2048", ")", ":", "\n", "                ", "ecdf_data", "=", "ECDF", "(", "features", "[", ":", ",", "index", "]", ")", "\n", "hist_feat", ".", "append", "(", "ecdf_data", ".", "x", "[", "1", ":", "]", ")", "\n", "\n", "", "", "qf", ".", "append", "(", "hist_feat", ")", "\n", "query_size", "=", "query_size", "+", "1", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "\n", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "print", "(", "'extracting gallery feats'", ")", "\n", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "tqdm", "(", "galleryloader", ")", ")", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                 ", "b", ",", "n", ",", "s", ",", "c", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "\n", "imgs", "=", "imgs", ".", "view", "(", "b", "*", "n", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "features", "=", "model", "(", "imgs", ")", "\n", "features", "=", "np", ".", "asarray", "(", "features", ".", "data", ".", "cpu", "(", ")", ")", "\n", "hist_feat", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "2048", ")", ":", "\n", "                     ", "ecdf_data", "=", "ECDF", "(", "features", "[", ":", ",", "index", "]", ")", "\n", "hist_feat", ".", "append", "(", "ecdf_data", ".", "x", "[", "1", ":", "]", ")", "\n", "", "", "gf", ".", "append", "(", "hist_feat", ")", "\n", "test_size", "=", "test_size", "+", "1", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "\n", "", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "\n", "print", "(", "\"Computing distance matrix\"", ")", "\n", "distmat", "=", "compute_distance", "(", "query_size", ",", "test_size", ",", "qf", ",", "gf", ")", "\n", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.__init__": [[311, 313], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.reset": [[314, 319], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.update": [[320, 325], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.__init__": [[388, 394], ["utils.mkdir_if_missing", "open", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "\"a\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.__del__": [[395, 397], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.__enter__": [[398, 400], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.__exit__": [[401, 403], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.write": [[404, 408], ["utils.Logger.console.write", "utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.write", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.flush": [[409, 414], ["utils.Logger.console.flush", "utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.flush", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.close": [[415, 419], ["utils.Logger.console.close", "utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.close", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.static_vars": [[17, 24], ["setattr"], "function", ["None"], ["def", "static_vars", "(", "**", "kwargs", ")", ":", "\n", "    ", "def", "decorate", "(", "func", ")", ":", "\n", "        ", "for", "k", "in", "kwargs", ":", "\n", "            ", "setattr", "(", "func", ",", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "", "return", "func", "\n", "\n", "", "return", "decorate", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.disable_all_print_once": [[26, 29], ["None"], "function", ["None"], ["", "def", "disable_all_print_once", "(", ")", ":", "\n", "    ", "global", "is_print_once_enabled", "\n", "is_print_once_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.print_once": [[31, 47], ["utils.static_vars", "getframeinfo", "print", "stack"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.static_vars"], ["", "@", "static_vars", "(", "lines", "=", "{", "}", ")", "\n", "def", "print_once", "(", "msg", ")", ":", "\n", "# return from the function if the API is disabled", "\n", "    ", "global", "is_print_once_enabled", "\n", "if", "not", "is_print_once_enabled", ":", "\n", "        ", "return", "\n", "\n", "", "from", "inspect", "import", "getframeinfo", ",", "stack", "\n", "\n", "caller", "=", "getframeinfo", "(", "stack", "(", ")", "[", "1", "]", "[", "0", "]", ")", "\n", "current_file_line", "=", "\"%s:%d\"", "%", "(", "caller", ".", "filename", ",", "caller", ".", "lineno", ")", "\n", "\n", "# if the current called file and line is not in buffer print once", "\n", "if", "current_file_line", "not", "in", "print_once", ".", "lines", ":", "\n", "        ", "print", "(", "msg", ")", "\n", "print_once", ".", "lines", "[", "current_file_line", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_executing_filepath": [[49, 54], ["inspect.getmodule", "inspect.stack", "os.path.split", "os.path.split"], "function", ["None"], ["", "", "def", "get_executing_filepath", "(", ")", ":", "\n", "    ", "frame", "=", "inspect", ".", "stack", "(", ")", "[", "1", "]", "\n", "module", "=", "inspect", ".", "getmodule", "(", "frame", "[", "0", "]", ")", "\n", "filename", "=", "module", ".", "__file__", "\n", "return", "os", ".", "path", ".", "split", "(", "filename", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.set_stride": [[56, 68], ["print", "module.modules", "isinstance", "isinstance"], "function", ["None"], ["", "def", "set_stride", "(", "module", ",", "stride", ")", ":", "\n", "    ", "\"\"\"\n\n    \"\"\"", "\n", "print", "(", "\"setting stride of \"", ",", "module", ",", "\" to \"", ",", "stride", ")", "\n", "for", "internal_module", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "internal_module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "\n", "internal_module", ",", "nn", ".", "MaxPool2d", "\n", ")", ":", "\n", "            ", "internal_module", ".", "stride", "=", "stride", "\n", "\n", "", "", "return", "internal_module", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_gaussian_kernel": [[70, 103], ["torch.zeros().float", "torch.zeros().float", "torch.linspace", "torch.linspace", "torch.linspace.repeat().view", "x_cord.repeat().view.t", "torch.stack().float", "torch.stack().float", "torch.inverse", "torch.inverse", "gaussian_kernel.repeat.view", "gaussian_kernel.repeat.repeat", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.linspace.repeat", "torch.stack", "torch.stack", "sigma.t", "torch.det", "torch.det", "torch.sum", "torch.sum", "torch.inverse.unsqueeze"], "function", ["None"], ["", "def", "get_gaussian_kernel", "(", "channels", ",", "kernel_size", "=", "5", ",", "mean", "=", "0", ",", "sigma", "=", "[", "1", ",", "4", "]", ")", ":", "\n", "# CONVERT INTO NP ARRAY", "\n", "    ", "sigma_", "=", "torch", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", ".", "float", "(", ")", "\n", "sigma_", "[", "0", ",", "0", "]", "=", "sigma", "[", "0", "]", "\n", "sigma_", "[", "1", ",", "1", "]", "=", "sigma", "[", "1", "]", "\n", "sigma", "=", "sigma_", "\n", "\n", "# Create a x, y coordinate grid of shape (kernel_size, kernel_size, 2)", "\n", "x_cord", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "kernel_size", ")", "\n", "x_grid", "=", "x_cord", ".", "repeat", "(", "kernel_size", ")", ".", "view", "(", "kernel_size", ",", "kernel_size", ")", "\n", "y_grid", "=", "x_grid", ".", "t", "(", ")", "\n", "xy_grid", "=", "torch", ".", "stack", "(", "[", "x_grid", ",", "y_grid", "]", ",", "dim", "=", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "variance", "=", "(", "sigma", "@", "sigma", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "inv_variance", "=", "torch", ".", "inverse", "(", "variance", ")", "\n", "\n", "# Calculate the 2-dimensional gaussian kernel which is", "\n", "# the product of two gaussian distributions for two different", "\n", "# variables (in this case called x and y)", "\n", "gaussian_kernel", "=", "(", "1.0", "/", "(", "2.0", "*", "math", ".", "pi", "*", "torch", ".", "det", "(", "variance", ")", ")", ")", "*", "torch", ".", "exp", "(", "\n", "-", "torch", ".", "sum", "(", "\n", "(", "(", "xy_grid", "-", "mean", ")", "@", "inv_variance", ".", "unsqueeze", "(", "0", ")", ")", "*", "(", "xy_grid", "-", "mean", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "/", "2", "\n", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "gaussian_kernel", "=", "gaussian_kernel", "/", "torch", ".", "sum", "(", "gaussian_kernel", ")", "\n", "\n", "# Reshape to 2d depthwise convolutional weight", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "view", "(", "1", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "repeat", "(", "1", ",", "channels", ",", "1", ",", "1", ")", "\n", "return", "gaussian_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.mkdir_if_missing": [[105, 118], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "\"\"\"to create a directory\n\n    Arguments:\n        directory {str} -- directory path\n    \"\"\"", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.freeze_weights": [[121, 128], ["to_be_freezed.parameters", "to_be_freezed.children", "module.parameters"], "function", ["None"], ["", "", "", "", "def", "freeze_weights", "(", "to_be_freezed", ")", ":", "\n", "    ", "for", "param", "in", "to_be_freezed", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "for", "module", "in", "to_be_freezed", ".", "children", "(", ")", ":", "\n", "        ", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.load_pretrained_model": [[130, 185], ["print", "print", "model.state_dict", "print", "print", "model.state_dict.update", "model.load_state_dict", "os.path.exists", "os.path.exists", "IOError", "torch.load", "torch.load", "len", "len", "len", "print", "print", "pretrained_state.items", "pretrained_state.items", "model.state_dict.items", "val.size", "current_model_state[].size", "val.size", "current_model_state[].size", "val.size", "pretrained_state[].size"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.update"], ["", "", "", "def", "load_pretrained_model", "(", "model", ",", "pretrained_model_path", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"To load the pretrained model considering the number of keys and their sizes\n\n    Arguments:\n        model {loaded model} -- already loaded model\n        pretrained_model_path {str} -- path to the pretrained model file\n\n    Raises:\n        IOError -- if the file path is not found\n\n    Returns:\n        model -- model with loaded params\n    \"\"\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pretrained_model_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"Can't find pretrained model: {}\"", ".", "format", "(", "pretrained_model_path", ")", ")", "\n", "\n", "", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "pretrained_model_path", ")", ")", "\n", "pretrained_state", "=", "torch", ".", "load", "(", "pretrained_model_path", ")", "[", "\"state_dict\"", "]", "\n", "print", "(", "len", "(", "pretrained_state", ")", ",", "\" keys in pretrained model\"", ")", "\n", "\n", "current_model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "print", "(", "len", "(", "current_model_state", ")", ",", "\" keys in current model\"", ")", "\n", "pretrained_state", "=", "{", "\n", "key", ":", "val", "\n", "for", "key", ",", "val", "in", "pretrained_state", ".", "items", "(", ")", "\n", "if", "key", "in", "current_model_state", "and", "val", ".", "size", "(", ")", "==", "current_model_state", "[", "key", "]", ".", "size", "(", ")", "\n", "}", "\n", "\n", "print", "(", "\n", "len", "(", "pretrained_state", ")", ",", "\n", "\" keys in pretrained model are available in current model\"", ",", "\n", ")", "\n", "current_model_state", ".", "update", "(", "pretrained_state", ")", "\n", "model", ".", "load_state_dict", "(", "current_model_state", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "non_available_keys_in_pretrained", "=", "[", "\n", "key", "\n", "for", "key", ",", "val", "in", "pretrained_state", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "current_model_state", "\n", "or", "val", ".", "size", "(", ")", "!=", "current_model_state", "[", "key", "]", ".", "size", "(", ")", "\n", "]", "\n", "non_available_keys_in_current", "=", "[", "\n", "key", "\n", "for", "key", ",", "val", "in", "current_model_state", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "pretrained_state", "or", "val", ".", "size", "(", ")", "!=", "pretrained_state", "[", "key", "]", ".", "size", "(", ")", "\n", "]", "\n", "\n", "print", "(", "\n", "\"not available keys in pretrained model: \"", ",", "non_available_keys_in_pretrained", "\n", ")", "\n", "print", "(", "\"not available keys in current model: \"", ",", "non_available_keys_in_current", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_currenttime_prefix": [[187, 197], ["strftime", "localtime"], "function", ["None"], ["", "def", "get_currenttime_prefix", "(", ")", ":", "\n", "    ", "\"\"\"to get a prefix of current time\n\n    Returns:\n        [str] -- current time encoded into string\n    \"\"\"", "\n", "\n", "from", "time", "import", "localtime", ",", "strftime", "\n", "\n", "return", "strftime", "(", "\"%d-%b-%Y_%H:%M:%S\"", ",", "localtime", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_learnable_params": [[199, 225], ["model.named_parameters", "print", "print", "details.append", "model.parameters", "str", "sum", "len", "p.numel"], "function", ["None"], ["", "def", "get_learnable_params", "(", "model", ")", ":", "\n", "    ", "\"\"\"to get the list of learnable params\n\n    Arguments:\n        model {model} -- loaded model\n\n    Returns:\n        list -- learnable params\n    \"\"\"", "\n", "\n", "# list down the names of learnable params", "\n", "details", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", ":", "\n", "            ", "details", ".", "append", "(", "(", "name", ",", "param", ".", "shape", ")", ")", "\n", "", "", "print", "(", "\"learnable params (\"", "+", "str", "(", "len", "(", "details", ")", ")", "+", "\") : \"", ",", "details", ")", "\n", "\n", "#  short list the params which has requires_grad as true", "\n", "learnable_params", "=", "[", "param", "for", "param", "in", "model", ".", "parameters", "(", ")", "if", "param", ".", "requires_grad", "]", "\n", "\n", "print", "(", "\n", "\"Model size: {:.5f}M\"", ".", "format", "(", "\n", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "learnable_params", ")", "/", "1000000.0", "\n", ")", "\n", ")", "\n", "return", "learnable_params", "\n", "", "def", "get_symbolic_feature", "(", "features", ",", "b", ",", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_symbolic_feature": [[225, 238], ["range", "histqf.append", "statsmodels.distributions.empirical_distribution.ECDF", "hist_feat.append"], "function", ["None"], ["", "def", "get_symbolic_feature", "(", "features", ",", "b", ",", "n", ")", ":", "\n", "    ", "histqf", "=", "[", "]", "\n", "in1", "=", "0", "\n", "while", "(", "(", "in1", "+", "n", ")", "<=", "b", ")", ":", "\n", "        ", "hist_feat", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "2048", ")", ":", "\n", "            ", "fea", "=", "features", "[", "in1", ":", "in1", "+", "n", ",", "index", "]", "\n", "ecdf_data", "=", "ECDF", "(", "fea", ")", "\n", "hist_feat", ".", "append", "(", "ecdf_data", ".", "x", "[", "1", ":", "]", ")", "\n", "", "in1", "=", "in1", "+", "n", "\n", "# new_pids.append(pids[in1-1])", "\n", "histqf", ".", "append", "(", "hist_feat", ")", "\n", "", "return", "histqf", "\n", "", "def", "compute_distance", "(", "query_size", ",", "test_size", ",", "qf", ",", "gf", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.compute_distance": [[238, 251], ["numpy.zeros", "range", "range", "range", "scipy.stats.wasserstein_distance"], "function", ["None"], ["", "def", "compute_distance", "(", "query_size", ",", "test_size", ",", "qf", ",", "gf", ")", ":", "\n", "    ", "distmat", "=", "np", ".", "zeros", "(", "(", "query_size", ",", "test_size", ")", ")", "\n", "distance1", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "query_size", ")", ":", "\n", "        ", "for", "index1", "in", "range", "(", "test_size", ")", ":", "\n", "            ", "distance", "=", "0", "\n", "for", "index3", "in", "range", "(", "2048", ")", ":", "\n", "                ", "diff_dist", "=", "wasserstein_distance", "(", "qf", "[", "index", "]", "[", "index3", "]", ",", "gf", "[", "index1", "]", "[", "index3", "]", ")", "\n", "# diff_dist=math.sqrt(sum([(a - b) ** 2 for a, b in zip(qf[index][index3], gf[index1][index3])]))", "\n", "distance", "=", "distance", "+", "diff_dist", "\n", "", "distmat", "[", "index", "]", "[", "index1", "]", "=", "distance", "/", "2048", "\n", "#print(index)", "\n", "", "", "return", "distmat", "\n", "", "def", "get_features", "(", "model", ",", "imgs", ",", "test_num_tracks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_features": [[251, 276], ["more_itertools.chunked", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "model", "features.view.view", "all_features.append"], "function", ["None"], ["", "def", "get_features", "(", "model", ",", "imgs", ",", "test_num_tracks", ")", ":", "\n", "    ", "\"\"\"to handle higher seq length videos due to OOM error\n    specifically used during test\n\n    Arguments:\n        model -- model under test\n        imgs -- imgs to get features for\n\n    Returns:\n        features\n    \"\"\"", "\n", "\n", "# handle chunked data", "\n", "all_features", "=", "[", "]", "\n", "\n", "for", "test_imgs", "in", "mit", ".", "chunked", "(", "imgs", ",", "test_num_tracks", ")", ":", "\n", "        ", "current_test_imgs", "=", "torch", ".", "stack", "(", "test_imgs", ")", "\n", "num_current_test_imgs", "=", "current_test_imgs", ".", "shape", "[", "0", "]", "\n", "#current_test_imgs.shape", "\n", "#current_test_imgs=current_test_imgs.view()", "\n", "features", "=", "model", "(", "current_test_imgs", ")", "\n", "features", "=", "features", ".", "view", "(", "num_current_test_imgs", ",", "-", "1", ")", "\n", "all_features", ".", "append", "(", "features", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "all_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.get_spatial_features": [[278, 303], ["more_itertools.chunked", "torch.stack", "torch.stack", "model", "features.view.view", "all_spatial_features.append", "all_features.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_spatial_features", "(", "model", ",", "imgs", ",", "test_num_tracks", ")", ":", "\n", "    ", "\"\"\"to handle higher seq length videos due to OOM error\n    specifically used during test\n\n    Arguments:\n        model -- model under test\n        imgs -- imgs to get features for\n\n    Returns:\n        features\n    \"\"\"", "\n", "\n", "# handle chunked data", "\n", "all_features", ",", "all_spatial_features", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "test_imgs", "in", "mit", ".", "chunked", "(", "imgs", ",", "test_num_tracks", ")", ":", "\n", "        ", "current_test_imgs", "=", "torch", ".", "stack", "(", "test_imgs", ")", "\n", "num_current_test_imgs", "=", "current_test_imgs", ".", "shape", "[", "0", "]", "\n", "features", ",", "spatial_feats", "=", "model", "(", "current_test_imgs", ")", "\n", "features", "=", "features", ".", "view", "(", "num_current_test_imgs", ",", "-", "1", ")", "\n", "\n", "all_spatial_features", ".", "append", "(", "spatial_feats", ")", "\n", "all_features", ".", "append", "(", "features", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "all_features", ")", ",", "torch", ".", "cat", "(", "all_spatial_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.save_checkpoint": [[327, 333], ["utils.mkdir_if_missing", "print", "torch.save", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.mkdir_if_missing"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "\"checkpoint.pth.tar\"", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "print", "(", "\"saving model to \"", "+", "fpath", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "\"best_model.pth.tar\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.open_all_layers": [[335, 345], ["model.train", "model.parameters"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.train"], ["", "", "def", "open_all_layers", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Open all layers in model for training.\n\n    Args:\n    - model (nn.Module): neural net model.\n    \"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.open_specified_layers": [[347, 380], ["isinstance", "model.named_children", "hasattr", "model.named_children", "module.train", "module.parameters", "module.eval", "module.parameters"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.main_symbolic_temporal_pooling.train"], ["", "", "def", "open_specified_layers", "(", "model", ",", "open_layers", ")", ":", "\n", "    ", "\"\"\"\n    Open specified layers in model for training while keeping\n    other layers frozen.\n\n    Args:\n    - model (nn.Module): neural net model.\n    - open_layers (list): list of layer names.\n    \"\"\"", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "for", "layer", "in", "open_layers", ":", "\n", "        ", "assert", "hasattr", "(", "\n", "model", ",", "layer", "\n", ")", ",", "'\"{}\" is not an attribute of the model, please provide the correct name'", ".", "format", "(", "\n", "layer", "\n", ")", "\n", "\n", "# check if all the open layers are there in model", "\n", "", "all_names", "=", "[", "name", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", "]", "\n", "for", "tobeopen_layer", "in", "open_layers", ":", "\n", "        ", "assert", "tobeopen_layer", "in", "all_names", ",", "\"{} not in model\"", ".", "format", "(", "tobeopen_layer", ")", "\n", "\n", "", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "if", "name", "in", "open_layers", ":", "\n", "            ", "module", ".", "train", "(", ")", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.read_json": [[421, 425], ["open", "json.load"], "function", ["None"], ["", "", "", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.write_json": [[427, 431], ["utils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "\",\"", ",", "\": \"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.losses.CrossEntropyLabelSmooth.__init__": [[31, 37], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.losses.CrossEntropyLabelSmooth.forward": [[38, 54], ["losses.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros().scatter_", "torch.autograd.Variable", "targets.cuda.cuda.unsqueeze().data.cpu", "targets.cuda.cuda.cuda", "torch.zeros", "losses.CrossEntropyLabelSmooth.size", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", ".", "scatter_", "(", "\n", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "", "targets", "=", "Variable", "(", "targets", ",", "requires_grad", "=", "False", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.losses.SymbolicTripletLoss.__init__": [[68, 72], ["torch.nn.Module.__init__", "torch.nn.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "SymbolicTripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.losses.SymbolicTripletLoss.forward": [[73, 108], ["inputs.__len__", "torch.zeros", "range", "targets.expand().eq", "range", "torch.stack", "torch.stack", "torch.stack.data.new", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.fill_", "torch.autograd.Variable", "losses.SymbolicTripletLoss.ranking_loss", "range", "targets.expand().t", "torch.stack.append", "torch.stack.append", "range", "targets.expand", "[].max", "[].min", "scipy.stats.wasserstein_distance", "targets.expand"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.video_loader.VideoDataset.__len__"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: feature matrix with shape (batch_size, feat_dim)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "##symbolic triplet loss", "\n", "#n = inputs.size(0)", "\n", "n", "=", "inputs", ".", "__len__", "(", ")", "\n", "dist", "=", "torch", ".", "zeros", "(", "n", ",", "n", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "# distance1 = []", "\n", "for", "index", "in", "range", "(", "n", ")", ":", "\n", "             ", "for", "index1", "in", "range", "(", "n", ")", ":", "\n", "                 ", "distance", "=", "0", "\n", "for", "index3", "in", "range", "(", "2048", ")", ":", "\n", "                     ", "diff_dist", "=", "wasserstein_distance", "(", "inputs", "[", "index", "]", "[", "index3", "]", ",", "inputs", "[", "index1", "]", "[", "index3", "]", ")", "\n", "distance", "=", "distance", "+", "diff_dist", "\n", "", "dist", "[", "index", "]", "[", "index1", "]", "=", "distance", "/", "2048", "\n", "\n", "", "", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ")", "\n", "\n", "", "dist_ap", "=", "torch", ".", "stack", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "stack", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "dist_an", ".", "data", ".", "new", "(", ")", "\n", "y", ".", "resize_as_", "(", "dist_an", ".", "data", ")", "\n", "y", ".", "fill_", "(", "1", ")", "\n", "y", "=", "Variable", "(", "y", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.BasicBlock.__init__": [[55, 85], ["torch.nn.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.nn.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv3x3", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'BasicBlock only supports groups=1 and base_width=64'", "\n", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Dilation > 1 not supported in BasicBlock\"", "\n", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.BasicBlock.forward": [[86, 103], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.Bottleneck.__init__": [[108, 133], ["torch.nn.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.nn.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv1x1", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv3x3", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.Bottleneck.forward": [[134, 155], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.__init__": [[175, 256], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.nn.AdaptiveAvgPool2d", "resnet.ResNet._construct_fc_layer", "torch.nn.Linear", "resnet.ResNet._init_params", "len", "ValueError", "resnet.ResNet.modules", "isinstance", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._construct_fc_layer", "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._init_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "loss", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "feature_dim", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "\n", "format", "(", "replace_stride_with_dilation", ")", "\n", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "last_stride", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", "\n", ")", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "self", ".", "_construct_fc_layer", "(", "\n", "fc_dims", ",", "512", "*", "block", ".", "expansion", ",", "dropout_p", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._make_layer": [[257, 291], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._construct_fc_layer": [[292, 322], ["isinstance", "torch.nn.Sequential", "type", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "layers.append", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_construct_fc_layer", "(", "self", ",", "fc_dims", ",", "input_dim", ",", "dropout_p", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructs fully connected layer\n\n        Args:\n            fc_dims (list or tuple): dimensions of fc layers, if None, no fc layers are constructed\n            input_dim (int): input dimension\n            dropout_p (float): dropout probability, if None, dropout is unused\n        \"\"\"", "\n", "if", "fc_dims", "is", "None", ":", "\n", "            ", "self", ".", "feature_dim", "=", "input_dim", "\n", "return", "None", "\n", "\n", "", "assert", "isinstance", "(", "\n", "fc_dims", ",", "(", "list", ",", "tuple", ")", "\n", ")", ",", "'fc_dims must be either list or tuple, but got {}'", ".", "format", "(", "\n", "type", "(", "fc_dims", ")", "\n", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "dim", "in", "fc_dims", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "dropout_p", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", "\n", "", "input_dim", "=", "dim", "\n", "\n", "", "self", ".", "feature_dim", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet._init_params": [[323, 341], ["resnet.ResNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", "\n", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.featuremaps": [[342, 352], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "", "", "", "def", "featuremaps", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.forward": [[353, 372], ["resnet.ResNet.featuremaps", "resnet.ResNet.global_avgpool", "resnet.ResNet.view", "resnet.ResNet.classifier", "resnet.ResNet.size", "resnet.ResNet.fc", "KeyError"], "methods", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.ResNet.featuremaps"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "self", ".", "featuremaps", "(", "x", ")", "\n", "v", "=", "self", ".", "global_avgpool", "(", "f", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "fc", "is", "not", "None", ":", "\n", "            ", "v", "=", "self", ".", "fc", "(", "v", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "v", "\n", "\n", "", "y", "=", "self", ".", "classifier", "(", "v", ")", "\n", "\n", "if", "self", ".", "loss", "==", "'softmax'", ":", "\n", "            ", "return", "y", ",", "v", "\n", "", "elif", "self", ".", "loss", "==", "'triplet'", ":", "\n", "            ", "return", "y", ",", "v", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported loss: {}\"", ".", "format", "(", "self", ".", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv3x3": [[31, 42], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.conv1x1": [[45, 49], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights": [[374, 388], ["torch.load_url", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "model_zoo.load_url.items", "model_dict[].size", "v.size"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.None.utils.AverageMeter.update"], ["", "", "", "def", "init_pretrained_weights", "(", "model", ",", "model_url", ")", ":", "\n", "    ", "\"\"\"Initializes model with pretrained weights.\n    \n    Layers that don't match with pretrained layers in name or size are kept unchanged.\n    \"\"\"", "\n", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "and", "model_dict", "[", "k", "]", ".", "size", "(", ")", "==", "v", ".", "size", "(", ")", "\n", "}", "\n", "model_dict", ".", "update", "(", "pretrain_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnet18": [[393, 407], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["def", "resnet18", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet18'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnet34": [[409, 423], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["", "def", "resnet34", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet34'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnet50": [[425, 439], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["", "def", "resnet50", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet50'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnet101": [[441, 455], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["", "def", "resnet101", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet101'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnet152": [[457, 471], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["", "def", "resnet152", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet152'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnext50_32x4d": [[476, 492], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["def", "resnext50_32x4d", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "groups", "=", "32", ",", "\n", "width_per_group", "=", "4", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnext50_32x4d'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnext101_32x8d": [[494, 510], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["", "def", "resnext101_32x8d", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dims", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "groups", "=", "32", ",", "\n", "width_per_group", "=", "8", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnext101_32x8d'", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.resnet50_fc512": [[517, 531], ["resnet.ResNet", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.resnet.init_pretrained_weights"], ["def", "resnet50_fc512", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_stride", "=", "1", ",", "\n", "fc_dims", "=", "[", "512", "]", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet50'", "]", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.__init__.get_names": [[8, 10], ["__factory.keys"], "function", ["None"], ["def", "get_names", "(", ")", ":", "\n", "    ", "return", "__factory", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aru05c_SymbolicTemporalPooling.models.__init__.init_model": [[11, 15], ["__factory.keys", "KeyError"], "function", ["None"], ["", "def", "init_model", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", "not", "in", "__factory", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unknown model: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__factory", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]]}