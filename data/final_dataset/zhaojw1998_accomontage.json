{"home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.__init__": [[7, 19], ["transition_model_data_loader.two_bar_dataset.find_all_pairs_and_snippet_pool", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.find_all_pairs_and_snippet_pool"], ["    ", "def", "__init__", "(", "self", ",", "data_path", "=", "'./'", ",", "batch_size", "=", "8", ",", "time_res", "=", "32", ")", ":", "\n", "        ", "song_data", "=", "np", ".", "load", "(", "data_path", ",", "allow_pickle", "=", "True", ")", "[", "'acc'", "]", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "time_res", "=", "time_res", "\n", "\n", "self", ".", "train_pairs", ",", "self", ".", "val_pairs", ",", "self", ".", "snippet_pool", "=", "self", ".", "find_all_pairs_and_snippet_pool", "(", "song_data", ")", "\n", "\n", "self", ".", "train_batch", "=", "None", "\n", "self", ".", "val_batch", "=", "None", "\n", "self", ".", "train_batch_anchor", "=", "None", "\n", "self", ".", "val_batch_anchor", "=", "None", "\n", "self", ".", "num_epoch", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.song_split": [[20, 35], ["range", "numpy.array", "splittedMatrix.append", "numpy.sum"], "methods", ["None"], ["", "def", "song_split", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "\"\"\"matrix must be quantizded in sixteenth note\"\"\"", "\n", "window_size", "=", "self", ".", "time_res", "#two bars", "\n", "hop_size", "=", "self", ".", "time_res", "#one bar", "\n", "vector_size", "=", "matrix", ".", "shape", "[", "1", "]", "\n", "start_downbeat", "=", "0", "\n", "end_downbeat", "=", "matrix", ".", "shape", "[", "0", "]", "//", "16", "\n", "assert", "(", "end_downbeat", "-", "start_downbeat", ">=", "2", ")", "\n", "splittedMatrix", "=", "[", "]", "\n", "for", "idx_T", "in", "range", "(", "start_downbeat", "*", "16", ",", "(", "end_downbeat", "-", "1", ")", "*", "16", ",", "hop_size", ")", ":", "\n", "            ", "sample", "=", "matrix", "[", "idx_T", ":", "idx_T", "+", "window_size", ",", ":", "]", "\n", "if", "np", ".", "sum", "(", "sample", ")", "==", "0", ":", "\n", "                ", "continue", "#skip possible blank regions at the head and tail of each song", "\n", "", "splittedMatrix", ".", "append", "(", "sample", ")", "\n", "", "return", "np", ".", "array", "(", "splittedMatrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.find_all_pairs_and_snippet_pool": [[36, 57], ["numpy.random.seed", "numpy.random.shuffle", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "transition_model_data_loader.two_bar_dataset.song_split", "range", "snippet_pool.append", "transition_model_data_loader.two_bar_dataset.song_split", "range", "snippet_pool.append", "int", "int", "train_pairs.append", "snippet_pool.append", "val_pairs.append", "snippet_pool.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.song_split", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.song_split"], ["", "def", "find_all_pairs_and_snippet_pool", "(", "self", ",", "song_data", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "song_data", ")", "\n", "train_data", "=", "song_data", "[", ":", "int", "(", "len", "(", "song_data", ")", "*", "0.95", ")", "]", "\n", "val_data", "=", "song_data", "[", "int", "(", "len", "(", "song_data", ")", "*", "0.95", ")", ":", "]", "\n", "train_pairs", "=", "[", "]", "\n", "val_pairs", "=", "[", "]", "\n", "snippet_pool", "=", "[", "]", "\n", "for", "song", "in", "tqdm", "(", "train_data", ")", ":", "\n", "            ", "splittedMatrix", "=", "self", ".", "song_split", "(", "song", ")", "\n", "for", "i", "in", "range", "(", "splittedMatrix", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "                ", "train_pairs", ".", "append", "(", "[", "splittedMatrix", "[", "i", "]", ",", "splittedMatrix", "[", "i", "+", "1", "]", "]", ")", "\n", "snippet_pool", ".", "append", "(", "splittedMatrix", "[", "i", "]", ")", "\n", "", "snippet_pool", ".", "append", "(", "splittedMatrix", "[", "-", "1", "]", ")", "\n", "", "for", "song", "in", "tqdm", "(", "val_data", ")", ":", "\n", "            ", "splittedMatrix", "=", "self", ".", "song_split", "(", "song", ")", "\n", "for", "i", "in", "range", "(", "splittedMatrix", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "                ", "val_pairs", ".", "append", "(", "[", "splittedMatrix", "[", "i", "]", ",", "splittedMatrix", "[", "i", "+", "1", "]", "]", ")", "\n", "snippet_pool", ".", "append", "(", "splittedMatrix", "[", "i", "]", ")", "\n", "", "snippet_pool", ".", "append", "(", "splittedMatrix", "[", "-", "1", "]", ")", "\n", "", "return", "train_pairs", ",", "val_pairs", ",", "snippet_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.make_batch": [[58, 103], ["print", "random.shuffle", "random.shuffle", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "print", "print", "print", "print", "range", "numpy.array", "numpy.array().reshape", "numpy.concatenate", "transition_model_data_loader.two_bar_dataset.train_batch.append", "len", "numpy.array", "numpy.array().reshape", "numpy.concatenate", "transition_model_data_loader.two_bar_dataset.train_batch.append", "range", "numpy.array", "numpy.array().reshape", "numpy.concatenate", "transition_model_data_loader.two_bar_dataset.val_batch.append", "len", "numpy.array", "numpy.array().reshape", "numpy.concatenate", "transition_model_data_loader.two_bar_dataset.val_batch.append", "len", "len", "platform.system", "len", "len", "len", "numpy.array", "numpy.array", "len", "numpy.array", "numpy.array", "random.sample", "random.sample", "random.sample", "random.sample"], "methods", ["None"], ["", "def", "make_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "print", "(", "'shuffle dataset'", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "train_pairs", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "snippet_pool", ")", "\n", "\n", "self", ".", "train_batch", "=", "[", "]", "\n", "self", ".", "val_batch", "=", "[", "]", "\n", "self", ".", "train_batch_anchor", "=", "0", "\n", "self", ".", "val_batch_anchor", "=", "0", "\n", "self", ".", "num_epoch", "+=", "1", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "len", "(", "self", ".", "train_pairs", ")", "-", "batch_size", ",", "batch_size", ")", ")", ":", "\n", "            ", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", ":", "\n", "                ", "if", "not", "(", "i", "//", "32", ")", "%", "800", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "", "batch_pair", "=", "np", ".", "array", "(", "self", ".", "train_pairs", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "random_items", "=", "np", ".", "array", "(", "random", ".", "sample", "(", "self", ".", "snippet_pool", ",", "batch_size", "*", "4", ")", ")", ".", "reshape", "(", "(", "batch_size", ",", "4", ",", "32", ",", "128", ")", ")", "\n", "one_batch", "=", "np", ".", "concatenate", "(", "(", "batch_pair", ",", "random_items", ")", ",", "axis", "=", "1", ")", "\n", "#one_batch: batch_size * 6 * 32 * 128", "\n", "self", ".", "train_batch", ".", "append", "(", "one_batch", ")", "\n", "", "if", "i", "+", "batch_size", "<", "len", "(", "self", ".", "train_pairs", ")", ":", "\n", "            ", "rest", "=", "len", "(", "self", ".", "train_pairs", ")", "-", "(", "i", "+", "batch_size", ")", "\n", "batch_pair", "=", "np", ".", "array", "(", "self", ".", "train_pairs", "[", "-", "rest", ":", "]", ")", "\n", "random_items", "=", "np", ".", "array", "(", "random", ".", "sample", "(", "self", ".", "snippet_pool", ",", "rest", "*", "4", ")", ")", ".", "reshape", "(", "(", "rest", ",", "4", ",", "32", ",", "128", ")", ")", "\n", "one_batch", "=", "np", ".", "concatenate", "(", "(", "batch_pair", ",", "random_items", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "train_batch", ".", "append", "(", "one_batch", ")", "\n", "\n", "", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "len", "(", "self", ".", "val_pairs", ")", "-", "batch_size", ",", "batch_size", ")", ")", ":", "\n", "#if platform.system() == 'Windows':", "\n", "#    if not (i//32) % 80 == 0:", "\n", "#        continue", "\n", "            ", "batch_pair", "=", "np", ".", "array", "(", "self", ".", "val_pairs", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "random_items", "=", "np", ".", "array", "(", "random", ".", "sample", "(", "self", ".", "snippet_pool", ",", "batch_size", "*", "4", ")", ")", ".", "reshape", "(", "(", "batch_size", ",", "4", ",", "32", ",", "128", ")", ")", "\n", "one_batch", "=", "np", ".", "concatenate", "(", "(", "batch_pair", ",", "random_items", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "val_batch", ".", "append", "(", "one_batch", ")", "\n", "", "if", "i", "+", "batch_size", "<", "len", "(", "self", ".", "val_pairs", ")", ":", "\n", "            ", "rest", "=", "len", "(", "self", ".", "val_pairs", ")", "-", "(", "i", "+", "batch_size", ")", "\n", "batch_pair", "=", "np", ".", "array", "(", "self", ".", "val_pairs", "[", "-", "rest", ":", "]", ")", "\n", "random_items", "=", "np", ".", "array", "(", "random", ".", "sample", "(", "self", ".", "snippet_pool", ",", "rest", "*", "4", ")", ")", ".", "reshape", "(", "(", "rest", ",", "4", ",", "32", ",", "128", ")", ")", "\n", "one_batch", "=", "np", ".", "concatenate", "(", "(", "batch_pair", ",", "random_items", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "val_batch", ".", "append", "(", "one_batch", ")", "\n", "", "print", "(", "'num_epoch:'", ",", "self", ".", "num_epoch", ")", "\n", "print", "(", "'shuffle finished'", ")", "\n", "print", "(", "'size of train_batch:'", ",", "len", "(", "self", ".", "train_batch", ")", ")", "\n", "print", "(", "'size of val_batch:'", ",", "len", "(", "self", ".", "val_batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_batch": [[104, 117], ["len", "transition_model_data_loader.two_bar_dataset.make_batch", "len"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.make_batch"], ["", "def", "get_batch", "(", "self", ",", "stage", "=", "'train'", ")", ":", "\n", "        ", "if", "stage", "==", "'train'", ":", "\n", "            ", "idx", "=", "self", ".", "train_batch_anchor", "\n", "self", ".", "train_batch_anchor", "+=", "1", "\n", "if", "self", ".", "train_batch_anchor", "==", "len", "(", "self", ".", "train_batch", ")", ":", "\n", "                ", "self", ".", "make_batch", "(", "self", ".", "batch_size", ")", "\n", "", "return", "self", ".", "train_batch", "[", "idx", "]", "\n", "", "elif", "stage", "==", "'val'", ":", "\n", "            ", "idx", "=", "self", ".", "val_batch_anchor", "\n", "self", ".", "val_batch_anchor", "+=", "1", "\n", "if", "self", ".", "val_batch_anchor", "==", "len", "(", "self", ".", "val_batch", ")", ":", "\n", "                ", "self", ".", "val_batch_anchor", "=", "0", "\n", "", "return", "self", ".", "val_batch", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_batch_volumn": [[118, 123], ["len", "len"], "methods", ["None"], ["", "", "def", "get_batch_volumn", "(", "self", ",", "stage", "=", "'train'", ")", ":", "\n", "        ", "if", "stage", "==", "'train'", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_batch", ")", "\n", "", "elif", "stage", "==", "'val'", ":", "\n", "            ", "return", "len", "(", "self", ".", "val_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_epoch": [[124, 126], ["None"], "methods", ["None"], ["", "", "def", "get_epoch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.MinExponentialLR.__init__": [[42, 45], ["torch.optim.lr_scheduler.ExponentialLR.__init__"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "gamma", ",", "minimum", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "min", "=", "minimum", "\n", "super", "(", "MinExponentialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "gamma", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.MinExponentialLR.get_lr": [[46, 50], ["max"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "max", "(", "base_lr", "*", "self", ".", "gamma", "**", "self", ".", "last_epoch", ",", "self", ".", "min", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.AverageMeter.__init__": [[54, 56], ["transition_model_train_contrastive.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.AverageMeter.reset": [[57, 62], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.AverageMeter.update": [[63, 68], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.train": [[69, 101], ["dataset.get_batch", "torch.from_numpy().float().cuda", "optimizer_2.zero_grad", "texture_model", "batch.view.view", "optimizer.zero_grad", "two_bar_contrastive_model.contrastive_model", "two_bar_contrastive_model.contrastive_model.contrastive_loss", "contrastive_model.contrastive_loss.backward", "torch.nn.utils.clip_grad_norm_", "optimizer_2.step", "optimizer.step", "loss_recorder.update", "scheduler_2.step", "scheduler.step", "dataset.get_epoch", "dataset.get_batch_volumn", "print", "print", "print", "writer.add_scalar", "writer.add_scalar", "batch.view.view", "two_bar_contrastive_model.contrastive_model.parameters", "contrastive_model.contrastive_loss.item", "print", "torch.from_numpy().float", "contrastive_model.contrastive_loss.item", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_batch", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.two_bar_contrastive_model.contrastive_model.contrastive_loss", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.AverageMeter.update", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_epoch", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_batch_volumn"], ["", "", "def", "train", "(", "contrastive_model", ",", "texture_model", ",", "dataset", ",", "optimizer", ",", "scheduler", ",", "loss_recorder", ",", "writer", ")", ":", "\n", "    ", "batch", "=", "dataset", ".", "get_batch", "(", "'train'", ")", "#8 * 6 * 8 * 32 * 128", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "batch", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "bs", ",", "pos_neg", ",", "time", ",", "roll", "=", "batch", ".", "shape", "\n", "optimizer_2", ".", "zero_grad", "(", ")", "\n", "_", ",", "batch", "=", "texture_model", "(", "batch", ".", "view", "(", "-", "1", ",", "time", ",", "roll", ")", ")", "\n", "batch", "=", "batch", ".", "view", "(", "bs", ",", "pos_neg", ",", "-", "1", ")", "\n", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "similarity", "=", "contrastive_model", "(", "batch", ")", "\n", "model_loss", "=", "contrastive_model", ".", "contrastive_loss", "(", "similarity", ")", "\n", "model_loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "contrastive_model", ".", "parameters", "(", ")", ",", "1", ")", "\n", "optimizer_2", ".", "step", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_recorder", ".", "update", "(", "model_loss", ".", "item", "(", ")", ")", "\n", "scheduler_2", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "n_epoch", "=", "dataset", ".", "get_epoch", "(", ")", "\n", "total_batch", "=", "dataset", ".", "get_batch_volumn", "(", "'train'", ")", "\n", "current_batch", "=", "dataset", ".", "train_batch_anchor", "\n", "step", "=", "current_batch", "+", "n_epoch", "*", "total_batch", "\n", "\n", "print", "(", "'---------------------------Training VAE----------------------------'", ")", "\n", "for", "param", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "print", "(", "'lr1: '", ",", "param", "[", "'lr'", "]", ")", "\n", "", "print", "(", "'Epoch: [{0}][{1}/{2}]'", ".", "format", "(", "n_epoch", ",", "current_batch", ",", "total_batch", ")", ")", "\n", "print", "(", "'loss: {loss:.5f}'", ".", "format", "(", "loss", "=", "model_loss", ".", "item", "(", ")", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'train_vae/1-loss_total-epoch'", ",", "loss_recorder", ".", "avg", ",", "step", ")", "\n", "writer", ".", "add_scalar", "(", "'train_vae/5-learning-rate'", ",", "param", "[", "'lr'", "]", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.val": [[102, 122], ["range", "writer.add_scalar", "dataset.get_batch_volumn", "dataset.get_batch", "torch.from_numpy().float().cuda", "texture_model", "batch.view.view", "dataset.get_epoch", "dataset.get_batch_volumn", "print", "print", "print", "batch.view.view", "torch.no_grad", "two_bar_contrastive_model.contrastive_model", "two_bar_contrastive_model.contrastive_model.contrastive_loss", "loss.update", "torch.from_numpy().float", "contrastive_model.contrastive_loss.item", "contrastive_model.contrastive_loss.item", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_batch_volumn", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_batch", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_epoch", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_data_loader.two_bar_dataset.get_batch_volumn", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.two_bar_contrastive_model.contrastive_model.contrastive_loss", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.None.transition_model_train_contrastive.AverageMeter.update"], ["", "def", "val", "(", "contrastive_model", ",", "texture_model", ",", "dataset", ",", "writer", ",", "val_loss_recoder", ")", ":", "\n", "    ", "loss", "=", "val_loss_recoder", "\n", "step", "=", "1", "\n", "for", "i", "in", "range", "(", "dataset", ".", "get_batch_volumn", "(", "'val'", ")", ")", ":", "\n", "        ", "batch", "=", "dataset", ".", "get_batch", "(", "'val'", ")", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "batch", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "bs", ",", "pos_neg", ",", "time", ",", "roll", "=", "batch", ".", "shape", "\n", "_", ",", "batch", "=", "texture_model", "(", "batch", ".", "view", "(", "-", "1", ",", "time", ",", "roll", ")", ")", "\n", "batch", "=", "batch", ".", "view", "(", "bs", ",", "pos_neg", ",", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "similarity", "=", "contrastive_model", "(", "batch", ")", "\n", "model_loss", "=", "contrastive_model", ".", "contrastive_loss", "(", "similarity", ")", "\n", "loss", ".", "update", "(", "model_loss", ".", "item", "(", ")", ")", "\n", "", "n_epoch", "=", "dataset", ".", "get_epoch", "(", ")", "\n", "total_batch", "=", "dataset", ".", "get_batch_volumn", "(", "'val'", ")", "\n", "print", "(", "'----validation----'", ")", "\n", "print", "(", "'Epoch: [{0}][{1}/{2}]'", ".", "format", "(", "n_epoch", ",", "step", ",", "total_batch", ")", ")", "\n", "print", "(", "'loss: {loss:.5f}'", ".", "format", "(", "loss", "=", "model_loss", ".", "item", "(", ")", ")", ")", "\n", "step", "+=", "1", "\n", "", "writer", ".", "add_scalar", "(", "'val/loss_total-epoch'", ",", "loss", ".", "avg", ",", "n_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.demo_format_convert": [[4, 6], ["f"], "function", ["None"], ["def", "demo_format_convert", "(", "data", ",", "f", ",", "*", "inputs", ")", ":", "\n", "    ", "return", "[", "[", "f", "(", "x", ",", "*", "inputs", ")", "for", "x", "in", "track", "]", "for", "track", "in", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.bpm_to_alpha": [[8, 10], ["None"], "function", ["None"], ["", "def", "bpm_to_alpha", "(", "bpm", ")", ":", "\n", "    ", "return", "60", "/", "bpm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.add_notes": [[12, 21], ["enumerate", "pretty_midi.Note"], "function", ["None"], ["", "def", "add_notes", "(", "track", ",", "shift_second", ",", "alpha", ")", ":", "\n", "    ", "notes", "=", "[", "]", "\n", "ss", "=", "0", "\n", "for", "i", ",", "seg", "in", "enumerate", "(", "track", ")", ":", "\n", "        ", "notes", "+=", "[", "pretty_midi", ".", "Note", "(", "n", ".", "velocity", ",", "n", ".", "pitch", ",", "\n", "n", ".", "start", "+", "ss", ",", "n", ".", "end", "+", "ss", ")", "\n", "for", "n", "in", "seg", "]", "\n", "ss", "+=", "shift_second", "\n", "", "return", "notes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.demo_to_midi": [[23, 33], ["demo_maker.bpm_to_alpha", "pretty_midi.PrettyMIDI", "zip", "pretty_midi.Instrument", "demo_maker.add_notes", "pretty_midi.PrettyMIDI.instruments.append"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.bpm_to_alpha", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.add_notes"], ["", "def", "demo_to_midi", "(", "data", ",", "names", ",", "bpm", "=", "90.", ",", "shift_second", "=", "None", ",", "shift_beat", "=", "None", ")", ":", "\n", "    ", "alpha", "=", "bpm_to_alpha", "(", "bpm", ")", "\n", "if", "shift_second", "is", "None", ":", "\n", "        ", "shift_second", "=", "alpha", "*", "shift_beat", "\n", "", "midi", "=", "pretty_midi", ".", "PrettyMIDI", "(", "initial_tempo", "=", "bpm", ")", "\n", "for", "track", ",", "name", "in", "zip", "(", "data", ",", "names", ")", ":", "\n", "        ", "ins", "=", "pretty_midi", ".", "Instrument", "(", "0", ",", "name", "=", "name", ")", "\n", "ins", ".", "notes", "=", "add_notes", "(", "track", ",", "shift_second", ",", "alpha", ")", "\n", "midi", ".", "instruments", ".", "append", "(", "ins", ")", "\n", "", "return", "midi", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.write_demo": [[35, 38], ["demo_maker.demo_to_midi", "demo_to_midi.write"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.amc_dl.demo_maker.demo_to_midi"], ["", "def", "write_demo", "(", "fn", ",", "data", ",", "names", ",", "bpm", "=", "90.", ",", "shift_second", "=", "None", ",", "shift_beat", "=", "None", ")", ":", "\n", "    ", "midi", "=", "demo_to_midi", "(", "data", ",", "names", ",", "bpm", ",", "shift_second", ",", "shift_beat", ")", "\n", "midi", ".", "write", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.example.MinExponentialLR.__init__": [[5, 8], ["torch.optim.lr_scheduler.ExponentialLR.__init__"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "gamma", ",", "minimum", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "min", "=", "minimum", "\n", "super", "(", "MinExponentialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "gamma", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.example.MinExponentialLR.get_lr": [[9, 13], ["max"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "max", "(", "base_lr", "*", "self", ".", "gamma", "**", "self", ".", "last_epoch", ",", "self", ".", "min", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", ""]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.__init__": [[10, 17], ["torch.nn.Module.__init__", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "device", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "super", "(", "PytorchModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "'cpu'", ")", "\n", "", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.run": [[18, 22], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "\"\"\"A general way to run the model.\n        Usually tensor input -> tensor output\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.loss": [[23, 27], ["None"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "*", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Call it during training. The output is loss and possibly others to\n        display on tensorboard.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.inference": [[28, 32], ["None"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "\"\"\"Call it during inference.\n        The output is usually numpy after argmax.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.loss_function": [[33, 35], ["None"], "methods", ["None"], ["", "def", "loss_function", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.forward": [[36, 45], ["module.PytorchModel.run", "module.PytorchModel.loss", "module.PytorchModel.inference"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.run", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.loss", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference"], ["", "def", "forward", "(", "self", ",", "mode", ",", "*", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mode", "in", "[", "\"run\"", ",", "0", "]", ":", "\n", "            ", "return", "self", ".", "run", "(", "*", "input", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "in", "[", "'loss'", ",", "'train'", ",", "1", "]", ":", "\n", "            ", "return", "self", ".", "loss", "(", "*", "input", ",", "**", "kwargs", ")", "\n", "", "elif", "mode", "in", "[", "'inference'", ",", "'eval'", ",", "'val'", ",", "2", "]", ":", "\n", "            ", "return", "self", ".", "inference", "(", "*", "input", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.load_model": [[46, 54], ["torch.load", "list", "module.PytorchModel.load_state_dict", "module.PytorchModel.to", "torch.load.keys", "torch.load.pop", "name.replace"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ",", "model_path", ",", "map_location", "=", "None", ")", ":", "\n", "        ", "if", "map_location", "is", "None", ":", "\n", "            ", "map_location", "=", "self", ".", "device", "\n", "", "dic", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "map_location", ")", "\n", "for", "name", "in", "list", "(", "dic", ".", "keys", "(", ")", ")", ":", "\n", "            ", "dic", "[", "name", ".", "replace", "(", "'module.'", ",", "''", ")", "]", "=", "dic", ".", "pop", "(", "name", ")", "\n", "", "self", ".", "load_state_dict", "(", "dic", ")", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.PytorchModel.init_model": [[55, 58], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_model", "(", "*", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.__init__": [[62, 83], ["module.TrainingInterface.model.to", "kwargs.items", "torch.nn.DataParallel", "setattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "model", ",", "parallel", ",", "log_path_mng", ",", "data_loaders", ",", "\n", "summary_writers", ",", "\n", "opt_scheduler", ",", "param_scheduler", ",", "n_epoch", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "device", "=", "device", "\n", "if", "parallel", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "self", ".", "path_mng", "=", "log_path_mng", "\n", "self", ".", "summary_writers", "=", "summary_writers", "\n", "self", ".", "data_loaders", "=", "data_loaders", "\n", "self", ".", "opt_scheduler", "=", "opt_scheduler", "\n", "self", ".", "param_scheduler", "=", "param_scheduler", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_epoch", "=", "n_epoch", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "train_step", "=", "0", "\n", "self", ".", "val_step", "=", "0", "\n", "self", ".", "parallel", "=", "parallel", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.name": [[84, 90], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "parallel", ":", "\n", "            ", "return", "self", ".", "model", ".", "module", ".", "name", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.log_path": [[91, 94], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "log_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "path_mng", ".", "log_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.model_path": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "path_mng", ".", "model_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.writer_path": [[99, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "writer_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "path_mng", ".", "writer_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.writer_names": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "writer_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "summary_writers", ".", "writer_names", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._init_loss_dic": [[107, 112], ["None"], "methods", ["None"], ["", "def", "_init_loss_dic", "(", "self", ")", ":", "\n", "        ", "loss_dic", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "writer_names", ":", "\n", "            ", "loss_dic", "[", "key", "]", "=", "0.", "\n", "", "return", "loss_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._accumulate_loss_dic": [[113, 118], ["zip", "len", "len", "val.item"], "methods", ["None"], ["", "def", "_accumulate_loss_dic", "(", "self", ",", "loss_dic", ",", "loss_items", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "writer_names", ")", "==", "len", "(", "loss_items", ")", "\n", "for", "key", ",", "val", "in", "zip", "(", "self", ".", "writer_names", ",", "loss_items", ")", ":", "\n", "            ", "loss_dic", "[", "key", "]", "+=", "val", ".", "item", "(", ")", "\n", "", "return", "loss_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._write_loss_to_dic": [[119, 125], ["zip", "len", "len", "val.item"], "methods", ["None"], ["", "def", "_write_loss_to_dic", "(", "self", ",", "loss_items", ")", ":", "\n", "        ", "loss_dic", "=", "{", "}", "\n", "assert", "len", "(", "self", ".", "writer_names", ")", "==", "len", "(", "loss_items", ")", "\n", "for", "key", ",", "val", "in", "zip", "(", "self", ".", "writer_names", ",", "loss_items", ")", ":", "\n", "            ", "loss_dic", "[", "key", "]", "=", "val", ".", "item", "(", ")", "\n", "", "return", "loss_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._batch_to_inputs": [[126, 128], ["None"], "methods", ["None"], ["", "def", "_batch_to_inputs", "(", "self", ",", "batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.train": [[129, 154], ["module.TrainingInterface.model.train", "module.TrainingInterface.param_scheduler.train", "module.TrainingInterface._init_loss_dic", "enumerate", "module.TrainingInterface._batch_to_inputs", "module.TrainingInterface.opt_scheduler.optimizer_zero_grad", "module.TrainingInterface.param_scheduler.step", "module.TrainingInterface.model", "module.TrainingInterface._sum_parallel_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "module.TrainingInterface.opt_scheduler.step", "module.TrainingInterface._accumulate_loss_dic", "module.TrainingInterface._write_loss_to_dic", "module.TrainingInterface.summary_writers.write_task", "module.TrainingInterface.model.parameters"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.train", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.train", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._init_loss_dic", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._batch_to_inputs", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.OptimizerScheduler.optimizer_zero_grad", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._sum_parallel_loss", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._accumulate_loss_dic", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._write_loss_to_dic", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.write_task"], ["", "def", "train", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "param_scheduler", ".", "train", "(", ")", "\n", "epoch_loss_dic", "=", "self", ".", "_init_loss_dic", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "data_loaders", ".", "train_loader", ")", ":", "\n", "#print(len(batch))", "\n", "            ", "inputs", "=", "self", ".", "_batch_to_inputs", "(", "batch", ")", "\n", "#print(type(input))", "\n", "self", ".", "opt_scheduler", ".", "optimizer_zero_grad", "(", ")", "\n", "input_params", "=", "self", ".", "param_scheduler", ".", "step", "(", ")", "\n", "#print(input_params.keys())", "\n", "outputs", "=", "self", ".", "model", "(", "'train'", ",", "*", "inputs", ",", "**", "input_params", ")", "\n", "outputs", "=", "self", ".", "_sum_parallel_loss", "(", "outputs", ")", "\n", "loss", "=", "outputs", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "opt_scheduler", ".", "clip", ")", "\n", "self", ".", "opt_scheduler", ".", "step", "(", ")", "\n", "self", ".", "_accumulate_loss_dic", "(", "epoch_loss_dic", ",", "outputs", ")", "\n", "batch_loss_dic", "=", "self", ".", "_write_loss_to_dic", "(", "outputs", ")", "\n", "self", ".", "summary_writers", ".", "write_task", "(", "'train'", ",", "batch_loss_dic", ",", "\n", "self", ".", "train_step", ")", "\n", "self", ".", "train_step", "+=", "1", "\n", "", "return", "epoch_loss_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._sum_parallel_loss": [[155, 163], ["isinstance", "tuple", "loss.mean", "x.mean"], "methods", ["None"], ["", "def", "_sum_parallel_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "self", ".", "parallel", ":", "\n", "            ", "if", "isinstance", "(", "loss", ",", "tuple", ")", ":", "\n", "                ", "return", "tuple", "(", "[", "x", ".", "mean", "(", ")", "for", "x", "in", "loss", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "loss", ".", "mean", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.eval": [[164, 181], ["module.TrainingInterface.model.eval", "module.TrainingInterface.param_scheduler.eval", "module.TrainingInterface._init_loss_dic", "enumerate", "module.TrainingInterface._batch_to_inputs", "module.TrainingInterface.param_scheduler.step", "module.TrainingInterface._accumulate_loss_dic", "module.TrainingInterface._write_loss_to_dic", "module.TrainingInterface.summary_writers.write_task", "torch.no_grad", "module.TrainingInterface.model", "module.TrainingInterface._sum_parallel_loss"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._init_loss_dic", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._batch_to_inputs", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._accumulate_loss_dic", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._write_loss_to_dic", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.write_task", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface._sum_parallel_loss"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "param_scheduler", ".", "eval", "(", ")", "\n", "epoch_loss_dic", "=", "self", ".", "_init_loss_dic", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "self", ".", "data_loaders", ".", "val_loader", ")", ":", "\n", "            ", "inputs", "=", "self", ".", "_batch_to_inputs", "(", "batch", ")", "\n", "input_params", "=", "self", ".", "param_scheduler", ".", "step", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "'train'", ",", "*", "inputs", ",", "**", "input_params", ")", "\n", "outputs", "=", "self", ".", "_sum_parallel_loss", "(", "outputs", ")", "\n", "", "self", ".", "_accumulate_loss_dic", "(", "epoch_loss_dic", ",", "outputs", ")", "\n", "batch_loss_dic", "=", "self", ".", "_write_loss_to_dic", "(", "outputs", ")", "\n", "self", ".", "summary_writers", ".", "write_task", "(", "'val'", ",", "batch_loss_dic", ",", "\n", "self", ".", "val_step", ")", "\n", "self", ".", "val_step", "+=", "1", "\n", "", "return", "epoch_loss_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.save_model": [[182, 187], ["torch.save", "torch.save", "module.TrainingInterface.model.module.state_dict", "module.TrainingInterface.model.state_dict"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "fn", ")", ":", "\n", "        ", "if", "self", ".", "parallel", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", ",", "fn", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.epoch_report": [[188, 197], ["train_utils.epoch_time", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.epoch_time"], ["", "", "def", "epoch_report", "(", "self", ",", "start_time", ",", "end_time", ",", "train_loss", ",", "valid_loss", ")", ":", "\n", "        ", "epoch_mins", ",", "epoch_secs", "=", "epoch_time", "(", "start_time", ",", "end_time", ")", "\n", "print", "(", "f'Epoch: {self.epoch + 1:02} | '", "\n", "f'Time: {epoch_mins}m {epoch_secs}s'", ",", "\n", "flush", "=", "True", ")", "\n", "print", "(", "\n", "f'\\tTrain Loss: {train_loss:.3f}'", ",", "flush", "=", "True", ")", "\n", "print", "(", "\n", "f'\\t Valid. Loss: {valid_loss:.3f}'", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.run": [[198, 217], ["float", "range", "module.TrainingInterface.save_model", "print", "time.time", "time.time", "module.TrainingInterface.save_model", "module.TrainingInterface.epoch_report", "module.TrainingInterface.path_mng.final_model_path", "module.TrainingInterface.train", "module.TrainingInterface.eval", "module.TrainingInterface.path_mng.epoch_model_path", "module.TrainingInterface.save_model", "module.TrainingInterface.path_mng.valid_model_path"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.save_model", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.save_model", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.epoch_report", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.final_model_path", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.train", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.epoch_model_path", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.module.TrainingInterface.save_model", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.valid_model_path"], ["", "def", "run", "(", "self", ",", "start_epoch", "=", "0", ",", "start_train_step", "=", "0", ",", "start_val_step", "=", "0", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "start_epoch", "\n", "self", ".", "train_step", "=", "start_train_step", "\n", "self", ".", "val_step", "=", "start_val_step", "\n", "best_valid_loss", "=", "float", "(", "'inf'", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_epoch", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "self", ".", "train", "(", ")", "[", "'loss'", "]", "\n", "val_loss", "=", "self", ".", "eval", "(", ")", "[", "'loss'", "]", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "save_model", "(", "self", ".", "path_mng", ".", "epoch_model_path", "(", "self", ".", "name", ")", ")", "\n", "if", "val_loss", "<", "best_valid_loss", ":", "\n", "                ", "best_valid_loss", "=", "val_loss", "\n", "self", ".", "save_model", "(", "self", ".", "path_mng", ".", "valid_model_path", "(", "self", ".", "name", ")", ")", "\n", "", "self", ".", "epoch_report", "(", "start_time", ",", "end_time", ",", "train_loss", ",", "val_loss", ")", "\n", "self", ".", "epoch", "+=", "1", "\n", "", "self", ".", "save_model", "(", "self", ".", "path_mng", ".", "final_model_path", "(", "self", ".", "name", ")", ")", "\n", "print", "(", "'Model saved.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "step", "=", "0", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "_step", "=", "step", "\n", "self", ".", "_mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler._update_step": [[10, 17], ["None"], "methods", ["None"], ["", "def", "_update_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_mode", "==", "'train'", ":", "\n", "            ", "self", ".", "_step", "+=", "1", "\n", "", "elif", "self", ".", "_mode", "==", "'val'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler.step": [[18, 20], ["None"], "methods", ["None"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler.train": [[21, 23], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "_mode", "=", "'train'", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler.eval": [[24, 26], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "_mode", "=", "'val'", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ConstantScheduler.__init__": [[30, 33], ["scheduler._Scheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "step", "=", "0.", ")", ":", "\n", "        ", "super", "(", "ConstantScheduler", ",", "self", ")", ".", "__init__", "(", "step", ")", "\n", "self", ".", "param", "=", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ConstantScheduler.step": [[34, 37], ["scheduler.ConstantScheduler._update_step"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler._update_step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "_update_step", "(", ")", "\n", "return", "self", ".", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.TeacherForcingScheduler.__init__": [[41, 47], ["scheduler._Scheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "high", ",", "low", ",", "f", "=", "scheduled_sampling", ",", "step", "=", "0", ")", ":", "\n", "        ", "super", "(", "TeacherForcingScheduler", ",", "self", ")", ".", "__init__", "(", "step", ")", "\n", "self", ".", "high", "=", "high", "\n", "self", ".", "low", "=", "low", "\n", "self", ".", "_step", "=", "step", "\n", "self", ".", "schedule_f", "=", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.TeacherForcingScheduler.get_tfr": [[48, 50], ["scheduler.TeacherForcingScheduler.schedule_f"], "methods", ["None"], ["", "def", "get_tfr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "schedule_f", "(", "self", ".", "_step", ",", "self", ".", "high", ",", "self", ".", "low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.TeacherForcingScheduler.step": [[51, 55], ["scheduler.TeacherForcingScheduler.get_tfr", "scheduler.TeacherForcingScheduler._update_step"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.TeacherForcingScheduler.get_tfr", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler._update_step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "tfr", "=", "self", ".", "get_tfr", "(", ")", "\n", "self", ".", "_update_step", "(", ")", "\n", "return", "tfr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.OptimizerScheduler.__init__": [[59, 65], ["scheduler._Scheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "scheduler", ",", "clip", ",", "step", "=", "0", ")", ":", "\n", "# optimizer and scheduler are pytorch class", "\n", "        ", "super", "(", "OptimizerScheduler", ",", "self", ")", ".", "__init__", "(", "step", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "clip", "=", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.OptimizerScheduler.optimizer_zero_grad": [[66, 68], ["scheduler.OptimizerScheduler.optimizer.zero_grad"], "methods", ["None"], ["", "def", "optimizer_zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.OptimizerScheduler.step": [[69, 75], ["scheduler.OptimizerScheduler.optimizer.step", "scheduler.OptimizerScheduler.scheduler.step", "scheduler.OptimizerScheduler._update_step", "scheduler.OptimizerScheduler.optimizer_zero_grad"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler._Scheduler._update_step", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.OptimizerScheduler.optimizer_zero_grad"], ["", "def", "step", "(", "self", ",", "require_zero_grad", "=", "False", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "if", "require_zero_grad", ":", "\n", "            ", "self", ".", "optimizer_zero_grad", "(", ")", "\n", "", "self", ".", "_update_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.__init__": [[79, 84], ["scheduler._Scheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "step", "=", "0", ",", "mode", "=", "'train'", ",", "**", "schedulers", ")", ":", "\n", "# optimizer and scheduler are pytorch class", "\n", "        ", "super", "(", "ParameterScheduler", ",", "self", ")", ".", "__init__", "(", "step", ")", "\n", "self", ".", "schedulers", "=", "schedulers", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.train": [[85, 89], ["scheduler.ParameterScheduler.schedulers.values", "scheduler.train"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'train'", "\n", "for", "scheduler", "in", "self", ".", "schedulers", ".", "values", "(", ")", ":", "\n", "            ", "scheduler", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval": [[90, 94], ["scheduler.ParameterScheduler.schedulers.values", "scheduler.eval"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "'val'", "\n", "for", "scheduler", "in", "self", ".", "schedulers", ".", "values", "(", ")", ":", "\n", "            ", "scheduler", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step": [[95, 100], ["scheduler.ParameterScheduler.schedulers.items", "scheduler.step"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.step"], ["", "", "def", "step", "(", "self", ",", "require_zero_grad", "=", "False", ")", ":", "\n", "        ", "params_dic", "=", "{", "}", "\n", "for", "key", ",", "scheduler", "in", "self", ".", "schedulers", ".", "items", "(", ")", ":", "\n", "            ", "params_dic", "[", "key", "]", "=", "scheduler", ".", "step", "(", ")", "\n", "", "return", "params_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.epoch_time": [[6, 11], ["int", "int"], "function", ["None"], ["def", "epoch_time", "(", "start_time", ",", "end_time", ")", ":", "\n", "    ", "elapsed_time", "=", "end_time", "-", "start_time", "\n", "elapsed_mins", "=", "int", "(", "elapsed_time", "/", "60", ")", "\n", "elapsed_secs", "=", "int", "(", "elapsed_time", "-", "(", "elapsed_mins", "*", "60", ")", ")", "\n", "return", "elapsed_mins", ",", "elapsed_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.join_fn": [[13, 15], ["None"], "function", ["None"], ["", "def", "join_fn", "(", "*", "items", ",", "ext", "=", "'pt'", ")", ":", "\n", "    ", "return", "'.'", ".", "join", "(", "[", "'_'", ".", "join", "(", "items", ")", ",", "ext", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.scheduled_sampling": [[17, 22], ["numpy.exp"], "function", ["None"], ["", "def", "scheduled_sampling", "(", "i", ",", "high", "=", "0.7", ",", "low", "=", "0.05", ")", ":", "\n", "    ", "x", "=", "10", "*", "(", "i", "-", "0.5", ")", "\n", "z", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "x", ")", ")", "\n", "y", "=", "(", "high", "-", "low", ")", "*", "z", "+", "low", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.kl_anealing": [[24, 31], ["numpy.exp"], "function", ["None"], ["", "def", "kl_anealing", "(", "i", ",", "high", "=", "0.1", ",", "low", "=", "0.", ")", ":", "\n", "    ", "hh", "=", "1", "-", "low", "\n", "ll", "=", "1", "-", "high", "\n", "x", "=", "10", "*", "(", "i", "-", "0.5", ")", "\n", "z", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "x", ")", ")", "\n", "y", "=", "(", "hh", "-", "ll", ")", "*", "z", "+", "ll", "\n", "return", "1", "-", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.get_zs_from_dists": [[33, 35], ["dist.rsample"], "function", ["None"], ["", "def", "get_zs_from_dists", "(", "dists", ",", "sample", "=", "False", ")", ":", "\n", "    ", "return", "[", "dist", ".", "rsample", "(", ")", "if", "sample", "else", "dist", ".", "mean", "for", "dist", "in", "dists", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.standard_normal": [[37, 43], ["torch.distributions.Normal", "torch.cuda.is_available", "torch.zeros", "torch.ones", "torch.distributions.Normal.loc.cuda", "torch.distributions.Normal.scale.cuda"], "function", ["None"], ["", "def", "standard_normal", "(", "shape", ")", ":", "\n", "    ", "N", "=", "Normal", "(", "torch", ".", "zeros", "(", "shape", ")", ",", "torch", ".", "ones", "(", "shape", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "N", ".", "loc", "=", "N", ".", "loc", ".", "cuda", "(", ")", "\n", "N", ".", "scale", "=", "N", ".", "scale", ".", "cuda", "(", ")", "\n", "", "return", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.kl_with_normal": [[45, 50], ["dist.mean.size", "train_utils.standard_normal", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.standard_normal"], ["", "def", "kl_with_normal", "(", "dist", ")", ":", "\n", "    ", "shape", "=", "dist", ".", "mean", ".", "size", "(", "-", "1", ")", "\n", "normal", "=", "standard_normal", "(", "shape", ")", "\n", "kl", "=", "kl_divergence", "(", "dist", ",", "normal", ")", ".", "mean", "(", ")", "\n", "return", "kl", "\n", "", ""]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.__init__": [[16, 34], ["os.path.join", "os.path.join", "os.path.join", "manager.LogPathManager.create_path", "manager.LogPathManager.create_path", "manager.LogPathManager.create_path", "str", "datetime.datetime.now().time().strftime", "shutil.copyfile", "datetime.date.today", "os.path.join", "datetime.datetime.now().time", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.create_path", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.create_path", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.create_path"], ["    ", "def", "__init__", "(", "self", ",", "readme_fn", "=", "None", ",", "log_path_name", "=", "'result'", ",", "\n", "with_date", "=", "True", ",", "with_time", "=", "True", ",", "\n", "writer_folder", "=", "'writers'", ",", "model_folder", "=", "'models'", ")", ":", "\n", "        ", "date", "=", "str", "(", "datetime", ".", "date", ".", "today", "(", ")", ")", "if", "with_date", "else", "''", "\n", "ctime", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "time", "(", ")", ".", "strftime", "(", "\"%H%M%S\"", ")", "if", "with_time", "else", "''", "\n", "log_folder", "=", "'_'", ".", "join", "(", "[", "log_path_name", ",", "date", ",", "ctime", "]", ")", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "'.'", ",", "log_folder", ")", "\n", "writer_path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "writer_folder", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "model_folder", ")", "\n", "self", ".", "log_path", "=", "log_path", "\n", "self", ".", "writer_path", "=", "writer_path", "\n", "self", ".", "model_path", "=", "model_path", "\n", "LogPathManager", ".", "create_path", "(", "log_path", ")", "\n", "LogPathManager", ".", "create_path", "(", "writer_path", ")", "\n", "LogPathManager", ".", "create_path", "(", "model_path", ")", "\n", "if", "readme_fn", "is", "not", "None", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "readme_fn", ",", "os", ".", "path", ".", "join", "(", "log_path", ",", "'readme.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.create_path": [[35, 39], ["os.path.exists", "os.mkdir"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "create_path", "(", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.epoch_model_path": [[40, 43], ["train_utils.join_fn", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.join_fn"], ["", "", "def", "epoch_model_path", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "model_fn", "=", "join_fn", "(", "model_name", ",", "'epoch'", ",", "ext", "=", "'pt'", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "model_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.valid_model_path": [[44, 47], ["train_utils.join_fn", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.join_fn"], ["", "def", "valid_model_path", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "model_fn", "=", "join_fn", "(", "model_name", ",", "'valid'", ",", "ext", "=", "'pt'", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "model_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.LogPathManager.final_model_path": [[48, 51], ["train_utils.join_fn", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.join_fn"], ["", "def", "final_model_path", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "model_fn", "=", "join_fn", "(", "model_name", ",", "'final'", ",", "ext", "=", "'pt'", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "model_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders.__init__": [[55, 66], ["len", "len", "torch.device", "torch.cuda.is_available"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_loader", ",", "val_loader", ",", "bs_train", ",", "bs_val", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "num_train_batch", "=", "len", "(", "train_loader", ")", "\n", "self", ".", "num_val_batch", "=", "len", "(", "val_loader", ")", "\n", "self", ".", "bs_train", "=", "bs_train", "\n", "self", ".", "bs_val", "=", "bs_val", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "'cpu'", ")", "\n", "", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders.get_loaders": [[67, 72], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_loaders", "(", "seed", ",", "bs_train", ",", "bs_val", ",", "\n", "portion", "=", "8", ",", "shift_low", "=", "-", "6", ",", "shift_high", "=", "5", ",", "num_bar", "=", "2", ",", "\n", "contain_chord", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders.batch_to_inputs": [[73, 75], ["None"], "methods", ["None"], ["", "def", "batch_to_inputs", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders._get_ith_batch": [[76, 83], ["enumerate", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_ith_batch", "(", "i", ",", "loader", ")", ":", "\n", "        ", "assert", "0", "<=", "0", "<", "len", "(", "loader", ")", "\n", "for", "ind", ",", "batch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "i", "==", "ind", ":", "\n", "                ", "break", "\n", "", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders.get_ith_train_batch": [[84, 86], ["manager.DataLoaders._get_ith_batch"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders._get_ith_batch"], ["", "def", "get_ith_train_batch", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "DataLoaders", ".", "_get_ith_batch", "(", "i", ",", "self", ".", "train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders.get_ith_val_batch": [[87, 89], ["manager.DataLoaders._get_ith_batch"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.DataLoaders._get_ith_batch"], ["", "def", "get_ith_val_batch", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "DataLoaders", ".", "_get_ith_batch", "(", "i", ",", "self", ".", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.__init__": [[93, 114], ["manager.SummaryWriters._regularize_tags", "torch.utils.tensorboard.SummaryWriter", "manager.SummaryWriters.tags.items", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters._regularize_tags"], ["    ", "def", "__init__", "(", "self", ",", "writer_names", ",", "tags", ",", "log_path", ",", "tasks", "=", "(", "'train'", ",", "'val'", ")", ")", ":", "\n", "# writer_names example: ['loss', 'kl_loss', 'recon_loss']", "\n", "# tags example: {'name1': None, 'name2': (0, 1)}", "\n", "        ", "self", ".", "log_path", "=", "log_path", "\n", "assert", "'loss'", "==", "writer_names", "[", "0", "]", "\n", "self", ".", "writer_names", "=", "writer_names", "\n", "self", ".", "tags", "=", "tags", "\n", "self", ".", "_regularize_tags", "(", ")", "\n", "\n", "writer_dic", "=", "{", "}", "\n", "for", "name", "in", "writer_names", ":", "\n", "            ", "writer_dic", "[", "name", "]", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "log_path", ",", "name", ")", ")", "\n", "", "self", ".", "writers", "=", "writer_dic", "\n", "\n", "all_tags", "=", "{", "}", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "task_dic", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "self", ".", "tags", ".", "items", "(", ")", ":", "\n", "                ", "task_dic", "[", "'_'", ".", "join", "(", "[", "task", ",", "key", "]", ")", "]", "=", "val", "\n", "", "all_tags", "[", "task", "]", "=", "task_dic", "\n", "", "self", ".", "all_tags", "=", "all_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters._init_summary_writer": [[115, 119], ["manager.SummaryWriters"], "methods", ["None"], ["", "def", "_init_summary_writer", "(", "self", ")", ":", "\n", "        ", "tags", "=", "{", "'batch_train'", ":", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", "}", "\n", "self", ".", "summary_writers", "=", "SummaryWriters", "(", "self", ".", "writer_names", ",", "tags", ",", "\n", "self", ".", "writer_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters._regularize_tags": [[120, 124], ["manager.SummaryWriters.tags.items", "tuple", "range", "len"], "methods", ["None"], ["", "def", "_regularize_tags", "(", "self", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "self", ".", "tags", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "self", ".", "tags", "[", "key", "]", "=", "tuple", "(", "range", "(", "len", "(", "self", ".", "writer_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.single_write": [[125, 127], ["manager.SummaryWriters.writers[].add_scalar"], "methods", ["None"], ["", "", "", "def", "single_write", "(", "self", ",", "name", ",", "tag", ",", "val", ",", "step", ")", ":", "\n", "        ", "self", ".", "writers", "[", "name", "]", ".", "add_scalar", "(", "tag", ",", "val", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.write_tag": [[128, 133], ["zip", "len", "len", "manager.SummaryWriters.single_write"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.single_write"], ["", "def", "write_tag", "(", "self", ",", "task", ",", "tag", ",", "vals", ",", "step", ")", ":", "\n", "        ", "assert", "len", "(", "vals", ")", "==", "len", "(", "self", ".", "all_tags", "[", "task", "]", "[", "tag", "]", ")", "\n", "for", "name_id", ",", "val", "in", "zip", "(", "self", ".", "all_tags", "[", "task", "]", "[", "tag", "]", ",", "vals", ")", ":", "\n", "            ", "name", "=", "self", ".", "writer_names", "[", "name_id", "]", "\n", "self", ".", "single_write", "(", "name", ",", "tag", ",", "val", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.write_task": [[134, 138], ["manager.SummaryWriters.all_tags[].items", "manager.SummaryWriters.write_tag"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.manager.SummaryWriters.write_tag"], ["", "", "def", "write_task", "(", "self", ",", "task", ",", "vals_dic", ",", "step", ")", ":", "\n", "        ", "for", "tag", ",", "name_ids", "in", "self", ".", "all_tags", "[", "task", "]", ".", "items", "(", ")", ":", "\n", "            ", "vals", "=", "[", "vals_dic", "[", "self", ".", "writer_names", "[", "i", "]", "]", "for", "i", "in", "name_ids", "]", "\n", "self", ".", "write_tag", "(", "task", ",", "tag", ",", "vals", ",", "step", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.__init__": [[8, 45], ["torch.nn.Module.__init__", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRUCell", "torch.nn.GRUCell", "torch.nn.GRUCell", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "roll_dims", ",", "\n", "hidden_dims", ",", "\n", "rhythm_dims", ",", "\n", "condition_dims", ",", "\n", "z1_dims", ",", "\n", "z2_dims", ",", "\n", "n_step", ",", "\n", "k", "=", "1000", ")", ":", "\n", "        ", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gru_0", "=", "nn", ".", "GRU", "(", "\n", "roll_dims", "+", "condition_dims", ",", "\n", "hidden_dims", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "linear_mu", "=", "nn", ".", "Linear", "(", "hidden_dims", "*", "2", ",", "z1_dims", "+", "z2_dims", ")", "\n", "self", ".", "linear_var", "=", "nn", ".", "Linear", "(", "hidden_dims", "*", "2", ",", "z1_dims", "+", "z2_dims", ")", "\n", "self", ".", "grucell_0", "=", "nn", ".", "GRUCell", "(", "z2_dims", "+", "rhythm_dims", ",", "\n", "hidden_dims", ")", "\n", "self", ".", "grucell_1", "=", "nn", ".", "GRUCell", "(", "\n", "z1_dims", "+", "roll_dims", "+", "rhythm_dims", "+", "condition_dims", ",", "hidden_dims", ")", "\n", "self", ".", "grucell_2", "=", "nn", ".", "GRUCell", "(", "hidden_dims", ",", "hidden_dims", ")", "\n", "self", ".", "linear_init_0", "=", "nn", ".", "Linear", "(", "z2_dims", ",", "hidden_dims", ")", "\n", "self", ".", "linear_out_0", "=", "nn", ".", "Linear", "(", "hidden_dims", ",", "rhythm_dims", ")", "\n", "self", ".", "linear_init_1", "=", "nn", ".", "Linear", "(", "z1_dims", ",", "hidden_dims", ")", "\n", "self", ".", "linear_out_1", "=", "nn", ".", "Linear", "(", "hidden_dims", ",", "roll_dims", ")", "\n", "self", ".", "n_step", "=", "n_step", "\n", "self", ".", "roll_dims", "=", "roll_dims", "\n", "self", ".", "hidden_dims", "=", "hidden_dims", "\n", "self", ".", "eps", "=", "1", "\n", "self", ".", "rhythm_dims", "=", "rhythm_dims", "\n", "self", ".", "sample", "=", "None", "\n", "self", ".", "rhythm_sample", "=", "None", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "z1_dims", "=", "z1_dims", "\n", "self", ".", "z2_dims", "=", "z2_dims", "\n", "self", ".", "k", "=", "torch", ".", "FloatTensor", "(", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE._sampling": [[46, 54], ["torch.zeros_like", "torch.arange().long", "torch.cuda.is_available", "torch.zeros_like.max", "arange.cuda.cuda.cuda", "torch.arange", "torch.zeros_like.size"], "methods", ["None"], ["", "def", "_sampling", "(", "self", ",", "x", ")", ":", "\n", "        ", "idx", "=", "x", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "x", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "arange", "=", "arange", ".", "cuda", "(", ")", "\n", "", "x", "[", "arange", ",", "idx", "]", "=", "1", "\n", "return", "x", "#a batched one-hot vector", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.encoder": [[55, 66], ["torch.cat", "x.view.view.transpose_().contiguous", "x.view.view.view", "EC2model.VAE.linear_mu", "EC2model.VAE.linear_var().exp_", "torch.distributions.Normal", "torch.distributions.Normal", "EC2model.VAE.gru_0", "x.view.view.size", "x.view.view.transpose_", "EC2model.VAE.linear_var"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "x", ",", "condition", ")", ":", "\n", "# self.gru_0.flatten_parameters()", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "condition", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "gru_0", "(", "x", ")", "[", "-", "1", "]", "#(numLayer*numDirection)* batch* hidden_size", "\n", "x", "=", "x", ".", "transpose_", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "#batch* (numLayer*numDirection)* hidden_size", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "#batch* (numLayer*numDirection*hidden_size), where numLayer=1, numDirection=2", "\n", "mu", "=", "self", ".", "linear_mu", "(", "x", ")", "#batch* (z1_dims + z2_dims)", "\n", "var", "=", "self", ".", "linear_var", "(", "x", ")", ".", "exp_", "(", ")", "#batch* (z1_dims + z2_dims)", "\n", "distribution_1", "=", "Normal", "(", "mu", "[", ":", ",", ":", "self", ".", "z1_dims", "]", ",", "var", "[", ":", ",", ":", "self", ".", "z1_dims", "]", ")", "#distribution for pitch", "\n", "distribution_2", "=", "Normal", "(", "mu", "[", ":", ",", "self", ".", "z1_dims", ":", "]", ",", "var", "[", ":", ",", "self", ".", "z1_dims", ":", "]", ")", "#distribution for rhythm", "\n", "return", "distribution_1", ",", "distribution_2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.rhythm_decoder": [[67, 89], ["torch.zeros", "torch.tanh", "torch.cuda.is_available", "range", "torch.stack", "EC2model.VAE.linear_init_0", "EC2model.VAE.cuda", "torch.cat", "EC2model.VAE.grucell_0", "torch.nn.functional.log_softmax", "x.append", "z.size", "EC2model.VAE.linear_out_0", "torch.rand().item", "EC2model.VAE._sampling", "EC2model.VAE._sampling", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE._sampling", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE._sampling"], ["", "def", "rhythm_decoder", "(", "self", ",", "z", ")", ":", "\n", "        ", "out", "=", "torch", ".", "zeros", "(", "(", "z", ".", "size", "(", "0", ")", ",", "self", ".", "rhythm_dims", ")", ")", "#batch* rhythm_dims", "\n", "out", "[", ":", ",", "-", "1", "]", "=", "1.", "\n", "x", "=", "[", "]", "\n", "t", "=", "torch", ".", "tanh", "(", "self", ".", "linear_init_0", "(", "z", ")", ")", "#batch* hidden_dims", "\n", "hx", "=", "t", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "out", "=", "out", ".", "cuda", "(", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_step", ")", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "z", "]", ",", "1", ")", "#batch* (rhythm_dims+z2_dims)", "\n", "hx", "=", "self", ".", "grucell_0", "(", "out", ",", "hx", ")", "#batch* hidden_dims", "\n", "out", "=", "F", ".", "log_softmax", "(", "self", ".", "linear_out_0", "(", "hx", ")", ",", "1", ")", "#batch* rhythm_dims", "\n", "x", ".", "append", "(", "out", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "p", "=", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "\n", "if", "p", "<", "self", ".", "eps", ":", "\n", "                    ", "out", "=", "self", ".", "rhythm_sample", "[", ":", ",", "i", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "out", "=", "self", ".", "_sampling", "(", "out", ")", "\n", "", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "_sampling", "(", "out", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "x", ",", "1", ")", "#batch* n_step* rhythm_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.final_decoder": [[90, 116], ["torch.zeros", "torch.tanh", "torch.cuda.is_available", "range", "torch.stack", "EC2model.VAE.linear_init_1", "EC2model.VAE.cuda", "torch.cat", "EC2model.VAE.grucell_1", "EC2model.VAE.grucell_2", "torch.nn.functional.log_softmax", "x.append", "z.size", "EC2model.VAE.linear_out_1", "torch.rand().item", "EC2model.VAE._sampling", "EC2model.VAE._sampling", "torch.rand", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE._sampling", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE._sampling"], ["", "def", "final_decoder", "(", "self", ",", "z", ",", "rhythm", ",", "condition", ")", ":", "\n", "        ", "out", "=", "torch", ".", "zeros", "(", "(", "z", ".", "size", "(", "0", ")", ",", "self", ".", "roll_dims", ")", ")", "#batch* roll_dims", "\n", "out", "[", ":", ",", "-", "1", "]", "=", "1.", "\n", "x", ",", "hx", "=", "[", "]", ",", "[", "None", ",", "None", "]", "\n", "t", "=", "torch", ".", "tanh", "(", "self", ".", "linear_init_1", "(", "z", ")", ")", "#batch* hidden_dims", "\n", "hx", "[", "0", "]", "=", "t", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "out", "=", "out", ".", "cuda", "(", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_step", ")", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "rhythm", "[", ":", ",", "i", ",", ":", "]", ",", "z", ",", "condition", "[", ":", ",", "i", ",", ":", "]", "]", ",", "1", ")", "#batch* roll_dims+rhythm_dims+z1_dims+condition_dims", "\n", "hx", "[", "0", "]", "=", "self", ".", "grucell_1", "(", "out", ",", "hx", "[", "0", "]", ")", "#batch* hidden_dims", "\n", "if", "i", "==", "0", ":", "\n", "                ", "hx", "[", "1", "]", "=", "hx", "[", "0", "]", "\n", "", "hx", "[", "1", "]", "=", "self", ".", "grucell_2", "(", "hx", "[", "0", "]", ",", "hx", "[", "1", "]", ")", "#batch* hidden_dims", "\n", "out", "=", "F", ".", "log_softmax", "(", "self", ".", "linear_out_1", "(", "hx", "[", "1", "]", ")", ",", "1", ")", "#batch* roll_dims", "\n", "x", ".", "append", "(", "out", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "p", "=", "torch", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "\n", "if", "p", "<", "self", ".", "eps", ":", "\n", "                    ", "out", "=", "self", ".", "sample", "[", ":", ",", "i", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "out", "=", "self", ".", "_sampling", "(", "out", ")", "\n", "", "self", ".", "eps", "=", "self", ".", "k", "/", "(", "self", ".", "k", "+", "torch", ".", "exp", "(", "self", ".", "iteration", "/", "self", ".", "k", ")", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "self", ".", "_sampling", "(", "out", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "x", ",", "1", ")", "#batch* n_step* roll_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.decoder": [[117, 120], ["EC2model.VAE.rhythm_decoder", "EC2model.VAE.final_decoder"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.rhythm_decoder", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.final_decoder"], ["", "def", "decoder", "(", "self", ",", "z1", ",", "z2", ",", "condition", "=", "None", ")", ":", "\n", "        ", "rhythm", "=", "self", ".", "rhythm_decoder", "(", "z2", ")", "\n", "return", "self", ".", "final_decoder", "(", "z1", ",", "rhythm", ",", "condition", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.forward": [[121, 135], ["EC2model.VAE.encoder", "dis1.rsample", "dis2.rsample", "EC2model.VAE.rhythm_decoder", "EC2model.VAE.final_decoder", "x[].sum().unsqueeze", "torch.cat", "x[].sum"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeEncoder.encoder", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.rhythm_decoder", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.EC2model.VAE.final_decoder"], ["", "def", "forward", "(", "self", ",", "x", ",", "condition", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "sample", "=", "x", "\n", "self", ".", "rhythm_sample", "=", "x", "[", ":", ",", ":", ",", ":", "-", "2", "]", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "#batch* n_step* 1", "\n", "self", ".", "rhythm_sample", "=", "torch", ".", "cat", "(", "(", "self", ".", "rhythm_sample", ",", "x", "[", ":", ",", ":", ",", "-", "2", ":", "]", ")", ",", "-", "1", ")", "#batch* n_step* 3", "\n", "self", ".", "iteration", "+=", "1", "\n", "", "dis1", ",", "dis2", "=", "self", ".", "encoder", "(", "x", ",", "condition", ")", "\n", "z1", "=", "dis1", ".", "rsample", "(", ")", "\n", "z2", "=", "dis2", ".", "rsample", "(", ")", "\n", "recon_rhythm", "=", "self", ".", "rhythm_decoder", "(", "z2", ")", "\n", "recon", "=", "self", ".", "final_decoder", "(", "z1", ",", "recon_rhythm", ",", "condition", ")", "\n", "output", "=", "(", "recon", ",", "recon_rhythm", ",", "dis1", ".", "mean", ",", "dis1", ".", "stddev", ",", "dis2", ".", "mean", ",", "\n", "dis2", ".", "stddev", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.RnnEncoder.__init__": [[15, 24], ["torch.nn.Module.__init__", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "RnnEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_dim", ",", "hidden_dim", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "linear_mu", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "z_dim", ")", "\n", "self", ".", "linear_var", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "z_dim", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.RnnEncoder.forward": [[25, 33], ["x.view.view.transpose_().contiguous", "x.view.view.view", "ptvae.RnnEncoder.linear_mu", "ptvae.RnnEncoder.linear_var().exp_", "torch.distributions.Normal", "ptvae.RnnEncoder.gru", "x.view.view.size", "x.view.view.transpose_", "ptvae.RnnEncoder.linear_var"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "gru", "(", "x", ")", "[", "-", "1", "]", "\n", "x", "=", "x", ".", "transpose_", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "linear_mu", "(", "x", ")", "\n", "var", "=", "self", ".", "linear_var", "(", "x", ")", ".", "exp_", "(", ")", "\n", "dist", "=", "Normal", "(", "mu", ",", "var", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.RnnDecoder.__init__": [[37, 53], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "36", ",", "z_input_dim", "=", "256", ",", "\n", "hidden_dim", "=", "512", ",", "z_dim", "=", "256", ",", "num_step", "=", "32", ")", ":", "\n", "        ", "super", "(", "RnnDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z2dec_hid", "=", "nn", ".", "Linear", "(", "z_dim", ",", "hidden_dim", ")", "\n", "self", ".", "z2dec_in", "=", "nn", ".", "Linear", "(", "z_dim", ",", "z_input_dim", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_dim", "+", "z_input_dim", ",", "hidden_dim", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "self", ".", "init_input", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "36", ")", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "root_out", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "12", ")", "\n", "self", ".", "chroma_out", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "24", ")", "\n", "self", ".", "bass_out", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "12", ")", "\n", "self", ".", "num_step", "=", "num_step", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.RnnDecoder.forward": [[54, 91], ["z_chd.size", "ptvae.RnnDecoder.z2dec_hid().unsqueeze", "ptvae.RnnDecoder.z2dec_in().unsqueeze", "ptvae.RnnDecoder.init_input.repeat().unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "int", "ptvae.RnnDecoder.gru", "ptvae.RnnDecoder.root_out", "ptvae.RnnDecoder.chroma_out().view().contiguous", "ptvae.RnnDecoder.bass_out", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.zeros().to().float", "[].float", "torch.zeros().to().float", "torch.cat", "ptvae.RnnDecoder.z2dec_hid", "ptvae.RnnDecoder.z2dec_in", "ptvae.RnnDecoder.init_input.repeat", "torch.cat", "random.random", "c[].unsqueeze", "ptvae.RnnDecoder.chroma_out().view", "torch.zeros().to", "torch.zeros().to", "torch.arange", "ptvae.RnnDecoder.max", "torch.arange", "ptvae.RnnDecoder.chroma_out", "torch.zeros", "ptvae.RnnDecoder.max", "torch.zeros", "ptvae.RnnDecoder.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_chd", ",", "inference", ",", "tfr", ",", "c", "=", "None", ")", ":", "\n", "# z_chd: (B, z_chd_size)", "\n", "        ", "bs", "=", "z_chd", ".", "size", "(", "0", ")", "\n", "z_chd_hid", "=", "self", ".", "z2dec_hid", "(", "z_chd", ")", ".", "unsqueeze", "(", "0", ")", "\n", "z_chd_in", "=", "self", ".", "z2dec_in", "(", "z_chd", ")", ".", "unsqueeze", "(", "1", ")", "\n", "if", "inference", ":", "\n", "            ", "tfr", "=", "0.", "\n", "", "token", "=", "self", ".", "init_input", ".", "repeat", "(", "bs", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "recon_root", "=", "[", "]", "\n", "recon_chroma", "=", "[", "]", "\n", "recon_bass", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "int", "(", "self", ".", "num_step", "/", "4", ")", ")", ":", "\n", "            ", "chd", ",", "z_chd_hid", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "[", "token", ",", "z_chd_in", "]", ",", "dim", "=", "-", "1", ")", ",", "z_chd_hid", ")", "\n", "r_root", "=", "self", ".", "root_out", "(", "chd", ")", "# (bs, 1, 12)", "\n", "r_chroma", "=", "self", ".", "chroma_out", "(", "chd", ")", ".", "view", "(", "bs", ",", "1", ",", "12", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "r_bass", "=", "self", ".", "bass_out", "(", "chd", ")", "# (bs, 1, 12)", "\n", "recon_root", ".", "append", "(", "r_root", ")", "\n", "recon_chroma", ".", "append", "(", "r_chroma", ")", "\n", "recon_bass", ".", "append", "(", "r_bass", ")", "\n", "\n", "t_root", "=", "torch", ".", "zeros", "(", "bs", ",", "1", ",", "12", ")", ".", "to", "(", "z_chd", ".", "device", ")", ".", "float", "(", ")", "\n", "t_root", "[", "torch", ".", "arange", "(", "0", ",", "bs", ")", ",", "0", ",", "r_root", ".", "max", "(", "-", "1", ")", "[", "-", "1", "]", "]", "=", "1.", "\n", "t_chroma", "=", "r_chroma", ".", "max", "(", "-", "1", ")", "[", "-", "1", "]", ".", "float", "(", ")", "\n", "t_bass", "=", "torch", ".", "zeros", "(", "bs", ",", "1", ",", "12", ")", ".", "to", "(", "z_chd", ".", "device", ")", ".", "float", "(", ")", "\n", "t_bass", "[", "torch", ".", "arange", "(", "0", ",", "bs", ")", ",", "0", ",", "r_bass", ".", "max", "(", "-", "1", ")", "[", "-", "1", "]", "]", "=", "1.", "\n", "token", "=", "torch", ".", "cat", "(", "[", "t_root", ",", "t_chroma", ",", "t_bass", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "t", "==", "self", ".", "num_step", "-", "1", ":", "\n", "                ", "break", "\n", "", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "tfr", "\n", "if", "teacher_force", "and", "not", "inference", ":", "\n", "                ", "token", "=", "c", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "", "recon_root", "=", "torch", ".", "cat", "(", "recon_root", ",", "dim", "=", "1", ")", "\n", "recon_chroma", "=", "torch", ".", "cat", "(", "recon_chroma", ",", "dim", "=", "1", ")", "\n", "recon_bass", "=", "torch", ".", "cat", "(", "recon_bass", ",", "dim", "=", "1", ")", "\n", "return", "recon_root", ",", "recon_chroma", ",", "recon_bass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.TextureEncoder.__init__": [[95, 113], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_size", ",", "hidden_dim", ",", "z_dim", ",", "num_channel", "=", "10", ",", "for_contrastive", "=", "False", ")", ":", "\n", "        ", "'''input must be piano_mat: (B, 32, 128)'''", "\n", "super", "(", "TextureEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "1", ",", "num_channel", ",", "kernel_size", "=", "(", "4", ",", "12", ")", ",", "\n", "stride", "=", "(", "4", ",", "1", ")", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "1", ",", "4", ")", ",", "\n", "stride", "=", "(", "1", ",", "4", ")", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "num_channel", "*", "29", ",", "1000", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1000", ",", "emb_size", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "emb_size", ",", "hidden_dim", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "linear_mu", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "z_dim", ")", "\n", "self", ".", "linear_var", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "z_dim", ")", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "for_contrastive", "=", "for_contrastive", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.TextureEncoder.forward": [[114, 130], ["pr.view.view.size", "pr.view.view.unsqueeze", "ptvae.TextureEncoder.cnn().view", "ptvae.TextureEncoder.fc2", "pr.view.view.transpose_().contiguous", "pr.view.view.view", "ptvae.TextureEncoder.linear_mu", "ptvae.TextureEncoder.linear_var().exp_", "torch.distributions.Normal", "ptvae.TextureEncoder.fc1", "ptvae.TextureEncoder.gru", "pr.view.view.size", "ptvae.TextureEncoder.cnn", "pr.view.view.transpose_", "ptvae.TextureEncoder.linear_var"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pr", ")", ":", "\n", "# pr: (bs, 32, 128)", "\n", "        ", "bs", "=", "pr", ".", "size", "(", "0", ")", "\n", "pr", "=", "pr", ".", "unsqueeze", "(", "1", ")", "\n", "pr", "=", "self", ".", "cnn", "(", "pr", ")", ".", "view", "(", "bs", ",", "8", ",", "-", "1", ")", "\n", "pr", "=", "self", ".", "fc2", "(", "self", ".", "fc1", "(", "pr", ")", ")", "# (bs, 8, emb_size)", "\n", "pr", "=", "self", ".", "gru", "(", "pr", ")", "[", "-", "1", "]", "\n", "pr", "=", "pr", ".", "transpose_", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "pr", "=", "pr", ".", "view", "(", "pr", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "linear_mu", "(", "pr", ")", "\n", "var", "=", "self", ".", "linear_var", "(", "pr", ")", ".", "exp_", "(", ")", "\n", "dist", "=", "Normal", "(", "mu", ",", "var", ")", "\n", "if", "self", ".", "for_contrastive", ":", "\n", "            ", "return", "mu", ",", "pr", "\n", "", "else", ":", "\n", "            ", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeEncoder.__init__": [[134, 173], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.Linear", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "max_simu_note", "=", "16", ",", "max_pitch", "=", "127", ",", "min_pitch", "=", "0", ",", "\n", "pitch_sos", "=", "128", ",", "pitch_eos", "=", "129", ",", "pitch_pad", "=", "130", ",", "\n", "dur_pad", "=", "2", ",", "dur_width", "=", "5", ",", "num_step", "=", "32", ",", "\n", "note_emb_size", "=", "128", ",", "\n", "enc_notes_hid_size", "=", "256", ",", "\n", "enc_time_hid_size", "=", "512", ",", "z_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "PtvaeEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Parameters", "\n", "# note and time", "\n", "self", ".", "max_pitch", "=", "max_pitch", "# the highest pitch in train/val set.", "\n", "self", ".", "min_pitch", "=", "min_pitch", "# the lowest pitch in train/val set.", "\n", "self", ".", "pitch_sos", "=", "pitch_sos", "\n", "self", ".", "pitch_eos", "=", "pitch_eos", "\n", "self", ".", "pitch_pad", "=", "pitch_pad", "\n", "self", ".", "pitch_range", "=", "max_pitch", "-", "min_pitch", "+", "3", "# not including pad.", "\n", "self", ".", "dur_pad", "=", "dur_pad", "\n", "self", ".", "dur_width", "=", "dur_width", "\n", "self", ".", "note_size", "=", "self", ".", "pitch_range", "+", "dur_width", "\n", "self", ".", "max_simu_note", "=", "max_simu_note", "# the max # of notes at each ts.", "\n", "self", ".", "num_step", "=", "num_step", "# 32", "\n", "if", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "device", "\n", "", "self", ".", "note_emb_size", "=", "note_emb_size", "\n", "self", ".", "z_size", "=", "z_size", "\n", "self", ".", "enc_notes_hid_size", "=", "enc_notes_hid_size", "\n", "self", ".", "enc_time_hid_size", "=", "enc_time_hid_size", "\n", "\n", "self", ".", "note_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "note_size", ",", "note_emb_size", ")", "\n", "self", ".", "enc_notes_gru", "=", "nn", ".", "GRU", "(", "note_emb_size", ",", "enc_notes_hid_size", ",", "\n", "num_layers", "=", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "enc_time_gru", "=", "nn", ".", "GRU", "(", "2", "*", "enc_notes_hid_size", ",", "enc_time_hid_size", ",", "\n", "num_layers", "=", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "linear_mu", "=", "nn", ".", "Linear", "(", "2", "*", "enc_time_hid_size", ",", "z_size", ")", "\n", "self", ".", "linear_std", "=", "nn", ".", "Linear", "(", "2", "*", "enc_time_hid_size", ",", "z_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeEncoder.get_len_index_tensor": [[174, 180], ["torch.no_grad"], "methods", ["None"], ["", "def", "get_len_index_tensor", "(", "self", ",", "ind_x", ")", ":", "\n", "        ", "\"\"\"Calculate the lengths ((B, 32), torch.LongTensor) of pgrid.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "lengths", "=", "self", ".", "max_simu_note", "-", "(", "ind_x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "-", "self", ".", "pitch_pad", "==", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "return", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeEncoder.index_tensor_to_multihot_tensor": [[181, 196], ["torch.no_grad", "ind_x[].float", "torch.zeros().to", "torch.cat.view", "torch.cat", "torch.zeros", "range", "ind_x[].view", "torch.cat.size", "ind_x.size"], "methods", ["None"], ["", "def", "index_tensor_to_multihot_tensor", "(", "self", ",", "ind_x", ")", ":", "\n", "        ", "\"\"\"Transfer piano_grid to multi-hot piano_grid.\"\"\"", "\n", "# ind_x: (B, 32, max_simu_note, 1 + dur_width)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dur_part", "=", "ind_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ".", "float", "(", ")", "\n", "out", "=", "torch", ".", "zeros", "(", "\n", "[", "ind_x", ".", "size", "(", "0", ")", "*", "self", ".", "num_step", "*", "self", ".", "max_simu_note", ",", "\n", "self", ".", "pitch_range", "+", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "out", "[", "range", "(", "0", ",", "out", ".", "size", "(", "0", ")", ")", ",", "ind_x", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "view", "(", "-", "1", ")", "]", "=", "1.", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "32", ",", "self", ".", "max_simu_note", ",", "self", ".", "pitch_range", "+", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", "[", ":", ",", ":", ",", ":", ",", "0", ":", "self", ".", "pitch_range", "]", ",", "dur_part", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeEncoder.encoder": [[197, 214], ["ptvae.PtvaeEncoder.note_embedding", "ptvae.PtvaeEncoder.view", "torch.nn.utils.rnn.pack_padded_sequence", "[].transpose().contiguous", "x.view.view.view", "[].transpose().contiguous", "x.view.view.view", "ptvae.PtvaeEncoder.linear_mu", "ptvae.PtvaeEncoder.linear_std().exp_", "torch.distributions.Normal", "lengths.view", "x.view.view.size", "[].transpose", "[].transpose", "ptvae.PtvaeEncoder.linear_std", "ptvae.PtvaeEncoder.enc_notes_gru", "ptvae.PtvaeEncoder.enc_time_gru"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "x", ",", "lengths", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "note_embedding", "(", "x", ")", "\n", "# x: (B, num_step, max_simu_note, note_emb_size)", "\n", "# now x are notes", "\n", "x", "=", "embedded", ".", "view", "(", "-", "1", ",", "self", ".", "max_simu_note", ",", "self", ".", "note_emb_size", ")", "\n", "x", "=", "pack_padded_sequence", "(", "x", ",", "lengths", ".", "view", "(", "-", "1", ")", ",", "batch_first", "=", "True", ",", "\n", "enforce_sorted", "=", "False", ")", "\n", "x", "=", "self", ".", "enc_notes_gru", "(", "x", ")", "[", "-", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "num_step", ",", "2", "*", "self", ".", "enc_notes_hid_size", ")", "\n", "# now, x is simu_notes.", "\n", "x", "=", "self", ".", "enc_time_gru", "(", "x", ")", "[", "-", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# x: (B, 2, enc_time_hid_size)", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "linear_mu", "(", "x", ")", "# (B, z_size)", "\n", "std", "=", "self", ".", "linear_std", "(", "x", ")", ".", "exp_", "(", ")", "# (B, z_size)", "\n", "dist", "=", "Normal", "(", "mu", ",", "std", ")", "\n", "return", "dist", ",", "embedded", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeEncoder.forward": [[215, 223], ["ptvae.PtvaeEncoder.get_len_index_tensor", "ptvae.PtvaeEncoder.index_tensor_to_multihot_tensor", "ptvae.PtvaeEncoder.encoder"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.get_len_index_tensor", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.index_tensor_to_multihot_tensor", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeEncoder.encoder"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_iterators", "=", "False", ")", ":", "\n", "        ", "lengths", "=", "self", ".", "get_len_index_tensor", "(", "x", ")", "\n", "x", "=", "self", ".", "index_tensor_to_multihot_tensor", "(", "x", ")", "\n", "dist", ",", "embedded_x", "=", "self", ".", "encoder", "(", "x", ",", "lengths", ")", "\n", "if", "return_iterators", ":", "\n", "            ", "return", "dist", ".", "mean", ",", "dist", ".", "scale", ",", "embedded_x", "\n", "", "else", ":", "\n", "            ", "return", "dist", ",", "embedded_x", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.__init__": [[227, 298], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.Linear", "torch.nn.Linear", "torch.rand", "torch.rand", "torch.nn.Linear", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "None", ",", "note_embedding", "=", "None", ",", "\n", "max_simu_note", "=", "16", ",", "max_pitch", "=", "127", ",", "min_pitch", "=", "0", ",", "\n", "pitch_sos", "=", "128", ",", "pitch_eos", "=", "129", ",", "pitch_pad", "=", "130", ",", "\n", "dur_pad", "=", "2", ",", "dur_width", "=", "5", ",", "num_step", "=", "32", ",", "\n", "note_emb_size", "=", "128", ",", "z_size", "=", "512", ",", "\n", "dec_emb_hid_size", "=", "128", ",", "\n", "dec_time_hid_size", "=", "1024", ",", "dec_notes_hid_size", "=", "512", ",", "\n", "dec_z_in_size", "=", "256", ",", "dec_dur_hid_size", "=", "16", ")", ":", "\n", "        ", "super", "(", "PtvaeDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Parameters", "\n", "# note and time", "\n", "self", ".", "max_pitch", "=", "max_pitch", "# the highest pitch in train/val set.", "\n", "self", ".", "min_pitch", "=", "min_pitch", "# the lowest pitch in train/val set.", "\n", "self", ".", "pitch_sos", "=", "pitch_sos", "\n", "self", ".", "pitch_eos", "=", "pitch_eos", "\n", "self", ".", "pitch_pad", "=", "pitch_pad", "\n", "self", ".", "pitch_range", "=", "max_pitch", "-", "min_pitch", "+", "3", "# 88, not including pad.", "\n", "self", ".", "dur_pad", "=", "dur_pad", "\n", "self", ".", "dur_width", "=", "dur_width", "\n", "self", ".", "note_size", "=", "self", ".", "pitch_range", "+", "dur_width", "\n", "self", ".", "max_simu_note", "=", "max_simu_note", "# the max # of notes at each ts.", "\n", "self", ".", "num_step", "=", "num_step", "# 32", "\n", "\n", "# device", "\n", "if", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "device", "\n", "\n", "", "self", ".", "note_emb_size", "=", "note_emb_size", "\n", "self", ".", "z_size", "=", "z_size", "\n", "\n", "# decoder", "\n", "self", ".", "dec_z_in_size", "=", "dec_z_in_size", "\n", "self", ".", "dec_emb_hid_size", "=", "dec_emb_hid_size", "\n", "self", ".", "dec_time_hid_size", "=", "dec_time_hid_size", "\n", "self", ".", "dec_init_input", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "2", "*", "self", ".", "dec_emb_hid_size", ")", ")", "\n", "self", ".", "dec_notes_hid_size", "=", "dec_notes_hid_size", "\n", "self", ".", "dur_sos_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "self", ".", "dur_width", ")", ")", "\n", "self", ".", "dec_dur_hid_size", "=", "dec_dur_hid_size", "\n", "\n", "# Modules", "\n", "# For both encoder and decoder", "\n", "if", "note_embedding", "is", "None", ":", "\n", "            ", "self", ".", "note_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "note_size", ",", "note_emb_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "note_embedding", "=", "note_embedding", "\n", "", "self", ".", "z2dec_hid_linear", "=", "nn", ".", "Linear", "(", "self", ".", "z_size", ",", "dec_time_hid_size", ")", "\n", "self", ".", "z2dec_in_linear", "=", "nn", ".", "Linear", "(", "self", ".", "z_size", ",", "dec_z_in_size", ")", "\n", "self", ".", "dec_notes_emb_gru", "=", "nn", ".", "GRU", "(", "note_emb_size", ",", "dec_emb_hid_size", ",", "\n", "num_layers", "=", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "dec_time_gru", "=", "nn", ".", "GRU", "(", "dec_z_in_size", "+", "2", "*", "dec_emb_hid_size", ",", "\n", "dec_time_hid_size", ",", "\n", "num_layers", "=", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "self", ".", "dec_time_to_notes_hid", "=", "nn", ".", "Linear", "(", "dec_time_hid_size", ",", "\n", "dec_notes_hid_size", ")", "\n", "self", ".", "dec_notes_gru", "=", "nn", ".", "GRU", "(", "dec_time_hid_size", "+", "note_emb_size", ",", "\n", "dec_notes_hid_size", ",", "\n", "num_layers", "=", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "self", ".", "pitch_out_linear", "=", "nn", ".", "Linear", "(", "dec_notes_hid_size", ",", "self", ".", "pitch_range", ")", "\n", "self", ".", "dec_dur_gru", "=", "nn", ".", "GRU", "(", "dur_width", ",", "dec_dur_hid_size", ",", "\n", "num_layers", "=", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ")", "\n", "self", ".", "dur_hid_linear", "=", "nn", ".", "Linear", "(", "self", ".", "pitch_range", "+", "dec_notes_hid_size", ",", "\n", "dec_dur_hid_size", ")", "\n", "self", ".", "dur_out_linear", "=", "nn", ".", "Linear", "(", "dec_dur_hid_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.get_len_index_tensor": [[299, 305], ["torch.no_grad"], "methods", ["None"], ["", "def", "get_len_index_tensor", "(", "self", ",", "ind_x", ")", ":", "\n", "        ", "\"\"\"Calculate the lengths ((B, 32), torch.LongTensor) of pgrid.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "lengths", "=", "self", ".", "max_simu_note", "-", "(", "ind_x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "-", "self", ".", "pitch_pad", "==", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "return", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.index_tensor_to_multihot_tensor": [[306, 321], ["torch.no_grad", "ind_x[].float", "torch.zeros().to", "torch.cat.view", "torch.cat", "torch.zeros", "range", "ind_x[].view", "torch.cat.size", "ind_x.size"], "methods", ["None"], ["", "def", "index_tensor_to_multihot_tensor", "(", "self", ",", "ind_x", ")", ":", "\n", "        ", "\"\"\"Transfer piano_grid to multi-hot piano_grid.\"\"\"", "\n", "# ind_x: (B, 32, max_simu_note, 1 + dur_width)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dur_part", "=", "ind_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ".", "float", "(", ")", "\n", "out", "=", "torch", ".", "zeros", "(", "\n", "[", "ind_x", ".", "size", "(", "0", ")", "*", "self", ".", "num_step", "*", "self", ".", "max_simu_note", ",", "\n", "self", ".", "pitch_range", "+", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "out", "[", "range", "(", "0", ",", "out", ".", "size", "(", "0", ")", ")", ",", "ind_x", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "view", "(", "-", "1", ")", "]", "=", "1.", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "32", ",", "self", ".", "max_simu_note", ",", "self", ".", "pitch_range", "+", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", "[", ":", ",", ":", ",", ":", ",", "0", ":", "self", ".", "pitch_range", "]", ",", "dur_part", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.get_sos_token": [[322, 328], ["torch.zeros", "sos.to.to.to"], "methods", ["None"], ["", "def", "get_sos_token", "(", "self", ")", ":", "\n", "        ", "sos", "=", "torch", ".", "zeros", "(", "self", ".", "note_size", ")", "\n", "sos", "[", "self", ".", "pitch_sos", "]", "=", "1.", "\n", "sos", "[", "self", ".", "pitch_range", ":", "]", "=", "2.", "\n", "sos", "=", "sos", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "sos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.dur_ind_to_dur_token": [[329, 334], ["torch.zeros", "token.to.to.to", "range"], "methods", ["None"], ["", "def", "dur_ind_to_dur_token", "(", "self", ",", "inds", ",", "batch_size", ")", ":", "\n", "        ", "token", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "dur_width", ")", "\n", "token", "[", "range", "(", "0", ",", "batch_size", ")", ",", "inds", "]", "=", "1.", "\n", "token", "=", "token", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.pitch_dur_ind_to_note_token": [[335, 342], ["torch.zeros", "ptvae.PtvaeDecoder.to", "ptvae.PtvaeDecoder.note_embedding", "range"], "methods", ["None"], ["", "def", "pitch_dur_ind_to_note_token", "(", "self", ",", "pitch_inds", ",", "dur_inds", ",", "batch_size", ")", ":", "\n", "        ", "token", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "note_size", ")", "\n", "token", "[", "range", "(", "0", ",", "batch_size", ")", ",", "pitch_inds", "]", "=", "1.", "\n", "token", "[", ":", ",", "self", ".", "pitch_range", ":", "]", "=", "dur_inds", "\n", "token", "=", "token", ".", "to", "(", "self", ".", "device", ")", "\n", "token", "=", "self", ".", "note_embedding", "(", "token", ")", "\n", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decode_note": [[343, 376], ["ptvae.PtvaeDecoder.pitch_out_linear().squeeze", "note_summary.transpose", "ptvae.PtvaeDecoder.dur_hid_linear", "ptvae.PtvaeDecoder.dur_sos_token.repeat().unsqueeze", "torch.zeros", "est_durs.to.to.to", "range", "torch.cat", "ptvae.PtvaeDecoder.dec_dur_gru", "ptvae.PtvaeDecoder.dur_out_linear().squeeze", "ptvae.PtvaeDecoder.dur_ind_to_dur_token().unsqueeze", "ptvae.PtvaeDecoder.pitch_out_linear", "ptvae.PtvaeDecoder.dur_sos_token.repeat", "ptvae.PtvaeDecoder.max", "ptvae.PtvaeDecoder.unsqueeze", "ptvae.PtvaeDecoder.dur_out_linear", "ptvae.PtvaeDecoder.dur_ind_to_dur_token"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.dur_ind_to_dur_token"], ["", "def", "decode_note", "(", "self", ",", "note_summary", ",", "batch_size", ")", ":", "\n", "# note_summary: (B, 1, dec_notes_hid_size)", "\n", "# This function estimate pitch, and dur for a single pitch based on", "\n", "# note_summary.", "\n", "# Returns: est_pitch (B, 1, pitch_range), est_durs (B, 1, dur_width, 2)", "\n", "\n", "# The estimated pitch is calculated by a linear layer.", "\n", "        ", "est_pitch", "=", "self", ".", "pitch_out_linear", "(", "note_summary", ")", ".", "squeeze", "(", "1", ")", "\n", "# est_pitch: (B, pitch_range)", "\n", "\n", "# The estimated dur is calculated by a 5-step gru.", "\n", "dur_hid", "=", "note_summary", ".", "transpose", "(", "0", ",", "1", ")", "\n", "# dur_hid: (1, B, dec_notes_hid_size)", "\n", "dur_hid", "=", "self", ".", "dur_hid_linear", "(", "torch", ".", "cat", "(", "[", "dur_hid", ",", "\n", "est_pitch", ".", "unsqueeze", "(", "0", ")", "]", ",", "\n", "dim", "=", "-", "1", ")", ")", "\n", "token", "=", "self", ".", "dur_sos_token", ".", "repeat", "(", "batch_size", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# token: (B, 1, dur_width)", "\n", "\n", "est_durs", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "dur_width", ",", "2", ")", "\n", "est_durs", "=", "est_durs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "dur_width", ")", ":", "\n", "            ", "token", ",", "dur_hid", "=", "self", ".", "dec_dur_gru", "(", "token", ",", "dur_hid", ")", "\n", "est_dur", "=", "self", ".", "dur_out_linear", "(", "token", ")", ".", "squeeze", "(", "1", ")", "\n", "est_durs", "[", ":", ",", "t", "]", "=", "est_dur", "\n", "if", "t", "==", "self", ".", "dur_width", "-", "1", ":", "\n", "                ", "break", "\n", "", "token_inds", "=", "est_dur", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "token", "=", "self", ".", "dur_ind_to_dur_token", "(", "token_inds", ",", "\n", "batch_size", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "est_pitch", ",", "est_durs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decode_notes": [[377, 436], ["ptvae.PtvaeDecoder.dec_time_to_notes_hid", "torch.zeros", "notes[].unsqueeze.squeeze", "torch.zeros", "predicted_notes.to.to.to", "lengths.to.to.to", "range", "torch.cat", "torch.cat", "notes_summary.transpose", "ptvae.PtvaeDecoder.get_sos_token", "ptvae.PtvaeDecoder.note_embedding().repeat().unsqueeze", "notes[].unsqueeze", "ptvae.PtvaeDecoder.dec_notes_gru", "ptvae.PtvaeDecoder.decode_note", "torch.cat.append", "torch.cat.append", "ptvae.PtvaeDecoder.pitch_dur_ind_to_note_token", "torch.cat", "est_pitch.unsqueeze", "est_durs.unsqueeze", "est_pitch.max", "est_durs.max", "random.random", "ptvae.PtvaeDecoder.unsqueeze", "notes[].unsqueeze", "ptvae.PtvaeDecoder.note_embedding().repeat", "ptvae.PtvaeDecoder.note_embedding"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.get_sos_token", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decode_note", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.pitch_dur_ind_to_note_token"], ["", "def", "decode_notes", "(", "self", ",", "notes_summary", ",", "batch_size", ",", "notes", ",", "inference", ",", "\n", "teacher_forcing_ratio", "=", "0.5", ")", ":", "\n", "# notes_summary: (B, 1, dec_time_hid_size)", "\n", "# notes: (B, max_simu_note, note_emb_size), ground_truth", "\n", "        ", "notes_summary_hid", "=", "self", ".", "dec_time_to_notes_hid", "(", "notes_summary", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "if", "inference", ":", "\n", "            ", "assert", "teacher_forcing_ratio", "==", "0", "\n", "assert", "notes", "is", "None", "\n", "sos", "=", "self", ".", "get_sos_token", "(", ")", "# (note_size,)", "\n", "token", "=", "self", ".", "note_embedding", "(", "sos", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# hid: (B, 1, note_emb_size)", "\n", "", "else", ":", "\n", "            ", "token", "=", "notes", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "predicted_notes", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "max_simu_note", ",", "\n", "self", ".", "note_emb_size", ")", "\n", "predicted_notes", "[", ":", ",", ":", ",", "self", ".", "pitch_range", ":", "]", "=", "2.", "\n", "predicted_notes", "[", ":", ",", "0", "]", "=", "token", ".", "squeeze", "(", "1", ")", "# fill sos index", "\n", "lengths", "=", "torch", ".", "zeros", "(", "batch_size", ")", "\n", "predicted_notes", "=", "predicted_notes", ".", "to", "(", "self", ".", "device", ")", "\n", "lengths", "=", "lengths", ".", "to", "(", "self", ".", "device", ")", "\n", "pitch_outs", "=", "[", "]", "\n", "dur_outs", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "self", ".", "max_simu_note", ")", ":", "\n", "            ", "note_summary", ",", "notes_summary_hid", "=", "self", ".", "dec_notes_gru", "(", "torch", ".", "cat", "(", "[", "notes_summary", ",", "token", "]", ",", "dim", "=", "-", "1", ")", ",", "\n", "notes_summary_hid", ")", "\n", "# note_summary: (B, 1, dec_notes_hid_size)", "\n", "# notes_summary_hid: (1, B, dec_time_hid_size)", "\n", "\n", "est_pitch", ",", "est_durs", "=", "self", ".", "decode_note", "(", "note_summary", ",", "batch_size", ")", "\n", "# est_pitch: (B, pitch_range)", "\n", "# est_durs: (B, dur_width, 2)", "\n", "\n", "pitch_outs", ".", "append", "(", "est_pitch", ".", "unsqueeze", "(", "1", ")", ")", "\n", "dur_outs", ".", "append", "(", "est_durs", ".", "unsqueeze", "(", "1", ")", ")", "\n", "pitch_inds", "=", "est_pitch", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "dur_inds", "=", "est_durs", ".", "max", "(", "2", ")", "[", "1", "]", "\n", "predicted", "=", "self", ".", "pitch_dur_ind_to_note_token", "(", "pitch_inds", ",", "dur_inds", ",", "\n", "batch_size", ")", "\n", "# predicted: (B, note_size)", "\n", "\n", "predicted_notes", "[", ":", ",", "t", "]", "=", "predicted", "\n", "eos_samp_inds", "=", "(", "pitch_inds", "==", "self", ".", "pitch_eos", ")", "\n", "lengths", "[", "eos_samp_inds", "&", "(", "lengths", "==", "0", ")", "]", "=", "t", "\n", "\n", "if", "t", "==", "self", ".", "max_simu_note", "-", "1", ":", "\n", "                ", "break", "\n", "", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_ratio", "\n", "if", "inference", "or", "not", "teacher_force", ":", "\n", "                ", "token", "=", "predicted", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "token", "=", "notes", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "", "lengths", "[", "lengths", "==", "0", "]", "=", "t", "\n", "pitch_outs", "=", "torch", ".", "cat", "(", "pitch_outs", ",", "dim", "=", "1", ")", "\n", "dur_outs", "=", "torch", ".", "cat", "(", "dur_outs", ",", "dim", "=", "1", ")", "\n", "return", "pitch_outs", ",", "dur_outs", ",", "predicted_notes", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decoder": [[437, 499], ["z.size", "ptvae.PtvaeDecoder.z2dec_hid_linear().unsqueeze", "ptvae.PtvaeDecoder.z2dec_in_linear().unsqueeze", "ptvae.PtvaeDecoder.dec_init_input.repeat().unsqueeze", "range", "torch.cat", "torch.cat", "x.view", "torch.nn.utils.rnn.pack_padded_sequence", "[].transpose().contiguous", "x_summarized.view.view.view", "ptvae.PtvaeDecoder.dec_time_gru", "torch.cat.append", "torch.cat.append", "ptvae.PtvaeDecoder.z2dec_hid_linear", "ptvae.PtvaeDecoder.z2dec_in_linear", "lengths.view", "ptvae.PtvaeDecoder.dec_init_input.repeat", "torch.cat", "ptvae.PtvaeDecoder.decode_notes", "ptvae.PtvaeDecoder.decode_notes", "pitch_out.unsqueeze", "dur_out.unsqueeze", "random.random", "x_summarized[].unsqueeze", "torch.nn.utils.rnn.pack_padded_sequence", "[].transpose().contiguous", "token.view().unsqueeze.view().unsqueeze.view().unsqueeze", "[].transpose", "predicted_lengths.cpu", "[].transpose", "token.view().unsqueeze.view().unsqueeze.view", "ptvae.PtvaeDecoder.dec_notes_emb_gru", "ptvae.PtvaeDecoder.dec_notes_emb_gru"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decode_notes", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decode_notes"], ["", "def", "decoder", "(", "self", ",", "z", ",", "inference", ",", "x", ",", "lengths", ",", "teacher_forcing_ratio1", ",", "\n", "teacher_forcing_ratio2", ")", ":", "\n", "# z: (B, z_size)", "\n", "# x: (B, num_step, max_simu_note, note_emb_size)", "\n", "        ", "batch_size", "=", "z", ".", "size", "(", "0", ")", "\n", "z_hid", "=", "self", ".", "z2dec_hid_linear", "(", "z", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# z_hid: (1, B, dec_time_hid_size)", "\n", "z_in", "=", "self", ".", "z2dec_in_linear", "(", "z", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# z_in: (B, dec_z_in_size)", "\n", "\n", "if", "inference", ":", "\n", "            ", "assert", "x", "is", "None", "\n", "assert", "lengths", "is", "None", "\n", "assert", "teacher_forcing_ratio1", "==", "0", "\n", "assert", "teacher_forcing_ratio2", "==", "0", "\n", "", "else", ":", "\n", "            ", "x_summarized", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "max_simu_note", ",", "self", ".", "note_emb_size", ")", "\n", "x_summarized", "=", "pack_padded_sequence", "(", "x_summarized", ",", "lengths", ".", "view", "(", "-", "1", ")", ",", "\n", "batch_first", "=", "True", ",", "\n", "enforce_sorted", "=", "False", ")", "\n", "x_summarized", "=", "self", ".", "dec_notes_emb_gru", "(", "x_summarized", ")", "[", "-", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x_summarized", "=", "x_summarized", ".", "view", "(", "-", "1", ",", "self", ".", "num_step", ",", "\n", "2", "*", "self", ".", "dec_emb_hid_size", ")", "\n", "\n", "", "pitch_outs", "=", "[", "]", "\n", "dur_outs", "=", "[", "]", "\n", "token", "=", "self", ".", "dec_init_input", ".", "repeat", "(", "batch_size", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# (B, 2 * dec_emb_hid_size)", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "num_step", ")", ":", "\n", "            ", "notes_summary", ",", "z_hid", "=", "self", ".", "dec_time_gru", "(", "torch", ".", "cat", "(", "[", "token", ",", "z_in", "]", ",", "dim", "=", "-", "1", ")", ",", "z_hid", ")", "\n", "if", "inference", ":", "\n", "                ", "pitch_out", ",", "dur_out", ",", "predicted_notes", ",", "predicted_lengths", "=", "self", ".", "decode_notes", "(", "notes_summary", ",", "batch_size", ",", "None", ",", "\n", "inference", ",", "teacher_forcing_ratio2", ")", "\n", "", "else", ":", "\n", "                ", "pitch_out", ",", "dur_out", ",", "predicted_notes", ",", "predicted_lengths", "=", "self", ".", "decode_notes", "(", "notes_summary", ",", "batch_size", ",", "x", "[", ":", ",", "t", "]", ",", "\n", "inference", ",", "teacher_forcing_ratio2", ")", "\n", "", "pitch_outs", ".", "append", "(", "pitch_out", ".", "unsqueeze", "(", "1", ")", ")", "\n", "dur_outs", ".", "append", "(", "dur_out", ".", "unsqueeze", "(", "1", ")", ")", "\n", "if", "t", "==", "self", ".", "num_step", "-", "1", ":", "\n", "                ", "break", "\n", "\n", "", "teacher_force", "=", "random", ".", "random", "(", ")", "<", "teacher_forcing_ratio1", "\n", "if", "teacher_force", "and", "not", "inference", ":", "\n", "                ", "token", "=", "x_summarized", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "token", "=", "pack_padded_sequence", "(", "predicted_notes", ",", "\n", "predicted_lengths", ".", "cpu", "(", ")", ",", "\n", "batch_first", "=", "True", ",", "\n", "enforce_sorted", "=", "False", ")", "\n", "token", "=", "self", ".", "dec_notes_emb_gru", "(", "token", ")", "[", "-", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "token", "=", "token", ".", "view", "(", "-", "1", ",", "2", "*", "self", ".", "dec_emb_hid_size", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "", "pitch_outs", "=", "torch", ".", "cat", "(", "pitch_outs", ",", "dim", "=", "1", ")", "\n", "dur_outs", "=", "torch", ".", "cat", "(", "dur_outs", ",", "dim", "=", "1", ")", "\n", "# print(pitch_outs.size())", "\n", "# print(dur_outs.size())", "\n", "return", "pitch_outs", ",", "dur_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.forward": [[500, 504], ["ptvae.PtvaeDecoder.decoder"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decoder"], ["", "def", "forward", "(", "self", ",", "z", ",", "inference", ",", "x", ",", "lengths", ",", "teacher_forcing_ratio1", ",", "\n", "teacher_forcing_ratio2", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "z", ",", "inference", ",", "x", ",", "lengths", ",", "teacher_forcing_ratio1", ",", "\n", "teacher_forcing_ratio2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.recon_loss": [[505, 540], ["torch.nn.CrossEntropyLoss", "recon_pitch.view.view.view", "x[].contiguous().view", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "recon_pitch.view.view.size", "recon_dur.view.view.view", "x[].contiguous().view", "torch.nn.CrossEntropyLoss.", "recon_dur.view.view.view", "x[].contiguous().view", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.tensor().float", "x[].contiguous", "x[].contiguous", "x[].contiguous", "torch.tensor"], "methods", ["None"], ["", "def", "recon_loss", "(", "self", ",", "x", ",", "recon_pitch", ",", "recon_dur", ",", "weights", "=", "(", "1", ",", "0.5", ")", ",", "\n", "weighted_dur", "=", "False", ")", ":", "\n", "        ", "pitch_loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "self", ".", "pitch_pad", ")", "\n", "recon_pitch", "=", "recon_pitch", ".", "view", "(", "-", "1", ",", "recon_pitch", ".", "size", "(", "-", "1", ")", ")", "\n", "#print(recon_pitch.shape)", "\n", "\n", "gt_pitch", "=", "x", "[", ":", ",", ":", ",", "1", ":", ",", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "#print(gt_pitch.shape)", "\n", "pitch_loss", "=", "pitch_loss_func", "(", "recon_pitch", ",", "gt_pitch", ")", "\n", "\n", "dur_loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "self", ".", "dur_pad", ")", "\n", "if", "not", "weighted_dur", ":", "\n", "            ", "recon_dur", "=", "recon_dur", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "gt_dur", "=", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "dur_loss", "=", "dur_loss_func", "(", "recon_dur", ",", "gt_dur", ")", "\n", "", "else", ":", "\n", "            ", "recon_dur", "=", "recon_dur", ".", "view", "(", "-", "1", ",", "self", ".", "dur_width", ",", "2", ")", "\n", "gt_dur", "=", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "dur_width", ")", "\n", "dur0", "=", "dur_loss_func", "(", "recon_dur", "[", ":", ",", "0", ",", ":", "]", ",", "gt_dur", "[", ":", ",", "0", "]", ")", "\n", "dur1", "=", "dur_loss_func", "(", "recon_dur", "[", ":", ",", "1", ",", ":", "]", ",", "gt_dur", "[", ":", ",", "1", "]", ")", "\n", "dur2", "=", "dur_loss_func", "(", "recon_dur", "[", ":", ",", "2", ",", ":", "]", ",", "gt_dur", "[", ":", ",", "2", "]", ")", "\n", "dur3", "=", "dur_loss_func", "(", "recon_dur", "[", ":", ",", "3", ",", ":", "]", ",", "gt_dur", "[", ":", ",", "3", "]", ")", "\n", "dur4", "=", "dur_loss_func", "(", "recon_dur", "[", ":", ",", "4", ",", ":", "]", ",", "gt_dur", "[", ":", ",", "4", "]", ")", "\n", "w", "=", "torch", ".", "tensor", "(", "[", "1", ",", "0.6", ",", "0.4", ",", "0.3", ",", "0.3", "]", ",", "\n", "device", "=", "recon_dur", ".", "device", ")", ".", "float", "(", ")", "\n", "dur_loss", "=", "w", "[", "0", "]", "*", "dur0", "+", "w", "[", "1", "]", "*", "dur1", "+", "w", "[", "2", "]", "*", "dur2", "+", "w", "[", "3", "]", "*", "dur3", "+", "w", "[", "4", "]", "*", "dur4", "\n", "", "loss", "=", "weights", "[", "0", "]", "*", "pitch_loss", "+", "weights", "[", "1", "]", "*", "dur_loss", "\n", "return", "loss", ",", "pitch_loss", ",", "dur_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.emb_x": [[541, 546], ["ptvae.PtvaeDecoder.get_len_index_tensor", "ptvae.PtvaeDecoder.index_tensor_to_multihot_tensor", "ptvae.PtvaeDecoder.note_embedding"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.get_len_index_tensor", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.index_tensor_to_multihot_tensor"], ["", "def", "emb_x", "(", "self", ",", "x", ")", ":", "\n", "        ", "lengths", "=", "self", ".", "get_len_index_tensor", "(", "x", ")", "\n", "x", "=", "self", ".", "index_tensor_to_multihot_tensor", "(", "x", ")", "\n", "embedded", "=", "self", ".", "note_embedding", "(", "x", ")", "\n", "return", "embedded", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.output_to_numpy": [[547, 555], ["[].unsqueeze", "torch.cat", "est_x.cpu().numpy.cpu().numpy.cpu().numpy", "recon_pitch.cpu().numpy.cpu().numpy.cpu().numpy", "recon_dur.cpu().numpy.cpu().numpy.cpu().numpy", "recon_dur.cpu().numpy.cpu().numpy.max", "est_x.cpu().numpy.cpu().numpy.cpu", "recon_pitch.cpu().numpy.cpu().numpy.cpu", "recon_dur.cpu().numpy.cpu().numpy.cpu", "recon_pitch.cpu().numpy.cpu().numpy.max"], "methods", ["None"], ["", "def", "output_to_numpy", "(", "self", ",", "recon_pitch", ",", "recon_dur", ")", ":", "\n", "        ", "est_pitch", "=", "recon_pitch", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "# (B, 32, 11, 1)", "\n", "est_dur", "=", "recon_dur", ".", "max", "(", "-", "1", ")", "[", "1", "]", "# (B, 32, 11, 5)", "\n", "est_x", "=", "torch", ".", "cat", "(", "[", "est_pitch", ",", "est_dur", "]", ",", "dim", "=", "-", "1", ")", "# (B, 32, 11, 6)", "\n", "est_x", "=", "est_x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "recon_pitch", "=", "recon_pitch", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "recon_dur", "=", "recon_dur", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "est_x", ",", "recon_pitch", ",", "recon_dur", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.pr_to_notes": [[556, 567], ["ptvae.PtvaeDecoder.pr_to_pr_matrix", "range", "range", "notes.append", "pretty_midi.Note", "int"], "methods", ["None"], ["", "def", "pr_to_notes", "(", "self", ",", "pr", ",", "bpm", "=", "80", ",", "start", "=", "0.", ",", "one_hot", "=", "False", ")", ":", "\n", "        ", "pr_matrix", "=", "self", ".", "pr_to_pr_matrix", "(", "pr", ",", "one_hot", ")", "\n", "alpha", "=", "0.25", "*", "60", "/", "bpm", "\n", "notes", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "32", ")", ":", "\n", "            ", "for", "p", "in", "range", "(", "128", ")", ":", "\n", "                ", "if", "pr_matrix", "[", "t", ",", "p", "]", ">=", "1", ":", "\n", "                    ", "s", "=", "alpha", "*", "t", "+", "start", "\n", "e", "=", "alpha", "*", "(", "t", "+", "pr_matrix", "[", "t", ",", "p", "]", ")", "+", "start", "\n", "notes", ".", "append", "(", "pretty_midi", ".", "Note", "(", "100", ",", "int", "(", "p", ")", ",", "s", ",", "e", ")", ")", "\n", "", "", "", "return", "notes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.pr_matrix_to_note": [[568, 578], ["range", "range", "notes.append", "pretty_midi.Note", "int"], "methods", ["None"], ["", "def", "pr_matrix_to_note", "(", "self", ",", "pr_matrix", ",", "bpm", "=", "120", ",", "start", "=", "0", ")", ":", "\n", "        ", "alpha", "=", "0.25", "*", "60", "/", "bpm", "\n", "notes", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "32", ")", ":", "\n", "            ", "for", "p", "in", "range", "(", "128", ")", ":", "\n", "                ", "if", "pr_matrix", "[", "t", ",", "p", "]", ">=", "1", ":", "\n", "                    ", "s", "=", "alpha", "*", "t", "+", "start", "\n", "e", "=", "alpha", "*", "(", "t", "+", "pr_matrix", "[", "t", ",", "p", "]", ")", "+", "start", "\n", "notes", ".", "append", "(", "pretty_midi", ".", "Note", "(", "100", ",", "int", "(", "p", ")", ",", "s", ",", "e", ")", ")", "\n", "", "", "", "return", "notes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.grid_to_pr_and_notes": [[579, 597], ["numpy.zeros", "range", "range", "min", "notes.append", "int", "pretty_midi.Note", "int", "str"], "methods", ["None"], ["", "def", "grid_to_pr_and_notes", "(", "self", ",", "grid", ",", "bpm", "=", "60.", ",", "start", "=", "0.", ")", ":", "\n", "        ", "if", "grid", ".", "shape", "[", "1", "]", "==", "self", ".", "max_simu_note", ":", "\n", "            ", "grid", "=", "grid", "[", ":", ",", "1", ":", "]", "\n", "", "pr", "=", "np", ".", "zeros", "(", "(", "32", ",", "128", ")", ",", "dtype", "=", "int", ")", "\n", "alpha", "=", "0.25", "*", "60", "/", "bpm", "\n", "notes", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "32", ")", ":", "\n", "            ", "for", "n", "in", "range", "(", "10", ")", ":", "\n", "                ", "note", "=", "grid", "[", "t", ",", "n", "]", "\n", "if", "note", "[", "0", "]", "==", "self", ".", "pitch_eos", ":", "\n", "                    ", "break", "\n", "", "pitch", "=", "note", "[", "0", "]", "+", "self", ".", "min_pitch", "\n", "dur", "=", "int", "(", "''", ".", "join", "(", "[", "str", "(", "_", ")", "for", "_", "in", "note", "[", "1", ":", "]", "]", ")", ",", "2", ")", "+", "1", "\n", "pr", "[", "t", ",", "pitch", "]", "=", "min", "(", "dur", ",", "32", "-", "t", ")", "\n", "notes", ".", "append", "(", "\n", "pretty_midi", ".", "Note", "(", "100", ",", "int", "(", "pitch", ")", ",", "start", "+", "t", "*", "alpha", ",", "\n", "start", "+", "(", "t", "+", "dur", ")", "*", "alpha", ")", ")", "\n", "", "", "return", "pr", ",", "notes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.__init__": [[20, 28], ["torch_plus.PytorchModel.__init__"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "device", ",", "chd_encoder", ",", "rhy_encoder", ",", "decoder", ",", "\n", "chd_decoder", ")", ":", "\n", "        ", "super", "(", "DisentangleVAE", ",", "self", ")", ".", "__init__", "(", "name", ",", "device", ")", "\n", "self", ".", "chd_encoder", "=", "chd_encoder", "\n", "self", ".", "rhy_encoder", "=", "rhy_encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "num_step", "=", "self", ".", "decoder", ".", "num_step", "\n", "self", ".", "chd_decoder", "=", "chd_decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.confuse_prmat": [[29, 37], ["torch.nonzero", "torch.randint", "torch.clamp", "pr_mat.long", "torch.nonzero.size"], "methods", ["None"], ["", "def", "confuse_prmat", "(", "self", ",", "pr_mat", ")", ":", "\n", "        ", "non_zero_ent", "=", "torch", ".", "nonzero", "(", "pr_mat", ".", "long", "(", ")", ")", "\n", "eps", "=", "torch", ".", "randint", "(", "0", ",", "2", ",", "(", "non_zero_ent", ".", "size", "(", "0", ")", ",", ")", ")", "\n", "eps", "=", "(", "(", "2", "*", "eps", ")", "-", "1", ")", ".", "long", "(", ")", "\n", "confuse_ent", "=", "torch", ".", "clamp", "(", "non_zero_ent", "[", ":", ",", "2", "]", "+", "eps", ",", "min", "=", "0", ",", "max", "=", "127", ")", "\n", "pr_mat", "[", "non_zero_ent", "[", ":", ",", "0", "]", ",", "non_zero_ent", "[", ":", ",", "1", "]", ",", "confuse_ent", "]", "=", "pr_mat", "[", "non_zero_ent", "[", ":", ",", "0", "]", ",", "non_zero_ent", "[", ":", ",", "1", "]", ",", "non_zero_ent", "[", ":", ",", "2", "]", "]", "\n", "return", "pr_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.get_chroma": [[38, 48], ["torch.cat.size", "torch.zeros().to", "torch.cat", "torch.cat.view().contiguous", "torch.log.sum", "torch.log.view", "torch.log.sum().float", "torch.log", "torch.log.to", "torch.zeros", "torch.cat.view", "torch.log.sum"], "methods", ["None"], ["", "def", "get_chroma", "(", "self", ",", "pr_mat", ")", ":", "\n", "        ", "bs", "=", "pr_mat", ".", "size", "(", "0", ")", "\n", "pad", "=", "torch", ".", "zeros", "(", "bs", ",", "32", ",", "4", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pr_mat", "=", "torch", ".", "cat", "(", "[", "pr_mat", ",", "pad", "]", ",", "dim", "=", "-", "1", ")", "\n", "c", "=", "pr_mat", ".", "view", "(", "bs", ",", "32", ",", "-", "1", ",", "12", ")", ".", "contiguous", "(", ")", "\n", "c", "=", "c", ".", "sum", "(", "dim", "=", "-", "2", ")", "# (bs, 32, 12)", "\n", "c", "=", "c", ".", "view", "(", "bs", ",", "8", ",", "4", ",", "12", ")", "\n", "c", "=", "c", ".", "sum", "(", "dim", "=", "-", "2", ")", ".", "float", "(", ")", "\n", "c", "=", "torch", ".", "log", "(", "c", "+", "1", ")", "\n", "return", "c", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.run": [[49, 63], ["model.DisentangleVAE.decoder.emb_x", "model.DisentangleVAE.chd_encoder", "model.DisentangleVAE.rhy_encoder", "torch_plus.train_utils.get_zs_from_dists", "torch.cat", "model.DisentangleVAE.decoder", "model.DisentangleVAE.chd_decoder"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.emb_x", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.get_zs_from_dists", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decoder"], ["", "def", "run", "(", "self", ",", "x", ",", "c", ",", "pr_mat", ",", "tfr1", ",", "tfr2", ",", "tfr3", ",", "confuse", "=", "True", ")", ":", "\n", "        ", "embedded_x", ",", "lengths", "=", "self", ".", "decoder", ".", "emb_x", "(", "x", ")", "\n", "# cc = self.get_chroma(pr_mat)", "\n", "dist_chd", "=", "self", ".", "chd_encoder", "(", "c", ")", "\n", "# pr_mat = self.confuse_prmat(pr_mat)", "\n", "dist_rhy", "=", "self", ".", "rhy_encoder", "(", "pr_mat", ")", "\n", "z_chd", ",", "z_rhy", "=", "get_zs_from_dists", "(", "[", "dist_chd", ",", "dist_rhy", "]", ",", "True", ")", "\n", "dec_z", "=", "torch", ".", "cat", "(", "[", "z_chd", ",", "z_rhy", "]", ",", "dim", "=", "-", "1", ")", "\n", "pitch_outs", ",", "dur_outs", "=", "self", ".", "decoder", "(", "dec_z", ",", "False", ",", "embedded_x", ",", "\n", "lengths", ",", "tfr1", ",", "tfr2", ")", "\n", "recon_root", ",", "recon_chroma", ",", "recon_bass", "=", "self", ".", "chd_decoder", "(", "z_chd", ",", "False", ",", "\n", "tfr3", ",", "c", ")", "\n", "return", "pitch_outs", ",", "dur_outs", ",", "dist_chd", ",", "dist_rhy", ",", "recon_root", ",", "recon_chroma", ",", "recon_bass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.loss_function": [[64, 76], ["model.DisentangleVAE.decoder.recon_loss", "model.DisentangleVAE.kl_loss", "model.DisentangleVAE.chord_loss"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.recon_loss", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.kl_loss", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.chord_loss"], ["", "def", "loss_function", "(", "self", ",", "x", ",", "c", ",", "recon_pitch", ",", "recon_dur", ",", "dist_chd", ",", "\n", "dist_rhy", ",", "recon_root", ",", "recon_chroma", ",", "recon_bass", ",", "\n", "beta", ",", "weights", ",", "weighted_dur", "=", "False", ")", ":", "\n", "        ", "recon_loss", ",", "pl", ",", "dl", "=", "self", ".", "decoder", ".", "recon_loss", "(", "x", ",", "recon_pitch", ",", "recon_dur", ",", "\n", "weights", ",", "weighted_dur", ")", "\n", "kl_loss", ",", "kl_chd", ",", "kl_rhy", "=", "self", ".", "kl_loss", "(", "dist_chd", ",", "dist_rhy", ")", "\n", "chord_loss", ",", "root", ",", "chroma", ",", "bass", "=", "self", ".", "chord_loss", "(", "c", ",", "recon_root", ",", "\n", "recon_chroma", ",", "\n", "recon_bass", ")", "\n", "loss", "=", "recon_loss", "+", "beta", "*", "kl_loss", "+", "chord_loss", "\n", "return", "loss", ",", "recon_loss", ",", "pl", ",", "dl", ",", "kl_loss", ",", "kl_chd", ",", "kl_rhy", ",", "chord_loss", ",", "root", ",", "chroma", ",", "bass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.chord_loss": [[77, 91], ["torch.nn.CrossEntropyLoss", "[].view().contiguous", "c[].long().view().contiguous", "[].view().contiguous", "recon_root.view().contiguous.view().contiguous.view().contiguous", "recon_chroma.view().contiguous.view().contiguous.view().contiguous", "recon_bass.view().contiguous.view().contiguous.view().contiguous", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "[].view", "c[].long().view", "[].view", "recon_root.view().contiguous.view().contiguous.view", "recon_chroma.view().contiguous.view().contiguous.view", "recon_bass.view().contiguous.view().contiguous.view", "c[].long", "c[].max", "c[].max"], "methods", ["None"], ["", "def", "chord_loss", "(", "self", ",", "c", ",", "recon_root", ",", "recon_chroma", ",", "recon_bass", ")", ":", "\n", "        ", "loss_fun", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "root", "=", "c", "[", ":", ",", ":", ",", "0", ":", "12", "]", ".", "max", "(", "-", "1", ")", "[", "-", "1", "]", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "chroma", "=", "c", "[", ":", ",", ":", ",", "12", ":", "24", "]", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "bass", "=", "c", "[", ":", ",", ":", ",", "24", ":", "]", ".", "max", "(", "-", "1", ")", "[", "-", "1", "]", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "recon_root", "=", "recon_root", ".", "view", "(", "-", "1", ",", "12", ")", ".", "contiguous", "(", ")", "\n", "recon_chroma", "=", "recon_chroma", ".", "view", "(", "-", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "recon_bass", "=", "recon_bass", ".", "view", "(", "-", "1", ",", "12", ")", ".", "contiguous", "(", ")", "\n", "root_loss", "=", "loss_fun", "(", "recon_root", ",", "root", ")", "\n", "chroma_loss", "=", "loss_fun", "(", "recon_chroma", ",", "chroma", ")", "\n", "bass_loss", "=", "loss_fun", "(", "recon_bass", ",", "bass", ")", "\n", "chord_loss", "=", "root_loss", "+", "chroma_loss", "+", "bass_loss", "\n", "return", "chord_loss", ",", "root_loss", ",", "chroma_loss", ",", "bass_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.kl_loss": [[92, 98], ["torch_plus.train_utils.kl_with_normal", "torch_plus.train_utils.kl_with_normal"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.kl_with_normal", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.kl_with_normal"], ["", "def", "kl_loss", "(", "self", ",", "*", "dists", ")", ":", "\n", "# kl = kl_with_normal(dists[0])", "\n", "        ", "kl_chd", "=", "kl_with_normal", "(", "dists", "[", "0", "]", ")", "\n", "kl_rhy", "=", "kl_with_normal", "(", "dists", "[", "1", "]", ")", "\n", "kl_loss", "=", "kl_chd", "+", "kl_rhy", "\n", "return", "kl_loss", ",", "kl_chd", ",", "kl_rhy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.loss": [[99, 104], ["model.DisentangleVAE.run", "model.DisentangleVAE.loss_function"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.run", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.loss_function"], ["", "def", "loss", "(", "self", ",", "x", ",", "c", ",", "pr_mat", ",", "dt_x", ",", "tfr1", "=", "0.", ",", "tfr2", "=", "0.", ",", "tfr3", "=", "0.", ",", "beta", "=", "0.1", ",", "weights", "=", "(", "1", ",", "0.5", ")", ")", ":", "\n", "#print(pr_mat.shape, dt_x.shape)", "\n", "        ", "outputs", "=", "self", ".", "run", "(", "x", ",", "c", ",", "pr_mat", ",", "tfr1", ",", "tfr2", ",", "tfr3", ")", "\n", "loss", "=", "self", ".", "loss_function", "(", "x", ",", "c", ",", "*", "outputs", ",", "beta", ",", "weights", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_encode": [[124, 130], ["model.DisentangleVAE.eval", "torch.no_grad", "model.DisentangleVAE.chd_encoder", "model.DisentangleVAE.rhy_encoder"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval"], ["", "def", "inference_encode", "(", "self", ",", "pr_mat", ",", "c", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist_chd", "=", "self", ".", "chd_encoder", "(", "c", ")", "\n", "dist_rhy", "=", "self", ".", "rhy_encoder", "(", "pr_mat", ")", "\n", "", "return", "dist_chd", ",", "dist_rhy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_decode": [[131, 139], ["model.DisentangleVAE.eval", "torch.no_grad", "torch.cat", "model.DisentangleVAE.decoder", "model.DisentangleVAE.decoder.output_to_numpy"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decoder", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.output_to_numpy"], ["", "def", "inference_decode", "(", "self", ",", "z_chd", ",", "z_rhy", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dec_z", "=", "torch", ".", "cat", "(", "[", "z_chd", ",", "z_rhy", "]", ",", "dim", "=", "-", "1", ")", "\n", "pitch_outs", ",", "dur_outs", "=", "self", ".", "decoder", "(", "dec_z", ",", "True", ",", "None", ",", "\n", "None", ",", "0.", ",", "0.", ")", "\n", "est_x", ",", "_", ",", "_", "=", "self", ".", "decoder", ".", "output_to_numpy", "(", "pitch_outs", ",", "dur_outs", ")", "\n", "", "return", "est_x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference": [[140, 151], ["model.DisentangleVAE.eval", "torch.no_grad", "model.DisentangleVAE.chd_encoder", "model.DisentangleVAE.rhy_encoder", "torch_plus.train_utils.get_zs_from_dists", "torch.cat", "model.DisentangleVAE.decoder", "model.DisentangleVAE.decoder.output_to_numpy"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.get_zs_from_dists", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.decoder", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.output_to_numpy"], ["", "def", "inference", "(", "self", ",", "pr_mat", ",", "c", ",", "sample", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist_chd", "=", "self", ".", "chd_encoder", "(", "c", ")", "\n", "dist_rhy", "=", "self", ".", "rhy_encoder", "(", "pr_mat", ")", "\n", "z_chd", ",", "z_rhy", "=", "get_zs_from_dists", "(", "[", "dist_chd", ",", "dist_rhy", "]", ",", "sample", ")", "\n", "dec_z", "=", "torch", ".", "cat", "(", "[", "z_chd", ",", "z_rhy", "]", ",", "dim", "=", "-", "1", ")", "\n", "pitch_outs", ",", "dur_outs", "=", "self", ".", "decoder", "(", "dec_z", ",", "True", ",", "None", ",", "\n", "None", ",", "0.", ",", "0.", ")", "\n", "est_x", ",", "_", ",", "_", "=", "self", ".", "decoder", ".", "output_to_numpy", "(", "pitch_outs", ",", "dur_outs", ")", "\n", "", "return", "est_x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.swap": [[152, 157], ["model.DisentangleVAE.inference"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference"], ["", "def", "swap", "(", "self", ",", "pr_mat1", ",", "pr_mat2", ",", "c1", ",", "c2", ",", "fix_rhy", ",", "fix_chd", ")", ":", "\n", "        ", "pr_mat", "=", "pr_mat1", "if", "fix_rhy", "else", "pr_mat2", "\n", "c", "=", "c1", "if", "fix_chd", "else", "c2", "\n", "est_x", "=", "self", ".", "inference", "(", "pr_mat", ",", "c", ",", "sample", "=", "False", ")", "\n", "return", "est_x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.posterior_sample": [[158, 180], ["model.DisentangleVAE.inference", "model.DisentangleVAE.inference_encode", "torch_plus.train_utils.get_zs_from_dists", "model.DisentangleVAE.inference_decode", "torch.distributions.Normal", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_encode", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.get_zs_from_dists", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_decode"], ["", "def", "posterior_sample", "(", "self", ",", "pr_mat", ",", "c", ",", "scale", "=", "None", ",", "sample_chd", "=", "True", ",", "\n", "sample_txt", "=", "True", ")", ":", "\n", "        ", "if", "scale", "is", "None", "and", "sample_chd", "and", "sample_txt", ":", "\n", "            ", "est_x", "=", "self", ".", "inference", "(", "pr_mat", ",", "c", ",", "sample", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "dist_chd", ",", "dist_rhy", "=", "self", ".", "inference_encode", "(", "pr_mat", ",", "c", ")", "\n", "if", "scale", "is", "not", "None", ":", "\n", "                ", "mean_chd", "=", "dist_chd", ".", "mean", "\n", "mean_rhy", "=", "dist_rhy", ".", "mean", "\n", "# std_chd = torch.ones_like(dist_chd.mean) * scale", "\n", "# std_rhy = torch.ones_like(dist_rhy.mean) * scale", "\n", "std_chd", "=", "dist_chd", ".", "scale", "*", "scale", "\n", "std_rhy", "=", "dist_rhy", ".", "scale", "*", "scale", "\n", "dist_rhy", "=", "Normal", "(", "mean_rhy", ",", "std_rhy", ")", "\n", "dist_chd", "=", "Normal", "(", "mean_chd", ",", "std_chd", ")", "\n", "", "z_chd", ",", "z_rhy", "=", "get_zs_from_dists", "(", "[", "dist_chd", ",", "dist_rhy", "]", ",", "True", ")", "\n", "if", "not", "sample_chd", ":", "\n", "                ", "z_chd", "=", "dist_chd", ".", "mean", "\n", "", "if", "not", "sample_txt", ":", "\n", "                ", "z_rhy", "=", "dist_rhy", ".", "mean", "\n", "", "est_x", "=", "self", ".", "inference_decode", "(", "z_chd", ",", "z_rhy", ")", "\n", "", "return", "est_x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.prior_sample": [[181, 192], ["model.DisentangleVAE.inference_encode", "torch.zeros_like", "torch_plus.train_utils.get_zs_from_dists", "model.DisentangleVAE.inference_decode", "torch.ones_like", "torch.distributions.Normal", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_encode", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.get_zs_from_dists", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_decode"], ["", "def", "prior_sample", "(", "self", ",", "x", ",", "c", ",", "sample_chd", "=", "False", ",", "sample_rhy", "=", "False", ",", "\n", "scale", "=", "1.", ")", ":", "\n", "        ", "dist_chd", ",", "dist_rhy", "=", "self", ".", "inference_encode", "(", "x", ",", "c", ")", "\n", "mean", "=", "torch", ".", "zeros_like", "(", "dist_rhy", ".", "mean", ")", "\n", "loc", "=", "torch", ".", "ones_like", "(", "dist_rhy", ".", "mean", ")", "*", "scale", "\n", "if", "sample_chd", ":", "\n", "            ", "dist_chd", "=", "Normal", "(", "mean", ",", "loc", ")", "\n", "", "if", "sample_rhy", ":", "\n", "            ", "dist_rhy", "=", "Normal", "(", "mean", ",", "loc", ")", "\n", "", "z_chd", ",", "z_rhy", "=", "get_zs_from_dists", "(", "[", "dist_chd", ",", "dist_rhy", "]", ",", "True", ")", "\n", "return", "self", ".", "inference_decode", "(", "z_chd", ",", "z_rhy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.gt_sample": [[193, 196], ["x[].numpy"], "methods", ["None"], ["", "def", "gt_sample", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", ":", ",", "1", ":", "]", ".", "numpy", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.interp": [[197, 217], ["model.DisentangleVAE.inference_encode", "model.DisentangleVAE.inference_encode", "torch_plus.train_utils.get_zs_from_dists", "z_chd1.unsqueeze().repeat.size", "z_chd1.unsqueeze().repeat.view().contiguous", "z_rhy1.unsqueeze().repeat.view().contiguous", "model.DisentangleVAE.inference_decode", "model.DisentangleVAE.reshape", "model.DisentangleVAE.interp_z", "z_chd1.unsqueeze().repeat", "model.DisentangleVAE.interp_z", "z_rhy1.unsqueeze().repeat", "z_chd1.unsqueeze().repeat.view", "z_rhy1.unsqueeze().repeat.view", "z_chd1.unsqueeze", "z_rhy1.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_encode", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_encode", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.train_utils.get_zs_from_dists", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference_decode", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.interp_z", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.interp_z"], ["", "def", "interp", "(", "self", ",", "pr_mat1", ",", "c1", ",", "pr_mat2", ",", "c2", ",", "interp_chd", "=", "False", ",", "\n", "interp_rhy", "=", "False", ",", "int_count", "=", "10", ")", ":", "\n", "        ", "dist_chd1", ",", "dist_rhy1", "=", "self", ".", "inference_encode", "(", "pr_mat1", ",", "c1", ")", "\n", "dist_chd2", ",", "dist_rhy2", "=", "self", ".", "inference_encode", "(", "pr_mat2", ",", "c2", ")", "\n", "[", "z_chd1", ",", "z_rhy1", ",", "z_chd2", ",", "z_rhy2", "]", "=", "get_zs_from_dists", "(", "[", "dist_chd1", ",", "dist_rhy1", ",", "dist_chd2", ",", "dist_rhy2", "]", ",", "\n", "False", ")", "\n", "if", "interp_chd", ":", "\n", "            ", "z_chds", "=", "self", ".", "interp_z", "(", "z_chd1", ",", "z_chd2", ",", "int_count", ")", "\n", "", "else", ":", "\n", "            ", "z_chds", "=", "z_chd1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "int_count", ",", "1", ")", "\n", "", "if", "interp_rhy", ":", "\n", "            ", "z_rhys", "=", "self", ".", "interp_z", "(", "z_rhy1", ",", "z_rhy2", ",", "int_count", ")", "\n", "", "else", ":", "\n", "            ", "z_rhys", "=", "z_rhy1", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "int_count", ",", "1", ")", "\n", "", "bs", "=", "z_chds", ".", "size", "(", "0", ")", "\n", "z_chds", "=", "z_chds", ".", "view", "(", "bs", "*", "int_count", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "z_rhys", "=", "z_rhys", ".", "view", "(", "bs", "*", "int_count", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "estxs", "=", "self", ".", "inference_decode", "(", "z_chds", ",", "z_rhys", ")", "\n", "return", "estxs", ".", "reshape", "(", "(", "bs", ",", "int_count", ",", "32", ",", "15", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.interp_z": [[218, 224], ["z1.numpy.numpy.numpy", "z2.numpy.numpy.numpy", "torch.stack", "model.DisentangleVAE.interp_path", "zip"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.interp_path"], ["", "def", "interp_z", "(", "self", ",", "z1", ",", "z2", ",", "int_count", "=", "10", ")", ":", "\n", "        ", "z1", "=", "z1", ".", "numpy", "(", ")", "\n", "z2", "=", "z2", ".", "numpy", "(", ")", "\n", "zs", "=", "torch", ".", "stack", "(", "[", "self", ".", "interp_path", "(", "zz1", ",", "zz2", ",", "int_count", ")", "\n", "for", "zz1", ",", "zz2", "in", "zip", "(", "z1", ",", "z2", ")", "]", ",", "dim", "=", "0", ")", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.interp_path": [[225, 250], ["z1.reshape.reshape.reshape", "z2.reshape.reshape.reshape", "numpy.linspace", "model.DisentangleVAE.interp_path.slerp2"], "methods", ["None"], ["", "def", "interp_path", "(", "self", ",", "z1", ",", "z2", ",", "interpolation_count", "=", "10", ")", ":", "\n", "        ", "result_shape", "=", "z1", ".", "shape", "\n", "z1", "=", "z1", ".", "reshape", "(", "-", "1", ")", "\n", "z2", "=", "z2", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "def", "slerp2", "(", "p0", ",", "p1", ",", "t", ")", ":", "\n", "            ", "omega", "=", "np", ".", "arccos", "(", "\n", "np", ".", "dot", "(", "p0", "/", "np", ".", "linalg", ".", "norm", "(", "p0", ")", ",", "p1", "/", "np", ".", "linalg", ".", "norm", "(", "p1", ")", ")", ")", "\n", "so", "=", "np", ".", "sin", "(", "omega", ")", "\n", "return", "np", ".", "sin", "(", "(", "1.0", "-", "t", ")", "*", "omega", ")", "[", ":", ",", "None", "]", "/", "so", "*", "p0", "[", "\n", "None", "]", "+", "np", ".", "sin", "(", "\n", "t", "*", "omega", ")", "[", ":", ",", "None", "]", "/", "so", "*", "p1", "[", "None", "]", "\n", "\n", "", "percentages", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "interpolation_count", ")", "\n", "\n", "normalized_z1", "=", "z1", "/", "np", ".", "linalg", ".", "norm", "(", "z1", ")", "\n", "normalized_z2", "=", "z2", "/", "np", ".", "linalg", ".", "norm", "(", "z2", ")", "\n", "dirs", "=", "slerp2", "(", "normalized_z1", ",", "normalized_z2", ",", "percentages", ")", "\n", "length", "=", "np", ".", "linspace", "(", "np", ".", "log", "(", "np", ".", "linalg", ".", "norm", "(", "z1", ")", ")", ",", "\n", "np", ".", "log", "(", "np", ".", "linalg", ".", "norm", "(", "z2", ")", ")", ",", "\n", "interpolation_count", ")", "\n", "out", "=", "(", "dirs", "*", "np", ".", "exp", "(", "length", "[", ":", ",", "None", "]", ")", ")", ".", "reshape", "(", "\n", "[", "interpolation_count", "]", "+", "list", "(", "result_shape", ")", ")", "\n", "# out = np.array([(1 - t) * z1 + t * z2 for t in percentages])", "\n", "return", "torch", ".", "from_numpy", "(", "out", ")", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.init_model": [[251, 273], ["ptvae.RnnEncoder", "ptvae.TextureEncoder", "ptvae.RnnDecoder", "ptvae.PtvaeDecoder", "DisentangleVAE.DisentangleVAE", "torch.device", "torch.cuda.is_available"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_model", "(", "device", "=", "None", ",", "chd_size", "=", "256", ",", "txt_size", "=", "256", ",", "num_channel", "=", "10", ")", ":", "\n", "        ", "name", "=", "'disvae'", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "else", "'cpu'", ")", "\n", "# chd_encoder = RnnEncoder(36, 1024, 256)", "\n", "", "chd_encoder", "=", "RnnEncoder", "(", "36", ",", "1024", ",", "chd_size", ")", "\n", "# rhy_encoder = TextureEncoder(256, 1024, 256)", "\n", "rhy_encoder", "=", "TextureEncoder", "(", "256", ",", "1024", ",", "txt_size", ",", "num_channel", ")", "\n", "# pt_encoder = PtvaeEncoder(device=device, z_size=152)", "\n", "# chd_decoder = RnnDecoder(z_dim=256)", "\n", "chd_decoder", "=", "RnnDecoder", "(", "z_dim", "=", "chd_size", ")", "\n", "# pt_decoder = PtvaeDecoder(note_embedding=None,", "\n", "#                           dec_dur_hid_size=64, z_size=512)", "\n", "pt_decoder", "=", "PtvaeDecoder", "(", "note_embedding", "=", "None", ",", "\n", "dec_dur_hid_size", "=", "64", ",", "\n", "z_size", "=", "chd_size", "+", "txt_size", ")", "\n", "\n", "model", "=", "DisentangleVAE", "(", "name", ",", "device", ",", "chd_encoder", ",", "\n", "rhy_encoder", ",", "pt_decoder", ",", "chd_decoder", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.two_bar_contrastive_model.contrastive_model.__init__": [[7, 21], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.CosineSimilarity", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_size", "=", "256", ",", "hidden_dim", "=", "1024", ")", ":", "\n", "        ", "\"\"\"input: ((batch * 6) * (1024*2))\"\"\"", "\n", "super", "(", "contrastive_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.in_linear = nn.Linear(1024*2, emb_size)", "\n", "self", ".", "out_linear_left", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "emb_size", ")", "\n", "self", ".", "out_linear_right", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "emb_size", ")", "\n", "\n", "self", ".", "emb_size", "=", "emb_size", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0", ")", "\n", "\n", "self", ".", "cosine", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "loss", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.two_bar_contrastive_model.contrastive_model.contrastive_loss": [[22, 24], ["torch.mean", "two_bar_contrastive_model.contrastive_model.loss"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.loss"], ["", "def", "contrastive_loss", "(", "self", ",", "similarity", ")", ":", "\n", "        ", "return", "1", "-", "torch", ".", "mean", "(", "self", ".", "loss", "(", "similarity", ")", "[", ":", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.two_bar_contrastive_model.contrastive_model.forward": [[25, 33], ["two_bar_contrastive_model.contrastive_model.dropout", "two_bar_contrastive_model.contrastive_model.dropout", "two_bar_contrastive_model.contrastive_model.cosine", "two_bar_contrastive_model.contrastive_model.out_linear_left", "two_bar_contrastive_model.contrastive_model.out_linear_right", "two_bar_contrastive_model.contrastive_model.expand"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"input: (batch * 6 * (1024*2))\"\"\"", "\n", "batch_size", ",", "pos_neg", ",", "feature_dim", "=", "batch", ".", "shape", "\n", "#batch = self.in_linear(batch) #(batch_size * pos_neg_size) * phrase_length * emb_size", "\n", "left", "=", "self", ".", "dropout", "(", "self", ".", "out_linear_left", "(", "batch", "[", ":", ",", "0", ":", "1", ",", ":", "]", ")", ")", "#batch * 1 * emb_size", "\n", "right", "=", "self", ".", "dropout", "(", "self", ".", "out_linear_right", "(", "batch", "[", ":", ",", "1", ":", ",", ":", "]", ")", ")", "#batch * 5 * emb_size", "\n", "similarity", "=", "self", ".", "cosine", "(", "left", ".", "expand", "(", "right", ".", "shape", ")", ",", "right", ")", "#batch * 5", "\n", "return", "similarity", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.__init__": [[14, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "recogLevel", "=", "\"Mm\"", ")", ":", "\n", "        ", "self", ".", "recogLevel", "=", "recogLevel", "\n", "if", "recogLevel", "==", "\"Mm\"", ":", "\n", "            ", "self", ".", "chord_check", "=", "chord_Mm_check", "[", ":", "]", "\n", "", "if", "recogLevel", "==", "\"Tri\"", ":", "\n", "            ", "self", ".", "chord_check", "=", "chord_tri_check", "[", ":", "]", "\n", "", "if", "recogLevel", "==", "\"Seven\"", ":", "\n", "            ", "self", ".", "chord_check", "=", "chord_seven_check", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.chord_alu": [[23, 28], ["len", "len"], "methods", ["None"], ["", "", "def", "chord_alu", "(", "self", ",", "x", ",", "scalar", "=", "1", ")", ":", "\n", "        ", "if", "x", "==", "len", "(", "self", ".", "chord_check", ")", "*", "len", "(", "chord_index", ")", ":", "\n", "            ", "return", "x", "\n", "", "y", "=", "(", "x", "+", "scalar", ")", "%", "12", "+", "(", "x", "//", "12", ")", "*", "12", "\n", "return", "y", "\n", "", "def", "isChordEqual", "(", "self", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.isChordEqual": [[28, 30], ["len", "set", "set"], "methods", ["None"], ["", "def", "isChordEqual", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "len", "(", "set", "(", "x", ")", "-", "set", "(", "y", ")", ")", "\n", "", "def", "index2name", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.index2name": [[30, 39], ["len", "len"], "methods", ["None"], ["", "def", "index2name", "(", "self", ",", "x", ")", ":", "\n", "        ", "check_p", "=", "x", "//", "12", "\n", "index_p", "=", "x", "%", "12", "\n", "total", "=", "len", "(", "self", ".", "chord_check", ")", "*", "len", "(", "chord_index", ")", "\n", "if", "x", "==", "total", ":", "\n", "            ", "return", "\"NC\"", "\n", "", "if", "x", ">", "total", "or", "x", "<", "0", ":", "\n", "            ", "return", "\"NC\"", "\n", "", "return", "chord_index", "[", "index_p", "]", "+", "self", ".", "chord_check", "[", "check_p", "]", "[", "1", "]", "\n", "", "def", "name2index", "(", "self", ",", "name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.name2index": [[39, 50], ["range", "len", "range", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "name2index", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "chord_check", ")", "*", "len", "(", "chord_index", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "chord_check", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "chord_index", ")", ")", ":", "\n", "                ", "chord_name", "=", "chord_index", "[", "j", "]", "+", "self", ".", "chord_check", "[", "i", "]", "[", "1", "]", "\n", "if", "name", "==", "chord_name", ":", "\n", "                    ", "return", "i", "*", "12", "+", "j", "\n", "", "if", "name", "==", "\"NC\"", ":", "\n", "                    ", "return", "len", "(", "self", ".", "chord_check", ")", "*", "len", "(", "chord_index", ")", "\n", "", "", "", "return", "len", "(", "self", ".", "chord_check", ")", "*", "len", "(", "chord_index", ")", "\n", "", "def", "name2note", "(", "self", ",", "name", ",", "stage", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.name2note": [[50, 71], ["chord_index.index", "range", "len"], "methods", ["None"], ["", "def", "name2note", "(", "self", ",", "name", ",", "stage", "=", "0", ")", ":", "\n", "        ", "if", "name", "==", "\"NC\"", ":", "\n", "            ", "return", "None", "\n", "", "obe_index", "=", "-", "1", "\n", "obe_check", "=", "-", "1", "# the obeservation of the name", "\n", "for", "i", "in", "chord_index", ":", "\n", "            ", "for", "j", "in", "self", ".", "chord_check", ":", "\n", "                ", "std_chord_name", "=", "i", "+", "j", "[", "1", "]", "\n", "if", "std_chord_name", "==", "name", ":", "\n", "                    ", "obe_index", "=", "i", "\n", "obe_check", "=", "j", "\n", "break", "\n", "", "", "", "if", "obe_index", "==", "-", "1", "and", "obe_check", "==", "-", "1", ":", "\n", "#print(name)", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "re", "=", "obe_check", "[", "0", "]", "[", ":", "]", "\n", "chord_num", "=", "chord_index", ".", "index", "(", "obe_index", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "re", ")", ")", ":", "\n", "                ", "re", "[", "i", "]", "=", "re", "[", "i", "]", "+", "chord_num", "+", "stage", "*", "12", "\n", "", "return", "re", "\n", "", "", "def", "note2name", "(", "self", ",", "notes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.note2name": [[71, 84], ["range", "len", "range", "len", "len", "chordloader.Chord_Loader.isChordEqual"], "methods", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.isChordEqual"], ["", "", "def", "note2name", "(", "self", ",", "notes", ")", ":", "\n", "        ", "re", "=", "None", "\n", "equalnum", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "notes", ")", ")", ":", "\n", "            ", "temp_notes", "=", "notes", "[", ":", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "temp_notes", ")", ")", ":", "\n", "                ", "temp_notes", "[", "j", "]", "=", "(", "temp_notes", "[", "j", "]", "-", "notes", "[", "i", "]", ")", "%", "12", "\n", "", "for", "k", "in", "self", ".", "chord_check", ":", "\n", "                ", "temp_equal", "=", "len", "(", "k", "[", "0", "]", ")", "-", "self", ".", "isChordEqual", "(", "k", "[", "0", "]", ",", "temp_notes", ")", "\n", "if", "temp_equal", ">", "equalnum", ":", "\n", "                    ", "re", "=", "chord_index", "[", "notes", "[", "i", "]", "%", "12", "]", "+", "k", "[", "1", "]", "\n", "equalnum", "=", "temp_equal", "\n", "", "", "", "return", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter_update.expand_chord": [[9, 24], ["numpy.roll", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "int", "int"], "function", ["None"], ["def", "expand_chord", "(", "chord", ",", "shift", ",", "relative", "=", "False", ")", ":", "\n", "# chord = np.copy(chord)", "\n", "    ", "root", "=", "(", "chord", "[", "0", "]", "+", "shift", ")", "%", "12", "\n", "chroma", "=", "np", ".", "roll", "(", "chord", "[", "1", ":", "13", "]", ",", "shift", ")", "\n", "bass", "=", "(", "chord", "[", "13", "]", "+", "shift", ")", "%", "12", "\n", "root_onehot", "=", "np", ".", "zeros", "(", "12", ")", "\n", "root_onehot", "[", "int", "(", "root", ")", "]", "=", "1", "\n", "bass_onehot", "=", "np", ".", "zeros", "(", "12", ")", "\n", "bass_onehot", "[", "int", "(", "bass", ")", "]", "=", "1", "\n", "if", "not", "relative", ":", "\n", "        ", "pass", "\n", "#     chroma = np.roll(chroma, int(root))", "\n", "# print(chroma)", "\n", "# print('----------')", "\n", "", "return", "np", ".", "concatenate", "(", "[", "root_onehot", ",", "chroma", ",", "bass_onehot", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter_update.melody_data2matrix": [[26, 59], ["list", "list.append", "range", "numpy.zeros", "enumerate", "range", "len", "round", "round", "len", "melodySequence.append", "melodySequence.append", "melodySequence.append", "len"], "function", ["None"], ["", "def", "melody_data2matrix", "(", "melody_track", ",", "melody_downbeats", ")", ":", "\n", "    ", "HOLD_PITCH", "=", "128", "\n", "REST_PITCH", "=", "129", "\n", "melody_downbeats", "=", "list", "(", "melody_downbeats", ")", "\n", "melody_downbeats", ".", "append", "(", "melody_downbeats", "[", "-", "1", "]", "+", "(", "melody_downbeats", "[", "-", "1", "]", "-", "melody_downbeats", "[", "-", "2", "]", ")", ")", "\n", "melodySequence", "=", "[", "]", "\n", "anchor", "=", "0", "\n", "note", "=", "melody_track", ".", "notes", "[", "anchor", "]", "\n", "start", "=", "note", ".", "start", "\n", "new_note", "=", "True", "\n", "for", "i", "in", "range", "(", "len", "(", "melody_downbeats", ")", "-", "1", ")", ":", "\n", "        ", "s_curr", "=", "round", "(", "melody_downbeats", "[", "i", "]", "*", "4", ")", "/", "4", "\n", "s_next", "=", "round", "(", "melody_downbeats", "[", "i", "+", "1", "]", "*", "4", ")", "/", "4", "\n", "delta", "=", "(", "s_next", "-", "s_curr", ")", "/", "16", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "while", "note", ".", "end", "<=", "(", "s_curr", "+", "i", "*", "delta", ")", "and", "anchor", "<", "len", "(", "melody_track", ".", "notes", ")", "-", "1", ":", "\n", "                ", "anchor", "+=", "1", "\n", "note", "=", "melody_track", ".", "notes", "[", "anchor", "]", "\n", "start", "=", "note", ".", "start", "\n", "new_note", "=", "True", "\n", "", "if", "s_curr", "+", "i", "*", "delta", "<", "start", "-", "60", "/", "120", "/", "16", ":", "\n", "                ", "melodySequence", ".", "append", "(", "REST_PITCH", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "new_note", ":", "\n", "                    ", "melodySequence", ".", "append", "(", "HOLD_PITCH", ")", "\n", "", "else", ":", "\n", "                    ", "melodySequence", ".", "append", "(", "note", ".", "pitch", ")", "\n", "new_note", "=", "False", "\n", "", "", "", "", "ROLL_SIZE", "=", "130", "\n", "melodyMatrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "melodySequence", ")", ",", "ROLL_SIZE", ")", ")", "\n", "for", "idx", ",", "note", "in", "enumerate", "(", "melodySequence", ")", ":", "\n", "        ", "melodyMatrix", "[", "idx", ",", "note", "]", "=", "1", "\n", "", "return", "melodyMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter_update.melody_matrix2data": [[60, 86], ["onset_or_rest.append", "enumerate", "numpy.argmax", "len", "pretty_midi.Instrument", "range", "range", "pretty_midi.Note", "melody_notes.append", "len", "pretty_midi.instrument_name_to_program"], "function", ["None"], ["", "def", "melody_matrix2data", "(", "melody_matrix", ",", "tempo", "=", "120", ",", "start_time", "=", "0.0", ",", "get_list", "=", "False", ")", ":", "\n", "    ", "ROLL_SIZE", "=", "130", "\n", "HOLD_PITCH", "=", "128", "\n", "REST_PITCH", "=", "129", "\n", "melodyMatrix", "=", "melody_matrix", "[", ":", ",", ":", "ROLL_SIZE", "]", "\n", "melodySequence", "=", "[", "np", ".", "argmax", "(", "melodyMatrix", "[", "i", "]", ")", "for", "i", "in", "range", "(", "melodyMatrix", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "melody_notes", "=", "[", "]", "\n", "minStep", "=", "60", "/", "tempo", "/", "4", "\n", "onset_or_rest", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "melodySequence", ")", ")", "if", "not", "melodySequence", "[", "i", "]", "==", "HOLD_PITCH", "]", "\n", "onset_or_rest", ".", "append", "(", "len", "(", "melodySequence", ")", ")", "\n", "for", "idx", ",", "onset", "in", "enumerate", "(", "onset_or_rest", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "if", "melodySequence", "[", "onset", "]", "==", "REST_PITCH", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "pitch", "=", "melodySequence", "[", "onset", "]", "\n", "start", "=", "onset", "*", "minStep", "\n", "end", "=", "onset_or_rest", "[", "idx", "+", "1", "]", "*", "minStep", "\n", "noteRecon", "=", "pyd", ".", "Note", "(", "velocity", "=", "100", ",", "pitch", "=", "pitch", ",", "start", "=", "start_time", "+", "start", ",", "end", "=", "start_time", "+", "end", ")", "\n", "melody_notes", ".", "append", "(", "noteRecon", ")", "\n", "", "", "if", "get_list", ":", "\n", "        ", "return", "melody_notes", "\n", "", "else", ":", "\n", "        ", "melody", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "melody", ".", "notes", "=", "melody_notes", "\n", "return", "melody", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter_update.chord_data2matrix": [[87, 163], ["list", "list.append", "range", "numpy.array", "len", "copy.copy", "chordsRecord.append", "numpy.mean", "range", "len", "chord_set.append", "numpy.mean", "chordsRecord.append", "len", "round", "round", "chord_set.append", "chord_time[].append", "chord_time[].append", "chord_set.sort", "copy.copy", "chordsRecord.append", "numpy.mean", "chord_set.append", "numpy.mean", "numpy.mean", "abs", "abs", "numpy.mean", "chordsRecord.append", "numpy.mean", "ChordTable.append", "ChordTable.append", "ChordTable.append", "ChordTable.append", "numpy.mean", "numpy.mean", "len", "format_converter_update.expand_chord", "format_converter_update.expand_chord", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.expand_chord", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.expand_chord"], ["", "", "def", "chord_data2matrix", "(", "chord_track", ",", "downbeats", ",", "resolution", "=", "'beat'", ",", "chord_expand", "=", "True", ",", "tolerence", "=", "0.125", ")", ":", "\n", "    ", "\"\"\"applicable to triple chords and seventh chords\"\"\"", "\n", "if", "resolution", "==", "'beat'", ":", "\n", "        ", "num_anchords", "=", "4", "\n", "", "elif", "resolution", "==", "'quater'", ":", "\n", "        ", "num_anchords", "=", "16", "\n", "\n", "", "NC", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", "]", "\n", "last_time", "=", "0", "\n", "chord_set", "=", "[", "]", "\n", "chord_time", "=", "[", "[", "0.0", "]", ",", "[", "0.0", "]", "]", "\n", "chordsRecord", "=", "[", "]", "\n", "for", "note", "in", "chord_track", ".", "notes", ":", "\n", "        ", "if", "len", "(", "chord_set", ")", "==", "0", ":", "\n", "            ", "chord_set", ".", "append", "(", "note", ".", "pitch", ")", "\n", "chord_time", "[", "0", "]", "=", "[", "note", ".", "start", "]", "\n", "chord_time", "[", "1", "]", "=", "[", "note", ".", "end", "]", "\n", "", "else", ":", "\n", "            ", "if", "(", "abs", "(", "note", ".", "start", "-", "np", ".", "mean", "(", "chord_time", "[", "0", "]", ")", ")", "<", "tolerence", ")", "and", "(", "abs", "(", "note", ".", "end", "-", "np", ".", "mean", "(", "chord_time", "[", "1", "]", ")", ")", "<", "tolerence", ")", ":", "\n", "                ", "chord_set", ".", "append", "(", "note", ".", "pitch", ")", "\n", "chord_time", "[", "0", "]", ".", "append", "(", "note", ".", "start", ")", "\n", "chord_time", "[", "1", "]", ".", "append", "(", "note", ".", "end", ")", "\n", "", "else", ":", "\n", "                ", "if", "last_time", "<", "np", ".", "mean", "(", "chord_time", "[", "0", "]", ")", ":", "\n", "                    ", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "last_time", ",", "\"end\"", ":", "np", ".", "mean", "(", "chord_time", "[", "0", "]", ")", ",", "\"chord\"", ":", "NC", "}", ")", "\n", "", "chord_set", ".", "sort", "(", ")", "\n", "chroma", "=", "copy", ".", "copy", "(", "NC", ")", "\n", "for", "idx", "in", "chord_set", ":", "\n", "                    ", "chroma", "[", "idx", "%", "12", "+", "1", "]", "=", "1", "\n", "", "chroma", "[", "0", "]", "=", "chord_set", "[", "0", "]", "%", "12", "\n", "chroma", "[", "-", "1", "]", "=", "0", "\n", "\n", "#concatenate", "\n", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "np", ".", "mean", "(", "chord_time", "[", "0", "]", ")", ",", "\"end\"", ":", "np", ".", "mean", "(", "chord_time", "[", "1", "]", ")", ",", "\"chord\"", ":", "chroma", "}", ")", "\n", "last_time", "=", "np", ".", "mean", "(", "chord_time", "[", "1", "]", ")", "\n", "chord_set", "=", "[", "]", "\n", "chord_set", ".", "append", "(", "note", ".", "pitch", ")", "\n", "chord_time", "[", "0", "]", "=", "[", "note", ".", "start", "]", "\n", "chord_time", "[", "1", "]", "=", "[", "note", ".", "end", "]", "\n", "", "", "", "if", "len", "(", "chord_set", ")", ">", "0", ":", "\n", "        ", "if", "last_time", "<", "np", ".", "mean", "(", "chord_time", "[", "0", "]", ")", ":", "\n", "            ", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "last_time", ",", "\"end\"", ":", "np", ".", "mean", "(", "chord_time", "[", "0", "]", ")", ",", "\"chord\"", ":", "NC", "}", ")", "\n", "#chord_set.sort()", "\n", "", "chroma", "=", "copy", ".", "copy", "(", "NC", ")", "\n", "for", "idx", "in", "chord_set", ":", "\n", "            ", "chroma", "[", "idx", "%", "12", "+", "1", "]", "=", "1", "\n", "", "chroma", "[", "0", "]", "=", "chord_set", "[", "0", "]", "%", "12", "\n", "chroma", "[", "-", "1", "]", "=", "0", "\n", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "np", ".", "mean", "(", "chord_time", "[", "0", "]", ")", ",", "\"end\"", ":", "np", ".", "mean", "(", "chord_time", "[", "1", "]", ")", ",", "\"chord\"", ":", "chroma", "}", ")", "\n", "last_time", "=", "np", ".", "mean", "(", "chord_time", "[", "1", "]", ")", "\n", "", "ChordTable", "=", "[", "]", "\n", "anchor", "=", "0", "\n", "chord", "=", "chordsRecord", "[", "anchor", "]", "\n", "start", "=", "chord", "[", "'start'", "]", "\n", "downbeats", "=", "list", "(", "downbeats", ")", "\n", "downbeats", ".", "append", "(", "downbeats", "[", "-", "1", "]", "+", "(", "downbeats", "[", "-", "1", "]", "-", "downbeats", "[", "-", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "downbeats", ")", "-", "1", ")", ":", "\n", "        ", "s_curr", "=", "round", "(", "downbeats", "[", "i", "]", "*", "4", ")", "/", "4", "\n", "s_next", "=", "round", "(", "downbeats", "[", "i", "+", "1", "]", "*", "4", ")", "/", "4", "\n", "delta", "=", "(", "s_next", "-", "s_curr", ")", "/", "num_anchords", "\n", "for", "i", "in", "range", "(", "num_anchords", ")", ":", "# one-beat resolution", "\n", "            ", "while", "chord", "[", "'end'", "]", "<=", "(", "s_curr", "+", "i", "*", "delta", ")", "and", "anchor", "<", "len", "(", "chordsRecord", ")", "-", "1", ":", "\n", "                ", "anchor", "+=", "1", "\n", "chord", "=", "chordsRecord", "[", "anchor", "]", "\n", "start", "=", "chord", "[", "'start'", "]", "\n", "", "if", "s_curr", "+", "i", "*", "delta", "<", "start", ":", "\n", "                ", "if", "chord_expand", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "expand_chord", "(", "chord", "=", "NC", ",", "shift", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "NC", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "chord_expand", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "expand_chord", "(", "chord", "=", "chord", "[", "'chord'", "]", ",", "shift", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "chord", "[", "'chord'", "]", ")", "\n", "", "", "", "", "return", "np", ".", "array", "(", "ChordTable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter_update.chord_matrix2data": [[164, 207], ["range", "onset_or_rest.append", "enumerate", "chordSequence.append", "len", "enumerate", "pretty_midi.Instrument", "range", "int", "len", "len", "pretty_midi.Note", "chord_notes.append", "pretty_midi.instrument_name_to_program", "len", "len", "str", "len", "int"], "function", ["None"], ["", "def", "chord_matrix2data", "(", "chordMatrix", ",", "tempo", "=", "120", ",", "start_time", "=", "0.0", ",", "get_list", "=", "False", ")", ":", "\n", "    ", "CHORD_SIZE", "=", "12", "\n", "#cl = Chord_Loader(\"Seven\")", "\n", "if", "chordMatrix", ".", "shape", "[", "-", "1", "]", "==", "CHORD_SIZE", ":", "\n", "        ", "pass", "\n", "", "elif", "chordMatrix", ".", "shape", "[", "-", "1", "]", "==", "14", ":", "\n", "        ", "if", "len", "(", "chordMatrix", ".", "shape", ")", "==", "2", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", "1", ":", "-", "1", "]", "\n", "", "elif", "len", "(", "chordMatrix", ".", "shape", ")", "==", "3", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", ":", ",", "1", ":", "-", "1", "]", "\n", "", "", "elif", "chordMatrix", ".", "shape", "[", "-", "1", "]", "==", "36", ":", "\n", "        ", "if", "len", "(", "chordMatrix", ".", "shape", ")", "==", "2", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", "12", ":", "-", "12", "]", "\n", "", "elif", "len", "(", "chordMatrix", ".", "shape", ")", "==", "3", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", ":", ",", "12", ":", "-", "12", "]", "\n", "", "", "chordSequence", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "chordMatrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "chordSequence", ".", "append", "(", "''", ".", "join", "(", "[", "str", "(", "int", "(", "j", ")", ")", "for", "j", "in", "chordMatrix", "[", "i", "]", "]", ")", ")", "\n", "", "minStep", "=", "60", "/", "tempo", "/", "4", "#16th quantization", "\n", "chord_notes", "=", "[", "]", "\n", "onset_or_rest", "=", "[", "0", "]", "\n", "onset_or_rest_", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "len", "(", "chordSequence", ")", ")", "if", "chordSequence", "[", "i", "]", "!=", "chordSequence", "[", "i", "-", "1", "]", "]", "\n", "onset_or_rest", "=", "onset_or_rest", "+", "onset_or_rest_", "\n", "onset_or_rest", ".", "append", "(", "len", "(", "chordSequence", ")", ")", "\n", "for", "idx", ",", "onset", "in", "enumerate", "(", "onset_or_rest", "[", ":", "-", "1", "]", ")", ":", "\n", "#if chordSequence[onset] == '000000000000':", "\n", "#    continue", "\n", "#else:", "\n", "        ", "chordset", "=", "[", "int", "(", "i", ")", "for", "i", "in", "chordSequence", "[", "onset", "]", "]", "\n", "#if chordset == None:", "\n", "#    continue", "\n", "start", "=", "onset", "*", "minStep", "\n", "end", "=", "onset_or_rest", "[", "idx", "+", "1", "]", "*", "minStep", "\n", "for", "note", ",", "value", "in", "enumerate", "(", "chordset", ")", ":", "\n", "            ", "if", "value", "==", "1", ":", "\n", "                ", "noteRecon", "=", "pyd", ".", "Note", "(", "velocity", "=", "100", ",", "pitch", "=", "note", "+", "4", "*", "12", ",", "start", "=", "start_time", "+", "start", ",", "end", "=", "start_time", "+", "end", ")", "\n", "chord_notes", ".", "append", "(", "noteRecon", ")", "\n", "", "", "", "if", "get_list", ":", "\n", "        ", "return", "chord_notes", "\n", "", "else", ":", "\n", "        ", "chord", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "chord", ".", "notes", "=", "chord_notes", "\n", "return", "chord", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter_update.accompany_data2matrix": [[208, 230], ["list", "list.append", "range", "numpy.array", "numpy.zeros", "range", "numpy.argmin", "int", "len", "round", "round", "np.array.append", "delta_set.append", "numpy.abs", "round"], "function", ["None"], ["", "", "def", "accompany_data2matrix", "(", "accompany_track", ",", "downbeats", ")", ":", "\n", "    ", "time_stamp_sixteenth_reso", "=", "[", "]", "\n", "delta_set", "=", "[", "]", "\n", "downbeats", "=", "list", "(", "downbeats", ")", "\n", "downbeats", ".", "append", "(", "downbeats", "[", "-", "1", "]", "+", "(", "downbeats", "[", "-", "1", "]", "-", "downbeats", "[", "-", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "downbeats", ")", "-", "1", ")", ":", "\n", "        ", "s_curr", "=", "round", "(", "downbeats", "[", "i", "]", "*", "16", ")", "/", "16", "\n", "s_next", "=", "round", "(", "downbeats", "[", "i", "+", "1", "]", "*", "16", ")", "/", "16", "\n", "delta", "=", "(", "s_next", "-", "s_curr", ")", "/", "16", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "time_stamp_sixteenth_reso", ".", "append", "(", "s_curr", "+", "delta", "*", "i", ")", "\n", "delta_set", ".", "append", "(", "delta", ")", "\n", "", "", "time_stamp_sixteenth_reso", "=", "np", ".", "array", "(", "time_stamp_sixteenth_reso", ")", "\n", "\n", "pr_matrix", "=", "np", ".", "zeros", "(", "(", "time_stamp_sixteenth_reso", ".", "shape", "[", "0", "]", ",", "128", ")", ")", "\n", "for", "note", "in", "accompany_track", ".", "notes", ":", "\n", "        ", "onset", "=", "note", ".", "start", "\n", "t", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "time_stamp_sixteenth_reso", "-", "onset", ")", ")", "\n", "p", "=", "note", ".", "pitch", "\n", "duration", "=", "int", "(", "round", "(", "(", "note", ".", "end", "-", "onset", ")", "/", "delta_set", "[", "t", "]", ")", ")", "\n", "pr_matrix", "[", "t", ",", "p", "]", "=", "duration", "\n", "", "return", "pr_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter_update.accompany_matrix2data": [[231, 246], ["range", "range", "pretty_midi.Instrument", "notes.append", "pretty_midi.instrument_name_to_program", "pretty_midi.Note", "int"], "function", ["None"], ["", "def", "accompany_matrix2data", "(", "pr_matrix", ",", "tempo", "=", "120", ",", "start_time", "=", "0.0", ",", "get_list", "=", "False", ")", ":", "\n", "    ", "alpha", "=", "0.25", "*", "60", "/", "tempo", "\n", "notes", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "pr_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "p", "in", "range", "(", "128", ")", ":", "\n", "            ", "if", "pr_matrix", "[", "t", ",", "p", "]", ">=", "1", ":", "\n", "                ", "s", "=", "alpha", "*", "t", "+", "start_time", "\n", "e", "=", "alpha", "*", "(", "t", "+", "pr_matrix", "[", "t", ",", "p", "]", ")", "+", "start_time", "\n", "notes", ".", "append", "(", "pyd", ".", "Note", "(", "100", ",", "int", "(", "p", ")", ",", "s", ",", "e", ")", ")", "\n", "", "", "", "if", "get_list", ":", "\n", "        ", "return", "notes", "\n", "", "else", ":", "\n", "        ", "acc", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "acc", ".", "notes", "=", "notes", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.split_phrases": [[11, 24], ["segmentation[].isalpha", "phrases.append", "lengths.append", "sum", "range", "int", "len", "segmentation[].isalpha"], "function", ["None"], ["def", "split_phrases", "(", "segmentation", ")", ":", "\n", "    ", "phrases", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "current", "=", "0", "\n", "while", "segmentation", "[", "current", "]", "!=", "'\\n'", ":", "\n", "        ", "if", "segmentation", "[", "current", "]", ".", "isalpha", "(", ")", ":", "\n", "            ", "j", "=", "1", "\n", "while", "not", "(", "segmentation", "[", "current", "+", "j", "]", ".", "isalpha", "(", ")", "or", "segmentation", "[", "current", "+", "j", "]", "==", "'\\n'", ")", ":", "\n", "                ", "j", "+=", "1", "\n", "", "phrases", ".", "append", "(", "segmentation", "[", "current", "]", ")", "\n", "lengths", ".", "append", "(", "int", "(", "segmentation", "[", "current", "+", "1", ":", "current", "+", "j", "]", ")", ")", "\n", "current", "+=", "j", "\n", "", "", "return", "[", "(", "phrases", "[", "i", "]", ",", "lengths", "[", "i", "]", ",", "sum", "(", "lengths", "[", ":", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "phrases", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_ec2_melody": [[25, 45], ["numpy.zeros", "range", "range", "numpy.sum"], "function", ["None"], ["", "def", "get_ec2_melody", "(", "pr_matrix", ",", "start_beat", ",", "end_beat", ")", ":", "\n", "    ", "hold_pitch", "=", "128", "\n", "rest_pitch", "=", "129", "\n", "piano_roll", "=", "np", ".", "zeros", "(", "(", "(", "end_beat", "-", "start_beat", ")", "*", "4", ",", "130", ")", ")", "\n", "#piano_roll[:, rest_pitch] = 1.", "\n", "#chroma = np.zeros(((end_beat-start_beat)*4, 12))", "\n", "for", "item", "in", "pr_matrix", ":", "#take one role", "\n", "        ", "if", "item", "[", "0", "]", ">=", "start_beat", "and", "item", "[", "0", "]", "<", "end_beat", ":", "\n", "            ", "t", "=", "(", "item", "[", "0", "]", "-", "start_beat", ")", "*", "4", "+", "item", "[", "1", "]", "\n", "pitch", "=", "item", "[", "-", "2", "]", "\n", "duration", "=", "(", "item", "[", "3", "]", "-", "item", "[", "0", "]", ")", "*", "4", "+", "(", "item", "[", "4", "]", "-", "item", "[", "1", "]", ")", "\n", "piano_roll", "[", "t", ",", "pitch", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "duration", ")", ":", "\n", "                        ", "if", "t", "+", "i", ">=", "piano_roll", ".", "shape", "[", "0", "]", ":", "\n", "                            ", "break", "\n", "", "piano_roll", "[", "t", "+", "i", ",", "hold_pitch", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "piano_roll", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "np", ".", "sum", "(", "piano_roll", "[", "i", "]", ")", "==", "0", ":", "\n", "                    ", "piano_roll", "[", "i", ",", "rest_pitch", "]", "=", "1", "\n", "", "", "", "", "return", "piano_roll", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_prMatrix": [[46, 57], ["numpy.zeros"], "function", ["None"], ["", "def", "get_prMatrix", "(", "matrix", ",", "start_beat", ",", "end_beat", ")", ":", "\n", "    ", "pr_matrix", "=", "np", ".", "zeros", "(", "(", "(", "end_beat", "-", "start_beat", ")", "*", "4", ",", "128", ")", ")", "\n", "for", "item", "in", "matrix", ":", "\n", "        ", "if", "item", "[", "0", "]", ">=", "start_beat", "and", "item", "[", "0", "]", "<", "end_beat", ":", "\n", "            ", "t", "=", "(", "item", "[", "0", "]", "-", "start_beat", ")", "*", "4", "+", "item", "[", "1", "]", "\n", "pitch", "=", "item", "[", "-", "2", "]", "\n", "duration", "=", "(", "item", "[", "3", "]", "-", "item", "[", "0", "]", ")", "*", "4", "+", "(", "item", "[", "4", "]", "-", "item", "[", "1", "]", ")", "\n", "pr_matrix", "[", "t", ",", "pitch", "]", "=", "duration", "\n", "#if np.sum(pr_matrix) == 0:", "\n", "#print(start_beat, end_beat)", "\n", "", "", "return", "pr_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_chord": [[58, 71], ["numpy.zeros", "max", "min", "print", "print"], "function", ["None"], ["", "def", "get_chord", "(", "song_id", ",", "line", ",", "matrix", ",", "start_beat", ",", "end_beat", ")", ":", "\n", "    ", "pr_chord", "=", "np", ".", "zeros", "(", "(", "end_beat", "-", "start_beat", ",", "14", ")", ")", "\n", "pr_chord", "[", ":", ",", "0", "]", "=", "-", "1", "\n", "pr_chord", "[", ":", ",", "-", "1", "]", "=", "-", "1", "\n", "start", "=", "max", "(", "start_beat", ",", "0", ")", "\n", "end", "=", "min", "(", "end_beat", ",", "matrix", ".", "shape", "[", "0", "]", ")", "\n", "if", "start_beat", "<", "0", "or", "end_beat", ">", "matrix", ".", "shape", "[", "0", "]", ":", "\n", "        ", "print", "(", "song_id", ",", "start_beat", ",", "end_beat", ",", "matrix", ".", "shape", "[", "0", "]", ")", "\n", "", "try", ":", "\n", "        ", "pr_chord", "[", "0", "+", "start", "-", "start_beat", ":", "pr_chord", ".", "shape", "[", "0", "]", "+", "end", "-", "end_beat", "]", "=", "matrix", "[", "start", ":", "end", ",", ":", "]", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "song_id", ",", "start_beat", ",", "end_beat", ")", "\n", "", "return", "pr_chord", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.render": [[72, 111], ["numpy.load", "numpy.empty", "numpy.empty", "build_phrase_data.get_ec2_melody", "build_phrase_data.get_prMatrix", "build_phrase_data.get_prMatrix", "build_phrase_data.get_chord", "format_converter.accompany_matrix2data", "pretty_midi.PrettyMIDI", "pyd.PrettyMIDI.instruments.append", "pyd.PrettyMIDI.write", "print", "melody_record.append", "pr_matrix_mix.append", "chord_record.append", "pr_matrix_mix.transpose", "os.path.exists", "os.makedirs", "os.path.join", "str().zfill", "numpy.sum", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_ec2_melody", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_prMatrix", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_prMatrix", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_chord", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.accompany_matrix2data"], ["", "def", "render", "(", "song_id", ",", "line", ",", "generate_midi", "=", "False", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "'./data files/POP909 4bin quntization/POP09-PIANOROLL-4-bin-quantization/'", "+", "str", "(", "song_id", ")", ".", "zfill", "(", "3", ")", "+", "'.npz'", ")", "\n", "chord", "=", "data", "[", "'chord'", "]", "\n", "melody", "=", "data", "[", "'melody'", "]", "\n", "bridge", "=", "data", "[", "'bridge'", "]", "\n", "piano", "=", "data", "[", "'piano'", "]", "\n", "ec2vae_ensemble", "=", "np", ".", "empty", "(", "(", "0", ",", "142", ")", ")", "\n", "melody_record", "=", "[", "]", "\n", "pr_matrix_mix", "=", "[", "]", "#np.empty((0, 128))", "\n", "chord_record", "=", "[", "]", "\n", "chord_ensemble", "=", "np", ".", "empty", "(", "(", "0", ",", "14", ")", ")", "\n", "for", "item", "in", "line", ":", "\n", "        ", "start", "=", "item", "[", "1", "]", "[", "0", "]", "\n", "end", "=", "item", "[", "1", "]", "[", "1", "]", "\n", "if", "start", "==", "end", ":", "\n", "            ", "print", "(", "song_id", ",", "'empty phrase'", ")", "\n", "continue", "\n", "#if item[0].isupper():", "\n", "#pr_melody = get_prMatrix(melody, start, end)", "\n", "", "ec2_melody", "=", "get_ec2_melody", "(", "melody", ",", "start", ",", "end", ")", "\n", "pr_bridge", "=", "get_prMatrix", "(", "bridge", ",", "start", ",", "end", ")", "\n", "pr_acc", "=", "get_prMatrix", "(", "piano", ",", "start", ",", "end", ")", "\n", "pr_matrix", "=", "pr_acc", "+", "pr_bridge", "#+ pr_melody", "\n", "chord_phrase", "=", "get_chord", "(", "song_id", ",", "line", ",", "chord", ",", "start", ",", "end", ")", "\n", "#print(pr_melody.shape, pr_matrix.shape, chord_phrase.shape)", "\n", "if", "not", "np", ".", "sum", "(", "pr_matrix", ")", "==", "0", ":", "\n", "            ", "melody_record", ".", "append", "(", "ec2_melody", ")", "\n", "pr_matrix_mix", ".", "append", "(", "pr_matrix", ")", "\n", "chord_record", ".", "append", "(", "chord_phrase", ")", "\n", "\n", "", "", "if", "generate_midi", ":", "\n", "        ", "recon_poly", "=", "cvt", ".", "accompany_matrix2data", "(", "pr_matrix_mix", ".", "transpose", "(", ")", ",", "80", ")", "\n", "midi", "=", "pyd", ".", "PrettyMIDI", "(", ")", "\n", "midi", ".", "instruments", ".", "append", "(", "recon_poly", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./data files/POP909 4bin quntization/POP-909_recon'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./data files/POP909 4bin quntization/POP-909_recon'", ")", "\n", "", "midi", ".", "write", "(", "os", ".", "path", ".", "join", "(", "'./data files/POP909 4bin quntization/POP-909_recon/'", ",", "str", "(", "song_id", ")", "+", "'_accompaniment.mid'", ")", ")", "\n", "\n", "", "return", "melody_record", ",", "pr_matrix_mix", ",", "chord_record", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.build_phrase_dataset": [[112, 164], ["pandas.read_excel", "tqdm.tqdm", "numpy.savez_compressed", "range", "build_phrase_data.split_phrases", "range", "range", "numpy.load", "build_phrase_data.render", "full_melody.append", "full_acc.append", "full_chord.append", "len", "[].isupper", "len", "[].isupper", "open", "[].split", "int", "int", "phrases_count_by_beat.append", "int", "int", "open", "print", "sum", "os.path.join", "os.path.join", "f.readlines", "str().zfill", "str().zfill", "f.readlines", "str().zfill", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.split_phrases", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.render"], ["", "def", "build_phrase_dataset", "(", ")", ":", "\n", "    ", "segmentation_root", "=", "'./data files/POP909 hierarchical-structure-analysis'", "\n", "df", "=", "pd", ".", "read_excel", "(", "'./data files/POP909 4bin quntization//index.xlsx'", ")", "\n", "full_melody", "=", "[", "]", "\n", "full_acc", "=", "[", "]", "\n", "full_chord", "=", "[", "]", "\n", "for", "song_id", "in", "tqdm", "(", "range", "(", "1", ",", "910", ")", ")", ":", "\n", "#print(song_id)", "\n", "        ", "meta_data", "=", "df", "[", "df", ".", "song_id", "==", "song_id", "]", "\n", "num_beats", "=", "meta_data", ".", "num_beats_per_measure", ".", "values", "[", "0", "]", "\n", "num_quavers", "=", "meta_data", ".", "num_quavers_per_beat", ".", "values", "[", "0", "]", "\n", "if", "int", "(", "num_beats", ")", "==", "3", "or", "int", "(", "num_quavers", ")", "==", "3", ":", "\n", "#print('triple_beat')", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "segmentation_root", ",", "str", "(", "song_id", ")", ".", "zfill", "(", "3", ")", "+", "'/segsections.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "info", "=", "f", ".", "readlines", "(", ")", "[", "0", "]", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "song_id", ")", "\n", "continue", "\n", "", "reference", "=", "split_phrases", "(", "info", ")", "\n", "for", "idx_m", "in", "range", "(", "len", "(", "reference", ")", ")", ":", "\n", "            ", "if", "reference", "[", "idx_m", "]", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "break", "# skip intro part", "\n", "", "", "reference", "=", "[", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ",", "item", "[", "2", "]", "-", "reference", "[", "idx_m", "]", "[", "2", "]", ")", "for", "item", "in", "reference", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "reference", ")", ")", ":", "\n", "            ", "if", "reference", "[", "i", "]", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "melody_start_measure", "=", "sum", "(", "[", "item", "[", "1", "]", "for", "item", "in", "reference", "[", ":", "i", "]", "]", ")", "\n", "break", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "segmentation_root", ",", "str", "(", "song_id", ")", ".", "zfill", "(", "3", ")", "+", "'/melody.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "intro_length", "=", "f", ".", "readlines", "(", ")", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "", "if", "int", "(", "intro_length", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "melody_start_note", "=", "int", "(", "intro_length", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "melody_start_note", "=", "0", "\n", "", "beat_shift", "=", "melody_start_measure", "*", "4", "-", "melody_start_note", "//", "4", "\n", "data", "=", "np", ".", "load", "(", "'./data files/POP909 4bin quntization/POP09-PIANOROLL-4-bin-quantization/'", "+", "str", "(", "song_id", ")", ".", "zfill", "(", "3", ")", "+", "'.npz'", ")", "\n", "melody", "=", "data", "[", "'melody'", "]", "\n", "melody_start_beat", "=", "melody", "[", "0", ",", "0", "]", "+", "beat_shift", "\n", "phrases_count_by_beat", "=", "[", "]", "\n", "for", "phrase", "in", "reference", ":", "\n", "            ", "label", "=", "phrase", "[", "0", "]", "\n", "start", "=", "phrase", "[", "2", "]", "*", "4", "+", "melody_start_beat", "\n", "end", "=", "start", "+", "phrase", "[", "1", "]", "*", "4", "\n", "phrases_count_by_beat", ".", "append", "(", "[", "label", ",", "(", "start", ",", "end", ")", "]", ")", "\n", "#return phrases_count_by_beat", "\n", "\n", "", "melody", ",", "acc", ",", "chord", "=", "render", "(", "song_id", ",", "phrases_count_by_beat", ",", "generate_midi", "=", "False", ")", "\n", "full_melody", ".", "append", "(", "melody", ")", "\n", "full_acc", ".", "append", "(", "acc", ")", "\n", "full_chord", ".", "append", "(", "chord", ")", "\n", "", "np", ".", "savez_compressed", "(", "'./data files/phrase_data_.npz'", ",", "melody", "=", "full_melody", ",", "acc", "=", "full_acc", ",", "chord", "=", "full_chord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.add_phrases": [[165, 188], ["leadsheet.get_downbeats", "accompany.get_downbeats", "format_converter.melody_data2matrix", "format_converter.chord_data2matrix", "format_converter.accompany_data2matrix", "int", "name.isupper", "int", "int", "int", "melodys.append", "chords.append", "accs.append"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.melody_data2matrix", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.chord_data2matrix", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.accompany_data2matrix"], ["", "def", "add_phrases", "(", "leadsheet", ",", "accompany", ",", "phrase_sections", ",", "jump", "=", "0", ")", ":", "\n", "    ", "melody", ",", "chord", "=", "leadsheet", ".", "instruments", "[", "0", "]", ",", "leadsheet", ".", "instruments", "[", "1", "]", "\n", "downbeats", "=", "leadsheet", ".", "get_downbeats", "(", ")", "\n", "melody_matrix", "=", "cvt", ".", "melody_data2matrix", "(", "melody", ",", "downbeats", ")", "[", "int", "(", "jump", "*", "16", ")", ":", "]", "\n", "chord_table", "=", "cvt", ".", "chord_data2matrix", "(", "chord", ",", "downbeats", ",", "resolution", "=", "'beat'", ",", "chord_expand", "=", "False", ")", "[", "int", "(", "jump", "*", "4", ")", ":", "]", "\n", "downbeats", "=", "accompany", ".", "get_downbeats", "(", ")", "\n", "accompany_matrix", "=", "cvt", ".", "accompany_data2matrix", "(", "accompany", ".", "instruments", "[", "1", "]", ",", "downbeats", ")", "[", "int", "(", "jump", "*", "16", ")", ":", "]", "\n", "count", "=", "0", "\n", "melodys", "=", "[", "]", "\n", "chords", "=", "[", "]", "\n", "accs", "=", "[", "]", "\n", "for", "label", "in", "phrase_sections", ":", "\n", "        ", "name", "=", "label", "[", "0", "]", "\n", "length", "=", "int", "(", "label", "[", "1", ":", "]", ")", "\n", "if", "name", ".", "isupper", "(", ")", ":", "\n", "            ", "melody_cut", "=", "melody_matrix", "[", "count", "*", "16", ":", "(", "count", "+", "length", ")", "*", "16", ",", ":", "]", "\n", "chord_cut", "=", "chord_table", "[", "count", "*", "4", ":", "(", "count", "+", "length", ")", "*", "4", ",", ":", "]", "\n", "acc_cut", "=", "accompany_matrix", "[", "count", "*", "16", ":", "(", "count", "+", "length", ")", "*", "16", ",", ":", "]", "\n", "melodys", ".", "append", "(", "melody_cut", ")", "\n", "chords", ".", "append", "(", "chord_cut", ")", "\n", "accs", ".", "append", "(", "acc_cut", ")", "\n", "", "count", "+=", "length", "\n", "", "return", "melodys", ",", "chords", ",", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.build_song_dataset": [[190, 253], ["pandas.read_excel", "tqdm.tqdm", "numpy.savez_compressed", "range", "build_phrase_data.split_phrases", "range", "range", "numpy.load", "build_phrase_data.get_ec2_melody", "build_phrase_data.get_prMatrix", "build_phrase_data.get_prMatrix", "build_phrase_data.get_chord", "full_melody.append", "full_acc.append", "full_chord.append", "len", "[].isupper", "len", "[].isupper", "open", "[].split", "int", "int", "numpy.random.rand", "format_converter.accompany_matrix2data", "pretty_midi.PrettyMIDI", "pyd.PrettyMIDI.instruments.append", "pyd.PrettyMIDI.write", "int", "int", "open", "print", "sum", "os.path.join", "pr_matrix.transpose", "os.path.join", "os.path.join", "f.readlines", "str().zfill", "str().zfill", "f.readlines", "str().zfill", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.split_phrases", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_ec2_melody", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_prMatrix", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_prMatrix", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.build_phrase_data.get_chord", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.accompany_matrix2data"], ["", "def", "build_song_dataset", "(", ")", ":", "\n", "    ", "segmentation_root", "=", "'./data files/POP909 hierarchical-structure-analysis'", "\n", "df", "=", "pd", ".", "read_excel", "(", "'./data files/POP909 4bin quntization//index.xlsx'", ")", "\n", "full_melody", "=", "[", "]", "\n", "full_acc", "=", "[", "]", "\n", "full_chord", "=", "[", "]", "\n", "for", "song_id", "in", "tqdm", "(", "range", "(", "1", ",", "910", ")", ")", ":", "\n", "#print(song_id)", "\n", "        ", "meta_data", "=", "df", "[", "df", ".", "song_id", "==", "song_id", "]", "\n", "num_beats", "=", "meta_data", ".", "num_beats_per_measure", ".", "values", "[", "0", "]", "\n", "num_quavers", "=", "meta_data", ".", "num_quavers_per_beat", ".", "values", "[", "0", "]", "\n", "if", "int", "(", "num_beats", ")", "==", "3", "or", "int", "(", "num_quavers", ")", "==", "3", ":", "\n", "#print('triple_beat')", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "segmentation_root", ",", "str", "(", "song_id", ")", ".", "zfill", "(", "3", ")", "+", "'/segsections.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "info", "=", "f", ".", "readlines", "(", ")", "[", "0", "]", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "song_id", ")", "\n", "continue", "\n", "", "reference", "=", "split_phrases", "(", "info", ")", "\n", "for", "idx_m", "in", "range", "(", "len", "(", "reference", ")", ")", ":", "\n", "            ", "if", "reference", "[", "idx_m", "]", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "break", "# skip intro part", "\n", "", "", "reference", "=", "[", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ",", "item", "[", "2", "]", "-", "reference", "[", "idx_m", "]", "[", "2", "]", ")", "for", "item", "in", "reference", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "reference", ")", ")", ":", "\n", "            ", "if", "reference", "[", "i", "]", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "                ", "melody_start_measure", "=", "sum", "(", "[", "item", "[", "1", "]", "for", "item", "in", "reference", "[", ":", "i", "]", "]", ")", "\n", "break", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "segmentation_root", ",", "str", "(", "song_id", ")", ".", "zfill", "(", "3", ")", "+", "'/melody.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "intro_length", "=", "f", ".", "readlines", "(", ")", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "", "if", "int", "(", "intro_length", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "melody_start_note", "=", "int", "(", "intro_length", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "melody_start_note", "=", "0", "\n", "", "beat_shift", "=", "melody_start_measure", "*", "4", "-", "melody_start_note", "//", "4", "\n", "data", "=", "np", ".", "load", "(", "'./data files/POP909 4bin quntization/POP09-PIANOROLL-4-bin-quantization/'", "+", "str", "(", "song_id", ")", ".", "zfill", "(", "3", ")", "+", "'.npz'", ")", "\n", "melody", "=", "data", "[", "'melody'", "]", "\n", "chord", "=", "data", "[", "'chord'", "]", "\n", "bridge", "=", "data", "[", "'bridge'", "]", "\n", "piano", "=", "data", "[", "'piano'", "]", "\n", "melody_start_beat", "=", "melody", "[", "0", ",", "0", "]", "+", "beat_shift", "\n", "phrases_count_by_beat", "=", "[", "]", "\n", "\n", "start", "=", "reference", "[", "0", "]", "[", "2", "]", "*", "4", "+", "melody_start_beat", "\n", "end", "=", "reference", "[", "-", "1", "]", "[", "2", "]", "*", "4", "+", "melody_start_beat", "+", "reference", "[", "-", "1", "]", "[", "1", "]", "*", "4", "\n", "\n", "ec2_melody", "=", "get_ec2_melody", "(", "melody", ",", "start", ",", "end", ")", "\n", "pr_bridge", "=", "get_prMatrix", "(", "bridge", ",", "start", ",", "end", ")", "\n", "pr_acc", "=", "get_prMatrix", "(", "piano", ",", "start", ",", "end", ")", "\n", "pr_matrix", "=", "pr_acc", "+", "pr_bridge", "\n", "chord_track", "=", "get_chord", "(", "song_id", ",", "1", ",", "chord", ",", "start", ",", "end", ")", "\n", "\n", "full_melody", ".", "append", "(", "ec2_melody", ")", "\n", "full_acc", ".", "append", "(", "pr_matrix", ")", "\n", "full_chord", ".", "append", "(", "chord_track", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.9", ":", "\n", "            ", "recon_poly", "=", "cvt", ".", "accompany_matrix2data", "(", "pr_matrix", ".", "transpose", "(", ")", ",", "80", ")", "\n", "midi", "=", "pyd", ".", "PrettyMIDI", "(", ")", "\n", "midi", ".", "instruments", ".", "append", "(", "recon_poly", ")", "\n", "midi", ".", "write", "(", "os", ".", "path", ".", "join", "(", "'./test_midi.mid'", ")", ")", "\n", "", "", "np", ".", "savez_compressed", "(", "'./data files/song_data.npz'", ",", "melody", "=", "full_melody", ",", "acc", "=", "full_acc", ",", "chord", "=", "full_chord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.melodySplit": [[23, 37], ["numpy.empty", "range", "numpy.concatenate"], "function", ["None"], ["def", "melodySplit", "(", "matrix", ",", "WINDOWSIZE", "=", "32", ",", "HOPSIZE", "=", "16", ",", "VECTORSIZE", "=", "142", ")", ":", "\n", "    ", "start_downbeat", "=", "0", "\n", "end_downbeat", "=", "matrix", ".", "shape", "[", "0", "]", "//", "16", "\n", "assert", "(", "end_downbeat", "-", "start_downbeat", ">=", "2", ")", "\n", "splittedMatrix", "=", "np", ".", "empty", "(", "(", "0", ",", "WINDOWSIZE", ",", "VECTORSIZE", ")", ")", "\n", "#print(matrix.shape[0])", "\n", "#print(matrix.shape[0])", "\n", "for", "idx_T", "in", "range", "(", "start_downbeat", "*", "16", ",", "(", "end_downbeat", "-", "(", "WINDOWSIZE", "//", "16", "-", "1", ")", ")", "*", "16", ",", "HOPSIZE", ")", ":", "\n", "        ", "if", "idx_T", ">", "matrix", ".", "shape", "[", "0", "]", "-", "32", ":", "\n", "            ", "break", "\n", "", "sample", "=", "matrix", "[", "idx_T", ":", "idx_T", "+", "WINDOWSIZE", ",", ":", "VECTORSIZE", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "#print(sample.shape)", "\n", "splittedMatrix", "=", "np", ".", "concatenate", "(", "(", "splittedMatrix", ",", "sample", ")", ",", "axis", "=", "0", ")", "\n", "", "return", "splittedMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.chordSplit": [[38, 49], ["numpy.empty", "range", "numpy.concatenate"], "function", ["None"], ["", "def", "chordSplit", "(", "chord", ",", "WINDOWSIZE", "=", "8", ",", "HOPSIZE", "=", "8", ")", ":", "\n", "    ", "start_downbeat", "=", "0", "\n", "end_downbeat", "=", "chord", ".", "shape", "[", "0", "]", "//", "4", "\n", "splittedChord", "=", "np", ".", "empty", "(", "(", "0", ",", "WINDOWSIZE", ",", "36", ")", ")", "\n", "#print(matrix.shape[0])", "\n", "for", "idx_T", "in", "range", "(", "start_downbeat", "*", "4", ",", "(", "end_downbeat", "-", "(", "WINDOWSIZE", "//", "4", "-", "1", ")", ")", "*", "4", ",", "HOPSIZE", ")", ":", "\n", "        ", "if", "idx_T", ">", "chord", ".", "shape", "[", "0", "]", "-", "8", ":", "\n", "            ", "break", "\n", "", "sample", "=", "chord", "[", "idx_T", ":", "idx_T", "+", "WINDOWSIZE", ",", ":", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "splittedChord", "=", "np", ".", "concatenate", "(", "(", "splittedChord", ",", "sample", ")", ",", "axis", "=", "0", ")", "\n", "", "return", "splittedChord", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.accomapnimentGeneration": [[50, 73], ["ptvae.PtvaeDecoder", "pretty_midi.PrettyMIDI", "pretty_midi.Instrument", "pretty_midi.Instrument", "range", "pyd.PrettyMIDI.instruments.append", "pyd.PrettyMIDI.instruments.append", "format_converter.melody_matrix2data", "format_converter.accompany_matrix2data", "pretty_midi.instrument_name_to_program", "pretty_midi.instrument_name_to_program", "ptvae.PtvaeDecoder.grid_to_pr_and_notes"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.melody_matrix2data", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.accompany_matrix2data", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.ptvae.PtvaeDecoder.grid_to_pr_and_notes"], ["", "def", "accomapnimentGeneration", "(", "piano_roll", ",", "pr_matrix", ",", "tempo", "=", "120", ")", ":", "\n", "#print(piano_roll.shape, type(piano_roll))", "\n", "    ", "pt_decoder", "=", "PtvaeDecoder", "(", "note_embedding", "=", "None", ",", "dec_dur_hid_size", "=", "64", ",", "z_size", "=", "512", ")", "\n", "start", "=", "0", "\n", "tempo", "=", "tempo", "\n", "midiReGen", "=", "pyd", ".", "PrettyMIDI", "(", "initial_tempo", "=", "tempo", ")", "\n", "melody_track", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "texture_track", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "for", "idx", "in", "range", "(", "0", ",", "pr_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "melody_notes", "=", "melody_matrix2data", "(", "melody_matrix", "=", "piano_roll", "[", "idx", "]", "[", ":", ",", ":", "130", "]", ",", "tempo", "=", "tempo", ",", "start_time", "=", "start", ",", "get_list", "=", "True", ")", "\n", "#chord_notes = chord_matrix2data(chordMatrix=piano_roll[idx][:, -12:], tempo=tempo, start_time=start, get_list=True)", "\n", "if", "pr_matrix", ".", "shape", "[", "-", "1", "]", "==", "6", ":", "\n", "            ", "pr", ",", "_", "=", "pt_decoder", ".", "grid_to_pr_and_notes", "(", "grid", "=", "pr_matrix", "[", "idx", "]", ",", "bpm", "=", "tempo", ",", "start", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pr", "=", "pr_matrix", "[", "idx", "]", "\n", "#print(pr.shape)", "\n", "", "texture_notes", "=", "accompany_matrix2data", "(", "pr_matrix", "=", "pr", ",", "tempo", "=", "tempo", ",", "start_time", "=", "start", ",", "get_list", "=", "True", ")", "\n", "melody_track", ".", "notes", "+=", "melody_notes", "\n", "texture_track", ".", "notes", "+=", "texture_notes", "\n", "start", "+=", "60", "/", "tempo", "*", "8", "\n", "", "midiReGen", ".", "instruments", ".", "append", "(", "melody_track", ")", "\n", "midiReGen", ".", "instruments", ".", "append", "(", "texture_track", ")", "\n", "return", "midiReGen", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.split_phrases": [[74, 87], ["segmentation[].isalpha", "phrases.append", "lengths.append", "sum", "range", "int", "len", "segmentation[].isalpha"], "function", ["None"], ["", "def", "split_phrases", "(", "segmentation", ")", ":", "\n", "    ", "phrases", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "current", "=", "0", "\n", "while", "segmentation", "[", "current", "]", "!=", "'\\n'", ":", "\n", "        ", "if", "segmentation", "[", "current", "]", ".", "isalpha", "(", ")", ":", "\n", "            ", "j", "=", "1", "\n", "while", "not", "(", "segmentation", "[", "current", "+", "j", "]", ".", "isalpha", "(", ")", "or", "segmentation", "[", "current", "+", "j", "]", "==", "'\\n'", ")", ":", "\n", "                ", "j", "+=", "1", "\n", "", "phrases", ".", "append", "(", "segmentation", "[", "current", "]", ")", "\n", "lengths", ".", "append", "(", "int", "(", "segmentation", "[", "current", "+", "1", ":", "current", "+", "j", "]", ")", ")", "\n", "current", "+=", "j", "\n", "", "", "return", "[", "(", "phrases", "[", "i", "]", ",", "lengths", "[", "i", "]", ",", "sum", "(", "lengths", "[", ":", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "phrases", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.chord_shift": [[88, 104], ["numpy.array", "numpy.roll", "np.array.append", "print", "sys.exit"], "function", ["None"], ["", "def", "chord_shift", "(", "prChordSet", ")", ":", "\n", "    ", "if", "prChordSet", ".", "shape", "[", "-", "1", "]", "==", "14", ":", "\n", "        ", "prChordSet", "=", "prChordSet", "[", ":", ",", ":", ",", "1", ":", "-", "1", "]", "\n", "", "elif", "prChordSet", ".", "shape", "[", "-", "1", "]", "==", "12", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Chord Dimention Error'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "num_total", "=", "prChordSet", ".", "shape", "[", "0", "]", "\n", "shift_const", "=", "[", "-", "6", ",", "-", "5", ",", "-", "4", ",", "-", "3", ",", "-", "2", ",", "-", "1", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "shifted_ensemble", "=", "[", "]", "\n", "for", "i", "in", "shift_const", ":", "\n", "        ", "shifted_term", "=", "np", ".", "roll", "(", "prChordSet", ",", "i", ",", "axis", "=", "-", "1", ")", "\n", "shifted_ensemble", ".", "append", "(", "shifted_term", ")", "\n", "", "shifted_ensemble", "=", "np", ".", "array", "(", "shifted_ensemble", ")", "#num_pitches * num_pieces * duration * size   #.reshape((-1, prChordSet.shape[1], prChordSet.shape[2]))", "\n", "return", "shifted_ensemble", ",", "num_total", ",", "shift_const", "\n", "", "def", "computeTIV", "(", "chroma", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.computeTIV": [[104, 123], ["len", "chroma.reshape.reshape", "numpy.concatenate", "np.concatenate.reshape", "numpy.concatenate", "numpy.fft.fft", "numpy.fft.fft", "numpy.abs", "numpy.angle", "numpy.abs", "numpy.angle", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "computeTIV", "(", "chroma", ")", ":", "\n", "#inpute size: Time*12", "\n", "#chroma = chroma.reshape((chroma.shape[0], -1, 12))", "\n", "#print('chroma', chroma.shape)", "\n", "    ", "if", "(", "len", "(", "chroma", ".", "shape", ")", ")", "==", "4", ":", "\n", "        ", "num_pitch", "=", "chroma", ".", "shape", "[", "0", "]", "\n", "num_pieces", "=", "chroma", ".", "shape", "[", "1", "]", "\n", "chroma", "=", "chroma", ".", "reshape", "(", "(", "-", "1", ",", "12", ")", ")", "\n", "chroma", "=", "chroma", "/", "(", "np", ".", "sum", "(", "chroma", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "+", "1e-10", ")", "#Time * 12", "\n", "TIV", "=", "np", ".", "fft", ".", "fft", "(", "chroma", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "1", ":", "7", "]", "#Time * (6*2)", "\n", "#print(TIV.shape)", "\n", "TIV", "=", "np", ".", "concatenate", "(", "(", "np", ".", "abs", "(", "TIV", ")", ",", "np", ".", "angle", "(", "TIV", ")", ")", ",", "axis", "=", "-", "1", ")", "#Time * 12", "\n", "TIV", "=", "TIV", ".", "reshape", "(", "(", "num_pitch", ",", "num_pieces", ",", "-", "1", ",", "12", ")", ")", "\n", "", "else", ":", "\n", "        ", "chroma", "=", "chroma", "/", "(", "np", ".", "sum", "(", "chroma", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "+", "1e-10", ")", "#Time * 12", "\n", "TIV", "=", "np", ".", "fft", ".", "fft", "(", "chroma", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "1", ":", "7", "]", "#Time * (6*2)", "\n", "#print(TIV.shape)", "\n", "TIV", "=", "np", ".", "concatenate", "(", "(", "np", ".", "abs", "(", "TIV", ")", ",", "np", ".", "angle", "(", "TIV", ")", ")", ",", "axis", "=", "-", "1", ")", "#Time * 12", "\n", "", "return", "TIV", "#Time * 12", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine": [[124, 142], ["instance_space.reshape.reshape", "numpy.max", "numpy.argmax", "query.reshape", "numpy.matmul", "numpy.transpose", "numpy.linalg.norm", "numpy.transpose", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine", "(", "query", ",", "instance_space", ")", ":", "\n", "#query: batch * T * 12", "\n", "#instance_space: 12 * batch * T * 12", "\n", "\n", "    ", "batch_Q", ",", "_", ",", "_", "=", "query", ".", "shape", "\n", "shift", ",", "batch_R", ",", "time", ",", "chroma", "=", "instance_space", ".", "shape", "\n", "\n", "query", "=", "query", ".", "reshape", "(", "(", "batch_Q", ",", "-", "1", ")", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "instance_space", "=", "instance_space", ".", "reshape", "(", "(", "shift", ",", "batch_R", ",", "-", "1", ")", ")", "\n", "\n", "#result: 12 * Batch_Q * Batch_R", "\n", "result", "=", "np", ".", "matmul", "(", "query", ",", "np", ".", "transpose", "(", "instance_space", ",", "(", "0", ",", "2", ",", "1", ")", ")", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "query", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "*", "np", ".", "transpose", "(", "np", ".", "linalg", ".", "norm", "(", "instance_space", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "(", "0", ",", "2", ",", "1", ")", ")", "+", "1e-10", ")", "\n", "\n", "#result: Batch_Q * Batch_R", "\n", "#print(result)", "\n", "chord_result", "=", "np", ".", "max", "(", "result", ",", "axis", "=", "0", ")", "\n", "arg_result", "=", "np", ".", "argmax", "(", "result", ",", "axis", "=", "0", ")", "\n", "return", "chord_result", "[", "0", "]", ",", "arg_result", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine_rhy": [[143, 158], ["query.reshape.reshape", "instance_space.reshape.reshape", "numpy.matmul", "numpy.transpose", "numpy.linalg.norm", "numpy.transpose", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine_rhy", "(", "query", ",", "instance_space", ")", ":", "\n", "#query: 1 * T * 3", "\n", "#instance_space:  batch * T * 3", "\n", "    ", "batch_Q", ",", "_", ",", "_", "=", "query", ".", "shape", "\n", "batch_R", ",", "_", ",", "_", "=", "instance_space", ".", "shape", "\n", "\n", "query", "=", "query", ".", "reshape", "(", "(", "batch_Q", ",", "-", "1", ")", ")", "\n", "instance_space", "=", "instance_space", ".", "reshape", "(", "(", "batch_R", ",", "-", "1", ")", ")", "\n", "\n", "#result: 12 * Batch_Q * Batch_R", "\n", "result", "=", "np", ".", "matmul", "(", "query", ",", "np", ".", "transpose", "(", "instance_space", ",", "(", "1", ",", "0", ")", ")", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "query", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "*", "np", ".", "transpose", "(", "np", ".", "linalg", ".", "norm", "(", "instance_space", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "(", "1", ",", "0", ")", ")", "+", "1e-10", ")", "\n", "\n", "#rhy_result = np.max(result, axis=0)", "\n", "#arg_result = np.argmax(result, axis=0)", "\n", "return", "result", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine_mel": [[159, 169], ["numpy.matmul", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine_mel", "(", "query", ",", "instance_space", ")", ":", "\n", "#query: 1 * m", "\n", "#instance_space:  batch * m", "\n", "\n", "#result: 12 * Batch_Q * Batch_R", "\n", "    ", "result", "=", "np", ".", "matmul", "(", "query", ",", "instance_space", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "query", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "*", "np", ".", "linalg", ".", "norm", "(", "instance_space", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "\n", "#rhy_result = np.max(result, axis=0)", "\n", "#arg_result = np.argmax(result, axis=0)", "\n", "return", "result", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine_1d": [[170, 195], ["numpy.ones", "i.isdigit", "numpy.abs", "recorder.append", "numpy.multiply", "np.multiply.argsort", "int", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine_1d", "(", "query", ",", "instance_space", ",", "segmentation", ",", "num_candidate", "=", "10", ")", ":", "\n", "#query: T", "\n", "#instance space: Batch * T", "\n", "#instance_space: batch * vectorLength", "\n", "\n", "    ", "final_result", "=", "np", ".", "ones", "(", "(", "instance_space", ".", "shape", "[", "0", "]", ")", ")", "\n", "recorder", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "i", "in", "segmentation", ":", "\n", "        ", "if", "i", ".", "isdigit", "(", ")", ":", "\n", "            ", "end", "=", "start", "+", "int", "(", "i", ")", "*", "16", "\n", "result", "=", "np", ".", "abs", "(", "np", ".", "dot", "(", "instance_space", "[", ":", ",", "start", ":", "end", "]", ",", "query", "[", "start", ":", "end", "]", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "instance_space", "[", ":", ",", "start", ":", "end", "]", ",", "axis", "=", "-", "1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "query", "[", "start", ":", "end", "]", ")", "+", "1e-10", ")", ")", "\n", "recorder", ".", "append", "(", "result", ")", "\n", "final_result", "=", "np", ".", "multiply", "(", "final_result", ",", "result", ")", "#element-wise product", "\n", "start", "=", "end", "\n", "#print(result.shape)", "\n", "#result = (result >= threshold) * 1", "\n", "#result = np.trace(result, axis1=-2, axis2=-1)", "\n", "#print(result.shape)", "\n", "", "", "candidates", "=", "final_result", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", ":", "num_candidate", "]", "\n", "scores", "=", "final_result", "[", "candidates", "]", "\n", "#names = [os.listdir('./scrape_musescore/data_to_be_used/8')[i] for i in candidates]", "\n", "#sort by edit distance over melody", "\n", "#candidates_resorted = appearanceMatch(query=batchTarget_[i], search=candidates, batchData=batchData)[0:10]", "\n", "return", "candidates", ",", "scores", ",", "recorder", "#, query[::4], instance_space[candidates][:, ::4]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine_2d": [[196, 222], ["numpy.ones", "i.isdigit", "numpy.array", "numpy.array", "numpy.array", "np.multiply.argsort", "np.array.append", "numpy.multiply", "numpy.shape", "numpy.shape", "numpy.dot", "numpy.trace", "int", "numpy.transpose", "range", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.product", "numpy.product", "numpy.transpose"], "function", ["None"], ["", "def", "cosine_2d", "(", "query", ",", "instance_space", ",", "segmentation", ",", "record_chord", "=", "None", ",", "num_candidate", "=", "10", ")", ":", "\n", "    ", "final_result", "=", "np", ".", "ones", "(", "(", "instance_space", ".", "shape", "[", "0", "]", ")", ")", "\n", "recorder", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "i", "in", "segmentation", ":", "\n", "        ", "if", "i", ".", "isdigit", "(", ")", ":", "\n", "            ", "end", "=", "start", "+", "int", "(", "i", ")", "*", "4", "\n", "result", "=", "np", ".", "dot", "(", "np", ".", "transpose", "(", "instance_space", "[", ":", ",", "start", ":", "end", ",", ":", "]", ",", "(", "0", ",", "2", ",", "1", ")", ")", ",", "query", "[", "start", ":", "end", ",", ":", "]", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "np", ".", "transpose", "(", "instance_space", "[", ":", ",", "start", ":", "end", ",", ":", "]", ",", "(", "0", ",", "2", ",", "1", ")", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "*", "np", ".", "linalg", ".", "norm", "(", "query", "[", "start", ":", "end", ",", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "#print(result.shape)", "\n", "#result = (result >= threshold) * 1", "\n", "#result = 0.6 * result[:, 0, 0] + 0.4 * result[:, 1, 1]", "\n", "result", "=", "np", ".", "trace", "(", "result", ",", "axis1", "=", "-", "2", ",", "axis2", "=", "-", "1", ")", "/", "2", "\n", "recorder", ".", "append", "(", "result", ")", "\n", "\n", "final_result", "=", "np", ".", "multiply", "(", "final_result", ",", "result", ")", "\n", "start", "=", "end", "\n", "", "", "if", "not", "record_chord", "==", "None", ":", "\n", "        ", "record_chord", "=", "np", ".", "array", "(", "record_chord", ")", "\n", "recorder", "=", "np", ".", "array", "(", "recorder", ")", "\n", "assert", "np", ".", "shape", "(", "record_chord", ")", "==", "np", ".", "shape", "(", "recorder", ")", "\n", "final_result", "=", "np", ".", "array", "(", "[", "(", "np", ".", "product", "(", "recorder", "[", ":", ",", "i", "]", ")", "*", "np", ".", "product", "(", "record_chord", "[", ":", ",", "i", "]", ")", ")", "*", "(", "2", "*", "recorder", ".", "shape", "[", "0", "]", ")", "for", "i", "in", "range", "(", "recorder", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "\n", "", "candidates", "=", "final_result", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "#[:num_candidate]", "\n", "scores", "=", "final_result", "[", "candidates", "]", "\n", "\n", "return", "candidates", ",", "scores", ",", "recorder", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.piano_roll_shift": [[223, 237], ["numpy.array().reshape", "numpy.roll", "numpy.roll", "numpy.concatenate", "np.array().reshape.append", "numpy.array"], "function", ["None"], ["", "def", "piano_roll_shift", "(", "prpiano_rollSet", ")", ":", "\n", "    ", "num_total", ",", "timeRes", ",", "piano_shape", "=", "prpiano_rollSet", ".", "shape", "\n", "shift_const", "=", "[", "-", "6", ",", "-", "5", ",", "-", "4", ",", "-", "3", ",", "-", "2", ",", "-", "1", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "shifted_ensemble", "=", "[", "]", "\n", "for", "i", "in", "shift_const", ":", "\n", "        ", "piano", "=", "prpiano_rollSet", "[", ":", ",", ":", ",", ":", "128", "]", "\n", "rhythm", "=", "prpiano_rollSet", "[", ":", ",", ":", ",", "128", ":", "130", "]", "\n", "chord", "=", "prpiano_rollSet", "[", ":", ",", ":", ",", "130", ":", "]", "\n", "shifted_piano", "=", "np", ".", "roll", "(", "piano", ",", "i", ",", "axis", "=", "-", "1", ")", "\n", "shifted_chord", "=", "np", ".", "roll", "(", "chord", ",", "i", ",", "axis", "=", "-", "1", ")", "\n", "shifted_piano_roll_set", "=", "np", ".", "concatenate", "(", "(", "shifted_piano", ",", "rhythm", ",", "shifted_chord", ")", ",", "axis", "=", "-", "1", ")", "\n", "shifted_ensemble", ".", "append", "(", "shifted_piano_roll_set", ")", "\n", "", "shifted_ensemble", "=", "np", ".", "array", "(", "shifted_ensemble", ")", ".", "reshape", "(", "(", "-", "1", ",", "timeRes", ",", "piano_shape", ")", ")", "\n", "return", "shifted_ensemble", ",", "num_total", ",", "shift_const", "\n", "", ""]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.bpm_to_rate": [[5, 7], ["None"], "function", ["None"], ["def", "bpm_to_rate", "(", "bpm", ")", ":", "\n", "    ", "return", "60", "/", "bpm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.ext_nmat_to_nmat": [[9, 16], ["numpy.zeros"], "function", ["None"], ["", "def", "ext_nmat_to_nmat", "(", "ext_nmat", ")", ":", "\n", "    ", "nmat", "=", "np", ".", "zeros", "(", "(", "ext_nmat", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "nmat", "[", ":", ",", "0", "]", "=", "ext_nmat", "[", ":", ",", "0", "]", "+", "ext_nmat", "[", ":", ",", "1", "]", "/", "ext_nmat", "[", ":", ",", "2", "]", "\n", "nmat", "[", ":", ",", "1", "]", "=", "ext_nmat", "[", ":", ",", "3", "]", "+", "ext_nmat", "[", ":", ",", "4", "]", "/", "ext_nmat", "[", ":", ",", "5", "]", "\n", "nmat", "[", ":", ",", "2", "]", "=", "ext_nmat", "[", ":", ",", "6", "]", "\n", "nmat", "[", ":", ",", "3", "]", "=", "ext_nmat", "[", ":", ",", "7", "]", "\n", "return", "nmat", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.nmat_to_notes": [[23, 33], ["notes.append", "pretty_midi.Note", "converter.bpm_to_rate", "converter.bpm_to_rate", "int", "int"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.bpm_to_rate", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.bpm_to_rate"], ["", "def", "nmat_to_notes", "(", "nmat", ",", "start", ",", "bpm", ")", ":", "\n", "    ", "notes", "=", "[", "]", "\n", "for", "s", ",", "e", ",", "p", ",", "v", "in", "nmat", ":", "\n", "        ", "assert", "s", "<", "e", "\n", "assert", "0", "<=", "p", "<", "128", "\n", "assert", "0", "<=", "v", "<", "128", "\n", "s", "=", "start", "+", "s", "*", "bpm_to_rate", "(", "bpm", ")", "\n", "e", "=", "start", "+", "e", "*", "bpm_to_rate", "(", "bpm", ")", "\n", "notes", ".", "append", "(", "pm", ".", "Note", "(", "int", "(", "v", ")", ",", "int", "(", "p", ")", ",", "s", ",", "e", ")", ")", "\n", "", "return", "notes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.ext_nmat_to_pr": [[35, 47], ["numpy.zeros", "int", "int", "int"], "function", ["None"], ["", "def", "ext_nmat_to_pr", "(", "ext_nmat", ",", "num_step", "=", "32", ")", ":", "\n", "# [start measure, no, deno, .., .., .., pitch, vel]", "\n", "# This is not RIGHT in general. Only works for 2-bar 4/4 music for now.", "\n", "    ", "pr", "=", "np", ".", "zeros", "(", "(", "32", ",", "128", ")", ")", "\n", "if", "ext_nmat", "is", "not", "None", ":", "\n", "        ", "for", "(", "sb", ",", "sq", ",", "sde", ",", "eb", ",", "eq", ",", "ede", ",", "p", ",", "v", ")", "in", "ext_nmat", ":", "\n", "            ", "s_ind", "=", "int", "(", "sb", "*", "sde", "+", "sq", ")", "\n", "e_ind", "=", "int", "(", "eb", "*", "ede", "+", "eq", ")", "\n", "p", "=", "int", "(", "p", ")", "\n", "pr", "[", "s_ind", ",", "p", "]", "=", "2", "\n", "pr", "[", "s_ind", "+", "1", ":", "e_ind", ",", "p", "]", "=", "1", "# note not including the last ind", "\n", "", "", "return", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.ext_nmat_to_mel_pr": [[49, 63], ["numpy.zeros", "int", "int", "int"], "function", ["None"], ["", "def", "ext_nmat_to_mel_pr", "(", "ext_nmat", ",", "num_step", "=", "32", ")", ":", "\n", "# [start measure, no, deno, .., .., .., pitch, vel]", "\n", "# This is not RIGHT in general. Only works for 2-bar 4/4 music for now.", "\n", "    ", "pr", "=", "np", ".", "zeros", "(", "(", "32", ",", "130", ")", ")", "\n", "pr", "[", ":", ",", "129", "]", "=", "1", "\n", "if", "ext_nmat", "is", "not", "None", ":", "\n", "        ", "for", "(", "sb", ",", "sq", ",", "sde", ",", "eb", ",", "eq", ",", "ede", ",", "p", ",", "v", ")", "in", "ext_nmat", ":", "\n", "            ", "s_ind", "=", "int", "(", "sb", "*", "sde", "+", "sq", ")", "\n", "e_ind", "=", "int", "(", "eb", "*", "ede", "+", "eq", ")", "\n", "p", "=", "int", "(", "p", ")", "\n", "pr", "[", "s_ind", ",", "p", "]", "=", "1", "\n", "pr", "[", "s_ind", ":", "e_ind", ",", "129", "]", "=", "0", "\n", "pr", "[", "s_ind", "+", "1", ":", "e_ind", ",", "128", "]", "=", "1", "# note not including the last ind", "\n", "", "", "return", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.augment_pr": [[65, 69], ["numpy.roll"], "function", ["None"], ["", "def", "augment_pr", "(", "pr", ",", "shift", "=", "0", ")", ":", "\n", "# it assures to work on single pr", "\n", "# for an array of pr, should double-check", "\n", "    ", "return", "np", ".", "roll", "(", "pr", ",", "shift", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.augment_mel_pr": [[71, 77], ["numpy.roll", "numpy.concatenate"], "function", ["None"], ["", "def", "augment_mel_pr", "(", "pr", ",", "shift", "=", "0", ")", ":", "\n", "# it only works on single mel_pr. Not on array of it.", "\n", "    ", "pitch_part", "=", "np", ".", "roll", "(", "pr", "[", ":", ",", "0", ":", "128", "]", ",", "shift", ",", "axis", "=", "-", "1", ")", "\n", "control_part", "=", "pr", "[", ":", ",", "128", ":", "]", "\n", "augmented_pr", "=", "np", ".", "concatenate", "(", "[", "pitch_part", ",", "control_part", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "augmented_pr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.pr_to_onehot_pr": [[78, 85], ["numpy.stack().astype", "numpy.stack"], "function", ["None"], ["", "def", "pr_to_onehot_pr", "(", "pr", ")", ":", "\n", "    ", "onset_data", "=", "pr", "[", ":", ",", ":", "]", "==", "2", "\n", "sustain_data", "=", "pr", "[", ":", ",", ":", "]", "==", "1", "\n", "silence_data", "=", "pr", "[", ":", ",", ":", "]", "==", "0", "\n", "pr", "=", "np", ".", "stack", "(", "[", "onset_data", ",", "sustain_data", ",", "silence_data", "]", ",", "\n", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "return", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.piano_roll_to_target": [[87, 114], ["numpy.logical_not", "pr.astype.astype", "numpy.zeros", "range", "numpy.logical_or", "numpy.where"], "function", ["None"], ["", "def", "piano_roll_to_target", "(", "pr", ")", ":", "\n", "#  pr: (32, 128, 3), dtype=bool", "\n", "\n", "# Assume that \"not (first_layer or second layer) = third_layer\"", "\n", "    ", "pr", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "logical_not", "(", "np", ".", "logical_or", "(", "pr", "[", ":", ",", ":", ",", "0", "]", ",", "pr", "[", ":", ",", ":", ",", "2", "]", ")", ")", "\n", "# To int dtype can make addition work", "\n", "pr", "=", "pr", ".", "astype", "(", "int", ")", "\n", "# Initialize a matrix to store the duration of a note on the (32, 128) grid", "\n", "pr_matrix", "=", "np", ".", "zeros", "(", "(", "32", ",", "128", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "31", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# At each iteration", "\n", "# 1. Assure that the second layer accumulates the note duration", "\n", "# 2. collect the onset notes in time step i, and mark it on the matrix.", "\n", "\n", "# collect", "\n", "        ", "onset_idx", "=", "np", ".", "where", "(", "pr", "[", "i", ",", ":", ",", "0", "]", "==", "1", ")", "[", "0", "]", "\n", "pr_matrix", "[", "i", ",", "onset_idx", "]", "=", "pr", "[", "i", ",", "onset_idx", ",", "1", "]", "+", "1", "\n", "if", "i", "==", "0", ":", "\n", "            ", "break", "\n", "# Accumulate", "\n", "# pr[i - 1, :, 1] += pr[i, :, 1]", "\n", "# pr[i - 1, onset_idx, 1] = 0  # the onset note should be set 0.", "\n", "\n", "", "pr", "[", "i", ",", "onset_idx", ",", "1", "]", "=", "0", "# the onset note should be set 0.", "\n", "pr", "[", "i", "-", "1", ",", ":", ",", "1", "]", "+=", "pr", "[", "i", ",", ":", ",", "1", "]", "\n", "", "return", "pr_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.target_to_3dtarget": [[116, 151], ["numpy.ones", "zip", "numpy.ones", "numpy.binary_repr", "numpy.fromstring", "numpy.where", "min", "list", "numpy.arange", "int"], "function", ["None"], ["", "def", "target_to_3dtarget", "(", "pr_mat", ",", "max_note_count", "=", "11", ",", "max_pitch", "=", "107", ",", "min_pitch", "=", "22", ",", "\n", "pitch_pad_ind", "=", "88", ",", "dur_pad_ind", "=", "2", ",", "\n", "pitch_sos_ind", "=", "86", ",", "pitch_eos_ind", "=", "87", ")", ":", "\n", "    ", "\"\"\"\n    :param pr_mat: (32, 128) matrix. pr_mat[t, p] indicates a note of pitch p,\n    started at time step t, has a duration of pr_mat[t, p] time steps.\n    :param max_note_count: the maximum number of notes in a time step,\n    including <sos> and <eos> tokens.\n    :param max_pitch: the highest pitch in the dataset.\n    :param min_pitch: the lowest pitch in the dataset.\n    :param pitch_pad_ind: see return value.\n    :param dur_pad_ind: see return value.\n    :param pitch_sos_ind: sos token.\n    :param pitch_eos_ind: eos token.\n    :return: pr_mat3d is a (32, max_note_count, 6) matrix. In the last dim,\n    the 0th column is for pitch, 1: 6 is for duration in binary repr. Output is\n    padded with <sos> and <eos> tokens in the pitch column, but with pad token\n    for dur columns.\n    \"\"\"", "\n", "pitch_range", "=", "max_pitch", "-", "min_pitch", "+", "1", "# including pad", "\n", "pr_mat3d", "=", "np", ".", "ones", "(", "(", "32", ",", "max_note_count", ",", "6", ")", ",", "dtype", "=", "int", ")", "*", "dur_pad_ind", "\n", "pr_mat3d", "[", ":", ",", ":", ",", "0", "]", "=", "pitch_pad_ind", "\n", "pr_mat3d", "[", ":", ",", "0", ",", "0", "]", "=", "pitch_sos_ind", "\n", "cur_idx", "=", "np", ".", "ones", "(", "32", ",", "dtype", "=", "int", ")", "\n", "for", "t", ",", "p", "in", "zip", "(", "*", "np", ".", "where", "(", "pr_mat", "!=", "0", ")", ")", ":", "\n", "        ", "pr_mat3d", "[", "t", ",", "cur_idx", "[", "t", "]", ",", "0", "]", "=", "p", "-", "min_pitch", "\n", "binary", "=", "np", ".", "binary_repr", "(", "min", "(", "int", "(", "pr_mat", "[", "t", ",", "p", "]", ")", ",", "32", ")", "-", "1", ",", "width", "=", "5", ")", "\n", "pr_mat3d", "[", "t", ",", "cur_idx", "[", "t", "]", ",", "1", ":", "6", "]", "=", "np", ".", "fromstring", "(", "' '", ".", "join", "(", "list", "(", "binary", ")", ")", ",", "dtype", "=", "int", ",", "sep", "=", "' '", ")", "\n", "if", "cur_idx", "[", "t", "]", "==", "max_note_count", "-", "1", ":", "\n", "            ", "continue", "\n", "", "cur_idx", "[", "t", "]", "+=", "1", "\n", "#print(cur_idx)", "\n", "", "pr_mat3d", "[", "np", ".", "arange", "(", "0", ",", "32", ")", ",", "cur_idx", ",", "0", "]", "=", "pitch_eos_ind", "\n", "return", "pr_mat3d", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.converter.expand_chord": [[153, 168], ["numpy.roll", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "int", "int"], "function", ["None"], ["", "def", "expand_chord", "(", "chord", ",", "shift", ",", "relative", "=", "False", ")", ":", "\n", "# chord = np.copy(chord)", "\n", "    ", "root", "=", "(", "chord", "[", "0", "]", "+", "shift", ")", "%", "12", "\n", "chroma", "=", "np", ".", "roll", "(", "chord", "[", "1", ":", "13", "]", ",", "shift", ")", "\n", "bass", "=", "(", "chord", "[", "13", "]", "+", "shift", ")", "%", "12", "\n", "root_onehot", "=", "np", ".", "zeros", "(", "12", ")", "\n", "root_onehot", "[", "int", "(", "root", ")", "]", "=", "1", "\n", "bass_onehot", "=", "np", ".", "zeros", "(", "12", ")", "\n", "bass_onehot", "[", "int", "(", "bass", ")", "]", "=", "1", "\n", "if", "not", "relative", ":", "\n", "        ", "pass", "\n", "#     chroma = np.roll(chroma, int(root))", "\n", "# print(chroma)", "\n", "# print('----------')", "\n", "", "return", "np", ".", "concatenate", "(", "[", "root_onehot", ",", "chroma", ",", "bass_onehot", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.edge_weights_inference.find_by_length": [[17, 34], ["tqdm.tqdm", "range", "range", "numpy.array", "numpy.array", "numpy.array", "len", "melody_record.append", "acc_record.append", "chord_record.append", "numpy.sum"], "function", ["None"], ["def", "find_by_length", "(", "melody_data", ",", "acc_data", ",", "chord_data", ",", "length", ")", ":", "\n", "    ", "melody_record", "=", "[", "]", "\n", "acc_record", "=", "[", "]", "\n", "chord_record", "=", "[", "]", "\n", "for", "song_idx", "in", "tqdm", "(", "range", "(", "acc_data", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "phrase_idx", "in", "range", "(", "len", "(", "acc_data", "[", "song_idx", "]", ")", ")", ":", "\n", "            ", "melody", "=", "melody_data", "[", "song_idx", "]", "[", "phrase_idx", "]", "\n", "if", "not", "melody", ".", "shape", "[", "0", "]", "==", "length", "*", "16", ":", "\n", "                ", "continue", "\n", "", "if", "np", ".", "sum", "(", "melody", "[", ":", ",", ":", "128", "]", ")", "<=", "2", ":", "\n", "                ", "continue", "\n", "", "melody_record", ".", "append", "(", "melody", ")", "\n", "acc", "=", "acc_data", "[", "song_idx", "]", "[", "phrase_idx", "]", "\n", "acc_record", ".", "append", "(", "acc", ")", "\n", "chord", "=", "chord_data", "[", "song_idx", "]", "[", "phrase_idx", "]", "\n", "chord_record", ".", "append", "(", "chord", ")", "\n", "", "", "return", "np", ".", "array", "(", "melody_record", ")", ",", "np", ".", "array", "(", "acc_record", ")", ",", "np", ".", "array", "(", "chord_record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.edge_weights_inference.contrastive_match": [[35, 95], ["rights[].reshape", "numpy.concatenate", "texture_model.eval", "contras_model.eval", "range", "numpy.array().reshape", "torch.from_numpy().float().cuda", "texture_model", "batch.view.view", "contras_model", "np.concatenate.append", "torch.from_numpy().float().cuda", "texture_model", "batch.view.view", "contras_model().cpu().detach().numpy().reshape", "numpy.concatenate", "rights[].reshape", "numpy.concatenate", "torch.from_numpy().float().cuda", "texture_model", "batch.view.view", "contras_model().cpu().detach().numpy().reshape", "numpy.concatenate", "numpy.repeat", "batch.view.view", "contras_model().cpu().detach().numpy().reshape.cpu().detach().numpy", "numpy.array", "batch.view.view", "batch.view.view", "numpy.argsort", "torch.from_numpy().float", "torch.from_numpy().float", "contras_model().cpu().detach().numpy", "numpy.repeat", "torch.from_numpy().float", "contras_model().cpu().detach().numpy", "contras_model().cpu().detach().numpy().reshape.cpu().detach", "torch.from_numpy", "torch.from_numpy", "contras_model().cpu().detach", "torch.from_numpy", "contras_model().cpu().detach", "contras_model().cpu().detach().numpy().reshape.cpu", "contras_model().cpu", "contras_model().cpu", "contras_model", "contras_model"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.torch_plus.scheduler.ParameterScheduler.eval"], ["", "def", "contrastive_match", "(", "left", ",", "rights", ",", "texture_model", ",", "contras_model", ",", "num_candidates", ")", ":", "\n", "#left: 1 * time * 128", "\n", "#rights: batch * time * 128", "\n", "    ", "NEG", "=", "6", "\n", "batch_size", ",", "time", ",", "roll_size", "=", "rights", ".", "shape", "\n", "#print(batch_size)", "\n", "count", "=", "(", "batch_size", "//", "NEG", ")", "*", "NEG", "\n", "rights_", "=", "rights", "[", ":", "count", "]", ".", "reshape", "(", "(", "batch_size", "//", "NEG", ",", "NEG", ",", "time", ",", "roll_size", ")", ")", "\n", "left", "=", "left", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "batch_input", "=", "np", ".", "concatenate", "(", "(", "np", ".", "repeat", "(", "left", ",", "rights_", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", ",", "rights_", ")", ",", "axis", "=", "1", ")", "\n", "\n", "texture_model", ".", "eval", "(", ")", "\n", "contras_model", ".", "eval", "(", ")", "\n", "consequence", "=", "[", "]", "#np.empty((0, NEG))", "\n", "mini_batch", "=", "2", "\n", "for", "i", "in", "range", "(", "0", ",", "batch_input", ".", "shape", "[", "0", "]", "-", "mini_batch", ",", "mini_batch", ")", ":", "\n", "        ", "batch", "=", "batch_input", "[", "i", ":", "(", "i", "+", "mini_batch", ")", "]", "\n", "#lengths = contras_model.get_len_index_tensor(batch)  #8 * 6", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "batch", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "#lengths = torch.from_numpy(lengths)", "\n", "bs", ",", "pos_neg", ",", "time", ",", "roll", "=", "batch", ".", "shape", "\n", "_", ",", "batch", "=", "texture_model", "(", "batch", ".", "view", "(", "-", "1", ",", "time", ",", "roll", ")", ")", "\n", "batch", "=", "batch", ".", "view", "(", "bs", ",", "pos_neg", ",", "-", "1", ")", "\n", "similarity", "=", "contras_model", "(", "batch", ")", "\n", "consequence", ".", "append", "(", "similarity", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "#print(consequence.shape)", "\n", "", "consequence", "=", "np", ".", "array", "(", "consequence", ")", ".", "reshape", "(", "-", "1", ")", "\n", "#print(consequence.shape)", "\n", "\n", "if", "(", "i", "+", "mini_batch", ")", "<", "batch_input", ".", "shape", "[", "0", "]", ":", "\n", "        ", "batch", "=", "batch_input", "[", "(", "i", "+", "mini_batch", ")", ":", "]", "\n", "#lengths = contras_model.get_len_index_tensor(batch)  #8 * 6", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "batch", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "#lengths = torch.from_numpy(lengths)", "\n", "bs", ",", "pos_neg", ",", "time", ",", "roll", "=", "batch", ".", "shape", "\n", "_", ",", "batch", "=", "texture_model", "(", "batch", ".", "view", "(", "-", "1", ",", "time", ",", "roll", ")", ")", "\n", "batch", "=", "batch", ".", "view", "(", "bs", ",", "pos_neg", ",", "-", "1", ")", "\n", "similarity", "=", "contras_model", "(", "batch", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "consequence", "=", "np", ".", "concatenate", "(", "(", "consequence", ",", "similarity", ")", ")", "\n", "\n", "", "if", "count", "<", "batch_size", ":", "\n", "        ", "rest", "=", "rights", "[", "count", ":", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ",", "time", ",", "roll_size", ")", ")", "\n", "batch", "=", "np", ".", "concatenate", "(", "(", "np", ".", "repeat", "(", "left", ",", "rest", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", ",", "rest", ")", ",", "axis", "=", "1", ")", "\n", "#lengths = contras_model.get_len_index_tensor(batch)  #8 * 6", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "batch", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "#lengths = torch.from_numpy(lengths)", "\n", "bs", ",", "pos_neg", ",", "time", ",", "roll", "=", "batch", ".", "shape", "\n", "_", ",", "batch", "=", "texture_model", "(", "batch", ".", "view", "(", "-", "1", ",", "time", ",", "roll", ")", ")", "\n", "batch", "=", "batch", ".", "view", "(", "bs", ",", "pos_neg", ",", "-", "1", ")", "\n", "similarity", "=", "contras_model", "(", "batch", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "consequence", "=", "np", ".", "concatenate", "(", "(", "consequence", ",", "similarity", ")", ")", "\n", "#print(batch_size, consequence.shape)", "\n", "", "if", "num_candidates", "==", "-", "1", ":", "\n", "#argmax = np.argsort(consequence)[::-1]", "\n", "        ", "return", "consequence", "#, argmax", "\n", "", "else", ":", "\n", "        ", "argmax", "=", "np", ".", "argsort", "(", "consequence", ")", "[", ":", ":", "-", "1", "]", "\n", "#result = [consequence[i] for i in argmax]", "\n", "#print(result, argmax[:num_candidates])", "\n", "return", "consequence", ",", "argmax", "[", ":", "num_candidates", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.edge_weights_inference.inference_edge_weights": [[96, 116], ["tqdm.tqdm", "numpy.array", "edge_weights_inference.find_by_length", "edge_weights_inference.find_by_length", "str", "edge_weights_inference.contrastive_match", "edge_dict.append", "str"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.AccoMontage.find_by_length", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.AccoMontage.find_by_length", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.edge_weights_inference.contrastive_match"], ["", "", "def", "inference_edge_weights", "(", "contras_model", ",", "texture_model", ",", "length", ",", "last_length", ",", "melody_data", ",", "acc_data", ",", "chord_data", ",", "acc_pool", ")", ":", "\n", "    ", "if", "not", "length", "in", "acc_pool", ":", "\n", "        ", "(", "mel", ",", "acc", ",", "chord", ")", "=", "find_by_length", "(", "melody_data", ",", "acc_data", ",", "chord_data", ",", "length", ")", "\n", "acc_pool", "[", "length", "]", "=", "(", "mel", ",", "acc", ",", "chord", ")", "\n", "", "if", "not", "last_length", "in", "acc_pool", ":", "\n", "        ", "(", "mel", ",", "acc", ",", "chord", ")", "=", "find_by_length", "(", "melody_data", ",", "acc_data", ",", "chord_data", ",", "last_length", ")", "\n", "acc_pool", "[", "last_length", "]", "=", "(", "mel", ",", "acc", ",", "chord", ")", "\n", "\n", "", "melody_set", "=", "acc_pool", "[", "length", "]", "[", "0", "]", "\n", "acc_set", "=", "acc_pool", "[", "length", "]", "[", "1", "]", "\n", "chord_set", "=", "acc_pool", "[", "length", "]", "[", "2", "]", "\n", "\n", "weight_key", "=", "'l'", "+", "str", "(", "last_length", ")", "+", "str", "(", "length", ")", "\n", "\n", "edge_dict", "=", "[", "]", "\n", "last_acc_set", "=", "acc_pool", "[", "last_length", "]", "[", "1", "]", "\n", "for", "item", "in", "tqdm", "(", "last_acc_set", ")", ":", "\n", "        ", "contras_values", "=", "contrastive_match", "(", "item", "[", "np", ".", "newaxis", ",", "-", "32", ":", ",", ":", "]", ",", "acc_set", "[", ":", ",", ":", "32", ",", ":", "]", ",", "texture_model", ",", "contras_model", ",", "-", "1", ")", "\n", "edge_dict", ".", "append", "(", "contras_values", ")", "\n", "", "return", "np", ".", "array", "(", "edge_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.expand_chord": [[8, 23], ["numpy.roll", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "int", "int"], "function", ["None"], ["def", "expand_chord", "(", "chord", ",", "shift", ",", "relative", "=", "False", ")", ":", "\n", "# chord = np.copy(chord)", "\n", "    ", "root", "=", "(", "chord", "[", "0", "]", "+", "shift", ")", "%", "12", "\n", "chroma", "=", "np", ".", "roll", "(", "chord", "[", "1", ":", "13", "]", ",", "shift", ")", "\n", "bass", "=", "(", "chord", "[", "13", "]", "+", "shift", ")", "%", "12", "\n", "root_onehot", "=", "np", ".", "zeros", "(", "12", ")", "\n", "root_onehot", "[", "int", "(", "root", ")", "]", "=", "1", "\n", "bass_onehot", "=", "np", ".", "zeros", "(", "12", ")", "\n", "bass_onehot", "[", "int", "(", "bass", ")", "]", "=", "1", "\n", "if", "not", "relative", ":", "\n", "        ", "pass", "\n", "#     chroma = np.roll(chroma, int(root))", "\n", "# print(chroma)", "\n", "# print('----------')", "\n", "", "return", "np", ".", "concatenate", "(", "[", "root_onehot", ",", "chroma", ",", "bass_onehot", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.melody_data2matrix": [[25, 58], ["list", "list.append", "range", "numpy.zeros", "enumerate", "range", "len", "round", "round", "len", "melodySequence.append", "melodySequence.append", "melodySequence.append", "len"], "function", ["None"], ["", "def", "melody_data2matrix", "(", "melody_track", ",", "melody_downbeats", ")", ":", "\n", "    ", "HOLD_PITCH", "=", "128", "\n", "REST_PITCH", "=", "129", "\n", "melody_downbeats", "=", "list", "(", "melody_downbeats", ")", "\n", "melody_downbeats", ".", "append", "(", "melody_downbeats", "[", "-", "1", "]", "+", "(", "melody_downbeats", "[", "-", "1", "]", "-", "melody_downbeats", "[", "-", "2", "]", ")", ")", "\n", "melodySequence", "=", "[", "]", "\n", "anchor", "=", "0", "\n", "note", "=", "melody_track", ".", "notes", "[", "anchor", "]", "\n", "start", "=", "note", ".", "start", "\n", "new_note", "=", "True", "\n", "for", "i", "in", "range", "(", "len", "(", "melody_downbeats", ")", "-", "1", ")", ":", "\n", "        ", "s_curr", "=", "round", "(", "melody_downbeats", "[", "i", "]", "*", "4", ")", "/", "4", "\n", "s_next", "=", "round", "(", "melody_downbeats", "[", "i", "+", "1", "]", "*", "4", ")", "/", "4", "\n", "delta", "=", "(", "s_next", "-", "s_curr", ")", "/", "16", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "while", "note", ".", "end", "<=", "(", "s_curr", "+", "i", "*", "delta", ")", "and", "anchor", "<", "len", "(", "melody_track", ".", "notes", ")", "-", "1", ":", "\n", "                ", "anchor", "+=", "1", "\n", "note", "=", "melody_track", ".", "notes", "[", "anchor", "]", "\n", "start", "=", "note", ".", "start", "\n", "new_note", "=", "True", "\n", "", "if", "s_curr", "+", "i", "*", "delta", "<", "start", "-", "60", "/", "120", "/", "16", ":", "\n", "                ", "melodySequence", ".", "append", "(", "REST_PITCH", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "new_note", ":", "\n", "                    ", "melodySequence", ".", "append", "(", "HOLD_PITCH", ")", "\n", "", "else", ":", "\n", "                    ", "melodySequence", ".", "append", "(", "note", ".", "pitch", ")", "\n", "new_note", "=", "False", "\n", "", "", "", "", "ROLL_SIZE", "=", "130", "\n", "melodyMatrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "melodySequence", ")", ",", "ROLL_SIZE", ")", ")", "\n", "for", "idx", ",", "note", "in", "enumerate", "(", "melodySequence", ")", ":", "\n", "        ", "melodyMatrix", "[", "idx", ",", "note", "]", "=", "1", "\n", "", "return", "melodyMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.melody_matrix2data": [[59, 85], ["onset_or_rest.append", "enumerate", "numpy.argmax", "len", "pretty_midi.Instrument", "range", "range", "pretty_midi.Note", "melody_notes.append", "len", "pretty_midi.instrument_name_to_program"], "function", ["None"], ["", "def", "melody_matrix2data", "(", "melody_matrix", ",", "tempo", "=", "120", ",", "start_time", "=", "0.0", ",", "get_list", "=", "False", ")", ":", "\n", "    ", "ROLL_SIZE", "=", "130", "\n", "HOLD_PITCH", "=", "128", "\n", "REST_PITCH", "=", "129", "\n", "melodyMatrix", "=", "melody_matrix", "[", ":", ",", ":", "ROLL_SIZE", "]", "\n", "melodySequence", "=", "[", "np", ".", "argmax", "(", "melodyMatrix", "[", "i", "]", ")", "for", "i", "in", "range", "(", "melodyMatrix", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "melody_notes", "=", "[", "]", "\n", "minStep", "=", "60", "/", "tempo", "/", "4", "\n", "onset_or_rest", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "melodySequence", ")", ")", "if", "not", "melodySequence", "[", "i", "]", "==", "HOLD_PITCH", "]", "\n", "onset_or_rest", ".", "append", "(", "len", "(", "melodySequence", ")", ")", "\n", "for", "idx", ",", "onset", "in", "enumerate", "(", "onset_or_rest", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "if", "melodySequence", "[", "onset", "]", "==", "REST_PITCH", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "pitch", "=", "melodySequence", "[", "onset", "]", "\n", "start", "=", "onset", "*", "minStep", "\n", "end", "=", "onset_or_rest", "[", "idx", "+", "1", "]", "*", "minStep", "\n", "noteRecon", "=", "pyd", ".", "Note", "(", "velocity", "=", "100", ",", "pitch", "=", "pitch", ",", "start", "=", "start_time", "+", "start", ",", "end", "=", "start_time", "+", "end", ")", "\n", "melody_notes", ".", "append", "(", "noteRecon", ")", "\n", "", "", "if", "get_list", ":", "\n", "        ", "return", "melody_notes", "\n", "", "else", ":", "\n", "        ", "melody", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "melody", ".", "notes", "=", "melody_notes", "\n", "return", "melody", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.chord_data2matrix": [[86, 221], ["list", "list.append", "range", "numpy.array", "len", "chord_set.sort", "chordsRecord.append", "range", "len", "chord_set.append", "chordsRecord.append", "len", "len", "round", "round", "chord_set.append", "chord_set.sort", "chordsRecord.append", "chord_set.append", "len", "len", "len", "chordsRecord.append", "len", "str", "quality.split", "ChordTable.append", "ChordTable.append", "ChordTable.append", "ChordTable.append", "len", "len", "len", "str", "int", "len", "format_converter.expand_chord", "format_converter.expand_chord", "str", "quality.split", "str", "int", "quality.split", "quality.split"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.expand_chord", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.expand_chord"], ["", "", "def", "chord_data2matrix", "(", "chord_track", ",", "downbeats", ",", "resolution", "=", "'beat'", ",", "chord_expand", "=", "True", ")", ":", "\n", "    ", "\"\"\"applicable to triple chords and seventh chords\"\"\"", "\n", "if", "resolution", "==", "'beat'", ":", "\n", "        ", "num_anchords", "=", "4", "\n", "", "elif", "resolution", "==", "'quater'", ":", "\n", "        ", "num_anchords", "=", "16", "\n", "", "chromas", "=", "{", "\n", "#           1     2     3     4  5     6     7", "\n", "'maj'", ":", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "'min'", ":", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "'aug'", ":", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "'dim'", ":", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "'7'", ":", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "'maj7'", ":", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "'min7'", ":", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "'minmaj7'", ":", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "'dim7'", ":", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "'hdim7'", ":", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "}", "\n", "distr2quality", "=", "{", "'(4, 3)'", ":", "'maj/0'", ",", "\n", "'(3, 5)'", ":", "'maj/1'", ",", "\n", "'(5, 4)'", ":", "'maj/2'", ",", "\n", "\n", "'(3, 4)'", ":", "'min/0'", ",", "\n", "'(4, 5)'", ":", "'min/1'", ",", "\n", "'(5, 3)'", ":", "'min/2'", ",", "\n", "\n", "'(4, 4)'", ":", "'aug/0'", ",", "\n", "\n", "'(3, 3)'", ":", "'dim/0'", ",", "\n", "'(3, 6)'", ":", "'dim/1'", ",", "\n", "'(6, 3)'", ":", "'dim/2'", ",", "\n", "\n", "'(4, 3, 3)'", ":", "'7/0'", ",", "\n", "'(3, 3, 2)'", ":", "'7/1'", ",", "\n", "'(3, 2, 4)'", ":", "'7/2'", ",", "\n", "'(2, 4, 3)'", ":", "'7/3'", ",", "\n", "\n", "'(4, 3, 4)'", ":", "'maj7/0'", ",", "\n", "'(3, 4, 1)'", ":", "'maj7/1'", ",", "\n", "'(4, 1, 4)'", ":", "'maj7/2'", ",", "\n", "'(1, 4, 3)'", ":", "'maj7/3'", ",", "\n", "\n", "'(3, 4, 3)'", ":", "'min7/0'", ",", "\n", "'(4, 3, 2)'", ":", "'min7/1'", ",", "\n", "'(3, 2, 3)'", ":", "'min7/2'", ",", "\n", "'(2, 3, 4)'", ":", "'min7/3'", ",", "\n", "\n", "'(3, 4, 4)'", ":", "'minmaj7/0'", ",", "\n", "'(4, 4, 1)'", ":", "'minmaj7/1'", ",", "\n", "'(4, 1, 3)'", ":", "'minmaj7/2'", ",", "\n", "'(1, 3, 4)'", ":", "'minmaj7/3'", ",", "\n", "\n", "'(3, 3, 3)'", ":", "'dim7/0'", ",", "\n", "\n", "'(3, 3, 4)'", ":", "'hdim7/0'", ",", "\n", "'(3, 4, 2)'", ":", "'hdim7/1'", ",", "\n", "'(4, 2, 3)'", ":", "'hdim7/2'", ",", "\n", "'(2, 3, 3)'", ":", "'hdim7/3'", ",", "\n", "}", "\n", "NC", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", "]", "\n", "last_time", "=", "0", "\n", "chord_set", "=", "[", "]", "\n", "chord_time", "=", "[", "0.0", ",", "0.0", "]", "\n", "chordsRecord", "=", "[", "]", "\n", "for", "note", "in", "chord_track", ".", "notes", ":", "\n", "        ", "if", "len", "(", "chord_set", ")", "==", "0", ":", "\n", "            ", "chord_set", ".", "append", "(", "note", ".", "pitch", ")", "\n", "chord_time", "[", "0", "]", "=", "note", ".", "start", "\n", "chord_time", "[", "1", "]", "=", "note", ".", "end", "\n", "", "else", ":", "\n", "            ", "if", "note", ".", "start", "==", "chord_time", "[", "0", "]", "and", "note", ".", "end", "==", "chord_time", "[", "1", "]", ":", "\n", "                ", "chord_set", ".", "append", "(", "note", ".", "pitch", ")", "\n", "", "else", ":", "\n", "                ", "if", "last_time", "<", "chord_time", "[", "0", "]", ":", "\n", "                    ", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "last_time", ",", "\"end\"", ":", "chord_time", "[", "0", "]", ",", "\"chord\"", ":", "NC", "}", ")", "\n", "", "chord_set", ".", "sort", "(", ")", "\n", "assert", "(", "len", "(", "chord_set", ")", "==", "3", "or", "len", "(", "chord_set", ")", "==", "4", ")", "\n", "if", "len", "(", "chord_set", ")", "==", "3", ":", "\n", "                    ", "quality", "=", "distr2quality", "[", "str", "(", "(", "(", "chord_set", "[", "1", "]", "-", "chord_set", "[", "0", "]", ")", ",", "(", "chord_set", "[", "2", "]", "-", "chord_set", "[", "1", "]", ")", ")", ")", "]", "\n", "", "elif", "len", "(", "chord_set", ")", "==", "4", ":", "\n", "                    ", "quality", "=", "distr2quality", "[", "str", "(", "(", "(", "chord_set", "[", "1", "]", "-", "chord_set", "[", "0", "]", ")", ",", "(", "chord_set", "[", "2", "]", "-", "chord_set", "[", "1", "]", ")", ",", "(", "chord_set", "[", "3", "]", "-", "chord_set", "[", "2", "]", ")", ")", ")", "]", "\n", "", "root", "=", "chord_set", "[", "-", "int", "(", "quality", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "]", "%", "12", "\n", "chroma", "=", "chromas", "[", "quality", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "\n", "chroma", "=", "chroma", "[", "-", "root", ":", "]", "+", "chroma", "[", ":", "-", "root", "]", "\n", "bass", "=", "(", "chord_set", "[", "0", "]", "%", "12", "-", "root", ")", "%", "12", "\n", "\n", "#concatenate", "\n", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "chord_time", "[", "0", "]", ",", "\"end\"", ":", "chord_time", "[", "1", "]", ",", "\"chord\"", ":", "[", "root", "]", "+", "chroma", "+", "[", "bass", "]", "}", ")", "\n", "last_time", "=", "chord_time", "[", "1", "]", "\n", "chord_set", "=", "[", "]", "\n", "chord_set", ".", "append", "(", "note", ".", "pitch", ")", "\n", "chord_time", "[", "0", "]", "=", "note", ".", "start", "\n", "chord_time", "[", "1", "]", "=", "note", ".", "end", "\n", "", "", "", "if", "len", "(", "chord_set", ")", ">", "0", ":", "\n", "        ", "if", "last_time", "<", "chord_time", "[", "0", "]", ":", "\n", "            ", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "last_time", ",", "\"end\"", ":", "chord_time", "[", "0", "]", ",", "\"chord\"", ":", "NC", "}", ")", "\n", "", "chord_set", ".", "sort", "(", ")", "\n", "assert", "(", "len", "(", "chord_set", ")", "==", "3", "or", "len", "(", "chord_set", ")", "==", "4", ")", "\n", "if", "len", "(", "chord_set", ")", "==", "3", ":", "\n", "            ", "quality", "=", "distr2quality", "[", "str", "(", "(", "(", "chord_set", "[", "1", "]", "-", "chord_set", "[", "0", "]", ")", ",", "(", "chord_set", "[", "2", "]", "-", "chord_set", "[", "1", "]", ")", ")", ")", "]", "\n", "", "elif", "len", "(", "chord_set", ")", "==", "4", ":", "\n", "            ", "quality", "=", "distr2quality", "[", "str", "(", "(", "(", "chord_set", "[", "1", "]", "-", "chord_set", "[", "0", "]", ")", ",", "(", "chord_set", "[", "2", "]", "-", "chord_set", "[", "1", "]", ")", ",", "(", "chord_set", "[", "3", "]", "-", "chord_set", "[", "2", "]", ")", ")", ")", "]", "\n", "", "root", "=", "chord_set", "[", "-", "int", "(", "quality", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "]", "%", "12", "\n", "chroma", "=", "chromas", "[", "quality", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "\n", "chroma", "=", "chroma", "[", "-", "root", ":", "]", "+", "chroma", "[", ":", "-", "root", "]", "\n", "bass", "=", "(", "chord_set", "[", "0", "]", "%", "12", "-", "root", ")", "%", "12", "\n", "chordsRecord", ".", "append", "(", "{", "\"start\"", ":", "chord_time", "[", "0", "]", ",", "\"end\"", ":", "chord_time", "[", "1", "]", ",", "\"chord\"", ":", "[", "root", "]", "+", "chroma", "+", "[", "bass", "]", "}", ")", "\n", "last_time", "=", "chord_time", "[", "1", "]", "\n", "", "ChordTable", "=", "[", "]", "\n", "anchor", "=", "0", "\n", "chord", "=", "chordsRecord", "[", "anchor", "]", "\n", "start", "=", "chord", "[", "'start'", "]", "\n", "downbeats", "=", "list", "(", "downbeats", ")", "\n", "downbeats", ".", "append", "(", "downbeats", "[", "-", "1", "]", "+", "(", "downbeats", "[", "-", "1", "]", "-", "downbeats", "[", "-", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "downbeats", ")", "-", "1", ")", ":", "\n", "        ", "s_curr", "=", "round", "(", "downbeats", "[", "i", "]", "*", "4", ")", "/", "4", "\n", "s_next", "=", "round", "(", "downbeats", "[", "i", "+", "1", "]", "*", "4", ")", "/", "4", "\n", "delta", "=", "(", "s_next", "-", "s_curr", ")", "/", "num_anchords", "\n", "for", "i", "in", "range", "(", "num_anchords", ")", ":", "# one-beat resolution", "\n", "            ", "while", "chord", "[", "'end'", "]", "<=", "(", "s_curr", "+", "i", "*", "delta", ")", "and", "anchor", "<", "len", "(", "chordsRecord", ")", "-", "1", ":", "\n", "                ", "anchor", "+=", "1", "\n", "chord", "=", "chordsRecord", "[", "anchor", "]", "\n", "start", "=", "chord", "[", "'start'", "]", "\n", "", "if", "s_curr", "+", "i", "*", "delta", "<", "start", ":", "\n", "                ", "if", "chord_expand", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "expand_chord", "(", "chord", "=", "NC", ",", "shift", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "NC", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "chord_expand", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "expand_chord", "(", "chord", "=", "chord", "[", "'chord'", "]", ",", "shift", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ChordTable", ".", "append", "(", "chord", "[", "'chord'", "]", ")", "\n", "", "", "", "", "return", "np", ".", "array", "(", "ChordTable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.chord_matrix2data": [[222, 265], ["chordloader.Chord_Loader", "range", "onset_or_rest.append", "enumerate", "chordSequence.append", "len", "pretty_midi.Instrument", "chordloader.Chord_Loader.note2name", "range", "chordloader.Chord_Loader.name2note", "len", "range", "len", "pretty_midi.Note", "chord_notes.append", "pretty_midi.instrument_name_to_program", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.note2name", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.chordloader.Chord_Loader.name2note"], ["", "def", "chord_matrix2data", "(", "chordMatrix", ",", "tempo", "=", "120", ",", "start_time", "=", "0.0", ",", "get_list", "=", "False", ")", ":", "\n", "    ", "CHORD_SIZE", "=", "12", "\n", "cl", "=", "Chord_Loader", "(", "\"Seven\"", ")", "\n", "if", "chordMatrix", ".", "shape", "[", "-", "1", "]", "==", "CHORD_SIZE", ":", "\n", "        ", "pass", "\n", "", "elif", "chordMatrix", ".", "shape", "[", "-", "1", "]", "==", "14", ":", "\n", "        ", "if", "len", "(", "chordMatrix", ".", "shape", ")", "==", "2", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", "1", ":", "-", "1", "]", "\n", "", "elif", "len", "(", "chordMatrix", ".", "shape", ")", "==", "3", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", ":", ",", "1", ":", "-", "1", "]", "\n", "", "", "elif", "chordMatrix", ".", "shape", "[", "-", "1", "]", "==", "36", ":", "\n", "        ", "if", "len", "(", "chordMatrix", ".", "shape", ")", "==", "2", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", "12", ":", "-", "12", "]", "\n", "", "elif", "len", "(", "chordMatrix", ".", "shape", ")", "==", "3", ":", "\n", "            ", "chordMatrix", "=", "chordMatrix", "[", ":", ",", ":", ",", "12", ":", "-", "12", "]", "\n", "", "", "chordSequence", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "chordMatrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "chordset", "=", "[", "idx", "for", "idx", "in", "range", "(", "CHORD_SIZE", ")", "if", "chordMatrix", "[", "i", "]", "[", "idx", "]", "==", "1", "]", "\n", "chordSequence", ".", "append", "(", "cl", ".", "note2name", "(", "chordset", ")", ")", "\n", "", "minStep", "=", "60", "/", "tempo", "/", "4", "#16th quantization", "\n", "chord_notes", "=", "[", "]", "\n", "onset_or_rest", "=", "[", "0", "]", "\n", "onset_or_rest_", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "len", "(", "chordSequence", ")", ")", "if", "chordSequence", "[", "i", "]", "!=", "chordSequence", "[", "i", "-", "1", "]", "]", "\n", "onset_or_rest", "=", "onset_or_rest", "+", "onset_or_rest_", "\n", "onset_or_rest", ".", "append", "(", "len", "(", "chordSequence", ")", ")", "\n", "for", "idx", ",", "onset", "in", "enumerate", "(", "onset_or_rest", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "if", "chordSequence", "[", "onset", "]", "==", "'NC'", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "chordset", "=", "cl", ".", "name2note", "(", "chordSequence", "[", "onset", "]", ")", "\n", "if", "chordset", "==", "None", ":", "\n", "                ", "continue", "\n", "", "start", "=", "onset", "*", "minStep", "\n", "end", "=", "onset_or_rest", "[", "idx", "+", "1", "]", "*", "minStep", "\n", "for", "note", "in", "chordset", ":", "\n", "                ", "noteRecon", "=", "pyd", ".", "Note", "(", "velocity", "=", "100", ",", "pitch", "=", "note", "+", "4", "*", "12", ",", "start", "=", "start_time", "+", "start", ",", "end", "=", "start_time", "+", "end", ")", "\n", "chord_notes", ".", "append", "(", "noteRecon", ")", "\n", "", "", "", "if", "get_list", ":", "\n", "        ", "return", "chord_notes", "\n", "", "else", ":", "\n", "        ", "chord", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "chord", ".", "notes", "=", "chord_notes", "\n", "return", "chord", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.accompany_data2matrix": [[266, 288], ["list", "list.append", "range", "numpy.array", "numpy.zeros", "range", "numpy.argmin", "int", "len", "round", "round", "np.array.append", "delta_set.append", "numpy.abs", "round"], "function", ["None"], ["", "", "def", "accompany_data2matrix", "(", "accompany_track", ",", "downbeats", ")", ":", "\n", "    ", "time_stamp_sixteenth_reso", "=", "[", "]", "\n", "delta_set", "=", "[", "]", "\n", "downbeats", "=", "list", "(", "downbeats", ")", "\n", "downbeats", ".", "append", "(", "downbeats", "[", "-", "1", "]", "+", "(", "downbeats", "[", "-", "1", "]", "-", "downbeats", "[", "-", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "downbeats", ")", "-", "1", ")", ":", "\n", "        ", "s_curr", "=", "round", "(", "downbeats", "[", "i", "]", "*", "16", ")", "/", "16", "\n", "s_next", "=", "round", "(", "downbeats", "[", "i", "+", "1", "]", "*", "16", ")", "/", "16", "\n", "delta", "=", "(", "s_next", "-", "s_curr", ")", "/", "16", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "time_stamp_sixteenth_reso", ".", "append", "(", "s_curr", "+", "delta", "*", "i", ")", "\n", "delta_set", ".", "append", "(", "delta", ")", "\n", "", "", "time_stamp_sixteenth_reso", "=", "np", ".", "array", "(", "time_stamp_sixteenth_reso", ")", "\n", "\n", "pr_matrix", "=", "np", ".", "zeros", "(", "(", "time_stamp_sixteenth_reso", ".", "shape", "[", "0", "]", ",", "128", ")", ")", "\n", "for", "note", "in", "accompany_track", ".", "notes", ":", "\n", "        ", "onset", "=", "note", ".", "start", "\n", "t", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "time_stamp_sixteenth_reso", "-", "onset", ")", ")", "\n", "p", "=", "note", ".", "pitch", "\n", "duration", "=", "int", "(", "round", "(", "(", "note", ".", "end", "-", "onset", ")", "/", "delta_set", "[", "t", "]", ")", ")", "\n", "pr_matrix", "[", "t", ",", "p", "]", "=", "duration", "\n", "", "return", "pr_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.format_converter.accompany_matrix2data": [[289, 304], ["range", "range", "pretty_midi.Instrument", "notes.append", "pretty_midi.instrument_name_to_program", "pretty_midi.Note", "int"], "function", ["None"], ["", "def", "accompany_matrix2data", "(", "pr_matrix", ",", "tempo", "=", "120", ",", "start_time", "=", "0.0", ",", "get_list", "=", "False", ")", ":", "\n", "    ", "alpha", "=", "0.25", "*", "60", "/", "tempo", "\n", "notes", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "pr_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "p", "in", "range", "(", "128", ")", ":", "\n", "            ", "if", "pr_matrix", "[", "t", ",", "p", "]", ">=", "1", ":", "\n", "                ", "s", "=", "alpha", "*", "t", "+", "start_time", "\n", "e", "=", "alpha", "*", "(", "t", "+", "pr_matrix", "[", "t", ",", "p", "]", ")", "+", "start_time", "\n", "notes", ".", "append", "(", "pyd", ".", "Note", "(", "100", ",", "int", "(", "p", ")", ",", "s", ",", "e", ")", ")", "\n", "", "", "", "if", "get_list", ":", "\n", "        ", "return", "notes", "\n", "", "else", ":", "\n", "        ", "acc", "=", "pyd", ".", "Instrument", "(", "program", "=", "pyd", ".", "instrument_name_to_program", "(", "'Acoustic Grand Piano'", ")", ")", "\n", "acc", ".", "notes", "=", "notes", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.AccoMontage.find_by_length": [[19, 38], ["tqdm.tqdm", "range", "range", "numpy.array", "numpy.array", "numpy.array", "len", "melody_record.append", "acc_record.append", "chord_record.append", "song_reference.append", "numpy.sum"], "function", ["None"], ["def", "find_by_length", "(", "melody_data", ",", "acc_data", ",", "chord_data", ",", "length", ")", ":", "\n", "    ", "melody_record", "=", "[", "]", "\n", "acc_record", "=", "[", "]", "\n", "chord_record", "=", "[", "]", "\n", "song_reference", "=", "[", "]", "\n", "for", "song_idx", "in", "tqdm", "(", "range", "(", "acc_data", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "phrase_idx", "in", "range", "(", "len", "(", "acc_data", "[", "song_idx", "]", ")", ")", ":", "\n", "            ", "melody", "=", "melody_data", "[", "song_idx", "]", "[", "phrase_idx", "]", "\n", "if", "not", "melody", ".", "shape", "[", "0", "]", "==", "length", "*", "16", ":", "\n", "                ", "continue", "\n", "", "if", "np", ".", "sum", "(", "melody", "[", ":", ",", ":", "128", "]", ")", "<=", "2", ":", "\n", "                ", "continue", "\n", "", "melody_record", ".", "append", "(", "melody", ")", "\n", "acc", "=", "acc_data", "[", "song_idx", "]", "[", "phrase_idx", "]", "\n", "acc_record", ".", "append", "(", "acc", ")", "\n", "chord", "=", "chord_data", "[", "song_idx", "]", "[", "phrase_idx", "]", "\n", "chord_record", ".", "append", "(", "chord", ")", "\n", "song_reference", ".", "append", "(", "(", "song_idx", ",", "phrase_idx", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "melody_record", ")", ",", "np", ".", "array", "(", "acc_record", ")", ",", "np", ".", "array", "(", "chord_record", ")", ",", "song_reference", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.AccoMontage.dp_search": [[39, 150], ["print", "numpy.concatenate", "acc_utils.cosine_rhy", "acc_utils.chord_shift", "acc_utils.computeTIV", "acc_utils.cosine", "numpy.argmax", "range", "numpy.concatenate", "acc_utils.computeTIV", "len", "print", "numpy.concatenate", "acc_utils.cosine_rhy", "acc_utils.chord_shift", "acc_utils.computeTIV", "acc_utils.cosine", "numpy.argmax", "range", "numpy.array", "np.array.argsort", "range", "numpy.sum", "enumerate", "range", "str", "range", "numpy.concatenate", "acc_utils.computeTIV", "numpy.tile", "range", "len", "numpy.sum", "str", "range", "enumerate", "numpy.sum", "enumerate", "numpy.matmul", "range", "range", "numpy.argsort", "record.append", "range", "range", "numpy.sum", "numpy.tile", "numpy.transpose", "len", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine_rhy", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.chord_shift", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.computeTIV", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.computeTIV", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine_rhy", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.chord_shift", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.computeTIV", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.cosine", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.computeTIV"], ["", "def", "dp_search", "(", "query_phrases", ",", "seg_query", ",", "acc_pool", ",", "edge_weights", ",", "texture_filter", "=", "None", ",", "filter_id", "=", "None", ",", "spotlights", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Searching for Phrase 1'", ")", "\n", "query_length", "=", "[", "query_phrases", "[", "i", "]", ".", "shape", "[", "0", "]", "//", "16", "for", "i", "in", "range", "(", "len", "(", "query_phrases", ")", ")", "]", "\n", "mel", ",", "acc", ",", "chord", ",", "song_ref", "=", "acc_pool", "[", "query_length", "[", "0", "]", "]", "\n", "mel_set", "=", "mel", "\n", "rhy_set", "=", "np", ".", "concatenate", "(", "(", "np", ".", "sum", "(", "mel_set", "[", ":", ",", ":", ",", ":", "128", "]", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "mel_set", "[", ":", ",", ":", ",", "128", ":", "130", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "query_rhy", "=", "np", ".", "concatenate", "(", "(", "np", ".", "sum", "(", "query_phrases", "[", "0", "]", "[", ":", ",", ":", "128", "]", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "query_phrases", "[", "0", "]", "[", ":", ",", "128", ":", "130", "]", ")", ",", "axis", "=", "-", "1", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "rhythm_result", "=", "cosine_rhy", "(", "query_rhy", ",", "rhy_set", ")", "\n", "\n", "chord_set", "=", "chord", "\n", "chord_set", ",", "num_total", ",", "shift_const", "=", "chord_shift", "(", "chord_set", ")", "\n", "chord_set_TIV", "=", "computeTIV", "(", "chord_set", ")", "\n", "query_chord", "=", "query_phrases", "[", "0", "]", "[", ":", ",", "130", ":", "]", "[", ":", ":", "4", "]", "\n", "query_chord_TIV", "=", "computeTIV", "(", "query_chord", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "chord_score", ",", "arg_chord", "=", "cosine", "(", "query_chord_TIV", ",", "chord_set_TIV", ")", "\n", "score", "=", ".5", "*", "rhythm_result", "+", ".5", "*", "chord_score", "\n", "if", "not", "spotlights", "==", "None", ":", "\n", "        ", "for", "spot_idx", "in", "spotlights", ":", "\n", "            ", "for", "ref_idx", ",", "ref_item", "in", "enumerate", "(", "song_ref", ")", ":", "\n", "                    ", "if", "ref_item", "[", "0", "]", "==", "spot_idx", ":", "\n", "                        ", "score", "[", "ref_idx", "]", "+=", "1", "\n", "\n", "", "", "", "", "if", "not", "filter_id", "==", "None", ":", "\n", "        ", "mask", "=", "texture_filter", "[", "query_length", "[", "0", "]", "]", "[", "0", "]", "[", "filter_id", "[", "0", "]", "]", "*", "texture_filter", "[", "query_length", "[", "0", "]", "]", "[", "1", "]", "[", "filter_id", "[", "1", "]", "]", "-", "1", "\n", "score", "+=", "mask", "\n", "\n", "#print(np.argmax(score), np.max(score), score[0])", "\n", "", "path", "=", "[", "[", "(", "i", ",", "score", "[", "i", "]", ")", "]", "for", "i", "in", "range", "(", "acc", ".", "shape", "[", "0", "]", ")", "]", "\n", "shift", "=", "[", "[", "shift_const", "[", "i", "]", "]", "for", "i", "in", "arg_chord", "]", "\n", "melody_record", "=", "np", ".", "argmax", "(", "mel_set", ",", "axis", "=", "-", "1", ")", "\n", "record", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "query_length", ")", ")", ":", "\n", "        ", "print", "(", "'Searching for Phrase'", ",", "i", "+", "1", ")", "\n", "mel", ",", "acc", ",", "chord", ",", "song_ref", "=", "acc_pool", "[", "query_length", "[", "i", "]", "]", "\n", "\n", "weight_key", "=", "'l'", "+", "str", "(", "query_length", "[", "i", "-", "1", "]", ")", "+", "str", "(", "query_length", "[", "i", "]", ")", "\n", "contras_result", "=", "edge_weights", "[", "weight_key", "]", "\n", "#contras_result = (contras_result - 0.9) * 10   #rescale contrastive result if necessary", "\n", "#print(np.sort(contras_result[np.random.randint(2000)][-20:]))", "\n", "if", "query_length", "[", "i", "-", "1", "]", "==", "query_length", "[", "i", "]", ":", "\n", "            ", "for", "j", "in", "range", "(", "contras_result", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "contras_result", "[", "j", ",", "j", "]", "=", "-", "1", "#the ith phrase does not transition to itself at i+1", "\n", "for", "k", "in", "range", "(", "j", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "if", "song_ref", "[", "k", "]", "[", "0", "]", "!=", "song_ref", "[", "j", "]", "[", "0", "]", ":", "\n", "                        ", "break", "\n", "", "contras_result", "[", "j", ",", "k", "]", "=", "-", "1", "#ith phrase does not transition to its ancestors in the same song.", "\n", "#contras_result = (contras_result - 0.99) * 100", "\n", "", "", "", "if", "i", ">", "1", ":", "\n", "            ", "contras_result", "=", "contras_result", "[", "[", "item", "[", "-", "1", "]", "[", "1", "]", "for", "item", "in", "record", "]", "]", "\n", "\n", "", "if", "not", "spotlights", "==", "None", ":", "\n", "            ", "for", "spot_idx", "in", "spotlights", ":", "\n", "                ", "for", "ref_idx", ",", "ref_item", "in", "enumerate", "(", "song_ref", ")", ":", "\n", "                    ", "if", "ref_item", "[", "0", "]", "==", "spot_idx", ":", "\n", "                        ", "contras_result", "[", ":", ",", "ref_idx", "]", "+=", "1", "\n", "\n", "", "", "", "", "mel_set", "=", "mel", "\n", "rhy_set", "=", "np", ".", "concatenate", "(", "(", "np", ".", "sum", "(", "mel_set", "[", ":", ",", ":", ",", ":", "128", "]", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "mel_set", "[", ":", ",", ":", ",", "128", ":", "130", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "query_rhy", "=", "np", ".", "concatenate", "(", "(", "np", ".", "sum", "(", "query_phrases", "[", "i", "]", "[", ":", ",", ":", "128", "]", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "query_phrases", "[", "i", "]", "[", ":", ",", "128", ":", "130", "]", ")", ",", "axis", "=", "-", "1", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "rhythm_result", "=", "cosine_rhy", "(", "query_rhy", ",", "rhy_set", ")", "\n", "chord_set", "=", "chord", "\n", "chord_set", ",", "num_total", ",", "shift_const", "=", "chord_shift", "(", "chord_set", ")", "\n", "chord_set_TIV", "=", "computeTIV", "(", "chord_set", ")", "\n", "query_chord", "=", "query_phrases", "[", "i", "]", "[", ":", ",", "130", ":", "]", "[", ":", ":", "4", "]", "\n", "query_chord_TIV", "=", "computeTIV", "(", "query_chord", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "chord_score", ",", "arg_chord", "=", "cosine", "(", "query_chord_TIV", ",", "chord_set_TIV", ")", "\n", "sim_this_layer", "=", ".5", "*", "rhythm_result", "+", ".5", "*", "chord_score", "\n", "if", "not", "spotlights", "==", "None", ":", "\n", "            ", "for", "spot_idx", "in", "spotlights", ":", "\n", "                ", "for", "ref_idx", ",", "ref_item", "in", "enumerate", "(", "song_ref", ")", ":", "\n", "                    ", "if", "ref_item", "[", "0", "]", "==", "spot_idx", ":", "\n", "                        ", "sim_this_layer", "[", "ref_idx", "]", "+=", "1", "\n", "", "", "", "", "score_this_layer", "=", ".7", "*", "contras_result", "+", ".3", "*", "np", ".", "tile", "(", "sim_this_layer", "[", "np", ".", "newaxis", ",", ":", "]", ",", "(", "contras_result", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "+", "np", ".", "tile", "(", "score", "[", ":", ",", "np", ".", "newaxis", "]", ",", "(", "1", ",", "contras_result", ".", "shape", "[", "1", "]", ")", ")", "\n", "melody_flat", "=", "np", ".", "argmax", "(", "mel_set", ",", "axis", "=", "-", "1", ")", "\n", "if", "seg_query", "[", "i", "]", "==", "seg_query", "[", "i", "-", "1", "]", ":", "\n", "            ", "melody_pre", "=", "melody_record", "\n", "matrix", "=", "np", ".", "matmul", "(", "melody_pre", ",", "np", ".", "transpose", "(", "melody_flat", ",", "(", "1", ",", "0", ")", ")", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "melody_pre", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "*", "(", "np", ".", "linalg", ".", "norm", "(", "np", ".", "transpose", "(", "melody_flat", ",", "(", "1", ",", "0", ")", ")", ",", "axis", "=", "0", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "for", "k", "in", "range", "(", "matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "matrix", "[", "k", ",", ":", "k", "]", "=", "-", "1", "\n", "", "", "else", ":", "\n", "                ", "for", "k", "in", "range", "(", "len", "(", "record", ")", ")", ":", "\n", "                    ", "matrix", "[", "k", ",", ":", "record", "[", "k", "]", "[", "-", "1", "]", "[", "1", "]", "]", "=", "-", "1", "\n", "", "", "matrix", "=", "(", "matrix", ">", "0.99", ")", "*", "1.", "\n", "#print(matrix.any() == 1)", "\n", "#print(matrix.shape)", "\n", "score_this_layer", "+=", "matrix", "\n", "#print(score_this_layer.shape)", "\n", "#print('score_this_layer:', score_this_layer.shape)", "\n", "", "topk", "=", "1", "\n", "args", "=", "np", ".", "argsort", "(", "score_this_layer", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", ",", ":", "]", "[", ":", "topk", ",", ":", "]", "\n", "#print(args.shape, 'args:', args[:10, :2])", "\n", "#argmax = args[0, :]", "\n", "record", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "args", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "args", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "record", ".", "append", "(", "(", "score_this_layer", "[", "args", "[", "k", ",", "j", "]", ",", "j", "]", ",", "(", "args", "[", "k", ",", "j", "]", ",", "j", ")", ")", ")", "\n", "\n", "", "", "shift_this_layer", "=", "[", "[", "shift_const", "[", "k", "]", "]", "for", "k", "in", "arg_chord", "]", "\n", "\n", "new_path", "=", "[", "path", "[", "item", "[", "-", "1", "]", "[", "0", "]", "]", "+", "[", "(", "item", "[", "-", "1", "]", "[", "1", "]", ",", "sim_this_layer", "[", "item", "[", "-", "1", "]", "[", "1", "]", "]", ")", "]", "for", "item", "in", "record", "]", "\n", "new_shift", "=", "[", "shift", "[", "item", "[", "-", "1", "]", "[", "0", "]", "]", "+", "shift_this_layer", "[", "item", "[", "-", "1", "]", "[", "1", "]", "]", "for", "item", "in", "record", "]", "\n", "\n", "melody_record", "=", "melody_flat", "[", "[", "item", "[", "-", "1", "]", "[", "1", "]", "for", "item", "in", "record", "]", "]", "\n", "path", "=", "new_path", "\n", "shift", "=", "new_shift", "\n", "score", "=", "np", ".", "array", "(", "[", "item", "[", "0", "]", "for", "item", "in", "record", "]", ")", "\n", "\n", "", "arg", "=", "score", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "return", "[", "path", "[", "arg", "[", "i", "]", "]", "for", "i", "in", "range", "(", "topk", ")", "]", ",", "[", "shift", "[", "arg", "[", "i", "]", "]", "for", "i", "in", "range", "(", "topk", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.AccoMontage.render_acc": [[151, 176], ["numpy.empty", "enumerate", "acc_utils.melodySplit", "acc_utils.chordSplit", "acc_utils.melodySplit", "model.DisentangleVAE.init_model().cuda", "torch.load", "DisentangleVAE.init_model().cuda.load_state_dict", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "DisentangleVAE.init_model().cuda.inference", "acc_utils.accomapnimentGeneration", "int", "numpy.roll", "numpy.concatenate", "model.DisentangleVAE.init_model", "torch.from_numpy().float", "torch.from_numpy().float", "torch.device", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.melodySplit", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.chordSplit", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.melodySplit", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.inference", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.acc_utils.accomapnimentGeneration", "home.repos.pwc.inspect_result.zhaojw1998_accomontage.models.model.DisentangleVAE.init_model"], ["", "def", "render_acc", "(", "pianoRoll", ",", "chord_table", ",", "query_seg", ",", "indices", ",", "shifts", ",", "acc_pool", ")", ":", "\n", "    ", "acc_emsemble", "=", "np", ".", "empty", "(", "(", "0", ",", "128", ")", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "length", "=", "int", "(", "query_seg", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "shift", "=", "shifts", "[", "i", "]", "\n", "acc_matrix", "=", "np", ".", "roll", "(", "acc_pool", "[", "length", "]", "[", "1", "]", "[", "idx", "[", "0", "]", "]", ",", "shift", ",", "axis", "=", "-", "1", ")", "\n", "acc_emsemble", "=", "np", ".", "concatenate", "(", "(", "acc_emsemble", ",", "acc_matrix", ")", ",", "axis", "=", "0", ")", "\n", "#print(acc_emsemble.shape)", "\n", "", "acc_emsemble", "=", "melodySplit", "(", "acc_emsemble", ",", "WINDOWSIZE", "=", "32", ",", "HOPSIZE", "=", "32", ",", "VECTORSIZE", "=", "128", ")", "\n", "chord_table", "=", "chordSplit", "(", "chord_table", ",", "8", ",", "8", ")", "\n", "#print(acc_emsemble.shape, chord_table.shape)", "\n", "pianoRoll", "=", "melodySplit", "(", "pianoRoll", ",", "WINDOWSIZE", "=", "32", ",", "HOPSIZE", "=", "32", ",", "VECTORSIZE", "=", "142", ")", "\n", "\n", "model", "=", "DisentangleVAE", ".", "init_model", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "cuda", "(", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'./data files/model_master_final.pt'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "pr_matrix", "=", "torch", ".", "from_numpy", "(", "acc_emsemble", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "#pr_matrix_shifted = torch.from_numpy(pr_matrix_shifted).float().cuda()", "\n", "gt_chord", "=", "torch", ".", "from_numpy", "(", "chord_table", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "#print(gt_chord.shape, pr_matrix.shape)", "\n", "est_x", "=", "model", ".", "inference", "(", "pr_matrix", ",", "gt_chord", ",", "sample", "=", "False", ")", "\n", "#print('est:', est_x.shape)", "\n", "#est_x_shifted = model.inference(pr_matrix_shifted, gt_chord, sample=False)", "\n", "midiReGen", "=", "accomapnimentGeneration", "(", "pianoRoll", ",", "est_x", ",", "120", ")", "\n", "return", "midiReGen", "\n", "#midiReGen.write('accompaniment_test_NEW.mid')", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.AccoMontage.ref_spotlight": [[178, 191], ["pandas.read_excel", "check_idx.append", "list"], "function", ["None"], ["", "def", "ref_spotlight", "(", "ref_name_list", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_excel", "(", "\"./data files/POP909 4bin quntization/four_beat_song_index.xlsx\"", ")", "\n", "check_idx", "=", "[", "]", "\n", "for", "name", "in", "ref_name_list", ":", "\n", "        ", "line", "=", "df", "[", "df", ".", "name", "==", "name", "]", "\n", "if", "not", "line", ".", "empty", ":", "\n", "            ", "check_idx", ".", "append", "(", "line", ".", "index", ")", "#read by pd, neglect first row, index starts from 0.", "\n", "#print(check_idx)", "\n", "", "", "for", "name", "in", "ref_name_list", ":", "\n", "        ", "line", "=", "df", "[", "df", ".", "artist", "==", "name", "]", "\n", "if", "not", "line", ".", "empty", ":", "\n", "            ", "check_idx", "+=", "list", "(", "line", ".", "index", ")", "#read by pd, neglect first row, index starts from 0", "\n", "", "", "return", "check_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zhaojw1998_accomontage.util_tools.AccoMontage.get_texture_filter": [[193, 223], ["numpy.sum", "numpy.sort", "numpy.sort", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "get_texture_filter", "(", "acc_pool", ")", ":", "\n", "    ", "texture_filter", "=", "{", "}", "\n", "for", "key", "in", "acc_pool", ":", "\n", "        ", "acc_track", "=", "acc_pool", "[", "key", "]", "[", "1", "]", "\n", "#CALCULATE HORIZONTAL DENSITY", "\n", "onset_positions", "=", "(", "np", ".", "sum", "(", "acc_track", ",", "axis", "=", "-", "1", ")", ">", "0", ")", "*", "1.", "\n", "HD", "=", "np", ".", "sum", "(", "onset_positions", ",", "axis", "=", "-", "1", ")", "/", "acc_track", ".", "shape", "[", "1", "]", "\n", "simu_notes", "=", "np", ".", "sum", "(", "(", "acc_track", ">", "0", ")", "*", "1.", ",", "axis", "=", "-", "1", ")", "\n", "VD", "=", "np", ".", "sum", "(", "simu_notes", ",", "axis", "=", "-", "1", ")", "/", "(", "np", ".", "sum", "(", "onset_positions", ",", "axis", "=", "-", "1", ")", "+", "1e-10", ")", "\n", "dst", "=", "np", ".", "sort", "(", "HD", ")", "\n", "HD_anchors", "=", "[", "dst", "[", "len", "(", "dst", ")", "//", "5", "]", ",", "dst", "[", "len", "(", "dst", ")", "//", "5", "*", "2", "]", ",", "dst", "[", "len", "(", "dst", ")", "//", "5", "*", "3", "]", ",", "dst", "[", "len", "(", "dst", ")", "//", "5", "*", "4", "]", "]", "\n", "HD_Bins", "=", "[", "\n", "HD", "<", "HD_anchors", "[", "0", "]", ",", "\n", "(", "HD", ">=", "HD_anchors", "[", "0", "]", ")", "*", "(", "HD", "<", "HD_anchors", "[", "1", "]", ")", ",", "\n", "(", "HD", ">=", "HD_anchors", "[", "1", "]", ")", "*", "(", "HD", "<", "HD_anchors", "[", "2", "]", ")", ",", "\n", "(", "HD", ">=", "HD_anchors", "[", "2", "]", ")", "*", "(", "HD", "<", "HD_anchors", "[", "3", "]", ")", ",", "\n", "HD", ">=", "HD_anchors", "[", "3", "]", "\n", "]", "\n", "\n", "dst", "=", "np", ".", "sort", "(", "VD", ")", "\n", "VD_anchors", "=", "[", "dst", "[", "len", "(", "dst", ")", "//", "5", "]", ",", "dst", "[", "len", "(", "dst", ")", "//", "5", "*", "2", "]", ",", "dst", "[", "len", "(", "dst", ")", "//", "5", "*", "3", "]", ",", "dst", "[", "len", "(", "dst", ")", "//", "5", "*", "4", "]", "]", "\n", "VD_Bins", "=", "[", "\n", "VD", "<", "VD_anchors", "[", "0", "]", ",", "\n", "(", "VD", ">=", "VD_anchors", "[", "0", "]", ")", "*", "(", "VD", "<", "VD_anchors", "[", "1", "]", ")", ",", "\n", "(", "VD", ">=", "VD_anchors", "[", "1", "]", ")", "*", "(", "VD", "<", "VD_anchors", "[", "2", "]", ")", ",", "\n", "(", "VD", ">=", "VD_anchors", "[", "2", "]", ")", "*", "(", "VD", "<", "VD_anchors", "[", "3", "]", ")", ",", "\n", "VD", ">=", "VD_anchors", "[", "3", "]", "\n", "]", "\n", "texture_filter", "[", "key", "]", "=", "(", "HD_Bins", ",", "VD_Bins", ")", "\n", "", "return", "texture_filter", "", "", ""]]}