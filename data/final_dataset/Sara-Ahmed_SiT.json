{"home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.engine.train_one_epoch": [[19, 106], ["os.path.join", "pathlib.Path().mkdir", "utils.MetricLogger", "enumerate", "utils.MetricLogger.synchronize_between_processes", "print", "utils.MetricLogger.log_every", "enumerate", "optimizer.zero_grad", "torch.cuda.synchronize", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "pathlib.Path", "datasets.datasets_utils.GMML_replace_list", "im.cuda", "r.type().cuda", "c.cuda", "m.cuda", "torch.cuda.amp.autocast", "SiT_model", "math.isfinite", "print", "sys.exit", "loss.backward", "optimizer.step", "fp16_scaler.scale().backward", "fp16_scaler.step", "fp16_scaler.update", "utils.MetricLogger.meters.items", "len", "utils.is_main_process", "torch.cat", "torchvision.utils.save_image", "loss.item", "utils.clip_gradients", "fp16_scaler.unscale_", "utils.clip_gradients", "loss.item", "r.type", "loss.item", "fp16_scaler.scale", "hasattr", "rot_l.item", "hasattr", "rot_l_w.item", "hasattr", "contr_l.item", "hasattr", "contr_l_w.item", "hasattr", "recons_l.item", "hasattr", "recons_l_w.item", "str().zfill", "[].cpu", "[].cpu", "rec_imgs[].cpu", "min", "str", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GMML_replace_list", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_main_process"], ["def", "train_one_epoch", "(", "SiT_model", ",", "data_loader", ",", "optimizer", ",", "lr_schedule", ",", "wd_schedule", ",", "epoch", ",", "fp16_scaler", ",", "args", ")", ":", "\n", "\n", "    ", "save_recon", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'reconstruction_samples'", ")", "\n", "Path", "(", "save_recon", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "bz", "=", "args", ".", "batch_size", "\n", "plot_", "=", "True", "if", "args", ".", "rec_head", "==", "1", "else", "False", "\n", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Epoch: [{}/{}]'", ".", "format", "(", "epoch", ",", "args", ".", "epochs", ")", "\n", "for", "it", ",", "(", "(", "im", ",", "rot", ",", "im_corr", ",", "im_mask", ")", ",", "_", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "data_loader", ",", "100", ",", "header", ")", ")", ":", "\n", "# update weight decay and learning rate according to their schedule", "\n", "        ", "it", "=", "len", "(", "data_loader", ")", "*", "epoch", "+", "it", "# global training iteration", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr_schedule", "[", "it", "]", "\n", "if", "i", "==", "0", ":", "# only the first group is regularized", "\n", "                ", "param_group", "[", "\"weight_decay\"", "]", "=", "wd_schedule", "[", "it", "]", "\n", "\n", "", "", "if", "args", ".", "drop_replace", ">", "0", ":", "\n", "            ", "im_corr", ",", "im_mask", "=", "datasets_utils", ".", "GMML_replace_list", "(", "im", ",", "im_corr", ",", "im_mask", ",", "drop_type", "=", "args", ".", "drop_type", ",", "\n", "max_replace", "=", "args", ".", "drop_replace", ",", "align", "=", "args", ".", "drop_align", ")", "\n", "\n", "# move to gpu", "\n", "", "im", "=", "[", "im", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "im", "in", "im", "]", "\n", "rot", "=", "[", "r", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "r", "in", "rot", "]", "\n", "im_corr", "=", "[", "c", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "c", "in", "im_corr", "]", "\n", "im_mask", "=", "[", "m", ".", "cuda", "(", "non_blocking", "=", "True", ")", "for", "m", "in", "im_mask", "]", "\n", "\n", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "fp16_scaler", "is", "not", "None", ")", ":", "\n", "            ", "rot_l", ",", "contr_l", ",", "recons_l", ",", "rot_l_w", ",", "contr_l_w", ",", "recons_l_w", ",", "rec_imgs", "=", "SiT_model", "(", "im", ",", "im_corr", ",", "im_mask", ",", "rot", ")", "\n", "\n", "#-------------------------------------------------", "\n", "if", "plot_", "==", "True", "and", "utils", ".", "is_main_process", "(", ")", ":", "# and args.saveckp_freq and epoch % args.saveckp_freq == 0:", "\n", "                ", "plot_", "=", "False", "\n", "#validating: check the reconstructed images", "\n", "print_out", "=", "save_recon", "+", "'/epoch_'", "+", "str", "(", "epoch", ")", ".", "zfill", "(", "5", ")", "+", "'.jpg'", "\n", "imagesToPrint", "=", "torch", ".", "cat", "(", "[", "im", "[", "0", "]", "[", "0", ":", "min", "(", "15", ",", "bz", ")", "]", ".", "cpu", "(", ")", ",", "im_corr", "[", "0", "]", "[", "0", ":", "min", "(", "15", ",", "bz", ")", "]", ".", "cpu", "(", ")", ",", "\n", "rec_imgs", "[", "0", ":", "min", "(", "15", ",", "bz", ")", "]", ".", "cpu", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "imagesToPrint", ",", "print_out", ",", "nrow", "=", "min", "(", "15", ",", "bz", ")", ",", "normalize", "=", "True", ",", "range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "", "loss", "=", "rot_l_w", "+", "contr_l_w", "+", "recons_l_w", "\n", "\n", "\n", "", "if", "not", "math", ".", "isfinite", "(", "loss", ".", "item", "(", ")", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss", ".", "item", "(", ")", ")", ",", "force", "=", "True", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# model update", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "param_norms", "=", "None", "\n", "if", "fp16_scaler", "is", "None", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip_grad", ":", "\n", "                ", "param_norms", "=", "utils", ".", "clip_gradients", "(", "SiT_model", ",", "args", ".", "clip_grad", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "fp16_scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip_grad", ":", "\n", "                ", "fp16_scaler", ".", "unscale_", "(", "optimizer", ")", "\n", "param_norms", "=", "utils", ".", "clip_gradients", "(", "SiT_model", ",", "args", ".", "clip_grad", ")", "\n", "", "fp16_scaler", ".", "step", "(", "optimizer", ")", "\n", "fp16_scaler", ".", "update", "(", ")", "\n", "\n", "\n", "# logging", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "metric_logger", ".", "update", "(", "rot_l", "=", "rot_l", ".", "item", "(", ")", "if", "hasattr", "(", "rot_l", ",", "'item'", ")", "else", "0.", ")", "\n", "metric_logger", ".", "update", "(", "rot_l_w", "=", "rot_l_w", ".", "item", "(", ")", "if", "hasattr", "(", "rot_l", ",", "'item'", ")", "else", "0.", ")", "\n", "\n", "metric_logger", ".", "update", "(", "contr_l", "=", "contr_l", ".", "item", "(", ")", "if", "hasattr", "(", "contr_l", ",", "'item'", ")", "else", "0.", ")", "\n", "metric_logger", ".", "update", "(", "contr_l_w", "=", "contr_l_w", ".", "item", "(", ")", "if", "hasattr", "(", "contr_l", ",", "'item'", ")", "else", "0.", ")", "\n", "\n", "metric_logger", ".", "update", "(", "recons_l", "=", "recons_l", ".", "item", "(", ")", "if", "hasattr", "(", "recons_l", ",", "'item'", ")", "else", "0.", ")", "\n", "metric_logger", ".", "update", "(", "recons_l_w", "=", "recons_l_w", ".", "item", "(", ")", "if", "hasattr", "(", "recons_l", ",", "'item'", ")", "else", "0.", ")", "\n", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "update", "(", "wd", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"weight_decay\"", "]", ")", "\n", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.FullpiplineSiT.__init__": [[168, 194], ["torch.Module.__init__", "losses.SimCLR", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "vision_transformer.RECHead", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "vision_transformer.ContrastiveHead", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "vision_transformer.ContrastiveHead", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "backbone", ")", ":", "\n", "        ", "super", "(", "FullpiplineSiT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "embed_dim", "=", "backbone", ".", "embed_dim", "\n", "\n", "self", ".", "rec", "=", "args", ".", "rec_head", "\n", "self", ".", "drop_only", "=", "args", ".", "drop_only", "\n", "\n", "self", ".", "rot", "=", "args", ".", "rot_head", "\n", "self", ".", "simCLR", "=", "args", ".", "simCLR_head", "\n", "\n", "# create full model", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "rec_head", "=", "RECHead", "(", "embed_dim", ",", "patch_size", "=", "args", ".", "patch_size", ")", "if", "(", "args", ".", "rec_head", "==", "1", ")", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "contr_head", "=", "ContrastiveHead", "(", "embed_dim", ",", "args", ".", "simCLR_outdim", ")", "if", "(", "args", ".", "simCLR_head", "==", "1", ")", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "rot_head", "=", "ContrastiveHead", "(", "embed_dim", ",", "4", ")", "if", "(", "args", ".", "rot_head", "==", "1", ")", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "# create learnable parameters for the MTL task", "\n", "self", ".", "use_uncert", "=", "args", ".", "use_uncert", "\n", "self", ".", "rec_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "if", "(", "args", ".", "rec_head", "==", "1", "and", "args", ".", "use_uncert", "==", "1", ")", "else", "0", "\n", "self", ".", "contr_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "if", "(", "args", ".", "simCLR_head", "==", "1", "and", "args", ".", "use_uncert", "==", "1", ")", "else", "0", "\n", "self", ".", "rot_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "if", "(", "args", ".", "rot_head", "==", "1", "and", "args", ".", "use_uncert", "==", "1", ")", "else", "0", "\n", "\n", "\n", "self", ".", "simCLR_loss", "=", "SimCLR", "(", "args", ".", "simCLR_tempr", ")", "\n", "self", ".", "rot_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.FullpiplineSiT.uncertaintyLoss": [[196, 199], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "uncertaintyLoss", "(", "self", ",", "loss_", ",", "scalar_", ")", ":", "\n", "        ", "loss_w", "=", "(", "0.5", "/", "(", "scalar_", "**", "2", ")", "*", "loss_", "+", "torch", ".", "log", "(", "1", "+", "scalar_", "**", "2", ")", ")", "if", "(", "self", ".", "use_uncert", "==", "1", ")", "else", "loss_", "\n", "return", "loss_w", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.FullpiplineSiT.forward": [[200, 233], ["main.FullpiplineSiT.backbone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "main.FullpiplineSiT.rot_loss", "main.FullpiplineSiT.uncertaintyLoss", "main.FullpiplineSiT.simCLR_loss", "main.FullpiplineSiT.uncertaintyLoss", "main.FullpiplineSiT.rec_head", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "main.FullpiplineSiT.uncertaintyLoss", "main.FullpiplineSiT.rot_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "main.FullpiplineSiT.contr_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "recloss[].mean", "torch.l1_loss.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.FullpiplineSiT.uncertaintyLoss", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.FullpiplineSiT.uncertaintyLoss", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.FullpiplineSiT.uncertaintyLoss"], ["", "def", "forward", "(", "self", ",", "im", ",", "im_corr", ",", "im_mask", ",", "rot", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "torch", ".", "cat", "(", "im_corr", "[", "0", ":", "]", ")", ")", "\n", "\n", "#calculate rotation loss", "\n", "if", "self", ".", "rot", "==", "1", ":", "\n", "            ", "loss_rot", "=", "self", ".", "rot_loss", "(", "self", ".", "rot_head", "(", "x", "[", ":", ",", "0", "]", ")", ",", "torch", ".", "cat", "(", "rot", "[", ":", "2", "]", ")", ")", "\n", "loss_rot_w", "=", "self", ".", "uncertaintyLoss", "(", "loss_rot", ",", "self", ".", "rot_w", ")", "\n", "", "else", ":", "\n", "            ", "loss_rot", ",", "loss_rot_w", "=", "0", ",", "0", "\n", "\n", "\n", "#calculate contrastive loss", "\n", "", "if", "self", ".", "simCLR", "==", "1", ":", "\n", "            ", "loss_contr", "=", "self", ".", "simCLR_loss", "(", "self", ".", "contr_head", "(", "x", "[", ":", ",", "1", "]", ")", ")", "\n", "loss_contr_w", "=", "self", ".", "uncertaintyLoss", "(", "loss_contr", ",", "self", ".", "contr_w", ")", "\n", "", "else", ":", "\n", "            ", "loss_contr", ",", "loss_contr_w", "=", "0", ",", "0", "\n", "\n", "#calculate reconstruction loss    ", "\n", "", "if", "self", ".", "rec", "==", "1", ":", "\n", "            ", "recons_imgs", "=", "self", ".", "rec_head", "(", "x", "[", ":", ",", "2", ":", "]", ")", "\n", "recloss", "=", "F", ".", "l1_loss", "(", "recons_imgs", ",", "torch", ".", "cat", "(", "im", "[", "0", ":", "]", ")", ",", "reduction", "=", "'none'", ")", "\n", "loss_rec", "=", "recloss", "[", "torch", ".", "cat", "(", "im_mask", "[", "0", ":", "]", ")", "==", "1", "]", ".", "mean", "(", ")", "if", "(", "self", ".", "drop_only", "==", "1", ")", "else", "recloss", ".", "mean", "(", ")", "\n", "\n", "loss_rec_w", "=", "self", ".", "uncertaintyLoss", "(", "loss_rec", ",", "self", ".", "rec_w", ")", "\n", "\n", "", "else", ":", "\n", "            ", "loss_rec", ",", "loss_rec_w", "=", "0", ",", "0", "\n", "recons_imgs", "=", "None", "\n", "\n", "\n", "", "return", "loss_rot", ",", "loss_contr", ",", "loss_rec", ",", "loss_rot_w", ",", "loss_contr_w", ",", "loss_rec_w", ",", "recons_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.get_args_parser": [[26, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'SiTv2'", ",", "add_help", "=", "False", ")", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'vit_tiny'", ",", "type", "=", "str", ",", "choices", "=", "[", "'vit_tiny'", ",", "'vit_small'", ",", "'vit_base'", "]", ",", "help", "=", "\"Name of architecture to train.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--img_size'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "help", "=", "\"Input size to the Transformer.\"", ")", "\n", "\n", "\n", "##################### Pre-text tasks", "\n", "# Reconstruction parameters   ", "\n", "parser", ".", "add_argument", "(", "'--rec_head'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "\"use recons head or not\"", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_perc'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "help", "=", "'Drop X percentage of the input image'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_replace'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "help", "=", "'Replace X percentage of the input image'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--drop_align'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Set to patch size to align corruption with patch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_type'", ",", "type", "=", "str", ",", "default", "=", "'noise'", ",", "help", "=", "'Type of alien concept'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_only'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'consider only the loss from corrupted patches'", ")", "\n", "\n", "# SimCLR parameters", "\n", "parser", ".", "add_argument", "(", "'--simCLR_head'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "\"use simclr head or not\"", ")", "\n", "parser", ".", "add_argument", "(", "'--simCLR_tempr'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "help", "=", "\"Simclr tempreture\"", ")", "\n", "parser", ".", "add_argument", "(", "'--simCLR_outdim'", ",", "default", "=", "256", ",", "type", "=", "int", ",", "help", "=", "\"Dimensionality of the head output.\"", ")", "\n", "\n", "# Rotation parameters", "\n", "parser", ".", "add_argument", "(", "'--rot_head'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "\"use rotation head or not\"", ")", "\n", "\n", "# Usage of uncertainty", "\n", "parser", ".", "add_argument", "(", "'--use_uncert'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "\"Using uncertainty for multi-task learning\"", ")", "\n", "#####################################", "\n", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "'--data_set'", ",", "default", "=", "'STL10'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'STL10'", ",", "'MNIST'", ",", "'CIFAR10'", ",", "'CIFAR100'", ",", "'Flowers'", ",", "'Aircraft'", ",", "'Cars'", ",", "'ImageNet'", ",", "'TinyImageNet'", ",", "'Pets'", "]", ",", "\n", "help", "=", "'Name of the dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_location'", ",", "default", "=", "'.'", ",", "type", "=", "str", ",", "help", "=", "'Dataset location.'", ")", "\n", "\n", "# Hyper-parameters", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "help", "=", "\"Batch size per GPU.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "500", ",", "type", "=", "int", ",", "help", "=", "\"Number of epochs of training.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.04", ",", "help", "=", "\"weight decay\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay_end'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "help", "=", "\"Final value of the weight decay.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "0.0005", ",", "type", "=", "float", ",", "help", "=", "\"Learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "help", "=", "\"Target LR at the end of optimization.\"", ")", "\n", "\n", "# Training/Optimization parameters", "\n", "parser", ".", "add_argument", "(", "'--use_fp16'", ",", "type", "=", "utils", ".", "bool_flag", ",", "default", "=", "True", ",", "help", "=", "\"Whether or not to use half precision for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_grad'", ",", "type", "=", "float", ",", "default", "=", "3.0", ",", "help", "=", "\"Maximal parameter gradient norm.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_epochs\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "\"Number of epochs for the linear learning-rate warm up.\"", ")", "\n", "\n", "# Misc", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "\".\"", ",", "type", "=", "str", ",", "help", "=", "'Path to save logs and checkpoints.'", ")", "\n", "parser", ".", "add_argument", "(", "'--saveckp_freq'", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "'Save checkpoint every x epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Number of data loading workers per GPU.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dist_url\"", ",", "default", "=", "\"env://\"", ",", "type", "=", "str", ",", "help", "=", "\"\"\"url used to set up\n        distributed training; see https://pytorch.org/docs/stable/distributed.html\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Please ignore and do not set this argument.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.main.train_SiTv2": [[88, 164], ["utils.init_distributed_mode", "utils.fix_random_seeds", "print", "print", "datasets.datasets_utils.DataAugmentationSiT", "datasets.prepare_datasets.build_dataset", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "sum", "main.FullpiplineSiT", "nn.parallel.DistributedDataParallel.cuda", "torch.parallel.DistributedDataParallel", "print", "print", "utils.get_params_groups", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "utils.cosine_scheduler", "utils.cosine_scheduler", "utils.restart_from_checkpoint", "time.time", "print", "range", "str", "print", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "len", "len", "os.path.join", "torch.utils.data.DataLoader.sampler.set_epoch", "engine.train_one_epoch", "utils.save_on_master", "utils.is_main_process", "time.time", "datetime.timedelta", "utils.get_sha", "p.numel", "nn.parallel.DistributedDataParallel.state_dict", "torch.optim.AdamW.state_dict", "fp16_scaler.state_dict", "os.path.join", "utils.save_on_master", "len", "nn.parallel.DistributedDataParallel.parameters", "os.path.join", "f.write", "int", "sorted", "utils.get_world_size", "engine.train_one_epoch.items", "str", "dict().items", "json.dumps", "pathlib.Path", "dict", "vars"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.init_distributed_mode", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.prepare_datasets.build_dataset", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.engine.train_one_epoch", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.save_on_master", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_main_process", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.save_on_master", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.get_world_size"], ["", "def", "train_SiTv2", "(", "args", ")", ":", "\n", "    ", "utils", ".", "init_distributed_mode", "(", "args", ")", "\n", "utils", ".", "fix_random_seeds", "(", "args", ".", "seed", ")", "\n", "print", "(", "\"git:\\n  {}\\n\"", ".", "format", "(", "utils", ".", "get_sha", "(", ")", ")", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "\"%s: %s\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "sorted", "(", "dict", "(", "vars", "(", "args", ")", ")", ".", "items", "(", ")", ")", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "epochs", "+=", "1", "\n", "\n", "################ Preparing Dataset", "\n", "transform", "=", "datasets_utils", ".", "DataAugmentationSiT", "(", "args", ")", "\n", "dataset", ",", "_", "=", "prepare_datasets", ".", "build_dataset", "(", "args", ",", "True", ",", "trnsfrm", "=", "transform", ",", "training_mode", "=", "'SSL'", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "sampler", "=", "sampler", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "print", "(", "f\"==> {args.data_set} training set is loaded.\"", ")", "\n", "print", "(", "f\"-------> The dataset consists of {len(dataset)} images.\"", ")", "\n", "\n", "\n", "################ Create Transformer", "\n", "SiT_model", "=", "vits", ".", "__dict__", "[", "args", ".", "model", "]", "(", "img_size", "=", "[", "args", ".", "img_size", "]", ")", "\n", "n_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "SiT_model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n", "SiT_model", "=", "FullpiplineSiT", "(", "args", ",", "SiT_model", ")", "\n", "SiT_model", "=", "SiT_model", ".", "cuda", "(", ")", "\n", "\n", "SiT_model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "SiT_model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "print", "(", "f\"==> {args.model} model is created.\"", ")", "\n", "print", "(", "f\"-------> The model has {n_params} parameters.\"", ")", "\n", "\n", "################ optimization ...", "\n", "# Create Optimizer", "\n", "params_groups", "=", "utils", ".", "get_params_groups", "(", "SiT_model", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "params_groups", ")", "# to use with ViTs", "\n", "\n", "fp16_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "if", "args", ".", "use_fp16", "else", "None", "\n", "\n", "# Initialize schedulers ", "\n", "lr_schedule", "=", "utils", ".", "cosine_scheduler", "(", "args", ".", "lr", "*", "(", "args", ".", "batch_size", "*", "utils", ".", "get_world_size", "(", ")", ")", "/", "256.", ",", "\n", "args", ".", "min_lr", ",", "args", ".", "epochs", ",", "len", "(", "data_loader", ")", ",", "warmup_epochs", "=", "args", ".", "warmup_epochs", ")", "\n", "wd_schedule", "=", "utils", ".", "cosine_scheduler", "(", "args", ".", "weight_decay", ",", "args", ".", "weight_decay_end", ",", "args", ".", "epochs", ",", "len", "(", "data_loader", ")", ")", "\n", "\n", "################ Resume Training if exist", "\n", "to_restore", "=", "{", "\"epoch\"", ":", "0", "}", "\n", "utils", ".", "restart_from_checkpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"checkpoint.pth\"", ")", ",", "\n", "run_variables", "=", "to_restore", ",", "SiT_model", "=", "SiT_model", ",", "\n", "optimizer", "=", "optimizer", ",", "fp16_scaler", "=", "fp16_scaler", ")", "\n", "start_epoch", "=", "to_restore", "[", "\"epoch\"", "]", "\n", "\n", "################ Training", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"==> Start training from epoch {start_epoch}\"", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "data_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "# Train an epoch", "\n", "train_stats", "=", "train_one_epoch", "(", "SiT_model", ",", "data_loader", ",", "optimizer", ",", "lr_schedule", ",", "wd_schedule", ",", "\n", "epoch", ",", "fp16_scaler", ",", "args", ")", "\n", "\n", "save_dict", "=", "{", "'SiT_model'", ":", "SiT_model", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "'args'", ":", "args", "}", "\n", "\n", "if", "fp16_scaler", "is", "not", "None", ":", "\n", "            ", "save_dict", "[", "'fp16_scaler'", "]", "=", "fp16_scaler", ".", "state_dict", "(", ")", "\n", "\n", "", "utils", ".", "save_on_master", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'checkpoint.pth'", ")", ")", "\n", "if", "args", ".", "saveckp_freq", "and", "epoch", "%", "args", ".", "saveckp_freq", "==", "0", ":", "\n", "            ", "utils", ".", "save_on_master", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f'checkpoint{epoch:04}.pth'", ")", ")", "\n", "", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "'epoch'", ":", "epoch", "}", "\n", "if", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "with", "(", "Path", "(", "args", ".", "output_dir", ")", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.DropPath.__init__": [[29, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.DropPath.forward": [[33, 35], ["vision_transformer_SiT.drop_path"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.Mlp.__init__": [[38, 46], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.Mlp.forward": [[47, 54], ["vision_transformer_SiT.Mlp.fc1", "vision_transformer_SiT.Mlp.act", "vision_transformer_SiT.Mlp.drop", "vision_transformer_SiT.Mlp.fc2", "vision_transformer_SiT.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.Attention.__init__": [[57, 67], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.Attention.forward": [[68, 81], ["vision_transformer_SiT.Attention.qkv().reshape().permute", "vision_transformer_SiT.Attention.softmax", "vision_transformer_SiT.Attention.attn_drop", "vision_transformer_SiT.Attention.proj", "vision_transformer_SiT.Attention.proj_drop", "vision_transformer_SiT.Attention.qkv().reshape", "k.transpose", "vision_transformer_SiT.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.Block.__init__": [[84, 94], ["torch.Module.__init__", "norm_layer", "vision_transformer_SiT.Attention", "norm_layer", "int", "vision_transformer_SiT.Mlp", "vision_transformer_SiT.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.Block.forward": [[95, 105], ["vision_transformer_SiT.Block.attn", "vision_transformer_SiT.Block.norm1", "vision_transformer_SiT.Block.drop_path", "vision_transformer_SiT.Block.drop_path", "vision_transformer_SiT.Block.mlp", "vision_transformer_SiT.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.drop_path", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "y", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "if", "return_attention", ":", "\n", "            ", "return", "x", ",", "attn", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.PatchEmbed.__init__": [[110, 118], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_patches", "=", "(", "img_size", "//", "patch_size", ")", "*", "(", "img_size", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.PatchEmbed.forward": [[119, 123], ["vision_transformer_SiT.PatchEmbed.proj().flatten().transpose", "vision_transformer_SiT.PatchEmbed.proj().flatten", "vision_transformer_SiT.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.__init__": [[127, 166], ["torch.Module.__init__", "vision_transformer_SiT.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "norm_layer", "utils.trunc_normal_", "utils.trunc_normal_", "utils.trunc_normal_", "vision_transformer_SiT.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vision_transformer_SiT.Block", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "[", "224", "]", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "0", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.1", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "headData", "=", "True", ",", "headClass", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "\n", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", "[", "0", "]", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "cls_token2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n", "self", ".", "head_class_rot", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "(", "num_classes", ">", "0", "and", "headClass", "==", "True", ")", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "head_class_contr", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "(", "num_classes", ">", "0", "and", "headClass", "==", "True", ")", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "head_data", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "embed_dim", ",", "mlp_ratio", "*", "embed_dim", ")", ",", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "embed_dim", "*", "mlp_ratio", ",", "num_classes", ")", ")", "if", "(", "num_classes", ">", "0", "and", "headData", "==", "True", ")", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token2", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer._init_weights": [[167, 175], ["isinstance", "utils.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.interpolate_pos_encoding": [[177, 196], ["torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "2", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "2", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", ":", "2", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "2", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.prepare_tokens": [[197, 210], ["vision_transformer_SiT.VisionTransformer.patch_embed", "vision_transformer_SiT.VisionTransformer.cls_token1.expand", "vision_transformer_SiT.VisionTransformer.cls_token2.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer_SiT.VisionTransformer.pos_drop", "vision_transformer_SiT.VisionTransformer.interpolate_pos_encoding"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.interpolate_pos_encoding"], ["", "def", "prepare_tokens", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "# patch linear embedding", "\n", "\n", "# add the [CLS] token to the embed patch tokens", "\n", "cls_tokens1", "=", "self", ".", "cls_token1", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "cls_tokens2", "=", "self", ".", "cls_token2", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens1", ",", "cls_tokens2", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# add positional encoding to each token", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "\n", "return", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.forward": [[211, 224], ["vision_transformer_SiT.VisionTransformer.prepare_tokens", "enumerate", "vision_transformer_SiT.VisionTransformer.norm", "blk", "vision_transformer_SiT.VisionTransformer.head_class_rot", "vision_transformer_SiT.VisionTransformer.head_class_contr", "vision_transformer_SiT.VisionTransformer.head_data", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.prepare_tokens"], ["", "def", "forward", "(", "self", ",", "x", ",", "classify", "=", "False", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "if", "classify", ":", "\n", "            ", "return", "self", ".", "head_class_rot", "(", "x", "[", ":", ",", "0", "]", ")", ",", "self", ".", "head_class_contr", "(", "x", "[", ":", ",", "1", "]", ")", ",", "self", ".", "head_data", "(", "torch", ".", "mean", "(", "x", "[", ":", ",", "2", ":", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.get_last_features_attentions": [[225, 235], ["vision_transformer_SiT.VisionTransformer.prepare_tokens", "enumerate", "blk", "blk", "len", "vision_transformer_SiT.VisionTransformer.norm"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.prepare_tokens"], ["", "def", "get_last_features_attentions", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\n", "            ", "if", "i", "==", "(", "len", "(", "self", ".", "blocks", ")", "-", "1", ")", ":", "\n", "                ", "x", ",", "attn", "=", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "return", "self", ".", "norm", "(", "x", ")", ",", "attn", "\n", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.get_all_features_attentions": [[236, 246], ["vision_transformer_SiT.VisionTransformer.prepare_tokens", "enumerate", "blk", "attn.append"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.VisionTransformer.prepare_tokens"], ["", "", "", "def", "get_all_features_attentions", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "\n", "attn", "=", "[", "]", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\n", "            ", "x", ",", "attn_", "=", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "attn", ".", "append", "(", "attn_", ")", "\n", "\n", "", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.ContrastiveHead.__init__": [[269, 284], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "vision_transformer_SiT.ContrastiveHead.apply", "mlp.append", "torch.Linear", "torch.Linear", "mlp.append", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "nlayers", "=", "3", ",", "hidden_dim", "=", "2048", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "mlp", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "nlayers", ")", ":", "\n", "            ", "dim1", "=", "input_dim", "if", "l", "==", "0", "else", "hidden_dim", "\n", "dim2", "=", "output_dim", "if", "l", "==", "nlayers", "-", "1", "else", "hidden_dim", "\n", "\n", "mlp", ".", "append", "(", "nn", ".", "Linear", "(", "dim1", ",", "dim2", ",", "bias", "=", "False", ")", ")", "\n", "\n", "if", "l", "<", "nlayers", "-", "1", ":", "\n", "                ", "mlp", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "\n", "", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "mlp", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.ContrastiveHead._init_weights": [[286, 291], ["isinstance", "utils.trunc_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.ContrastiveHead.forward": [[292, 295], ["vision_transformer_SiT.ContrastiveHead.mlp"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.RECHead.__init__": [[297, 310], ["torch.Module.__init__", "layers.append", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "vision_transformer_SiT.RECHead.apply", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "in_chans", "=", "3", ",", "patch_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "nn", ".", "Linear", "(", "in_dim", ",", "in_dim", ")", "]", "\n", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "in_dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "self", ".", "convTrans", "=", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "in_chans", ",", "kernel_size", "=", "(", "patch_size", ",", "patch_size", ")", ",", "\n", "stride", "=", "(", "patch_size", ",", "patch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.RECHead._init_weights": [[312, 317], ["isinstance", "utils.trunc_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.RECHead.forward": [[318, 327], ["vision_transformer_SiT.RECHead.mlp", "vision_transformer_SiT.RECHead.transpose", "tuple", "vision_transformer_SiT.RECHead.convTrans", "vision_transformer_SiT.RECHead.unflatten", "int", "int", "math.sqrt", "math.sqrt", "vision_transformer_SiT.RECHead.size", "vision_transformer_SiT.RECHead.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "\n", "x_rec", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "out_sz", "=", "tuple", "(", "(", "int", "(", "math", ".", "sqrt", "(", "x_rec", ".", "size", "(", ")", "[", "2", "]", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "x_rec", ".", "size", "(", ")", "[", "2", "]", ")", ")", ")", ")", "\n", "x_rec", "=", "self", ".", "convTrans", "(", "x_rec", ".", "unflatten", "(", "2", ",", "out_sz", ")", ")", "\n", "\n", "\n", "return", "x_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.drop_path": [[15, 24], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.vit_tiny": [[247, 252], ["vision_transformer_SiT.VisionTransformer", "functools.partial"], "function", ["None"], ["", "", "def", "vit_tiny", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.vit_small": [[254, 259], ["vision_transformer_SiT.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_small", "(", "patch_size", "=", "16", ",", "img_size", "=", "[", "224", "]", ",", "applyReconstruction", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "img_size", "=", "img_size", ",", "applyReconstruction", "=", "applyReconstruction", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.vision_transformer_SiT.vit_base": [[261, 266], ["vision_transformer_SiT.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_base", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.__init__": [[23, 30], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.update": [[31, 35], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.synchronize_between_processes": [[36, 48], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.median": [[49, 53], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.avg": [[54, 58], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.global_avg": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.max": [[63, 66], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.value": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.__str__": [[71, 78], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.__init__": [[81, 84], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update": [[85, 91], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.__getattr__": [[92, 99], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.__str__": [[100, 107], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.synchronize_between_processes": [[108, 111], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.add_meter": [[112, 114], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.log_every": [[115, 160], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.MetricLogger.delimiter.join", "str", "print", "utils.MetricLogger.append", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "log_msg", "=", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", ".", "append", "(", "'max mem: {memory:.0f}'", ")", "\n", "", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "log_msg", ")", "\n", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils._load_checkpoint_for_ema": [[162, 170], ["io.BytesIO", "torch.save", "torch.save", "io.BytesIO.seek", "model_ema._load_checkpoint"], "function", ["None"], ["", "", "def", "_load_checkpoint_for_ema", "(", "model_ema", ",", "checkpoint", ")", ":", "\n", "    ", "\"\"\"\n    Workaround for ModelEma._load_checkpoint to accept an already-loaded object\n    \"\"\"", "\n", "mem_file", "=", "io", ".", "BytesIO", "(", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "mem_file", ")", "\n", "mem_file", ".", "seek", "(", "0", ")", "\n", "model_ema", ".", "_load_checkpoint", "(", "mem_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.setup_for_distributed": [[172, 185], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_dist_avail_and_initialized": [[187, 193], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.get_world_size": [[195, 199], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.get_world_size", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.get_rank": [[201, 205], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.get_rank", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_main_process": [[207, 209], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.save_on_master": [[211, 214], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.init_distributed_mode": [[216, 239], ["torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "utils.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.print_args": [[241, 260], ["utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "args.training_mode.ljust", "utils.setup_for_distributed.print"], "function", ["None"], ["", "def", "print_args", "(", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'***********************************************'", ")", "\n", "print", "(", "'*'", ",", "' '", ".", "ljust", "(", "9", ")", ",", "'Training Mode is '", ",", "args", ".", "training_mode", ".", "ljust", "(", "15", ")", ",", "'*'", ")", "\n", "print", "(", "'***********************************************'", ")", "\n", "print", "(", "'Dataset Name: '", ",", "args", ".", "data_set", ")", "\n", "print", "(", "'Dataset will be downloaded/loaded from: '", ",", "args", ".", "dataset_location", ")", "\n", "print", "(", "'---------- Model ----------'", ")", "\n", "print", "(", "'Model name: '", ",", "args", ".", "model", ")", "\n", "print", "(", "'Finetune From: '", ",", "args", ".", "finetune", ")", "\n", "print", "(", "'Resume From: '", ",", "args", ".", "resume", ")", "\n", "print", "(", "'Output To: '", ",", "args", ".", "output_dir", ")", "\n", "print", "(", "'Number of GPUs: '", ",", "args", ".", "world_size", ")", "\n", "if", "args", ".", "SiT_LinearEvaluation", ":", "\n", "        ", "print", "(", "'NOTE: The backbone is freezed, only last classifier is trainable!'", ")", "\n", "", "print", "(", "'---------- Optimizer ----------'", ")", "\n", "print", "(", "'Learning Rate: '", ",", "args", ".", "lr", ")", "\n", "print", "(", "'Weight Decay: '", ",", "args", ".", "weight_decay", ")", "\n", "print", "(", "'Batchsize: '", ",", "args", ".", "batch_size", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.losses.SimCLR.__init__": [[6, 11], ["torch.Module.__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "simclr_temp", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "temp", "=", "simclr_temp", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.losses.SimCLR.info_nce_loss": [[12, 38], ["torch.functional.normalize.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda.cuda", "torch.zeros().cuda.cuda", "torch.functional.normalize", "torch.functional.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "labels[].view", "similarity_matrix[].view", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.bool", "torch.zeros().cuda.bool", "torch.zeros().cuda.bool", "torch.zeros().cuda.bool"], "methods", ["None"], ["", "def", "info_nce_loss", "(", "self", ",", "features", ")", ":", "\n", "\n", "        ", "B2", ",", "n", "=", "features", ".", "size", "(", ")", "\n", "B", "=", "B2", "//", "2", "# batch size", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "B", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "(", "labels", ".", "unsqueeze", "(", "0", ")", "==", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "features", "=", "nn", ".", "functional", ".", "normalize", "(", "features", ",", "dim", "=", "1", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "matmul", "(", "features", ",", "features", ".", "T", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "labels", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", "[", "~", "mask", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "similarity_matrix", "=", "similarity_matrix", "[", "~", "mask", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "positives", "=", "similarity_matrix", "[", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# select only the negatives the negatives", "\n", "negatives", "=", "similarity_matrix", "[", "~", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", "=", "logits", "/", "self", ".", "temp", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.losses.SimCLR.forward": [[39, 45], ["losses.SimCLR.info_nce_loss", "losses.SimCLR.criterion"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.losses.SimCLR.info_nce_loss"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "\n", "        ", "logits", ",", "labels", "=", "self", ".", "info_nce_loss", "(", "features", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.CIFAR.CIFAR100.__init__": [[14, 64], ["torchvision.datasets.CIFAR100.__init__", "numpy.vstack().reshape", "CIFAR.CIFAR100.data.transpose", "CIFAR.CIFAR100._load_meta", "CIFAR.CIFAR100.download", "CIFAR.CIFAR100._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "CIFAR.CIFAR100._keep_first_k_examples_per_category", "open", "pickle.load", "CIFAR.CIFAR100.data.append", "numpy.vstack", "CIFAR.CIFAR100.targets.extend", "CIFAR.CIFAR100.targets.extend"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset._keep_first_k_examples_per_category"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "train", ":", "bool", "=", "True", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", "num_imgs_per_cat", "=", "None", ",", "training_mode", "=", "'SSL'", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", "CIFAR100", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "self", ".", "training_mode", "=", "training_mode", "\n", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", ":", "Any", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n", "if", "(", "num_imgs_per_cat", "is", "not", "None", ")", "and", "self", ".", "train", ":", "\n", "            ", "self", ".", "_keep_first_k_examples_per_category", "(", "num_imgs_per_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.CIFAR.CIFAR100._keep_first_k_examples_per_category": [[67, 86], ["print", "torchvision.datasets.datasets_utils.buildLabelIndex", "torchvision.datasets.datasets_utils.buildLabelIndex.keys", "sorted", "torchvision.datasets.datasets_utils.buildLabelIndex", "torchvision.datasets.datasets_utils.buildLabelIndex.items", "len"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.buildLabelIndex", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.buildLabelIndex"], ["", "", "def", "_keep_first_k_examples_per_category", "(", "self", ",", "num_imgs_per_cat", ")", ":", "\n", "        ", "print", "(", "'num_imgs_per_category {0}'", ".", "format", "(", "num_imgs_per_cat", ")", ")", "\n", "\n", "labels", "=", "self", ".", "targets", "\n", "data", "=", "self", ".", "data", "\n", "label2ind", "=", "buildLabelIndex", "(", "labels", ")", "\n", "all_indices", "=", "[", "]", "\n", "for", "cat", "in", "label2ind", ".", "keys", "(", ")", ":", "\n", "            ", "label2ind", "[", "cat", "]", "=", "label2ind", "[", "cat", "]", "[", ":", "num_imgs_per_cat", "]", "\n", "all_indices", "+=", "label2ind", "[", "cat", "]", "\n", "", "all_indices", "=", "sorted", "(", "all_indices", ")", "\n", "data", "=", "data", "[", "all_indices", "]", "\n", "labels", "=", "[", "labels", "[", "idx", "]", "for", "idx", "in", "all_indices", "]", "\n", "self", ".", "targets", "=", "labels", "\n", "self", ".", "data", "=", "data", "\n", "\n", "label2ind", "=", "buildLabelIndex", "(", "labels", ")", "\n", "for", "k", ",", "v", "in", "label2ind", ".", "items", "(", ")", ":", "\n", "            ", "assert", "(", "len", "(", "v", ")", "==", "num_imgs_per_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.CIFAR.CIFAR100.__getitem__": [[87, 93], ["PIL.Image.fromarray", "torchvision.datasets.datasets_utils.getItem"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.getItem"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "X", "=", "Image", ".", "fromarray", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "\n", "target", "=", "self", ".", "targets", "[", "index", "]", "\n", "\n", "return", "getItem", "(", "X", ",", "target", ",", "self", ".", "transform", ",", "self", ".", "training_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.CIFAR.CIFAR10.__init__": [[97, 147], ["torchvision.datasets.CIFAR10.__init__", "numpy.vstack().reshape", "CIFAR.CIFAR10.data.transpose", "CIFAR.CIFAR10._load_meta", "CIFAR.CIFAR10.download", "CIFAR.CIFAR10._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "CIFAR.CIFAR10._keep_first_k_examples_per_category", "open", "pickle.load", "CIFAR.CIFAR10.data.append", "numpy.vstack", "CIFAR.CIFAR10.targets.extend", "CIFAR.CIFAR10.targets.extend"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset._keep_first_k_examples_per_category"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "train", ":", "bool", "=", "True", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", "num_imgs_per_cat", "=", "None", ",", "training_mode", "=", "'SSL'", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", "CIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "self", ".", "training_mode", "=", "training_mode", "\n", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", ":", "Any", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n", "if", "(", "num_imgs_per_cat", "is", "not", "None", ")", "and", "self", ".", "train", ":", "\n", "            ", "self", ".", "_keep_first_k_examples_per_category", "(", "num_imgs_per_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.CIFAR.CIFAR10._keep_first_k_examples_per_category": [[150, 169], ["print", "torchvision.datasets.datasets_utils.buildLabelIndex", "torchvision.datasets.datasets_utils.buildLabelIndex.keys", "sorted", "torchvision.datasets.datasets_utils.buildLabelIndex", "torchvision.datasets.datasets_utils.buildLabelIndex.items", "len"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.buildLabelIndex", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.buildLabelIndex"], ["", "", "def", "_keep_first_k_examples_per_category", "(", "self", ",", "num_imgs_per_cat", ")", ":", "\n", "        ", "print", "(", "'num_imgs_per_category {0}'", ".", "format", "(", "num_imgs_per_cat", ")", ")", "\n", "\n", "labels", "=", "self", ".", "targets", "\n", "data", "=", "self", ".", "data", "\n", "label2ind", "=", "buildLabelIndex", "(", "labels", ")", "\n", "all_indices", "=", "[", "]", "\n", "for", "cat", "in", "label2ind", ".", "keys", "(", ")", ":", "\n", "            ", "label2ind", "[", "cat", "]", "=", "label2ind", "[", "cat", "]", "[", ":", "num_imgs_per_cat", "]", "\n", "all_indices", "+=", "label2ind", "[", "cat", "]", "\n", "", "all_indices", "=", "sorted", "(", "all_indices", ")", "\n", "data", "=", "data", "[", "all_indices", "]", "\n", "labels", "=", "[", "labels", "[", "idx", "]", "for", "idx", "in", "all_indices", "]", "\n", "self", ".", "targets", "=", "labels", "\n", "self", ".", "data", "=", "data", "\n", "\n", "label2ind", "=", "buildLabelIndex", "(", "labels", ")", "\n", "for", "k", ",", "v", "in", "label2ind", ".", "items", "(", ")", ":", "\n", "            ", "assert", "(", "len", "(", "v", ")", "==", "num_imgs_per_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.CIFAR.CIFAR10.__getitem__": [[170, 175], ["PIL.Image.fromarray", "torchvision.datasets.datasets_utils.getItem"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.getItem"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "X", "=", "Image", ".", "fromarray", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "target", "=", "self", ".", "targets", "[", "index", "]", "\n", "\n", "return", "getItem", "(", "X", ",", "target", ",", "self", ".", "transform", ",", "self", ".", "training_mode", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.myRandCrop.__init__": [[44, 46], ["torchvision.transforms.RandomResizedCrop.__init__"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "super", "(", "myRandCrop", ",", "self", ")", ".", "__init__", "(", "size", ",", "scale", ",", "ratio", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.myRandCrop.forward": [[47, 50], ["datasets_utils.myRandCrop.get_params", "torchvision.transforms.functional.resized_crop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "tf", ".", "functional", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", ",", "(", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.myRandomHorizontalFlip.__init__": [[52, 54], ["torchvision.transforms.RandomHorizontalFlip.__init__"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "myRandomHorizontalFlip", ",", "self", ")", ".", "__init__", "(", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.myRandomHorizontalFlip.forward": [[55, 59], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "torch", ".", "rand", "(", "1", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "tf", ".", "functional", ".", "hflip", "(", "img", ")", ",", "1", "\n", "", "return", "img", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GaussianBlur.__init__": [[65, 69], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "radius_min", "=", "0.1", ",", "radius_max", "=", "2.", ")", ":", "\n", "        ", "self", ".", "prob", "=", "p", "\n", "self", ".", "radius_min", "=", "radius_min", "\n", "self", ".", "radius_max", "=", "radius_max", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GaussianBlur.__call__": [[70, 78], ["img.filter", "random.random", "PIL.ImageFilter.GaussianBlur", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "do_it", "=", "random", ".", "random", "(", ")", "<=", "self", ".", "prob", "\n", "if", "not", "do_it", ":", "\n", "            ", "return", "img", "\n", "\n", "", "return", "img", ".", "filter", "(", "\n", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "uniform", "(", "self", ".", "radius_min", ",", "self", ".", "radius_max", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.Solarization.__init__": [[86, 88], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.Solarization.__call__": [[89, 94], ["random.random", "PIL.ImageOps.solarize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "ImageOps", ".", "solarize", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.DataAugmentationSiT.__init__": [[170, 206], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "datasets_utils.GaussianBlur", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "datasets_utils.GaussianBlur", "datasets_utils.Solarization", "torchvision.transforms.ColorJitter", "torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "# for corruption", "\n", "        ", "self", ".", "drop_perc", "=", "args", ".", "drop_perc", "\n", "self", ".", "drop_type", "=", "args", ".", "drop_type", "\n", "self", ".", "drop_align", "=", "args", ".", "drop_align", "\n", "\n", "self", ".", "color_jitter1", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.1", ",", "contrast", "=", "0.1", ",", "saturation", "=", "0.1", ",", "hue", "=", "0.01", ")", "]", ",", "p", "=", "0.3", ")", "]", ")", "\n", "\n", "self", ".", "color_jitter2", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomApply", "(", "\n", "[", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.2", ",", "hue", "=", "0.1", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", "]", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "]", ")", "\n", "\n", "# crop 1", "\n", "self", ".", "transfo1", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "img_size", ",", "scale", "=", "(", "0.2", ",", "1", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "self", ".", "color_jitter1", ",", "\n", "GaussianBlur", "(", "0.1", ")", ",", "\n", "normalize", "]", ")", "\n", "\n", "# crop 2", "\n", "self", ".", "transfo2", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "img_size", ",", "scale", "=", "(", "0.2", ",", "1", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "self", ".", "color_jitter2", ",", "\n", "GaussianBlur", "(", "1.0", ")", ",", "\n", "Solarization", "(", "0.2", ")", ",", "\n", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.DataAugmentationSiT.rand_rotate": [[208, 211], ["numpy.random.choice", "torchvision.transforms.functional.rotate"], "methods", ["None"], ["", "def", "rand_rotate", "(", "self", ",", "im", ")", ":", "\n", "        ", "rotate", "=", "np", ".", "random", ".", "choice", "(", "[", "0.", ",", "90.", ",", "180.", ",", "270.", "]", ")", "\n", "return", "tf", ".", "functional", ".", "rotate", "(", "im", ",", "rotate", ")", ",", "rotate", "//", "90", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.DataAugmentationSiT.__call__": [[212, 238], ["datasets_utils.DataAugmentationSiT.transfo1", "datasets_utils.DataAugmentationSiT.rand_rotate", "datasets_utils.DataAugmentationSiT.transfo2", "datasets_utils.DataAugmentationSiT.rand_rotate", "datasets_utils.GMML_drop_rand_patches", "datasets_utils.GMML_drop_rand_patches", "datasets_utils.DataAugmentationSiT.detach().clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "datasets_utils.DataAugmentationSiT.detach().clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "datasets_utils.DataAugmentationSiT.detach", "datasets_utils.DataAugmentationSiT.detach"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.DataAugmentationSiT.rand_rotate", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.DataAugmentationSiT.rand_rotate", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GMML_drop_rand_patches", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GMML_drop_rand_patches"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "\n", "########## view 1", "\n", "# augmented ", "\n", "        ", "im1", "=", "self", ".", "transfo1", "(", "image", ")", "\n", "im1", ",", "rot1", "=", "self", ".", "rand_rotate", "(", "im1", ")", "\n", "\n", "# corrupted ", "\n", "if", "self", ".", "drop_perc", ">", "0", ":", "\n", "            ", "im_corr1", ",", "im_mask1", "=", "GMML_drop_rand_patches", "(", "im1", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "max_replace", "=", "self", ".", "drop_perc", ",", "drop_type", "=", "self", ".", "drop_type", ",", "align", "=", "self", ".", "drop_align", ")", "\n", "", "else", ":", "\n", "            ", "im_corr1", ",", "im_mask1", "=", "im1", ",", "torch", ".", "zeros_like", "(", "im1", ")", "\n", "\n", "########## view 2", "\n", "# augmented ", "\n", "", "im2", "=", "self", ".", "transfo2", "(", "image", ")", "\n", "im2", ",", "rot2", "=", "self", ".", "rand_rotate", "(", "im2", ")", "\n", "\n", "# corrupted ", "\n", "if", "self", ".", "drop_perc", ">", "0", ":", "\n", "            ", "im_corr2", ",", "im_mask2", "=", "GMML_drop_rand_patches", "(", "im2", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "max_replace", "=", "self", ".", "drop_perc", ",", "drop_type", "=", "self", ".", "drop_type", ",", "align", "=", "self", ".", "drop_align", ")", "\n", "", "else", ":", "\n", "            ", "im_corr2", ",", "im_mask2", "=", "im2", ",", "torch", ".", "zeros_like", "(", "im2", ")", "\n", "\n", "\n", "", "return", "[", "im1", ",", "im2", "]", ",", "[", "rot1", ",", "rot2", "]", ",", "[", "im_corr1", ",", "im_corr2", "]", ",", "[", "im_mask1", ",", "im_mask2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.buildLabelIndex": [[25, 33], ["enumerate", "label2inds[].append"], "function", ["None"], ["def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.getItem": [[35, 40], ["transform"], "function", ["None"], ["", "def", "getItem", "(", "idx", ",", "X", ",", "target", "=", "None", ",", "transform", "=", "None", ",", "training_mode", "=", "'SSL'", ")", ":", "\n", "    ", "if", "transform", "is", "not", "None", ":", "\n", "        ", "X", "=", "transform", "(", "X", ")", "\n", "\n", "", "return", "X", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GMML_replace_list": [[96, 119], ["enumerate", "isinstance", "samples[].size", "s.detach().clone", "torch.zeros_like", "torch.zeros_like", "range", "masks_all.append", "aug_all.append", "numpy.random.randint", "len", "s.detach", "random.random", "datasets_utils.GMML_drop_rand_patches", "drop_type.split"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GMML_drop_rand_patches"], ["", "", "", "def", "GMML_replace_list", "(", "samples", ",", "corrup_prev", ",", "masks_prev", ",", "drop_type", "=", "'noise'", ",", "max_replace", "=", "0.35", ",", "align", "=", "16", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "samples", ",", "list", ")", ":", "\n", "        ", "samples", "=", "[", "samples", "]", "\n", "\n", "", "rep_drop", "=", "1", "if", "drop_type", "==", "''", "else", "(", "1", "/", "(", "len", "(", "drop_type", ".", "split", "(", "'-'", ")", ")", "+", "1", ")", ")", "\n", "\n", "n_imgs", "=", "samples", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", "#this is batch size, but in case bad inistance happened while loading", "\n", "masks_all", "=", "[", "]", "\n", "aug_all", "=", "[", "]", "\n", "for", "si", ",", "s", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "samples_aug", "=", "s", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "masks", "=", "torch", ".", "zeros_like", "(", "samples_aug", ")", "\n", "for", "i", "in", "range", "(", "n_imgs", ")", ":", "\n", "            ", "idx_rnd", "=", "randint", "(", "0", ",", "n_imgs", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "rep_drop", ":", "\n", "                ", "samples_aug", "[", "i", "]", ",", "masks", "[", "i", "]", "=", "GMML_drop_rand_patches", "(", "samples_aug", "[", "i", "]", ",", "samples", "[", "si", "]", "[", "idx_rnd", "]", ",", "max_replace", "=", "max_replace", ",", "align", "=", "align", ")", "\n", "", "else", ":", "\n", "                ", "samples_aug", "[", "i", "]", ",", "masks", "[", "i", "]", "=", "corrup_prev", "[", "si", "]", "[", "i", "]", ",", "masks_prev", "[", "si", "]", "[", "i", "]", "\n", "#samples[si] = samples_aug", "\n", "", "", "masks_all", ".", "append", "(", "masks", ")", "\n", "aug_all", ".", "append", "(", "samples_aug", ")", "\n", "\n", "", "return", "aug_all", ",", "masks_all", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.GMML_drop_rand_patches": [[120, 166], ["numpy.random.seed", "X.size", "int", "int", "max", "torch.zeros_like", "torch.zeros_like", "numpy.random.choice", "drop_type.split", "mask[].sum", "min", "min", "numpy.random.uniform", "numpy.random.randint", "round", "numpy.random.randint", "round", "X_rep[].detach().clone", "min", "numpy.random.randint", "numpy.random.randint", "torch.empty().normal_", "torch.empty().normal_", "X_rep[].detach", "torch.zeros", "torch.zeros", "X[].detach().clone", "torch.empty", "torch.empty", "numpy.random.randint", "numpy.random.randint", "X[].detach"], "function", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.SmoothedValue.max"], ["", "def", "GMML_drop_rand_patches", "(", "X", ",", "X_rep", "=", "None", ",", "drop_type", "=", "'noise'", ",", "max_replace", "=", "0.7", ",", "align", "=", "16", ",", "max_block_sz", "=", "0.3", ")", ":", "\n", "#######################", "\n", "# max_replace: percentage of image to be replaced", "\n", "# align: align corruption with the patch sizes", "\n", "# max_block_sz: percentage of the maximum block to be dropped", "\n", "#######################", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", ")", "\n", "C", ",", "H", ",", "W", "=", "X", ".", "size", "(", ")", "\n", "n_drop_pix", "=", "np", ".", "random", ".", "uniform", "(", "min", "(", "0.5", ",", "max_replace", ")", ",", "max_replace", ")", "*", "H", "*", "W", "\n", "mx_blk_height", "=", "int", "(", "H", "*", "max_block_sz", ")", "\n", "mx_blk_width", "=", "int", "(", "W", "*", "max_block_sz", ")", "\n", "\n", "align", "=", "max", "(", "1", ",", "align", ")", "\n", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "X", ")", "\n", "drop_t", "=", "np", ".", "random", ".", "choice", "(", "drop_type", ".", "split", "(", "'-'", ")", ")", "\n", "\n", "while", "mask", "[", "0", "]", ".", "sum", "(", ")", "<", "n_drop_pix", ":", "\n", "\n", "####### get a random block to replace ", "\n", "        ", "rnd_r", "=", "(", "randint", "(", "0", ",", "H", "-", "align", ")", "//", "align", ")", "*", "align", "\n", "rnd_c", "=", "(", "randint", "(", "0", ",", "W", "-", "align", ")", "//", "align", ")", "*", "align", "\n", "\n", "rnd_h", "=", "min", "(", "randint", "(", "align", ",", "mx_blk_height", ")", ",", "H", "-", "rnd_r", ")", "\n", "rnd_h", "=", "round", "(", "rnd_h", "/", "align", ")", "*", "align", "\n", "rnd_w", "=", "min", "(", "randint", "(", "align", ",", "mx_blk_width", ")", ",", "W", "-", "rnd_c", ")", "\n", "rnd_w", "=", "round", "(", "rnd_w", "/", "align", ")", "*", "align", "\n", "\n", "if", "X_rep", "is", "not", "None", ":", "\n", "            ", "X", "[", ":", ",", "rnd_r", ":", "rnd_r", "+", "rnd_h", ",", "rnd_c", ":", "rnd_c", "+", "rnd_w", "]", "=", "X_rep", "[", ":", ",", "rnd_r", ":", "rnd_r", "+", "rnd_h", ",", "rnd_c", ":", "rnd_c", "+", "rnd_w", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "drop_t", "==", "'noise'", ":", "\n", "                ", "X", "[", ":", ",", "rnd_r", ":", "rnd_r", "+", "rnd_h", ",", "rnd_c", ":", "rnd_c", "+", "rnd_w", "]", "=", "torch", ".", "empty", "(", "(", "C", ",", "rnd_h", ",", "rnd_w", ")", ",", "dtype", "=", "X", ".", "dtype", ",", "device", "=", "X", ".", "device", ")", ".", "normal_", "(", ")", "\n", "", "elif", "drop_t", "==", "'zeros'", ":", "\n", "                ", "X", "[", ":", ",", "rnd_r", ":", "rnd_r", "+", "rnd_h", ",", "rnd_c", ":", "rnd_c", "+", "rnd_w", "]", "=", "torch", ".", "zeros", "(", "(", "C", ",", "rnd_h", ",", "rnd_w", ")", ",", "dtype", "=", "X", ".", "dtype", ",", "device", "=", "X", ".", "device", ")", "\n", "", "else", ":", "\n", "####### get a random block to replace from", "\n", "                ", "rnd_r2", "=", "(", "randint", "(", "0", ",", "H", "-", "rnd_h", ")", "//", "align", ")", "*", "align", "\n", "rnd_c2", "=", "(", "randint", "(", "0", ",", "W", "-", "rnd_w", ")", "//", "align", ")", "*", "align", "\n", "\n", "X", "[", ":", ",", "rnd_r", ":", "rnd_r", "+", "rnd_h", ",", "rnd_c", ":", "rnd_c", "+", "rnd_w", "]", "=", "X", "[", ":", ",", "rnd_r2", ":", "rnd_r2", "+", "rnd_h", ",", "rnd_c2", ":", "rnd_c2", "+", "rnd_w", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "", "", "mask", "[", ":", ",", "rnd_r", ":", "rnd_r", "+", "rnd_h", ",", "rnd_c", ":", "rnd_c", "+", "rnd_w", "]", "=", "1", "\n", "\n", "", "return", "X", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.STL10.STL10.__init__": [[35, 87], ["super().__init__", "torchvision.datasets.utils.verify_str_arg", "STL10.STL10._verify_folds", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "STL10.STL10.download", "STL10.STL10.__loadfile", "STL10.STL10.__load_folds", "STL10.STL10._check_integrity", "RuntimeError", "STL10.STL10.__loadfile", "STL10.STL10.__load_folds", "STL10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "open", "f.read().splitlines", "STL10.STL10.__loadfile", "numpy.asarray", "STL10.STL10.__loadfile", "numpy.asarray", "f.read"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.STL10.STL10._verify_folds"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "split", ":", "str", "=", "\"train\"", ",", "\n", "folds", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "num_imgs_per_cat", "=", "None", ",", "training_mode", "=", "'SSL'", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "STL10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "self", ".", "training_mode", "=", "training_mode", "\n", "\n", "self", ".", "split", "=", "verify_str_arg", "(", "split", ",", "\"split\"", ",", "self", ".", "splits", ")", "\n", "self", ".", "folds", "=", "self", ".", "_verify_folds", "(", "folds", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "", "elif", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Dataset not found or corrupted. '", "\n", "'You can use download=True to download it'", ")", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "self", ".", "labels", ":", "Optional", "[", "np", ".", "ndarray", "]", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'train+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "self", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "# self.split == 'test':", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "", "class_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "class_names_file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "class_file", ")", ":", "\n", "            ", "with", "open", "(", "class_file", ")", "as", "f", ":", "\n", "                ", "self", ".", "classes", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.STL10.STL10._verify_folds": [[88, 100], ["isinstance", "ValueError", "ValueError", "range", "msg.format", "msg.format", "type"], "methods", ["None"], ["", "", "", "def", "_verify_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "folds", "\n", "", "elif", "isinstance", "(", "folds", ",", "int", ")", ":", "\n", "            ", "if", "folds", "in", "range", "(", "10", ")", ":", "\n", "                ", "return", "folds", "\n", "", "msg", "=", "(", "\"Value for argument folds should be in the range [0, 10), \"", "\n", "\"but got {}.\"", ")", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "folds", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type None or int for argument folds, but got type {}.\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "type", "(", "folds", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.STL10.STL10.__getitem__": [[102, 115], ["PIL.Image.fromarray", "datasets.datasets_utils.getItem", "numpy.transpose", "int"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.getItem"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "\n", "        ", "target", ":", "Optional", "[", "int", "]", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "-", "1", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "return", "getItem", "(", "img", ",", "target", ",", "self", ".", "transform", ",", "self", ".", "training_mode", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetPaths.__init__": [[20, 31], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "TinyImageNet.TinyImageNetPaths._make_paths"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetPaths._make_paths"], ["  ", "def", "__init__", "(", "self", ",", "root_dir", ")", ":", "\n", "\n", "    ", "train_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train'", ")", "\n", "val_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'val'", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'test'", ")", "\n", "\n", "wnids_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'wnids.txt'", ")", "\n", "words_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'words.txt'", ")", "\n", "\n", "self", ".", "_make_paths", "(", "train_path", ",", "val_path", ",", "test_path", ",", "\n", "wnids_path", ",", "words_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetPaths._make_paths": [[32, 76], ["collections.defaultdict", "list", "os.listdir", "open", "open", "map", "open", "os.path.join", "os.path.join", "TinyImageNet.TinyImageNetPaths.ids.index", "nid.strip.strip.strip", "TinyImageNet.TinyImageNetPaths.ids.append", "line.split", "list", "TinyImageNet.TinyImageNetPaths.nid_to_words[].extend", "os.listdir", "os.path.join", "line.split", "os.path.join", "TinyImageNet.TinyImageNetPaths.ids.index", "TinyImageNet.TinyImageNetPaths.paths[].append", "open", "map", "os.path.join", "int", "int", "int", "int", "line.split", "os.path.join", "TinyImageNet.TinyImageNetPaths.paths[].append", "list.split", "int", "int", "int", "int", "x.strip"], "methods", ["None"], ["", "def", "_make_paths", "(", "self", ",", "train_path", ",", "val_path", ",", "test_path", ",", "\n", "wnids_path", ",", "words_path", ")", ":", "\n", "    ", "self", ".", "ids", "=", "[", "]", "\n", "with", "open", "(", "wnids_path", ",", "'r'", ")", "as", "idf", ":", "\n", "      ", "for", "nid", "in", "idf", ":", "\n", "        ", "nid", "=", "nid", ".", "strip", "(", ")", "\n", "self", ".", "ids", ".", "append", "(", "nid", ")", "\n", "", "", "self", ".", "nid_to_words", "=", "defaultdict", "(", "list", ")", "\n", "with", "open", "(", "words_path", ",", "'r'", ")", "as", "wf", ":", "\n", "      ", "for", "line", "in", "wf", ":", "\n", "        ", "nid", ",", "labels", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "labels", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "labels", ".", "split", "(", "','", ")", ")", ")", "\n", "self", ".", "nid_to_words", "[", "nid", "]", ".", "extend", "(", "labels", ")", "\n", "\n", "", "", "self", ".", "paths", "=", "{", "\n", "'train'", ":", "[", "]", ",", "# [img_path, id, nid, box]", "\n", "'val'", ":", "[", "]", ",", "# [img_path, id, nid, box]", "\n", "'test'", ":", "[", "]", "# img_path", "\n", "}", "\n", "\n", "# Get the test paths", "\n", "self", ".", "paths", "[", "'test'", "]", "=", "list", "(", "map", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "test_path", ",", "x", ")", ",", "\n", "os", ".", "listdir", "(", "test_path", ")", ")", ")", "\n", "# Get the validation paths and labels", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "val_path", ",", "'val_annotations.txt'", ")", ")", "as", "valf", ":", "\n", "      ", "for", "line", "in", "valf", ":", "\n", "        ", "fname", ",", "nid", ",", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "line", ".", "split", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "val_path", ",", "'images'", ",", "fname", ")", "\n", "bbox", "=", "int", "(", "x0", ")", ",", "int", "(", "y0", ")", ",", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", "\n", "label_id", "=", "self", ".", "ids", ".", "index", "(", "nid", ")", "\n", "self", ".", "paths", "[", "'val'", "]", ".", "append", "(", "(", "fname", ",", "label_id", ",", "nid", ",", "bbox", ")", ")", "\n", "\n", "# Get the training paths", "\n", "", "", "train_nids", "=", "os", ".", "listdir", "(", "train_path", ")", "\n", "for", "nid", "in", "train_nids", ":", "\n", "      ", "anno_path", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "nid", ",", "nid", "+", "'_boxes.txt'", ")", "\n", "imgs_path", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "nid", ",", "'images'", ")", "\n", "label_id", "=", "self", ".", "ids", ".", "index", "(", "nid", ")", "\n", "with", "open", "(", "anno_path", ",", "'r'", ")", "as", "annof", ":", "\n", "        ", "for", "line", "in", "annof", ":", "\n", "          ", "fname", ",", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "line", ".", "split", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "imgs_path", ",", "fname", ")", "\n", "bbox", "=", "int", "(", "x0", ")", ",", "int", "(", "y0", ")", ",", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", "\n", "self", ".", "paths", "[", "'train'", "]", ".", "append", "(", "(", "fname", ",", "label_id", ",", "nid", ",", "bbox", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__init__": [[79, 126], ["TinyImageNet.TinyImageNetPaths", "dict", "len", "min", "numpy.zeros", "numpy.zeros", "range", "len", "numpy.random.permutation", "imageio.imread", "TinyImageNet._add_channels", "TinyImageNet.TinyImageNetDataset._keep_first_k_examples_per_category", "lt", "len", "TinyImageNet.TinyImageNetDataset.transform_results.update"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet._add_channels", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset._keep_first_k_examples_per_category", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.None.utils.MetricLogger.update"], ["  ", "def", "__init__", "(", "self", ",", "root_dir", ",", "mode", "=", "'train'", ",", "preload", "=", "True", ",", "load_transform", "=", "None", ",", "\n", "transform", "=", "None", ",", "max_samples", "=", "None", ",", "num_imgs_per_cat", "=", "None", ",", "training_mode", "=", "'SSL'", ")", ":", "\n", "    ", "tinp", "=", "TinyImageNetPaths", "(", "root_dir", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "label_idx", "=", "1", "# from [image, id, nid, box]", "\n", "self", ".", "preload", "=", "preload", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "transform_results", "=", "dict", "(", ")", "\n", "\n", "self", ".", "IMAGE_SHAPE", "=", "(", "64", ",", "64", ",", "3", ")", "\n", "\n", "self", ".", "img_data", "=", "[", "]", "\n", "self", ".", "label_data", "=", "[", "]", "\n", "\n", "self", ".", "max_samples", "=", "max_samples", "\n", "self", ".", "samples", "=", "tinp", ".", "paths", "[", "mode", "]", "\n", "self", ".", "samples_num", "=", "len", "(", "self", ".", "samples", ")", "\n", "\n", "self", ".", "training_mode", "=", "training_mode", "\n", "\n", "if", "self", ".", "max_samples", "is", "not", "None", ":", "\n", "      ", "self", ".", "samples_num", "=", "min", "(", "self", ".", "max_samples", ",", "self", ".", "samples_num", ")", "\n", "self", ".", "samples", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "samples", ")", "[", ":", "self", ".", "samples_num", "]", "\n", "\n", "", "if", "self", ".", "preload", ":", "\n", "      ", "self", ".", "img_data", "=", "np", ".", "zeros", "(", "(", "self", ".", "samples_num", ",", ")", "+", "self", ".", "IMAGE_SHAPE", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "label_data", "=", "np", ".", "zeros", "(", "(", "self", ".", "samples_num", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "samples_num", ")", ":", "\n", "        ", "s", "=", "self", ".", "samples", "[", "idx", "]", "\n", "img", "=", "imageio", ".", "imread", "(", "s", "[", "0", "]", ")", "\n", "img", "=", "_add_channels", "(", "img", ")", "\n", "self", ".", "img_data", "[", "idx", "]", "=", "img", "\n", "self", ".", "label_data", "[", "idx", "]", "=", "s", "[", "self", ".", "label_idx", "]", "\n", "\n", "\n", "", "if", "(", "num_imgs_per_cat", "is", "not", "None", ")", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "_keep_first_k_examples_per_category", "(", "num_imgs_per_cat", ")", "\n", "\n", "", "self", ".", "samples_num", "=", "len", "(", "self", ".", "label_data", ")", "\n", "if", "load_transform", ":", "\n", "        ", "for", "lt", "in", "load_transform", ":", "\n", "          ", "result", "=", "lt", "(", "self", ".", "img_data", ",", "self", ".", "label_data", ")", "\n", "self", ".", "img_data", ",", "self", ".", "label_data", "=", "result", "[", ":", "2", "]", "\n", "if", "len", "(", "result", ")", ">", "2", ":", "\n", "            ", "self", ".", "transform_results", ".", "update", "(", "result", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset._keep_first_k_examples_per_category": [[127, 146], ["print", "datasets.datasets_utils.buildLabelIndex", "datasets.datasets_utils.buildLabelIndex.keys", "sorted", "datasets.datasets_utils.buildLabelIndex", "datasets.datasets_utils.buildLabelIndex.items", "len"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.buildLabelIndex", "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.buildLabelIndex"], ["", "", "", "", "", "def", "_keep_first_k_examples_per_category", "(", "self", ",", "num_imgs_per_cat", ")", ":", "\n", "    ", "print", "(", "'num_imgs_per_category {0}'", ".", "format", "(", "num_imgs_per_cat", ")", ")", "\n", "\n", "labels", "=", "self", ".", "label_data", "\n", "data", "=", "self", ".", "img_data", "\n", "label2ind", "=", "buildLabelIndex", "(", "labels", ")", "\n", "all_indices", "=", "[", "]", "\n", "for", "cat", "in", "label2ind", ".", "keys", "(", ")", ":", "\n", "        ", "label2ind", "[", "cat", "]", "=", "label2ind", "[", "cat", "]", "[", ":", "num_imgs_per_cat", "]", "\n", "all_indices", "+=", "label2ind", "[", "cat", "]", "\n", "", "all_indices", "=", "sorted", "(", "all_indices", ")", "\n", "data", "=", "data", "[", "all_indices", "]", "\n", "labels", "=", "[", "labels", "[", "idx", "]", "for", "idx", "in", "all_indices", "]", "\n", "self", ".", "label_data", "=", "labels", "\n", "self", ".", "img_data", "=", "data", "\n", "\n", "label2ind", "=", "buildLabelIndex", "(", "labels", ")", "\n", "for", "k", ",", "v", "in", "label2ind", ".", "items", "(", ")", ":", "\n", "        ", "assert", "(", "len", "(", "v", ")", "==", "num_imgs_per_cat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__len__": [[149, 151], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "samples_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet.TinyImageNetDataset.__getitem__": [[152, 157], ["PIL.Image.fromarray", "datasets.datasets_utils.getItem", "TinyImageNet.TinyImageNetDataset.img_data[].astype"], "methods", ["home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.datasets_utils.getItem"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "    ", "X", "=", "Image", ".", "fromarray", "(", "self", ".", "img_data", "[", "idx", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "target", "=", "self", ".", "label_data", "[", "idx", "]", "\n", "\n", "return", "getItem", "(", "X", ",", "target", ",", "self", ".", "transform", ",", "self", ".", "training_mode", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.TinyImageNet._add_channels": [[12, 18], ["len", "numpy.expand_dims", "numpy.concatenate"], "function", ["None"], ["def", "_add_channels", "(", "img", ",", "total_channels", "=", "3", ")", ":", "\n", "  ", "while", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "# third axis is the channels", "\n", "    ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "-", "1", ")", "\n", "", "while", "(", "img", ".", "shape", "[", "-", "1", "]", ")", "<", "3", ":", "\n", "    ", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "img", "[", ":", ",", ":", ",", "-", "1", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Sara-Ahmed_SiT.datasets.prepare_datasets.build_dataset": [[15, 106], ["datasets.CIFAR.CIFAR10", "os.path.join", "torchvision.datasets.MNIST", "os.path.join", "datasets.CIFAR.CIFAR100", "os.path.join", "datasets.AirCraft.Aircraft", "os.path.join", "datasets.CUB.Cub2011", "os.path.join", "datasets.Pets.pets", "os.path.join", "torchvision.datasets.STL10", "os.path.join", "datasets.Cars_stanford.Cars", "os.path.join", "os.path.join", "datasets.Flowers_stanford.Flowers", "os.path.join", "datasets.TinyImageNet.TinyImageNetDataset", "os.path.join", "datasets.ImageNet.ImageNetDataset"], "function", ["None"], ["def", "build_dataset", "(", "args", ",", "is_train", ",", "trnsfrm", "=", "None", ",", "training_mode", "=", "'SSL'", ")", ":", "\n", "\n", "    ", "if", "args", ".", "data_set", "==", "'CIFAR10'", ":", "\n", "        ", "dataset", "=", "CIFAR10", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'CIFAR10_dataset'", ")", ",", "\n", "download", "=", "True", ",", "train", "=", "is_train", ",", "transform", "=", "trnsfrm", ",", "\n", "training_mode", "=", "training_mode", ")", "\n", "nb_classes", "=", "10", "\n", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'MNIST'", ":", "\n", "        ", "dataset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'MNIST_dataset'", ")", ",", "\n", "train", "=", "is_train", ",", "transform", "=", "trnsfrm", ",", "download", "=", "True", ")", "\n", "\n", "nb_classes", "=", "10", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'CIFAR100'", ":", "\n", "        ", "dataset", "=", "CIFAR100", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'CIFAR100_dataset'", ")", ",", "\n", "download", "=", "True", ",", "train", "=", "is_train", ",", "transform", "=", "trnsfrm", ",", "\n", "training_mode", "=", "training_mode", ")", "\n", "\n", "nb_classes", "=", "100", "\n", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'Aircraft'", ":", "\n", "        ", "dataset", "=", "Aircraft", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'Aircraft_dataset'", ")", ",", "train", "=", "is_train", ",", "transform", "=", "trnsfrm", ")", "\n", "\n", "nb_classes", "=", "100", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'CUB'", ":", "\n", "        ", "dataset", "=", "Cub2011", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'CUB_dataset'", ")", ",", "train", "=", "is_train", ",", "transform", "=", "trnsfrm", ")", "\n", "\n", "nb_classes", "=", "200", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'Pets'", ":", "\n", "        ", "split", "=", "'trainval'", "if", "is_train", "else", "'test'", "\n", "dataset", "=", "pets", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'Pets_dataset'", ")", ",", "split", "=", "split", ",", "transform", "=", "trnsfrm", ")", "\n", "\n", "nb_classes", "=", "37", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'STL10'", ":", "\n", "        ", "split", "=", "'train+unlabeled'", "if", "training_mode", "==", "'SSL'", "else", "'train'", "\n", "split", "=", "split", "if", "is_train", "else", "'test'", "\n", "\n", "dataset", "=", "torchvision", ".", "datasets", ".", "STL10", "(", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'STL10'", ")", ",", "\n", "download", "=", "True", ",", "split", "=", "split", ",", "transform", "=", "trnsfrm", ")", "\n", "nb_classes", "=", "10", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'Cars'", ":", "\n", "        ", "file_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'carsStanford/car_data/car_data/'", ")", "\n", "\n", "if", "is_train", ":", "\n", "            ", "datafiles", "=", "file_root", "+", "'/train'", "#'TrainFiles_50Samples.csv'", "\n", "", "else", ":", "\n", "            ", "datafiles", "=", "file_root", "+", "'/test'", "\n", "", "dataset", "=", "Cars", "(", "datafiles", ",", "transform", "=", "trnsfrm", ",", "training_mode", "=", "training_mode", ")", "\n", "\n", "nb_classes", "=", "196", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'Flowers'", ":", "\n", "        ", "file_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'Flowers'", ")", "\n", "\n", "if", "is_train", ":", "\n", "            ", "datafiles", "=", "file_root", "+", "'/train'", "#'TrainFiles_50Samples.csv'", "\n", "", "else", ":", "\n", "            ", "datafiles", "=", "file_root", "+", "'/test'", "\n", "", "dataset", "=", "Flowers", "(", "datafiles", ",", "transform", "=", "trnsfrm", ",", "training_mode", "=", "training_mode", ")", "\n", "\n", "nb_classes", "=", "102", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'TinyImageNet'", ":", "\n", "        ", "mode", "=", "'train'", "if", "is_train", "else", "'val'", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'TinyImageNet/tiny-imagenet-200/'", ")", "\n", "dataset", "=", "TinyImageNetDataset", "(", "root_dir", "=", "root_dir", ",", "mode", "=", "mode", ",", "transform", "=", "trnsfrm", ",", "\n", "training_mode", "=", "training_mode", ")", "\n", "nb_classes", "=", "200", "\n", "\n", "\n", "", "elif", "args", ".", "data_set", "==", "'ImageNet'", ":", "\n", "        ", "file_root", "=", "'datasets/ImageNet_files/'", "\n", "\n", "if", "is_train", ":", "\n", "            ", "datafiles", "=", "file_root", "+", "'TrainFiles_1300Samples_shuffled_abs.csv'", "\n", "", "else", ":", "\n", "            ", "datafiles", "=", "file_root", "+", "'INet_val.csv'", "\n", "\n", "", "file_loc", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_location", ",", "'still/ImageNet/ILSVRC2012'", ")", "\n", "dataset", "=", "ImageNetDataset", "(", "datafiles", ",", "dataset_path", "=", "file_loc", ",", "transform", "=", "trnsfrm", ",", "training_mode", "=", "training_mode", ")", "\n", "\n", "nb_classes", "=", "1000", "\n", "\n", "", "return", "dataset", ",", "nb_classes", "\n", "\n"]]}