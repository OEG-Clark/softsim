{"home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.__init__": [[9, 23], ["graph_function.make_decomposition", "GPyOpt.models.gpmodel.GPModel.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.make_decomposition", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "noise_var", ",", "exact_feval", ",", "optimize_restarts", ",", "exploration_weight_function", ",", "learnDependencyStructureRate", ",", "learnParameterRate", ",", "mlflow_logging", ",", "graph_function", ",", "fn", ")", ":", "\n", "        ", "self", ".", "graph_function", "=", "graph_function", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "has_logged_inital", "=", "False", "\n", "_", ",", "kernel_full", ",", "self", ".", "cfn", "=", "graph_function", ".", "make_decomposition", "(", "self", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "exploration_weight_function", "=", "exploration_weight_function", "\n", "self", ".", "learnDependencyStructureRate", "=", "learnDependencyStructureRate", "\n", "if", "learnParameterRate", "==", "None", ":", "\n", "            ", "self", ".", "learnParameterRate", "=", "learnDependencyStructureRate", "\n", "", "else", ":", "\n", "            ", "self", ".", "learnParameterRate", "=", "learnParameterRate", "\n", "", "self", ".", "mlflow_logging", "=", "mlflow_logging", "\n", "super", "(", "MyGPModel", ",", "self", ")", ".", "__init__", "(", "kernel", "=", "kernel_full", ",", "noise_var", "=", "noise_var", ",", "exact_feval", "=", "exact_feval", ",", "optimize_restarts", "=", "optimize_restarts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.predict": [[24, 26], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ",", "with_noise", "=", "True", ")", ":", "\n", "        ", "raise", "Exception", "\n", "", "def", "predict_withGradients", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.predict_withGradients": [[26, 28], ["None"], "methods", ["None"], ["", "def", "predict_withGradients", "(", "self", ",", "X", ")", ":", "\n", "        ", "raise", "Exception", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.predict_with_kernel": [[29, 40], ["myGPModel.MyGPModel.model.predict", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "def", "predict_with_kernel", "(", "self", ",", "X", ",", "kernel", ")", ":", "\n", "        ", "if", "X", ".", "ndim", "==", "1", ":", "\n", "            ", "X", "=", "X", "[", "None", ",", ":", "]", "\n", "# self.model -> GPRegression", "\n", "#self.model.kern = kernel", "\n", "#m, v = self.model.predict(X, full_cov=False, include_likelihood=True)", "\n", "", "m", ",", "v", "=", "self", ".", "model", ".", "predict", "(", "X", ",", "kern", "=", "kernel", ",", "full_cov", "=", "False", ",", "include_likelihood", "=", "True", ")", "\n", "# Stability issues?", "\n", "v", "=", "np", ".", "clip", "(", "v", ",", "1e-10", ",", "np", ".", "inf", ")", "\n", "# We can take the square root because v is just a diagonal matrix of variances", "\n", "return", "m", ",", "np", ".", "sqrt", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.predict_withGradients_with_kernel": [[41, 50], ["myGPModel.MyGPModel.model.predict", "numpy.clip", "myGPModel.MyGPModel.model.predictive_gradients", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "def", "predict_withGradients_with_kernel", "(", "self", ",", "X", ",", "kernel", ")", ":", "\n", "        ", "if", "X", ".", "ndim", "==", "1", ":", "X", "=", "X", "[", "None", ",", ":", "]", "\n", "m", ",", "v", "=", "self", ".", "model", ".", "predict", "(", "X", ",", "kern", "=", "kernel", ",", "full_cov", "=", "False", ",", "include_likelihood", "=", "True", ")", "\n", "v", "=", "np", ".", "clip", "(", "v", ",", "1e-10", ",", "np", ".", "inf", ")", "\n", "\n", "dmdx", ",", "dvdx", "=", "self", ".", "model", ".", "predictive_gradients", "(", "X", ",", "kern", "=", "kernel", ")", "\n", "dmdx", "=", "dmdx", "[", ":", ",", ":", ",", "0", "]", "\n", "dsdx", "=", "dvdx", "/", "(", "2", "*", "np", ".", "sqrt", "(", "v", ")", ")", "\n", "return", "m", ",", "np", ".", "sqrt", "(", "v", ")", ",", "dmdx", ",", "dsdx", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.exploration_weight": [[52, 54], ["myGPModel.MyGPModel.exploration_weight_function"], "methods", ["None"], ["", "def", "exploration_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "exploration_weight_function", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.updateModel": [[56, 67], ["super().updateModel", "myGPModel.MyGPModel.mlflow_logging.log_init_y", "myGPModel.MyGPModel.mlflow_logging.log_y", "len", "len", "numpy.min", "len", "len", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.updateModel", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_init_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y"], ["", "def", "updateModel", "(", "self", ",", "X_all", ",", "Y_all", ",", "X_new", ",", "Y_new", ")", ":", "\n", "        ", "super", "(", "MyGPModel", ",", "self", ")", ".", "updateModel", "(", "X_all", ",", "Y_all", ",", "X_new", ",", "Y_new", ")", "\n", "\n", "if", "self", ".", "t", "==", "0", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "fn", ".", "history_y", ")", "==", "len", "(", "Y_all", ")", ")", "\n", "# Attempt to return f instead of y if that exist", "\n", "self", ".", "mlflow_logging", ".", "log_init_y", "(", "np", ".", "min", "(", "self", ".", "fn", ".", "history_y", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "fn", ".", "history_y", ")", "==", "len", "(", "Y_all", ")", ")", "\n", "self", ".", "mlflow_logging", ".", "log_y", "(", "np", ".", "min", "(", "self", ".", "fn", ".", "history_y", "[", "-", "1", "]", ")", ")", "\n", "", "self", ".", "t", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.update_structure": [[68, 107], ["isinstance", "Y_all.flatten", "fn_optimizer.optimize", "fn.mlflow_logging.log_graph_metrics", "logging.debug", "myGPModel.MyGPModel.graph_function.make_decomposition", "fn.mlflow_logging.log_graph_metrics", "Y_all.flatten", "fn_optimizer.optimize_parameters", "logging.debug", "myGPModel.MyGPModel.graph_function.make_decomposition"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_graph_metrics", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.make_decomposition", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_graph_metrics", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOptimizer.optimize_parameters", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.make_decomposition"], ["", "def", "update_structure", "(", "self", ",", "acquisition", ",", "X_all", ",", "Y_all", ",", "fn_optimizer", ",", "fn", ")", ":", "\n", "\n", "        ", "if", "self", ".", "learnDependencyStructureRate", "<", "0", ":", "\n", "            ", "return", "\n", "\n", "# bayes attack, mimicking their run behavior of running the ", "\n", "", "bayes_attack_style", "=", "(", "isinstance", "(", "fn", ",", "BattackFn", ")", "and", "self", ".", "t", "==", "1", ")", "\n", "\n", "# Decide when to learn new structure", "\n", "if", "bayes_attack_style", "or", "self", ".", "t", "%", "self", ".", "learnDependencyStructureRate", "==", "0", ":", "\n", "            ", "if", "not", "self", ".", "has_logged_inital", ":", "\n", "# Log the inital graph", "\n", "                ", "fn", ".", "mlflow_logging", ".", "log_graph_metrics", "(", "self", ".", "graph_function", ".", "graph", ")", "\n", "self", ".", "has_logged_inital", "=", "True", "\n", "\n", "# Optimal never reaches here...", "\n", "\n", "# We do not need to learn the following", "\n", "# best_tree, lengthscales, dimensional_lengthscale", "\n", "", "Y_vect", "=", "Y_all", ".", "flatten", "(", ")", "\n", "\n", "fn_optimizer", ".", "optimize", "(", "X_all", ",", "Y_vect", ",", "self", ".", "graph_function", ")", "\n", "fn", ".", "mlflow_logging", ".", "log_graph_metrics", "(", "self", ".", "graph_function", ".", "graph", ")", "\n", "\n", "# Make acquisitions", "\n", "# ========================================================================", "\n", "# Update the decomposition used", "\n", "logging", ".", "debug", "(", "\"Dim Param: {}\"", ".", "format", "(", "self", ".", "graph_function", ".", "dimensional_parameters", ")", ")", "\n", "_", ",", "self", ".", "kernel", ",", "self", ".", "cfn", "=", "self", ".", "graph_function", ".", "make_decomposition", "(", "self", ")", "\n", "self", ".", "model", "=", "None", "\n", "", "elif", "self", ".", "t", "%", "self", ".", "learnParameterRate", "==", "0", ":", "\n", "# learn the parameters", "\n", "\n", "            ", "Y_vect", "=", "Y_all", ".", "flatten", "(", ")", "\n", "fn_optimizer", ".", "optimize_parameters", "(", "X_all", ",", "Y_vect", ",", "self", ".", "graph_function", ")", "\n", "\n", "logging", ".", "debug", "(", "\"Dim Param: {}\"", ".", "format", "(", "self", ".", "graph_function", ".", "dimensional_parameters", ")", ")", "\n", "_", ",", "self", ".", "kernel", ",", "self", ".", "cfn", "=", "self", ".", "graph_function", ".", "make_decomposition", "(", "self", ")", "\n", "self", ".", "model", "=", "None", "", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB.__init__": [[4, 9], ["GPyOpt.acquisitions.AcquisitionLCB.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "kernel", ",", "variables", ")", ":", "\n", "        ", "super", "(", "MyAcquisitionLCB", ",", "self", ")", ".", "__init__", "(", "model", "=", "model", ",", "space", "=", "None", ",", "exploration_weight", "=", "None", ")", "\n", "self", ".", "dimension", "=", "kernel", ".", "input_dim", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "variables", "=", "variables", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB._compute_acq": [[11, 15], ["myAcquisitionLCB.MyAcquisitionLCB.model.predict_with_kernel", "myAcquisitionLCB.MyAcquisitionLCB.model.exploration_weight"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.predict_with_kernel", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.exploration_weight"], ["", "def", "_compute_acq", "(", "self", ",", "x", ")", ":", "\n", "        ", "m", ",", "s", "=", "self", ".", "model", ".", "predict_with_kernel", "(", "x", ",", "self", ".", "kernel", ")", "\n", "f_acqu", "=", "-", "m", "+", "self", ".", "model", ".", "exploration_weight", "(", ")", "*", "s", "\n", "return", "f_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB._compute_acq_withGradients": [[16, 22], ["myAcquisitionLCB.MyAcquisitionLCB.model.predict_withGradients_with_kernel", "myAcquisitionLCB.MyAcquisitionLCB.model.exploration_weight", "myAcquisitionLCB.MyAcquisitionLCB.model.exploration_weight"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.predict_withGradients_with_kernel", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.exploration_weight", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.exploration_weight"], ["", "def", "_compute_acq_withGradients", "(", "self", ",", "x", ")", ":", "\n", "        ", "m", ",", "s", ",", "dmdx", ",", "dsdx", "=", "self", ".", "model", ".", "predict_withGradients_with_kernel", "(", "x", ",", "self", ".", "kernel", ")", "\n", "\n", "f_acqu", "=", "-", "m", "+", "self", ".", "model", ".", "exploration_weight", "(", ")", "*", "s", "\n", "df_acqu", "=", "-", "dmdx", "+", "self", ".", "model", ".", "exploration_weight", "(", ")", "*", "dsdx", "\n", "return", "f_acqu", ",", "df_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB.acquisition_function": [[24, 27], ["myAcquisitionLCB.MyAcquisitionLCB._compute_acq"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq"], ["", "def", "acquisition_function", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_acqu", "=", "self", ".", "_compute_acq", "(", "x", ")", "\n", "return", "-", "f_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB.acquisition_function_withGradients": [[28, 31], ["myAcquisitionLCB.MyAcquisitionLCB._compute_acq_withGradients"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq_withGradients"], ["", "def", "acquisition_function_withGradients", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_acqu", ",", "df_acqu", "=", "self", ".", "_compute_acq_withGradients", "(", "x", ")", "\n", "return", "-", "f_acqu", ",", "-", "df_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB.__call__": [[32, 34], ["myAcquisitionLCB.MyAcquisitionLCB.acquisition_function"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB.acquisition_function"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "acquisition_function", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.LPSolveParam.__init__": [[36, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paramName", ",", "subParams", ")", ":", "\n", "        ", "self", ".", "name", "=", "paramName", "\n", "self", ".", "subParamList", "=", "subParams", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.LPSolveParam.resolveLPparams": [[40, 47], ["formatString.format", "subParam.resolveLPSetFunc"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.SubParam.resolveLPSetFunc"], ["", "def", "resolveLPparams", "(", "self", ",", "formatString", ")", ":", "\n", "        ", "paramTuple", "=", "(", ")", "\n", "\n", "for", "subParam", "in", "self", ".", "subParamList", ":", "\n", "            ", "paramTuple", "=", "paramTuple", "+", "(", "subParam", ".", "resolveLPSetFunc", "(", ")", ",", ")", "\n", "\n", "", "return", "formatString", ".", "format", "(", "*", "paramTuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.LPSolveParam.generateKeyValues": [[48, 55], ["generation_script.joiner", "subParam.generateKeyValues", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.joiner", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.SubParam.generateKeyValues"], ["", "def", "generateKeyValues", "(", "self", ")", ":", "\n", "        ", "keyValuesTuple", "=", "(", ")", "\n", "\n", "for", "subParam", "in", "self", ".", "subParamList", ":", "\n", "            ", "keyValuesTuple", "=", "joiner", "(", "keyValuesTuple", ",", "subParam", ".", "generateKeyValues", "(", "prefix_name", "=", "(", "len", "(", "self", ".", "subParamList", ")", ">", "1", ")", ")", ")", "\n", "\n", "", "return", "keyValuesTuple", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.SubParam.__init__": [[58, 62], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "subParamName", ",", "subParamType", ",", "subParamValues", ")", ":", "\n", "        ", "self", ".", "name", "=", "subParamName", "\n", "self", ".", "type", "=", "subParamType", "\n", "self", ".", "values", "=", "subParamValues", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.SubParam.resolveLPSetFunc": [[63, 68], ["None"], "methods", ["None"], ["", "def", "resolveLPSetFunc", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "type", "==", "CATEGORIAL_COMBIN", ":", "\n", "            ", "return", "\"getCombinationValue(\\\"{}\\\", args_x)\"", ".", "format", "(", "self", ".", "name", ")", "\n", "", "else", ":", "\n", "            ", "return", "\"getSingleValue(\\\"{}\\\", args_x)\"", ".", "format", "(", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.SubParam.generateKeyValues": [[69, 98], ["kwargs.get", "kwargs.get", "generation_script.decompressBoolean", "generation_script.decompressBoolean", "generation_script.decompressList", "generation_script.singleBoolean", "generation_script.linGen", "generation_script.linGen", "generation_script.linGen", "generation_script.geoGen", "generation_script.geoGen", "generation_script.geoGen"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.decompressBoolean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.decompressBoolean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.decompressList", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.singleBoolean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.linGen", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.linGen", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.linGen", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.geoGen", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.geoGen", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.geoGen"], ["", "", "def", "generateKeyValues", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "prefixName", "=", "kwargs", ".", "get", "(", "'prefix_name'", ",", "True", ")", "\n", "rounded", "=", "kwargs", ".", "get", "(", "'rounded'", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "type", "==", "CATEGORIAL_COMBIN", ":", "\n", "            ", "if", "prefixName", ":", "\n", "                ", "return", "decompressBoolean", "(", "self", ".", "values", ",", "prefix", "=", "self", ".", "name", "+", "\"_\"", ")", "\n", "", "else", ":", "\n", "                ", "return", "decompressBoolean", "(", "self", ".", "values", ")", "\n", "", "", "elif", "self", ".", "type", "==", "CATEGORIAL_SINGLE_VAL", ":", "\n", "            ", "return", "decompressList", "(", "self", ".", "values", ",", "self", ".", "name", ")", "\n", "", "elif", "self", ".", "type", "==", "BOOL_SINGLE_VAL", ":", "\n", "            ", "return", "singleBoolean", "(", "self", ".", "values", ",", "self", ".", "name", ")", "\n", "", "elif", "self", ".", "type", "==", "LIN_RANGE_INT", ":", "\n", "            ", "return", "linGen", "(", "self", ".", "values", ",", "self", ".", "name", ",", "rounded", "=", "0", ",", "integer", "=", "True", ")", "\n", "", "elif", "self", ".", "type", "==", "LIN_RANGE_FLOAT", ":", "\n", "            ", "if", "rounded", "<=", "-", "1", ":", "\n", "                ", "return", "linGen", "(", "self", ".", "values", ",", "self", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "return", "linGen", "(", "self", ".", "values", ",", "self", ".", "name", ",", "rounded", "=", "rounded", ")", "\n", "", "", "elif", "self", ".", "type", "==", "LOG_RANGE_INT", ":", "\n", "            ", "return", "geoGen", "(", "self", ".", "values", ",", "self", ".", "name", ",", "rounded", "=", "0", ",", "integer", "=", "True", ")", "\n", "", "elif", "self", ".", "type", "==", "LOG_RANGE_FLOAT", ":", "\n", "            ", "if", "rounded", "<=", "-", "1", ":", "\n", "                ", "return", "geoGen", "(", "self", ".", "values", ",", "self", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "return", "geoGen", "(", "self", ".", "values", ",", "self", ".", "name", ",", "rounded", "=", "rounded", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.decompressBoolean": [[103, 118], ["kwargs.get", "hyperValues.append", "parameters.append", "booleanMap.append", "typeList.append", "numpy.array", "key.lower"], "function", ["None"], ["", "", "", "def", "decompressBoolean", "(", "keyMap", ",", "**", "kwargs", ")", ":", "\n", "    ", "parameters", "=", "[", "]", "\n", "booleanMap", "=", "[", "]", "\n", "hyperValues", "=", "[", "]", "\n", "typeList", "=", "[", "]", "\n", "prefix", "=", "kwargs", ".", "get", "(", "'prefix'", ",", "\"\"", ")", "\n", "\n", "for", "key", "in", "keyMap", ":", "\n", "        ", "hyperValues", ".", "append", "(", "np", ".", "array", "(", "[", "0.0", ",", "1.0", "]", ")", ")", "\n", "parameters", ".", "append", "(", "prefix", "+", "key", ".", "lower", "(", ")", ")", "\n", "booleanMap", ".", "append", "(", "{", "0.0", ":", "0.0", ",", "1.0", ":", "keyMap", "[", "key", "]", "}", ")", "\n", "typeList", ".", "append", "(", "\"categorial\"", ")", "\n", "\n", "\n", "", "return", "(", "hyperValues", ",", "booleanMap", ",", "parameters", ",", "typeList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.decompressList": [[119, 136], ["list", "list.sort", "hyperValues.append", "parameters.append", "typeList.append", "range", "keyMap.values", "numpy.around", "len", "numpy.linspace", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values"], ["", "def", "decompressList", "(", "keyMap", ",", "prefix", ")", ":", "\n", "    ", "parameters", "=", "[", "]", "\n", "valueMap", "=", "[", "{", "}", "]", "\n", "hyperValues", "=", "[", "]", "\n", "typeList", "=", "[", "]", "\n", "\n", "mapValues", "=", "list", "(", "keyMap", ".", "values", "(", ")", ")", "\n", "mapValues", ".", "sort", "(", ")", "\n", "\n", "hyperValues", ".", "append", "(", "np", ".", "around", "(", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "len", "(", "mapValues", ")", ")", ",", "decimals", "=", "5", ")", ")", "\n", "parameters", ".", "append", "(", "prefix", ")", "\n", "typeList", ".", "append", "(", "\"categorial\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "mapValues", ")", ")", ":", "\n", "        ", "valueMap", "[", "0", "]", "[", "hyperValues", "[", "0", "]", "[", "i", "]", "]", "=", "mapValues", "[", "i", "]", "\n", "\n", "", "return", "(", "hyperValues", ",", "valueMap", ",", "parameters", ",", "typeList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.anydup": [[137, 143], ["set", "set.add"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add"], ["", "def", "anydup", "(", "thelist", ")", ":", "\n", "    ", "seen", "=", "set", "(", ")", "\n", "for", "x", "in", "thelist", ":", "\n", "        ", "if", "x", "in", "seen", ":", "return", "True", "\n", "seen", ".", "add", "(", "x", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.linRange": [[144, 168], ["kwargs.get", "kwargs.get", "numpy.linspace", "hyperValues.append", "parameters.append", "typeList.append", "range", "numpy.around", "generatedValues.astype.astype", "numpy.around", "len", "numpy.linspace", "round"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "linRange", "(", "lower", ",", "higher", ",", "num", ",", "prefix", ",", "**", "kwargs", ")", ":", "\n", "    ", "parameters", "=", "[", "]", "\n", "valueMap", "=", "[", "{", "}", "]", "\n", "hyperValues", "=", "[", "]", "\n", "typeList", "=", "[", "]", "\n", "rounded", "=", "kwargs", ".", "get", "(", "'rounded'", ",", "-", "1", ")", "\n", "integer", "=", "kwargs", ".", "get", "(", "'integer'", ",", "False", ")", "\n", "\n", "generatedValues", "=", "np", ".", "linspace", "(", "lower", ",", "higher", ",", "num", ")", "\n", "\n", "if", "(", "rounded", ">=", "0", ")", ":", "\n", "        ", "generatedValues", "=", "np", ".", "around", "(", "generatedValues", ",", "decimals", "=", "round", "(", "rounded", ")", ")", "\n", "\n", "", "if", "(", "integer", ")", ":", "\n", "        ", "generatedValues", "=", "generatedValues", ".", "astype", "(", "int", ")", "\n", "\n", "", "hyperValues", ".", "append", "(", "np", ".", "around", "(", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "num", ")", ",", "decimals", "=", "5", ")", ")", "\n", "parameters", ".", "append", "(", "prefix", ")", "\n", "typeList", ".", "append", "(", "\"range\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "generatedValues", ")", ")", ":", "\n", "        ", "valueMap", "[", "0", "]", "[", "hyperValues", "[", "0", "]", "[", "i", "]", "]", "=", "generatedValues", "[", "i", "]", "\n", "\n", "", "return", "(", "hyperValues", ",", "valueMap", ",", "parameters", ",", "typeList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.geoRange": [[169, 193], ["kwargs.get", "kwargs.get", "numpy.geomspace", "hyperValues.append", "parameters.append", "typeList.append", "range", "numpy.around", "generatedValues.astype.astype", "numpy.around", "len", "numpy.linspace", "round"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "geoRange", "(", "lower", ",", "higher", ",", "num", ",", "prefix", ",", "**", "kwargs", ")", ":", "\n", "    ", "parameters", "=", "[", "]", "\n", "valueMap", "=", "[", "{", "}", "]", "\n", "hyperValues", "=", "[", "]", "\n", "typeList", "=", "[", "]", "\n", "rounded", "=", "kwargs", ".", "get", "(", "'rounded'", ",", "-", "1", ")", "\n", "integer", "=", "kwargs", ".", "get", "(", "'integer'", ",", "False", ")", "\n", "\n", "generatedValues", "=", "np", ".", "geomspace", "(", "lower", ",", "higher", ",", "num", ")", "\n", "\n", "if", "(", "rounded", ">=", "0", ")", ":", "\n", "        ", "generatedValues", "=", "np", ".", "around", "(", "generatedValues", ",", "decimals", "=", "round", "(", "rounded", ")", ")", "\n", "\n", "", "if", "(", "integer", ")", ":", "\n", "        ", "generatedValues", "=", "generatedValues", ".", "astype", "(", "int", ")", "\n", "\n", "", "hyperValues", ".", "append", "(", "np", ".", "around", "(", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "num", ")", ",", "decimals", "=", "5", ")", ")", "\n", "parameters", ".", "append", "(", "prefix", ")", "\n", "typeList", ".", "append", "(", "\"range\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "generatedValues", ")", ")", ":", "\n", "        ", "valueMap", "[", "0", "]", "[", "hyperValues", "[", "0", "]", "[", "i", "]", "]", "=", "generatedValues", "[", "i", "]", "\n", "\n", "", "return", "(", "hyperValues", ",", "valueMap", ",", "parameters", ",", "typeList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.linGen": [[194, 199], ["kwargs.get", "kwargs.get", "generation_script.linRange"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.linRange"], ["", "def", "linGen", "(", "args", ",", "prefix", ",", "**", "kwargs", ")", ":", "\n", "    ", "rounded", "=", "kwargs", ".", "get", "(", "'rounded'", ",", "-", "1", ")", "\n", "integer", "=", "kwargs", ".", "get", "(", "'integer'", ",", "False", ")", "\n", "\n", "return", "linRange", "(", "args", "[", "\"lower\"", "]", ",", "args", "[", "\"higher\"", "]", ",", "args", "[", "\"num\"", "]", ",", "prefix", ",", "rounded", "=", "rounded", ",", "integer", "=", "integer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.geoGen": [[200, 205], ["kwargs.get", "kwargs.get", "generation_script.geoRange"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.geoRange"], ["", "def", "geoGen", "(", "args", ",", "prefix", ",", "**", "kwargs", ")", ":", "\n", "    ", "rounded", "=", "kwargs", ".", "get", "(", "'rounded'", ",", "-", "1", ")", "\n", "integer", "=", "kwargs", ".", "get", "(", "'integer'", ",", "False", ")", "\n", "\n", "return", "geoRange", "(", "args", "[", "\"lower\"", "]", ",", "args", "[", "\"higher\"", "]", ",", "args", "[", "\"num\"", "]", ",", "prefix", ",", "rounded", "=", "rounded", ",", "integer", "=", "integer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.singleBoolean": [[206, 213], ["numpy.array"], "function", ["None"], ["", "def", "singleBoolean", "(", "args", ",", "prefix", ")", ":", "\n", "    ", "parameters", "=", "[", "prefix", "]", "\n", "keyMap", "=", "[", "{", "0.0", ":", "args", "[", "\"value_if_false\"", "]", ",", "1.0", ":", "args", "[", "\"value_if_true\"", "]", "}", "]", "\n", "hyperValues", "=", "[", "np", ".", "array", "(", "[", "0.0", ",", "1.0", "]", ")", "]", "\n", "typeList", "=", "[", "\"value\"", "]", "\n", "\n", "return", "(", "hyperValues", ",", "keyMap", ",", "parameters", ",", "typeList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.joiner": [[214, 228], ["len"], "function", ["None"], ["", "def", "joiner", "(", "*", "argv", ")", ":", "\n", "    ", "parameters", "=", "[", "]", "\n", "keyMap", "=", "[", "]", "\n", "hyperValues", "=", "[", "]", "\n", "typeList", "=", "[", "]", "\n", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "if", "(", "len", "(", "arg", ")", "!=", "0", ")", ":", "\n", "            ", "hyperValues", "+=", "arg", "[", "0", "]", "\n", "keyMap", "+=", "arg", "[", "1", "]", "\n", "parameters", "+=", "arg", "[", "2", "]", "\n", "typeList", "+=", "arg", "[", "3", "]", "\n", "\n", "", "", "return", "(", "hyperValues", ",", "keyMap", ",", "parameters", ",", "typeList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.genLPSolveParam": [[229, 236], ["generation_script.LPSolveParam", "subParamList.append", "generation_script.SubParam"], "function", ["None"], ["", "def", "genLPSolveParam", "(", "paramName", ",", "*", "argv", ")", ":", "\n", "    ", "subParamList", "=", "[", "]", "\n", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "subParamList", ".", "append", "(", "SubParam", "(", "arg", "[", "0", "]", ",", "arg", "[", "1", "]", ",", "arg", "[", "2", "]", ")", ")", "\n", "\n", "", "return", "LPSolveParam", "(", "paramName", ",", "subParamList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.addToPList": [[237, 239], ["pList.append", "generation_script.genLPSolveParam"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.genLPSolveParam"], ["", "def", "addToPList", "(", "paramName", ",", "*", "argv", ")", ":", "\n", "    ", "pList", ".", "append", "(", "genLPSolveParam", "(", "paramName", ",", "*", "argv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.genLPSolveParamSet": [[240, 283], ["param.resolveLPparams"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.LPSolveParam.resolveLPparams"], ["", "def", "genLPSolveParamSet", "(", "paramList", ")", ":", "\n", "    ", "content", "=", "\"\"", "\n", "header", "=", "\"#=====================================================================================================================\\n### --- set hyperparameters here --- ###\\n\"", "\n", "footer", "=", "\"\\n\\n### --- end of hyperparameters --- ###\\n#=====================================================================================================================\"", "\n", "\n", "stcParamSetFormatList", "=", "{", "\n", "\"anti_degen\"", ":", "\"{}\"", ",", "\n", "\"basiscrash\"", ":", "\"{}\"", ",", "\n", "\"bb_depthlimit\"", ":", "\"{} * {}\"", ",", "\n", "\"bb_rule\"", ":", "\"{} + {}\"", ",", "\n", "\"improve\"", ":", "\"{}\"", ",", "\n", "\"BFP\"", ":", "\"\"", ",", "\n", "\"maxpivot\"", ":", "\"{}\"", ",", "\n", "\"presolve\"", ":", "\"{}\"", ",", "\n", "\"pivoting\"", ":", "\"{} + {}\"", ",", "\n", "\"epsb\"", ":", "\"{}\"", ",", "\n", "\"epsd\"", ":", "\"{}\"", ",", "\n", "\"epsel\"", ":", "\"{}\"", ",", "\n", "\"epsint\"", ":", "\"{}\"", ",", "\n", "\"epsperturb\"", ":", "\"{}\"", ",", "\n", "\"epspivot\"", ":", "\"{}\"", ",", "\n", "\"infinite\"", ":", "\"{}\"", ",", "\n", "\"mip_gap\"", ":", "\"{} , {}\"", ",", "\n", "\"scaling\"", ":", "\"{} + {}\"", ",", "\n", "\"scalelimit\"", ":", "\"{}\"", ",", "\n", "\"simplextype\"", ":", "\"{}\"", "\n", "}", "\n", "\n", "dynParamSetFormatList", "=", "{", "\n", "\"basis\"", ":", "\"\"", ",", "\n", "\"var_branch\"", ":", "\"\"", ",", "\n", "\"var_weights\"", ":", "\"\"", "\n", "}", "\n", "\n", "for", "param", "in", "paramList", ":", "\n", "        ", "content", "=", "content", "+", "\"\\n    lpsolve('set_{}', lp, {})\"", ".", "format", "(", "param", ".", "name", ",", "param", ".", "resolveLPparams", "(", "stcParamSetFormatList", "[", "param", ".", "name", "]", ")", ")", "\n", "\n", "", "content", "=", "content", "+", "\"\\n\\n    ### - These Parameters that are reliant on the dimension of the problem\\n\"", "\n", "\n", "for", "key", "in", "dynParamSetFormatList", ":", "\n", "        ", "content", "=", "content", "+", "\"\\n    #lpsolve('set_{}', lp, {})\"", ".", "format", "(", "key", ",", "key", ")", "\n", "\n", "", "return", "header", "+", "content", "+", "footer", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.genParamKeyValues": [[284, 291], ["generation_script.joiner", "param.generateKeyValues"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.joiner", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.SubParam.generateKeyValues"], ["", "def", "genParamKeyValues", "(", "paramList", ")", ":", "\n", "    ", "fullStack", "=", "(", ")", "\n", "\n", "for", "param", "in", "paramList", ":", "\n", "        ", "fullStack", "=", "joiner", "(", "fullStack", ",", "param", ".", "generateKeyValues", "(", ")", ")", "\n", "\n", "", "return", "fullStack", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.genFaux": [[292, 294], ["numpy.random.choice"], "function", ["None"], ["", "def", "genFaux", "(", "hyperValues", ")", ":", "\n", "    ", "return", "[", "np", ".", "random", ".", "choice", "(", "arrayOfValues", ",", "replace", "=", "False", ")", "for", "arrayOfValues", "in", "hyperValues", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.generation_script.tablizer": [[596, 605], ["print", "print", "print", "params.index", "params.index", "params.index"], "function", ["None"], ["def", "tablizer", "(", "keyMap", ",", "typeList", ",", "params", ")", ":", "\n", "    ", "header", "=", "\" __Parameter Name__ | __Type__ | __Default__ | __Min__ | __Max__ \"", "\n", "headerSeparator", "=", "\"--- | --- | --- | --- | --- \"", "\n", "\n", "print", "(", "header", ")", "\n", "print", "(", "headerSeparator", ")", "\n", "\n", "for", "param", "in", "params", ":", "\n", "        ", "print", "(", "\"{} | {} |  | {} | {}\"", ".", "format", "(", "param", ",", "typeList", "[", "params", ".", "index", "(", "param", ")", "]", ",", "keyMap", "[", "params", ".", "index", "(", "param", ")", "]", "[", "0.0", "]", ",", "keyMap", "[", "params", ".", "index", "(", "param", ")", "]", "[", "1.0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.init.logger": [[13, 36], ["os.getenv", "logging.Formatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "common.Config().log_file", "common.Config().log_file", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "common.Config", "common.Config"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.log_file", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.log_file"], ["def", "logger", "(", "env_key", "=", "'LOGGING_TYPE'", ")", ":", "\n", "\n", "    ", "logging_type", "=", "os", ".", "getenv", "(", "env_key", ",", "'local'", ")", "\n", "\n", "log_formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s [%(levelname)-8s] [%(filename)s:%(lineno)d] %(message)s'", ",", "datefmt", "=", "'%d/%m/%Y %H:%M:%S'", ")", "\n", "root_logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "root_logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "info_file_handler", "=", "logging", ".", "FileHandler", "(", "Config", "(", ")", ".", "log_file", "(", "\"info.log\"", ")", ")", "\n", "info_file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "info_file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "root_logger", ".", "addHandler", "(", "info_file_handler", ")", "\n", "\n", "error_file_handler", "=", "logging", ".", "FileHandler", "(", "Config", "(", ")", ".", "log_file", "(", "\"error.log\"", ")", ")", "\n", "error_file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "error_file_handler", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "root_logger", ".", "addHandler", "(", "error_file_handler", ")", "\n", "\n", "if", "logging_type", "==", "'local'", ":", "\n", "        ", "consoleHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "consoleHandler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "consoleHandler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "root_logger", ".", "addHandler", "(", "consoleHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.init.args_parse": [[52, 82], ["yaml.load", "hashlib.sha1().hexdigest", "list", "list", "hashlib.sha1().hexdigest", "yaml.load.update", "yaml.load.update", "open", "args_dict[].keys", "len", "logging.error", "args_dict[].keys", "len", "logging.error", "type", "eval", "hashlib.sha1", "hashlib.sha1", "json.dumps().encode", "json.dumps().encode", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.update", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.update", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval"], ["def", "args_parse", "(", ")", ":", "\n", "\n", "    ", "args_dict", "=", "yaml", ".", "load", "(", "open", "(", "sys", ".", "argv", "[", "1", "]", ")", ",", "yaml", ".", "FullLoader", ")", "\n", "args_dict", "[", "\"hash_exe\"", "]", "=", "hashlib", ".", "sha1", "(", "json", ".", "dumps", "(", "args_dict", ",", "sort_keys", "=", "True", ")", ".", "encode", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "which_datas", "=", "list", "(", "args_dict", "[", "\"data_type\"", "]", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "which_datas", ")", "!=", "1", ":", "\n", "        ", "logging", ".", "error", "(", "'There should be only one data type declared.'", ")", "\n", "\n", "", "which_algorithms", "=", "list", "(", "args_dict", "[", "\"algorithm_type\"", "]", ".", "keys", "(", ")", ")", "\n", "if", "len", "(", "which_algorithms", ")", "!=", "1", ":", "\n", "        ", "logging", ".", "error", "(", "'There should be only one algorithm type declared.'", ")", "\n", "\n", "# Process the 2 types, data and algo type", "\n", "", "args_dict", "[", "\"which_data\"", "]", "=", "which_datas", "[", "0", "]", "\n", "args_dict", "[", "\"which_algorithm\"", "]", "=", "which_algorithms", "[", "0", "]", "\n", "\n", "args_dict", "[", "\"hash_data\"", "]", "=", "hashlib", ".", "sha1", "(", "json", ".", "dumps", "(", "args_dict", "[", "\"data_type\"", "]", ",", "sort_keys", "=", "True", ")", ".", "encode", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "# Flatten to the parameters", "\n", "args_dict", ".", "update", "(", "args_dict", "[", "\"data_type\"", "]", "[", "args_dict", "[", "\"which_data\"", "]", "]", ")", "\n", "del", "args_dict", "[", "\"data_type\"", "]", "\n", "args_dict", ".", "update", "(", "args_dict", "[", "\"algorithm_type\"", "]", "[", "args_dict", "[", "\"which_algorithm\"", "]", "]", ")", "\n", "del", "args_dict", "[", "\"algorithm_type\"", "]", "\n", "\n", "# turn it into lambda if string", "\n", "if", "type", "(", "args_dict", "[", "\"exploration_weight\"", "]", ")", "==", "str", ":", "\n", "        ", "args_dict", "[", "\"exploration_weight\"", "]", "=", "eval", "(", "args_dict", "[", "\"exploration_weight\"", "]", ")", "\n", "\n", "", "return", "args_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myBOModular.MyBOModular.__init__": [[16, 49], ["GPyOpt.core.task.objective.SingleObjective", "myBOModular.MyBOModular._init_design", "acquisition_optimizer.MPAcquisitionOptimizer", "myGPModel.MyGPModel", "myAcquisitionModular.MyAcquisitionModular", "GPyOpt.core.evaluators.sequential.Sequential", "GPyOpt.core.task.cost.CostModel", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myBOModular.MyBOModular._init_design", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain", ",", "initial_design", ",", "graph_function", ",", "\n", "normalize_Y", "=", "False", ",", "max_eval", "=", "-", "1", ",", "\n", "fn", "=", "None", ",", "fn_optimizer", "=", "None", ",", "noise_var", "=", "None", ",", "exact_feval", "=", "None", ",", "exploration_weight_function", "=", "None", ",", "learnDependencyStructureRate", "=", "None", ",", "learnParameterRate", "=", "None", ",", "\n", "acq_opt_restarts", "=", "1", ")", ":", "\n", "\n", "#self.design_space = Design_space(domain.get_gpy_domain())", "\n", "\n", "        ", "self", ".", "fn", "=", "fn", "\n", "self", ".", "objective", "=", "SingleObjective", "(", "self", ".", "fn", ",", "1", ",", "\"no name\"", ",", "space", "=", "domain", ")", "\n", "self", ".", "_init_design", "(", "initial_design", ")", "\n", "\n", "self", ".", "domain", "=", "domain", "\n", "\n", "self", ".", "acquisition_optimizer", "=", "MPAcquisitionOptimizer", "(", "domain", ",", "graph_function", ",", "[", "]", ",", "self", ".", "fn", ".", "mlflow_logging", ",", "max_eval", "=", "max_eval", ",", "acq_opt_restarts", "=", "acq_opt_restarts", ")", "\n", "#self.acquisition_optimizer = AcquisitionOptimizer(domain)", "\n", "\n", "# model needed for LCB", "\n", "self", ".", "model", "=", "MyGPModel", "(", "noise_var", "=", "noise_var", ",", "exact_feval", "=", "exact_feval", ",", "optimize_restarts", "=", "0", ",", "\n", "exploration_weight_function", "=", "exploration_weight_function", ",", "learnDependencyStructureRate", "=", "learnDependencyStructureRate", ",", "\n", "learnParameterRate", "=", "learnParameterRate", ",", "graph_function", "=", "graph_function", ",", "mlflow_logging", "=", "self", ".", "fn", ".", "mlflow_logging", ",", "fn", "=", "self", ".", "fn", ")", "\n", "\n", "## !!! models inside acqu1 must be the same as models in MyModel !!! -> Ok in Python, the object are references, not copied", "\n", "self", ".", "acquisition", "=", "MyAcquisitionModular", "(", "self", ".", "model", ",", "self", ".", "acquisition_optimizer", ",", "domain", ")", "\n", "self", ".", "evaluator", "=", "Sequential", "(", "self", ".", "acquisition", ")", "\n", "\n", "self", ".", "modular_optimization", "=", "False", "\n", "\n", "self", ".", "cost", "=", "CostModel", "(", "None", ")", "\n", "self", ".", "fn_optimizer", "=", "fn_optimizer", "\n", "\n", "super", "(", "MyBOModular", ",", "self", ")", ".", "__init__", "(", "model", "=", "self", ".", "model", ",", "space", "=", "domain", ",", "objective", "=", "self", ".", "objective", ",", "\n", "acquisition", "=", "self", ".", "acquisition", ",", "evaluator", "=", "self", ".", "evaluator", ",", "X_init", "=", "self", ".", "X", ",", "Y_init", "=", "self", ".", "Y", ",", "\n", "cost", "=", "self", ".", "cost", ",", "normalize_Y", "=", "normalize_Y", ",", "model_update_interval", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myBOModular.MyBOModular._init_design": [[50, 53], ["myBOModular.MyBOModular.objective.evaluate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate"], ["", "def", "_init_design", "(", "self", ",", "initial_design", ")", ":", "\n", "        ", "self", ".", "X", "=", "initial_design", "\n", "self", ".", "Y", ",", "_", "=", "self", ".", "objective", ".", "evaluate", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myBOModular.MyBOModular._update_model": [[54, 60], ["myBOModular.MyBOModular.model.update_structure", "super()._update_model"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myGPModel.MyGPModel.update_structure", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._update_model"], ["", "def", "_update_model", "(", "self", ",", "normalization_type", ")", ":", "\n", "        ", "\"\"\"\n        Updates the model and saves the parameters (if available).\n        \"\"\"", "\n", "self", ".", "model", ".", "update_structure", "(", "self", ".", "acquisition", ",", "self", ".", "X", ",", "self", ".", "Y", ",", "self", ".", "fn_optimizer", ",", "self", ".", "fn", ")", "\n", "super", "(", "MyBOModular", ",", "self", ")", ".", "_update_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myBOModular.MyBOModular._save_model_parameter_values": [[61, 63], ["None"], "methods", ["None"], ["", "def", "_save_model_parameter_values", "(", "self", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.main.main": [[20, 95], ["logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "init.args_parse", "frozenset", "datasets.MetaLoader.get_loader_constructor", "datasets.MetaLoader.get_loader_constructor.get_loader_constructor", "MetaDataTypeLoader.get_loader_constructor.", "Loader.load", "logging.info", "logging.info", "logging.info", "mlflow_logger.set_tags", "mlflow_logger.update_truth", "algorithms.MetaLoader.get_loader_constructor", "algorithms.MetaLoader.get_loader_constructor.get_constructor", "MetaAlgoTypeLoader.get_constructor.", "Algorithm.run", "platform.uname", "platform.processor", "platform.python_version", "platform.python_implementation", "logging.info", "acquisition_optimizer.MPAcquisitionOptimizer", "fn.make_component_function", "acquisition_optimizer.MPAcquisitionOptimizer.optimize", "numpy.isclose", "numpy.isclose", "Loader.save", "Exception", "numpy.__config__.get_info", "numpy.__config__.get_info", "platform.node", "mlflow_logger.log_param", "fn.make_component_function.", "fn.eval", "common.Config", "socket.gethostname().split", "socket.gethostname"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.init.args_parse", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Simple.get_loader_constructor", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Simple.get_loader_constructor", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.set_tags", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.update_truth", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Simple.get_loader_constructor", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Algorithm.get_constructor", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.make_component_function", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_param", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split"], ["def", "main", "(", "mlflow_logger", ")", ":", "\n", "\n", "# Machine Related logging", "\n", "    ", "logging", ".", "info", "(", "'Platform: %s'", ",", "platform", ".", "uname", "(", ")", ")", "\n", "logging", ".", "info", "(", "'Processor: %s'", ",", "platform", ".", "processor", "(", ")", ")", "\n", "logging", ".", "info", "(", "'Python: %s/%s'", ",", "platform", ".", "python_version", "(", ")", ",", "platform", ".", "python_implementation", "(", ")", ")", "\n", "\n", "# Log LAPACK Information", "\n", "logging", ".", "info", "(", "\"Blas Library: %s\"", ",", "np", ".", "__config__", ".", "get_info", "(", "'blas_opt_info'", ")", "[", "'libraries'", "]", ")", "\n", "logging", ".", "info", "(", "\"Lapack Library: %s\"", ",", "np", ".", "__config__", ".", "get_info", "(", "'lapack_opt_info'", ")", "[", "'libraries'", "]", ")", "\n", "\n", "# Temp files", "\n", "logging", ".", "info", "(", "\"temp_dir: {}\"", ".", "format", "(", "Config", "(", ")", ".", "base_path", ")", ")", "\n", "logging", ".", "info", "(", "\"Host Name: {}\"", ".", "format", "(", "platform", ".", "node", "(", ")", ")", ")", "\n", "\n", "args", "=", "init", ".", "args_parse", "(", ")", "\n", "\n", "# Log all parameters to mlflow", "\n", "printable_params", "=", "frozenset", "(", "[", "\"algorithm_random_seed\"", ",", "\"data_random_seed\"", "]", ")", "\n", "for", "param_key", "in", "args", ":", "\n", "        ", "if", "param_key", "in", "printable_params", ":", "\n", "            ", "mlflow_logger", ".", "log_param", "(", "param_key", ",", "args", "[", "param_key", "]", ")", "\n", "\n", "# We change the name of the experiment", "\n", "", "", "tags", "=", "{", "\n", "\"mlflow.runName\"", ":", "\"{}\"", ".", "format", "(", "args", "[", "\"algorithm\"", "]", ")", ",", "\n", "\"host_name\"", ":", "\"{}\"", ".", "format", "(", "socket", ".", "gethostname", "(", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ",", "\n", "\"hash_exe\"", ":", "args", "[", "\"hash_exe\"", "]", ",", "\n", "\"hash_data\"", ":", "args", "[", "\"hash_data\"", "]", "\n", "}", "\n", "\n", "# Setup the data", "\n", "# =========================================================", "\n", "# Get the loader of the dataset type", "\n", "MetaDataTypeLoader", "=", "datasets", ".", "MetaLoader", ".", "get_loader_constructor", "(", "args", "[", "\"which_data\"", "]", ")", "\n", "# Now load the actual Loader", "\n", "Loader", "=", "MetaDataTypeLoader", ".", "get_loader_constructor", "(", "**", "args", ")", "\n", "dataLoader", "=", "Loader", "(", "**", "args", ")", "\n", "fn", ",", "soln", "=", "dataLoader", ".", "load", "(", ")", "\n", "\n", "if", "soln", "==", "None", ":", "\n", "        ", "logging", ".", "info", "(", "\"Computing f_min\"", ")", "\n", "optimizer", "=", "MPAcquisitionOptimizer", "(", "fn", ".", "domain", ",", "fn", ",", "[", "]", ",", "None", ",", "max_eval", "=", "-", "1", ")", "\n", "cfn", "=", "fn", ".", "make_component_function", "(", ")", "\n", "soln", "=", "optimizer", ".", "optimize", "(", "cfn", ")", "\n", "x_best", ",", "f_min", ",", "cost", "=", "soln", "\n", "assert", "(", "np", ".", "isclose", "(", "cfn", "(", "x_best", ")", ",", "f_min", ")", ")", "\n", "assert", "(", "np", ".", "isclose", "(", "fn", ".", "eval", "(", "x_best", ")", ",", "f_min", ")", ")", "\n", "dataLoader", ".", "save", "(", "fn", ",", "soln", ")", "\n", "", "else", ":", "\n", "        ", "x_best", ",", "f_min", ",", "cost", "=", "soln", "\n", "\n", "", "logging", ".", "info", "(", "\"f_min = {}\"", ".", "format", "(", "f_min", ")", ")", "\n", "logging", ".", "info", "(", "\"x_best = {}\"", ".", "format", "(", "x_best", ")", ")", "\n", "logging", ".", "info", "(", "\"cost = {}\"", ".", "format", "(", "cost", ")", ")", "\n", "\n", "#TODO Sanity checks", "\n", "tags", "[", "\"f_min\"", "]", "=", "f_min", "\n", "mlflow_logger", ".", "set_tags", "(", "tags", ")", "\n", "\n", "mlflow_logger", ".", "update_truth", "(", "f_min", ",", "fn", ".", "graph", ")", "\n", "fn", ".", "mlflow_logging", "=", "mlflow_logger", "\n", "\n", "# Run the algorithm", "\n", "# =========================================================", "\n", "\n", "# We random the lengthscale and report it", "\n", "MetaAlgoTypeLoader", "=", "algorithms", ".", "MetaLoader", ".", "get_loader_constructor", "(", "args", "[", "\"which_algorithm\"", "]", ")", "\n", "Algorithm", "=", "MetaAlgoTypeLoader", ".", "get_constructor", "(", "args", "[", "\"algorithm\"", "]", ")", "\n", "algorithm", "=", "Algorithm", "(", "fn", "=", "fn", ",", "**", "args", ")", "\n", "algorithm", ".", "run", "(", ")", "\n", "\n", "# check if the N is in order.", "\n", "if", "mlflow_logger", ".", "t_y", "!=", "args", "[", "\"n_iter\"", "]", ":", "\n", "        ", "raise", "Exception", "(", "\"Missing some iterations.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.main.cleanup": [[96, 100], ["mlflow_logger.log_artifacts", "shutil.rmtree", "common.Config", "common.Config"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_artifacts"], ["", "", "def", "cleanup", "(", "mlflow_logger", ")", ":", "\n", "# Clean up, log artifacts and remove directory", "\n", "    ", "mlflow_logger", ".", "log_artifacts", "(", "Config", "(", ")", ".", "base_path", ")", "\n", "shutil", ".", "rmtree", "(", "Config", "(", ")", ".", "base_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.test_optimization_correctness_large": [[18, 21], ["pytest.mark.parametrize", "test_datasets.compare_bruteforce", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.compare_bruteforce", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"i\"", ",", "range", "(", "100", ")", ")", "\n", "def", "test_optimization_correctness_large", "(", "i", ")", ":", "\n", "    ", "compare_bruteforce", "(", "i", ",", "10", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.test_optimization_correctness_small": [[23, 26], ["pytest.mark.parametrize", "test_datasets.compare_bruteforce", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.compare_bruteforce", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"i\"", ",", "range", "(", "10", ")", ")", "\n", "def", "test_optimization_correctness_small", "(", "i", ")", ":", "\n", "    ", "compare_bruteforce", "(", "i", ",", "5", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.test_optimization_decomposition": [[30, 33], ["pytest.mark.parametrize", "test_datasets.basic_logic_checks_optimizer", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.basic_logic_checks_optimizer", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"i\"", ",", "range", "(", "1000", ")", ")", "\n", "def", "test_optimization_decomposition", "(", "i", ")", ":", "\n", "    ", "basic_logic_checks_optimizer", "(", "i", ",", "30", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.test_optimization_compute_large": [[34, 37], ["pytest.mark.parametrize", "test_datasets.basic_logic_checks_optimizer", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.basic_logic_checks_optimizer", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"i\"", ",", "range", "(", "10", ")", ")", "\n", "def", "test_optimization_compute_large", "(", "i", ")", ":", "\n", "    ", "basic_logic_checks_optimizer", "(", "i", ",", "6", ",", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.test_optimization_reduced_compute_large": [[40, 43], ["pytest.mark.parametrize", "test_datasets.compare_bruteforce_reduced", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.compare_bruteforce_reduced", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"i\"", ",", "range", "(", "100", ")", ")", "\n", "def", "test_optimization_reduced_compute_large", "(", "i", ")", ":", "\n", "    ", "compare_bruteforce_reduced", "(", "i", ",", "10", ",", "2", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.test_optimization_reduced_compute_small": [[44, 47], ["pytest.mark.parametrize", "test_datasets.compare_bruteforce_reduced", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.compare_bruteforce_reduced", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"i\"", ",", "range", "(", "10", ")", ")", "\n", "def", "test_optimization_reduced_compute_small", "(", "i", ")", ":", "\n", "    ", "compare_bruteforce_reduced", "(", "i", ",", "7", ",", "5", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.test_optimization_reduced_decomposition": [[48, 51], ["pytest.mark.parametrize", "test_datasets.compare_bruteforce_reduced", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.compare_bruteforce_reduced", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"i\"", ",", "range", "(", "1000", ")", ")", "\n", "def", "test_optimization_reduced_decomposition", "(", "i", ")", ":", "\n", "    ", "compare_bruteforce_reduced", "(", "i", ",", "15", ",", "1", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.basic_logic_checks_optimizer": [[52, 85], ["dict", "datasets.Synthetic.get_loader_constructor", "datasets.Synthetic.get_loader_constructor.", "Syn_Loader._load", "acquisition_optimizer.MPAcquisitionOptimizer", "syn_loader._load.make_component_function", "acquisition_optimizer.MPAcquisitionOptimizer.optimize", "numpy.isclose", "numpy.isclose", "print", "print", "fn.make_component_function.", "syn_loader._load.eval", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Simple.get_loader_constructor", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader._load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.make_component_function", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval"], ["", "def", "basic_logic_checks_optimizer", "(", "i", ",", "dimension", ",", "grid_size", ",", "max_eval", "=", "-", "1", ",", "dataset_name", "=", "'ErdosRenyiGraph'", ")", ":", "\n", "    ", "args", "=", "dict", "(", "\n", "dimension", "=", "dimension", ",", "\n", "data_random_seed", "=", "i", ",", "\n", "grid_params", "=", "dict", "(", "grid_size", "=", "grid_size", ",", "\n", "domain_lower", "=", "0.", ",", "\n", "domain_upper", "=", "1.", ")", ",", "\n", "kernel_params", "=", "dict", "(", "\n", "lengthscale", "=", "0.1", ",", "\n", "variance", "=", "1.0", ")", ",", "\n", "fn_noise_var", "=", "0.15", ",", "\n", "hash_data", "=", "None", "\n", ")", "\n", "\n", "Syn_Loader", "=", "datasets", ".", "Synthetic", ".", "get_loader_constructor", "(", "dataset_name", ")", "\n", "syn_loader", "=", "Syn_Loader", "(", "**", "args", ")", "\n", "fn", "=", "syn_loader", ".", "_load", "(", ")", "\n", "\n", "# Modifies graph", "\n", "optimizer", "=", "MPAcquisitionOptimizer", "(", "fn", ".", "domain", ",", "fn", ",", "X", "=", "[", "]", ",", "mlflow_logging", "=", "None", ",", "max_eval", "=", "max_eval", ")", "\n", "cfn", "=", "fn", ".", "make_component_function", "(", ")", "\n", "\n", "x_best", ",", "f_min", ",", "cost", "=", "optimizer", ".", "optimize", "(", "cfn", ")", "\n", "\n", "# Make sure the component function is the same as reported f_min", "\n", "assert", "(", "np", ".", "isclose", "(", "f_min", ",", "cfn", "(", "x_best", ")", ")", ")", "\n", "# Make sure that the ground truth is the same as reported f_min", "\n", "assert", "(", "np", ".", "isclose", "(", "fn", ".", "eval", "(", "x_best", ")", ",", "f_min", ")", ")", "\n", "\n", "print", "(", "\"x_best_opt\"", ",", "x_best", "[", "0", "]", ")", "\n", "print", "(", "\"f_min_opt\"", ",", "f_min", ")", "\n", "\n", "return", "args", ",", "fn", ",", "x_best", ",", "optimizer", ".", "_domains", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.compare_bruteforce": [[86, 96], ["test_datasets.basic_logic_checks_optimizer", "tuple", "scipy.optimize.brute", "fn.domain.translate", "numpy.all", "fn.domain.translate.astype", "numpy.isclose", "slice"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.basic_logic_checks_optimizer", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticDomain.translate"], ["", "def", "compare_bruteforce", "(", "i", ",", "dimension", ",", "grid_size", ",", "dataset_name", "=", "'ErdosRenyiGraph'", ")", ":", "\n", "    ", "args", ",", "fn", ",", "x_best", ",", "_", "=", "basic_logic_checks_optimizer", "(", "i", ",", "dimension", ",", "grid_size", ",", "dataset_name", "=", "dataset_name", ")", "\n", "\n", "# We now brute force ", "\n", "rranges", "=", "tuple", "(", "[", "slice", "(", "0", ",", "args", "[", "'grid_params'", "]", "[", "'grid_size'", "]", ",", "1", ")", "]", "*", "args", "[", "'dimension'", "]", ")", "\n", "x_bruteforce", "=", "optimize", ".", "brute", "(", "fn", ".", "eval_indexed", ",", "rranges", ",", "full_output", "=", "False", ",", "finish", "=", "None", ")", "\n", "x_bruteforce", "=", "fn", ".", "domain", ".", "translate", "(", "x_bruteforce", ".", "astype", "(", "int", ")", ")", "\n", "\n", "# Make sure that the brute force solution is the same as the solution found by optimizer", "\n", "assert", "(", "np", ".", "all", "(", "np", ".", "isclose", "(", "x_bruteforce", ",", "x_best", "[", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.compare_bruteforce_reduced": [[97, 122], ["numpy.random.seed", "test_datasets.basic_logic_checks_optimizer", "numpy.array", "zip", "itertools.product", "print", "print", "numpy.all", "numpy.array", "fn.eval", "numpy.isclose", "range", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.test_datasets.basic_logic_checks_optimizer", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "compare_bruteforce_reduced", "(", "i", ",", "dimension", ",", "grid_size", ",", "max_eval", ",", "dataset_name", "=", "'ErdosRenyiGraph'", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "args", ",", "fn", ",", "x_best", ",", "domain", "=", "basic_logic_checks_optimizer", "(", "i", ",", "dimension", ",", "grid_size", ",", "max_eval", ",", "dataset_name", "=", "dataset_name", ")", "\n", "\n", "rranges", "=", "np", ".", "array", "(", "[", "domain", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "domain", ")", ")", "]", ")", "\n", "\n", "# Additional check to ensure that the domain is respected", "\n", "for", "xi", ",", "di", "in", "zip", "(", "x_best", "[", "0", "]", ",", "rranges", ")", ":", "\n", "        ", "assert", "(", "xi", "in", "di", ")", "\n", "\n", "# We now brute force on the reduced domain", "\n", "", "f_min_bf", "=", "np", ".", "inf", "\n", "x_bruteforce", "=", "None", "\n", "for", "x", "in", "product", "(", "*", "rranges", ")", ":", "\n", "        ", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "f_min_curr", "=", "fn", ".", "eval", "(", "x", ")", "\n", "if", "f_min_curr", "<", "f_min_bf", ":", "\n", "            ", "f_min_bf", "=", "f_min_curr", "\n", "x_bruteforce", "=", "x", "\n", "\n", "", "", "print", "(", "\"x_bruteforce\"", ",", "x_bruteforce", ")", "\n", "print", "(", "\"f_min_bf\"", ",", "f_min_bf", ")", "\n", "\n", "# Make sure that the brute force solution is the same as the solution found by optimizer", "\n", "assert", "(", "np", ".", "all", "(", "np", ".", "isclose", "(", "x_bruteforce", ",", "x_best", "[", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.graph_utils.make_chordal": [[7, 47], ["list", "networkx.Graph", "nx.Graph.add_nodes_from", "nx.Graph.add_edges_from", "bn.edges", "networkx.is_chordal", "copy.copy", "networkx.Graph", "nx.Graph.add_edges_from", "nx.Graph.degree", "bn.nodes", "set", "sorted", "temp_E2.append", "list.append", "copy.copy.append"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["def", "make_chordal", "(", "bn", ")", ":", "\n", "    ", "\"\"\"\n    This function creates a chordal graph - i.e. one in which there\n    are no cycles with more than three nodes.\n\n    Algorithm from Cano & Moral 1990 ->\n    'Heuristic Algorithms for the Triangulation of Graphs'\n    \"\"\"", "\n", "chordal_E", "=", "list", "(", "bn", ".", "edges", "(", ")", ")", "\n", "\n", "# if moral graph is already chordal, no need to alter it", "\n", "if", "not", "nx", ".", "is_chordal", "(", "bn", ")", ":", "\n", "        ", "temp_E", "=", "copy", ".", "copy", "(", "chordal_E", ")", "\n", "temp_V", "=", "[", "]", "\n", "\n", "temp_G", "=", "nx", ".", "Graph", "(", ")", "\n", "temp_G", ".", "add_edges_from", "(", "chordal_E", ")", "\n", "degree_dict", "=", "temp_G", ".", "degree", "(", ")", "\n", "temp_V", "=", "[", "v", "for", "v", ",", "d", "in", "sorted", "(", "degree_dict", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "]", "\n", "for", "v", "in", "temp_V", ":", "\n", "#Add links between the pairs nodes adjacent to Node i", "\n", "#Add those links to chordal_E and temp_E", "\n", "            ", "adj_v", "=", "set", "(", "[", "n", "for", "e", "in", "temp_E", "for", "n", "in", "e", "if", "v", "in", "e", "and", "n", "!=", "v", "]", ")", "\n", "for", "a1", "in", "adj_v", ":", "\n", "                ", "for", "a2", "in", "adj_v", ":", "\n", "                    ", "if", "a1", "!=", "a2", ":", "\n", "                        ", "if", "[", "a1", ",", "a2", "]", "not", "in", "chordal_E", "and", "[", "a2", ",", "a1", "]", "not", "in", "chordal_E", ":", "\n", "                            ", "chordal_E", ".", "append", "(", "[", "a1", ",", "a2", "]", ")", "\n", "temp_E", ".", "append", "(", "[", "a1", ",", "a2", "]", ")", "\n", "# remove Node i from temp_V and all its links from temp_E ", "\n", "", "", "", "", "temp_E2", "=", "[", "]", "\n", "for", "edge", "in", "temp_E", ":", "\n", "                ", "if", "v", "not", "in", "edge", ":", "\n", "                    ", "temp_E2", ".", "append", "(", "edge", ")", "\n", "", "", "temp_E", "=", "temp_E2", "\n", "\n", "", "", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "G", ".", "add_nodes_from", "(", "bn", ".", "nodes", "(", ")", ")", "\n", "G", ".", "add_edges_from", "(", "chordal_E", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.graph_utils.build_clique_graph": [[48, 65], ["networkx.Graph", "networkx.chordal_graph_cliques", "itertools.combinations", "graph_utils.make_chordal", "len", "nx.Graph.add_node", "c1.intersection", "nx.chordal_graph_cliques.pop", "len", "nx.Graph.add_edge", "nx.Graph.add_node", "nx.Graph.add_node", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.graph_utils.make_chordal", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.pop"], ["", "def", "build_clique_graph", "(", "G", ")", ":", "\n", "    ", "clique_graph", "=", "nx", ".", "Graph", "(", ")", "\n", "max_cliques", "=", "nx", ".", "chordal_graph_cliques", "(", "make_chordal", "(", "G", ")", ")", "\n", "# The case where there is only 1 max_clique", "\n", "if", "len", "(", "max_cliques", ")", "==", "1", ":", "\n", "        ", "clique_graph", ".", "add_node", "(", "max_cliques", ".", "pop", "(", ")", ")", "\n", "return", "clique_graph", "\n", "\n", "", "for", "c1", ",", "c2", "in", "combinations", "(", "max_cliques", ",", "2", ")", ":", "\n", "        ", "intersect", "=", "c1", ".", "intersection", "(", "c2", ")", "\n", "if", "len", "(", "intersect", ")", "!=", "0", ":", "\n", "# we put a minus sign because networkx only allows for MINIMUM Spanning Trees...", "\n", "            ", "clique_graph", ".", "add_edge", "(", "c1", ",", "c2", ",", "weight", "=", "-", "len", "(", "intersect", ")", ")", "\n", "", "else", ":", "\n", "            ", "clique_graph", ".", "add_node", "(", "c1", ")", "\n", "clique_graph", ".", "add_node", "(", "c2", ")", "\n", "", "", "return", "clique_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.graph_utils.debug_graph": [[66, 73], ["networkx.spring_layout", "networkx.draw", "networkx.get_edge_attributes", "networkx.draw_networkx_edge_labels", "plt.show", "plt.clf", "plt.get_cmap"], "function", ["None"], ["", "def", "debug_graph", "(", "G", ")", ":", "\n", "    ", "pos", "=", "nx", ".", "spring_layout", "(", "G", ")", "\n", "nx", ".", "draw", "(", "G", ",", "pos", "=", "pos", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", ",", "with_labels", "=", "True", ")", "\n", "labels", "=", "nx", ".", "get_edge_attributes", "(", "G", ",", "'weight'", ")", "\n", "nx", ".", "draw_networkx_edge_labels", "(", "G", ",", "pos", "=", "pos", ",", "edge_labels", "=", "labels", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.__new__": [[7, 33], ["object.__new__", "tempfile.mkdtemp", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.expanduser", "os.makedirs", "os.path.expanduser", "os.makedirs", "os.path.expanduser", "os.makedirs", "os.path.expanduser", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ")", ":", "\n", "        ", "if", "Config", ".", "__instance", "is", "None", ":", "\n", "            ", "Config", ".", "__instance", "=", "object", ".", "__new__", "(", "cls", ")", "\n", "# Run only once, create the temp directory that will be used", "\n", "Config", ".", "__instance", ".", "base_path", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "Config", ".", "__instance", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "Config", ".", "__instance", ".", "base_path", ",", "'logging'", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "log_path", ")", "\n", "Config", ".", "__instance", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "Config", ".", "__instance", ".", "base_path", ",", "'data'", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "data_path", ")", "\n", "Config", ".", "__instance", ".", "ba_path", "=", "os", ".", "path", ".", "join", "(", "Config", ".", "__instance", ".", "base_path", ",", "'bayesopt_attack'", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "ba_path", ")", "\n", "Config", ".", "__instance", ".", "learnt_graphs_path", "=", "os", ".", "path", ".", "join", "(", "Config", ".", "__instance", ".", "base_path", ",", "'learnt_graphs'", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "learnt_graphs_path", ")", "\n", "# Cache to quickly compute the f_min", "\n", "Config", ".", "__instance", ".", "cache_path", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "'~'", ",", "'cache'", ")", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "cache_path", ",", "exist_ok", "=", "True", ")", "\n", "# ba_models to store the neural netowrk models", "\n", "Config", ".", "__instance", ".", "ba_models", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "'~'", ",", "'ba_models'", ")", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "ba_models", ",", "exist_ok", "=", "True", ")", "\n", "# Fcnet Function files", "\n", "Config", ".", "__instance", ".", "fcnet_path", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "'~'", ",", "'fcnet'", ")", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "fcnet_path", ",", "exist_ok", "=", "True", ")", "\n", "# MPS Function files", "\n", "Config", ".", "__instance", ".", "mps_path", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "'~'", ",", "'mps'", ")", ")", "\n", "os", ".", "makedirs", "(", "Config", ".", "__instance", ".", "mps_path", ",", "exist_ok", "=", "True", ")", "\n", "", "return", "Config", ".", "__instance", "\n", "", "def", "log_file", "(", "self", ",", "log_filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.log_file": [[33, 35], ["os.path.join"], "methods", ["None"], ["", "def", "log_file", "(", "self", ",", "log_filename", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "log_filename", ")", "\n", "", "def", "data_file", "(", "self", ",", "data_filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.data_file": [[35, 37], ["os.path.join"], "methods", ["None"], ["", "def", "data_file", "(", "self", ",", "data_filename", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "data_filename", ")", "\n", "# Saved function", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.cache_file": [[38, 40], ["os.path.join"], "methods", ["None"], ["", "def", "cache_file", "(", "self", ",", "cache_filename", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "cache_filename", ")", "\n", "# Functions that are too large to store on repo and these are load only", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.fcnet_file": [[41, 43], ["os.path.join"], "methods", ["None"], ["", "def", "fcnet_file", "(", "self", ",", "fcnet_filename", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "fcnet_path", ",", "fcnet_filename", ")", "\n", "", "def", "mps_file", "(", "self", ",", "mps_filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.mps_file": [[43, 45], ["os.path.join"], "methods", ["None"], ["", "def", "mps_file", "(", "self", ",", "mps_filename", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "mps_path", ",", "mps_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.list_fcnet": [[46, 48], ["os.listdir"], "methods", ["None"], ["", "def", "list_fcnet", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "listdir", "(", "self", ".", "fcnet_path", ")", "\n", "", "def", "learnt_graphs_file", "(", "self", ",", "learnt_graphs_filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.learnt_graphs_file": [[48, 50], ["os.path.join"], "methods", ["None"], ["", "def", "learnt_graphs_file", "(", "self", ",", "learnt_graphs_filename", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "learnt_graphs_path", ",", "learnt_graphs_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.full_ba_path": [[51, 53], ["None"], "methods", ["None"], ["", "def", "full_ba_path", "(", "self", ")", ":", "\n", "        ", "return", "Config", ".", "__instance", ".", "ba_path", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionModular.MyAcquisitionModular.__init__": [[7, 9], ["GPyOpt.acquisitions.base.AcquisitionBase.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "domain", ")", ":", "\n", "        ", "super", "(", "MyAcquisitionModular", ",", "self", ")", ".", "__init__", "(", "model", ",", "None", ",", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionModular.MyAcquisitionModular.optimize": [[10, 13], ["myAcquisitionModular.MyAcquisitionModular.optimizer.optimize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize"], ["", "def", "optimize", "(", "self", ",", "duplicate_manager", ")", ":", "\n", "# Only the first arg will be used sequential", "\n", "        ", "return", "self", ".", "optimizer", ".", "optimize", "(", "f", "=", "self", ".", "model", ".", "cfn", ",", "f_df", "=", "self", ".", "model", ".", "cfn", ".", "acq_f_df", ")", "[", "0", "]", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.__init__": [[104, 131], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "true_graph", "=", "None", "\n", "self", ".", "t_graph", "=", "0", "\n", "\n", "# Optimal", "\n", "self", ".", "y_opt", "=", "None", "\n", "self", ".", "y_best", "=", "np", ".", "inf", "\n", "\n", "self", ".", "cum_instant_regret", "=", "0", "\n", "self", ".", "cum_best_regret", "=", "0", "\n", "\n", "self", ".", "t_y", "=", "0", "\n", "\n", "# =====", "\n", "self", ".", "t_cost", "=", "0", "\n", "self", ".", "cum_acq_cost", "=", "0", "\n", "\n", "self", ".", "cost_metrics", "=", "{", "}", "\n", "\n", "# =====", "\n", "# HACK ", "\n", "self", ".", "Y_hist", "=", "[", "]", "\n", "\n", "# =====", "\n", "self", ".", "t_ba", "=", "0", "\n", "self", ".", "ba_metrics", "=", "{", "}", "\n", "", "def", "update_truth", "(", "self", ",", "y_opt", ",", "true_graph", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.update_truth": [[131, 134], ["None"], "methods", ["None"], ["", "def", "update_truth", "(", "self", ",", "y_opt", ",", "true_graph", ")", ":", "\n", "        ", "self", ".", "y_opt", "=", "y_opt", "\n", "self", ".", "true_graph", "=", "true_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_init_y": [[135, 182], ["mlflow_logging.MlflowLogger.log_metrics_retry"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_metrics_retry"], ["", "def", "log_init_y", "(", "self", ",", "y", ")", ":", "\n", "\n", "        ", "self", ".", "y_best", "=", "y", "\n", "\n", "_metrics_y", "=", "{", "\n", "'y'", ":", "y", ",", "\n", "'y_best'", ":", "self", ".", "y_best", ",", "\n", "'N'", ":", "0", "}", "\n", "\n", "if", "self", ".", "y_opt", "!=", "None", ":", "\n", "# Instant regret and best regret", "\n", "# ==============================", "\n", "# We flip the formula due to the way it is optimized", "\n", "            ", "instant_regret", "=", "y", "-", "self", ".", "y_opt", "\n", "\n", "# We flip the formula due to the way it is optimized", "\n", "best_regret", "=", "self", ".", "y_best", "-", "self", ".", "y_opt", "\n", "\n", "# cum_regrets", "\n", "#================================", "\n", "self", ".", "cum_instant_regret", "=", "instant_regret", "\n", "self", ".", "cum_best_regret", "=", "best_regret", "\n", "\n", "# avg cum regrets", "\n", "# ===============", "\n", "# Essential as we do not want to div by 0", "\n", "\n", "avg_cum_instant_regret", "=", "self", ".", "cum_instant_regret", "\n", "avg_cum_best_regret", "=", "self", ".", "cum_best_regret", "\n", "\n", "#logging.info(\"Regret {} {}\".format(best_regret, cum_best_regret))", "\n", "_metrics_y", "=", "{", "\n", "**", "_metrics_y", ",", "\n", "'instant_regret'", ":", "instant_regret", ",", "\n", "'best_regret'", ":", "best_regret", ",", "\n", "'cum_instant_regret'", ":", "self", ".", "cum_instant_regret", ",", "\n", "'cum_best_regret'", ":", "self", ".", "cum_best_regret", ",", "\n", "'avg_cum_instant_regret'", ":", "avg_cum_instant_regret", ",", "\n", "'avg_cum_best_regret'", ":", "avg_cum_best_regret", "}", "\n", "#print(\"y\", self.t_y)", "\n", "", "_metrics_y", "=", "{", "\n", "**", "_metrics_y", ",", "\n", "**", "self", ".", "cost_metrics", ",", "\n", "**", "self", ".", "ba_metrics", "}", "\n", "self", ".", "cost_metrics", "=", "{", "}", "\n", "self", ".", "ba_metrics", "=", "{", "}", "\n", "self", ".", "log_metrics_retry", "(", "_metrics_y", ",", "step", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y": [[183, 235], ["mlflow_logging.MlflowLogger.log_metrics_retry"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_metrics_retry"], ["", "def", "log_y", "(", "self", ",", "y", ")", ":", "\n", "\n", "        ", "self", ".", "t_y", "+=", "1", "\n", "# Current y and best y", "\n", "# ====================", "\n", "\n", "if", "y", "<", "self", ".", "y_best", ":", "\n", "            ", "self", ".", "y_best", "=", "y", "\n", "\n", "", "_metrics_y", "=", "{", "\n", "'y'", ":", "y", ",", "\n", "'y_best'", ":", "self", ".", "y_best", ",", "\n", "'N'", ":", "self", ".", "t_y", "}", "\n", "\n", "if", "self", ".", "y_opt", "!=", "None", ":", "\n", "# Instant regret and best regret", "\n", "# ==============================", "\n", "# We flip the formula due to the way it is optimized", "\n", "            ", "instant_regret", "=", "y", "-", "self", ".", "y_opt", "\n", "\n", "# We flip the formula due to the way it is optimized", "\n", "best_regret", "=", "self", ".", "y_best", "-", "self", ".", "y_opt", "\n", "\n", "# cum_regrets", "\n", "#================================", "\n", "self", ".", "cum_instant_regret", "+=", "instant_regret", "\n", "self", ".", "cum_best_regret", "+=", "best_regret", "\n", "\n", "# avg cum regrets", "\n", "# ===============", "\n", "# Essential as we do not want to div by 0", "\n", "\n", "avg_cum_instant_regret", "=", "self", ".", "cum_instant_regret", "/", "(", "self", ".", "t_y", "+", "1", ")", "\n", "avg_cum_best_regret", "=", "self", ".", "cum_best_regret", "/", "(", "self", ".", "t_y", "+", "1", ")", "\n", "\n", "#logging.info(\"Regret {} {}\".format(best_regret, cum_best_regret))", "\n", "_metrics_y", "=", "{", "\n", "**", "_metrics_y", ",", "\n", "'instant_regret'", ":", "instant_regret", ",", "\n", "'best_regret'", ":", "best_regret", ",", "\n", "'cum_instant_regret'", ":", "self", ".", "cum_instant_regret", ",", "\n", "'cum_best_regret'", ":", "self", ".", "cum_best_regret", ",", "\n", "'avg_cum_instant_regret'", ":", "avg_cum_instant_regret", ",", "\n", "'avg_cum_best_regret'", ":", "avg_cum_best_regret", "}", "\n", "#print(\"y\", self.t_y)", "\n", "", "_metrics_y", "=", "{", "\n", "**", "_metrics_y", ",", "\n", "**", "self", ".", "cost_metrics", ",", "\n", "**", "self", ".", "ba_metrics", "}", "\n", "self", ".", "cost_metrics", "=", "{", "}", "\n", "self", ".", "ba_metrics", "=", "{", "}", "\n", "self", ".", "log_metrics_retry", "(", "_metrics_y", ",", "step", "=", "self", ".", "t_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack": [[236, 241], ["None"], "methods", ["None"], ["", "def", "log_battack", "(", "self", ",", "attack_success", ",", "predicted_lbl", ")", ":", "\n", "        ", "self", ".", "t_ba", "+=", "1", "\n", "self", ".", "ba_metrics", "=", "{", "\n", "\"attack_success\"", ":", "attack_success", ",", "\n", "\"predicted_lbl\"", ":", "predicted_lbl", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost": [[242, 257], ["mlflow_logging.usage_psutil"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.usage_psutil"], ["", "def", "log_cost", "(", "self", ",", "total_cost", ")", ":", "\n", "        ", "self", ".", "t_cost", "+=", "1", "\n", "self", ".", "cum_acq_cost", "+=", "total_cost", "\n", "\n", "avg_cum_acq_cost", "=", "self", ".", "cum_acq_cost", "/", "self", ".", "t_cost", "\n", "\n", "# Why log this to a file?", "\n", "# Also log the cpu and ram", "\n", "process_time", ",", "mem_used", "=", "usage_psutil", "(", ")", "\n", "self", ".", "cost_metrics", "=", "{", "\n", "\"acq_cost\"", ":", "total_cost", ",", "\n", "\"cum_acq_cost\"", ":", "self", ".", "cum_acq_cost", ",", "\n", "\"avg_cum_acq_cost\"", ":", "avg_cum_acq_cost", ",", "\n", "\"process_time\"", ":", "process_time", ",", "\n", "\"mem_used\"", ":", "mem_used", "}", "\n", "#print(\"cost\", self.t_cost)", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost_ba": [[259, 264], ["mlflow_logging.usage_psutil"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.usage_psutil"], ["", "def", "log_cost_ba", "(", "self", ")", ":", "\n", "        ", "process_time", ",", "mem_used", "=", "usage_psutil", "(", ")", "\n", "self", ".", "cost_metrics", "=", "{", "\n", "\"process_time\"", ":", "process_time", ",", "\n", "\"mem_used\"", ":", "mem_used", "}", "\n", "", "def", "log_graph_metrics", "(", "self", ",", "learnt_graph", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_graph_metrics": [[264, 289], ["mlflow_logging.correctConnection", "mlflow_logging.correctSeparation", "mlflow_logging.f1_score", "mlflow_logging.MlflowLogger.log_metrics_retry", "mlflow_logging.eigenvector_similarity", "networkx.number_connected_components", "logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.correctConnection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.correctSeparation", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.f1_score", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_metrics_retry", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.eigenvector_similarity", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "log_graph_metrics", "(", "self", ",", "learnt_graph", ")", ":", "\n", "\n", "        ", "if", "self", ".", "true_graph", "==", "None", ":", "\n", "            ", "return", "\n", "\n", "", "correct_connections", "=", "correctConnection", "(", "self", ".", "true_graph", ",", "learnt_graph", ")", "\n", "correct_separations", "=", "correctSeparation", "(", "self", ".", "true_graph", ",", "learnt_graph", ")", "\n", "\n", "f1", ",", "precision", ",", "recall", "=", "f1_score", "(", "self", ".", "true_graph", ",", "learnt_graph", ")", "\n", "\n", "_graph_metrics", "=", "{", "\n", "\"correct_conn\"", ":", "correct_connections", ",", "\n", "\"correct_sep\"", ":", "correct_separations", ",", "\n", "\"eigen_sim\"", ":", "eigenvector_similarity", "(", "self", ".", "true_graph", ",", "learnt_graph", ")", ",", "\n", "\"no_conn_comp\"", ":", "nx", ".", "number_connected_components", "(", "learnt_graph", ")", "}", "\n", "if", "f1", "!=", "None", ":", "\n", "            ", "_graph_metrics", "[", "\"f1\"", "]", "=", "f1", "\n", "_graph_metrics", "[", "\"precision\"", "]", "=", "precision", "\n", "_graph_metrics", "[", "\"recall\"", "]", "=", "recall", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"F1 unavaliable\"", ")", "\n", "\n", "", "self", ".", "log_metrics_retry", "(", "_graph_metrics", ",", "step", "=", "self", ".", "t_graph", ")", "\n", "\n", "self", ".", "t_graph", "+=", "1", "\n", "", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_metrics_retry": [[289, 292], ["mlflow_logging.retry", "mlflow.log_metrics"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.retry"], ["", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n", "def", "log_metrics_retry", "(", "self", ",", "metrics", ",", "step", ")", ":", "\n", "        ", "mlflow", ".", "log_metrics", "(", "metrics", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_artifacts": [[293, 296], ["mlflow_logging.retry", "mlflow.log_artifacts"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.retry", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_artifacts"], ["", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n", "def", "log_artifacts", "(", "self", ",", "local_dir", ",", "artifact_path", "=", "None", ")", ":", "\n", "        ", "mlflow", ".", "log_artifacts", "(", "local_dir", ",", "artifact_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.set_tags": [[297, 300], ["mlflow_logging.retry", "mlflow.set_tags"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.retry", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.set_tags"], ["", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n", "def", "set_tags", "(", "self", ",", "tags", ")", ":", "\n", "        ", "mlflow", ".", "set_tags", "(", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.set_tag": [[301, 304], ["mlflow_logging.retry", "mlflow.set_tag"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.retry", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.set_tag"], ["", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n", "def", "set_tag", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "mlflow", ".", "set_tag", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_metric": [[305, 308], ["mlflow_logging.retry", "mlflow.log_metric"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.retry", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_metric"], ["", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n", "def", "log_metric", "(", "self", ",", "key", ",", "value", ",", "step", "=", "None", ")", ":", "\n", "        ", "mlflow", ".", "log_metric", "(", "key", ",", "value", ",", "step", ")", "\n", "", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_param": [[308, 311], ["mlflow_logging.retry", "mlflow.log_param"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.retry", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_param"], ["", "@", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "10", ")", "\n", "def", "log_param", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "mlflow", ".", "log_param", "(", "key", ",", "value", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.retry": [[12, 28], ["functools.wraps", "range", "func", "logging.exception", "logging.warn", "time.sleep"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["def", "retry", "(", "retry_count", "=", "5", ",", "delay", "=", "5", ")", ":", "\n", "    ", "def", "decorator", "(", "func", ")", ":", "\n", "        ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return_e", "=", "None", "\n", "for", "_", "in", "range", "(", "retry_count", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "return_e", "=", "e", "\n", "logging", ".", "exception", "(", "\"Exception\"", ")", "\n", "logging", ".", "warn", "(", "\"Retrying\"", ")", "\n", "time", ".", "sleep", "(", "delay", ")", "\n", "", "", "raise", "return_e", "\n", "", "return", "wrapper", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.usage_psutil": [[29, 32], ["psutil.Process", "os.getpid", "time.process_time", "psutil.Process.memory_info"], "function", ["None"], ["", "def", "usage_psutil", "(", ")", ":", "\n", "    ", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "return", "time", ".", "process_time", "(", ")", ",", "process", ".", "memory_info", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.correctConnection": [[33, 40], ["trueTree.edges", "sampleTree.edges", "list", "set().intersection", "len", "float", "len", "len", "set"], "function", ["None"], ["", "def", "correctConnection", "(", "trueTree", ",", "sampleTree", ")", ":", "\n", "    ", "trueEdges", "=", "trueTree", ".", "edges", "(", ")", "\n", "sampleEdges", "=", "sampleTree", ".", "edges", "(", ")", "\n", "intersection", "=", "list", "(", "set", "(", "trueEdges", ")", ".", "intersection", "(", "sampleEdges", ")", ")", "\n", "if", "len", "(", "sampleEdges", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "float", "(", "len", "(", "intersection", ")", ")", "/", "len", "(", "sampleEdges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.correctSeparation": [[41, 54], ["trueTree.number_of_nodes", "range", "range", "float", "sampleTree.has_edge", "trueTree.has_edge"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "correctSeparation", "(", "trueTree", ",", "sampleTree", ")", ":", "\n", "    ", "n", "=", "trueTree", ".", "number_of_nodes", "(", ")", "\n", "num", "=", "0", "\n", "den", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "if", "not", "sampleTree", ".", "has_edge", "(", "i", ",", "j", ")", ":", "\n", "                ", "den", "+=", "1", "\n", "if", "not", "trueTree", ".", "has_edge", "(", "i", ",", "j", ")", ":", "\n", "                    ", "num", "+=", "1", "\n", "", "", "", "", "if", "den", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "float", "(", "num", ")", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.make_edges_set": [[55, 57], ["set", "frozenset", "g.edges"], "function", ["None"], ["", "def", "make_edges_set", "(", "g", ")", ":", "\n", "    ", "return", "set", "(", "[", "frozenset", "(", "x", ")", "for", "x", "in", "g", ".", "edges", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.f1_score": [[58, 79], ["mlflow_logging.make_edges_set", "mlflow_logging.make_edges_set", "make_edges_set.intersection", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.make_edges_set", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.make_edges_set"], ["", "def", "f1_score", "(", "true_graph", ",", "graph", ")", ":", "\n", "    ", "true_edges", "=", "(", "make_edges_set", "(", "true_graph", ")", ")", "\n", "edges", "=", "(", "make_edges_set", "(", "graph", ")", ")", "\n", "\n", "true_positives", "=", "true_edges", ".", "intersection", "(", "edges", ")", "\n", "# false_positives = edges - true_edges", "\n", "\n", "relevant_elements", "=", "true_edges", "\n", "\n", "if", "len", "(", "edges", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "\n", "# false_positives.union(true_positives)= edges", "\n", "", "precision", "=", "len", "(", "true_positives", ")", "/", "len", "(", "edges", ")", "\n", "recall", "=", "len", "(", "true_positives", ")", "/", "len", "(", "relevant_elements", ")", "\n", "\n", "if", "len", "(", "true_positives", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "f1", "=", "2", "*", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.eigenvector_similarity": [[82, 102], ["networkx.spectrum.laplacian_spectrum", "networkx.spectrum.laplacian_spectrum", "mlflow_logging.eigenvector_similarity.select_k"], "function", ["None"], ["", "def", "eigenvector_similarity", "(", "graph1", ",", "graph2", ")", ":", "\n", "    ", "def", "select_k", "(", "spectrum", ",", "minimum_energy", "=", "0.9", ")", ":", "\n", "        ", "running_total", "=", "0.0", "\n", "total", "=", "sum", "(", "spectrum", ")", "\n", "if", "total", "==", "0.0", ":", "\n", "            ", "return", "len", "(", "spectrum", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "spectrum", ")", ")", ":", "\n", "            ", "running_total", "+=", "spectrum", "[", "i", "]", "\n", "if", "running_total", "/", "total", ">=", "minimum_energy", ":", "\n", "                ", "return", "i", "+", "1", "\n", "", "", "return", "len", "(", "spectrum", ")", "\n", "\n", "", "laplacian1", "=", "nx", ".", "spectrum", ".", "laplacian_spectrum", "(", "graph1", ")", "\n", "laplacian2", "=", "nx", ".", "spectrum", ".", "laplacian_spectrum", "(", "graph2", ")", "\n", "\n", "k1", "=", "select_k", "(", "laplacian1", ")", "\n", "k2", "=", "select_k", "(", "laplacian2", ")", "\n", "k", "=", "min", "(", "k1", ",", "k2", ")", "\n", "\n", "return", "sum", "(", "(", "laplacian1", "[", ":", "k", "]", "-", "laplacian2", "[", ":", "k", "]", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.exceptions.EarlyTerminationException.__init__": [[3, 9], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "message", ",", "metrics", ")", ":", "\n", "\n", "# Call the base class constructor with the parameters it needs", "\n", "        ", "super", "(", "EarlyTerminationException", ",", "self", ")", ".", "__init__", "(", "message", ")", "\n", "\n", "self", ".", "metrics", "=", "metrics", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getCombinationValue": [[16, 23], ["lpsolve.getSingleValue"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue"], ["", "def", "getCombinationValue", "(", "param_prefix", ",", "args_x", ")", ":", "\n", "    ", "return_val", "=", "0", "\n", "\n", "for", "param", "in", "parameters", ":", "\n", "        ", "if", "param_prefix", "in", "param", ":", "\n", "            ", "return_val", "+=", "getSingleValue", "(", "param", ",", "args_x", ")", "\n", "", "", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue": [[25, 43], ["parameters.index", "min", "max", "_param_map.keys", "_param_map.keys", "abs", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys"], ["", "def", "getSingleValue", "(", "param_prefix", ",", "args_x", ")", ":", "\n", "    ", "index", "=", "parameters", ".", "index", "(", "param_prefix", ")", "\n", "\n", "target", "=", "args_x", "[", "index", "]", "\n", "_param_map", "=", "key_map", "[", "index", "]", "\n", "\n", "if", "target", "in", "_param_map", ":", "\n", "# direct lookup", "\n", "        ", "return", "_param_map", "[", "target", "]", "\n", "", "else", ":", "\n", "# very close value, retrive the closest value", "\n", "        ", "min_match", "=", "min", "(", "_param_map", ".", "keys", "(", ")", ",", "key", "=", "lambda", "k", ":", "abs", "(", "k", "-", "target", ")", ")", "\n", "max_match", "=", "max", "(", "_param_map", ".", "keys", "(", ")", ",", "key", "=", "lambda", "k", ":", "abs", "(", "k", "-", "target", ")", ")", "\n", "\n", "if", "abs", "(", "min_match", "-", "target", ")", ">", "abs", "(", "max_match", "-", "target", ")", ":", "\n", "            ", "return", "_param_map", "[", "max_match", "]", "\n", "", "else", ":", "\n", "            ", "return", "_param_map", "[", "min_match", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.run_lp_solve": [[45, 87], ["lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve", "lpsolve.getCombinationValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getCombinationValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getCombinationValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getCombinationValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getSingleValue", "lpsolve.getCombinationValue"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getCombinationValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getCombinationValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getCombinationValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getCombinationValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getSingleValue", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.lpsolve.getCombinationValue"], ["", "", "", "def", "run_lp_solve", "(", "args_x", ",", "mps_path", ")", ":", "\n", "\n", "#print(args_x, mps_path)", "\n", "    ", "lp", "=", "lpsolve", "(", "'read_MPS'", ",", "mps_path", ")", "\n", "lpsolve", "(", "'set_timeout'", ",", "lp", ",", "args", "[", "\"time_limit\"", "]", ")", "\n", "lpsolve", "(", "'set_verbose'", ",", "lp", ",", "NEUTRAL", ")", "\n", "# lpsolve('set_verbose', lp, FULL)", "\n", "lpsolve", "(", "'set_infinite'", ",", "lp", ",", "args", "[", "\"infinite\"", "]", ")", "\n", "\n", "#=====================================================================================================================", "\n", "\n", "lpsolve", "(", "'set_anti_degen'", ",", "lp", ",", "getCombinationValue", "(", "\"antidegen\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_basiscrash'", ",", "lp", ",", "getSingleValue", "(", "\"basis_crash\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_bb_depthlimit'", ",", "lp", ",", "getSingleValue", "(", "\"bb_depth_absolute\"", ",", "args_x", ")", "*", "getSingleValue", "(", "\"bb_depthlimit\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_bb_rule'", ",", "lp", ",", "getSingleValue", "(", "\"bb_rule_1\"", ",", "args_x", ")", "+", "getCombinationValue", "(", "\"bb_rule_2\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_epsb'", ",", "lp", ",", "getSingleValue", "(", "\"eps_b\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_epsd'", ",", "lp", ",", "getSingleValue", "(", "\"eps_d\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_epsel'", ",", "lp", ",", "getSingleValue", "(", "\"eps_el\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_epsperturb'", ",", "lp", ",", "getSingleValue", "(", "\"eps_perturb\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_epspivot'", ",", "lp", ",", "getSingleValue", "(", "\"eps_pivot\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_improve'", ",", "lp", ",", "getCombinationValue", "(", "\"improve\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_maxpivot'", ",", "lp", ",", "getSingleValue", "(", "\"max_pivot\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_mip_gap'", ",", "lp", ",", "getSingleValue", "(", "\"mip_gap_absolute\"", ",", "args_x", ")", ",", "getSingleValue", "(", "\"mip_gap\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_presolve'", ",", "lp", ",", "getCombinationValue", "(", "\"presolve\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_pivoting'", ",", "lp", ",", "getSingleValue", "(", "\"pivoting_1\"", ",", "args_x", ")", "+", "getSingleValue", "(", "\"pivoting_2\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_scalelimit'", ",", "lp", ",", "getSingleValue", "(", "\"scale_limit\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_scaling'", ",", "lp", ",", "getSingleValue", "(", "\"scaling_1\"", ",", "args_x", ")", "+", "getCombinationValue", "(", "\"scaling_2\"", ",", "args_x", ")", ")", "\n", "lpsolve", "(", "'set_simplextype'", ",", "lp", ",", "getSingleValue", "(", "\"simplex_type\"", ",", "args_x", ")", ")", "\n", "\n", "### - These Parameters that are reliant on the dimension of the problem", "\n", "\n", "#lpsolve('set_basis', lp, basis)", "\n", "#lpsolve('set_var_branch', lp, var_branch)", "\n", "#lpsolve('set_var_weights', lp, var_weights)", "\n", "\n", "### --- end of hyperparameters --- ###", "\n", "#=====================================================================================================================", "\n", "\n", "# http://lpsolve.sourceforge.net/5.0/lp_solve.htm", "\n", "lpsolve", "(", "'solve'", ",", "lp", ")", "\n", "y", "=", "lpsolve", "(", "'get_objective'", ",", "lp", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.MetaLoader.__new__": [[38, 43], ["type.__new__", "MetaLoader.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "MetaLoader", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "MetaLoader", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "MetaLoader", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.MetaLoader.get_loader_constructor": [[43, 47], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "loader_id", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Load algorithm loader[%s].\"", ",", "loader_id", ")", "\n", "return", "MetaLoader", ".", "registry", "[", "loader_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Algorithm.__new__": [[51, 56], ["type.__new__", "Algorithm.algorithm_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "Algorithm", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "Algorithm", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "Algorithm", ".", "algorithm_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Algorithm.get_constructor": [[56, 60], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_constructor", "(", "algorithm_id", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using algorithm with algorithm_id[%s].\"", ",", "algorithm_id", ")", "\n", "return", "Algorithm", ".", "registry", "[", "algorithm_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.AdaptorBenchmark.__init__": [[74, 98], ["febo.environment.benchmarks.BenchmarkEnvironment.__init__", "febo.environment.ContinuousDomain", "algorithms.AdaptorBenchmark.fn.get_emb_dim", "L.append", "U.append", "n_points.append", "numpy.array", "numpy.array", "numpy.min", "numpy.max", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibAugWrapper.get_emb_dim"], ["    ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", "=", "None", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "mlflow_logging", "=", "self", ".", "fn", ".", "mlflow_logging", "\n", "dim", "=", "self", ".", "fn", ".", "domain", ".", "dimension", "\n", "L", "=", "[", "]", "\n", "U", "=", "[", "]", "\n", "# Number of points per dimension", "\n", "n_points", "=", "[", "]", "\n", "# Go through each domain of the dimension and find the l and u", "\n", "for", "d", "in", "self", ".", "fn", ".", "domain", ".", "combined_domain", ":", "\n", "            ", "L", ".", "append", "(", "np", ".", "min", "(", "d", ")", ")", "\n", "U", ".", "append", "(", "np", ".", "max", "(", "d", ")", ")", "\n", "n_points", ".", "append", "(", "len", "(", "d", ")", ")", "\n", "\n", "", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "L", ")", ",", "np", ".", "array", "(", "U", ")", ")", "\n", "#GridSolverConfig.points_per_dimension = np.max(n_points)", "\n", "\n", "RemboConfig", ".", "emb_d", "=", "self", ".", "fn", ".", "get_emb_dim", "(", ")", "\n", "\n", "# ??", "\n", "#self._domain = DiscreteDomain(np.array([[0.0, 0.0], [1.0, 1.0]]))", "\n", "\n", "self", ".", "_max_value", "=", "-", "self", ".", "mlflow_logging", ".", "y_opt", "\n", "", "def", "f", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.AdaptorBenchmark.f": [[98, 100], ["numpy.float64", "algorithms.AdaptorBenchmark.fn", "numpy.array"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "float64", "(", "-", "self", ".", "fn", "(", "np", ".", "array", "(", "[", "x", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.GADDUCBAlgorithm.__init__": [[102, 115], ["numpy.random.seed", "random.seed", "numpy.random.RandomState", "algorithms.GADDUCBAlgorithm.domain.random_X"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackDomain.random_X"], ["    ", "def", "__init__", "(", "self", ",", "n_iter", ",", "algorithm_random_seed", ",", "n_rand", ",", "algoID", "=", "\"\"", ",", "fn", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "algoID", "=", "algoID", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "domain", "=", "fn", ".", "domain", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "algorithm_random_seed", "=", "algorithm_random_seed", "\n", "self", ".", "n_rand", "=", "n_rand", "\n", "# Use the same Random Seed everywhere", "\n", "# generate init design depends on the random seed setting.", "\n", "np", ".", "random", ".", "seed", "(", "algorithm_random_seed", ")", "\n", "random", ".", "seed", "(", "algorithm_random_seed", ")", "\n", "self", ".", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "algorithm_random_seed", ")", "\n", "self", ".", "initial_design", "=", "self", ".", "domain", ".", "random_X", "(", "self", ".", "rs", ",", "n_rand", ")", "\n", "", "def", "get_algorithm_id", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.GADDUCBAlgorithm.get_algorithm_id": [[115, 117], ["None"], "methods", ["None"], ["", "def", "get_algorithm_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "self", ".", "algoID", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.GADDUCBAlgorithm.run": [[117, 119], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BattackAlgorithm.__init__": [[124, 248], ["algorithms.GADDUCBAlgorithm.__init__", "logging.info", "logging.info", "logging.info", "boattack.bayesopt.Bayes_opt", "boattack.bayesopt.Bayes_opt.initialise", "logging.info", "boattack.bayesopt.Bayes_opt.run", "Y_opt_all_slices.append", "Y_query_all_slices.append", "os.path.exists", "logging.info", "logging.info", "X_reduced_opt_all_slices.append", "X_reduced_query_all_slices.append", "X_query_all_slices.append", "X_opt_all_slices.append", "logging.info", "X_reduced_opt_all_slices.append", "X_reduced_query_all_slices.append", "boattack.utilities.upsampler.upsample_projection", "X_query_all_slices.append", "boattack.utilities.upsampler.upsample_projection", "X_opt_all_slices.append", "logging.info", "numpy.abs().sum", "numpy.sqrt", "open", "pickle.dump", "open", "pickle.load", "algorithms.BattackAlgorithm.fn", "X_opt.astype", "X_query.astype", "X_opt.astype", "X_query.astype", "numpy.sum", "fn.mlflow_logging.log_battack", "fn.mlflow_logging.log_init_y", "numpy.abs", "int", "numpy.min", "fn.mlflow_logging.log_cost_ba", "fn.mlflow_logging.log_battack", "fn.mlflow_logging.log_y", "int", "X_h_opt[].ravel"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.initialise", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_init_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost_ba", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "model_type", ",", "acq_type", ",", "sparse", "=", "'None'", ",", "nsubspaces", "=", "1", ",", "batch_size", "=", "None", ",", "update_freq", "=", "None", ",", "noise_var", "=", "None", ",", "exploration_weight", "=", "None", ",", "\n", "grid_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "GADDUCBAlgorithm", ".", "__init__", "(", "self", ",", "fn", "=", "fn", ",", "**", "kwargs", ")", "\n", "\n", "#x_init, y_init = get_init_data(obj_func=fn.f_adapted, n_init=self.n_rand, bounds=fn.x_bounds_adapted)", "\n", "beta", "=", "exploration_weight", "\n", "\n", "obj_func", "=", "self", ".", "fn", ".", "obj_func", "\n", "nchannel", "=", "self", ".", "fn", ".", "nchannel", "\n", "high_dim", "=", "self", ".", "fn", ".", "high_dim", "\n", "low_dim", "=", "self", ".", "fn", ".", "low_dim", "\n", "dim_reduction", "=", "self", ".", "fn", ".", "dim_reduction", "\n", "\n", "results_file_name", "=", "fn", ".", "results_file_name", "\n", "failed_file_name", "=", "fn", ".", "failed_file_name", "\n", "\n", "logging", ".", "info", "(", "f\"Results file={results_file_name}\"", ")", "\n", "logging", ".", "info", "(", "f\"Failed file={failed_file_name}\"", ")", "\n", "\n", "\n", "X_opt_all_slices", "=", "[", "]", "\n", "Y_opt_all_slices", "=", "[", "]", "\n", "X_query_all_slices", "=", "[", "]", "\n", "Y_query_all_slices", "=", "[", "]", "\n", "X_reduced_opt_all_slices", "=", "[", "]", "\n", "X_reduced_query_all_slices", "=", "[", "]", "\n", "\n", "# Generate initial observation data for BO", "\n", "if", "os", ".", "path", ".", "exists", "(", "results_file_name", ")", "and", "'LDR'", "not", "in", "model_type", ":", "\n", "            ", "logging", ".", "info", "(", "'load old init data'", ")", "\n", "with", "open", "(", "results_file_name", ",", "'rb'", ")", "as", "pre_file", ":", "\n", "                ", "previous_bo_results", "=", "pickle", ".", "load", "(", "pre_file", ")", "\n", "", "x_init", "=", "previous_bo_results", "[", "'X_reduced_query'", "]", "[", "0", "]", "\n", "y_init", "=", "previous_bo_results", "[", "'Y_query'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'generate new init data'", ")", "\n", "\n", "# There are some significant problems with a discrete domain.", "\n", "try", ":", "\n", "#x_init, y_init = get_init_data(obj_func=fn, n_init=self.n_rand, bounds=fn.x_bounds_adapted)", "\n", "# There is some strange sampling that they are doing...", "\n", "                ", "x_init", "=", "self", ".", "initial_design", "\n", "y_init", "=", "self", ".", "fn", "(", "x_init", ")", "\n", "\n", "", "except", "EarlyTerminationException", "as", "e", ":", "\n", "\n", "# Failed on init, so we fix the init problem", "\n", "                ", "fn", ".", "mlflow_logging", ".", "log_battack", "(", "int", "(", "True", ")", ",", "fn", ".", "cnn", ".", "target_label", "[", "0", "]", ")", "\n", "fn", ".", "mlflow_logging", ".", "log_init_y", "(", "np", ".", "min", "(", "e", ".", "metrics", "[", "'y'", "]", ")", ")", "\n", "\n", "while", "fn", ".", "mlflow_logging", ".", "t_y", "<", "self", ".", "n_iter", ":", "\n", "                    ", "fn", ".", "mlflow_logging", ".", "log_cost_ba", "(", ")", "\n", "fn", ".", "mlflow_logging", ".", "log_battack", "(", "int", "(", "True", ")", ",", "fn", ".", "cnn", ".", "target_label", "[", "0", "]", ")", "\n", "fn", ".", "mlflow_logging", ".", "log_y", "(", "e", ".", "metrics", "[", "'y'", "]", ")", "\n", "", "return", "\n", "\n", "#x_init, y_init = get_init_data(obj_func=f, n_init=n_init, bounds=x_bounds)", "\n", "#x_init, y_init = get_init_data(obj_func=fn.f_adapted, n_init=self.n_rand, bounds=fn.x_bounds_adapted)", "\n", "", "", "logging", ".", "info", "(", "f'X init shape {x_init.shape}'", ")", "\n", "\n", "# Initialise BO", "\n", "#bayes_opt = Bayes_opt(func=f, bounds=x_bounds, saving_path=failed_file_name)", "\n", "bayes_opt", "=", "Bayes_opt", "(", "func", "=", "fn", ",", "bounds", "=", "fn", ".", "x_bounds_adapted", ",", "saving_path", "=", "failed_file_name", ",", "noise_var", "=", "noise_var", ")", "\n", "bayes_opt", ".", "initialise", "(", "X_init", "=", "x_init", ",", "Y_init", "=", "y_init", ",", "model_type", "=", "model_type", ",", "acq_type", "=", "acq_type", ",", "\n", "sparse", "=", "sparse", ",", "nsubspaces", "=", "nsubspaces", ",", "batch_size", "=", "batch_size", ",", "update_freq", "=", "update_freq", ",", "\n", "nchannel", "=", "nchannel", ",", "high_dim", "=", "high_dim", ",", "dim_reduction", "=", "dim_reduction", ",", "\n", "cost_metric", "=", "None", ",", "seed", "=", "self", ".", "algorithm_random_seed", ",", "beta", "=", "beta", ",", "gridSize", "=", "grid_size", ")", "\n", "\n", "# Run BO", "\n", "logging", ".", "info", "(", "\"Run bayes_opt\"", ")", "\n", "X_query_full", ",", "Y_query", ",", "X_opt_full", ",", "Y_opt", ",", "time_record", "=", "bayes_opt", ".", "run", "(", "total_iterations", "=", "self", ".", "n_iter", ")", "\n", "\n", "# Reduce the memory needed for storing results", "\n", "if", "'LDR'", "in", "model_type", ":", "\n", "            ", "X_query", "=", "X_query_full", "[", "-", "2", ":", "]", "\n", "X_opt", "=", "X_opt_full", "[", "-", "2", ":", "]", "\n", "", "else", ":", "\n", "            ", "X_query", "=", "X_query_full", "\n", "X_opt", "=", "X_opt_full", "[", "-", "2", ":", "]", "\n", "\n", "# Store the results", "\n", "", "Y_opt_all_slices", ".", "append", "(", "Y_opt", ")", "\n", "Y_query_all_slices", ".", "append", "(", "Y_query", ")", "\n", "opt_dr_list", "=", "bayes_opt", ".", "opt_dr_list", "\n", "\n", "if", "dim_reduction", "==", "'NONE'", ":", "\n", "            ", "X_reduced_opt_all_slices", ".", "append", "(", "X_opt", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "X_reduced_query_all_slices", ".", "append", "(", "X_query", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "X_query_all_slices", ".", "append", "(", "X_query", ")", "\n", "X_opt_all_slices", ".", "append", "(", "X_opt", ")", "\n", "logging", ".", "info", "(", "f'Y_opt={Y_opt[-1]}, X_opt shape{X_opt.shape}, X_h_opt shape{X_opt.shape}, '", "\n", "f'X_query shape{X_query.shape}, X_h_query shape{X_query.shape}, opt_dr={opt_dr_list[-1]}'", ")", "\n", "", "else", ":", "\n", "            ", "X_reduced_opt_all_slices", ".", "append", "(", "X_opt", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "X_reduced_query_all_slices", ".", "append", "(", "X_query", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "\n", "# Transform data from reduced search space to original high-dimensional input space", "\n", "X_h_query", "=", "upsample_projection", "(", "dim_reduction", ",", "X_query", ",", "low_dim", "=", "low_dim", ",", "high_dim", "=", "high_dim", ",", "\n", "nchannel", "=", "nchannel", ")", "\n", "X_query_all_slices", ".", "append", "(", "X_h_query", ")", "\n", "X_h_opt", "=", "upsample_projection", "(", "dim_reduction", ",", "X_opt", ",", "low_dim", "=", "low_dim", ",", "high_dim", "=", "high_dim", ",", "\n", "nchannel", "=", "nchannel", ")", "\n", "X_opt_all_slices", ".", "append", "(", "X_h_opt", ")", "\n", "logging", ".", "info", "(", "f'Y_opt={Y_opt[-1]}, X_opt shape{X_opt.shape}, X_h_opt shape{X_h_opt.shape}, '", "\n", "f'X_query shape{X_query.shape}, X_h_query shape{X_h_query.shape}'", ")", "\n", "\n", "# For ImageNet images, save only the L_inf norm and L2 norm instead of the adversarial image", "\n", "", "if", "'imagenet'", "in", "obj_func", ":", "\n", "            ", "l_inf_sum", "=", "np", ".", "abs", "(", "X_h_opt", "[", "-", "1", ",", ":", "]", ")", ".", "sum", "(", ")", "\n", "l_2_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "epsilon", "*", "X_h_opt", "[", "-", "1", ",", ":", "]", ".", "ravel", "(", ")", ")", "**", "2", ")", ")", "\n", "X_opt_all_slices", "=", "[", "l_inf_sum", "]", "\n", "X_query_all_slices", "=", "[", "l_2_norm", "]", "\n", "\n", "# Save the results locally", "\n", "", "results", "=", "{", "'X_opt'", ":", "X_opt_all_slices", ",", "\n", "'Y_opt'", ":", "Y_opt_all_slices", ",", "\n", "'X_query'", ":", "X_query_all_slices", ",", "\n", "'Y_query'", ":", "Y_query_all_slices", ",", "\n", "'X_reduced_opt'", ":", "X_reduced_opt_all_slices", ",", "\n", "'X_reduced_query'", ":", "X_reduced_query_all_slices", ",", "\n", "'dr_opt_list'", ":", "opt_dr_list", ",", "\n", "'runtime'", ":", "time_record", "}", "\n", "with", "open", "(", "results_file_name", ",", "'wb'", ")", "as", "file", ":", "\n", "            ", "pickle", ".", "dump", "(", "results", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BattackAlgorithm.run": [[249, 251], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"RUN\"", ")", "\n", "", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BattackAlgorithm.FEBO_Algorithm_Cls": [[251, 253], ["None"], "methods", ["None"], ["", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BoAttack.FEBO_Algorithm_Cls": [[255, 257], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "return", "febo", ".", "algorithms", ".", "Random", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.FEBOAlgorithm.__init__": [[259, 289], ["algorithms.GADDUCBAlgorithm.__init__", "algorithms.AdaptorBenchmark", "algorithms.FEBOAlgorithm.fn.mlflow_logging.log_init_y", "algorithms.FEBOAlgorithm.fn", "numpy.empty", "_data.append", "numpy.min", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_init_y"], ["    ", "def", "__init__", "(", "self", ",", "initial_kernel_params", "=", "None", ",", "noise_var", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "GADDUCBAlgorithm", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "\n", "# Config the FEBO domains", "\n", "GPConfig", ".", "noise_var", "=", "noise_var", "\n", "# Default is RBF", "\n", "if", "not", "'gpy_kernel'", "in", "initial_kernel_params", ":", "\n", "            ", "initial_kernel_params", "[", "'gpy_kernel'", "]", "=", "'GPy.kern.RBF'", "\n", "", "GPConfig", ".", "kernels", "=", "[", "(", "initial_kernel_params", "[", "'gpy_kernel'", "]", ",", "{", "'variance'", ":", "initial_kernel_params", "[", "'variance'", "]", ",", "'lengthscale'", ":", "initial_kernel_params", "[", "'lengthscale'", "]", ",", "'ARD'", ":", "True", "}", ")", "]", "\n", "\n", "SimpleControllerConfig", ".", "T", "=", "self", ".", "n_iter", "\n", "SimpleControllerConfig", ".", "best_predicted_every", "=", "1", "\n", "\n", "self", ".", "linebo_env", "=", "AdaptorBenchmark", "(", "self", ".", "fn", ")", "\n", "\n", "_data", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "initial_design", ":", "\n", "            ", "y", "=", "self", ".", "fn", "(", "np", ".", "array", "(", "[", "x", "]", ")", ")", "\n", "evaluation", "=", "np", ".", "empty", "(", "shape", "=", "(", ")", ",", "dtype", "=", "self", ".", "linebo_env", ".", "dtype", ")", "\n", "evaluation", "[", "\"x\"", "]", "=", "x", "\n", "evaluation", "[", "\"y\"", "]", "=", "-", "y", "\n", "evaluation", "[", "\"y_exact\"", "]", "=", "-", "y", "\n", "evaluation", "[", "\"y_max\"", "]", "=", "self", ".", "linebo_env", ".", "_max_value", "\n", "\n", "_data", ".", "append", "(", "evaluation", ")", "\n", "\n", "", "self", ".", "initial_data", "=", "_data", "\n", "\n", "# Attempt to return f instead of y if that exist", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_init_y", "(", "np", ".", "min", "(", "self", ".", "fn", ".", "history_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.FEBOAlgorithm.run": [[290, 304], ["algorithms.FEBOAlgorithm.FEBO_Algorithm_Cls", "algorithms.AdaptorController", "AdaptorController.initialize", "algorithms.AdaptorController.run", "logging.exception", "AdaptorController.finalize", "algorithms.FEBOAlgorithm.", "dict"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.InterleavedRembo.FEBO_Algorithm_Cls", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize"], ["", "def", "run", "(", "self", ")", ":", "\n", "# Setup", "\n", "        ", "s", "=", "None", "\n", "try", ":", "\n", "            ", "FEBO_Algo", "=", "self", ".", "FEBO_Algorithm_Cls", "(", ")", "\n", "s", "=", "AdaptorController", "(", "fn", "=", "self", ".", "fn", ",", "algorithm", "=", "FEBO_Algo", "(", ")", ",", "environment", "=", "self", ".", "linebo_env", ")", "\n", "\n", "s", ".", "initialize", "(", "algo_kwargs", "=", "dict", "(", "initial_data", "=", "self", ".", "initial_data", ")", ")", "\n", "s", ".", "run", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logging", ".", "exception", "(", "\"Exception\"", ")", "\n", "", "finally", ":", "\n", "            ", "if", "s", ":", "\n", "                ", "s", ".", "finalize", "(", ")", "\n", "", "", "", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.FEBOAlgorithm.FEBO_Algorithm_Cls": [[304, 306], ["None"], "methods", ["None"], ["", "", "", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.FEBO_Random.FEBO_Algorithm_Cls": [[308, 310], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "return", "febo", ".", "algorithms", ".", "Random", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.NelderMead.FEBO_Algorithm_Cls": [[312, 314], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "return", "febo", ".", "algorithms", ".", "NelderMead", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.RandomLineBO.FEBO_Algorithm_Cls": [[316, 318], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "return", "febo", ".", "algorithms", ".", "RandomLineBO", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.CoordinateLineBO.FEBO_Algorithm_Cls": [[320, 322], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "return", "febo", ".", "algorithms", ".", "CoordinateLineBO", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.AscentLineBO.FEBO_Algorithm_Cls": [[324, 326], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "return", "febo", ".", "algorithms", ".", "AscentLineBO", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.UCB.FEBO_Algorithm_Cls": [[328, 330], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "return", "febo", ".", "algorithms", ".", "UCB", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Rembo.FEBO_Algorithm_Cls": [[332, 335], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "from", "febo", ".", "algorithms", ".", "rembo", "import", "Rembo", "\n", "return", "Rembo", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.InterleavedRembo.FEBO_Algorithm_Cls": [[337, 340], ["None"], "methods", ["None"], ["    ", "def", "FEBO_Algorithm_Cls", "(", "self", ")", ":", "\n", "        ", "from", "febo", ".", "algorithms", ".", "rembo", "import", "InterleavedRembo", "\n", "return", "InterleavedRembo", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.AdaptorController.__init__": [[342, 345], ["febo.controller.SimpleController.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AdaptorController", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.AdaptorController.run": [[345, 353], ["logging.info", "algorithms.AdaptorController._run_step", "algorithms.AdaptorController.fn.mlflow_logging.log_y", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._run_step", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f\"Starting optimization: {self.algorithm.name}\"", ")", "\n", "# interaction loop", "\n", "while", "not", "self", ".", "_exit", ":", "\n", "            ", "self", ".", "_run_step", "(", ")", "\n", "\n", "evaluation", "=", "self", ".", "_data", "[", "-", "1", "]", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_y", "(", "np", ".", "min", "(", "self", ".", "fn", ".", "history_y", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Random.__init__": [[356, 359], ["algorithms.GADDUCBAlgorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "GADDUCBAlgorithm", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "self", ".", "mlflow_logging", "=", "self", ".", "fn", ".", "mlflow_logging", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Random.run": [[359, 390], ["algorithms.Random.domain.random_X", "algorithms.Random.mlflow_logging.log_init_y", "f", "Y.append", "Y_best.append", "X_rand.append", "numpy.min", "f", "algorithms.Random.mlflow_logging.log_y", "Y.append", "Y_best.append", "X_rand.append", "numpy.array", "numpy.array", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackDomain.random_X", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_init_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "f", "=", "self", ".", "fn", "\n", "initial_design", "=", "self", ".", "initial_design", "\n", "n_iter", "=", "self", ".", "n_iter", "\n", "\n", "initial_design_iter", "=", "self", ".", "domain", ".", "random_X", "(", "self", ".", "rs", ",", "n_iter", ")", "\n", "\n", "Y", "=", "[", "]", "\n", "Y_best", "=", "[", "]", "\n", "X_rand", "=", "[", "]", "\n", "y_best", "=", "np", ".", "inf", "\n", "for", "x", "in", "initial_design", ":", "\n", "            ", "y", "=", "f", "(", "np", ".", "array", "(", "[", "x", "]", ")", ")", "\n", "Y", ".", "append", "(", "y", ")", "\n", "if", "y", "<", "y_best", ":", "\n", "                ", "y_best", "=", "y", "\n", "", "Y_best", ".", "append", "(", "y_best", ")", "\n", "X_rand", ".", "append", "(", "x", ")", "\n", "\n", "", "self", ".", "mlflow_logging", ".", "log_init_y", "(", "np", ".", "min", "(", "self", ".", "fn", ".", "history_y", ")", ")", "\n", "\n", "for", "x", "in", "initial_design_iter", ":", "\n", "            ", "y", "=", "f", "(", "np", ".", "array", "(", "[", "x", "]", ")", ")", "\n", "self", ".", "mlflow_logging", ".", "log_y", "(", "np", ".", "min", "(", "self", ".", "fn", ".", "history_y", "[", "-", "1", "]", ")", ")", "\n", "Y", ".", "append", "(", "y", ")", "\n", "if", "y", "<", "y_best", ":", "\n", "                ", "y_best", "=", "y", "\n", "", "Y_best", ".", "append", "(", "y_best", ")", "\n", "X_rand", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "Y_best", ",", "Y", ",", "X_rand", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BayesianOptimization.__init__": [[393, 432], ["algorithms.GADDUCBAlgorithm.__init__", "algorithms.BayesianOptimization.graph_function.dimension", "common.Config", "networkx.empty_graph", "algorithms.BayesianOptimization.get_GraphFunction", "algorithms.BayesianOptimization.graph_function.dimension"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.dimension", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Optimal.get_GraphFunction", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.dimension"], ["    ", "def", "__init__", "(", "self", ",", "algorithm_random_seed", ",", "lengthscaleNumIter", ",", "n_iter", ",", "initial_graph", "=", "None", ",", "initial_kernel_params", "=", "None", ",", "learnDependencyStructureRate", "=", "50", ",", "\n", "learnParameterRate", "=", "None", ",", "graphSamplingNumIter", "=", "100", ",", "fully_optimize_lengthscales", "=", "False", ",", "exploration_weight", "=", "2", ",", "\n", "normalize_Y", "=", "False", ",", "eps", "=", "-", "1", ",", "noise_var", "=", "0.", ",", "max_eval", "=", "-", "1", ",", "p", "=", "0.5", ",", "M", "=", "0", ",", "max_group_size", "=", "0", ",", "opt_restart", "=", "None", ",", "param_exploration", "=", "0.1", ",", "\n", "acq_opt_restarts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "GADDUCBAlgorithm", ".", "__init__", "(", "self", ",", "n_iter", ",", "algorithm_random_seed", ",", "**", "kwargs", ")", "\n", "self", ".", "learnDependencyStructureRate", "=", "learnDependencyStructureRate", "\n", "self", ".", "learnParameterRate", "=", "learnParameterRate", "\n", "self", ".", "graphSamplingNumIter", "=", "graphSamplingNumIter", "\n", "self", ".", "lengthscaleNumIter", "=", "lengthscaleNumIter", "\n", "self", ".", "fully_optimize_lengthscales", "=", "fully_optimize_lengthscales", "\n", "self", ".", "exploration_weight", "=", "exploration_weight", "\n", "self", ".", "normalize_Y", "=", "normalize_Y", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "self", ".", "max_eval", "=", "max_eval", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "acq_opt_restarts", "=", "acq_opt_restarts", "\n", "self", ".", "result_path", "=", "Config", "(", ")", ".", "base_path", "\n", "\n", "# Additional Param", "\n", "self", ".", "exact_feval", "=", "False", "\n", "# GF should be init here", "\n", "# TODO", "\n", "dim", "=", "self", ".", "fn", ".", "domain", ".", "dimension", "\n", "if", "initial_graph", "is", "None", ":", "\n", "            ", "initial_graph", "=", "nx", ".", "empty_graph", "(", "dim", ")", "\n", "", "self", ".", "initial_graph", "=", "initial_graph", "\n", "self", ".", "graph_function", "=", "self", ".", "get_GraphFunction", "(", ")", "(", "self", ".", "initial_graph", ",", "initial_kernel_params", ")", "\n", "assert", "(", "dim", "==", "self", ".", "graph_function", ".", "dimension", "(", ")", ")", "\n", "dim", "=", "self", ".", "graph_function", ".", "dimension", "(", ")", "\n", "if", "M", "==", "0", ":", "\n", "            ", "M", "=", "dim", "\n", "", "if", "max_group_size", "==", "0", ":", "\n", "            ", "max_group_size", "=", "dim", "\n", "", "self", ".", "M", "=", "M", "\n", "self", ".", "max_group_size", "=", "max_group_size", "\n", "\n", "self", ".", "opt_restart", "=", "opt_restart", "\n", "self", ".", "param_exploration", "=", "param_exploration", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BayesianOptimization.run": [[433, 471], ["myBOModular.MyBOModular", "myBOModular.MyBOModular.Y.flatten", "algorithms.BayesianOptimization.fn.mlflow_logging.log_cost_ba", "algorithms.BayesianOptimization.fn.mlflow_logging.log_y", "myBOModular.MyBOModular.run_optimization", "algorithms.BayesianOptimization.make_fn_optimizer", "algorithms.BayesianOptimization.fn.mlflow_logging.log_cost_ba", "algorithms.BayesianOptimization.fn.mlflow_logging.log_battack", "algorithms.BayesianOptimization.fn.mlflow_logging.log_y", "algorithms.BayesianOptimization.fn.mlflow_logging.log_y", "int", "algorithms.BayesianOptimization.fn.mlflow_logging.log_cost", "algorithms.BayesianOptimization.fn.mlflow_logging.log_battack", "algorithms.BayesianOptimization.fn.mlflow_logging.log_y"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost_ba", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Optimal.make_fn_optimizer", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost_ba", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "mybo", "=", "MyBOModular", "(", "self", ".", "domain", ",", "self", ".", "initial_design", ",", "self", ".", "graph_function", ",", "\n", "max_eval", "=", "self", ".", "max_eval", ",", "fn", "=", "self", ".", "fn", ",", "fn_optimizer", "=", "self", ".", "make_fn_optimizer", "(", ")", ",", "\n", "noise_var", "=", "self", ".", "noise_var", ",", "exact_feval", "=", "self", ".", "exact_feval", ",", "\n", "exploration_weight_function", "=", "self", ".", "exploration_weight", ",", "\n", "learnDependencyStructureRate", "=", "self", ".", "learnDependencyStructureRate", ",", "\n", "learnParameterRate", "=", "self", ".", "learnParameterRate", ",", "\n", "normalize_Y", "=", "self", ".", "normalize_Y", ",", "\n", "acq_opt_restarts", "=", "self", ".", "acq_opt_restarts", ")", "\n", "", "except", "EarlyTerminationException", "as", "e", ":", "\n", "            ", "self", ".", "fn", ".", "mlflow_logging", ".", "log_cost_ba", "(", ")", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_y", "(", "e", ".", "metrics", "[", "'y'", "]", ")", "\n", "\n", "while", "self", ".", "fn", ".", "mlflow_logging", ".", "t_y", "<", "self", ".", "n_iter", ":", "\n", "                ", "self", ".", "fn", ".", "mlflow_logging", ".", "log_cost_ba", "(", ")", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_battack", "(", "int", "(", "True", ")", ",", "self", ".", "fn", ".", "cnn", ".", "target_label", "[", "0", "]", ")", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_y", "(", "e", ".", "metrics", "[", "'y'", "]", ")", "\n", "", "return", "None", ",", "None", "\n", "\n", "", "if", "self", ".", "n_iter", ">", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "mybo", ".", "run_optimization", "(", "self", ".", "n_iter", ",", "eps", "=", "self", ".", "eps", ")", "\n", "", "except", "EarlyTerminationException", "as", "e", ":", "\n", "\n", "                ", "cost_metrics", "=", "self", ".", "fn", ".", "mlflow_logging", ".", "cost_metrics", "\n", "ba_metrics", "=", "self", ".", "fn", ".", "mlflow_logging", ".", "ba_metrics", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_y", "(", "e", ".", "metrics", "[", "'y'", "]", ")", "\n", "\n", "while", "self", ".", "fn", ".", "mlflow_logging", ".", "t_y", "<", "self", ".", "n_iter", ":", "\n", "\n", "                    ", "self", ".", "fn", ".", "mlflow_logging", ".", "log_cost", "(", "cost_metrics", "[", "'acq_cost'", "]", ")", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_battack", "(", "**", "ba_metrics", ")", "\n", "self", ".", "fn", ".", "mlflow_logging", ".", "log_y", "(", "e", ".", "metrics", "[", "'y'", "]", ")", "\n", "\n", "# np.save(os.path.join(self.result_path,'all_graphs.npy'), mybo.all_graphs)", "\n", "\n", "", "", "", "return", "mybo", ".", "Y", ".", "flatten", "(", ")", ",", "mybo", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BayesianOptimization.FnOptimizer": [[472, 474], ["None"], "methods", ["None"], ["", "def", "FnOptimizer", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "make_fn_optimizer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BayesianOptimization.make_fn_optimizer": [[474, 480], ["algorithms.BayesianOptimization.FnOptimizer", "algorithms.BayesianOptimization."], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Tree.FnOptimizer"], ["", "def", "make_fn_optimizer", "(", "self", ")", ":", "\n", "        ", "FnOptimizer", "=", "self", ".", "FnOptimizer", "(", ")", "\n", "# Update M and max_group_size just in case its not specified", "\n", "return", "FnOptimizer", "(", "graphSamplingNumIter", "=", "self", ".", "graphSamplingNumIter", ",", "lengthscaleNumIter", "=", "self", ".", "lengthscaleNumIter", ",", "cycles", "=", "self", ".", "cycles", ",", "\n", "fully_optimize_lengthscales", "=", "self", ".", "fully_optimize_lengthscales", ",", "p", "=", "self", ".", "p", ",", "M", "=", "self", ".", "M", ",", "max_group_size", "=", "self", ".", "max_group_size", ",", "sigma2", "=", "self", ".", "noise_var", ",", "\n", "opt_restart", "=", "self", ".", "opt_restart", ",", "param_exploration", "=", "self", ".", "param_exploration", ")", "\n", "", "def", "get_GraphFunction", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.BayesianOptimization.get_GraphFunction": [[480, 482], ["None"], "methods", ["None"], ["", "def", "get_GraphFunction", "(", "self", ")", ":", "\n", "        ", "return", "GraphFunction", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.GraphOverlap.__init__": [[485, 487], ["algorithms.BayesianOptimization.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "BayesianOptimization", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "", "def", "FnOptimizer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.GraphOverlap.FnOptimizer": [[487, 490], ["None"], "methods", ["None"], ["", "def", "FnOptimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "cycles", "=", "True", "\n", "return", "function_optimizer", ".", "GraphOverlap", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.GraphNonOverlap.__init__": [[493, 495], ["algorithms.BayesianOptimization.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "BayesianOptimization", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "", "def", "FnOptimizer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.GraphNonOverlap.FnOptimizer": [[495, 498], ["None"], "methods", ["None"], ["", "def", "FnOptimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "cycles", "=", "True", "\n", "return", "function_optimizer", ".", "GraphNonOverlap", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Tree.__init__": [[501, 503], ["algorithms.BayesianOptimization.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "BayesianOptimization", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "", "def", "FnOptimizer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Tree.FnOptimizer": [[503, 506], ["None"], "methods", ["None"], ["", "def", "FnOptimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "cycles", "=", "False", "\n", "return", "function_optimizer", ".", "Tree", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Optimal.__init__": [[509, 538], ["logging.info", "algorithms.BayesianOptimization.__init__", "logging.info", "logging.info", "logging.info", "logging.info", "algorithms.Optimal.initial_graph.edges"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["def", "__init__", "(", "self", ",", "n_iter", ",", "initial_kernel_params", ",", "learnDependencyStructureRate", ",", "fn", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "fn", "=", "fn", "\n", "# Make sure the fn that it accesses is the true fn without noise", "\n", "self", ".", "fn", ".", "__call__", "=", "self", ".", "fn", ".", "eval", "\n", "logging", ".", "info", "(", "\"Ignoring intial_kernel_params and noise_var.\"", ")", "\n", "# Redefine the inital kernel params to the true kernel", "\n", "initial_kernel_params", "=", "self", ".", "fn", ".", "kernel_params", "\n", "# n_iter + kwargs['n_rand'] + 10", "\n", "# TODO Should take lengthscale from function", "\n", "BayesianOptimization", ".", "__init__", "(", "self", ",", "n_iter", "=", "n_iter", ",", "initial_graph", "=", "fn", ".", "graph", ",", "initial_kernel_params", "=", "initial_kernel_params", ",", "\n", "learnDependencyStructureRate", "=", "-", "1", ",", "fn", "=", "fn", ",", "**", "kwargs", ")", "\n", "# We also use the optimal lengthscale", "\n", "# We also tweak the exportation to be 0", "\n", "\n", "self", ".", "noise_var", "=", "0", "\n", "self", ".", "exact_feval", "=", "True", "\n", "self", ".", "fn", ".", "fn_noise_sd", "=", "0", "\n", "'''\n        self.exploration_weight = 0\n        self.noise_var = 0\n        self.exact_feval = True\n        self.fn.fn_noise_var = 0\n        '''", "\n", "# The following is a new field", "\n", "\n", "logging", ".", "info", "(", "\"Using True Graph = {}\"", ".", "format", "(", "self", ".", "initial_graph", ".", "edges", "(", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"exploration_weight = {}\"", ".", "format", "(", "self", ".", "exploration_weight", ")", ")", "\n", "logging", ".", "info", "(", "\"noise_var = {}\"", ".", "format", "(", "self", ".", "noise_var", ")", ")", "\n", "logging", ".", "info", "(", "\"exact_feval = {}\"", ".", "format", "(", "self", ".", "exact_feval", ")", ")", "\n", "", "def", "make_fn_optimizer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Optimal.make_fn_optimizer": [[538, 540], ["None"], "methods", ["None"], ["", "def", "make_fn_optimizer", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "", "def", "get_GraphFunction", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.Optimal.get_GraphFunction": [[540, 542], ["None"], "methods", ["None"], ["", "def", "get_GraphFunction", "(", "self", ")", ":", "\n", "        ", "return", "OptimalGraphFunction", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.algorithms.normalize": [[26, 31], ["numpy.linalg.norm", "numpy.finfo"], "function", ["None"], ["def", "normalize", "(", "v", ")", ":", "\n", "    ", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "v", ",", "ord", "=", "1", ")", "\n", "if", "norm", "==", "0", ":", "\n", "        ", "norm", "=", "np", ".", "finfo", "(", "v", ".", "dtype", ")", ".", "eps", "\n", "", "return", "v", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.__init__": [[25, 44], ["GPyOpt.optimization.acquisition_optimizer.AcquisitionOptimizer.__init__", "graph_function.graph.number_of_nodes", "acquisition_optimizer.MPAcquisitionOptimizer.init_graph_helpers", "acquisition_optimizer.MPAcquisitionOptimizer.evaluated_points.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.init_graph_helpers"], ["def", "__init__", "(", "self", ",", "domain", ",", "graph_function", ",", "X", ",", "mlflow_logging", ",", "max_eval", ",", "acq_opt_restarts", ")", ":", "\n", "        ", "super", "(", "MPAcquisitionOptimizer", ",", "self", ")", ".", "__init__", "(", "domain", ")", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "max_eval", "=", "max_eval", "\n", "self", ".", "graph_function", "=", "graph_function", "\n", "self", ".", "acq_opt_restarts", "=", "acq_opt_restarts", "\n", "self", ".", "dimension", "=", "graph_function", ".", "graph", ".", "number_of_nodes", "(", ")", "\n", "\n", "self", ".", "edges_set", "=", "None", "\n", "self", ".", "init_graph_helpers", "(", ")", "\n", "\n", "# ==========================================", "\n", "self", ".", "evaluated_points", "=", "[", "]", "\n", "for", "x", "in", "X", ":", "# we should have already picked at least one point randomly", "\n", "                ", "self", ".", "evaluated_points", ".", "append", "(", "x", ")", "\n", "# ==========================================", "\n", "\n", "", "self", ".", "mlflow_logging", "=", "mlflow_logging", "\n", "self", ".", "_total_cost", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer._optimize": [[45, 60], ["range", "min", "acquisition_optimizer.MPAcquisitionOptimizer._optimize_helper", "evals.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer._optimize_helper"], ["", "def", "_optimize", "(", "self", ",", "f", ")", ":", "\n", "\n", "        ", "inital_total_cost", "=", "self", ".", "_total_cost", "\n", "\n", "evals", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "acq_opt_restarts", ")", ":", "\n", "            ", "self", ".", "_total_cost", "=", "inital_total_cost", "\n", "x_best", ",", "fmin", "=", "self", ".", "_optimize_helper", "(", "f", ")", "\n", "total_cost", "=", "self", ".", "_total_cost", "\n", "evals", ".", "append", "(", "(", "fmin", ",", "x_best", ",", "total_cost", ")", ")", "\n", "\n", "", "fmin", ",", "x_best", ",", "total_cost", "=", "min", "(", "evals", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "self", ".", "_total_cost", "=", "total_cost", "\n", "\n", "return", "x_best", ",", "fmin", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer._optimize_helper": [[61, 76], ["acquisition_optimizer.MPAcquisitionOptimizer.domain.none_value", "numpy.random.shuffle", "acquisition_optimizer.MPAcquisitionOptimizer.clique_tree.subgraph", "acquisition_optimizer.MPAcquisitionOptimizer.optimize_connected_tree", "networkx.connected_components"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.none_value", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.optimize_connected_tree"], ["", "def", "_optimize_helper", "(", "self", ",", "f", ")", ":", "\n", "# Optimizes each acquisition function on all disconnected trees", "\n", "        ", "x_best", "=", "self", ".", "domain", ".", "none_value", "(", ")", "\n", "fmin", "=", "0", "\n", "#disconnectedComp = list(nx.components.connected.connected_component_subgraphs(self.clique_tree))", "\n", "disconnectedComp", "=", "[", "self", ".", "clique_tree", ".", "subgraph", "(", "c", ")", "for", "c", "in", "nx", ".", "connected_components", "(", "self", ".", "clique_tree", ")", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "disconnectedComp", ")", "\n", "\n", "for", "clique_tree", "in", "disconnectedComp", ":", "# loop on all disconnected trees", "\n", "            ", "fmin_tree", ",", "x_best_tree", "=", "self", ".", "optimize_connected_tree", "(", "clique_tree", ")", "\n", "x_best", "[", "x_best_tree", "!=", "-", "1", "]", "=", "x_best_tree", "[", "x_best_tree", "!=", "-", "1", "]", "\n", "\n", "fmin", "+=", "fmin_tree", "\n", "\n", "", "return", "x_best", ",", "fmin", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.optimize": [[77, 177], ["acquisition_optimizer.MPAcquisitionOptimizer.init_graph_helpers", "numpy.array", "numpy.isclose", "acquisition_optimizer.MPAcquisitionOptimizer.domain.get_opt_domain", "acquisition_optimizer.MPAcquisitionOptimizer.make_small_domains", "acquisition_optimizer.MPAcquisitionOptimizer._optimize", "list", "logging.fatal", "random.randint", "random.randint", "acquisition_optimizer.MPAcquisitionOptimizer.mlflow_logging.log_cost", "f", "acquisition_optimizer.MPAcquisitionOptimizer._optimize", "list", "numpy.where", "acquisition_optimizer.MPAcquisitionOptimizer._optimize", "zip", "len", "len", "math.ceil", "domain_chunks.append", "domain_chunks.append", "len", "list", "numpy.random.choice", "acquisition_optimizer.MPAcquisitionOptimizer._domains.append", "len", "float", "acquisition_optimizer.chunks", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.init_graph_helpers", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.get_opt_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.make_small_domains", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer._optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer._optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer._optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.chunks"], ["", "def", "optimize", "(", "self", ",", "f", "=", "None", ",", "df", "=", "None", ",", "f_df", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_total_cost", "=", "0", "\n", "self", ".", "_f", "=", "f", "\n", "\n", "self", ".", "init_graph_helpers", "(", ")", "\n", "\n", "#Original code ", "\n", "#=============", "\n", "# Make the domain", "\n", "self", ".", "_domains", "=", "self", ".", "domain", ".", "get_opt_domain", "(", ")", "[", "'domain'", "]", "\n", "if", "self", ".", "max_eval", ">", "0", ":", "\n", "#logging.info(\"T_Max used\")", "\n", "            ", "self", ".", "_domains", "=", "self", ".", "make_small_domains", "(", "self", ".", "_domains", ",", "self", ".", "max_eval", ")", "\n", "x_best", ",", "fmin", "=", "self", ".", "_optimize", "(", "f", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "max_eval", "<", "-", "1", ":", "\n", "#logging.info(\"Zooming used\")", "\n", "                ", "target_grid", "=", "-", "(", "self", ".", "max_eval", ")", "\n", "subdiv_count", "=", "0", "\n", "while", "True", ":", "\n", "                    ", "is_stop", "=", "True", "\n", "# Now we do the partitioning", "\n", "domain_chunks", "=", "[", "]", "\n", "for", "domain", "in", "self", ".", "_domains", ":", "\n", "                        ", "if", "len", "(", "domain", ")", ">", "target_grid", ":", "\n", "# The case where you can chop it up", "\n", "                            ", "is_stop", "=", "False", "\n", "chunk_len", "=", "math", ".", "ceil", "(", "len", "(", "domain", ")", "/", "float", "(", "target_grid", ")", ")", "\n", "domain_chunks", ".", "append", "(", "list", "(", "chunks", "(", "domain", ",", "chunk_len", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "domain_chunks", ".", "append", "(", "[", "np", ".", "array", "(", "[", "d", "]", ")", "for", "d", "in", "domain", "]", ")", "\n", "\n", "", "", "self", ".", "_domains", "=", "[", "[", "np", ".", "random", ".", "choice", "(", "d", ",", "1", ")", "[", "0", "]", "for", "d", "in", "domain_chunk", "]", "for", "domain_chunk", "in", "domain_chunks", "]", "\n", "x_best", ",", "fmin", "=", "self", ".", "_optimize", "(", "f", ")", "\n", "self", ".", "_domains", "=", "[", "]", "\n", "\n", "if", "is_stop", ":", "\n", "                        ", "break", "\n", "\n", "# Reconstruct the ", "\n", "", "for", "domain", ",", "x", "in", "zip", "(", "domain_chunks", ",", "x_best", ")", ":", "\n", "                        ", "for", "d", "in", "domain", ":", "\n", "                            ", "if", "x", "in", "d", ":", "\n", "                                ", "self", ".", "_domains", ".", "append", "(", "d", ")", "\n", "", "", "", "subdiv_count", "+=", "1", "\n", "\n", "#self._domains = self.make_small_domains(self._domains, self.max_eval)", "\n", "", "", "else", ":", "\n", "#logging.info(\"Through optimization\")", "\n", "                ", "assert", "(", "self", ".", "max_eval", "!=", "0", ")", "\n", "x_best", ",", "fmin", "=", "self", ".", "_optimize", "(", "f", ")", "\n", "\n", "# Domain sensitive", "\n", "# ==========================================", "\n", "", "", "while", "list", "(", "x_best", ")", "in", "[", "list", "(", "item", ")", "for", "item", "in", "self", ".", "evaluated_points", "]", ":", "\n", "            ", "logging", ".", "fatal", "(", "\"Selected point already evaluated, performing perturbation\"", ")", "\n", "var", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "x_best", ")", "-", "1", ")", "\n", "up", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "i", "=", "np", ".", "where", "(", "self", ".", "_domains", "[", "var", "]", "==", "x_best", "[", "var", "]", ")", "[", "0", "]", "\n", "if", "i", "==", "0", "or", "(", "up", "==", "1", "and", "i", "<", "len", "(", "self", ".", "_domains", "[", "var", "]", ")", "-", "1", ")", ":", "\n", "                ", "x_best", "[", "var", "]", "=", "self", ".", "_domains", "[", "var", "]", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "x_best", "[", "var", "]", "=", "self", ".", "_domains", "[", "var", "]", "[", "i", "-", "1", "]", "\n", "# ==========================================", "\n", "\n", "", "", "x_best", "=", "np", ".", "array", "(", "[", "x_best", "]", ")", "\n", "if", "self", ".", "mlflow_logging", "!=", "None", ":", "\n", "            ", "self", ".", "mlflow_logging", ".", "log_cost", "(", "self", ".", "_total_cost", ")", "\n", "\n", "# ============================================================", "\n", "# Basic checks", "\n", "", "assert", "(", "np", ".", "isclose", "(", "f", "(", "x_best", ")", ",", "fmin", ")", ")", "\n", "'''\n        rranges = np.array([ self._domains[k] for k in range(len(self._domains))])\n        prranges = np.array([ len(r) for r in rranges ])\n        print(np.prod(prranges))\n        print(\"Decomposition\", f.keys())\n        print(\"Domain\", rranges)\n\n        if self.max_eval != -1 and np.prod(prranges) < 40000 and False:\n            print(\"Assert Checking for optimizer\")\n            # Additional check to ensure that the domain is respected\n            for xi, di in zip(x_best[0], rranges):\n                assert(xi in di)\n\n            # We now brute force on the reduced domain\n            f_min_bf = np.inf\n            x_bruteforce = None\n            for x in product(*rranges):\n                x = np.array(x)\n                f_min_curr = f(x)\n                if f_min_curr < f_min_bf:\n                    f_min_bf = f_min_curr\n                    x_bruteforce = x     \n            assert(np.all(np.isclose(x_bruteforce, x_best[0])))   \n        # ============================================================\n        '''", "\n", "\n", "return", "x_best", ",", "fmin", ",", "self", ".", "_total_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.get_subspace": [[180, 184], ["itertools.product"], "methods", ["None"], ["", "def", "get_subspace", "(", "self", ",", "subspace_var_order", ")", ":", "\n", "# subspace_var_order must be list", "\n", "        ", "subdomains", "=", "[", "self", ".", "_domains", "[", "i", "]", "for", "i", "in", "subspace_var_order", "]", "\n", "return", "itertools", ".", "product", "(", "*", "subdomains", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.optimize_connected_tree": [[185, 216], ["set", "list", "acquisition_optimizer.MPAcquisitionOptimizer.broadcast_mp_children", "sorted", "max", "acquisition_optimizer.MPAcquisitionOptimizer.clique_tree.neighbors", "frozenset().union", "len", "acquisition_optimizer.MPAcquisitionOptimizer.filter_cliques_G", "numpy.full", "acquisition_optimizer.MPAcquisitionOptimizer.optimize_discrete", "acquisition_optimizer.MPAcquisitionOptimizer.compute_message", "tree.degree", "frozenset"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.broadcast_mp_children", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.filter_cliques_G", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.optimize_discrete", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.compute_message"], ["", "def", "optimize_connected_tree", "(", "self", ",", "tree", ")", ":", "\n", "        ", "self", ".", "_computed_cliques_G", "=", "set", "(", ")", "\n", "\n", "# We unroll the first call for message_passing, by starting with the max degree node", "\n", "root", "=", "max", "(", "tree", ".", "degree", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]", "\n", "children", "=", "list", "(", "self", ".", "clique_tree", ".", "neighbors", "(", "root", ")", ")", "\n", "\n", "input_messages", "=", "self", ".", "broadcast_mp_children", "(", "root", ",", "children", ")", "\n", "\n", "intersection", "=", "root", "-", "frozenset", "(", ")", ".", "union", "(", "*", "children", ")", "\n", "marginal", "=", "root", "-", "intersection", "\n", "\n", "# Unpack", "\n", "marginal_var_order", "=", "sorted", "(", "marginal", ")", "\n", "\n", "if", "len", "(", "intersection", ")", "==", "0", ":", "\n", "# Special case where we need to optimize directly for the outstanding variables", "\n", "            ", "filtered_cliques_G", "=", "self", ".", "filter_cliques_G", "(", "root", ")", "\n", "\n", "new_X", "=", "np", ".", "full", "(", "(", "1", ",", "self", ".", "domain", ".", "dimension", ")", ",", "-", "1", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "fmin_overall", ",", "x_best_overall", "=", "self", ".", "optimize_discrete", "(", "new_X", ",", "children", ",", "marginal_var_order", ",", "input_messages", ",", "root", ",", "filtered_cliques_G", ")", "\n", "fmin_overall", "=", "fmin_overall", "[", "0", "]", "\n", "x_best_overall", "=", "x_best_overall", "[", "0", "]", "\n", "", "else", ":", "\n", "\n", "# We ignore the message, as we are at the root", "\n", "            ", "fmin_overall", ",", "x_best_overall", ",", "_", "=", "self", ".", "compute_message", "(", "intersection", ",", "children", ",", "marginal_var_order", ",", "input_messages", ",", "root", ")", "\n", "\n", "# Returns the element for which the value function is minimal (the min function selects with respect to the first value of the list)        ", "\n", "", "return", "fmin_overall", ",", "x_best_overall", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.broadcast_mp_children": [[217, 223], ["acquisition_optimizer.MPAcquisitionOptimizer.message_passing", "input_messages.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.message_passing"], ["", "def", "broadcast_mp_children", "(", "self", ",", "root", ",", "children", ")", ":", "\n", "        ", "input_messages", "=", "[", "]", "\n", "for", "child", "in", "children", ":", "\n", "            ", "child_messages", "=", "self", ".", "message_passing", "(", "child", ",", "root", ")", "\n", "input_messages", ".", "append", "(", "child_messages", ")", "\n", "", "return", "input_messages", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.compute_message": [[224, 247], ["acquisition_optimizer.MPAcquisitionOptimizer.filter_cliques_G", "sorted", "numpy.array", "numpy.full", "acquisition_optimizer.MPAcquisitionOptimizer.optimize_discrete", "numpy.argmin", "numpy.copy", "acquisition_optimizer.MPAcquisitionOptimizer._computed_cliques_G.update", "list", "tuple", "acquisition_optimizer.MPAcquisitionOptimizer.get_subspace", "zip"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.filter_cliques_G", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.optimize_discrete", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.update", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.get_subspace"], ["", "def", "compute_message", "(", "self", ",", "intersection", ",", "children", ",", "marginal_var_order", ",", "input_messages", ",", "root", ")", ":", "\n", "\n", "# Filter cliques for computational efficieny", "\n", "        ", "filtered_cliques_G", "=", "self", ".", "filter_cliques_G", "(", "root", ")", "\n", "\n", "# Unpack", "\n", "intersection_var_order", "=", "sorted", "(", "intersection", ")", "\n", "\n", "subspace_x", "=", "np", ".", "array", "(", "list", "(", "self", ".", "get_subspace", "(", "intersection_var_order", ")", ")", ")", "\n", "new_X", "=", "np", ".", "full", "(", "(", "subspace_x", ".", "shape", "[", "0", "]", ",", "self", ".", "domain", ".", "dimension", ")", ",", "-", "1", ",", "dtype", "=", "np", ".", "float", ")", "\n", "new_X", "[", ":", ",", "intersection_var_order", "]", "=", "subspace_x", "\n", "\n", "fmin_curr", ",", "x_best_curr", "=", "self", ".", "optimize_discrete", "(", "new_X", ",", "children", ",", "marginal_var_order", ",", "input_messages", ",", "root", ",", "filtered_cliques_G", ")", "\n", "\n", "# Compose the message", "\n", "output_message", "=", "{", "tuple", "(", "sub_x", ")", ":", "(", "fmin_ea", ",", "x_best_ea", ")", "for", "sub_x", ",", "fmin_ea", ",", "x_best_ea", "in", "zip", "(", "subspace_x", ",", "fmin_curr", ",", "x_best_curr", ")", "}", "\n", "\n", "_fmin_i", "=", "np", ".", "argmin", "(", "fmin_curr", ")", "\n", "fmin_overall", "=", "fmin_curr", "[", "_fmin_i", "]", "\n", "x_best_overall", "=", "np", ".", "copy", "(", "x_best_curr", "[", "_fmin_i", "]", ")", "\n", "\n", "self", ".", "_computed_cliques_G", ".", "update", "(", "filtered_cliques_G", ")", "\n", "return", "fmin_overall", ",", "x_best_overall", ",", "output_message", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.filter_cliques_G": [[248, 255], ["acquisition_optimizer.MPAcquisitionOptimizer.graph.subgraph", "networkx.find_cliques", "set", "map"], "methods", ["None"], ["", "def", "filter_cliques_G", "(", "self", ",", "root", ")", ":", "\n", "        ", "subgraph_G", "=", "self", ".", "graph", ".", "subgraph", "(", "root", ")", "\n", "cliques_G", "=", "nx", ".", "find_cliques", "(", "subgraph_G", ")", "\n", "# Slightly more efficient?", "\n", "# [ s for s in map(frozenset, cliques_G) if not s in self._computed_cliques_G ]", "\n", "# return set(map(tuple, map(sorted, cliques_G))) - self._computed_cliques_G", "\n", "return", "set", "(", "map", "(", "sorted_tuple", ",", "cliques_G", ")", ")", "-", "self", ".", "_computed_cliques_G", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.message_passing": [[256, 276], ["list", "list.remove", "acquisition_optimizer.MPAcquisitionOptimizer.broadcast_mp_children", "root.intersection", "sorted", "acquisition_optimizer.MPAcquisitionOptimizer.compute_message", "acquisition_optimizer.MPAcquisitionOptimizer.clique_tree.neighbors"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.broadcast_mp_children", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.compute_message"], ["", "def", "message_passing", "(", "self", ",", "root", ",", "parent", ")", ":", "\n", "# For all values of the variables in intersection(root, parent), returns", "\n", "# the minimum value of the acquisition function for the variables in root-parent,", "\n", "# and the associated x for the relevant variables (0 for the others).", "\n", "\n", "        ", "children", "=", "list", "(", "self", ".", "clique_tree", ".", "neighbors", "(", "root", ")", ")", "\n", "children", ".", "remove", "(", "parent", ")", "# note that neighbours would include parents", "\n", "\n", "input_messages", "=", "self", ".", "broadcast_mp_children", "(", "root", ",", "children", ")", "\n", "\n", "intersection", "=", "root", ".", "intersection", "(", "parent", ")", "# Notice that len(intersection) != 0", "\n", "marginal", "=", "root", "-", "intersection", "\n", "\n", "# Unpack        ", "\n", "marginal_var_order", "=", "sorted", "(", "marginal", ")", "\n", "\n", "# Quantities to return when optimizing the root", "\n", "fmin_overall", ",", "x_best_overall", ",", "output_message", "=", "self", ".", "compute_message", "(", "intersection", ",", "children", ",", "marginal_var_order", ",", "input_messages", ",", "root", ")", "\n", "\n", "return", "output_message", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.optimize_discrete": [[277, 304], ["numpy.full", "numpy.full", "acquisition_optimizer.MPAcquisitionOptimizer.get_subspace", "sorted", "acquisition_optimizer.MPAcquisitionOptimizer.load_messages", "acquisition_optimizer.MPAcquisitionOptimizer.compute_node_function", "root.intersection"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.get_subspace", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.load_messages", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.compute_node_function"], ["", "def", "optimize_discrete", "(", "self", ",", "new_X", ",", "children", ",", "marginal_var_order", ",", "input_messages", ",", "root", ",", "filtered_cliques_G", ")", ":", "\n", "        ", "fmin_X", "=", "np", ".", "full", "(", "new_X", ".", "shape", "[", "0", "]", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float", ")", "\n", "# fmin_X = []", "\n", "X_best", "=", "np", ".", "full", "(", "(", "new_X", ".", "shape", "[", "0", "]", ",", "self", ".", "domain", ".", "dimension", ")", ",", "np", ".", "inf", ",", "dtype", "=", "np", ".", "float", ")", "\n", "#x_best = None", "\n", "\n", "# Prepare the intersection_child_var_order", "\n", "# Unpack", "\n", "intersection_child_var_orders", "=", "[", "sorted", "(", "root", ".", "intersection", "(", "c", ")", ")", "for", "c", "in", "children", "]", "\n", "\n", "# Unpack", "\n", "for", "x_marginal", "in", "self", ".", "get_subspace", "(", "marginal_var_order", ")", ":", "\n", "\n", "            ", "new_X", "[", ":", ",", "marginal_var_order", "]", "=", "x_marginal", "\n", "\n", "f_X_marginal", "=", "self", ".", "load_messages", "(", "new_X", ",", "input_messages", ",", "intersection_child_var_orders", ")", "# also modifies new_x", "\n", "\n", "# 2- Compute overall function for this node and optimise it", "\n", "f_X_marginal", "+=", "self", ".", "compute_node_function", "(", "filtered_cliques_G", ",", "new_X", ")", "\n", "\n", "self", ".", "_total_cost", "+=", "new_X", ".", "shape", "[", "0", "]", "\n", "\n", "fmin_update_indices", "=", "fmin_X", ">", "f_X_marginal", "\n", "X_best", "[", "fmin_update_indices", "]", "=", "new_X", "[", "fmin_update_indices", "]", "\n", "fmin_X", "[", "fmin_update_indices", "]", "=", "f_X_marginal", "[", "fmin_update_indices", "]", "\n", "\n", "", "return", "fmin_X", ",", "X_best", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.load_messages": [[305, 319], ["numpy.zeros", "zip", "map", "zip", "map", "tuple"], "methods", ["None"], ["", "def", "load_messages", "(", "self", ",", "new_X", ",", "input_messages", ",", "intersection_child_var_orders", ")", ":", "\n", "# modify new_x with messages received from 'children' and returns the sum of all function values of the children nodes", "\n", "        ", "f_x_marginal", "=", "np", ".", "zeros", "(", "new_X", ".", "shape", "[", "0", "]", ")", "\n", "for", "m", ",", "intersection_child_var_order", "in", "zip", "(", "input_messages", ",", "intersection_child_var_orders", ")", ":", "\n", "\n", "            ", "marginal_x_child", "=", "new_X", "[", ":", ",", "intersection_child_var_order", "]", "\n", "fmin_child", ",", "best_x_child", "=", "map", "(", "np", ".", "array", ",", "zip", "(", "*", "map", "(", "lambda", "sub_x_child", ":", "m", "[", "tuple", "(", "sub_x_child", ")", "]", ",", "marginal_x_child", ")", ")", ")", "\n", "\n", "# Update the marginals and x", "\n", "# replace 0 values in new_x with ones in best_x_child", "\n", "f_x_marginal", "+=", "fmin_child", "\n", "new_X", "[", "best_x_child", "!=", "-", "1", "]", "=", "best_x_child", "[", "best_x_child", "!=", "-", "1", "]", "\n", "\n", "", "return", "f_x_marginal", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.compute_node_function": [[320, 333], ["numpy.zeros", "filtered_cliques_G.intersection", "acquisition_optimizer.MPAcquisitionOptimizer._f.keys"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys"], ["", "def", "compute_node_function", "(", "self", ",", "filtered_cliques_G", ",", "new_X", ")", ":", "\n", "        ", "fval", "=", "np", ".", "zeros", "(", "new_X", ".", "shape", "[", "0", "]", ")", "\n", "# For all cliques c of the subset of the triangulated clique ", "\n", "# if clique_G in self._f:", "\n", "for", "clique_G", "in", "filtered_cliques_G", ".", "intersection", "(", "self", ".", "_f", ".", "keys", "(", ")", ")", ":", "\n", "            ", "fval", "+=", "self", ".", "_f", "[", "clique_G", "]", "(", "new_X", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# Cases that will be excluded here, ", "\n", "# 1. cliques that does not have any computable edges", "\n", "# 2. cliques that are partially cut off", "\n", "# 3. cliques that are previous computed", "\n", "#print(clique)", "\n", "#assert(False)", "\n", "", "return", "fval", "\n", "", "def", "make_small_domains", "(", "self", ",", "domains", ",", "max_eval", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.make_small_domains": [[333, 350], ["len", "acquisition_optimizer.MPAcquisitionOptimizer.overflow", "acquisition_optimizer.MPAcquisitionOptimizer.triangulated_graph.subgraph", "networkx.find_cliques", "subgraph.nodes", "networkx.connected_components", "acquisition_optimizer.MPAcquisitionOptimizer.triangulated_graph.number_of_nodes", "len", "networkx.node_clique_number", "max", "acquisition_optimizer.MPAcquisitionOptimizer.choose_from", "subgraph.number_of_nodes", "int", "round"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.overflow", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.choose_from"], ["", "def", "make_small_domains", "(", "self", ",", "domains", ",", "max_eval", ")", ":", "\n", "        ", "small_domains", "=", "{", "}", "\n", "#disconnectedComp = list(nx.components.connected.connected_component_subgraphs(self.triangulated_graph))", "\n", "disconnectedComp", "=", "[", "self", ".", "triangulated_graph", ".", "subgraph", "(", "c", ")", "for", "c", "in", "nx", ".", "connected_components", "(", "self", ".", "triangulated_graph", ")", "]", "\n", "nDiscComp", "=", "len", "(", "disconnectedComp", ")", "\n", "max_eval", "+=", "self", ".", "overflow", "(", "domains", ",", "max_eval", ")", "\n", "for", "subgraph", "in", "disconnectedComp", ":", "\n", "            ", "N_subgraph", "=", "max_eval", "*", "subgraph", ".", "number_of_nodes", "(", ")", "/", "self", ".", "triangulated_graph", ".", "number_of_nodes", "(", ")", "# number of evaluations for this component", "\n", "n_clique_var", "=", "0", "\n", "for", "clique", "in", "nx", ".", "find_cliques", "(", "subgraph", ")", ":", "\n", "                ", "n_clique_var", "+=", "len", "(", "clique", ")", "\n", "", "for", "var", "in", "subgraph", ".", "nodes", "(", ")", ":", "\n", "                ", "clique_size", "=", "nx", ".", "node_clique_number", "(", "subgraph", ",", "var", ")", "\n", "N_clique", "=", "clique_size", "*", "N_subgraph", "/", "n_clique_var", "# number of evaluation for this clique", "\n", "N_var", "=", "max", "(", "int", "(", "round", "(", "N_clique", "**", "(", "1.0", "/", "clique_size", ")", ")", ")", ",", "2", ")", "\n", "small_domains", "[", "var", "]", "=", "self", ".", "choose_from", "(", "domains", "[", "var", "]", ",", "N_var", ")", "\n", "", "", "return", "small_domains", "\n", "", "def", "choose_from", "(", "self", ",", "domain", ",", "N_var", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.choose_from": [[350, 356], ["numpy.random.choice", "len", "numpy.array", "list"], "methods", ["None"], ["", "def", "choose_from", "(", "self", ",", "domain", ",", "N_var", ")", ":", "\n", "# randomly selects N_var DIFFERENT points", "\n", "        ", "if", "N_var", ">=", "len", "(", "domain", ")", ":", "\n", "            ", "return", "np", ".", "array", "(", "domain", ")", "\n", "# Cannot be replaced, items drawn must be unique", "\n", "", "return", "np", ".", "random", ".", "choice", "(", "list", "(", "domain", ")", ",", "N_var", ",", "replace", "=", "False", ")", "\n", "", "def", "overflow", "(", "self", ",", "domains", ",", "max_eval", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.overflow": [[356, 365], ["acquisition_optimizer.MPAcquisitionOptimizer.triangulated_graph.nodes", "len", "list", "len", "acquisition_optimizer.MPAcquisitionOptimizer.triangulated_graph.neighbors", "acquisition_optimizer.MPAcquisitionOptimizer.triangulated_graph.number_of_nodes"], "methods", ["None"], ["", "def", "overflow", "(", "self", ",", "domains", ",", "max_eval", ")", ":", "\n", "# only consider overflow for size 1 groups", "\n", "        ", "overflow", "=", "0", "\n", "for", "n", "in", "self", ".", "triangulated_graph", ".", "nodes", "(", ")", ":", "\n", "# TODO change to degree?", "\n", "# self.triangulated_graph.degree(n)", "\n", "            ", "if", "len", "(", "list", "(", "self", ".", "triangulated_graph", ".", "neighbors", "(", "n", ")", ")", ")", "==", "0", ":", "\n", "                ", "overflow", "+=", "len", "(", "domains", "[", "n", "]", ")", "-", "max_eval", "/", "self", ".", "triangulated_graph", ".", "number_of_nodes", "(", ")", "\n", "", "", "return", "overflow", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.MPAcquisitionOptimizer.init_graph_helpers": [[366, 378], ["set", "graph_utils.make_chordal", "graph_utils.build_clique_graph", "networkx.minimum_spanning_tree", "frozenset", "acquisition_optimizer.MPAcquisitionOptimizer.graph_function.graph.edges"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.graph_utils.make_chordal", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.graph_utils.build_clique_graph"], ["", "def", "init_graph_helpers", "(", "self", ")", ":", "\n", "\n", "# Here we will decide if we want to recalculate the helper graphs", "\n", "        ", "edges_set", "=", "set", "(", "[", "frozenset", "(", "x", ")", "for", "x", "in", "self", ".", "graph_function", ".", "graph", ".", "edges", "(", ")", "]", ")", "\n", "if", "self", ".", "edges_set", "!=", "None", "and", "self", ".", "edges_set", "==", "edges_set", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "graph", "=", "self", ".", "graph_function", ".", "graph", "\n", "self", ".", "edges_set", "=", "edges_set", "\n", "self", ".", "triangulated_graph", "=", "make_chordal", "(", "self", ".", "graph", ")", "\n", "self", ".", "clique_graph", "=", "build_clique_graph", "(", "self", ".", "graph", ")", "\n", "self", ".", "clique_tree", "=", "nx", ".", "minimum_spanning_tree", "(", "self", ".", "clique_graph", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.acquisition_optimizer.chunks": [[13, 17], ["range", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["def", "chunks", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.KernelWrap.__init__": [[26, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "data", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "active_dims", "=", "kernel", ".", "active_dims", "\n", "self", ".", "data", "=", "data", "\n", "", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.KernelWrap.__eq__": [[30, 32], ["function_optimizer.KernelWrap.__hash__", "other.__hash__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.KernelWrap.__hash__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.KernelWrap.__hash__"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "(", "self", ".", "__hash__", "(", ")", "==", "other", ".", "__hash__", "(", ")", ")", "\n", "", "def", "__hash__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.KernelWrap.__hash__": [[32, 39], ["hash", "type", "tuple", "id", "tuple"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.id"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "\n", "        ", "ls_wrap", "=", "self", ".", "kernel", ".", "lengthscale", "\n", "if", "type", "(", "self", ".", "kernel", ".", "lengthscale", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "ls_wrap", "=", "tuple", "(", "self", ".", "kernel", ".", "lengthscale", ")", "\n", "\n", "", "return", "hash", "(", "(", "id", "(", "self", ".", "kernel", ")", ",", "tuple", "(", "self", ".", "kernel", ".", "active_dims", ")", ",", "self", ".", "kernel", ".", "variance", ",", "ls_wrap", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.KernelWrap.__call__": [[40, 42], ["function_optimizer.KernelWrap.kernel"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "self", ".", "kernel", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOptimizer.__init__": [[63, 81], ["function_optimizer.Context"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "graphSamplingNumIter", ",", "lengthscaleNumIter", ",", "cycles", ",", "fully_optimize_lengthscales", ",", "p", ",", "M", ",", "max_group_size", ",", "sigma2", ",", "opt_restart", ",", "param_exploration", ")", ":", "\n", "        ", "self", ".", "graphSamplingNumIter", "=", "graphSamplingNumIter", "\n", "\n", "self", ".", "cycles", "=", "cycles", "\n", "self", ".", "fully_optimize_lengthscales", "=", "fully_optimize_lengthscales", "\n", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "max_group_size", "=", "max_group_size", "\n", "#self.sigma2 = 1e-8", "\n", "self", ".", "sigma2", "=", "sigma2", "+", "1e-8", "\n", "\n", "assert", "(", "self", ".", "M", "!=", "0", ")", "\n", "assert", "(", "self", ".", "max_group_size", "!=", "0", ")", "\n", "self", ".", "context", "=", "Context", "(", "self", ".", "fully_optimize_lengthscales", ",", "self", ".", "p", ",", "self", ".", "M", ",", "self", ".", "max_group_size", ",", "self", ".", "sigma2", ",", "self", ".", "cycles", ",", "lengthscaleNumIter", ",", "opt_restart", ",", "param_exploration", ")", "\n", "\n", "# TODO some hack", "\n", "self", ".", "my_learnt_graph_iter_count", "=", "0", "\n", "", "def", "optimize", "(", "self", ",", "X", ",", "Y_vect", ",", "graph_function", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOptimizer.optimize": [[81, 137], ["function_optimizer.GraphOptimizer.make_graph", "networkx.draw", "matplotlib.savefig", "matplotlib.clf", "logging.info", "graph_function._make_kernels", "cached_apply_X.cache_clear", "function_optimizer.GraphOptimizer._compute_dataLogLikelihood", "function_optimizer.GraphOptimizer._optimize_hypotheses", "numpy.array", "range", "max", "common.Config().learnt_graphs_file", "graph_function.make_fn_decompositions", "function_optimizer.GraphOptimizer.HypothesisType", "function_optimizer.Data", "numpy.random.normal", "numpy.array", "cached_apply_X.cache_clear", "function_optimizer.GraphOptimizer._compute_dataLogLikelihood", "function_optimizer.GraphOptimizer._optimize_hypotheses", "function_optimizer.GraphOptimizer.make_graph", "logging.info", "hypothesis_candidates.append", "matplotlib.get_cmap", "function_optimizer.GraphOptimizer.make_graph.edges", "list", "function_optimizer.GraphOptimizer.HypothesisType", "function_optimizer.Data", "common.Config", "map", "function_optimizer.GraphOptimizer.make_graph.edges"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._compute_dataLogLikelihood", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree._optimize_hypotheses", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.learnt_graphs_file", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_fn_decompositions", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree.HypothesisType", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._compute_dataLogLikelihood", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree._optimize_hypotheses", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree.HypothesisType"], ["", "def", "optimize", "(", "self", ",", "X", ",", "Y_vect", ",", "graph_function", ")", ":", "\n", "\n", "        ", "if", "self", ".", "context", ".", "opt_restart", "==", "None", ":", "\n", "# Normal mode", "\n", "            ", "cached_apply_X", ".", "cache_clear", "(", ")", "\n", "# gen_candidates=20 ??", "\n", "h", "=", "self", ".", "HypothesisType", "(", ")", "(", "graph_function", ",", "self", ".", "context", ",", "Data", "(", "X", ",", "Y_vect", ")", ")", "\n", "#print(h.dimensional_parameters)", "\n", "#h.evaluate()", "\n", "h", ".", "likelihood", "=", "h", ".", "_compute_dataLogLikelihood", "(", "groupSize", "=", "-", "1", ",", "alpha", "=", "-", "1", ")", "\n", "#h.optimize_dimensional_parameters(self.context.lengthscaleNumIter)", "\n", "h", "=", "self", ".", "_optimize_hypotheses", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "dimensional_parameters", "=", "np", ".", "array", "(", "graph_function", ".", "dimensional_parameters", ")", "\n", "\n", "hypothesis_candidates", "=", "[", "]", "\n", "# Beast mode, opt restarts", "\n", "for", "opt_i", "in", "range", "(", "self", ".", "context", ".", "opt_restart", ")", ":", "\n", "                ", "_perturbed_dim_param", "=", "np", ".", "random", ".", "normal", "(", "dimensional_parameters", ",", "dimensional_parameters", "*", "self", ".", "context", ".", "param_exploration", ")", "\n", "_perturbed_dim_param", "=", "np", ".", "array", "(", "list", "(", "map", "(", "self", ".", "context", ".", "kern_respect_bounds", ",", "_perturbed_dim_param", ")", ")", ")", "\n", "#print(_perturbed_dim_param)", "\n", "graph_function", ".", "dimensional_parameters", "=", "_perturbed_dim_param", "\n", "\n", "# Normal mode", "\n", "cached_apply_X", ".", "cache_clear", "(", ")", "\n", "# gen_candidates=20 ??", "\n", "h", "=", "self", ".", "HypothesisType", "(", ")", "(", "graph_function", ",", "self", ".", "context", ",", "Data", "(", "X", ",", "Y_vect", ")", ")", "\n", "#print(h.dimensional_parameters)", "\n", "#h.evaluate()", "\n", "h", ".", "likelihood", "=", "h", ".", "_compute_dataLogLikelihood", "(", "groupSize", "=", "-", "1", ",", "alpha", "=", "-", "1", ")", "\n", "#h.optimize_dimensional_parameters(self.context.lengthscaleNumIter)", "\n", "h", "=", "self", ".", "_optimize_hypotheses", "(", "h", ")", "\n", "\n", "best_graph", "=", "h", ".", "make_graph", "(", ")", "\n", "logging", ".", "info", "(", "\"Candidate graph : {} - {}\"", ".", "format", "(", "h", ".", "likelihood", ",", "best_graph", ".", "edges", "(", ")", ")", ")", "\n", "\n", "hypothesis_candidates", ".", "append", "(", "h", ")", "\n", "\n", "\n", "# Pick the best", "\n", "", "h", "=", "max", "(", "hypothesis_candidates", ",", "key", "=", "lambda", "h", ":", "h", ".", "likelihood", ")", "\n", "#print(h.likelihood)", "\n", "\n", "", "best_graph", "=", "h", ".", "make_graph", "(", ")", "\n", "best_dim_params", "=", "h", ".", "dimensional_parameters", "\n", "\n", "nx", ".", "draw", "(", "best_graph", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", ",", "with_labels", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "Config", "(", ")", ".", "learnt_graphs_file", "(", "'{:05d}.png'", ".", "format", "(", "self", ".", "my_learnt_graph_iter_count", ")", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "self", ".", "my_learnt_graph_iter_count", "+=", "1", "\n", "logging", ".", "info", "(", "\"New graph : {}\"", ".", "format", "(", "best_graph", ".", "edges", "(", ")", ")", ")", "\n", "\n", "# Perform the update", "\n", "graph_function", ".", "graph", "=", "best_graph", "\n", "graph_function", ".", "dimensional_parameters", "=", "best_dim_params", "\n", "graph_function", ".", "kernels", "=", "graph_function", ".", "_make_kernels", "(", "best_dim_params", ",", "graph_function", ".", "make_fn_decompositions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOptimizer.optimize_parameters": [[139, 179], ["graph_function._make_kernels", "max._compute_dataLogLikelihood", "max.optimize_dimensional_parameters", "numpy.array", "range", "max", "graph_function.make_fn_decompositions", "function_optimizer.GraphOptimizer.HypothesisType", "function_optimizer.Data", "numpy.random.normal", "numpy.array", "max._compute_dataLogLikelihood", "max.optimize_dimensional_parameters", "hypothesis_candidates.append", "list", "function_optimizer.GraphOptimizer.HypothesisType", "function_optimizer.Data", "map"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._compute_dataLogLikelihood", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_parameters", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_fn_decompositions", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree.HypothesisType", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._compute_dataLogLikelihood", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_parameters", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree.HypothesisType"], ["", "def", "optimize_parameters", "(", "self", ",", "X", ",", "Y_vect", ",", "graph_function", ")", ":", "\n", "\n", "        ", "if", "self", ".", "context", ".", "opt_restart", "==", "None", ":", "\n", "# Normal mode", "\n", "            ", "h", "=", "self", ".", "HypothesisType", "(", ")", "(", "graph_function", ",", "self", ".", "context", ",", "Data", "(", "X", ",", "Y_vect", ")", ")", "\n", "#print(h.dimensional_parameters)", "\n", "#h.evaluate()", "\n", "h", ".", "likelihood", "=", "h", ".", "_compute_dataLogLikelihood", "(", "groupSize", "=", "-", "1", ",", "alpha", "=", "-", "1", ")", "\n", "h", ".", "optimize_dimensional_parameters", "(", "self", ".", "context", ".", "lengthscaleNumIter", ")", "\n", "", "else", ":", "\n", "            ", "dimensional_parameters", "=", "np", ".", "array", "(", "graph_function", ".", "dimensional_parameters", ")", "\n", "\n", "hypothesis_candidates", "=", "[", "]", "\n", "# Beast mode, opt restarts", "\n", "for", "opt_i", "in", "range", "(", "self", ".", "context", ".", "opt_restart", ")", ":", "\n", "\n", "                ", "_perturbed_dim_param", "=", "np", ".", "random", ".", "normal", "(", "dimensional_parameters", ",", "dimensional_parameters", "*", "self", ".", "context", ".", "param_exploration", ")", "\n", "_perturbed_dim_param", "=", "np", ".", "array", "(", "list", "(", "map", "(", "self", ".", "context", ".", "kern_respect_bounds", ",", "_perturbed_dim_param", ")", ")", ")", "\n", "#print(_perturbed_dim_param)", "\n", "graph_function", ".", "dimensional_parameters", "=", "_perturbed_dim_param", "\n", "\n", "# Normal mode", "\n", "h", "=", "self", ".", "HypothesisType", "(", ")", "(", "graph_function", ",", "self", ".", "context", ",", "Data", "(", "X", ",", "Y_vect", ")", ")", "\n", "#print(h.dimensional_parameters)", "\n", "#h.evaluate()", "\n", "h", ".", "likelihood", "=", "h", ".", "_compute_dataLogLikelihood", "(", "groupSize", "=", "-", "1", ",", "alpha", "=", "-", "1", ")", "\n", "h", ".", "optimize_dimensional_parameters", "(", "self", ".", "context", ".", "lengthscaleNumIter", ")", "\n", "#print(h.likelihood)", "\n", "\n", "hypothesis_candidates", ".", "append", "(", "h", ")", "\n", "\n", "# Pick the best", "\n", "", "h", "=", "max", "(", "hypothesis_candidates", ",", "key", "=", "lambda", "h", ":", "h", ".", "likelihood", ")", "\n", "#print(h.likelihood)", "\n", "\n", "", "best_dim_params", "=", "h", ".", "dimensional_parameters", "\n", "\n", "# Perform the update", "\n", "graph_function", ".", "dimensional_parameters", "=", "best_dim_params", "\n", "graph_function", ".", "kernels", "=", "graph_function", ".", "_make_kernels", "(", "best_dim_params", ",", "graph_function", ".", "make_fn_decompositions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOptimizer._optimize_hypotheses": [[180, 182], ["None"], "methods", ["None"], ["", "def", "_optimize_hypotheses", "(", "self", ",", "hypothesis_graph", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "HypothesisType", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOptimizer.HypothesisType": [[182, 184], ["None"], "methods", ["None"], ["", "def", "HypothesisType", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Context.__init__": [[186, 221], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fully_optimize_lengthscales", ",", "p", ",", "M", ",", "max_group_size", ",", "sigma2", ",", "cycles", ",", "lengthscaleNumIter", ",", "opt_restart", ",", "param_exploration", ")", ":", "\n", "# Decide if should optimize lengthscale", "\n", "        ", "self", ".", "fully_optimize_lengthscales", "=", "fully_optimize_lengthscales", "\n", "\n", "# Prior knowledge of getting an edge", "\n", "self", ".", "p", "=", "p", "\n", "\n", "# The number of clusters", "\n", "self", ".", "M", "=", "M", "\n", "# The maximum size of each cluster", "\n", "self", ".", "max_group_size", "=", "max_group_size", "\n", "\n", "# Stability parameter for data likelihood", "\n", "self", ".", "sigma2", "=", "sigma2", "\n", "\n", "# Assume that there are cycles for prior", "\n", "self", ".", "cycles", "=", "cycles", "\n", "\n", "self", ".", "param_exploration", "=", "param_exploration", "\n", "\n", "self", ".", "gen_candidates", "=", "20", "\n", "\n", "# Smallest possible value for ls", "\n", "self", ".", "ls_min_limit", "=", "1e-4", "\n", "# This is essentially sqrt(0.1), we set the var limit to be under 0.1", "\n", "self", ".", "var_min_limit", "=", "0.31622776601683794", "\n", "self", ".", "var_max_limit", "=", "1e5", "\n", "\n", "# Number of samples taken for the parameters", "\n", "self", ".", "lengthscaleNumIter", "=", "lengthscaleNumIter", "\n", "\n", "self", ".", "ln_limits", "=", "(", "1e-2", ",", "1e5", ")", "\n", "self", ".", "var_limits", "=", "(", "0.31622776601683794", ",", "1e5", ")", "\n", "\n", "self", ".", "opt_restart", "=", "opt_restart", "\n", "", "def", "kern_respect_bounds", "(", "self", ",", "param", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Context.kern_respect_bounds": [[221, 225], ["min", "min", "max", "max"], "methods", ["None"], ["", "def", "kern_respect_bounds", "(", "self", ",", "param", ")", ":", "\n", "        ", "ls", ",", "var", "=", "param", "\n", "_pp", "=", "(", "min", "(", "max", "(", "self", ".", "ln_limits", "[", "0", "]", ",", "ls", ")", ",", "self", ".", "ln_limits", "[", "1", "]", ")", ",", "min", "(", "max", "(", "self", ".", "var_limits", "[", "0", "]", ",", "var", ")", ",", "self", ".", "var_limits", "[", "1", "]", ")", ")", "\n", "return", "_pp", "\n", "", "", "class", "Data", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Data.__init__": [[226, 232], ["function_optimizer.Data.Y.reshape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "Y", "\n", "self", ".", "dim", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "n", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "Y_r", "=", "self", ".", "Y", ".", "reshape", "(", "self", ".", "n", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.__init__": [[238, 251], ["numpy.array", "function_optimizer.Hypothesis._make_kernels", "graph_function.make_fn_decompositions"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_fn_decompositions"], ["    ", "def", "__init__", "(", "self", ",", "graph_function", ",", "context", ",", "data", ")", ":", "\n", "\n", "        ", "self", ".", "ls_wrap", "=", "graph_function", ".", "ls_wrap", "\n", "self", ".", "scipy_opt", "=", "graph_function", ".", "scipy_opt", "\n", "\n", "self", ".", "dimensional_parameters", "=", "np", ".", "array", "(", "graph_function", ".", "dimensional_parameters", ")", "\n", "\n", "self", ".", "likelihood", "=", "0.", "\n", "self", ".", "context", "=", "context", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "_sk_kernel_class", "=", "graph_function", ".", "_sk_kernel_class", "\n", "self", ".", "_sk_kwargs", "=", "graph_function", ".", "_sk_kwargs", "\n", "self", ".", "kernels", "=", "self", ".", "_make_kernels", "(", "self", ".", "dimensional_parameters", ",", "graph_function", ".", "make_fn_decompositions", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.has_cycle": [[252, 254], ["len", "networkx.cycle_basis", "function_optimizer.Hypothesis.make_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph"], ["", "def", "has_cycle", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "nx", ".", "cycle_basis", "(", "self", ".", "make_graph", "(", ")", ")", ")", "==", "0", "\n", "", "def", "optimize_dimensional_parameters", "(", "self", ",", "dim_n_iter", ",", "groupSize", "=", "-", "1", ",", "alpha", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_parameters": [[254, 257], ["function_optimizer.Hypothesis.optimize_dimensional_grads"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_grads"], ["", "def", "optimize_dimensional_parameters", "(", "self", ",", "dim_n_iter", ",", "groupSize", "=", "-", "1", ",", "alpha", "=", "1", ")", ":", "\n", "#return self.optimize_dimensional_old(dim_n_iter, groupSize, alpha)", "\n", "        ", "return", "self", ".", "optimize_dimensional_grads", "(", "dim_n_iter", ",", "groupSize", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_grads": [[258, 308], ["logging.info", "cached_apply_X.cache_clear", "numpy.log10", "int", "map", "numpy.concatenate", "len", "function_optimizer.Hypothesis.make_fn_decompositions_sorted", "function_optimizer.Hypothesis.scipy_opt", "numpy.array", "numpy.allclose", "function_optimizer.Hypothesis._update_kernels", "function_optimizer.Hypothesis._compute_dataLogLikelihood", "cached_apply_X.cache_info", "iters_decay", "zip", "function_optimizer.Hypothesis.phi_f_df_cholesky_sk", "list", "numpy.isclose", "numpy.exp", "map", "zip", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction._update_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._compute_dataLogLikelihood", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.phi_f_df_cholesky_sk"], ["", "def", "optimize_dimensional_grads", "(", "self", ",", "dim_n_iter", ",", "groupSize", "=", "-", "1", ",", "alpha", "=", "1", ")", ":", "\n", "\n", "        ", "logging", ".", "info", "(", "cached_apply_X", ".", "cache_info", "(", ")", ")", "\n", "cached_apply_X", ".", "cache_clear", "(", ")", "\n", "\n", "#_max_val = np.min(dim_n_iter * self.data.dim * self.context.param_n_iter,1000)", "\n", "_max_val", "=", "dim_n_iter", "*", "self", ".", "data", ".", "dim", "\n", "target_n", "=", "np", ".", "log10", "(", "_max_val", ")", "\n", "iters_decay", "=", "lambda", "t", ":", "1e0", "*", "np", ".", "exp", "(", "(", "target_n", "-", "0", ")", "/", "1000.0", "*", "np", ".", "log", "(", "10", ")", "*", "t", ")", "\n", "iters", "=", "int", "(", "iters_decay", "(", "self", ".", "data", ".", "n", ")", ")", "\n", "\n", "#print(self.dimensional_parameters)", "\n", "dim_ls", ",", "dim_var", "=", "map", "(", "np", ".", "array", ",", "zip", "(", "*", "self", ".", "dimensional_parameters", ")", ")", "\n", "dim_param0", "=", "np", ".", "concatenate", "(", "(", "dim_ls", ",", "dim_var", ")", ")", "\n", "# One lengthscale per dimension", "\n", "dim", "=", "len", "(", "self", ".", "dimensional_parameters", ")", "\n", "\n", "fn_decomps", "=", "self", ".", "make_fn_decompositions_sorted", "(", ")", "\n", "\n", "# There are accuracy problems with lengthscale < 1e-2 ", "\n", "# bounds = [(1e-2, 1e5)] * dim + [(1e-1, 1e5)] * dim", "\n", "bounds", "=", "[", "(", "1e-2", ",", "1e5", ")", "]", "*", "dim", "+", "[", "(", "0.31622776601683794", ",", "1e5", ")", "]", "*", "dim", "\n", "\n", "def", "dim_param_obj_min_f_df", "(", "dim_param", ")", ":", "\n", "            ", "f", ",", "df", "=", "self", ".", "phi_f_df_cholesky_sk", "(", "dim_param", "[", ":", "dim", "]", ",", "dim_param", "[", "dim", ":", "]", ",", "self", ".", "kernels", ")", "\n", "return", "-", "f", ",", "-", "df", "\n", "\n", "# Cannot use the other 2 params as they differ algo to algo", "\n", "", "opt_x", ",", "_", ",", "_", "=", "self", ".", "scipy_opt", "(", "dim_param_obj_min_f_df", ",", "approx_grad", "=", "False", ",", "x0", "=", "dim_param0", ",", "bounds", "=", "bounds", ",", "disp", "=", "0", ",", "maxfun", "=", "iters", ")", "\n", "\n", "dim_ls", "=", "opt_x", "[", ":", "dim", "]", "\n", "dim_var", "=", "opt_x", "[", "dim", ":", "]", "\n", "\n", "# Check if the dim param changed ", "\n", "_dimensional_parameters", "=", "np", ".", "array", "(", "list", "(", "map", "(", "np", ".", "array", ",", "zip", "(", "dim_ls", ",", "dim_var", ")", ")", ")", ")", "\n", "if", "np", ".", "allclose", "(", "_dimensional_parameters", ",", "self", ".", "dimensional_parameters", ")", ":", "\n", "            ", "return", "self", ".", "likelihood", "\n", "\n", "", "self", ".", "dimensional_parameters", "=", "_dimensional_parameters", "\n", "self", ".", "_update_kernels", "(", "dim_ls", ",", "dim_var", ",", "self", ".", "kernels", ")", "\n", "\n", "# Include Groupsize, need to recompute the likelihood", "\n", "updated_likelihood", "=", "self", ".", "_compute_dataLogLikelihood", "(", "groupSize", ",", "alpha", ")", "\n", "#print(updated_likelihood, -opt_f)", "\n", "\n", "# Sanity check that it improved.", "\n", "if", "not", "np", ".", "isclose", "(", "updated_likelihood", ",", "self", ".", "likelihood", ")", ":", "\n", "            ", "assert", "(", "updated_likelihood", ">", "self", ".", "likelihood", ")", "\n", "", "self", ".", "likelihood", "=", "updated_likelihood", "\n", "return", "self", ".", "likelihood", "\n", "#return self._compute_dataLogLikelihood(groupSize, alpha)", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.apply_X": [[310, 312], ["function_optimizer.cached_apply_X", "function_optimizer.KernelWrap"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.cached_apply_X"], ["", "def", "apply_X", "(", "self", ",", "kernel", ")", ":", "\n", "        ", "return", "cached_apply_X", "(", "KernelWrap", "(", "kernel", ",", "self", ".", "data", ")", ")", "\n", "", "def", "_compute_dataLogLikelihood", "(", "self", ",", "groupSize", ",", "alpha", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._compute_dataLogLikelihood": [[312, 326], ["functools.reduce", "function_optimizer.Hypothesis.phi_cholesky", "map", "numpy.log", "function_optimizer.Hypothesis.kernels.values"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.phi_cholesky", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values"], ["", "def", "_compute_dataLogLikelihood", "(", "self", ",", "groupSize", ",", "alpha", ")", ":", "\n", "\n", "#K = reduce(operator.add, [ kernel.K(self.data.X) for kernel in kernels ])", "\n", "        ", "K", "=", "reduce", "(", "np", ".", "add", ",", "map", "(", "self", ".", "apply_X", ",", "self", ".", "kernels", ".", "values", "(", ")", ")", ")", "\n", "\n", "#logp = self.phi_full(self.data.X, self.data.Y, K)", "\n", "logp", "=", "self", ".", "phi_cholesky", "(", "self", ".", "data", ".", "X", ",", "self", ".", "data", ".", "Y", ",", "K", ")", "\n", "#assert(np.allclose(logp, _logp))", "\n", "\n", "# This is reserved for non overlap", "\n", "if", "groupSize", ">=", "0", ":", "# in the case of Gibbs Sampling", "\n", "            ", "logp", "+=", "np", ".", "log", "(", "groupSize", "+", "alpha", ")", "\n", "\n", "", "return", "logp", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.phi_f_df_cholesky_sk": [[327, 392], ["numpy.zeros", "kernels.items", "numpy.fill_diagonal", "numpy.linalg.cholesky", "numpy.linalg.inv", "numpy.dot", "scipy.linalg.cho_solve", "numpy.zeros", "zip", "list", "function_optimizer.Hypothesis.ls_wrap", "numpy.sqrt", "k.set_params", "k", "dK_dparams.append", "numpy.sum", "kernels.values", "numpy.einsum", "sum", "numpy.zeros.diagonal", "numpy.log", "numpy.log", "numpy.dot", "numpy.einsum", "numpy.linalg.cholesky.diagonal"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values"], ["", "def", "phi_f_df_cholesky_sk", "(", "self", ",", "dim_ls", ",", "dim_var", ",", "kernels", ")", ":", "\n", "\n", "# Noise inside", "\n", "        ", "noise_var", "=", "0", "\n", "#likelihood = likelihoods.Gaussian(variance=noise_var)", "\n", "\n", "X", "=", "self", ".", "data", ".", "X", "\n", "y", "=", "self", ".", "data", ".", "Y", "\n", "\n", "Ky", "=", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "dK_dparams", "=", "[", "]", "\n", "for", "var_order", ",", "k", "in", "kernels", ".", "items", "(", ")", ":", "\n", "\n", "            ", "_var_order", "=", "list", "(", "var_order", ")", "\n", "ls", "=", "self", ".", "ls_wrap", "(", "dim_ls", "[", "_var_order", "]", ")", "\n", "_dim_var", "=", "dim_var", "[", "_var_order", "]", "\n", "variance", "=", "np", ".", "sqrt", "(", "sum", "(", "_dim_var", "**", "2", ")", ")", "\n", "\n", "k", ".", "_dim_var", "=", "_dim_var", "\n", "k", ".", "set_params", "(", "k1__constant_value", "=", "variance", ",", "k2__length_scale", "=", "ls", ")", "\n", "k", ".", "variance", "=", "variance", "\n", "k", ".", "lengthscale", "=", "ls", "\n", "\n", "K_part", ",", "dK_dparam", "=", "k", "(", "X", "[", ":", ",", "k", ".", "active_dims", "]", ",", "eval_gradient", "=", "True", ")", "\n", "Ky", "+=", "K_part", "\n", "dK_dparams", ".", "append", "(", "dK_dparam", ")", "\n", "\n", "\n", "", "np", ".", "fill_diagonal", "(", "Ky", ",", "Ky", ".", "diagonal", "(", ")", "+", "self", ".", "context", ".", "sigma2", ")", "\n", "\n", "LW", "=", "np", ".", "linalg", ".", "cholesky", "(", "Ky", ")", "\n", "c", "=", "np", ".", "linalg", ".", "inv", "(", "LW", ")", "\n", "Wi", "=", "np", ".", "dot", "(", "c", ".", "T", ",", "c", ")", "\n", "\n", "W_logdet", "=", "2", "*", "np", ".", "sum", "(", "np", ".", "log", "(", "LW", ".", "diagonal", "(", ")", ")", ")", "\n", "\n", "alpha", "=", "scipy", ".", "linalg", ".", "cho_solve", "(", "(", "LW", ",", "True", ")", ",", "y", ")", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "log_2_pi", "=", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "*", "n", "/", "2.0", "\n", "\n", "log_marginal", "=", "-", "0.5", "*", "(", "W_logdet", "+", "np", ".", "dot", "(", "y", ",", "alpha", ")", ")", "\n", "\n", "dL_dK", "=", "0.5", "*", "(", "np", ".", "einsum", "(", "'i,k->ik'", ",", "alpha", ",", "alpha", ",", "dtype", "=", "np", ".", "float64", ")", "-", "Wi", ")", "\n", "\n", "grad_dim", "=", "np", ".", "zeros", "(", "self", ".", "data", ".", "dim", "*", "2", ")", "\n", "grad_dim_ls", "=", "grad_dim", "[", ":", "self", ".", "data", ".", "dim", "]", "\n", "grad_dim_var", "=", "grad_dim", "[", "self", ".", "data", ".", "dim", ":", "]", "\n", "\n", "for", "k", ",", "dK_dparam", "in", "zip", "(", "kernels", ".", "values", "(", ")", ",", "dK_dparams", ")", ":", "\n", "\n", "            ", "dL_dparam", "=", "np", ".", "einsum", "(", "'ij,jik->k'", ",", "dL_dK", ",", "dK_dparam", ")", "\n", "\n", "dL_dsigma", "=", "dL_dparam", "[", "0", "]", "*", "k", ".", "_dim_var", "/", "k", ".", "variance", "**", "2", "\n", "grad_dim_var", "[", "k", ".", "active_dims", "]", "+=", "dL_dsigma", "\n", "\n", "dL_dls", "=", "dL_dparam", "[", "1", ":", "]", "/", "k", ".", "lengthscale", "\n", "grad_dim_ls", "[", "k", ".", "active_dims", "]", "+=", "dL_dls", "\n", "\n", "# Fix Strange problems by numerical instability", "\n", "", "if", "log_marginal", ">", "log_2_pi", ":", "\n", "            ", "log_marginal", "=", "log_2_pi", "\n", "# Cannot afford to increase the L anymore, so make the gradient really small and in the opposite dir", "\n", "grad_dim", "=", "grad_dim", "*", "-", "1e-8", "\n", "\n", "", "return", "log_marginal", ",", "grad_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.phi_cholesky": [[394, 426], ["numpy.fill_diagonal", "numpy.linalg.cholesky", "scipy.linalg.cho_solve", "numpy.sum", "Ky.diagonal", "numpy.log", "numpy.log", "numpy.dot", "numpy.linalg.cholesky.diagonal"], "methods", ["None"], ["", "def", "phi_cholesky", "(", "self", ",", "X", ",", "y", ",", "Ky", ")", ":", "\n", "\n", "# Ky = K + sigma^2 I", "\n", "        ", "np", ".", "fill_diagonal", "(", "Ky", ",", "Ky", ".", "diagonal", "(", ")", "+", "self", ".", "context", ".", "sigma2", ")", "\n", "\n", "# We decompose the matrix for constant use", "\n", "LW", "=", "np", ".", "linalg", ".", "cholesky", "(", "Ky", ")", "\n", "\n", "# We skip the computation of the inverse and solve for alpha", "\n", "# alpha = inv(Ky) * y", "\n", "alpha", "=", "scipy", ".", "linalg", ".", "cho_solve", "(", "(", "LW", ",", "True", ")", ",", "y", ")", "\n", "\n", "# Determinant using choleskey", "\n", "# W_logdet = log|Ky|", "\n", "# log(det(Ky)) = log(det(LW) * det(LW_t)) = 2 log(det(L)) = 2 log(Product(diag(L))) = 2 sum( log (dia(L)) )", "\n", "W_logdet", "=", "2", "*", "np", ".", "sum", "(", "np", ".", "log", "(", "LW", ".", "diagonal", "(", ")", ")", ")", "\n", "\n", "# term3 - ignore to save computation", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "log_2_pi", "=", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "*", "n", "/", "2.0", "\n", "\n", "# finally compute term1 + term2 w/o term3", "\n", "# We note that term3 is not useful as its the same throughout.", "\n", "log_marginal", "=", "-", "0.5", "*", "(", "np", ".", "dot", "(", "y", ",", "alpha", ")", "+", "W_logdet", ")", "\n", "#assert(log_marginal <= log_2_pi)", "\n", "#log_marginal = -0.5*(np.linalg.dot(y, alpha) + W_logdet + log_2_pi)", "\n", "\n", "# Fix Strange problems by numerical instability", "\n", "if", "log_marginal", ">", "log_2_pi", ":", "\n", "            ", "log_marginal", "=", "log_2_pi", "\n", "\n", "", "return", "log_marginal", "\n", "# Decide if optimizing lengthscale is needed", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.evaluate": [[427, 434], ["function_optimizer.Hypothesis.optimize_dimensional_parameters", "function_optimizer.Hypothesis._compute_dataLogLikelihood"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_parameters", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._compute_dataLogLikelihood"], ["", "def", "evaluate", "(", "self", ",", "groupSize", "=", "-", "1", ",", "alpha", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "context", ".", "fully_optimize_lengthscales", ":", "\n", "            ", "self", ".", "likelihood", "=", "self", ".", "optimize_dimensional_parameters", "(", "self", ".", "context", ".", "lengthscaleNumIter", ",", "groupSize", ",", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "likelihood", "=", "self", ".", "_compute_dataLogLikelihood", "(", "groupSize", ",", "alpha", ")", "\n", "\n", "", "return", "self", ".", "likelihood", "\n", "", "def", "dimension", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.dimension": [[434, 436], ["len"], "methods", ["None"], ["", "def", "dimension", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dimensional_parameters", ")", "\n", "", "def", "make_fn_decompositions_sorted", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.make_fn_decompositions_sorted": [[436, 438], ["None"], "methods", ["None"], ["", "def", "make_fn_decompositions_sorted", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "make_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.make_graph": [[438, 440], ["None"], "methods", ["None"], ["", "def", "make_graph", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "clone", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.clone": [[440, 452], ["type().__new__", "function_optimizer.Hypothesis.dimensional_parameters.copy", "type"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "h", "=", "type", "(", "self", ")", ".", "__new__", "(", "self", ".", "__class__", ")", "\n", "h", ".", "likelihood", "=", "0.", "\n", "h", ".", "dimensional_parameters", "=", "self", ".", "dimensional_parameters", ".", "copy", "(", ")", "\n", "h", ".", "context", "=", "self", ".", "context", "\n", "h", ".", "data", "=", "self", ".", "data", "\n", "h", ".", "kernels", "=", "None", "\n", "h", ".", "_sk_kernel_class", "=", "self", ".", "_sk_kernel_class", "\n", "h", ".", "_sk_kwargs", "=", "self", ".", "_sk_kwargs", "\n", "h", ".", "ls_wrap", "=", "self", ".", "ls_wrap", "\n", "h", ".", "scipy_opt", "=", "self", ".", "scipy_opt", "\n", "return", "h", "\n", "", "def", "_make_kernels", "(", "self", ",", "dimensional_parameters", ",", "fn_decompositions", ",", "prev_kernels", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._make_kernels": [[452, 481], ["map", "sum", "zip", "map", "len", "list", "function_optimizer.Hypothesis.ls_wrap", "numpy.sqrt", "logging.debug", "sum", "function_optimizer.Hypothesis._sk_kernel_class"], "methods", ["None"], ["", "def", "_make_kernels", "(", "self", ",", "dimensional_parameters", ",", "fn_decompositions", ",", "prev_kernels", "=", "{", "}", ")", ":", "\n", "\n", "        ", "dim_ls", ",", "dim_var", "=", "map", "(", "np", ".", "array", ",", "zip", "(", "*", "dimensional_parameters", ")", ")", "\n", "nActiveVar", "=", "sum", "(", "map", "(", "len", ",", "fn_decompositions", ")", ")", "\n", "kernels", "=", "{", "}", "\n", "for", "var_order", "in", "fn_decompositions", ":", "\n", "\n", "            ", "if", "var_order", "in", "prev_kernels", ":", "\n", "                ", "kernels", "[", "var_order", "]", "=", "prev_kernels", "[", "var_order", "]", "\n", "continue", "\n", "\n", "", "d", "=", "len", "(", "var_order", ")", "\n", "# Prevent the values from going heywire", "\n", "#ls = normalize(np.clip(dimensional_parameters[var_order], 1e-03, 1))", "\n", "_var_order", "=", "list", "(", "var_order", ")", "\n", "ls", "=", "self", ".", "ls_wrap", "(", "dim_ls", "[", "_var_order", "]", ")", "\n", "_dim_var", "=", "dim_var", "[", "_var_order", "]", "\n", "variance", "=", "np", ".", "sqrt", "(", "sum", "(", "_dim_var", "**", "2", ")", ")", "\n", "\n", "#var = float(d) / nActiveVar", "\n", "logging", ".", "debug", "(", "\"Fn={}, ls={}, variance={}\"", ".", "format", "(", "var_order", ",", "ls", ",", "variance", ")", ")", "\n", "kernel", "=", "variance", "*", "self", ".", "_sk_kernel_class", "(", "ls", ",", "**", "self", ".", "_sk_kwargs", ")", "\n", "kernel", ".", "_dim_var", "=", "_dim_var", "\n", "kernel", ".", "active_dims", "=", "_var_order", "\n", "kernel", ".", "variance", "=", "variance", "\n", "kernel", ".", "lengthscale", "=", "ls", "\n", "\n", "kernels", "[", "var_order", "]", "=", "kernel", "\n", "", "return", "kernels", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis._update_kernels": [[482, 497], ["kernels.items", "list", "function_optimizer.Hypothesis.ls_wrap", "numpy.sqrt", "kernel.set_params", "sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "def", "_update_kernels", "(", "self", ",", "dim_ls", ",", "dim_var", ",", "kernels", ")", ":", "\n", "\n", "        ", "for", "var_order", ",", "kernel", "in", "kernels", ".", "items", "(", ")", ":", "\n", "\n", "            ", "_var_order", "=", "list", "(", "var_order", ")", "\n", "ls", "=", "self", ".", "ls_wrap", "(", "dim_ls", "[", "_var_order", "]", ")", "\n", "_dim_var", "=", "dim_var", "[", "_var_order", "]", "\n", "variance", "=", "np", ".", "sqrt", "(", "sum", "(", "_dim_var", "**", "2", ")", ")", "\n", "\n", "kernel", ".", "_dim_var", "=", "_dim_var", "\n", "kernel", ".", "set_params", "(", "k1__constant_value", "=", "variance", ",", "k2__length_scale", "=", "ls", ")", "\n", "kernel", ".", "variance", "=", "variance", "\n", "kernel", ".", "lengthscale", "=", "ls", "\n", "\n", "", "return", "kernels", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.__init__": [[500, 503], ["networkx.to_numpy_matrix", "function_optimizer.Hypothesis.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "graph_function", ",", "context", ",", "data", ")", ":", "\n", "        ", "self", ".", "Z", "=", "nx", ".", "to_numpy_matrix", "(", "graph_function", ".", "graph", ",", "dtype", "=", "bool", ")", "\n", "super", "(", ")", ".", "__init__", "(", "graph_function", ",", "context", ",", "data", ")", "\n", "# Maybe can be in base?", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.make_fn_decompositions_sorted": [[504, 506], ["tuple", "sorted", "networkx.find_cliques", "function_optimizer.HypothesisGraph.make_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph"], ["", "def", "make_fn_decompositions_sorted", "(", "self", ")", ":", "\n", "        ", "return", "[", "tuple", "(", "sorted", "(", "ea_decomp", ")", ")", "for", "ea_decomp", "in", "nx", ".", "find_cliques", "(", "self", ".", "make_graph", "(", ")", ")", "]", "\n", "", "def", "flip_edge", "(", "self", ",", "i", ",", "j", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.flip_edge": [[506, 527], ["function_optimizer.HypothesisGraph.Z.copy", "function_optimizer.HypothesisGraph.clone", "function_optimizer.HypothesisGraph._make_kernels", "function_optimizer.HypothesisGraph.make_fn_decompositions_sorted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.clone", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted"], ["", "def", "flip_edge", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "Z", "=", "self", ".", "Z", ".", "copy", "(", ")", "\n", "Z", "[", "i", ",", "j", "]", "=", "not", "Z", "[", "i", ",", "j", "]", "\n", "Z", "[", "j", ",", "i", "]", "=", "Z", "[", "i", ",", "j", "]", "\n", "\n", "# Update for edge on likihood", "\n", "# WHY?? TODO", "\n", "# Update edge perturbation, TODO merge?", "\n", "is_edge_set", "=", "self", ".", "Z", "[", "i", ",", "j", "]", "==", "1", "\n", "'''\n        if is_edge_set:\n            likelihood = np.log(self.context.p)\n        else:\n            likelihood = np.log(1-self.context.p)\n        '''", "\n", "\n", "h", "=", "self", ".", "clone", "(", ")", "\n", "#h.likelihood = likelihood", "\n", "h", ".", "Z", "=", "Z", "\n", "h", ".", "kernels", "=", "h", ".", "_make_kernels", "(", "h", ".", "dimensional_parameters", ",", "h", ".", "make_fn_decompositions_sorted", "(", ")", ",", "self", ".", "kernels", ")", "\n", "return", "h", ",", "is_edge_set", "\n", "", "def", "mutate_edge", "(", "self", ",", "i_del", ",", "j_del", ",", "i_add", ",", "j_add", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.mutate_edge": [[527, 544], ["function_optimizer.HypothesisGraph.Z.copy", "function_optimizer.HypothesisGraph.clone", "function_optimizer.HypothesisGraph._make_kernels", "function_optimizer.HypothesisGraph.make_fn_decompositions_sorted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.clone", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted"], ["", "def", "mutate_edge", "(", "self", ",", "i_del", ",", "j_del", ",", "i_add", ",", "j_add", ")", ":", "\n", "        ", "Z", "=", "self", ".", "Z", ".", "copy", "(", ")", "\n", "Z", "[", "i_add", ",", "j_add", "]", "=", "True", "\n", "Z", "[", "j_add", ",", "i_add", "]", "=", "True", "\n", "Z", "[", "i_del", ",", "j_del", "]", "=", "False", "\n", "Z", "[", "j_del", ",", "i_del", "]", "=", "False", "\n", "\n", "# Update for edge on likihood", "\n", "# WHY?? TODO", "\n", "# Update edge perturbation, TODO merge?", "\n", "#likelihood = np.log(self.context.p)", "\n", "\n", "h", "=", "self", ".", "clone", "(", ")", "\n", "#h.likelihood = likelihood", "\n", "h", ".", "Z", "=", "Z", "\n", "h", ".", "kernels", "=", "h", ".", "_make_kernels", "(", "h", ".", "dimensional_parameters", ",", "h", ".", "make_fn_decompositions_sorted", "(", ")", ",", "self", ".", "kernels", ")", "\n", "return", "h", "\n", "", "def", "make_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.make_graph": [[544, 546], ["networkx.from_numpy_matrix"], "methods", ["None"], ["", "def", "make_graph", "(", "self", ")", ":", "\n", "        ", "return", "nx", ".", "from_numpy_matrix", "(", "self", ".", "Z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.__init__": [[549, 552], ["function_optimizer.HypothesisNonGraph.getZFromGraph", "function_optimizer.Hypothesis.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.getZFromGraph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "graph_function", ",", "context", ",", "data", ")", ":", "\n", "        ", "self", ".", "z", "=", "self", ".", "getZFromGraph", "(", "graph_function", ".", "graph", ")", "\n", "super", "(", ")", ".", "__init__", "(", "graph_function", ",", "context", ",", "data", ")", "\n", "", "def", "getZFromGraph", "(", "self", ",", "G", ",", "M", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.getZFromGraph": [[552, 565], ["numpy.zeros", "networkx.find_cliques", "len", "G.nodes"], "methods", ["None"], ["", "def", "getZFromGraph", "(", "self", ",", "G", ",", "M", "=", "0", ")", ":", "\n", "        ", "z", "=", "np", ".", "zeros", "(", "len", "(", "G", ".", "nodes", "(", ")", ")", ")", "\n", "cliques", "=", "nx", ".", "find_cliques", "(", "G", ")", "\n", "group", "=", "0", "\n", "for", "c", "in", "cliques", ":", "\n", "            ", "for", "n", "in", "c", ":", "\n", "                ", "z", "[", "n", "]", "=", "group", "\n", "", "group", "+=", "1", "\n", "", "'''\n        if M > 0:\n            assert(group <= M) # The number of groups must not exceed M\n        '''", "\n", "return", "z", "\n", "", "def", "make_fn_decompositions_sorted", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted": [[565, 585], ["int", "range", "functools.reduce", "enumerate", "map", "set", "tuple", "max", "len", "decomp.append", "map", "range", "A.append", "tuple", "sorted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "make_fn_decompositions_sorted", "(", "self", ")", ":", "\n", "        ", "M", "=", "int", "(", "max", "(", "self", ".", "z", ")", "+", "1", ")", "\n", "decomp", "=", "[", "]", "\n", "#values = set(np.array(z).flatten())", "\n", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "            ", "A", "=", "[", "]", "\n", "for", "j", ",", "z_j", "in", "enumerate", "(", "self", ".", "z", ")", ":", "\n", "#assert(z_j < M) # the constraint on the number of groups must be fullfilled", "\n", "                ", "if", "z_j", "==", "m", ":", "\n", "                    ", "A", ".", "append", "(", "j", ")", "\n", "", "", "if", "len", "(", "A", ")", ">", "0", ":", "\n", "                ", "decomp", ".", "append", "(", "tuple", "(", "sorted", "(", "A", ")", ")", ")", "\n", "\n", "# Fixed missing nodes", "\n", "", "", "activated_set", "=", "reduce", "(", "set", ".", "union", ",", "map", "(", "set", ",", "map", "(", "list", ",", "decomp", ")", ")", ")", "\n", "leftover", "=", "set", "(", "range", "(", "self", ".", "data", ".", "dim", ")", ")", "-", "activated_set", "\n", "\n", "decomp", "+=", "[", "tuple", "(", "[", "i", "]", ")", "for", "i", "in", "leftover", "]", "\n", "\n", "return", "decomp", "\n", "", "def", "make_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_graph": [[585, 588], ["function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted", "function_optimizer.HypothesisNonGraph.getGraphFromDecomposition"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.getGraphFromDecomposition"], ["", "def", "make_graph", "(", "self", ")", ":", "\n", "        ", "decomp", "=", "self", ".", "make_fn_decompositions_sorted", "(", ")", "\n", "return", "self", ".", "getGraphFromDecomposition", "(", "decomp", ")", "\n", "", "def", "getGroupSize", "(", "self", ",", "decomp", ",", "j", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.getGroupSize": [[588, 593], ["len"], "methods", ["None"], ["", "def", "getGroupSize", "(", "self", ",", "decomp", ",", "j", ")", ":", "\n", "        ", "for", "d", "in", "decomp", ":", "\n", "            ", "if", "j", "in", "d", ":", "\n", "                ", "return", "len", "(", "d", ")", "\n", "", "", "return", "0", "\n", "", "def", "getGraphFromDecomposition", "(", "self", ",", "decomp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.getGraphFromDecomposition": [[593, 607], ["networkx.Graph", "networkx.Graph.add_edges_from", "networkx.Graph.add_nodes_from", "len", "list", "itertools.combinations", "edges.append", "len", "single_nodes.append"], "methods", ["None"], ["", "def", "getGraphFromDecomposition", "(", "self", ",", "decomp", ")", ":", "\n", "        ", "graph", "=", "nx", ".", "Graph", "(", ")", "\n", "edges", "=", "[", "]", "\n", "single_nodes", "=", "[", "]", "\n", "for", "v", "in", "decomp", ":", "\n", "            ", "if", "len", "(", "v", ")", ">", "1", ":", "\n", "                ", "all_pairs", "=", "list", "(", "itertools", ".", "combinations", "(", "v", ",", "2", ")", ")", "\n", "for", "pair", "in", "all_pairs", ":", "\n", "                    ", "edges", ".", "append", "(", "pair", ")", "\n", "", "", "elif", "len", "(", "v", ")", "==", "1", ":", "\n", "                ", "single_nodes", ".", "append", "(", "v", "[", "0", "]", ")", "\n", "", "", "graph", ".", "add_edges_from", "(", "edges", ")", "\n", "graph", ".", "add_nodes_from", "(", "single_nodes", ")", "\n", "return", "graph", "\n", "", "def", "update_group", "(", "self", ",", "j", ",", "m", ",", "omega", "=", "0.", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.update_group": [[607, 616], ["function_optimizer.HypothesisNonGraph.z.copy", "function_optimizer.HypothesisNonGraph.clone", "function_optimizer.HypothesisNonGraph._make_kernels", "function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.clone", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted"], ["", "def", "update_group", "(", "self", ",", "j", ",", "m", ",", "omega", "=", "0.", ")", ":", "\n", "        ", "z", "=", "self", ".", "z", ".", "copy", "(", ")", "\n", "z", "[", "j", "]", "=", "m", "\n", "\n", "h", "=", "self", ".", "clone", "(", ")", "\n", "h", ".", "likelihood", "=", "omega", "\n", "h", ".", "z", "=", "z", "\n", "h", ".", "kernels", "=", "h", ".", "_make_kernels", "(", "h", ".", "dimensional_parameters", ",", "h", ".", "make_fn_decompositions_sorted", "(", ")", ",", "self", ".", "kernels", ")", "\n", "return", "h", "\n", "", "def", "maxGroupSize", "(", "self", ",", "decomp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.maxGroupSize": [[616, 623], ["len"], "methods", ["None"], ["", "def", "maxGroupSize", "(", "self", ",", "decomp", ")", ":", "\n", "        ", "m", "=", "0", "\n", "for", "d", "in", "decomp", ":", "\n", "            ", "s", "=", "len", "(", "d", ")", "\n", "if", "s", ">", "m", ":", "\n", "                ", "m", "=", "s", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphNonOverlap.__init__": [[625, 635], ["function_optimizer.GraphOptimizer.__init__", "logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["    ", "def", "__init__", "(", "self", ",", "cycles", ",", "max_group_size", ",", "**", "kwargs", ")", ":", "\n", "\n", "# GraphNonOverlap", "\n", "# No cycles constraint, change group size to 2", "\n", "        ", "if", "not", "cycles", ":", "\n", "# Constraints to group size 2", "\n", "            ", "logging", ".", "info", "(", "\"Overriding max_group_size to 2 as no cycles are reported for GraphNonOverlap.\"", ")", "\n", "max_group_size", "=", "2", "\n", "\n", "", "GraphOptimizer", ".", "__init__", "(", "self", ",", "cycles", "=", "cycles", ",", "max_group_size", "=", "max_group_size", ",", "**", "kwargs", ")", "\n", "", "def", "_optimize_hypotheses", "(", "self", ",", "h_0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphNonOverlap._optimize_hypotheses": [[635, 703], ["h_0.dimension", "numpy.random.permutation", "h.update_group.update_group.evaluate", "best_h.optimize_dimensional_parameters", "numpy.random.gumbel", "h.update_group.update_group.make_fn_decompositions_sorted", "h.update_group.update_group.getGroupSize", "range", "h.update_group.update_group.update_group", "h.update_group.update_group.update_group", "h.update_group.update_group.make_fn_decompositions_sorted", "h.update_group.update_group.evaluate", "numpy.copy.copy", "h.update_group.update_group.maxGroupSize", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.dimension", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_parameters", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.getGroupSize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.update_group", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.update_group", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.make_fn_decompositions_sorted", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisNonGraph.maxGroupSize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "_optimize_hypotheses", "(", "self", ",", "h_0", ")", ":", "\n", "\n", "        ", "dim", "=", "h_0", ".", "dimension", "(", ")", "\n", "fully_optimize_lengthscales", "=", "self", ".", "context", ".", "fully_optimize_lengthscales", "\n", "\n", "best_h", "=", "h_0", "\n", "h_prev", "=", "h_0", "\n", "count_i", "=", "0", "\n", "# num_iter = int(self.graphSamplingNumIter / (dim*self.context.M)) + 1", "\n", "while", "True", ":", "\n", "            ", "h", "=", "h_prev", "\n", "dimensional_parameter_new", "=", "None", "\n", "for", "j", "in", "np", ".", "random", ".", "permutation", "(", "dim", ")", ":", "# Sample z_j from p(z_j = m | z_-j, D) \\proto exp(phi_m) using Gumbel's trick", "\n", "                ", "omega", "=", "np", ".", "random", ".", "gumbel", "(", "0.0", ",", "1.0", ",", "dim", ")", "\n", "\n", "decomp", "=", "h", ".", "make_fn_decompositions_sorted", "(", ")", "\n", "size", "=", "h", ".", "getGroupSize", "(", "decomp", ",", "j", ")", "\n", "\n", "# Partial evaluation of m", "\n", "# TODO Replace this with a loop_best ", "\n", "z_j_new", "=", "-", "1", "\n", "best_val", "=", "-", "np", ".", "inf", "\n", "for", "m", "in", "range", "(", "self", ".", "context", ".", "M", ")", ":", "# select z_j = argmax_{i <= M} phi_i + omega_i", "\n", "\n", "                    ", "h", "=", "h", ".", "update_group", "(", "j", ",", "m", ",", "omega", "[", "m", "]", ")", "\n", "decomp", "=", "h", ".", "make_fn_decompositions_sorted", "(", ")", "\n", "\n", "# Nth to consider if its maxed out alr.", "\n", "if", "h", ".", "maxGroupSize", "(", "decomp", ")", ">", "self", ".", "context", ".", "max_group_size", ":", "\n", "                        ", "continue", "\n", "\n", "", "h", ".", "evaluate", "(", "groupSize", "=", "size", ")", "\n", "count_i", "+=", "1", "\n", "\n", "# maxGroupSize", "\n", "if", "h", ".", "likelihood", ">", "best_val", ":", "\n", "                        ", "best_val", "=", "h", ".", "likelihood", "\n", "z_j_new", "=", "m", "\n", "if", "fully_optimize_lengthscales", ":", "\n", "                            ", "dimensional_parameter_new", "=", "np", ".", "copy", "(", "h", ".", "dimensional_parameter", ")", "\n", "\n", "", "", "if", "count_i", ">=", "self", ".", "graphSamplingNumIter", ":", "\n", "                        ", "break", "\n", "\n", "", "", "h", "=", "h", ".", "update_group", "(", "j", ",", "z_j_new", ")", "\n", "if", "fully_optimize_lengthscales", ":", "\n", "                    ", "h", ".", "dimensional_parameters", "=", "dimensional_parameter_new", "\n", "\n", "", "if", "count_i", ">=", "self", ".", "graphSamplingNumIter", ":", "\n", "                    ", "break", "\n", "\n", "# without group bias", "\n", "", "", "h", ".", "evaluate", "(", ")", "\n", "if", "h", ".", "likelihood", ">", "best_h", ".", "likelihood", ":", "\n", "                ", "best_h", "=", "h", "\n", "if", "fully_optimize_lengthscales", ":", "\n", "                    ", "best_dimensional_parameter", "=", "dimensional_parameter_new", ".", "copy", "(", ")", "\n", "", "", "h_prev", "=", "h", "\n", "\n", "if", "count_i", ">=", "self", ".", "graphSamplingNumIter", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "not", "fully_optimize_lengthscales", ":", "\n", "            ", "best_h", ".", "optimize_dimensional_parameters", "(", "self", ".", "context", ".", "lengthscaleNumIter", ")", "\n", "", "else", ":", "\n", "            ", "best_h", ".", "dimensional_parameters", "=", "best_dimensional_parameter", "\n", "\n", "", "return", "best_h", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphNonOverlap.HypothesisType": [[704, 706], ["None"], "methods", ["None"], ["", "def", "HypothesisType", "(", "self", ")", ":", "\n", "        ", "return", "HypothesisNonGraph", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOverlap._optimize_hypotheses": [[708, 765], ["logging.info", "h_0.dimension", "set", "set", "len", "numpy.random.shuffle", "best_h.optimize_dimensional_parameters", "numpy.random.permutation", "numpy.random.permutation", "max.flip_edge", "max", "set.add", "max.has_cycle", "len", "max.evaluate", "set.add"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.dimension", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_parameters", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.flip_edge", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.has_cycle", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add"], ["    ", "def", "_optimize_hypotheses", "(", "self", ",", "h_0", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Running GraphOverlap\"", ")", "\n", "dim", "=", "h_0", ".", "dimension", "(", ")", "\n", "h_prev", "=", "h_0", "\n", "h", "=", "h_0", "\n", "best_h", "=", "h_0", "\n", "\n", "hypotheses_set", "=", "set", "(", "[", "h_0", "]", ")", "\n", "sampled_hypotheses_set", "=", "set", "(", "[", "h_0", "]", ")", "\n", "\n", "all_edges", "=", "[", "(", "i", ",", "j", ")", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "dim", ")", "for", "j", "in", "np", ".", "random", ".", "permutation", "(", "i", ")", "]", "\n", "\n", "while", "len", "(", "hypotheses_set", ")", "<", "self", ".", "graphSamplingNumIter", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "all_edges", ")", "\n", "for", "i", ",", "j", "in", "all_edges", ":", "\n", "                ", "h_prev", "=", "h", "\n", "h", ",", "is_edge_set", "=", "h", ".", "flip_edge", "(", "i", ",", "j", ")", "\n", "\n", "# Check if the graph satisfy the prior cycle condition", "\n", "if", "not", "(", "not", "self", ".", "context", ".", "cycles", "and", "is_edge_set", ")", "or", "h", ".", "has_cycle", "(", ")", ":", "\n", "# Check if its a new hypothesis", "\n", "                    ", "if", "not", "h", "in", "hypotheses_set", ":", "\n", "                        ", "h", ".", "evaluate", "(", ")", "\n", "hypotheses_set", ".", "add", "(", "h", ")", "\n", "\n", "# Check if the current hypothesis is better then the prev graph", "\n", "", "if", "h", ".", "likelihood", "<", "h_prev", ".", "likelihood", ":", "\n", "# Worse than previous graph -> Switch the edge back again", "\n", "                        ", "h", "=", "h_prev", "\n", "", "", "else", ":", "\n", "# Illegal operation, reset back", "\n", "                    ", "h", "=", "h_prev", "\n", "\n", "", "if", "len", "(", "hypotheses_set", ")", ">=", "self", ".", "graphSamplingNumIter", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "h", ".", "likelihood", ">", "best_h", ".", "likelihood", ":", "\n", "                ", "best_h", "=", "h", "\n", "\n", "# Choose as next sample the graph with highest likelihood which has not", "\n", "# yet been selected as sample.", "\n", "# Continue to use h if we know it is still the best", "\n", "", "if", "not", "h", "in", "sampled_hypotheses_set", ":", "\n", "# h has been updated, not been sampled from before", "\n", "# We choose the next best", "\n", "                ", "unsampled_hypotheses_set", "=", "hypotheses_set", "-", "sampled_hypotheses_set", "\n", "# this sample has already been selected, find a new one that is probable", "\n", "# maximum probability", "\n", "h", "=", "max", "(", "unsampled_hypotheses_set", ",", "key", "=", "lambda", "h", ":", "h", ".", "likelihood", ")", "\n", "sampled_hypotheses_set", ".", "add", "(", "h_prev", ")", "\n", "\n", "# Did not perform full optimization, so we optimze at the end", "\n", "", "", "if", "not", "self", ".", "context", ".", "fully_optimize_lengthscales", ":", "\n", "            ", "best_h", ".", "optimize_dimensional_parameters", "(", "self", ".", "context", ".", "lengthscaleNumIter", ")", "\n", "\n", "#assert(len(hypotheses_set) == self.graphSamplingNumIter)", "\n", "", "return", "best_h", "\n", "", "def", "HypothesisType", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphOverlap.HypothesisType": [[765, 767], ["None"], "methods", ["None"], ["", "def", "HypothesisType", "(", "self", ")", ":", "\n", "        ", "return", "HypothesisGraph", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree.HypothesisType": [[769, 771], ["None"], "methods", ["None"], ["    ", "def", "HypothesisType", "(", "self", ")", ":", "\n", "        ", "return", "HypothesisGraph", "\n", "", "def", "_optimize_hypotheses", "(", "self", ",", "h_0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Tree._optimize_hypotheses": [[771, 887], ["logging.info", "h_0.dimension", "set", "set", "len", "best_h.optimize_dimensional_parameters", "numpy.random.permutation", "numpy.random.permutation", "len", "h_orig.mutate_edge.make_graph().edges", "disjoint_set.DisjointSet.DisjointSet", "numpy.random.shuffle", "h_orig.mutate_edge.make_graph", "list", "range", "max", "set.add", "h_orig.mutate_edge.make_graph().edges", "disjoint_set.DisjointSet.DisjointSet.union", "h_orig.mutate_edge.make_graph.edges", "h_orig.mutate_edge.make_graph.copy", "h.make_graph.copy.remove_edge", "set", "list", "h_orig.mutate_edge", "h_orig.mutate_edge.make_graph", "disjoint_set.DisjointSet.DisjointSet.connected", "h_orig.mutate_edge.flip_edge", "len", "len", "itertools.product", "len", "list.remove", "h_orig.mutate_edge.evaluate", "set.add", "len", "h_orig.mutate_edge.make_graph", "h_orig.mutate_edge.evaluate", "set.add", "disjoint_set.DisjointSet.DisjointSet.union", "h_orig.mutate_edge.make_graph().edges", "numpy.random.choice", "list", "list", "numpy.random.choice", "len", "networkx.descendants", "networkx.descendants", "len", "h_orig.mutate_edge.make_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.dimension", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.Hypothesis.optimize_dimensional_parameters", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.mutate_edge", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.HypothesisGraph.flip_edge", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph"], ["", "def", "_optimize_hypotheses", "(", "self", ",", "h_0", ")", ":", "\n", "\n", "        ", "logging", ".", "info", "(", "\"Running Tree\"", ")", "\n", "dim", "=", "h_0", ".", "dimension", "(", ")", "\n", "h_prev", "=", "h_0", "\n", "h", "=", "h_0", "\n", "best_h", "=", "h_0", "\n", "\n", "hypotheses_set", "=", "set", "(", "[", "h_0", "]", ")", "\n", "sampled_hypotheses_set", "=", "set", "(", "[", "h_0", "]", ")", "\n", "\n", "all_edges", "=", "[", "(", "i", ",", "j", ")", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "dim", ")", "for", "j", "in", "np", ".", "random", ".", "permutation", "(", "i", ")", "]", "\n", "\n", "while", "len", "(", "hypotheses_set", ")", "<", "self", ".", "graphSamplingNumIter", ":", "\n", "\n", "            ", "if", "len", "(", "h", ".", "make_graph", "(", ")", ".", "edges", "(", ")", ")", "<", "dim", "-", "1", ":", "\n", "\n", "                ", "edges", "=", "h", ".", "make_graph", "(", ")", ".", "edges", "(", ")", "\n", "disjoint_set", "=", "DisjointSet", "(", ")", "\n", "for", "i", ",", "j", "in", "edges", ":", "\n", "                    ", "disjoint_set", ".", "union", "(", "i", ",", "j", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "all_edges", ")", "\n", "#from tqdm import tqdm", "\n", "#for i, j in tqdm(all_edges):", "\n", "for", "i", ",", "j", "in", "all_edges", ":", "\n", "# Checks for the same parent, which will check for cycle.", "\n", "# TODO DEBUG, to make sure cycles does not exist", "\n", "#print(i, j, parent)", "\n", "                    ", "if", "not", "disjoint_set", ".", "connected", "(", "i", ",", "j", ")", ":", "\n", "\n", "                        ", "h_prev", "=", "h", "\n", "h", ",", "_", "=", "h", ".", "flip_edge", "(", "i", ",", "j", ")", "\n", "\n", "# Check if its a new hypothesis", "\n", "if", "not", "h", "in", "hypotheses_set", ":", "\n", "                            ", "h", ".", "evaluate", "(", ")", "\n", "hypotheses_set", ".", "add", "(", "h", ")", "\n", "\n", "# Check if the current hypothesis is better then the prev graph", "\n", "", "if", "h", ".", "likelihood", "<", "h_prev", ".", "likelihood", ":", "\n", "# Worse than previous graph -> Switch the edge back again", "\n", "                            ", "h", "=", "h_prev", "\n", "", "else", ":", "\n", "                            ", "disjoint_set", ".", "union", "(", "i", ",", "j", ")", "\n", "\n", "", "", "if", "len", "(", "hypotheses_set", ")", ">=", "self", ".", "graphSamplingNumIter", ":", "\n", "                        ", "break", "\n", "\n", "", "if", "len", "(", "h", ".", "make_graph", "(", ")", ".", "edges", "(", ")", ")", ">=", "dim", "-", "1", ":", "\n", "                        ", "break", "\n", "#assert(len(edges) <= len(h.make_graph().edges()))", "\n", "", "", "", "else", ":", "\n", "                ", "graph_orig", "=", "h", ".", "make_graph", "(", ")", "\n", "edges", "=", "list", "(", "graph_orig", ".", "edges", "(", ")", ")", "\n", "h_prev", "=", "h", "\n", "h_orig", "=", "h", "\n", "# we generate candidates from the original hypothesis", "\n", "for", "i", "in", "range", "(", "self", ".", "context", ".", "gen_candidates", ")", ":", "\n", "                    ", "graph_copy", "=", "graph_orig", ".", "copy", "(", ")", "\n", "# The edge to remove", "\n", "i_del", ",", "j_del", "=", "edges", "[", "np", ".", "random", ".", "choice", "(", "len", "(", "edges", ")", ")", "]", "\n", "graph_copy", ".", "remove_edge", "(", "i_del", ",", "j_del", ")", "\n", "comp_1", ",", "comp_2", "=", "list", "(", "nx", ".", "descendants", "(", "graph_copy", ",", "i_del", ")", ")", "+", "[", "i_del", "]", ",", "list", "(", "nx", ".", "descendants", "(", "graph_copy", ",", "j_del", ")", ")", "+", "[", "j_del", "]", "\n", "\n", "candidate_edges", "=", "set", "(", "product", "(", "comp_1", ",", "comp_2", ")", ")", "\n", "# We do not want to add it back again, its lame...", "\n", "# Unless its the case where there is nothing else", "\n", "if", "len", "(", "candidate_edges", ")", ">", "1", ":", "\n", "                        ", "candidate_edges", ".", "remove", "(", "(", "i_del", ",", "j_del", ")", ")", "\n", "", "candidate_edges", "=", "list", "(", "candidate_edges", ")", "\n", "\n", "i_add", ",", "j_add", "=", "candidate_edges", "[", "np", ".", "random", ".", "choice", "(", "len", "(", "candidate_edges", ")", ")", "]", "\n", "#for i_add, j_add in candidate_edges:", "\n", "\n", "h_prev", "=", "h", "\n", "h", "=", "h_orig", ".", "mutate_edge", "(", "i_del", ",", "j_del", ",", "i_add", ",", "j_add", ")", "\n", "\n", "# Check if its a new hypothesis", "\n", "if", "not", "h", "in", "hypotheses_set", ":", "\n", "                        ", "h", ".", "evaluate", "(", ")", "\n", "hypotheses_set", ".", "add", "(", "h", ")", "\n", "\n", "# Check if the current hypothesis is better then the prev graph", "\n", "", "if", "h", ".", "likelihood", "<", "h_prev", ".", "likelihood", ":", "\n", "# Worse than previous graph -> Switch the edge back again", "\n", "# H is only replaced if h is actually better", "\n", "                        ", "h", "=", "h_prev", "\n", "\n", "", "if", "len", "(", "hypotheses_set", ")", ">=", "self", ".", "graphSamplingNumIter", ":", "\n", "                        ", "break", "\n", "#assert(len(edges) == len(h.make_graph().edges()))", "\n", "\n", "", "", "", "if", "h", ".", "likelihood", ">", "best_h", ".", "likelihood", ":", "\n", "                ", "best_h", "=", "h", "\n", "\n", "# Choose as next sample the graph with highest likelihood which has not", "\n", "# yet been selected as sample.", "\n", "# Continue to use h if we know it is still the best", "\n", "", "if", "not", "h", "in", "sampled_hypotheses_set", ":", "\n", "# h has been updated, not been sampled from before", "\n", "# We choose the next best", "\n", "                ", "unsampled_hypotheses_set", "=", "hypotheses_set", "-", "sampled_hypotheses_set", "\n", "# this sample has already been selected, find a new one that is probable", "\n", "# maximum probability", "\n", "h", "=", "max", "(", "unsampled_hypotheses_set", ",", "key", "=", "lambda", "h", ":", "h", ".", "likelihood", ")", "\n", "sampled_hypotheses_set", ".", "add", "(", "h_prev", ")", "\n", "\n", "# Did not perform full optimization, so we optimze at the end", "\n", "", "", "if", "not", "self", ".", "context", ".", "fully_optimize_lengthscales", ":", "\n", "            ", "best_h", ".", "optimize_dimensional_parameters", "(", "self", ".", "context", ".", "lengthscaleNumIter", ")", "\n", "\n", "#print(best_h.dimensional_parameters)", "\n", "#assert(len(hypotheses_set) == self.graphSamplingNumIter)", "\n", "\n", "", "return", "best_h", "\n", "#from profilehooks import profile", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.__init__": [[892, 933], ["function_optimizer.GraphFunction.make_fn_decompositions", "function_optimizer.GraphFunction._make_kernels", "function_optimizer.GraphFunction.locate", "function_optimizer.GraphFunction.locate", "function_optimizer.GraphFunction.locate", "range", "sum", "function_optimizer.GraphFunction.dimension"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_fn_decompositions", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.dimension"], ["    ", "def", "__init__", "(", "self", ",", "graph", ",", "initial_kernel_params", ")", ":", "\n", "        ", "self", ".", "graph", "=", "graph", "\n", "self", ".", "dimensional_parameters", "=", "[", "(", "initial_kernel_params", "[", "'lengthscale'", "]", ",", "initial_kernel_params", "[", "'variance'", "]", ")", "for", "i", "in", "range", "(", "self", ".", "dimension", "(", ")", ")", "]", "\n", "# dangerous but ok...", "\n", "# TODO", "\n", "\n", "# Set kernels, if not set then use defaults", "\n", "if", "'gpy_kernel'", "in", "initial_kernel_params", ":", "\n", "            ", "self", ".", "_gpy_kernel_class", "=", "self", ".", "locate", "(", "initial_kernel_params", "[", "'gpy_kernel'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_gpy_kernel_class", "=", "GPy", ".", "kern", ".", "RBF", "\n", "\n", "", "self", ".", "_sk_kwargs", "=", "{", "}", "\n", "if", "'sk_kernel'", "in", "initial_kernel_params", ":", "\n", "            ", "self", ".", "_sk_kernel_class", "=", "self", ".", "locate", "(", "initial_kernel_params", "[", "'sk_kernel'", "]", ")", "\n", "if", "'sk_kwargs'", "in", "initial_kernel_params", ":", "\n", "                ", "self", ".", "_sk_kwargs", "=", "initial_kernel_params", "[", "'sk_kwargs'", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_sk_kernel_class", "=", "sklearn", ".", "gaussian_process", ".", "kernels", ".", "RBF", "\n", "\n", "# For future use, to expand the building of reusable kernels and creating only differences.", "\n", "# TODO", "\n", "\n", "# Decide for ARD ", "\n", "# TODO hack", "\n", "", "self", ".", "is_ard", "=", "True", "\n", "if", "'ard'", "in", "initial_kernel_params", ":", "\n", "            ", "self", ".", "is_ard", "=", "initial_kernel_params", "[", "'ard'", "]", "\n", "\n", "", "if", "self", ".", "is_ard", ":", "\n", "            ", "self", ".", "ls_wrap", "=", "lambda", "ord_dim_ls", ":", "ord_dim_ls", "\n", "", "else", ":", "\n", "            ", "self", ".", "ls_wrap", "=", "lambda", "ord_dim_ls", ":", "sum", "(", "ord_dim_ls", ")", "\n", "\n", "# l_bfgs is now the default.", "\n", "", "self", ".", "scipy_opt", "=", "scipy", ".", "optimize", ".", "fmin_tnc", "\n", "if", "'scipy_opt'", "in", "initial_kernel_params", ":", "\n", "            ", "self", ".", "scipy_opt", "=", "self", ".", "locate", "(", "initial_kernel_params", "[", "'scipy_opt'", "]", ")", "\n", "\n", "", "fn_decompositions", "=", "self", ".", "make_fn_decompositions", "(", ")", "\n", "self", ".", "kernels", "=", "self", ".", "_make_kernels", "(", "self", ".", "dimensional_parameters", ",", "fn_decompositions", ")", "\n", "", "def", "dimension", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.dimension": [[933, 935], ["function_optimizer.GraphFunction.graph.number_of_nodes"], "methods", ["None"], ["", "def", "dimension", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "graph", ".", "number_of_nodes", "(", ")", "\n", "", "def", "make_decomposition", "(", "self", ",", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.make_decomposition": [[935, 939], ["function_optimizer.GraphFunction.make_fn_decompositions", "function_optimizer.GraphFunction.make_cfns", "GPy.kern.Add", "function_optimizer.GraphFunction.kernels.values"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_fn_decompositions", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_cfns", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values"], ["", "def", "make_decomposition", "(", "self", ",", "model", ")", ":", "\n", "        ", "fn_decompositions", "=", "self", ".", "make_fn_decompositions", "(", ")", "\n", "cfns", "=", "self", ".", "make_cfns", "(", "self", ".", "kernels", ",", "model", ")", "\n", "return", "(", "fn_decompositions", ",", "GPy", ".", "kern", ".", "Add", "(", "self", ".", "kernels", ".", "values", "(", ")", ")", ",", "cfns", ")", "\n", "", "def", "make_fn_decompositions", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.make_fn_decompositions": [[939, 941], ["tuple", "sorted", "networkx.find_cliques"], "methods", ["None"], ["", "def", "make_fn_decompositions", "(", "self", ")", ":", "\n", "        ", "return", "[", "tuple", "(", "sorted", "(", "ea_decomp", ")", ")", "for", "ea_decomp", "in", "nx", ".", "find_cliques", "(", "self", ".", "graph", ")", "]", "\n", "", "def", "locate", "(", "self", ",", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.locate": [[941, 948], ["path.rsplit", "__import__", "getattr", "globals", "locals", "hasattr", "ImportError"], "methods", ["None"], ["", "def", "locate", "(", "self", ",", "path", ")", ":", "\n", "# Dynamically load the class", "\n", "        ", "(", "modulename", ",", "classname", ")", "=", "path", ".", "rsplit", "(", "'.'", ",", "1", ")", "\n", "m", "=", "__import__", "(", "modulename", ",", "globals", "(", ")", ",", "locals", "(", ")", ",", "[", "classname", "]", ")", "\n", "if", "not", "hasattr", "(", "m", ",", "classname", ")", ":", "\n", "            ", "raise", "ImportError", "(", "f'Could not locate \"{path}\".'", ")", "\n", "", "return", "getattr", "(", "m", ",", "classname", ")", "\n", "", "def", "_make_kernels", "(", "self", ",", "dimensional_parameters", ",", "fn_decompositions", ",", "prev_kernels", "=", "{", "}", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction._make_kernels": [[948, 973], ["map", "sum", "zip", "map", "len", "list", "function_optimizer.GraphFunction.ls_wrap", "numpy.sqrt", "logging.debug", "function_optimizer.GraphFunction._gpy_kernel_class", "function_optimizer.GraphFunction.fix", "sum", "map"], "methods", ["None"], ["", "def", "_make_kernels", "(", "self", ",", "dimensional_parameters", ",", "fn_decompositions", ",", "prev_kernels", "=", "{", "}", ")", ":", "\n", "        ", "dim_ls", ",", "dim_var", "=", "map", "(", "np", ".", "array", ",", "zip", "(", "*", "dimensional_parameters", ")", ")", "\n", "nActiveVar", "=", "sum", "(", "map", "(", "len", ",", "fn_decompositions", ")", ")", "\n", "kernels", "=", "{", "}", "\n", "for", "var_order", "in", "fn_decompositions", ":", "\n", "\n", "            ", "if", "var_order", "in", "prev_kernels", ":", "\n", "                ", "kernels", "[", "var_order", "]", "=", "prev_kernels", "[", "var_order", "]", "\n", "continue", "\n", "\n", "", "d", "=", "len", "(", "var_order", ")", "\n", "# Prevent the values from going heywire", "\n", "#ls = normalize(np.clip(dimensional_parameters[var_order], 1e-03, 1))", "\n", "_var_order", "=", "list", "(", "var_order", ")", "\n", "ls", "=", "self", ".", "ls_wrap", "(", "dim_ls", "[", "_var_order", "]", ")", "\n", "_dim_var", "=", "dim_var", "[", "_var_order", "]", "\n", "variance", "=", "np", ".", "sqrt", "(", "sum", "(", "_dim_var", "**", "2", ")", ")", "\n", "\n", "#var = float(d) / nActiveVar", "\n", "logging", ".", "debug", "(", "\"Fn={}, ls={}, variance={}\"", ".", "format", "(", "var_order", ",", "ls", ",", "variance", ")", ")", "\n", "kernel", "=", "self", ".", "_gpy_kernel_class", "(", "input_dim", "=", "d", ",", "lengthscale", "=", "ls", ",", "variance", "=", "variance", ",", "active_dims", "=", "var_order", ",", "ARD", "=", "self", ".", "is_ard", ",", "name", "=", "\"_\"", "+", "\"_\"", ".", "join", "(", "map", "(", "str", ",", "var_order", ")", ")", ")", "\n", "kernel", ".", "_dim_var", "=", "_dim_var", "\n", "kernel", ".", "fix", "(", ")", "\n", "kernels", "[", "var_order", "]", "=", "kernel", "\n", "", "return", "kernels", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction._update_kernels": [[974, 987], ["kernels.items", "list", "function_optimizer.GraphFunction.ls_wrap", "numpy.sqrt", "sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "def", "_update_kernels", "(", "self", ",", "dim_ls", ",", "dim_var", ",", "kernels", ")", ":", "\n", "\n", "        ", "for", "var_order", ",", "kernel", "in", "kernels", ".", "items", "(", ")", ":", "\n", "\n", "            ", "_var_order", "=", "list", "(", "var_order", ")", "\n", "new_ls", "=", "self", ".", "ls_wrap", "(", "dim_ls", "[", "_var_order", "]", ")", "\n", "_dim_var", "=", "dim_var", "[", "_var_order", "]", "\n", "\n", "kernel", ".", "lengthscale", "=", "new_ls", "\n", "kernel", ".", "variance", "=", "np", ".", "sqrt", "(", "sum", "(", "_dim_var", "**", "2", ")", ")", "\n", "kernel", ".", "_dim_var", "=", "_dim_var", "\n", "\n", "", "return", "kernels", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.GraphFunction.make_cfns": [[988, 994], ["kernels.items", "datasets.ComponentFunction", "myAcquisitionLCB.MyAcquisitionLCB"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "def", "make_cfns", "(", "self", ",", "kernels", ",", "model", ")", ":", "\n", "        ", "fn_decomp_lookup", "=", "{", "}", "\n", "for", "var", ",", "kernel", "in", "kernels", ".", "items", "(", ")", ":", "\n", "            ", "acqu", "=", "MyAcquisitionLCB", "(", "model", ",", "kernel", ",", "var", ")", "\n", "fn_decomp_lookup", "[", "var", "]", "=", "acqu", "\n", "", "return", "ComponentFunction", "(", "fn_decomp_lookup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_cfns": [[996, 1002], ["kernels.items", "datasets.SyntheticComponentFunction", "myAcquisitionLCB.MyAcquisitionLCB"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["    ", "def", "make_cfns", "(", "self", ",", "kernels", ",", "model", ")", ":", "\n", "        ", "fn_decomp_lookup", "=", "{", "}", "\n", "for", "var", ",", "kernel", "in", "kernels", ".", "items", "(", ")", ":", "\n", "            ", "acqu", "=", "MyAcquisitionLCB", "(", "model", ",", "kernel", ",", "var", ")", "\n", "fn_decomp_lookup", "[", "var", "]", "=", "acqu", "\n", "", "return", "SyntheticComponentFunction", "(", "self", ".", "graph", ",", "fn_decomp_lookup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction.make_fn_decompositions": [[1003, 1005], ["tuple", "tuple", "sorted", "networkx.isolates", "sorted", "function_optimizer.OptimalGraphFunction.graph.edges"], "methods", ["None"], ["", "def", "make_fn_decompositions", "(", "self", ")", ":", "\n", "        ", "return", "[", "tuple", "(", "sorted", "(", "[", "v", "]", ")", ")", "for", "v", "in", "nx", ".", "isolates", "(", "self", ".", "graph", ")", "]", "+", "[", "tuple", "(", "sorted", "(", "e", ")", ")", "for", "e", "in", "self", ".", "graph", ".", "edges", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.OptimalGraphFunction._make_kernels": [[1006, 1015], ["logging.info", "GPy.kern.RBF", "GPy.kern.RBF.fix", "len", "map"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "_make_kernels", "(", "self", ",", "dimensional_parameters", ",", "fn_decompositions", ",", "prev_kernels", "=", "{", "}", ")", ":", "\n", "        ", "ls", ",", "var", "=", "dimensional_parameters", "[", "0", "]", "\n", "kernels", "=", "{", "}", "\n", "for", "var_order", "in", "fn_decompositions", ":", "\n", "            ", "logging", ".", "info", "(", "\"Fn={}, ls={}, variance={}\"", ".", "format", "(", "var_order", ",", "ls", ",", "var", ")", ")", "\n", "kernel", "=", "GPy", ".", "kern", ".", "RBF", "(", "input_dim", "=", "len", "(", "var_order", ")", ",", "lengthscale", "=", "ls", ",", "variance", "=", "var", ",", "active_dims", "=", "var_order", ",", "name", "=", "\"_\"", "+", "\"_\"", ".", "join", "(", "map", "(", "str", ",", "var_order", ")", ")", ")", "\n", "kernel", ".", "fix", "(", ")", "\n", "kernels", "[", "var_order", "]", "=", "kernel", "\n", "", "return", "kernels", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.function_optimizer.cached_apply_X": [[43, 46], ["functools.lru_cache", "kernel"], "function", ["None"], ["", "", "@", "lru_cache", "(", "maxsize", "=", "1024", ")", "\n", "def", "cached_apply_X", "(", "kernel", ")", ":", "\n", "    ", "return", "kernel", "(", "kernel", ".", "data", ".", "X", "[", ":", ",", "kernel", ".", "active_dims", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.MetaLoader.__new__": [[38, 43], ["type.__new__", "MetaLoader.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "MetaLoader", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "MetaLoader", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "MetaLoader", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.MetaLoader.get_loader_constructor": [[43, 47], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "loader_id", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Load loader[%s].\"", ",", "loader_id", ")", "\n", "return", "MetaLoader", ".", "registry", "[", "loader_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NAS.__new__": [[51, 56], ["type.__new__", "NAS.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "NAS", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "NAS", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "NAS", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NAS.get_loader_constructor": [[56, 60], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "bench_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using NAS dataset loader with bench_type[%s].\"", ",", "bench_type", ")", "\n", "return", "NAS", ".", "registry", "[", "bench_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Synthetic.__new__": [[64, 69], ["type.__new__", "Synthetic.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "Synthetic", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "Synthetic", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "Synthetic", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Synthetic.get_loader_constructor": [[69, 73], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "graph_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using synthetic dataset loader with graph_type[%s].\"", ",", "graph_type", ")", "\n", "return", "Synthetic", ".", "registry", "[", "graph_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.LPSolve.__new__": [[77, 82], ["type.__new__", "LPSolve.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "LPSolve", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "LPSolve", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "LPSolve", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.LPSolve.get_loader_constructor": [[82, 86], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "problem_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using LPSolve problem type[%s].\"", ",", "problem_type", ")", "\n", "return", "LPSolve", ".", "registry", "[", "problem_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Hpolib.__new__": [[90, 95], ["type.__new__", "Hpolib.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "Hpolib", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "Hpolib", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "Hpolib", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Hpolib.get_loader_constructor": [[95, 99], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "hpo_fn", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using Hpolib function[%s].\"", ",", "hpo_fn", ")", "\n", "return", "Hpolib", ".", "registry", "[", "hpo_fn", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BayesianAttack.__new__": [[103, 108], ["type.__new__", "BayesianAttack.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "BayesianAttack", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "BayesianAttack", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "BayesianAttack", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BayesianAttack.get_loader_constructor": [[108, 112], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "nn_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using BayesianAttack function[%s].\"", ",", "nn_data", ")", "\n", "return", "BayesianAttack", ".", "registry", "[", "nn_data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Simple.__new__": [[116, 121], ["type.__new__", "Simple.loader_ids.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__"], ["def", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", ":", "\n", "        ", "new_class", "=", "super", "(", "cls", ",", "Simple", ")", ".", "__new__", "(", "cls", ",", "cls_name", ",", "bases", ",", "attrs", ")", "\n", "Simple", ".", "registry", "[", "cls_name", "]", "=", "new_class", "\n", "Simple", ".", "loader_ids", ".", "append", "(", "cls_name", ")", "\n", "return", "new_class", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Simple.get_loader_constructor": [[121, 125], ["logging.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "@", "staticmethod", "\n", "def", "get_loader_constructor", "(", "simple_fn", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Using Simple function[%s].\"", ",", "simple_fn", ")", "\n", "return", "Simple", ".", "registry", "[", "simple_fn", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.__init__": [[127, 131], ["GPyOpt.core.task.space.Design_space.__init__", "datasets.Domain.get_gpy_domain"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.get_gpy_domain"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "combined_domain", ")", ":", "\n", "        ", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "combined_domain", "=", "combined_domain", "\n", "super", "(", "Domain", ",", "self", ")", ".", "__init__", "(", "self", ".", "get_gpy_domain", "(", ")", ")", "\n", "", "def", "get_gpy_domain", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.get_gpy_domain": [[131, 134], ["tuple", "enumerate"], "methods", ["None"], ["", "def", "get_gpy_domain", "(", "self", ")", ":", "\n", "        ", "gpy_domain", "=", "[", "{", "'name'", ":", "'x_{}'", ".", "format", "(", "i", ")", ",", "'type'", ":", "'discrete'", ",", "'domain'", ":", "tuple", "(", "d", ")", ",", "'dimensionality'", ":", "1", "}", "for", "i", ",", "d", "in", "enumerate", "(", "self", ".", "combined_domain", ")", "]", "\n", "return", "gpy_domain", "\n", "", "def", "get_opt_domain", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.get_opt_domain": [[134, 139], ["None"], "methods", ["None"], ["", "def", "get_opt_domain", "(", "self", ")", ":", "\n", "        ", "space", "=", "{", "}", "\n", "space", "[", "'type'", "]", "=", "'discrete'", "\n", "space", "[", "'domain'", "]", "=", "self", ".", "combined_domain", "\n", "return", "space", "\n", "", "def", "none_value", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.none_value": [[139, 141], ["numpy.array"], "methods", ["None"], ["", "def", "none_value", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "1", "]", "*", "self", ".", "dimension", ",", "dtype", "=", "np", ".", "float", ")", "\n", "", "def", "random_X", "(", "self", ",", "rs", ",", "n_rand", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.random_X": [[141, 147], ["X_T.append", "numpy.array", "rs.choice"], "methods", ["None"], ["", "def", "random_X", "(", "self", ",", "rs", ",", "n_rand", ")", ":", "\n", "# Pick from each dimension's domain ", "\n", "        ", "X_T", "=", "[", "]", "\n", "for", "ea_d", "in", "self", ".", "combined_domain", ":", "\n", "            ", "X_T", ".", "append", "(", "rs", ".", "choice", "(", "ea_d", ",", "n_rand", ",", "replace", "=", "True", ")", ")", "\n", "", "return", "np", ".", "array", "(", "X_T", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticDomain.__init__": [[150, 157], ["numpy.linspace", "list", "datasets.Domain.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "grid_size", ",", "domain_lower", ",", "domain_upper", ")", ":", "\n", "        ", "self", ".", "grid_size", "=", "grid_size", "\n", "\n", "# The actual discretized domain in any dimension", "\n", "self", ".", "X_domain", "=", "np", ".", "linspace", "(", "domain_lower", ",", "domain_upper", ",", "grid_size", ")", "\n", "self", ".", "index_domain", "=", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", "\n", "super", "(", "SyntheticDomain", ",", "self", ")", ".", "__init__", "(", "dimension", ",", "[", "self", ".", "X_domain", "]", "*", "dimension", ")", "\n", "", "def", "generate_grid", "(", "self", ",", "dim", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticDomain.generate_grid": [[157, 160], ["numpy.array().T.reshape", "numpy.array", "numpy.meshgrid"], "methods", ["None"], ["", "def", "generate_grid", "(", "self", ",", "dim", ")", ":", "\n", "# This generates a N-Dim Grid", "\n", "        ", "return", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "*", "[", "self", ".", "X_domain", "]", "*", "dim", ")", ")", ".", "T", ".", "reshape", "(", "-", "1", ",", "dim", ")", "\n", "", "def", "translate", "(", "self", ",", "X_indices", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticDomain.translate": [[160, 162], ["None"], "methods", ["None"], ["", "def", "translate", "(", "self", ",", "X_indices", ")", ":", "\n", "        ", "return", "self", ".", "X_domain", "[", "X_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__init__": [[166, 168], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fn_decomp_lookup", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "fn_decomp_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__call__": [[169, 178], ["functools.reduce", "map", "datasets.ComponentFunction.__dict__.values", "ea"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# Does not matter the sequence", "\n", "        ", "'''\n        for ea_cfn_f in self.__dict__.values():\n            f_parts.append(ea_cfn_f(x))\n        return np.sum(f_parts,axis=0)\n        '''", "\n", "#return np.array([ ea_cfn(x) for ea_cfn in self.__dict__.values() ]).sum(axis=0)", "\n", "return", "reduce", "(", "np", ".", "add", ",", "map", "(", "lambda", "ea", ":", "ea", "(", "x", ")", ",", "self", ".", "__dict__", ".", "values", "(", ")", ")", ")", "\n", "", "def", "acq_f_df", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.acq_f_df": [[178, 187], ["datasets.ComponentFunction.__dict__.values", "ea_cfn.acquisition_function_withGradients", "f_parts.append", "g_parts.append", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.myAcquisitionLCB.MyAcquisitionLCB.acquisition_function_withGradients"], ["", "def", "acq_f_df", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "f_parts", "=", "[", "]", "\n", "g_parts", "=", "[", "]", "\n", "for", "ea_cfn", "in", "self", ".", "__dict__", ".", "values", "(", ")", ":", "\n", "            ", "f_part", ",", "g_part", "=", "ea_cfn", ".", "acquisition_function_withGradients", "(", "x", ")", "\n", "f_parts", ".", "append", "(", "f_part", ")", "\n", "g_parts", ".", "append", "(", "g_part", ")", "\n", "", "return", "np", ".", "sum", "(", "f_parts", ",", "axis", "=", "0", ")", ",", "np", ".", "sum", "(", "g_parts", ",", "axis", "=", "0", ")", "\n", "#return np.array([ ea_cfn.acquisition_function_withGradients(x) for ea_cfn in self.__dict__.values() ]).sum(axis=0)", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__setitem__": [[188, 190], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "item", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "key", "]", "=", "item", "\n", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__getitem__": [[190, 192], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__repr__": [[192, 194], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "__dict__", ")", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__len__": [[194, 196], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__dict__", ")", "\n", "", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__delitem__": [[196, 198], ["None"], "methods", ["None"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "del", "self", ".", "__dict__", "[", "key", "]", "\n", "", "def", "clear", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.clear": [[198, 200], ["datasets.ComponentFunction.__dict__.clear"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "clear", "(", ")", "\n", "", "def", "copy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy": [[200, 202], ["datasets.ComponentFunction.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "", "def", "has_key", "(", "self", ",", "k", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.has_key": [[202, 204], ["None"], "methods", ["None"], ["", "def", "has_key", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "k", "in", "self", ".", "__dict__", "\n", "", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.update": [[204, 206], ["datasets.ComponentFunction.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.update"], ["", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "update", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "def", "keys", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys": [[206, 208], ["datasets.ComponentFunction.__dict__.keys"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "keys", "(", ")", "\n", "", "def", "values", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values": [[208, 210], ["datasets.ComponentFunction.__dict__.values"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values"], ["", "def", "values", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "values", "(", ")", "\n", "", "def", "items", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items": [[210, 212], ["datasets.ComponentFunction.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "items", "(", ")", "\n", "", "def", "pop", "(", "self", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.pop": [[212, 214], ["datasets.ComponentFunction.__dict__.pop"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.pop"], ["", "def", "pop", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "pop", "(", "*", "args", ")", "\n", "", "def", "__cmp__", "(", "self", ",", "dict_", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__cmp__": [[214, 216], ["datasets.ComponentFunction.__cmp__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__cmp__"], ["", "def", "__cmp__", "(", "self", ",", "dict_", ")", ":", "\n", "        ", "return", "self", ".", "__cmp__", "(", "self", ".", "__dict__", ",", "dict_", ")", "\n", "", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__contains__": [[216, 218], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "in", "self", ".", "__dict__", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__iter__": [[218, 220], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "__dict__", ")", "\n", "", "def", "__unicode__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.__unicode__": [[220, 222], ["unicode", "repr"], "methods", ["None"], ["", "def", "__unicode__", "(", "self", ")", ":", "\n", "        ", "return", "unicode", "(", "repr", "(", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticComponentFunction.__init__": [[226, 254], ["sorted", "set", "datasets.ComponentFunction.__init__", "tuple", "set.update", "sorted", "networkx.find_cliques", "len", "set", "set", "len", "numpy.array().sum", "len", "numpy.array", "itertools.combinations", "tuple", "ea_cfn", "sorted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.update"], ["    ", "def", "__init__", "(", "self", ",", "graph", ",", "fn_decomp_lookup", ")", ":", "\n", "\n", "# Find all maximal cliques", "\n", "        ", "cfns", "=", "[", "tuple", "(", "sorted", "(", "c_vertices", ")", ")", "for", "c_vertices", "in", "nx", ".", "find_cliques", "(", "graph", ")", "]", "\n", "cfns", "=", "sorted", "(", "cfns", ",", "key", "=", "lambda", "x", ":", "-", "len", "(", "x", ")", ")", "\n", "\n", "all_fns", "=", "set", "(", ")", "\n", "\n", "cfn_dict", "=", "{", "}", "\n", "for", "cfn", "in", "cfns", ":", "\n", "            ", "if", "len", "(", "cfn", ")", "==", "1", ":", "\n", "                ", "cfn_decomposition", "=", "set", "(", "[", "fn_decomp_lookup", "[", "cfn", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "cfn_decomposition", "=", "set", "(", "[", "fn_decomp_lookup", "[", "tuple", "(", "sorted", "(", "edge", ")", ")", "]", "for", "edge", "in", "combinations", "(", "cfn", ",", "2", ")", "]", ")", "\n", "\n", "# Make sure we do not have repeated cliques, or empty functions", "\n", "", "cfn_decomposition", "=", "cfn_decomposition", "-", "all_fns", "\n", "if", "len", "(", "cfn_decomposition", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "all_fns", ".", "update", "(", "cfn_decomposition", ")", "\n", "\n", "\n", "def", "cfn_eval", "(", "x", ",", "_cfn_decomposition", "=", "cfn_decomposition", ")", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "ea_cfn", "(", "x", ")", "for", "ea_cfn", "in", "_cfn_decomposition", "]", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "", "cfn_dict", "[", "cfn", "]", "=", "cfn_eval", "\n", "", "super", "(", "SyntheticComponentFunction", ",", "self", ")", ".", "__init__", "(", "cfn_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Function.__init__": [[256, 259], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "self", ".", "domain", "=", "domain", "\n", "self", ".", "history_y", "=", "[", "]", "\n", "", "def", "eval", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Function.eval": [[259, 261], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Function.__call__": [[261, 266], ["datasets.Function.eval", "datasets.Function.history_y.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# This call is with noise added", "\n", "        ", "y", "=", "self", ".", "eval", "(", "x", ")", "\n", "self", ".", "history_y", ".", "append", "(", "y", ")", "\n", "return", "y", "\n", "", "def", "get_emb_dim", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Function.get_emb_dim": [[266, 268], ["max", "int", "numpy.sqrt"], "methods", ["None"], ["", "def", "get_emb_dim", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "2", ",", "int", "(", "np", ".", "sqrt", "(", "self", ".", "domain", ".", "dimension", ")", ")", ")", "\n", "", "def", "has_synthetic_noise", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Function.has_synthetic_noise": [[268, 270], ["None"], "methods", ["None"], ["", "def", "has_synthetic_noise", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NoisyFunction.__init__": [[272, 276], ["datasets.Function.__init__", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain", ",", "rs", ",", "fn_noise_var", ")", ":", "\n", "        ", "Function", ".", "__init__", "(", "self", ",", "domain", ")", "\n", "self", ".", "rs", "=", "rs", "\n", "self", ".", "fn_noise_sd", "=", "np", ".", "sqrt", "(", "fn_noise_var", ")", "\n", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NoisyFunction.__call__": [[276, 280], ["datasets.NoisyFunction.eval", "datasets.NoisyFunction.history_y.append", "datasets.NoisyFunction.rs.normal"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "eval", "(", "x", ")", "\n", "self", ".", "history_y", ".", "append", "(", "y", ")", "\n", "return", "self", ".", "rs", ".", "normal", "(", "0", ",", "self", ".", "fn_noise_sd", ")", "+", "y", "\n", "", "def", "has_synthetic_noise", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NoisyFunction.has_synthetic_noise": [[280, 282], ["None"], "methods", ["None"], ["", "def", "has_synthetic_noise", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ConfigLosses.__init__": [[287, 295], ["datasets.Function.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "key_map", ",", "domain", ",", "data", ",", "rs", ")", ":", "\n", "        ", "Function", ".", "__init__", "(", "self", ",", "domain", ")", "\n", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "dim", "=", "len", "(", "parameters", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "key_map", "=", "key_map", "\n", "self", ".", "rs", "=", "rs", "\n", "self", ".", "graph", "=", "None", "\n", "", "def", "eval", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ConfigLosses.eval": [[295, 305], ["datasets.ConfigLosses.rs.randint", "range", "json.dumps", "json.dumps", "json.dumps", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", "0", "]", "\n", "\n", "index", "=", "self", ".", "rs", ".", "randint", "(", "4", ")", "\n", "config_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "parameters", ")", ")", ":", "\n", "            ", "config_dict", "[", "self", ".", "parameters", "[", "i", "]", "]", "=", "self", ".", "key_map", "[", "i", "]", "[", "x", "[", "i", "]", "]", "\n", "", "k", "=", "json", ".", "dumps", "(", "config_dict", ",", "sort_keys", "=", "True", ")", "\n", "valid", "=", "self", ".", "data", "[", "k", "]", "[", "\"valid_mse\"", "]", "[", "index", "]", "\n", "return", "valid", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.__init__": [[313, 322], ["datasets.NoisyFunction.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "f_list", ",", "v_list", ",", "domain", ",", "fn_decomposition", ",", "graph", ",", "kernel_params", ",", "rs", ",", "fn_noise_var", ")", ":", "\n", "        ", "NoisyFunction", ".", "__init__", "(", "self", ",", "domain", ",", "rs", ",", "fn_noise_var", ")", "\n", "self", ".", "f_list", "=", "f_list", "\n", "self", ".", "v_list", "=", "v_list", "\n", "self", ".", "fn_decomposition", "=", "fn_decomposition", "\n", "# True graph and true lengthscale", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "kernel_params", "=", "kernel_params", "\n", "self", ".", "v_flat", "=", "[", "list", "(", "v", ")", "for", "v", "in", "v_list", "]", "\n", "", "def", "eval", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.eval": [[322, 326], ["numpy.searchsorted", "datasets.FunctionValues.eval_indexed"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.eval_indexed"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_i", "=", "np", ".", "searchsorted", "(", "self", ".", "domain", ".", "X_domain", ",", "x", ")", "\n", "# This actually evaluates the function", "\n", "return", "self", ".", "eval_indexed", "(", "x_i", ")", "\n", "", "def", "eval_indexed", "(", "self", ",", "x_i", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.eval_indexed": [[326, 328], ["sum", "datasets.FunctionValues._part_eval", "zip"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues._part_eval"], ["", "def", "eval_indexed", "(", "self", ",", "x_i", ")", ":", "\n", "        ", "return", "sum", "(", "[", "self", ".", "_part_eval", "(", "ea_v", ",", "ea_f", ",", "x_i", ")", "for", "ea_v", ",", "ea_f", "in", "zip", "(", "self", ".", "v_flat", ",", "self", ".", "f_list", ")", "]", ")", "\n", "", "def", "part_eval", "(", "self", ",", "index_f", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.part_eval": [[328, 331], ["numpy.searchsorted", "datasets.FunctionValues._part_eval"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues._part_eval"], ["", "def", "part_eval", "(", "self", ",", "index_f", ",", "x", ")", ":", "\n", "        ", "x_i", "=", "np", ".", "searchsorted", "(", "self", ".", "domain", ".", "X_domain", ",", "x", ")", "\n", "return", "[", "[", "self", ".", "_part_eval", "(", "self", ".", "v_flat", "[", "index_f", "]", ",", "self", ".", "f_list", "[", "index_f", "]", ",", "ea_x_i", ")", "]", "for", "ea_x_i", "in", "x_i", "]", "\n", "# Evaluate only that edge, internal function", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues._part_eval": [[332, 334], ["numpy.take", "datasets.ravel_index", "numpy.take"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ravel_index"], ["", "def", "_part_eval", "(", "self", ",", "ea_v", ",", "ea_f", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "take", "(", "ea_f", ",", "ravel_index", "(", "np", ".", "take", "(", "x", ",", "ea_v", ")", ",", "ea_f", ".", "shape", ")", ")", "\n", "", "def", "make_component_function", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FunctionValues.make_component_function": [[334, 339], ["enumerate", "datasets.SyntheticComponentFunction", "functools.partial"], "methods", ["None"], ["", "def", "make_component_function", "(", "self", ")", ":", "\n", "        ", "fn_decomp_lookup", "=", "{", "}", "\n", "for", "i", ",", "decomp", "in", "enumerate", "(", "self", ".", "fn_decomposition", ")", ":", "\n", "            ", "fn_decomp_lookup", "[", "decomp", "]", "=", "partial", "(", "self", ".", "part_eval", ",", "i", ")", "\n", "", "return", "SyntheticComponentFunction", "(", "self", ".", "graph", ",", "fn_decomp_lookup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.__init__": [[341, 345], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataID", ",", "hash_data", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataID", "=", "dataID", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "hash_data", "=", "hash_data", "\n", "", "def", "get_dataset_id", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.get_dataset_id": [[345, 347], ["None"], "methods", ["None"], ["", "def", "get_dataset_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "self", ".", "dataID", "\n", "", "def", "load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.load": [[347, 369], ["datasets.Loader.log_true_graph", "datasets.Loader.cached_file_path", "os.path.isfile", "logging.info", "logging.info", "open", "pickle.load", "isinstance", "hasattr", "object.__init__", "datasets.Loader._load", "logging.info", "networkx.is_isomorphic", "fn.domain.get_gpy_domain", "datasets.Loader.get_nx_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.AncestryGraph.log_true_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.cached_file_path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader._load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Domain.get_gpy_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph"], ["", "def", "load", "(", "self", ")", ":", "\n", "# Save the ground truth network, if it exist", "\n", "        ", "self", ".", "log_true_graph", "(", ")", "\n", "\n", "cached_file_path", "=", "self", ".", "cached_file_path", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cached_file_path", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Loading pre-computed function at {}.\"", ".", "format", "(", "cached_file_path", ")", ")", "\n", "with", "open", "(", "cached_file_path", ",", "'rb'", ")", "as", "handle", ":", "\n", "                ", "fn", ",", "soln", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "if", "isinstance", "(", "self", ",", "NetworkxGraph", ")", ":", "\n", "                    ", "logging", ".", "info", "(", "\"Checking consistency of pre-compute.\"", ")", "\n", "assert", "(", "nx", ".", "is_isomorphic", "(", "fn", ".", "graph", ",", "self", ".", "get_nx_graph", "(", ")", ")", ")", "\n", "\n", "# Super hacks, for compatibility purposes", "\n", "# TODO", "\n", "", "", "if", "not", "hasattr", "(", "fn", ".", "domain", ",", "'model_dimensionality'", ")", ":", "\n", "                ", "super", "(", "Domain", ",", "fn", ".", "domain", ")", ".", "__init__", "(", "fn", ".", "domain", ".", "get_gpy_domain", "(", ")", ")", "\n", "\n", "", "return", "fn", ",", "soln", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"No pre-computed function, computing.\"", ")", "\n", "return", "self", ".", "_load", "(", ")", ",", "None", "\n", "", "", "def", "cached_file_path", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.cached_file_path": [[369, 371], ["common.Config().cache_file", "common.Config"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.cache_file"], ["", "", "def", "cached_file_path", "(", "self", ")", ":", "\n", "        ", "return", "Config", "(", ")", ".", "cache_file", "(", "'{}.pkl'", ".", "format", "(", "self", ".", "hash_data", ")", ")", "\n", "", "def", "save", "(", "self", ",", "fn", ",", "soln", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.save": [[371, 376], ["datasets.Loader.cached_file_path", "logging.info", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.cached_file_path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["", "def", "save", "(", "self", ",", "fn", ",", "soln", ")", ":", "\n", "        ", "cached_file_path", "=", "self", ".", "cached_file_path", "(", ")", "\n", "logging", ".", "info", "(", "\"Saving pre-computed function at {}.\"", ".", "format", "(", "cached_file_path", ")", ")", "\n", "with", "open", "(", "cached_file_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "(", "fn", ",", "soln", ")", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "", "def", "_load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader._load": [[376, 378], ["None"], "methods", ["None"], ["", "", "def", "_load", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "log_true_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.log_true_graph": [[378, 380], ["None"], "methods", ["None"], ["", "def", "log_true_graph", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NASLoader.__init__": [[382, 389], ["datasets.Loader.__init__", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataID", ",", "dimension", ",", "data_random_seed", ",", "hyper_values", ",", "key_map", ",", "parameters", ",", "**", "kwargs", ")", ":", "\n", "        ", "Loader", ".", "__init__", "(", "self", ",", "'{}Nas-DRS{}-D{}'", ".", "format", "(", "dataID", ",", "data_random_seed", ",", "dimension", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "data_random_seed", ")", "\n", "self", ".", "hyper_values", "=", "hyper_values", "\n", "self", ".", "key_map", "=", "key_map", "\n", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "dimension", "=", "dimension", "\n", "", "def", "load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NASLoader.load": [[389, 411], ["datasets.NASLoader.tabular_benchmark_path", "os.path.isfile", "h5py.File", "h5py.File.keys", "datasets.ConfigLosses", "logging.info", "logging.fatal", "numpy.min", "len", "h5py.File.keys", "datasets.Domain"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FcnetLoader.tabular_benchmark_path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "tabular_benchmark_path", "=", "self", ".", "tabular_benchmark_path", "(", ")", "\n", "# No precompute, we load directly", "\n", "if", "os", ".", "path", ".", "isfile", "(", "tabular_benchmark_path", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Found fcnet benchmark at {}\"", ".", "format", "(", "tabular_benchmark_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "fatal", "(", "\"Required fcnet benchmark file - {} is not found\"", ".", "format", "(", "tabular_benchmark_path", ")", ")", "\n", "\n", "", "data", "=", "h5py", ".", "File", "(", "tabular_benchmark_path", ",", "\"r\"", ")", "\n", "\n", "best_k", "=", "None", "\n", "best_validation_error", "=", "np", ".", "inf", "\n", "for", "k", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "validation_error", "=", "np", ".", "min", "(", "data", "[", "k", "]", "[", "\"valid_mse\"", "]", "[", ":", ",", "-", "1", "]", ")", "\n", "if", "best_validation_error", ">", "validation_error", ":", "\n", "                ", "best_k", "=", "k", "\n", "best_validation_error", "=", "validation_error", "\n", "\n", "", "", "soln", "=", "(", "best_k", ",", "best_validation_error", ",", "len", "(", "data", ".", "keys", "(", ")", ")", ")", "\n", "config_losses", "=", "ConfigLosses", "(", "parameters", "=", "self", ".", "parameters", ",", "key_map", "=", "self", ".", "key_map", ",", "domain", "=", "Domain", "(", "self", ".", "dimension", ",", "self", ".", "hyper_values", ")", ",", "data", "=", "data", ",", "rs", "=", "self", ".", "rs", ")", "\n", "\n", "return", "config_losses", ",", "soln", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FcnetLoader.__init__": [[413, 440], ["datasets.NASLoader.__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fcnet_filename", ",", "**", "kwargs", ")", ":", "\n", "        ", "dimension", "=", "9", "\n", "hyper_values", "=", "[", "\n", "np", ".", "array", "(", "[", "0.03125", ",", "0.0625", ",", "0.125", ",", "0.25", ",", "0.5", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.03125", ",", "0.0625", ",", "0.125", ",", "0.25", ",", "0.5", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.0", ",", "0.5", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.0", ",", "0.5", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.0", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.0", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.005", ",", "0.01", ",", "0.05", ",", "0.1", ",", "0.5", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.0", ",", "1.0", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.125", ",", "0.25", ",", "0.5", ",", "1.0", "]", ")", "\n", "]", "\n", "key_map", "=", "[", "\n", "{", "0.03125", ":", "16", ",", "0.0625", ":", "32", ",", "0.125", ":", "64", ",", "0.25", ":", "128", ",", "0.5", ":", "256", ",", "1.0", ":", "512", "}", ",", "\n", "{", "0.03125", ":", "16", ",", "0.0625", ":", "32", ",", "0.125", ":", "64", ",", "0.25", ":", "128", ",", "0.5", ":", "256", ",", "1.0", ":", "512", "}", ",", "\n", "{", "0.0", ":", "0.0", ",", "0.5", ":", "0.3", ",", "1.0", ":", "0.6", "}", ",", "\n", "{", "0.0", ":", "0.0", ",", "0.5", ":", "0.3", ",", "1.0", ":", "0.6", "}", ",", "\n", "{", "0.0", ":", "'relu'", ",", "1.0", ":", "'tanh'", "}", ",", "\n", "{", "0.0", ":", "'relu'", ",", "1.0", ":", "'tanh'", "}", ",", "\n", "{", "0.005", ":", "0.0005", ",", "0.01", ":", "0.001", ",", "0.05", ":", "0.005", ",", "0.1", ":", "0.01", ",", "0.5", ":", "0.05", ",", "1.0", ":", "0.1", "}", ",", "\n", "{", "0.0", ":", "'cosine'", ",", "1.0", ":", "'const'", "}", ",", "\n", "{", "0.125", ":", "8", ",", "0.25", ":", "16", ",", "0.5", ":", "32", ",", "1.0", ":", "64", "}", "\n", "]", "\n", "parameters", "=", "[", "\"n_units_1\"", ",", "\"n_units_2\"", ",", "\"dropout_1\"", ",", "\"dropout_2\"", ",", "\"activation_fn_1\"", ",", "\"activation_fn_2\"", ",", "\"init_lr\"", ",", "\"lr_schedule\"", ",", "\"batch_size\"", "]", "\n", "NASLoader", ".", "__init__", "(", "self", ",", "\"\"", ",", "dimension", "=", "dimension", ",", "hyper_values", "=", "hyper_values", ",", "key_map", "=", "key_map", ",", "parameters", "=", "parameters", ",", "**", "kwargs", ")", "\n", "self", ".", "fcnet_filename", "=", "fcnet_filename", "\n", "", "def", "tabular_benchmark_path", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.FcnetLoader.tabular_benchmark_path": [[440, 442], ["common.Config().fcnet_file", "common.Config"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.fcnet_file"], ["", "def", "tabular_benchmark_path", "(", "self", ")", ":", "\n", "        ", "return", "Config", "(", ")", ".", "fcnet_file", "(", "\"{}.hdf5\"", ".", "format", "(", "self", ".", "fcnet_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader.__init__": [[444, 482], ["datasets.Loader.__init__", "numpy.random.RandomState", "datasets.SyntheticDomain", "list", "networkx.find_cliques", "datasets.SyntheticLoader.get_nx_graph", "tuple", "tuple", "type", "type", "len", "type", "type", "len", "sorted", "networkx.isolates", "sorted", "datasets.SyntheticLoader.get_nx_graph().edges", "datasets.SyntheticLoader.get_nx_graph", "datasets.SyntheticLoader.get_nx_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph"], ["    ", "def", "__init__", "(", "self", ",", "dataID", ",", "dimension", ",", "kernel_params", ",", "data_random_seed", ",", "grid_params", ",", "fn_noise_var", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "fn_noise_var", "=", "fn_noise_var", "\n", "self", ".", "kernel_params", "=", "kernel_params", "\n", "\n", "# Unpack kernel parameter for easy use", "\n", "lengthscale", "=", "kernel_params", "[", "\"lengthscale\"", "]", "\n", "variance", "=", "kernel_params", "[", "\"variance\"", "]", "\n", "\n", "grid_size", "=", "grid_params", "[", "\"grid_size\"", "]", "\n", "domain_lower", "=", "grid_params", "[", "\"domain_lower\"", "]", "\n", "domain_upper", "=", "grid_params", "[", "\"domain_upper\"", "]", "\n", "\n", "Loader", ".", "__init__", "(", "self", ",", "'{}Syn-DRS{}-D{}-Grid{}[{},{}]-L{}V{}'", ".", "format", "(", "dataID", ",", "data_random_seed", ",", "dimension", ",", "grid_size", ",", "domain_lower", ",", "domain_upper", ",", "lengthscale", ",", "variance", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "data_random_seed", ")", "\n", "self", ".", "domain", "=", "SyntheticDomain", "(", "dimension", ",", "grid_size", ",", "domain_lower", ",", "domain_upper", ")", "\n", "\n", "# We will not compute the functions as per cliques as its computationally intractable", "\n", "self", ".", "cliques", "=", "list", "(", "nx", ".", "find_cliques", "(", "self", ".", "get_nx_graph", "(", ")", ")", ")", "\n", "\n", "# We will instead decompose it to 1D and 2D functions", "\n", "# TODO REFACTOR", "\n", "self", ".", "fn_decomposition", "=", "[", "tuple", "(", "sorted", "(", "[", "v", "]", ")", ")", "for", "v", "in", "nx", ".", "isolates", "(", "self", ".", "get_nx_graph", "(", ")", ")", "]", "+", "[", "tuple", "(", "sorted", "(", "e", ")", ")", "for", "e", "in", "self", ".", "get_nx_graph", "(", ")", ".", "edges", "(", ")", "]", "\n", "\n", "# Lengthscale belongs to each function", "\n", "# ground truth lengthscale", "\n", "self", ".", "lengthscale", "=", "lengthscale", "\n", "if", "type", "(", "lengthscale", ")", "==", "float", "or", "type", "(", "lengthscale", ")", "==", "int", ":", "\n", "            ", "self", ".", "dimensional_lengthscale", "=", "[", "lengthscale", "]", "*", "len", "(", "self", ".", "fn_decomposition", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "variance", "=", "variance", "\n", "if", "type", "(", "variance", ")", "==", "float", "or", "type", "(", "variance", ")", "==", "int", ":", "\n", "            ", "self", ".", "dimensional_variance", "=", "[", "variance", "]", "*", "len", "(", "self", ".", "fn_decomposition", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader.get_nx_graph": [[483, 485], ["None"], "methods", ["None"], ["", "", "def", "get_nx_graph", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "generate_functions", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader.generate_functions": [[485, 502], ["collections.defaultdict", "zip", "dim_ls_dict[].append", "list", "list", "datasets.SyntheticLoader.generate_functions_same_distribution", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader.generate_functions_same_distribution"], ["", "def", "generate_functions", "(", "self", ")", ":", "\n", "# Group GPs by dimension and lengthscale", "\n", "# We do this so we can compute really quickly", "\n", "        ", "dim_ls_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "v", ",", "ls", ",", "variance", "in", "zip", "(", "self", ".", "fn_decomposition", ",", "self", ".", "dimensional_lengthscale", ",", "self", ".", "dimensional_variance", ")", ":", "\n", "            ", "dim_ls_dict", "[", "(", "len", "(", "v", ")", ",", "ls", ",", "variance", ")", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "v_list", "=", "[", "]", "\n", "f_list", "=", "[", "]", "\n", "for", "k", "in", "dim_ls_dict", ":", "\n", "            ", "v_dim", ",", "ls", ",", "variance", "=", "k", "\n", "variables", "=", "dim_ls_dict", "[", "k", "]", "\n", "f_list", "+=", "list", "(", "self", ".", "generate_functions_same_distribution", "(", "len", "(", "variables", ")", ",", "ls", ",", "variance", ",", "v_dim", ")", ")", "\n", "v_list", "+=", "list", "(", "variables", ")", "\n", "\n", "# Generate for all length 2, with given lengthscale", "\n", "", "return", "f_list", ",", "v_list", "\n", "# Generates n_functions of GP with dim dimensions with the same lengthscale", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader.generate_functions_same_distribution": [[503, 514], ["datasets.SyntheticLoader.domain.generate_grid", "GPy.kern.RBF", "numpy.zeros", "GPy.kern.RBF.K", "datasets.SyntheticLoader.rs.multivariate_normal", "datasets.SyntheticLoader.reshape"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticDomain.generate_grid"], ["", "def", "generate_functions_same_distribution", "(", "self", ",", "n_functions", ",", "lengthscale", ",", "variance", ",", "v_dim", ")", ":", "\n", "        ", "N", "=", "self", ".", "domain", ".", "grid_size", "\n", "grid", "=", "self", ".", "domain", ".", "generate_grid", "(", "v_dim", ")", "\n", "ker", "=", "GPy", ".", "kern", ".", "RBF", "(", "input_dim", "=", "v_dim", ",", "lengthscale", "=", "lengthscale", ",", "variance", "=", "variance", ")", "\n", "mu", "=", "np", ".", "zeros", "(", "N", "**", "v_dim", ")", "#(N*N)", "\n", "C", "=", "ker", ".", "K", "(", "grid", ",", "grid", ")", "#(N*N)", "\n", "# The following function will generate n_functions * (N*N)", "\n", "fun", "=", "self", ".", "rs", ".", "multivariate_normal", "(", "mu", ",", "C", ",", "(", "n_functions", ")", ",", "check_valid", "=", "'raise'", ")", "\n", "target_shape", "=", "(", "n_functions", ",", ")", "+", "(", "N", ",", ")", "*", "v_dim", "\n", "# Which will need to be reshaped to n_functions * N * N", "\n", "return", "fun", ".", "reshape", "(", "target_shape", ")", "\n", "", "def", "log_true_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader.log_true_graph": [[514, 518], ["networkx.draw", "matplotlib.savefig", "matplotlib.clf", "datasets.SyntheticLoader.get_nx_graph", "common.Config().data_file", "matplotlib.get_cmap", "common.Config"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.data_file"], ["", "def", "log_true_graph", "(", "self", ")", ":", "\n", "        ", "nx", ".", "draw", "(", "self", ".", "get_nx_graph", "(", ")", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", ",", "with_labels", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "Config", "(", ")", ".", "data_file", "(", "'ground_truth_graph.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "", "def", "_load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader._load": [[518, 523], ["datasets.SyntheticLoader.generate_functions", "datasets.FunctionValues", "datasets.SyntheticLoader.get_nx_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SyntheticLoader.generate_functions", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph"], ["", "def", "_load", "(", "self", ")", ":", "\n", "        ", "f_list", ",", "v_list", "=", "self", ".", "generate_functions", "(", ")", "\n", "self", ".", "function", "=", "FunctionValues", "(", "f_list", ",", "v_list", ",", "self", ".", "domain", ",", "self", ".", "fn_decomposition", ",", "self", ".", "get_nx_graph", "(", ")", ",", "self", ".", "kernel_params", ",", "self", ".", "rs", ",", "self", ".", "fn_noise_var", ")", "\n", "\n", "return", "self", ".", "function", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.__init__": [[525, 532], ["datasets.NetworkxGraph.make_graph", "networkx.freeze", "logging.info", "datasets.SyntheticLoader.__init__", "networkx.convert_node_labels_to_integers", "networkx.freeze.edges"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "data_random_seed", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data_random_seed", "=", "data_random_seed", "\n", "G", "=", "self", ".", "make_graph", "(", "dimension", ")", "\n", "G", "=", "nx", ".", "freeze", "(", "nx", ".", "convert_node_labels_to_integers", "(", "G", ")", ")", "\n", "self", ".", "true_dependency_graph", "=", "G", "\n", "logging", ".", "info", "(", "\"Graph Edges: {}\"", ".", "format", "(", "G", ".", "edges", "(", ")", ")", ")", "\n", "SyntheticLoader", ".", "__init__", "(", "self", ",", "\"-NetX\"", ",", "dimension", ",", "data_random_seed", "=", "data_random_seed", ",", "**", "kwargs", ")", "\n", "", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.make_graph": [[532, 534], ["None"], "methods", ["None"], ["", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "get_nx_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph": [[534, 536], ["None"], "methods", ["None"], ["", "def", "get_nx_graph", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "true_dependency_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.EmptyGraph.make_graph": [[538, 540], ["networkx.empty_graph"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "return", "nx", ".", "empty_graph", "(", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.PathGraph.make_graph": [[542, 544], ["networkx.path_graph"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "return", "nx", ".", "path_graph", "(", "dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.TestGraph.make_graph": [[546, 548], ["networkx.random_partition_graph"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "return", "nx", ".", "random_partition_graph", "(", "[", "1", ",", "1", ",", "2", ",", "2", ",", "3", "]", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ErdosRenyiGraph.make_graph": [[550, 552], ["networkx.erdos_renyi_graph", "numpy.random.RandomState().rand", "numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "return", "nx", ".", "erdos_renyi_graph", "(", "dimension", ",", "np", ".", "random", ".", "RandomState", "(", "self", ".", "data_random_seed", ")", ".", "rand", "(", ")", ",", "seed", "=", "self", ".", "data_random_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.StarGraph.make_graph": [[554, 557], ["networkx.star_graph"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "#Return the Star graph with n+1 nodes: one center node, connected to n outer nodes.", "\n", "        ", "return", "nx", ".", "star_graph", "(", "dimension", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.GridGraph.make_graph": [[559, 564], ["int", "numpy.isclose", "networkx.grid_2d_graph", "numpy.sqrt"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "n", "=", "int", "(", "np", ".", "sqrt", "(", "dimension", ")", ")", "\n", "# Ensure perfect square", "\n", "assert", "(", "np", ".", "isclose", "(", "n", "**", "2", ",", "dimension", ")", ")", "\n", "return", "nx", ".", "grid_2d_graph", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.GridLargeGraph.load": [[566, 586], ["datasets.GridLargeGraph.log_true_graph", "datasets.GridLargeGraph.cached_file_path", "os.path.isfile", "logging.info", "logging.info", "datasets.Loader.load", "datasets.GridLargeGraph.save", "open", "pickle.load", "isinstance", "logging.info", "networkx.is_isomorphic", "datasets.GridLargeGraph.get_nx_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.AncestryGraph.log_true_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Loader.cached_file_path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph"], ["    ", "def", "load", "(", "self", ")", ":", "\n", "# Save the ground truth network, if it exist", "\n", "        ", "self", ".", "log_true_graph", "(", ")", "\n", "\n", "cached_file_path", "=", "self", ".", "cached_file_path", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cached_file_path", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Loading pre-computed function at {}.\"", ".", "format", "(", "cached_file_path", ")", ")", "\n", "with", "open", "(", "cached_file_path", ",", "'rb'", ")", "as", "handle", ":", "\n", "                ", "fn", ",", "soln", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "if", "isinstance", "(", "self", ",", "NetworkxGraph", ")", ":", "\n", "                    ", "logging", ".", "info", "(", "\"Checking consistency of pre-compute.\"", ")", "\n", "assert", "(", "nx", ".", "is_isomorphic", "(", "fn", ".", "graph", ",", "self", ".", "get_nx_graph", "(", ")", ")", ")", "\n", "\n", "", "", "return", "fn", ",", "soln", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"Pre-computed function has no answer\"", ")", "\n", "fn", ",", "soln", "=", "super", "(", ")", ".", "load", "(", ")", "\n", "soln", "=", "(", "None", ",", "0", ",", "0", ")", "\n", "self", ".", "save", "(", "fn", ",", "soln", ")", "\n", "return", "fn", ",", "soln", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.GridGraph34.make_graph": [[588, 591], ["networkx.grid_2d_graph"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "assert", "(", "dimension", "==", "12", ")", "\n", "return", "nx", ".", "grid_2d_graph", "(", "4", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.PartitionGraph.make_graph": [[593, 596], ["networkx.random_partition_graph"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "assert", "(", "dimension", "==", "12", ")", "\n", "return", "nx", ".", "random_partition_graph", "(", "[", "3", ",", "3", ",", "3", ",", "3", "]", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SparseErdosRenyiGraph.make_graph": [[598, 600], ["networkx.erdos_renyi_graph"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "return", "nx", ".", "erdos_renyi_graph", "(", "dimension", ",", "2.0", "/", "dimension", ",", "seed", "=", "self", ".", "data_random_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.PowerlawTree.make_graph": [[602, 605], ["sys.setrecursionlimit", "networkx.random_powerlaw_tree"], "methods", ["None"], ["    ", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "        ", "sys", ".", "setrecursionlimit", "(", "1500", ")", "\n", "return", "nx", ".", "random_powerlaw_tree", "(", "dimension", ",", "seed", "=", "self", ".", "data_random_seed", ",", "tries", "=", "dimension", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.AncestryGraph.__init__": [[607, 614], ["datasets.AncestryGraph.make_graph", "networkx.freeze", "logging.info", "datasets.SyntheticLoader.__init__", "networkx.freeze.edges"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "data_random_seed", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data_random_seed", "=", "data_random_seed", "\n", "G", "=", "self", ".", "make_graph", "(", "dimension", ")", "\n", "G", "=", "nx", ".", "freeze", "(", "G", ")", "\n", "self", ".", "true_dependency_graph", "=", "G", "\n", "logging", ".", "info", "(", "\"Graph Edges: {}\"", ".", "format", "(", "G", ".", "edges", "(", ")", ")", ")", "\n", "SyntheticLoader", ".", "__init__", "(", "self", ",", "\"-NetX\"", ",", "dimension", ",", "data_random_seed", "=", "data_random_seed", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.AncestryGraph.make_graph": [[615, 620], ["pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "# recursion limit", "\n", "        ", "assert", "(", "dimension", "==", "132", ")", "\n", "G", ",", "self", ".", "shells", "=", "pickle", ".", "load", "(", "open", "(", "\"data/ancestry.pkl\"", ",", "'rb'", ")", ")", "\n", "return", "G", "\n", "", "def", "log_true_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.AncestryGraph.log_true_graph": [[620, 626], ["networkx.shell_layout", "networkx.draw", "matplotlib.savefig", "matplotlib.clf", "datasets.AncestryGraph.get_nx_graph", "datasets.AncestryGraph.get_nx_graph", "common.Config().data_file", "matplotlib.get_cmap", "common.Config"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.NetworkxGraph.get_nx_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.data_file"], ["", "def", "log_true_graph", "(", "self", ")", ":", "\n", "# plt.rcParams['figure.figsize'] = [15, 15]", "\n", "        ", "pos", "=", "nx", ".", "shell_layout", "(", "self", ".", "get_nx_graph", "(", ")", ",", "self", ".", "shells", ")", "\n", "nx", ".", "draw", "(", "self", ".", "get_nx_graph", "(", ")", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", ",", "with_labels", "=", "True", ",", "pos", "=", "pos", ")", "\n", "plt", ".", "savefig", "(", "Config", "(", ")", ".", "data_file", "(", "'ground_truth_graph.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.__init__": [[628, 635], ["datasets.DebugGraph.make_graph", "networkx.freeze", "logging.info", "datasets.SyntheticLoader.__init__", "networkx.freeze.edges"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "data_random_seed", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data_random_seed", "=", "data_random_seed", "\n", "G", "=", "self", ".", "make_graph", "(", "dimension", ")", "\n", "G", "=", "nx", ".", "freeze", "(", "G", ")", "\n", "self", ".", "true_dependency_graph", "=", "G", "\n", "logging", ".", "info", "(", "\"Graph Edges: {}\"", ".", "format", "(", "G", ".", "edges", "(", ")", ")", ")", "\n", "SyntheticLoader", ".", "__init__", "(", "self", ",", "\"-NetX\"", ",", "dimension", ",", "data_random_seed", "=", "data_random_seed", ",", "**", "kwargs", ")", "\n", "", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.DebugGraph.make_graph": [[635, 640], ["networkx.read_gpickle", "len", "networkx.read_gpickle.nodes"], "methods", ["None"], ["", "def", "make_graph", "(", "self", ",", "dimension", ")", ":", "\n", "# recursion limit", "\n", "        ", "G", "=", "nx", ".", "read_gpickle", "(", "\"graph.pkl\"", ")", "\n", "assert", "(", "dimension", "==", "len", "(", "G", ".", "nodes", "(", ")", ")", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.MpsLoader.__init__": [[643, 656], ["print", "datasets.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mps_filename", ",", "infinite", ",", "time_limit", ",", "max_floor", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "dimension", "=", "lpsolve_config", ".", "dimension", "\n", "print", "(", "lpsolve_config", ".", "dimension", ")", "\n", "self", ".", "hyper_values", "=", "lpsolve_config", ".", "hyper_values", "\n", "self", ".", "key_map", "=", "lpsolve_config", ".", "key_map", "\n", "self", ".", "parameters", "=", "lpsolve_config", ".", "parameters", "\n", "\n", "self", ".", "mps_filename", "=", "mps_filename", "\n", "self", ".", "infinite", "=", "infinite", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "max_floor", "=", "max_floor", "\n", "Loader", ".", "__init__", "(", "self", ",", "'{}-Mps-D{}'", ".", "format", "(", "mps_filename", ",", "self", ".", "dimension", ")", ",", "**", "kwargs", ")", "\n", "", "def", "mps_path", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.MpsLoader.mps_path": [[656, 658], ["common.Config().mps_file", "common.Config"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.common.Config.mps_file"], ["", "def", "mps_path", "(", "self", ")", ":", "\n", "        ", "return", "Config", "(", ")", ".", "mps_file", "(", "\"{}.mps\"", ".", "format", "(", "self", ".", "mps_filename", ")", ")", "\n", "", "def", "load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.MpsLoader.load": [[658, 669], ["datasets.MpsLoader.mps_path", "os.path.isfile", "datasets.ExecuteLPSolve", "logging.info", "logging.fatal", "datasets.Domain"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.MpsLoader.mps_path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "mps_path", "=", "self", ".", "mps_path", "(", ")", "\n", "# No precompute, we load directly", "\n", "if", "os", ".", "path", ".", "isfile", "(", "mps_path", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Found MPS File at {}\"", ".", "format", "(", "mps_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "fatal", "(", "\"Required MPS File - {} is not found\"", ".", "format", "(", "mps_path", ")", ")", "\n", "\n", "", "config_losses", "=", "ExecuteLPSolve", "(", "parameters", "=", "self", ".", "parameters", ",", "key_map", "=", "self", ".", "key_map", ",", "domain", "=", "Domain", "(", "self", ".", "dimension", ",", "self", ".", "hyper_values", ")", ",", "mps_path", "=", "mps_path", ",", "infinite", "=", "self", ".", "infinite", ",", "time_limit", "=", "self", ".", "time_limit", ",", "max_floor", "=", "self", ".", "max_floor", ")", "\n", "\n", "return", "config_losses", ",", "(", "None", ",", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ExecuteLPSolve.__init__": [[672, 682], ["datasets.Function.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "key_map", ",", "domain", ",", "mps_path", ",", "infinite", ",", "time_limit", ",", "max_floor", ")", ":", "\n", "        ", "Function", ".", "__init__", "(", "self", ",", "domain", ")", "\n", "self", ".", "parameters", "=", "parameters", "\n", "self", ".", "dim", "=", "len", "(", "parameters", ")", "\n", "self", ".", "mps_path", "=", "mps_path", "\n", "self", ".", "key_map", "=", "key_map", "\n", "self", ".", "graph", "=", "None", "\n", "self", ".", "infinite", "=", "infinite", "\n", "self", ".", "time_limit", "=", "time_limit", "\n", "self", ".", "max_floor", "=", "max_floor", "\n", "", "def", "eval", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ExecuteLPSolve.eval": [[682, 706], ["print", "json.dumps", "json.dumps", "json.dumps", "json.dumps", "logging.debug", "logging.info", "subprocess.check_output", "logging.info", "re.findall", "min", "x.tolist", "str", "float"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "eval", "(", "self", ",", "x", ")", ":", "\n", "        ", "print", "(", "x", ")", "\n", "args", "=", "json", ".", "dumps", "(", "{", "\n", "\"x\"", ":", "x", ".", "tolist", "(", ")", ",", "\n", "\"mps_path\"", ":", "self", ".", "mps_path", ",", "\n", "\"infinite\"", ":", "self", ".", "infinite", ",", "\n", "\"time_limit\"", ":", "self", ".", "time_limit", "}", ")", "\n", "\n", "#os.system('python ./hdbo/lpsolve.py \\'{}\\' '.format(args))", "\n", "cmd", "=", "'python ./hdbo/lpsolve.py \\'{}\\' '", ".", "format", "(", "args", ")", "\n", "logging", ".", "debug", "(", "cmd", ")", "\n", "try", ":", "\n", "            ", "output", "=", "subprocess", ".", "check_output", "(", "cmd", ",", "stderr", "=", "subprocess", ".", "STDOUT", ",", "shell", "=", "True", ",", "timeout", "=", "self", ".", "time_limit", "*", "5", ")", "\n", "logging", ".", "info", "(", "output", ")", "\n", "obj_val_str", "=", "re", ".", "findall", "(", "r\"RETURN_OBJECTIVE_VALUE:\\((\\d*(?:\\.\\d*)?(?:e[\\+|-]{0,1}\\d+){0,1})\\)\"", ",", "str", "(", "output", ")", ")", "\n", "objective", "=", "min", "(", "float", "(", "obj_val_str", "[", "0", "]", ")", ",", "self", ".", "max_floor", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "#logging.exception(\"LPSOLVE Exception\")", "\n", "#logging.error(\"cmd: {}\".format(cmd))", "\n", "            ", "objective", "=", "self", ".", "max_floor", "\n", "\n", "", "logging", ".", "info", "(", "\"Objective Value: {}\"", ".", "format", "(", "objective", ")", ")", "\n", "\n", "return", "objective", "\n", "# =======================================================================", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibLoader.__init__": [[708, 714], ["datasets.Loader.__init__", "datasets.HpolibLoader.make_hpo_fn", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.CamelbackAug.make_hpo_fn"], ["    ", "def", "__init__", "(", "self", ",", "data_random_seed", ",", "grid_size", ",", "fn_noise_var", ",", "**", "kwargs", ")", ":", "\n", "        ", "Loader", ".", "__init__", "(", "self", ",", "\"Hpolib\"", ",", "**", "kwargs", ")", "\n", "self", ".", "hpo_fn", "=", "self", ".", "make_hpo_fn", "(", ")", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "data_random_seed", ")", "\n", "self", ".", "fn_noise_var", "=", "fn_noise_var", "\n", "", "def", "load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibLoader.load": [[714, 722], ["datasets.HpolibLoader.hpo_fn.get_meta_information", "datasets.HpoDomain", "datasets.HpolibWrapper"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "\n", "        ", "info", "=", "self", ".", "hpo_fn", ".", "get_meta_information", "(", ")", "\n", "soln", "=", "(", "info", "[", "'optima'", "]", ",", "info", "[", "'f_opt'", "]", ",", "None", ")", "\n", "domain", "=", "HpoDomain", "(", "self", ".", "grid_size", ",", "info", "[", "'bounds'", "]", ")", "\n", "hpo_fn_wrapper", "=", "HpolibWrapper", "(", "domain", ",", "self", ".", "hpo_fn", ",", "self", ".", "rs", ",", "self", ".", "fn_noise_var", ")", "\n", "\n", "return", "hpo_fn_wrapper", ",", "soln", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibWrapper.__init__": [[725, 729], ["datasets.NoisyFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain", ",", "hpo_fn", ",", "rs", ",", "fn_noise_var", ")", ":", "\n", "        ", "NoisyFunction", ".", "__init__", "(", "self", ",", "domain", ",", "rs", ",", "fn_noise_var", ")", "\n", "self", ".", "hpo_fn", "=", "hpo_fn", "\n", "self", ".", "graph", "=", "None", "\n", "", "def", "eval", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibWrapper.eval": [[729, 732], ["datasets.HpolibWrapper.hpo_fn"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "X", ")", ":", "\n", "        ", "x", "=", "X", "[", "0", "]", "\n", "return", "self", ".", "hpo_fn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpoDomain.__init__": [[736, 747], ["len", "list", "datasets.Domain.__init__", "joint_domain.append", "range", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["    ", "def", "__init__", "(", "self", ",", "grid_size", ",", "hpo_bounds", ")", ":", "\n", "        ", "self", ".", "grid_size", "=", "grid_size", "\n", "dimension", "=", "len", "(", "hpo_bounds", ")", "\n", "\n", "joint_domain", "=", "[", "]", "\n", "all_lower", ",", "all_upper", "=", "hpo_bounds", "[", "0", "]", "\n", "for", "domain_lower", ",", "domain_upper", "in", "hpo_bounds", ":", "\n", "            ", "joint_domain", ".", "append", "(", "np", ".", "linspace", "(", "domain_lower", ",", "domain_upper", ",", "grid_size", ")", ")", "\n", "\n", "", "self", ".", "index_domain", "=", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", "\n", "Domain", ".", "__init__", "(", "self", ",", "dimension", ",", "joint_domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Rosenbrock20D.make_hpo_fn": [[751, 753], ["hpolib.benchmarks.synthetic_functions.rosenbrock.Rosenbrock20D"], "methods", ["None"], ["    ", "def", "make_hpo_fn", "(", "self", ")", ":", "\n", "        ", "return", "synthetic_functions", ".", "rosenbrock", ".", "Rosenbrock20D", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Hartmann6.make_hpo_fn": [[755, 757], ["hpolib.benchmarks.synthetic_functions.Hartmann6"], "methods", ["None"], ["    ", "def", "make_hpo_fn", "(", "self", ")", ":", "\n", "        ", "return", "synthetic_functions", ".", "Hartmann6", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Camelback.make_hpo_fn": [[759, 761], ["hpolib.benchmarks.synthetic_functions.Camelback"], "methods", ["None"], ["    ", "def", "make_hpo_fn", "(", "self", ")", ":", "\n", "        ", "return", "synthetic_functions", ".", "Camelback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibAugLoader.__init__": [[768, 779], ["datasets.HpolibLoader.__init__", "datasets.HpolibAugLoader.hpo_fn.get_meta_information", "len", "datasets.HpolibAugLoader.rs.permutation", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_dimension", ",", "**", "kwargs", ")", ":", "\n", "        ", "HpolibLoader", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "self", ".", "aug_dimension", "=", "aug_dimension", "\n", "\n", "info", "=", "self", ".", "hpo_fn", ".", "get_meta_information", "(", ")", "\n", "self", ".", "actual_dimension", "=", "len", "(", "info", "[", "'bounds'", "]", ")", "\n", "total_dimension", "=", "self", ".", "actual_dimension", "+", "self", ".", "aug_dimension", "\n", "\n", "# Compute the permutations", "\n", "self", ".", "per", "=", "self", ".", "rs", ".", "permutation", "(", "total_dimension", ")", "\n", "self", ".", "inv_per", "=", "np", ".", "argsort", "(", "self", ".", "per", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibAugLoader.load": [[780, 802], ["datasets.HpolibAugLoader.hpo_fn.get_meta_information", "zip", "print", "min", "max", "numpy.array", "datasets.HpoDomain", "datasets.HpolibAugWrapper", "numpy.concatenate", "numpy.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "load", "(", "self", ")", ":", "\n", "\n", "        ", "info", "=", "self", ".", "hpo_fn", ".", "get_meta_information", "(", ")", "\n", "\n", "opt_x", "=", "np", ".", "concatenate", "(", "[", "info", "[", "'optima'", "]", "[", "0", "]", ",", "np", ".", "zeros", "(", "self", ".", "aug_dimension", ")", "]", ")", "[", "self", ".", "per", "]", "\n", "soln", "=", "(", "opt_x", ",", "info", "[", "'f_opt'", "]", ",", "None", ")", "\n", "\n", "# This is fine because the bounds are uniform", "\n", "bounds", "=", "info", "[", "'bounds'", "]", "\n", "lowers", ",", "uppers", "=", "zip", "(", "*", "bounds", ")", "\n", "print", "(", "bounds", ")", "\n", "\n", "self", ".", "aug_lower", "=", "min", "(", "lowers", ")", "\n", "self", ".", "aug_upper", "=", "max", "(", "uppers", ")", "\n", "\n", "bounds", "=", "bounds", "+", "[", "[", "self", ".", "aug_lower", ",", "self", ".", "aug_upper", "]", "for", "i", "in", "range", "(", "self", ".", "aug_dimension", ")", "]", "\n", "bounds", "=", "np", ".", "array", "(", "bounds", ")", "\n", "\n", "domain", "=", "HpoDomain", "(", "self", ".", "grid_size", ",", "bounds", "[", "self", ".", "per", "]", ")", "\n", "hpo_fn_wrapper", "=", "HpolibAugWrapper", "(", "domain", ",", "self", ".", "actual_dimension", ",", "self", ".", "inv_per", ",", "self", ".", "hpo_fn", ",", "self", ".", "rs", ",", "self", ".", "fn_noise_var", ")", "\n", "\n", "return", "hpo_fn_wrapper", ",", "soln", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Hartmann6Aug.make_hpo_fn": [[804, 806], ["hpolib.benchmarks.synthetic_functions.Hartmann6"], "methods", ["None"], ["    ", "def", "make_hpo_fn", "(", "self", ")", ":", "\n", "        ", "return", "synthetic_functions", ".", "Hartmann6", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.CamelbackAug.make_hpo_fn": [[808, 810], ["hpolib.benchmarks.synthetic_functions.Camelback"], "methods", ["None"], ["    ", "def", "make_hpo_fn", "(", "self", ")", ":", "\n", "        ", "return", "synthetic_functions", ".", "Camelback", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibAugWrapper.__init__": [[813, 817], ["datasets.HpolibWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain", ",", "actual_dimension", ",", "inv_per", ",", "hpo_fn", ",", "rs", ",", "fn_noise_var", ")", ":", "\n", "        ", "HpolibWrapper", ".", "__init__", "(", "self", ",", "domain", ",", "hpo_fn", ",", "rs", ",", "fn_noise_var", ")", "\n", "self", ".", "inv_per", "=", "inv_per", "\n", "self", ".", "actual_dimension", "=", "actual_dimension", "\n", "", "def", "eval", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibAugWrapper.eval": [[817, 822], ["datasets.HpolibAugWrapper.hpo_fn"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "X", "[", "0", "]", "# Compatibility", "\n", "X", "=", "X", "[", "self", ".", "inv_per", "]", "# undo permutation", "\n", "X", "=", "X", "[", ":", "self", ".", "actual_dimension", "]", "# take active dimensions", "\n", "return", "self", ".", "hpo_fn", "(", "X", ")", "\n", "", "def", "get_emb_dim", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.HpolibAugWrapper.get_emb_dim": [[822, 824], ["None"], "methods", ["None"], ["", "def", "get_emb_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actual_dimension", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Gaussian.__init__": [[827, 832], ["datasets.Loader.__init__", "datasets.SyntheticDomain", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "grid_size", ",", "initial_value", ",", "**", "kwargs", ")", ":", "\n", "        ", "Loader", ".", "__init__", "(", "self", ",", "\"Gaussian\"", ",", "**", "kwargs", ")", "\n", "self", ".", "domain", "=", "SyntheticDomain", "(", "dimension", ",", "grid_size", ",", "-", "1.0", ",", "1.0", ")", "\n", "self", ".", "initial_value", "=", "initial_value", "\n", "self", ".", "soln", "=", "(", "np", ".", "zeros", "(", "dimension", ")", ",", "-", "1.0", ",", "None", ")", "\n", "", "def", "load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Gaussian.load": [[832, 834], ["datasets.SimpleSyntheticFn"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "return", "SimpleSyntheticFn", "(", "self", ".", "domain", ")", ",", "self", ".", "soln", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SimpleSyntheticFn.__init__": [[836, 839], ["datasets.Function.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "Function", ".", "__init__", "(", "self", ",", "domain", ")", "\n", "self", ".", "graph", "=", "None", "\n", "", "def", "eval", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.SimpleSyntheticFn.eval": [[839, 843], ["numpy.atleast_2d", "numpy.exp", "numpy.sum", "numpy.square"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", "[", "0", "]", ")", "\n", "Y", "=", "np", ".", "exp", "(", "-", "4", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "X", ")", ",", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "return", "-", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Stybtang.__init__": [[845, 851], ["datasets.Loader.__init__", "numpy.random.RandomState", "datasets.SyntheticDomain", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "grid_size", ",", "data_random_seed", ",", "fn_noise_var", ",", "**", "kwargs", ")", ":", "\n", "        ", "Loader", ".", "__init__", "(", "self", ",", "\"Stybtang\"", ",", "**", "kwargs", ")", "\n", "self", ".", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "data_random_seed", ")", "\n", "self", ".", "fn_noise_var", "=", "fn_noise_var", "\n", "self", ".", "domain", "=", "SyntheticDomain", "(", "dimension", ",", "grid_size", ",", "-", "4.0", ",", "4.0", ")", "\n", "self", ".", "soln", "=", "(", "np", ".", "array", "(", "[", "-", "2.903534", "]", "*", "dimension", ")", ",", "-", "39.16599", "*", "dimension", ",", "None", ")", "\n", "", "def", "load", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Stybtang.load": [[851, 853], ["datasets.StybtangFn"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "return", "StybtangFn", "(", "self", ".", "domain", ",", "self", ".", "rs", ",", "self", ".", "fn_noise_var", ")", ",", "self", ".", "soln", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.StybtangFn.__init__": [[855, 858], ["datasets.NoisyFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain", ",", "rs", ",", "fn_noise_var", ")", ":", "\n", "        ", "NoisyFunction", ".", "__init__", "(", "self", ",", "domain", ",", "rs", ",", "fn_noise_var", ")", "\n", "self", ".", "graph", "=", "None", "\n", "", "def", "eval", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.StybtangFn.eval": [[858, 862], ["numpy.atleast_2d", "numpy.sum"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", "[", "0", "]", ")", "\n", "Y", "=", "np", ".", "sum", "(", "X", "**", "4", "-", "16.", "*", "X", "**", "2", "+", "5.", "*", "X", ",", "axis", "=", "1", ")", "/", "2.", "\n", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.__init__": [[870, 883], ["datasets.NoisyFunction.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "f_adapted", ",", "x_bounds_adapted", ",", "results_file_name", ",", "failed_file_name", ",", "nchannel", ",", "low_dim", ",", "high_dim", ",", "dim_reduction", ",", "obj_func", ",", "cnn", ",", "**", "kwargs", ")", ":", "\n", "        ", "NoisyFunction", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "self", ".", "f_adapted", "=", "f_adapted", "\n", "self", ".", "x_bounds_adapted", "=", "x_bounds_adapted", "\n", "self", ".", "results_file_name", "=", "results_file_name", "\n", "self", ".", "failed_file_name", "=", "failed_file_name", "\n", "self", ".", "nchannel", "=", "nchannel", "\n", "self", ".", "low_dim", "=", "low_dim", "\n", "self", ".", "high_dim", "=", "high_dim", "\n", "self", ".", "dim_reduction", "=", "dim_reduction", "\n", "self", ".", "obj_func", "=", "obj_func", "\n", "self", ".", "cnn", "=", "cnn", "\n", "self", ".", "graph", "=", "None", "\n", "", "def", "eval", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval": [[883, 885], ["datasets.BattackFn.f_adapted"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "f_adapted", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.mlflow_logging": [[891, 895], ["None"], "methods", ["None"], ["", "@", "mlflow_logging", ".", "setter", "\n", "def", "mlflow_logging", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "cnn", ".", "mlflow_logging", "=", "value", "\n", "self", ".", "_mlflow_logging", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackDomain.__init__": [[898, 901], ["datasets.SyntheticDomain.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dimension", ",", "grid_size", ",", "domain_lower", ",", "domain_upper", ",", "x_bounds_adapted", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dimension", ",", "grid_size", ",", "domain_lower", ",", "domain_upper", ")", "\n", "self", ".", "x_bounds_adapted", "=", "x_bounds_adapted", "\n", "", "def", "random_X", "(", "self", ",", "rs", ",", "n_rand", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackDomain.random_X": [[901, 904], ["boattack.utilities.utilities.get_init_data"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.get_init_data"], ["", "def", "random_X", "(", "self", ",", "rs", ",", "n_rand", ")", ":", "\n", "        ", "inital_design", ",", "y_init", "=", "get_init_data", "(", "obj_func", "=", "None", ",", "n_init", "=", "n_rand", ",", "bounds", "=", "self", ".", "x_bounds_adapted", ")", "\n", "return", "inital_design", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BayesianAttackLoader.__init__": [[906, 1003], ["datasets.Loader.__init__", "numpy.random.RandomState", "tf.config.experimental.list_physical_devices", "boattack.objective_func.objective_functions_tf.CNN", "boattack.objective_func.objective_functions_tf.CNN.get_data_sample", "logging.info", "os.path.join", "os.path.join", "datasets.BattackFn", "numpy.vstack", "numpy.vstack", "os.path.exists", "os.makedirs", "common.Config", "common.Config", "datasets.BattackDomain", "tf.config.experimental.set_memory_growth", "tf.config.experimental.list_logical_devices", "print", "boattack.objective_func.objective_functions_tf.CNN.np_evaluate_bili", "boattack.objective_func.objective_functions_tf.CNN.np_upsample_evaluate_bili", "boattack.objective_func.objective_functions_tf.CNN.np_evaluate", "boattack.objective_func.objective_functions_tf.CNN.np_upsample_evaluate", "len", "len", "len", "print"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.get_data_sample", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_evaluate_bili", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_upsample_evaluate_bili", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_upsample_evaluate"], ["    ", "def", "__init__", "(", "self", ",", "obj_func", ",", "model_type", ",", "seed", ",", "tg", ",", "\n", "img_offset", ",", "low_dim", "=", "2304", ",", "batch_size", "=", "1", ",", "acq_type", "=", "'LCB'", ",", "num_iter", "=", "40", ",", "target_label", "=", "0", ",", "dim_reduction", "=", "'BILI'", ",", "\n", "cost_metric", "=", "None", ",", "obj_metric", "=", "2", ",", "update_freq", "=", "10", ",", "high_dim", "=", "None", ",", "\n", "nchannel", "=", "None", ",", "epsilon", "=", "None", ",", "grid_size", "=", "None", ",", "fn_noise_var", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "Loader", ".", "__init__", "(", "self", ",", "f'BayesianAttack-{obj_func}'", ",", "**", "kwargs", ")", "\n", "self", ".", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "fn_noise_var", "=", "fn_noise_var", "\n", "\n", "# This is to prevent some strange error.", "\n", "import", "tensorflow", "as", "tf", "\n", "gpus", "=", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "'GPU'", ")", "\n", "if", "gpus", ":", "\n", "            ", "for", "gpu", "in", "gpus", ":", "\n", "                ", "try", ":", "\n", "                    ", "tf", ".", "config", ".", "experimental", ".", "set_memory_growth", "(", "gpu", ",", "True", ")", "\n", "logical_gpus", "=", "tf", ".", "config", ".", "experimental", ".", "list_logical_devices", "(", "'GPU'", ")", "\n", "print", "(", "len", "(", "gpus", ")", ",", "\"Physical GPUs,\"", ",", "len", "(", "logical_gpus", ")", ",", "\"Logical GPUs\"", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "\n", "# Specify directory to store all the trash", "\n", "#directory = './'", "\n", "", "", "", "directory", "=", "Config", "(", ")", ".", "ba_path", "+", "'/'", "\n", "model_directory", "=", "Config", "(", ")", ".", "ba_models", "+", "'/'", "\n", "\n", "if", "'LDR'", "in", "model_type", ":", "\n", "            ", "low_dim", "=", "high_dim", "\n", "\n", "", "if", "dim_reduction", "==", "'NONE'", ":", "\n", "            ", "x_bounds", "=", "np", ".", "vstack", "(", "[", "[", "-", "1", ",", "1", "]", "]", "*", "high_dim", "*", "nchannel", ")", "\n", "", "else", ":", "\n", "            ", "x_bounds", "=", "np", ".", "vstack", "(", "[", "[", "-", "1", ",", "1", "]", "]", "*", "low_dim", "*", "nchannel", ")", "\n", "\n", "# Specify the experiment results saving directory", "\n", "", "results_data_folder", "=", "f'{directory}exp_results/{obj_func}_tf_{model_type}_ob{obj_metric}_'", "f'_freq{update_freq}_ld{low_dim}_{dim_reduction}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_data_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "results_data_folder", ")", "\n", "\n", "# Define the model and the original images to be attacked", "\n", "", "cnn", "=", "CNN", "(", "dataset_name", "=", "obj_func", ",", "img_offset", "=", "img_offset", ",", "epsilon", "=", "epsilon", ",", "\n", "dim_reduction", "=", "dim_reduction", ",", "low_dim", "=", "low_dim", ",", "high_dim", "=", "high_dim", ",", "\n", "obj_metric", "=", "obj_metric", ",", "results_folder", "=", "results_data_folder", ",", "\n", "directory", "=", "model_directory", ",", "rs", "=", "self", ".", "rs", ")", "\n", "\n", "# For each image, define the target class", "\n", "'''\n        if ntargets > 1:\n            target_list = list(range(ntargets))\n        else:\n            target_list = [target_label]\n        '''", "\n", "# Start attack each target in sequence", "\n", "cnn", ".", "get_data_sample", "(", "tg", ")", "\n", "input_label", "=", "cnn", ".", "input_label", "\n", "img_id", "=", "cnn", ".", "orig_img_id", "\n", "target_label", "=", "cnn", ".", "target_label", "[", "0", "]", "\n", "\n", "'''\n        from collections import Counter\n        cnt = Counter()\n        for i in range(10):\n            self.rs = np.random.RandomState(seed)\n            cnn = CNN(dataset_name=obj_func, img_offset=i, epsilon=epsilon,\n                dim_reduction=dim_reduction, low_dim=low_dim, high_dim=high_dim,\n                obj_metric=obj_metric, results_folder=results_data_folder,\n                directory=model_directory, rs=self.rs)\n            cnn.get_data_sample(tg)\n            print(cnn.input_label)\n            cnt[cnn.input_label] += 1\n        print(cnt)\n        input()\n        '''", "\n", "\n", "logging", ".", "info", "(", "f'id={img_offset}, origin={input_label}, target={target_label}, eps={epsilon}, dr={low_dim}'", ")", "\n", "\n", "# Define the BO objective function", "\n", "if", "obj_func", "==", "'imagenet'", ":", "\n", "            ", "if", "'LDR'", "in", "model_type", "or", "dim_reduction", "==", "'NONE'", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_evaluate_bili", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_upsample_evaluate_bili", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'LDR'", "in", "model_type", "or", "dim_reduction", "==", "'NONE'", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_evaluate", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_upsample_evaluate", "(", "x", ")", "\n", "\n", "# Define the name of results file and failure fail(for debug or resume)", "\n", "", "", "results_file_name", "=", "os", ".", "path", ".", "join", "(", "results_data_folder", ",", "\n", "f'{model_type}{acq_type}{batch_size}_{dim_reduction}_d{low_dim}_i{input_label}_t{target_label}_id{img_id}'", ")", "\n", "failed_file_name", "=", "os", ".", "path", ".", "join", "(", "results_data_folder", ",", "\n", "f'failed_{model_type}{acq_type}{batch_size}_{dim_reduction}_d{low_dim}_i{input_label}_t{target_label}_id{img_id}'", ")", "\n", "# low_dim is the pixel dimension, need to add the channels.", "\n", "self", ".", "ba_fn", "=", "BattackFn", "(", "f", ",", "x_bounds", ",", "results_file_name", ",", "failed_file_name", ",", "nchannel", ",", "low_dim", ",", "high_dim", ",", "dim_reduction", ",", "obj_func", ",", "cnn", ",", "\n", "domain", "=", "BattackDomain", "(", "len", "(", "x_bounds", ")", ",", "grid_size", ",", "-", "1.0", ",", "1.0", ",", "x_bounds", ")", ",", "rs", "=", "self", ".", "rs", ",", "fn_noise_var", "=", "self", ".", "fn_noise_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BayesianAttackLoader.load": [[1004, 1006], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ba_fn", ",", "(", "None", ",", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Mnist.__init__": [[1009, 1014], ["datasets.BayesianAttackLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "high_dim", "=", "784", "\n", "nchannel", "=", "1", "\n", "epsilon", "=", "0.3", "\n", "super", "(", ")", ".", "__init__", "(", "high_dim", "=", "high_dim", ",", "nchannel", "=", "nchannel", ",", "epsilon", "=", "epsilon", ",", "obj_func", "=", "'mnist'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Cifar10.__init__": [[1016, 1021], ["int", "datasets.BayesianAttackLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "high_dim", "=", "int", "(", "32", "*", "32", ")", "\n", "nchannel", "=", "3", "\n", "epsilon", "=", "0.05", "\n", "super", "(", ")", ".", "__init__", "(", "high_dim", "=", "high_dim", ",", "nchannel", "=", "nchannel", ",", "epsilon", "=", "epsilon", ",", "obj_func", "=", "'cifar10'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.Imagenet.__init__": [[1023, 1028], ["int", "datasets.BayesianAttackLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "high_dim", "=", "int", "(", "96", "*", "96", ")", "\n", "nchannel", "=", "3", "\n", "epsilon", "=", "0.05", "\n", "super", "(", ")", ".", "__init__", "(", "high_dim", "=", "high_dim", ",", "nchannel", "=", "nchannel", ",", "epsilon", "=", "epsilon", ",", "obj_func", "=", "'imagenet'", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.getDecompositionFromGraph": [[28, 34], ["networkx.find_cliques", "decomp.append", "sorted"], "function", ["None"], ["def", "getDecompositionFromGraph", "(", "graph", ")", ":", "\n", "    ", "cliques", "=", "nx", ".", "find_cliques", "(", "graph", ")", "\n", "decomp", "=", "[", "]", "\n", "for", "c", "in", "cliques", ":", "\n", "        ", "decomp", ".", "append", "(", "sorted", "(", "c", ")", ")", "\n", "", "return", "decomp", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ravel_index": [[307, 309], ["numpy.concatenate().dot", "numpy.concatenate", "[].cumprod", "numpy.asarray"], "function", ["None"], ["", "", "def", "ravel_index", "(", "b", ",", "shp", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "(", "np", ".", "asarray", "(", "shp", "[", "1", ":", "]", ")", "[", ":", ":", "-", "1", "]", ".", "cumprod", "(", ")", "[", ":", ":", "-", "1", "]", ",", "[", "1", "]", ")", ")", ".", "dot", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.main": [[48, 70], ["febo.utils.config.config_manager.register", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main.initialize_framework", "parser.parse_args.task"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.register", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.initialize_framework"], ["\"hash_data\"", ":", "args", "[", "\"hash_data\"", "]", "\n", "}", "\n", "\n", "# Setup the data", "\n", "# =========================================================", "\n", "# Get the loader of the dataset type", "\n", "MetaDataTypeLoader", "=", "datasets", ".", "MetaLoader", ".", "get_loader_constructor", "(", "args", "[", "\"which_data\"", "]", ")", "\n", "# Now load the actual Loader", "\n", "Loader", "=", "MetaDataTypeLoader", ".", "get_loader_constructor", "(", "**", "args", ")", "\n", "dataLoader", "=", "Loader", "(", "**", "args", ")", "\n", "fn", ",", "soln", "=", "dataLoader", ".", "load", "(", ")", "\n", "\n", "if", "soln", "==", "None", ":", "\n", "        ", "logging", ".", "info", "(", "\"Computing f_min\"", ")", "\n", "optimizer", "=", "MPAcquisitionOptimizer", "(", "fn", ".", "domain", ",", "fn", ",", "[", "]", ",", "None", ",", "max_eval", "=", "-", "1", ")", "\n", "cfn", "=", "fn", ".", "make_component_function", "(", ")", "\n", "soln", "=", "optimizer", ".", "optimize", "(", "cfn", ")", "\n", "x_best", ",", "f_min", ",", "cost", "=", "soln", "\n", "assert", "(", "np", ".", "isclose", "(", "cfn", "(", "x_best", ")", ",", "f_min", ")", ")", "\n", "assert", "(", "np", ".", "isclose", "(", "fn", ".", "eval", "(", "x_best", ")", ",", "f_min", ")", ")", "\n", "dataLoader", ".", "save", "(", "fn", ",", "soln", ")", "\n", "", "else", ":", "\n", "        ", "x_best", ",", "f_min", ",", "cost", "=", "soln", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.initialize_framework": [[72, 100], ["os.path.exists", "febo.utils.config.config_manager.load_yaml", "febo.utils.config.config_manager.update_config", "main.register_modules", "febo.utils.get_logger.set_level", "febo.utils.get_logger.set_filehandler_level", "febo.utils.config.config_manager.load_yaml", "logger.warning", "plt.switch_backend"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_yaml", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.update_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.register_modules", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.set_level", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.set_filehandler_level", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_yaml"], ["", "logging", ".", "info", "(", "\"f_min = {}\"", ".", "format", "(", "f_min", ")", ")", "\n", "logging", ".", "info", "(", "\"x_best = {}\"", ".", "format", "(", "x_best", ")", ")", "\n", "logging", ".", "info", "(", "\"cost = {}\"", ".", "format", "(", "cost", ")", ")", "\n", "\n", "#TODO Sanity checks", "\n", "tags", "[", "\"f_min\"", "]", "=", "f_min", "\n", "mlflow_logger", ".", "set_tags", "(", "tags", ")", "\n", "\n", "mlflow_logger", ".", "update_truth", "(", "f_min", ",", "fn", ".", "graph", ")", "\n", "fn", ".", "mlflow_logging", "=", "mlflow_logger", "\n", "\n", "# Run the algorithm", "\n", "# =========================================================", "\n", "\n", "# We random the lengthscale and report it", "\n", "MetaAlgoTypeLoader", "=", "algorithms", ".", "MetaLoader", ".", "get_loader_constructor", "(", "args", "[", "\"which_algorithm\"", "]", ")", "\n", "Algorithm", "=", "MetaAlgoTypeLoader", ".", "get_constructor", "(", "args", "[", "\"algorithm\"", "]", ")", "\n", "algorithm", "=", "Algorithm", "(", "fn", "=", "fn", ",", "**", "args", ")", "\n", "algorithm", ".", "run", "(", ")", "\n", "\n", "# check if the N is in order.", "\n", "if", "mlflow_logger", ".", "t_y", "!=", "args", "[", "\"n_iter\"", "]", ":", "\n", "        ", "raise", "Exception", "(", "\"Missing some iterations.\"", ")", "\n", "\n", "", "", "def", "cleanup", "(", "mlflow_logger", ")", ":", "\n", "# Clean up, log artifacts and remove directory", "\n", "    ", "mlflow_logger", ".", "log_artifacts", "(", "Config", "(", ")", ".", "base_path", ")", "\n", "shutil", ".", "rmtree", "(", "Config", "(", ")", ".", "base_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.register_modules": [[101, 107], ["isinstance", "febo.utils.config.config_manager.register", "logger.info", "febo.utils.locate"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.register", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate"], ["", "if", "__name__", "==", "'__main__'", ":", "\n", "\n", "    ", "init", ".", "logger", "(", ")", "\n", "mlflow_logger", "=", "MlflowLogger", "(", ")", "\n", "tmp_code_dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "logging", ".", "info", "(", "f\"Path location - {tmp_code_dir_path}, tmp location - {tempfile.gettempdir()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.create_experiment": [[108, 124], ["main_config.experiment", "main_config.experiment.exists", "main_config.experiment.exists", "main_config.experiment.create", "logger.info", "shutil.rmtree", "logger.warning", "main_config.experiment.path", "main_config.experiment.path", "main_config.experiment.path"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.create", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.path"], ["# Ensure that the code cannot fail and log everything...", "\n", "try", ":", "\n", "\n", "# Check if running in daemon mode ", "\n", "        ", "if", "len", "(", "sys", ".", "argv", ")", "==", "3", ":", "\n", "            ", "hash_exe", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "with", "PidFile", "(", "hash_exe", ",", "sys", ".", "argv", "[", "2", "]", ")", "as", "p", ":", "\n", "                ", "main", "(", "mlflow_logger", ")", "\n", "", "", "else", ":", "\n", "            ", "main", "(", "mlflow_logger", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "mlflow_logger", ".", "set_tag", "(", "\"Error\"", ",", "str", "(", "type", "(", "e", ")", ".", "__name__", ")", ")", "\n", "logging", ".", "exception", "(", "\"Exception\"", ")", "\n", "cleanup", "(", "mlflow_logger", ")", "\n", "\n", "# Exit with Error code.", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.create": [[125, 142], ["main_config.experiment", "main_config.experiment.create", "main.load_config", "main_config.experiment.exists", "febo.utils.query_yes_no", "shutil.rmtree", "exit", "main_config.experiment.path", "main_config.experiment.path"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.create", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.load_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.query_yes_no", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.exit", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.path"], ["sys", ".", "exit", "(", "e", ")", "\n", "\n", "", "cleanup", "(", "mlflow_logger", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.run": [[143, 161], ["os.path.join", "main.load_config", "main_config.experiment", "os.path.join", "main_config.experiment.load", "main_config.experiment.start", "main_config.experiment.close", "main.plot", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.load_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.start", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.sync": [[162, 172], ["os.path.join", "main.load_config", "main_config.experiment", "os.path.join", "main_config.experiment.load", "main_config.experiment.sync", "main_config.experiment.close"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.load_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.sync", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.plot": [[173, 204], ["os.path.join", "main.load_config", "main_config.experiment", "main_config.experiment.load", "logger.warning", "plot_class.split.split", "os.path.join", "len", "febo.utils.locate", "plot.", "plot.plot", "logger.error", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.load_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.aggregate": [[206, 221], ["os.path.join", "main.load_config", "main_config.experiment", "main_config.experiment.load", "febo.utils.locate", "febo.utils.locate.", "os.path.join"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.load_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.note": [[222, 229], ["os.path.join", "open", "notes.write", "logger.info", "febo.utils.get_timestamp"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.get_timestamp"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.doc": [[231, 237], ["webbrowser.open_new_tab", "os.path.abspath", "os.path.join", "os.path.dirname"], "function", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.unknown": [[238, 243], ["print"], "function", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.list_config": [[244, 260], ["print", "febo.utils.config.config_manager.get_yaml", "febo.utils.config.config_manager.write_yaml", "print"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_yaml", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.write_yaml"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.parse_task": [[264, 272], ["argparse.ArgumentTypeError", "hasattr", "isinstance"], "function", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.main.load_config": [[274, 277], ["febo.utils.config.config_manager.load_yaml", "febo.utils.config.config_manager.update_config"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_yaml", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.update_config"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.labels.algorithm_name": [[1, 15], ["labels.get_setting", "labels.get_setting", "labels.get_setting", "labels.get_setting", "[].rsplit", "[].rsplit"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_setting", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_setting", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_setting", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_setting"], ["def", "algorithm_name", "(", "id", ",", "config", ")", ":", "\n", "    ", "algorithm", "=", "config", "[", "'experiment.simple'", "]", "[", "'algorithm'", "]", ".", "rsplit", "(", "'.'", ",", "1", ")", "[", "1", "]", "\n", "# env = config['experiment.simple']['environment'].rsplit('.', 1)[1]", "\n", "tr_radius", "=", "get_setting", "(", "config", ",", "'algorithm.subdomainbo'", ",", "'tr_radius'", ")", "\n", "beta", "=", "get_setting", "(", "config", ",", "'model'", ",", "'beta'", ")", "\n", "tr_method", "=", "get_setting", "(", "config", ",", "'algorithm.subdomainbo'", ",", "'tr_method'", ")", "\n", "max_queries_tr", "=", "get_setting", "(", "config", ",", "'algorithm.subdomainbo'", ",", "'max_queries_tr'", ")", "\n", "\n", "\n", "acquisition", "=", "''", "\n", "if", "'algorithm.subdomainbo'", "in", "config", "and", "'acquisition'", "in", "config", "[", "'algorithm.subdomainbo'", "]", ":", "\n", "        ", "acquisition", "=", "f\"-{config['algorithm.subdomainbo']['acquisition'].rsplit('.', maxsplit=1)[1]}\"", "\n", "\n", "", "return", "f\"{id}-{algorithm}{tr_radius}{tr_method}{max_queries_tr}{acquisition}{beta}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.febo.labels.get_setting": [[16, 20], ["None"], "function", ["None"], ["", "def", "get_setting", "(", "config", ",", "section", ",", "setting", ")", ":", "\n", "    ", "if", "section", "in", "config", "and", "setting", "in", "config", "[", "section", "]", ":", "\n", "        ", "return", "f\"-{config[section][setting]}\"", "\n", "", "return", "''", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.__init__": [[14, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_configs", "=", "[", "]", "# list of all configs", "\n", "self", ".", "_config_classes", "=", "[", "]", "# list of all config classes", "\n", "self", ".", "_configurable_classes", "=", "[", "]", "# list of all config classes", "\n", "self", ".", "_fields", "=", "{", "}", "# dictionary of all fields", "\n", "self", ".", "_fields_origin", "=", "{", "}", "# dictionary to keep track what class fields come from", "\n", "self", ".", "_data", "=", "{", "}", "# dict for current data", "\n", "self", ".", "_locked", "=", "False", "\n", "self", ".", "_autoregister", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.reset": [[24, 27], ["config.ConfigManager._data.keys"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "_data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "_data", "[", "key", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.set_autoregister": [[28, 30], ["None"], "methods", ["None"], ["", "", "def", "set_autoregister", "(", "self", ",", "autoregister", ")", ":", "\n", "        ", "self", ".", "_autoregister", "=", "autoregister", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.autoregister": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "autoregister", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_autoregister", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.register": [[35, 49], ["issubclass", "hasattr", "config.ConfigManager._register_config", "issubclass", "config.ConfigManager._register_configurable"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._register_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._register_configurable"], ["", "def", "register", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Register a config class to the config manager\n\n        Args:\n            *args: config_cls1, config_cls2, ...\n\n        \"\"\"", "\n", "for", "config_cls", "in", "args", ":", "\n", "# mixin configs don't inherit from Config, hence we also test for _section attribute", "\n", "            ", "if", "issubclass", "(", "config_cls", ",", "Config", ")", "or", "hasattr", "(", "config_cls", ",", "'_section'", ")", ":", "\n", "                ", "self", ".", "_register_config", "(", "config_cls", ")", "\n", "", "elif", "issubclass", "(", "config_cls", ",", "Configurable", ")", ":", "\n", "                ", "self", ".", "_register_configurable", "(", "config_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._register_configurable": [[50, 64], ["hasattr", "hasattr", "config.ConfigManager._configurable_classes.append", "config.ConfigManager._register_config", "config.ConfigManager._register_config", "getattr", "getattr", "config.ConfigManager._register_configurable"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._register_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._register_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._register_configurable"], ["", "", "", "def", "_register_configurable", "(", "self", ",", "configurable_cls", ")", ":", "\n", "\n", "        ", "if", "hasattr", "(", "configurable_cls", ",", "'_config_class'", ")", ":", "\n", "            ", "self", ".", "_register_config", "(", "getattr", "(", "configurable_cls", ",", "'_config_class'", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "configurable_cls", ",", "'_config_mixin'", ")", ":", "\n", "            ", "self", ".", "_register_config", "(", "getattr", "(", "configurable_cls", ",", "'_config_mixin'", ")", ")", "\n", "\n", "", "self", ".", "_configurable_classes", ".", "append", "(", "configurable_cls", ")", "\n", "\n", "# recurse on base classes", "\n", "for", "base_cls", "in", "configurable_cls", ".", "__bases__", ":", "\n", "            ", "if", "base_cls", "not", "in", "self", ".", "_configurable_classes", "and", "base_cls", "not", "in", "(", "Configurable", ",", "object", ")", ":", "\n", "                ", "self", ".", "_register_configurable", "(", "base_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._register_config": [[66, 93], ["config.ConfigManager._config_classes.append", "vars().items", "hasattr", "Exception", "vars", "isinstance", "Exception"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "", "", "def", "_register_config", "(", "self", ",", "config_cls", ")", ":", "\n", "        ", "if", "config_cls", "in", "self", ".", "_config_classes", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "hasattr", "(", "config_cls", ",", "'_section'", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Every config class has to define a '_section' attribute.\"", ")", "\n", "\n", "", "self", ".", "_config_classes", ".", "append", "(", "config_cls", ")", "\n", "\n", "section", "=", "config_cls", ".", "_section", "\n", "for", "name", ",", "field", "in", "vars", "(", "config_cls", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "field", ",", "ConfigField", ")", ":", "\n", "                ", "continue", "# skip attributes which are not a ConfigField", "\n", "\n", "# add section to self._fields and self._data", "\n", "", "if", "not", "section", "in", "self", ".", "_fields", ":", "\n", "                ", "self", ".", "_fields", "[", "section", "]", "=", "{", "}", "\n", "self", ".", "_fields_origin", "[", "section", "]", "=", "{", "}", "\n", "self", ".", "_data", "[", "section", "]", "=", "{", "}", "\n", "\n", "# enforce unique names among sections", "\n", "", "if", "name", "in", "self", ".", "_fields", "[", "section", "]", ":", "\n", "                ", "if", "f\"{config_cls.__module__}.{config_cls.__name__}\"", "!=", "self", ".", "_fields_origin", "[", "section", "]", "[", "name", "]", ":", "\n", "                    ", "raise", "Exception", "(", "f\"A field with name '{name}' was already registered in section '{section}' by a different config class.\"", ")", "\n", "\n", "", "", "self", ".", "_fields", "[", "section", "]", "[", "name", "]", "=", "field", "\n", "self", ".", "_fields_origin", "[", "section", "]", "[", "name", "]", "=", "f\"{config_cls.__module__}.{config_cls.__name__}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.register_instance": [[94, 103], ["config.ConfigManager._configs.append"], "methods", ["None"], ["", "", "def", "register_instance", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Register a new config instance.\n\n        Args:\n            config: the config instance\n\n        \"\"\"", "\n", "self", ".", "_configs", ".", "append", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.set_setting": [[104, 112], ["[]._decode", "Exception", "Exception"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.SubconfigField._decode"], ["", "def", "set_setting", "(", "self", ",", "section", ",", "setting", ",", "value", ")", ":", "\n", "        ", "if", "not", "section", "in", "self", ".", "_fields", ":", "\n", "            ", "raise", "Exception", "(", "f\"Unknown section '{section}'.\"", ")", "\n", "\n", "", "if", "not", "setting", "in", "self", ".", "_fields", "[", "section", "]", ":", "\n", "            ", "raise", "Exception", "(", "f\"Unknown setting '{setting}' in section {section}.\"", ")", "\n", "\n", "", "self", ".", "_data", "[", "section", "]", "[", "setting", "]", "=", "self", ".", "_fields", "[", "section", "]", "[", "setting", "]", ".", "_decode", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_setting": [[113, 122], ["field._encode", "Exception", "Exception", "config.ConfigManager._data[].get"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.EnumConfigField._encode"], ["", "def", "get_setting", "(", "self", ",", "section", ",", "setting", ")", ":", "\n", "        ", "if", "not", "section", "in", "self", ".", "_fields", ":", "\n", "            ", "raise", "Exception", "(", "f\"Unknown section '{section}'.\"", ")", "\n", "\n", "", "if", "not", "setting", "in", "self", ".", "_fields", "[", "section", "]", ":", "\n", "            ", "raise", "Exception", "(", "f\"Unknown setting '{setting}' in section {section}.\"", ")", "\n", "\n", "", "field", "=", "self", ".", "_fields", "[", "section", "]", "[", "setting", "]", "\n", "return", "field", ".", "_encode", "(", "self", ".", "_data", "[", "section", "]", ".", "get", "(", "setting", ",", "field", ".", "default", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_data": [[123, 153], ["data.items", "section_data.items", "logger.warning", "logger.warning", "data[].items", "hasattr", "setattr"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "def", "load_data", "(", "self", ",", "data", ",", "update_existing_instances", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Load data into the ConfigManager. This data is then used for new Config instances.\n\n        Args:\n            data (dict): data dictionary\n            update_existing_instances: if True, all registered instances will be updated with the new data\n\n        \"\"\"", "\n", "# copy new data into self._data", "\n", "for", "section", ",", "section_data", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "section", "in", "self", ".", "_fields", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Recieved setting data for unregistered section {section}.\"", ")", "\n", "self", ".", "_data", "[", "section", "]", "=", "{", "}", "\n", "\n", "\n", "", "for", "setting", ",", "value", "in", "section_data", ".", "items", "(", ")", ":", "\n", "                ", "if", "section", "in", "self", ".", "_fields", "and", "not", "setting", "in", "self", ".", "_fields", "[", "section", "]", ":", "\n", "                    ", "logger", ".", "warning", "(", "f\"Recieved setting data for unregistered setting {setting}.\"", ")", "\n", "\n", "", "self", ".", "_data", "[", "section", "]", "[", "setting", "]", "=", "value", "\n", "\n", "", "", "if", "update_existing_instances", ":", "\n", "# go through registered sections and associated configs", "\n", "\n", "            ", "for", "config", "in", "self", ".", "_configs", ":", "\n", "                ", "for", "section", "in", "data", ":", "\n", "                    ", "for", "setting", ",", "value", "in", "data", "[", "section", "]", ".", "items", "(", ")", ":", "\n", "                        ", "if", "section", "in", "config", ".", "_sections", "and", "hasattr", "(", "config", ",", "setting", ")", ":", "\n", "                            ", "setattr", "(", "config", ",", "setting", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.update_config": [[155, 160], ["config._fields.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "", "", "", "", "", "def", "update_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "for", "name", ",", "field", "in", "config", ".", "_fields", ".", "items", "(", ")", ":", "\n", "            ", "section", "=", "field", ".", "_section", "\n", "if", "section", "in", "self", ".", "_data", "and", "name", "in", "self", ".", "_data", "[", "section", "]", ":", "\n", "                ", "setattr", "(", "config", ",", "name", ",", "self", ".", "_data", "[", "section", "]", "[", "name", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_yaml": [[161, 182], ["ruamel.yaml.YAML", "config.ConfigManager.load_data", "dict", "open", "ruamel.yaml.YAML.load"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load"], ["", "", "", "def", "load_yaml", "(", "self", ",", "file", ",", "update_existing_instances", "=", "True", ",", "section", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Loads the configuration from file and updates all instances.\n\n        Args:\n            file:\n            section: if not None, load only this section\n\n        Returns:\n\n        \"\"\"", "\n", "yaml", "=", "YAML", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "stream", ":", "\n", "            ", "data", "=", "yaml", ".", "load", "(", "stream", ")", "\n", "\n", "# if section is given, filter data to this section", "\n", "", "if", "section", "is", "not", "None", "and", "section", "in", "data", ":", "\n", "            ", "data", "=", "{", "section", ":", "data", "[", "section", "]", "}", "\n", "\n", "", "self", ".", "load_data", "(", "data", ",", "update_existing_instances", "=", "update_existing_instances", ")", "\n", "return", "dict", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.write_yaml": [[183, 197], ["ruamel.yaml.YAML", "open", "ruamel.yaml.YAML.dump", "config.ConfigManager._get_data_encoded"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._get_data_encoded"], ["", "def", "write_yaml", "(", "self", ",", "file", ",", "include_default", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Dumps the current config to the yaml file.\n\n        Args:\n            file:\n\n        Returns:\n\n        \"\"\"", "\n", "yaml", "=", "YAML", "(", ")", "\n", "yaml", ".", "default_flow_style", "=", "False", "\n", "with", "open", "(", "file", ",", "'w'", ")", "as", "stream", ":", "\n", "            ", "yaml", ".", "dump", "(", "self", ".", "_get_data_encoded", "(", "include_default", "=", "include_default", ")", ",", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_yaml": [[200, 214], ["ruamel.yaml.YAML", "io.StringIO", "ruamel.yaml.YAML.dump", "io.StringIO.getvalue", "io.StringIO.close", "config.ConfigManager._get_data_encoded"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._get_data_encoded"], ["", "", "def", "get_yaml", "(", "self", ",", "include_default", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n            Returns (str): The current configuration as yaml.\n\n            \"\"\"", "\n", "yaml", "=", "YAML", "(", ")", "\n", "yaml", ".", "default_flow_style", "=", "False", "\n", "ss", "=", "StringIO", "(", ")", "\n", "\n", "\n", "yaml", ".", "dump", "(", "self", ".", "_get_data_encoded", "(", "include_default", "=", "include_default", ")", ",", "ss", ")", "\n", "s", "=", "ss", ".", "getvalue", "(", ")", "\n", "ss", ".", "close", "(", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager._get_data_encoded": [[215, 231], ["ruamel.yaml.comments.CommentedMap", "ruamel.yaml.comments.CommentedMap", "config.ConfigManager._fields[].items", "sorted", "ruamel.yaml.comments.CommentedMap.items", "data_encoded[].insert", "len", "field._encode", "config.ConfigManager._data[].get"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.EnumConfigField._encode"], ["", "def", "_get_data_encoded", "(", "self", ",", "include_default", "=", "False", ")", ":", "\n", "        ", "data_encoded", "=", "{", "}", "\n", "for", "section", "in", "self", ".", "_fields", ":", "\n", "\n", "            ", "if", "not", "include_default", "and", "(", "not", "section", "in", "self", ".", "_data", "or", "len", "(", "self", ".", "_data", "[", "section", "]", ")", "==", "0", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "data_encoded", "[", "section", "]", "=", "CommentedMap", "(", ")", "\n", "\n", "for", "setting", ",", "field", "in", "self", ".", "_fields", "[", "section", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "setting", "in", "self", ".", "_data", "[", "section", "]", "or", "include_default", ":", "\n", "                    ", "data_encoded", "[", "section", "]", ".", "insert", "(", "0", ",", "setting", ",", "field", ".", "_encode", "(", "self", ".", "_data", "[", "section", "]", ".", "get", "(", "setting", ",", "field", ".", "default", ")", ")", ",", "field", ".", "comment", ")", "\n", "\n", "", "", "", "data_encoded", "=", "CommentedMap", "(", "sorted", "(", "data_encoded", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", ")", "\n", "\n", "return", "data_encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_config_as_dict": [[232, 246], ["config.ConfigManager._fields[].items", "field._encode", "len", "config.ConfigManager._data[].get"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.EnumConfigField._encode"], ["", "def", "get_config_as_dict", "(", "self", ",", "include_default", "=", "False", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "for", "section", "in", "self", ".", "_fields", ":", "\n", "\n", "            ", "if", "not", "include_default", "and", "(", "not", "section", "in", "self", ".", "_data", "or", "len", "(", "self", ".", "_data", "[", "section", "]", ")", "==", "0", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "config_dict", "[", "section", "]", "=", "{", "}", "\n", "\n", "for", "setting", ",", "field", "in", "self", ".", "_fields", "[", "section", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "setting", "in", "self", ".", "_data", "[", "section", "]", "or", "include_default", ":", "\n", "                    ", "config_dict", "[", "section", "]", "[", "setting", "]", "=", "field", ".", "_encode", "(", "self", ".", "_data", "[", "section", "]", ".", "get", "(", "setting", ",", "field", ".", "default", ")", ")", "\n", "\n", "", "", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__new__": [[274, 300], ["super().__new__", "config.all_subconfig", "vars().items", "hasattr", "Exception", "isinstance", "super().__new__._sections.append", "vars"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.all_subconfig", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "# quick check if the _section attribute is defined", "\n", "        ", "instance", "=", "super", "(", ")", ".", "__new__", "(", "cls", ")", "\n", "instance", ".", "_fields", "=", "{", "}", "\n", "instance", ".", "_field_values", "=", "{", "}", "\n", "instance", ".", "_sections", "=", "[", "]", "\n", "\n", "for", "subclass", "in", "all_subconfig", "(", "cls", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "subclass", ",", "\"_section\"", ")", ":", "\n", "                ", "raise", "Exception", "(", "f'The config class \"{subclass}\" does not define a \"_section\" class attribute.'", ")", "\n", "\n", "", "section", "=", "subclass", ".", "_section", "\n", "for", "name", ",", "field", "in", "vars", "(", "subclass", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "field", ",", "ConfigField", ")", ":", "\n", "                    ", "if", "not", "name", "in", "instance", ".", "_fields", ":", "# child class might overwrite settings", "\n", "                        ", "field", ".", "_section", "=", "section", "\n", "field", ".", "_config_cls", "=", "subclass", "\n", "instance", ".", "_fields", "[", "name", "]", "=", "field", "\n", "instance", ".", "_field_values", "[", "name", "]", "=", "field", ".", "default", "\n", "\n", "", "", "", "if", "not", "section", "in", "instance", ".", "_sections", ":", "\n", "                ", "instance", ".", "_sections", ".", "append", "(", "section", ")", "\n", "\n", "\n", "", "", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__getattribute__": [[301, 307], ["super().__getattribute__", "key.startswith"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__getattribute__"], ["", "def", "__getattribute__", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\" redirect all non-private attributes which are in self._attr_names to self._fields \"\"\"", "\n", "if", "not", "key", ".", "startswith", "(", "'_'", ")", "and", "key", "in", "self", ".", "_field_values", ":", "\n", "            ", "return", "self", ".", "_field_values", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", "Config", ",", "self", ")", ".", "__getattribute__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__setattr__": [[308, 317], ["key.startswith", "super().__setattr__", "config.Config._fields[]._decode", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__setattr__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.SubconfigField._decode"], ["", "", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "\"\"\" update all non-private attributes on fields \"\"\"", "\n", "if", "not", "key", ".", "startswith", "(", "'_'", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "_field_values", ":", "\n", "                ", "self", ".", "_field_values", "[", "key", "]", "=", "self", ".", "_fields", "[", "key", "]", ".", "_decode", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "raise", "AttributeError", "(", "f'Field \"{key}\" not found in config \"{self.__class__}\".'", ")", "\n", "", "", "else", ":", "\n", "            ", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__dir__": [[318, 320], ["super().__dir__", "config.Config._fields.keys"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__dir__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys"], ["", "", "def", "__dir__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__dir__", "(", ")", "+", "self", ".", "_fields", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config._update_data": [[321, 324], ["data.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "def", "_update_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigField.__init__": [[332, 354], ["type", "field_type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "default", ",", "field_type", "=", "identitiy", ",", "comment", "=", "None", ",", "allow_none", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            field_type:\n            default:\n            comment:\n        \"\"\"", "\n", "self", ".", "_allow_none", "=", "allow_none", "\n", "if", "field_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "_field_type", "=", "field_type", "\n", "if", "allow_none", "and", "default", "is", "None", ":", "\n", "                ", "self", ".", "_default", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "_default", "=", "field_type", "(", "default", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_default", "=", "default", "\n", "self", ".", "_field_type", "=", "type", "(", "default", ")", "\n", "\n", "", "self", ".", "_comment", "=", "comment", "if", "comment", "else", "None", "# set empty string as None (to avoid ruaml CommentedMap to fail)", "\n", "self", ".", "_section", "=", "None", "# set later by Config.__new__", "\n", "self", ".", "_config_cls", "=", "None", "# set later by Config.__new__", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigField._encode": [[355, 357], ["None"], "methods", ["None"], ["", "def", "_encode", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigField._decode": [[358, 363], ["config.ConfigField._field_type"], "methods", ["None"], ["", "def", "_decode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "_allow_none", "and", "value", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "self", ".", "_field_type", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigField.default": [[364, 367], ["config.ConfigField._decode"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.SubconfigField._decode"], ["", "@", "property", "\n", "def", "default", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_decode", "(", "self", ".", "_default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigField.comment": [[368, 371], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "comment", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_comment", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigField.section": [[372, 375], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "section", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_section", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ClassConfigField._encode": [[377, 385], ["isinstance"], "methods", ["None"], ["    ", "def", "_encode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "_allow_none", "and", "value", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "return", "f\"{value.__module__}.{value.__name__}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ClassConfigField._decode": [[386, 393], ["isinstance", "febo.utils.locate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate"], ["", "def", "_decode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "_allow_none", "and", "value", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "return", "locate", "(", "value", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ClassListConfigField._encode": [[395, 409], ["isinstance", "list_encoded.append", "list_encoded.append"], "methods", ["None"], ["    ", "def", "_encode", "(", "self", ",", "value", ")", ":", "\n", "\n", "        ", "if", "self", ".", "_allow_none", "and", "value", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "\n", "", "list_encoded", "=", "[", "]", "\n", "for", "item", "in", "value", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "                ", "list_encoded", ".", "append", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "list_encoded", ".", "append", "(", "f\"{item.__module__}.{item.__name__}\"", ")", "\n", "\n", "", "", "return", "list_encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ClassListConfigField._decode": [[410, 422], ["isinstance", "list_decoded.append", "list_decoded.append", "febo.utils.locate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate"], ["", "def", "_decode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "_allow_none", "and", "value", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "list_decoded", "=", "[", "]", "\n", "for", "item", "in", "value", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "                ", "list_decoded", ".", "append", "(", "locate", "(", "item", ")", ")", "\n", "", "else", ":", "\n", "                ", "list_decoded", ".", "append", "(", "item", ")", "\n", "\n", "", "", "return", "list_decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.EnumConfigField.__init__": [[425, 428], ["config.ConfigField.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "default", ",", "enum_cls", ",", "field_type", "=", "identitiy", ",", "comment", "=", "None", ",", "allow_none", "=", "False", ")", ":", "\n", "        ", "self", ".", "_enum_cls", "=", "enum_cls", "\n", "super", "(", ")", ".", "__init__", "(", "default", ",", "field_type", ",", "comment", ",", "allow_none", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.EnumConfigField._decode": [[429, 433], ["isinstance"], "methods", ["None"], ["", "def", "_decode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "self", ".", "_enum_cls", ")", ":", "\n", "            ", "return", "value", "\n", "", "return", "self", ".", "_enum_cls", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.EnumConfigField._encode": [[434, 439], ["isinstance", "str().split", "str"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split"], ["", "def", "_encode", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "Enum", ")", ":", "\n", "            ", "return", "str", "(", "value", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__": [[513, 525], ["config._configure_mixin_configs", "super().__new__", "hasattr", "cls._config_class", "config_manager.register_instance", "config_manager.update_config"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config._configure_mixin_configs", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Configurable.__new__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.register_instance", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.update_config"], ["def", "__new__", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Configure the config class (account for mixins) and add a \"config\" instance variable.\n        \"\"\"", "\n", "_configure_mixin_configs", "(", "cls", ")", "\n", "instance", "=", "super", "(", ")", ".", "__new__", "(", "cls", ")", "\n", "if", "hasattr", "(", "instance", ",", "'_config_class'", ")", ":", "\n", "            ", "instance", ".", "config", "=", "cls", ".", "_config_class", "(", ")", "\n", "config_manager", ".", "register_instance", "(", "instance", ".", "config", ")", "\n", "config_manager", ".", "update_config", "(", "instance", ".", "config", ")", "\n", "\n", "", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.all_subconfig": [[247, 266], ["config.all_subconfig"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.all_subconfig"], ["", "", "def", "all_subconfig", "(", "config_cls", ")", ":", "\n", "    ", "\"\"\"\n    Creates a list of all config classes in the hereditary tree.\n\n    Args:\n        config_cls (type): the root config class\n\n    Returns (list): list of config classes\n\n    \"\"\"", "\n", "# stop on base Config class or object", "\n", "if", "config_cls", "is", "object", "or", "config_cls", "is", "Config", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "configs", "=", "[", "config_cls", "]", "\n", "for", "subcls", "in", "config_cls", ".", "__bases__", ":", "\n", "        ", "configs", "+=", "all_subconfig", "(", "subcls", ")", "# recurse", "\n", "\n", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.identitiy": [[325, 327], ["None"], "function", ["None"], ["", "", "", "def", "identitiy", "(", "o", ")", ":", "\n", "    ", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.assign_config": [[443, 467], ["issubclass", "print", "config_manager.register"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.register"], ["def", "assign_config", "(", "config_cls", ",", "config_manager", "=", "config_manager", ")", ":", "\n", "    ", "\"\"\"\n    Decorator to assign configuration classes.\n\n    Args (Config):\n        config_cls: Configuration class which is assigned.\n    \"\"\"", "\n", "\n", "# we use a call to assign_config to register a default config", "\n", "\n", "# decorator", "\n", "def", "decorator", "(", "cls", ")", ":", "\n", "        ", "if", "issubclass", "(", "config_cls", ",", "Config", ")", ":", "\n", "            ", "cls", ".", "_config_class", "=", "config_cls", "\n", "", "else", ":", "\n", "            ", "cls", ".", "_config_mixin", "=", "config_cls", "\n", "\n", "", "cls", ".", "_config_manager", "=", "config_manager", "\n", "\n", "if", "config_manager", ".", "autoregister", ":", "\n", "            ", "print", "(", "f\"auto register {cls}\"", ")", "\n", "config_manager", ".", "register", "(", "cls", ")", "\n", "", "return", "cls", "\n", "", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config._configure_mixin_configs": [[469, 508], ["config._configure_mixin_configs", "len", "hasattr", "hasattr", "getattr", "config_mixins.append", "type", "tuple"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config._configure_mixin_configs"], ["", "def", "_configure_mixin_configs", "(", "cls", ")", ":", "\n", "    ", "\"\"\"\n    Recursively goes through all bases of cls, and creates the same hierachy structure for the configs,\n    for the case where there are mixin classes.\n\n    Args:\n        cls (type):\n\n\n    \"\"\"", "\n", "if", "cls", "is", "Configurable", "or", "cls", "is", "object", ":", "\n", "        ", "return", "Config", "\n", "\n", "# last class is proper base class", "\n", "", "super_cls", "=", "cls", ".", "__bases__", "[", "-", "1", "]", "\n", "\n", "# recurse on proper base class (not on mixins)", "\n", "super_cls_config", "=", "_configure_mixin_configs", "(", "super_cls", ")", "\n", "\n", "config_mixins", "=", "[", "]", "\n", "# go through mixin classes and check if mixin has a _config_class defined", "\n", "# if yes, added this mixin_config as mixin to config_cls", "\n", "for", "mixin", "in", "cls", ".", "__bases__", "[", ":", "-", "1", "]", ":", "\n", "        ", "if", "hasattr", "(", "mixin", ",", "\"_config_mixin\"", ")", ":", "\n", "            ", "config_mixins", ".", "append", "(", "mixin", ".", "_config_mixin", ")", "\n", "\n", "# only if there where config_mixins found, add them to main config class as mixins", "\n", "", "", "if", "len", "(", "config_mixins", ")", ":", "\n", "# get _config_class attribute or create an EmptyConfig as fallback,", "\n", "        ", "config_cls", "=", "getattr", "(", "cls", ",", "\"_config_class\"", ",", "type", "(", "f\"__{cls.__name__}Config\"", ",", "(", "super_cls_config", ",", ")", ",", "{", "}", ")", ")", "\n", "config_cls", ".", "__bases__", "=", "tuple", "(", "[", "m", "for", "m", "in", "config_mixins", "if", "not", "m", "in", "config_cls", ".", "__bases__", "]", ")", "+", "config_cls", ".", "__bases__", "\n", "\n", "# reassign config_class", "\n", "cls", ".", "_config_class", "=", "config_cls", "\n", "", "if", "hasattr", "(", "cls", ",", "\"_config_class\"", ")", ":", "\n", "        ", "return", "cls", ".", "_config_class", "\n", "\n", "", "return", "super_cls_config", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.__init__": [[160, 163], ["termios.tcgetattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "interupt_keys", "=", "[", "'\\x1b'", "]", ")", ":", "\n", "        ", "self", ".", "_interupt_keys", "=", "interupt_keys", "\n", "self", ".", "old_settings", "=", "termios", ".", "tcgetattr", "(", "sys", ".", "stdin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.__enter__": [[164, 167], ["utils.NonBlockingConsole.start"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.start"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.__exit__": [[168, 170], ["utils.NonBlockingConsole.stop"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.stop"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.__del__": [[171, 173], ["utils.NonBlockingConsole.stop"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.stop"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.key_pressed": [[174, 183], ["select.select", "utils.NonBlockingConsole.stop", "sys.stdin.read"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.stop"], ["", "def", "key_pressed", "(", "self", ")", ":", "\n", "        ", "key_pressed", "=", "False", "\n", "while", "select", ".", "select", "(", "[", "sys", ".", "stdin", "]", ",", "[", "]", ",", "[", "]", ",", "0", ")", "==", "(", "[", "sys", ".", "stdin", "]", ",", "[", "]", ",", "[", "]", ")", ":", "\n", "            ", "if", "sys", ".", "stdin", ".", "read", "(", "1", ")", "in", "self", ".", "_interupt_keys", ":", "\n", "                ", "key_pressed", "=", "True", "# not returning here to empty stdin stream", "\n", "", "", "if", "key_pressed", ":", "\n", "            ", "self", ".", "stop", "(", ")", "\n", "\n", "", "return", "key_pressed", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.stop": [[184, 186], ["termios.tcsetattr"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "termios", ".", "tcsetattr", "(", "sys", ".", "stdin", ",", "termios", ".", "TCSADRAIN", ",", "self", ".", "old_settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.NonBlockingConsole.start": [[187, 189], ["tty.setcbreak", "sys.stdin.fileno"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "tty", ".", "setcbreak", "(", "sys", ".", "stdin", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.__init__": [[282, 288], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_path", "=", "None", "\n", "self", ".", "_level", "=", "'INFO'", "\n", "self", ".", "_file_level", "=", "'INFO'", "\n", "self", ".", "_loggers", "=", "[", "]", "\n", "self", ".", "_file_handler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.__call__": [[289, 298], ["logging.getLogger", "utils.Logger._loggers.append", "coloredlogs.install", "logging.getLogger.addHandler"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\" return a logger with given name \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "self", ".", "_loggers", ".", "append", "(", "logger", ")", "\n", "coloredlogs", ".", "install", "(", "fmt", "=", "'%(message)s'", ",", "logger", "=", "logger", ",", "level", "=", "self", ".", "_level", ",", "stream", "=", "sys", ".", "stdout", ")", "\n", "\n", "if", "self", ".", "_path", ":", "\n", "            ", "logger", ".", "addHandler", "(", "self", ".", "_file_handler", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.set_level": [[299, 304], ["coloredlogs.install"], "methods", ["None"], ["", "def", "set_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "_level", "=", "level", "\n", "# update level of existing loggers", "\n", "for", "logger", "in", "self", ".", "_loggers", ":", "\n", "            ", "coloredlogs", ".", "install", "(", "fmt", "=", "'%(message)s'", ",", "logger", "=", "logger", ",", "level", "=", "self", ".", "_level", ",", "stream", "=", "sys", ".", "stdout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.set_filehandler_level": [[305, 309], ["utils.Logger._file_handler.setLevel"], "methods", ["None"], ["", "", "def", "set_filehandler_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "_file_level", "=", "level", "\n", "if", "not", "self", ".", "_file_handler", "is", "None", ":", "\n", "            ", "self", ".", "_file_handler", ".", "setLevel", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.set_path": [[310, 325], ["logging.FileHandler", "utils.Logger._file_handler.setLevel", "logging.Formatter", "utils.Logger._file_handler.setFormatter", "os.path.join", "logger.addHandler", "logger.removeHandler"], "methods", ["None"], ["", "", "def", "set_path", "(", "self", ",", "path", ")", ":", "\n", "# remove previous filehandler", "\n", "        ", "if", "not", "self", ".", "_file_handler", "is", "None", ":", "\n", "            ", "for", "logger", "in", "self", ".", "_loggers", ":", "\n", "                ", "logger", ".", "removeHandler", "(", "self", ".", "_file_handler", ")", "\n", "\n", "", "", "self", ".", "_path", "=", "path", "\n", "self", ".", "_file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'febo.log'", ")", ")", "\n", "# by default, set level to 'INFO'", "\n", "self", ".", "_file_handler", ".", "setLevel", "(", "self", ".", "_file_level", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s: %(message)s'", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "self", ".", "_file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "# add filehandler to existing loggers.", "\n", "for", "logger", "in", "self", ".", "_loggers", ":", "\n", "            ", "logger", ".", "addHandler", "(", "self", ".", "_file_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.sherrman_morrision_update": [[20, 23], ["A_inv.dot", "A_inv.dot.dot().dot", "numpy.asscalar", "A_inv.dot.dot", "x_inc.reshape().dot", "x_inc.reshape", "x_inc.reshape"], "function", ["None"], ["def", "sherrman_morrision_update", "(", "A_inv", ",", "x_inc", ")", ":", "\n", "        ", "A_x", "=", "A_inv", ".", "dot", "(", "x_inc", ")", "\n", "return", "A_inv", "-", "A_x", ".", "dot", "(", "x_inc", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "dot", "(", "A_inv", ")", "/", "(", "1", "+", "np", ".", "asscalar", "(", "x_inc", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "dot", "(", "A_x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.project_onto_simplex": [[26, 45], ["range", "range", "numpy.sort", "max", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "project_onto_simplex", "(", "p", ",", "m", ")", ":", "\n", "    ", "u", "=", "np", ".", "sort", "(", "np", ".", "copy", "(", "p", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "rho", "=", "-", "1", "\n", "s", "=", "0", "\n", "s_rho", "=", "0", "\n", "j", "=", "1", "\n", "\n", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "        ", "s", "+=", "u", "[", "j", "]", "\n", "if", "u", "[", "j", "]", "+", "1", "/", "(", "j", "+", "1", ")", "*", "(", "1", "-", "s", ")", ">", "0", ":", "\n", "            ", "rho", "=", "j", "+", "1", "\n", "s_rho", "=", "s", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "l", "=", "1", "/", "rho", "*", "(", "1", "-", "s_rho", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "p", "[", "i", "]", "=", "max", "(", "p", "[", "i", "]", "+", "l", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.cartesian": [[46, 96], ["numpy.prod", "int", "numpy.repeat", "numpy.asarray", "numpy.zeros", "utils.cartesian", "range", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.cartesian", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "", "def", "cartesian", "(", "arrays", ",", "out", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Generate a cartesian product of input arrays.\n\n        Parameters\n        ----------\n        arrays : list of array-like\n                1-D arrays to form the cartesian product of.\n        out : ndarray\n                Array to place the cartesian product in.\n\n        Returns\n        -------\n        out : ndarray\n                2-D array of shape (M, len(arrays)) containing cartesian products\n                formed of input arrays.\n\n        Examples\n        --------\n        >>> cartesian(([1, 2, 3], [4, 5], [6, 7]))\n        array([[1, 4, 6],\n                     [1, 4, 7],\n                     [1, 5, 6],\n                     [1, 5, 7],\n                     [2, 4, 6],\n                     [2, 4, 7],\n                     [2, 5, 6],\n                     [2, 5, 7],\n                     [3, 4, 6],\n                     [3, 4, 7],\n                     [3, 5, 6],\n                     [3, 5, 7]])\n\n        \"\"\"", "\n", "\n", "arrays", "=", "[", "np", ".", "asarray", "(", "x", ")", "for", "x", "in", "arrays", "]", "\n", "dtype", "=", "arrays", "[", "0", "]", ".", "dtype", "\n", "\n", "n", "=", "np", ".", "prod", "(", "[", "x", ".", "size", "for", "x", "in", "arrays", "]", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "np", ".", "zeros", "(", "[", "n", ",", "len", "(", "arrays", ")", "]", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "m", "=", "n", "/", "arrays", "[", "0", "]", ".", "size", "\n", "m", "=", "int", "(", "m", ")", "\n", "out", "[", ":", ",", "0", "]", "=", "np", ".", "repeat", "(", "arrays", "[", "0", "]", ",", "m", ")", "\n", "if", "arrays", "[", "1", ":", "]", ":", "\n", "            ", "cartesian", "(", "arrays", "[", "1", ":", "]", ",", "out", "=", "out", "[", "0", ":", "m", ",", "1", ":", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "arrays", "[", "0", "]", ".", "size", ")", ":", "\n", "                ", "out", "[", "j", "*", "m", ":", "(", "j", "+", "1", ")", "*", "m", ",", "1", ":", "]", "=", "out", "[", "0", ":", "m", ",", "1", ":", "]", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.query_yes_no": [[98, 126], ["sys.stdout.write", "input().lower", "ValueError", "input", "sys.stdout.write"], "function", ["None"], ["", "def", "query_yes_no", "(", "question", ",", "default", "=", "\"yes\"", ")", ":", "\n", "    ", "\"\"\"Ask a yes/no question via raw_input() and return their answer.\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n    The \"answer\" return value is one of \"yes\" or \"no\".\n    \"\"\"", "\n", "valid", "=", "{", "\"yes\"", ":", "True", ",", "\"y\"", ":", "True", ",", "\"ye\"", ":", "True", ",", "\n", "\"no\"", ":", "False", ",", "\"n\"", ":", "False", "}", "\n", "if", "default", "==", "None", ":", "\n", "        ", "prompt", "=", "\" [y/n] \"", "\n", "", "elif", "default", "==", "\"yes\"", ":", "\n", "        ", "prompt", "=", "\" [Y/n] \"", "\n", "", "elif", "default", "==", "\"no\"", ":", "\n", "        ", "prompt", "=", "\" [y/N] \"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid default answer: '%s'\"", "%", "default", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "question", "+", "prompt", ")", "\n", "choice", "=", "input", "(", ")", ".", "lower", "(", ")", "\n", "if", "default", "is", "not", "None", "and", "choice", "==", "''", ":", "\n", "            ", "return", "valid", "[", "default", "]", "\n", "", "elif", "choice", "in", "valid", ":", "\n", "            ", "return", "valid", "[", "choice", "]", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"Please respond with 'yes' or 'no' \"", "\"(or 'y' or 'n').\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.query_options": [[128, 154], ["sys.stdout.write", "input", "default.lower", "options.copy", "ValueError", "sys.stdout.write", "options.copy.index"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "", "", "def", "query_options", "(", "question", ",", "options", ",", "default", "=", "None", ")", ":", "\n", "    ", "\"\"\"Ask a yes/no question via raw_input() and return their answer.\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n    The \"answer\" return value is one of \"yes\" or \"no\".\n    \"\"\"", "\n", "if", "default", "is", "None", ":", "\n", "        ", "prompt", "=", "\" (%s) \"", "%", "\"/\"", ".", "join", "(", "options", ")", "\n", "", "elif", "default", ".", "lower", "(", ")", "in", "options", ":", "\n", "        ", "options_with_default", "=", "options", ".", "copy", "(", ")", "\n", "options_with_default", "[", "options_with_default", ".", "index", "(", "default", ")", "]", "=", "\"[%s]\"", "%", "default", "\n", "prompt", "=", "\" (%s) \"", "%", "\"/\"", ".", "join", "(", "options_with_default", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid default answer: '%s'\"", "%", "default", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "question", "+", "prompt", ")", "\n", "choice", "=", "input", "(", ")", "\n", "if", "default", "is", "not", "None", "and", "choice", "==", "''", ":", "\n", "            ", "return", "default", "\n", "", "elif", "choice", "in", "options", ":", "\n", "            ", "return", "choice", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\"Please respond with %s .\\n\"", "%", "prompt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.query_continue": [[155, 157], ["utils.query_yes_no"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.query_yes_no"], ["", "", "", "def", "query_continue", "(", ")", ":", "\n", "    ", "return", "query_yes_no", "(", "'Do you want to continue?'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.get_timestamp": [[191, 193], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "", "def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d_%H%M%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.in_unit_cube": [[194, 196], ["all", "all"], "function", ["None"], ["", "def", "in_unit_cube", "(", "x", ")", ":", "\n", "    ", "return", "all", "(", "x", ">=", "0", ")", "and", "(", "all", "(", "x", "<=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.str_to_bool": [[197, 204], ["None"], "function", ["None"], ["", "def", "str_to_bool", "(", "s", ")", ":", "\n", "    ", "if", "s", "in", "[", "'true'", ",", "'True'", ",", "'1'", ",", "'T'", "]", ":", "\n", "        ", "return", "True", "\n", "", "if", "s", "in", "[", "'false'", ",", "'False'", ",", "'0'", ",", "'F'", "]", ":", "\n", "        ", "return", "False", "\n", "\n", "", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_path_if_exists": [[205, 211], ["os.path.join", "os.path.exists", "Exception"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["", "def", "join_path_if_exists", "(", "*", "args", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "*", "args", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "raise", "Exception", "(", "f\"Could not find {path}.\"", ")", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_path_if_not_exists": [[213, 219], ["os.path.join", "os.path.exists", "Exception"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["", "def", "join_path_if_not_exists", "(", "*", "args", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "*", "args", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "raise", "Exception", "(", "f\"Path {path} already exists.\"", ")", "\n", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.mkdir_if_not_exits": [[220, 223], ["os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["", "def", "mkdir_if_not_exits", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.mkdir_fail_if_exists": [[224, 229], ["os.path.exists", "os.mkdir", "Exception"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["", "", "def", "mkdir_fail_if_exists", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f\"Directory {dir} already exists.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_dtypes": [[231, 248], ["numpy.dtype", "dtype.fields.items"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.dtype", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "", "def", "join_dtypes", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    Helper which joins dtypes d1 and d2, and returns a new dtype containing the fields of both d1 and d2.\n    TODO: Does not check for field name collisions right now.\n\n    Args:\n        d1:\n        d2:\n\n    Returns:\n\n    \"\"\"", "\n", "fields", "=", "[", "]", "\n", "for", "dtype", "in", "args", ":", "\n", "        ", "fields", "+=", "[", "(", "f", ",", "dt", "[", "0", "]", ")", "for", "f", ",", "dt", "in", "dtype", ".", "fields", ".", "items", "(", ")", "]", "\n", "\n", "", "return", "np", ".", "dtype", "(", "fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_dtype_arrays": [[249, 273], ["numpy.zeros", "isinstance", "isinstance"], "function", ["None"], ["", "def", "join_dtype_arrays", "(", "a1", ",", "a2", ",", "target_dtype", ")", ":", "\n", "    ", "\"\"\"\n    Initializes a new array with dtype target_dtype, and copies matching fields from a1 and a2 to the new array.\n\n    Args:\n        a1:\n        a2:\n        target_dtype:\n\n    Returns:\n\n    \"\"\"", "\n", "new_ar", "=", "np", ".", "zeros", "(", "shape", "=", "(", ")", ",", "dtype", "=", "target_dtype", ")", "\n", "fields1", "=", "a1", "if", "isinstance", "(", "a1", ",", "dict", ")", "else", "a1", ".", "dtype", ".", "fields", "\n", "for", "f", "in", "fields1", ":", "\n", "        ", "if", "f", "in", "target_dtype", ".", "fields", ":", "\n", "            ", "new_ar", "[", "f", "]", "=", "a1", "[", "f", "]", "\n", "\n", "", "", "fields2", "=", "a2", "if", "isinstance", "(", "a2", ",", "dict", ")", "else", "a2", ".", "dtype", ".", "fields", "\n", "for", "f", "in", "fields2", ":", "\n", "        ", "if", "f", "in", "target_dtype", ".", "fields", ":", "\n", "            ", "new_ar", "[", "f", "]", "=", "a2", "[", "f", "]", "\n", "\n", "", "", "return", "new_ar", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.import_submodules": [[330, 351], ["isinstance", "pkgutil.walk_packages", "importlib.import_module", "importlib.import_module", "results.update", "utils.import_submodules"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.update", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.import_submodules"], ["def", "import_submodules", "(", "package", ",", "recursive", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    https://stackoverflow.com/questions/3365740/how-to-import-all-submodules\n    Import all submodules of a module, recursively, including subpackages\n\n    Args:\n        package (str | module): package (name or actual module)\n        recursive:\n\n    Returns (dict[str, types.ModuleType]):\n\n    \"\"\"", "\n", "if", "isinstance", "(", "package", ",", "str", ")", ":", "\n", "        ", "package", "=", "importlib", ".", "import_module", "(", "package", ")", "\n", "", "results", "=", "{", "}", "\n", "for", "loader", ",", "name", ",", "is_pkg", "in", "pkgutil", ".", "walk_packages", "(", "package", ".", "__path__", ")", ":", "\n", "        ", "full_name", "=", "package", ".", "__name__", "+", "'.'", "+", "name", "\n", "results", "[", "full_name", "]", "=", "importlib", ".", "import_module", "(", "full_name", ")", "\n", "if", "recursive", "and", "is_pkg", ":", "\n", "            ", "results", ".", "update", "(", "import_submodules", "(", "full_name", ")", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate": [[352, 368], ["path.rsplit", "__import__", "getattr", "globals", "locals", "hasattr", "ImportError"], "function", ["None"], ["", "def", "locate", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Dynamically loads \"path\", raises an Exception if not found.\n\n    Args:\n        path:\n\n    Returns:\n\n    \"\"\"", "\n", "(", "modulename", ",", "classname", ")", "=", "path", ".", "rsplit", "(", "'.'", ",", "1", ")", "\n", "\n", "m", "=", "__import__", "(", "modulename", ",", "globals", "(", ")", ",", "locals", "(", ")", ",", "[", "classname", "]", ")", "\n", "if", "not", "hasattr", "(", "m", ",", "classname", ")", ":", "\n", "        ", "raise", "ImportError", "(", "f'Could not locate \"{path}\".'", ")", "\n", "", "return", "getattr", "(", "m", ",", "classname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.dict_to_yaml": [[369, 375], ["io.StringIO", "yaml.dump", "io.StringIO.getvalue", "io.StringIO.close"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close"], ["", "def", "dict_to_yaml", "(", "dict", ")", ":", "\n", "    ", "ss", "=", "StringIO", "(", ")", "\n", "yaml", ".", "dump", "(", "dict", ",", "ss", ",", "default_flow_style", "=", "False", ")", "\n", "str", "=", "ss", ".", "getvalue", "(", ")", "\n", "ss", ".", "close", "(", ")", "\n", "return", "str", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.split_int": [[377, 395], ["range", "split.append", "int"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "split_int", "(", "i", ",", "p", ")", ":", "\n", "    ", "\"\"\"\n    Split i into p buckets, such that the bucket size is as equal as possible\n    Args:\n        i: integer to be split\n        p: number of buckets\n\n    Returns: list of length p, such that sum(list) = i, and the list entries differ by at most 1\n\n    \"\"\"", "\n", "split", "=", "[", "]", "\n", "n", "=", "i", "/", "p", "# min items per subsequence", "\n", "r", "=", "i", "%", "p", "# remaindered items", "\n", "\n", "for", "i", "in", "range", "(", "p", ")", ":", "\n", "        ", "split", ".", "append", "(", "int", "(", "n", "+", "(", "i", "<", "r", ")", ")", ")", "\n", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.nan_stderr": [[396, 398], ["numpy.nanstd", "numpy.sqrt", "numpy.count_nonzero", "numpy.isnan"], "function", ["None"], ["", "def", "nan_stderr", "(", "data", ",", "axis", "=", "None", ")", ":", "\n", "    ", "return", "np", ".", "nanstd", "(", "data", ",", "axis", "=", "axis", ")", "/", "np", ".", "sqrt", "(", "np", ".", "count_nonzero", "(", "~", "np", ".", "isnan", "(", "data", ")", ",", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.norm_pdf": [[402, 404], ["numpy.exp"], "function", ["None"], ["def", "norm_pdf", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "exp", "(", "-", "x", "**", "2", "/", "2", ")", "*", "SQRT2PI", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.norm_cdf": [[406, 408], ["scipy.special.erf", "numpy.sqrt"], "function", ["None"], ["", "def", "norm_cdf", "(", "x", ")", ":", "\n", "    ", "return", "(", "1.0", "+", "scipy", ".", "special", ".", "erf", "(", "x", "/", "np", ".", "sqrt", "(", "2.0", ")", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.parse_int_set": [[409, 451], ["isinstance", "set", "set", "set", "x.strip", "len", "Exception", "nputstr.split", "len", "set.add", "int", "int", "len", "token.sort", "range", "set.add", "k.strip", "i.split", "set.add", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add"], ["", "def", "parse_int_set", "(", "nputstr", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"\n        return a set of selected values when a string in the form:\n        1-4,6\n        would return:\n        1,2,3,4,6\n        as expected...\n\n        Taken from https://stackoverflow.com/a/712483\n    \"\"\"", "\n", "if", "isinstance", "(", "nputstr", ",", "int", ")", ":", "\n", "        ", "return", "set", "(", "[", "nputstr", "]", ")", "\n", "", "selection", "=", "set", "(", ")", "\n", "invalid", "=", "set", "(", ")", "\n", "# tokens are comma seperated values", "\n", "tokens", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "nputstr", ".", "split", "(", "','", ")", "]", "\n", "for", "i", "in", "tokens", ":", "\n", "        ", "if", "len", "(", "i", ")", ">", "0", ":", "\n", "            ", "if", "i", "[", ":", "1", "]", "==", "\"<\"", ":", "\n", "                ", "i", "=", "\"1-%s\"", "%", "(", "i", "[", "1", ":", "]", ")", "\n", "", "", "try", ":", "\n", "# typically tokens are plain old integers", "\n", "            ", "selection", ".", "add", "(", "int", "(", "i", ")", ")", "\n", "", "except", ":", "\n", "# if not, then it might be a range", "\n", "            ", "try", ":", "\n", "                ", "token", "=", "[", "int", "(", "k", ".", "strip", "(", ")", ")", "for", "k", "in", "i", ".", "split", "(", "'-'", ")", "]", "\n", "if", "len", "(", "token", ")", ">", "1", ":", "\n", "                    ", "token", ".", "sort", "(", ")", "\n", "# we have items seperated by a dash", "\n", "# try to build a valid range", "\n", "first", "=", "token", "[", "0", "]", "\n", "last", "=", "token", "[", "len", "(", "token", ")", "-", "1", "]", "\n", "for", "x", "in", "range", "(", "first", ",", "last", "+", "1", ")", ":", "\n", "                        ", "selection", ".", "add", "(", "x", ")", "\n", "", "", "", "except", ":", "\n", "# not an int and not a range...", "\n", "                ", "invalid", ".", "add", "(", "i", ")", "\n", "# Report invalid tokens before returning valid selection", "\n", "", "", "", "if", "len", "(", "invalid", ")", ">", "0", ":", "\n", "        ", "Exception", "(", "f\"Invalid set: {invalid}\"", ")", "\n", "", "return", "selection", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.algorithm_optimizer_gradients": [[2, 10], ["[].rsplit", "[].rsplit"], "function", ["None"], ["    ", "algorithm", "=", "config", "[", "'experiment.simple'", "]", "[", "'algorithm'", "]", ".", "rsplit", "(", "'.'", ",", "1", ")", "[", "1", "]", "\n", "# env = config['experiment.simple']['environment'].rsplit('.', 1)[1]", "\n", "tr_radius", "=", "get_setting", "(", "config", ",", "'algorithm.subdomainbo'", ",", "'tr_radius'", ")", "\n", "beta", "=", "get_setting", "(", "config", ",", "'model'", ",", "'beta'", ")", "\n", "tr_method", "=", "get_setting", "(", "config", ",", "'algorithm.subdomainbo'", ",", "'tr_method'", ")", "\n", "max_queries_tr", "=", "get_setting", "(", "config", ",", "'algorithm.subdomainbo'", ",", "'max_queries_tr'", ")", "\n", "\n", "\n", "acquisition", "=", "''", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.environment": [[15, 18], ["[].rsplit"], "function", ["None"], ["\n", "", "def", "get_setting", "(", "config", ",", "section", ",", "setting", ")", ":", "\n", "    ", "if", "section", "in", "config", "and", "setting", "in", "config", "[", "section", "]", ":", "\n", "        ", "return", "f\"-{config[section][setting]}\"", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.noise_test": [[19, 24], ["[].rsplit", "[].rsplit"], "function", ["None"], ["", "return", "''", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.algorithm": [[26, 31], ["[].rsplit", "[].rsplit"], "function", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.algorithm_name": [[32, 37], ["[].rsplit"], "function", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret.__init__": [[11, 15], ["febo.plots.plot.DataPlot.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "experiment", ")", "\n", "self", ".", "_title", "=", "'Cumulative Regret'", "\n", "self", ".", "_max_value_warning", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._init_dset": [[16, 22], ["regret.Regret._check_max_value_available"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._check_max_value_available"], ["", "def", "_init_dset", "(", "self", ",", "dset", ")", ":", "\n", "        ", "self", ".", "_check_max_value_available", "(", "dset", ")", "\n", "self", ".", "_total", "=", "0", "\n", "self", ".", "_y_field", "=", "\"y\"", "\n", "if", "\"y_exact\"", "in", "dset", ".", "dtype", ".", "fields", ":", "\n", "            ", "self", ".", "_y_field", "=", "\"y_exact\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._get_value": [[23, 26], ["regret.Regret._to_regret"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._to_regret"], ["", "", "def", "_get_value", "(", "self", ",", "row", ",", "t", ")", ":", "\n", "        ", "self", ".", "_total", "+=", "self", ".", "_to_regret", "(", "row", "[", "self", ".", "_y_field", "]", ",", "row", ")", "\n", "return", "self", ".", "_total", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._check_max_value_available": [[27, 33], ["logger.warning", "regret.Regret._title.replace"], "methods", ["None"], ["", "def", "_check_max_value_available", "(", "self", ",", "dset", ")", ":", "\n", "        ", "if", "self", ".", "_max_value_warning", ":", "\n", "            ", "if", "not", "\"y_max\"", "in", "dset", ".", "dtype", ".", "fields", ":", "\n", "                ", "logger", ".", "warning", "(", "\"No y_max values available. Showing reward plots instead of regret.\"", ")", "\n", "self", ".", "_title", "=", "self", ".", "_title", ".", "replace", "(", "'Regret'", ",", "'Reward'", ")", "\n", "", "self", ".", "_max_value_warning", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._to_regret": [[34, 39], ["None"], "methods", ["None"], ["", "", "def", "_to_regret", "(", "self", ",", "value", ",", "row", ")", ":", "\n", "        ", "if", "'y_max'", "in", "row", ".", "dtype", ".", "fields", ":", "\n", "            ", "return", "row", "[", "\"y_max\"", "]", "-", "value", "\n", "", "else", ":", "\n", "            ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.SimpleRegret.__init__": [[46, 49], ["regret.Regret.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "experiment", ")", "\n", "self", ".", "_title", "=", "'Simple Regret'", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.SimpleRegret._init_dset": [[50, 57], ["regret.Regret._init_dset"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.CumulativeTime._init_dset"], ["", "def", "_init_dset", "(", "self", ",", "dset", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_dset", "(", "dset", ")", "\n", "\n", "if", "'y_max'", "in", "dset", ".", "dtype", ".", "fields", ":", "\n", "            ", "self", ".", "_best", "=", "10e10", "\n", "", "else", ":", "\n", "            ", "self", ".", "_best", "=", "-", "10e10", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.SimpleRegret._get_value": [[58, 66], ["regret.SimpleRegret._to_regret", "min", "max"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._to_regret"], ["", "", "def", "_get_value", "(", "self", ",", "row", ",", "t", ")", ":", "\n", "        ", "value", "=", "self", ".", "_to_regret", "(", "row", "[", "self", ".", "_y_field", "]", ",", "row", ")", "\n", "if", "'y_max'", "in", "row", ".", "dtype", ".", "fields", ":", "\n", "            ", "self", ".", "_best", "=", "min", "(", "self", ".", "_best", ",", "value", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_best", "=", "max", "(", "self", ".", "_best", ",", "value", ")", "\n", "\n", "", "return", "self", ".", "_best", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.InferenceRegret.__init__": [[73, 76], ["regret.Regret.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "experiment", ")", "\n", "self", ".", "_title", "=", "'Inference Regret'", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.InferenceRegret._init_dset": [[77, 85], ["regret.Regret._init_dset", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.CumulativeTime._init_dset"], ["", "def", "_init_dset", "(", "self", ",", "dset", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_dset", "(", "dset", ")", "\n", "if", "\"y_exact_bp\"", "in", "dset", ".", "dtype", ".", "fields", ":", "\n", "            ", "self", ".", "_y_field", "=", "\"y_exact_bp\"", "\n", "", "elif", "\"y_bp\"", "in", "dset", ".", "dtype", ".", "fields", ":", "\n", "            ", "self", ".", "_y_field", "=", "\"y_bp\"", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"No field for best_predicted found. Fall back to {self._y_field}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.InferenceRegret._get_value": [[87, 89], ["regret.InferenceRegret._to_regret"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.regret.Regret._to_regret"], ["", "", "def", "_get_value", "(", "self", ",", "row", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "_to_regret", "(", "row", "[", "self", ".", "_y_field", "]", ",", "row", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.linearly_spaced_combinations": [[24, 58], ["len", "isinstance", "len", "numpy.linspace", "numpy.array", "numpy.linspace", "zip", "x.ravel", "numpy.meshgrid"], "function", ["None"], ["def", "linearly_spaced_combinations", "(", "bounds", ",", "num_samples", ")", ":", "\n", "    ", "\"\"\"\n    Return 2-D array with all linearly spaced combinations with the bounds.\n\n    Parameters\n    ----------\n    bounds: sequence of tuples\n        The bounds for the variables, [(x1_min, x1_max), (x2_min, x2_max), ...]\n    num_samples: integer or array_likem\n        Number of samples to use for every dimension. Can be a constant if\n        the same number should be used for all, or an array to fine-tune\n        precision. Total number of data points is num_samples ** len(bounds).\n\n    Returns\n    -------\n    combinations: 2-d array\n        A 2-d arrray. If d = len(bounds) and l = prod(num_samples) then it\n        is of size l x d, that is, every row contains one combination of\n        inputs.\n    \"\"\"", "\n", "num_vars", "=", "len", "(", "bounds", ")", "\n", "\n", "if", "not", "isinstance", "(", "num_samples", ",", "Sequence", ")", ":", "\n", "        ", "num_samples", "=", "[", "num_samples", "]", "*", "num_vars", "\n", "\n", "", "if", "len", "(", "bounds", ")", "==", "1", ":", "\n", "        ", "return", "np", ".", "linspace", "(", "bounds", "[", "0", "]", "[", "0", "]", ",", "bounds", "[", "0", "]", "[", "1", "]", ",", "num_samples", "[", "0", "]", ")", "[", ":", ",", "None", "]", "\n", "\n", "# Create linearly spaced test inputs", "\n", "", "inputs", "=", "[", "np", ".", "linspace", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "n", ")", "for", "b", ",", "n", "in", "zip", "(", "bounds", ",", "\n", "num_samples", ")", "]", "\n", "\n", "# Convert to 2-D array", "\n", "return", "np", ".", "array", "(", "[", "x", ".", "ravel", "(", ")", "for", "x", "in", "np", ".", "meshgrid", "(", "*", "inputs", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.sample_gp_function": [[60, 147], ["utilities.linearly_spaced_combinations", "numpy.random.multivariate_normal", "kernel.K", "numpy.zeros", "numpy.eye", "numpy.atleast_2d", "scipy.interpolate.griddata", "scipy.linalg.cho_factor", "scipy.linalg.cho_solve", "numpy.atleast_2d", "mean_function", "numpy.atleast_2d", "kernel.K().dot", "kernel.K().dot.squeeze", "numpy.sqrt", "numpy.random.randn", "mean_function", "kernel.K", "numpy.sqrt", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.linearly_spaced_combinations"], ["", "def", "sample_gp_function", "(", "kernel", ",", "bounds", ",", "noise_var", ",", "num_samples", ",", "\n", "interpolation", "=", "'kernel'", ",", "mean_function", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Sample a function from a gp with corresponding kernel within its bounds.\n\n    Parameters\n    ----------\n    kernel: instance of GPy.kern.*\n    bounds: list of tuples\n        [(x1_min, x1_max), (x2_min, x2_max), ...]\n    noise_var: float\n        Variance of the observation noise of the GP function\n    num_samples: int or list\n        If integer draws the corresponding number of samples in all\n        dimensions and test all possible input combinations. If a list then\n        the list entries correspond to the number of linearly spaced samples of\n        the corresponding input\n    interpolation: string\n        If 'linear' interpolate linearly between samples, if 'kernel' use the\n        corresponding mean RKHS-function of the GP.\n    mean_function: callable\n        Mean of the sample function\n\n    Returns\n    -------\n    function: object\n        function(x, noise=True)\n        A function that takes as inputs new locations x to be evaluated and\n        returns the corresponding noisy function values. If noise=False is\n        set the true function values are returned (useful for plotting).\n    \"\"\"", "\n", "inputs", "=", "linearly_spaced_combinations", "(", "bounds", ",", "num_samples", ")", "\n", "cov", "=", "kernel", ".", "K", "(", "inputs", ")", "+", "np", ".", "eye", "(", "inputs", ".", "shape", "[", "0", "]", ")", "*", "1e-6", "\n", "output", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "inputs", ".", "shape", "[", "0", "]", ")", ",", "\n", "cov", ")", "\n", "\n", "if", "interpolation", "==", "'linear'", ":", "\n", "\n", "        ", "def", "evaluate_gp_function_linear", "(", "x", ",", "noise", "=", "True", ")", ":", "\n", "            ", "\"\"\"\n            Evaluate the GP sample function with linear interpolation.\n\n            Parameters\n            ----------\n            x: np.array\n                2D array with inputs\n            noise: bool\n                Whether to include prediction noise\n            \"\"\"", "\n", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "sp", ".", "interpolate", ".", "griddata", "(", "inputs", ",", "output", ",", "x", ",", "method", "=", "'linear'", ")", "\n", "\n", "# Work around weird dimension squishing in griddata", "\n", "y", "=", "np", ".", "atleast_2d", "(", "y", ".", "squeeze", "(", ")", ")", ".", "T", "\n", "\n", "if", "mean_function", "is", "not", "None", ":", "\n", "                ", "y", "+=", "mean_function", "(", "x", ")", "\n", "", "if", "noise", ":", "\n", "                ", "y", "+=", "np", ".", "sqrt", "(", "noise_var", ")", "*", "np", ".", "random", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "return", "y", "\n", "", "return", "evaluate_gp_function_linear", "\n", "\n", "", "elif", "interpolation", "==", "'kernel'", ":", "\n", "        ", "cho_factor", "=", "sp", ".", "linalg", ".", "cho_factor", "(", "cov", ")", "\n", "alpha", "=", "sp", ".", "linalg", ".", "cho_solve", "(", "cho_factor", ",", "output", ")", "\n", "\n", "def", "evaluate_gp_function_kernel", "(", "x", ",", "noise", "=", "True", ")", ":", "\n", "            ", "\"\"\"\n            Evaluate the GP sample function with kernel interpolation.\n\n            Parameters\n            ----------\n            x: np.array\n                2D array with inputs\n            noise: bool\n                Whether to include prediction noise\n            \"\"\"", "\n", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "kernel", ".", "K", "(", "x", ",", "inputs", ")", ".", "dot", "(", "alpha", ")", "\n", "y", "=", "y", "[", ":", ",", "None", "]", "\n", "if", "mean_function", "is", "not", "None", ":", "\n", "                ", "y", "+=", "mean_function", "(", "x", ")", "\n", "", "if", "noise", ":", "\n", "                ", "y", "+=", "np", ".", "sqrt", "(", "noise_var", ")", "*", "np", ".", "random", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "return", "y", "\n", "\n", "", "return", "evaluate_gp_function_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.plot_2d_gp": [[149, 231], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "list", "mean.squeeze", "figure.gca.fill_between", "figure.gca.plot", "figure.gca.scatter", "figure.gca.scatter", "figure.gca.set_xlim", "range", "list.remove", "gp._raw_predict", "numpy.sqrt", "figure.gca.plot", "NotImplementedError", "NotImplemented", "plt.figure", "plt.figure.gca", "plt.figure.gca", "var.squeeze", "numpy.min", "numpy.max", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.pop", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.pop", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.pop", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._raw_predict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot"], ["", "", "def", "plot_2d_gp", "(", "gp", ",", "inputs", ",", "predictions", "=", "None", ",", "figure", "=", "None", ",", "axis", "=", "None", ",", "\n", "fixed_inputs", "=", "None", ",", "beta", "=", "3", ",", "fmin", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Plot a 2D GP with uncertainty.\n\n        Parameters\n        ----------\n        gp: Instance of GPy.models.GPRegression\n        inputs: 2darray\n            The input parameters at which the GP is to be evaluated\n        predictions: ndarray\n            Can be used to manually pass the GP predictions, set to None to\n            use the gp directly. Is of the form (mean, variance)\n        figure: matplotlib figure\n            The figure on which to draw (ignored if axis is provided\n        axis: matplotlib axis\n            The axis on which to draw\n        fixed_inputs: list\n            A list containing the the fixed inputs and their corresponding\n            values, e.g., [(0, 3.2), (4, -2.43)]. Set the value to None if\n            it's not fixed, but should not be a plotted axis either\n        beta: float\n            The confidence interval used\n        fmin : float\n            The safety threshold value.\n\n        Returns\n        -------\n        axis\n        \"\"\"", "\n", "if", "fixed_inputs", "is", "None", ":", "\n", "            ", "if", "gp", ".", "kern", ".", "input_dim", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'This only works for 1D inputs'", ")", "\n", "", "fixed_inputs", "=", "[", "]", "\n", "", "elif", "gp", ".", "kern", ".", "input_dim", "-", "len", "(", "fixed_inputs", ")", "!=", "1", ":", "\n", "            ", "raise", "NotImplemented", "(", "'This only works for 1D inputs'", ")", "\n", "\n", "", "ms", "=", "kwargs", ".", "pop", "(", "'ms'", ",", "10", ")", "\n", "mew", "=", "kwargs", ".", "pop", "(", "'mew'", ",", "3", ")", "\n", "point_color", "=", "kwargs", ".", "pop", "(", "'point_color'", ",", "'k'", ")", "\n", "\n", "if", "axis", "is", "None", ":", "\n", "            ", "if", "figure", "is", "None", ":", "\n", "                ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "", "else", ":", "\n", "                ", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "\n", "# Get a list of unfixed inputs to plot", "\n", "", "", "unfixed", "=", "list", "(", "range", "(", "gp", ".", "kern", ".", "input_dim", ")", ")", "\n", "for", "dim", ",", "val", "in", "fixed_inputs", ":", "\n", "            ", "if", "val", "is", "not", "None", ":", "\n", "                ", "inputs", "[", ":", ",", "dim", "]", "=", "val", "\n", "", "unfixed", ".", "remove", "(", "dim", ")", "\n", "\n", "# Compute GP predictions if not provided", "\n", "", "if", "predictions", "is", "None", ":", "\n", "            ", "mean", ",", "var", "=", "gp", ".", "_raw_predict", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "predictions", "\n", "\n", "", "output", "=", "mean", ".", "squeeze", "(", ")", "\n", "std_dev", "=", "beta", "*", "np", ".", "sqrt", "(", "var", ".", "squeeze", "(", ")", ")", "\n", "\n", "axis", ".", "fill_between", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "output", "-", "std_dev", ",", "\n", "output", "+", "std_dev", ",", "\n", "facecolor", "=", "'blue'", ",", "\n", "alpha", "=", "0.3", ")", "\n", "\n", "axis", ".", "plot", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ",", "output", ",", "**", "kwargs", ")", "\n", "axis", ".", "scatter", "(", "gp", ".", "X", "[", ":", "-", "1", ",", "unfixed", "[", "0", "]", "]", ",", "gp", ".", "Y", "[", ":", "-", "1", ",", "0", "]", ",", "s", "=", "20", "*", "ms", ",", "\n", "marker", "=", "'x'", ",", "linewidths", "=", "mew", ",", "color", "=", "point_color", ")", "\n", "axis", ".", "scatter", "(", "gp", ".", "X", "[", "-", "1", ",", "unfixed", "[", "0", "]", "]", ",", "gp", ".", "Y", "[", "-", "1", ",", "0", "]", ",", "s", "=", "20", "*", "ms", ",", "\n", "marker", "=", "'x'", ",", "linewidths", "=", "mew", ",", "color", "=", "'r'", ")", "\n", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "if", "fmin", "is", "not", "None", ":", "\n", "            ", "axis", ".", "plot", "(", "inputs", "[", "[", "0", ",", "-", "1", "]", ",", "unfixed", "[", "0", "]", "]", ",", "[", "fmin", ",", "fmin", "]", ",", "'k--'", ")", "\n", "\n", "", "return", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.plot_3d_gp": [[233, 310], ["list", "Axes3D.plot_trisurf", "Axes3D.plot", "Axes3D.plot", "Axes3D.set_xlim", "Axes3D.set_ylim", "range", "list.remove", "gp._raw_predict", "NotImplementedError", "NotImplemented", "plt.figure", "Axes3D", "Axes3D", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "len"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._raw_predict"], ["", "def", "plot_3d_gp", "(", "gp", ",", "inputs", ",", "predictions", "=", "None", ",", "figure", "=", "None", ",", "axis", "=", "None", ",", "\n", "fixed_inputs", "=", "None", ",", "beta", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Plot a 3D gp with uncertainty.\n\n        Parameters\n        ----------\n        gp: Instance of GPy.models.GPRegression\n        inputs: 2darray\n            The input parameters at which the GP is to be evaluated\n        predictions: ndarray\n            Can be used to manually pass the GP predictions, set to None to\n            use the gp directly. Is of the form [mean, variance]\n        figure: matplotlib figure\n            The figure on which to draw (ignored if axis is provided\n        axis: matplotlib axis\n            The axis on which to draw\n        fixed_inputs: list\n            A list containing the the fixed inputs and their corresponding\n            values, e.g., [(0, 3.2), (4, -2.43)]. Set the value to None if\n            it's not fixed, but should not be a plotted axis either\n        beta: float\n            The confidence interval used\n\n        Returns\n        -------\n        surface: matplotlib trisurf plot\n        data: matplotlib plot for data points\n        \"\"\"", "\n", "if", "fixed_inputs", "is", "None", ":", "\n", "            ", "if", "gp", ".", "kern", ".", "input_dim", ">", "2", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'This only works for 2D inputs'", ")", "\n", "", "fixed_inputs", "=", "[", "]", "\n", "", "elif", "gp", ".", "kern", ".", "input_dim", "-", "len", "(", "fixed_inputs", ")", "!=", "2", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Only two inputs can be unfixed'", ")", "\n", "\n", "", "if", "axis", "is", "None", ":", "\n", "            ", "if", "figure", "is", "None", ":", "\n", "                ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "Axes3D", "(", "figure", ")", "\n", "", "else", ":", "\n", "                ", "axis", "=", "Axes3D", "(", "figure", ")", "\n", "\n", "# Get a list of unfixed inputs to plot", "\n", "", "", "unfixed", "=", "list", "(", "range", "(", "gp", ".", "kern", ".", "input_dim", ")", ")", "\n", "for", "dim", ",", "val", "in", "fixed_inputs", ":", "\n", "            ", "if", "val", "is", "not", "None", ":", "\n", "                ", "inputs", "[", ":", ",", "dim", "]", "=", "val", "\n", "", "unfixed", ".", "remove", "(", "dim", ")", "\n", "\n", "# Compute GP predictions if not provided", "\n", "", "if", "predictions", "is", "None", ":", "\n", "            ", "mean", ",", "var", "=", "gp", ".", "_raw_predict", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "predictions", "\n", "\n", "", "surf", "=", "axis", ".", "plot_trisurf", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "inputs", "[", ":", ",", "unfixed", "[", "1", "]", "]", ",", "\n", "mean", "[", ":", ",", "0", "]", ",", "\n", "cmap", "=", "cm", ".", "jet", ",", "linewidth", "=", "0.2", ",", "alpha", "=", "0.5", ")", "\n", "\n", "data", "=", "axis", ".", "plot", "(", "gp", ".", "X", "[", ":", "-", "1", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "gp", ".", "X", "[", ":", "-", "1", ",", "unfixed", "[", "1", "]", "]", ",", "\n", "gp", ".", "Y", "[", ":", "-", "1", ",", "0", "]", ",", "\n", "'o'", ")", "\n", "axis", ".", "plot", "(", "gp", ".", "X", "[", "-", "1", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "gp", ".", "X", "[", "-", "1", ",", "unfixed", "[", "1", "]", "]", ",", "\n", "gp", ".", "Y", "[", "-", "1", ",", "0", "]", ",", "\n", "'ro'", ")", "\n", "\n", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "axis", ".", "set_ylim", "(", "[", "np", ".", "min", "(", "inputs", "[", ":", ",", "unfixed", "[", "1", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", ":", ",", "unfixed", "[", "1", "]", "]", ")", "]", ")", "\n", "\n", "return", "surf", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.plot_x_and_f": [[311, 334], ["enumerate", "figure.gca.set_xlim", "figure.gca.set_ylim", "figure.gca.plot", "isinstance", "plt.figure", "plt.figure.gca", "plt.figure.gca", "slices.append", "lengths.append", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot"], ["", "def", "plot_x_and_f", "(", "f", ",", "inputs", ",", "X", ",", "axis", "=", "None", ",", "figure", "=", "None", ")", ":", "\n", "    ", "if", "axis", "is", "None", ":", "\n", "        ", "if", "figure", "is", "None", ":", "\n", "            ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "", "else", ":", "\n", "            ", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "\n", "", "", "slices", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "if", "isinstance", "(", "inp", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "slices", ".", "append", "(", "i", ")", "\n", "lengths", ".", "append", "(", "inp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "axis", ".", "set_ylim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", "]", ")", "\n", "\n", "\n", "data", "=", "axis", ".", "plot", "(", "X", "[", ":", ",", "slices", "[", "0", "]", "]", ",", "X", "[", ":", ",", "slices", "[", "1", "]", "]", ",", "'xk'", ",", "markersize", "=", "15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.plot_contour_gp": [[335, 418], ["enumerate", "numpy.meshgrid", "figure.gca.plot", "figure.gca.set_xlim", "figure.gca.set_ylim", "figure.gca.plot", "figure.gca.plot", "figure.gca.plot", "isinstance", "numpy.all", "figure.gca.contour", "plt.figure", "plt.figure.gca", "plt.figure.gca", "slices.append", "lengths.append", "numpy.array", "gp.mean_var", "mesh[].squeeze", "mesh[].squeeze", "mean.squeeze().reshape", "plt.colorbar", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "x.ravel", "mean.squeeze"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "plot_contour_gp", "(", "gp", ",", "inputs", ",", "predictions", "=", "None", ",", "figure", "=", "None", ",", "axis", "=", "None", ",", "\n", "colorbar", "=", "True", ",", "red_points", "=", "None", ",", "green_points", "=", "None", ",", "blue_points", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Plot a 3D gp with uncertainty.\n\n        Parameters\n        ----------\n        gp: Instance of GPy.models.GPRegression\n        inputs: list of arrays/floats\n            The input parameters at which the GP is to be evaluated,\n            here instead of the combinations of inputs the individual inputs\n            that are spread in a grid are given. Only two of the arrays\n            should have more than one value (not fixed).\n        predictions: ndarray\n            Can be used to manually pass the GP predictions, set to None to\n            use the gp directly.\n        figure: matplotlib figure\n            The figure on which to draw (ignored if axis is provided\n        axis: matplotlib axis\n            The axis on which to draw\n\n        Returns\n        -------\n        contour: matplotlib contour plot\n        colorbar: matplotlib colorbar\n        points: matplotlib plot\n        \"\"\"", "\n", "if", "axis", "is", "None", ":", "\n", "            ", "if", "figure", "is", "None", ":", "\n", "                ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "", "else", ":", "\n", "                ", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "\n", "", "", "if", "green_points", "is", "not", "None", ":", "\n", "            ", "data", "=", "axis", ".", "plot", "(", "green_points", "[", ":", ",", "slices", "[", "0", "]", "]", ",", "green_points", "[", ":", ",", "slices", "[", "1", "]", "]", ",", "'og'", ")", "\n", "", "if", "red_points", "is", "not", "None", ":", "\n", "            ", "data", "=", "axis", ".", "plot", "(", "red_points", "[", ":", ",", "slices", "[", "0", "]", "]", ",", "red_points", "[", ":", ",", "slices", "[", "1", "]", "]", ",", "'or'", ")", "\n", "", "if", "blue_points", "is", "not", "None", ":", "\n", "            ", "data", "=", "axis", ".", "plot", "(", "blue_points", "[", ":", ",", "slices", "[", "0", "]", "]", ",", "blue_points", "[", ":", ",", "slices", "[", "1", "]", "]", ",", "'ob'", ")", "\n", "\n", "# Find which inputs are fixed to constant values", "\n", "", "slices", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "            ", "if", "isinstance", "(", "inp", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "slices", ".", "append", "(", "i", ")", "\n", "lengths", ".", "append", "(", "inp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "\n", "", "", "mesh", "=", "np", ".", "meshgrid", "(", "*", "inputs", ",", "indexing", "=", "'ij'", ")", "\n", "if", "predictions", "is", "None", ":", "\n", "# Convert to array with combinations of inputs", "\n", "            ", "gp_inputs", "=", "np", ".", "array", "(", "[", "x", ".", "ravel", "(", ")", "for", "x", "in", "mesh", "]", ")", ".", "T", "\n", "mean", "=", "gp", ".", "mean_var", "(", "gp_inputs", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "mean", "=", "predictions", "[", "0", "]", "\n", "\n", "", "c_bar", "=", "None", "\n", "if", "not", "np", ".", "all", "(", "mean", "==", "mean", "[", "0", "]", ")", ":", "\n", "# Need to squeeze the added dimensions caused by fixed inputs", "\n", "            ", "c", "=", "axis", ".", "contour", "(", "mesh", "[", "slices", "[", "0", "]", "]", ".", "squeeze", "(", ")", ",", "\n", "mesh", "[", "slices", "[", "1", "]", "]", ".", "squeeze", "(", ")", ",", "\n", "mean", ".", "squeeze", "(", ")", ".", "reshape", "(", "*", "lengths", ")", ",", "\n", "20", ",", "\n", "**", "kwargs", ")", "\n", "if", "colorbar", ":", "\n", "                ", "c_bar", "=", "plt", ".", "colorbar", "(", "c", ")", "\n", "", "", "else", ":", "\n", "            ", "c", "=", "None", "\n", "\n", "\n", "\n", "", "data", "=", "axis", ".", "plot", "(", "gp", ".", "_X", "[", ":", ",", "slices", "[", "0", "]", "]", ",", "gp", ".", "_X", "[", ":", ",", "slices", "[", "1", "]", "]", ",", "'xk'", ",", "markersize", "=", "15", ")", "\n", "# axis.plot(gp.X[-1, slices[0]], gp.X[-1, slices[1]], 'or')", "\n", "\n", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "axis", ".", "set_ylim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", "]", ")", "\n", "\n", "return", "c", ",", "c_bar", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.plot_safeset": [[420, 488], ["enumerate", "numpy.meshgrid", "safeset_function", "figure.gca.set_xlim", "figure.gca.set_ylim", "isinstance", "numpy.array", "numpy.all", "figure.gca.contour", "plt.figure", "plt.figure.gca", "plt.figure.gca", "slices.append", "lengths.append", "mesh[].squeeze", "mesh[].squeeze", "safeset_function.reshape", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "x.ravel"], "function", ["None"], ["", "def", "plot_safeset", "(", "safeset_function", ",", "inputs", ",", "predictions", "=", "None", ",", "figure", "=", "None", ",", "axis", "=", "None", ",", "\n", "colorbar", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Plot a 3D gp with uncertainty.\n\n    Parameters\n    ----------\n    gp: Instance of GPy.models.GPRegression\n    inputs: list of arrays/floats\n        The input parameters at which the GP is to be evaluated,\n        here instead of the combinations of inputs the individual inputs\n        that are spread in a grid are given. Only two of the arrays\n        should have more than one value (not fixed).\n    predictions: ndarray\n        Can be used to manually pass the GP predictions, set to None to\n        use the gp directly.\n    figure: matplotlib figure\n        The figure on which to draw (ignored if axis is provided\n    axis: matplotlib axis\n        The axis on which to draw\n\n    Returns\n    -------\n    contour: matplotlib contour plot\n    colorbar: matplotlib colorbar\n    points: matplotlib plot\n    \"\"\"", "\n", "if", "axis", "is", "None", ":", "\n", "        ", "if", "figure", "is", "None", ":", "\n", "            ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "", "else", ":", "\n", "            ", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "\n", "\n", "# Find which inputs are fixed to constant values", "\n", "", "", "slices", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "if", "isinstance", "(", "inp", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "slices", ".", "append", "(", "i", ")", "\n", "lengths", ".", "append", "(", "inp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "", "mesh", "=", "np", ".", "meshgrid", "(", "*", "inputs", ",", "indexing", "=", "'ij'", ")", "\n", "gp_inputs", "=", "np", ".", "array", "(", "[", "x", ".", "ravel", "(", ")", "for", "x", "in", "mesh", "]", ")", ".", "T", "\n", "mean", "=", "safeset_function", "(", "gp_inputs", ")", "\n", "\n", "if", "not", "np", ".", "all", "(", "mean", "==", "mean", "[", "0", "]", ")", ":", "\n", "# Need to squeeze the added dimensions caused by fixed inputs", "\n", "        ", "c", "=", "axis", ".", "contour", "(", "mesh", "[", "slices", "[", "0", "]", "]", ".", "squeeze", "(", ")", ",", "\n", "mesh", "[", "slices", "[", "1", "]", "]", ".", "squeeze", "(", ")", ",", "\n", "mean", ".", "reshape", "(", "*", "lengths", ")", ",", "\n", "levels", "=", "[", "0", "]", ",", "\n", "colors", "=", "[", "'red'", "]", ",", "\n", "linewidths", "=", "2", ",", "\n", "linestyles", "=", "'dashed'", ",", "\n", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "None", "\n", "\n", "\n", "", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "axis", ".", "set_ylim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", "]", ")", "\n", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.__init__": [[13, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "experiment", "=", "experiment", "\n", "self", ".", "_title", "=", "None", "\n", "self", ".", "_show_legend", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.title": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "title", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_title", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot": [[22, 89], ["matplotlib.figure.suptitle", "os.path.join", "os.makedirs", "os.path.join", "matplotlib.savefig", "logger.info", "plot.Plot._get_dset_list", "matplotlib.figure", "matplotlib.figure.gca", "plot.Plot._plot", "isinstance", "matplotlib.figure.legend", "plot.Plot.title.lower().replace", "matplotlib.show", "type", "str", "issubclass", "matplotlib.subplots", "zip", "issubclass", "plot.Plot.title.lower", "plot.Plot._get_dset_list", "plot.Plot._plot", "plt.figure.gca.set_title", "matplotlib.figure", "matplotlib.figure.gca", "len", "plot.Plot._get_dset_list", "plot.Plot._plot", "str", "str"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot._get_dset_list", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.DataPlot._plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot._get_dset_list", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.DataPlot._plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot._get_dset_list", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.DataPlot._plot"], ["", "def", "plot", "(", "self", ",", "show", "=", "True", ",", "group_id", "=", "None", ",", "run_id", "=", "None", ")", ":", "\n", "        ", "from", "febo", ".", "experiment", "import", "MultiExperiment", ",", "SimpleExperiment", "\n", "from", "febo", ".", "controller", "import", "SequentialController", ",", "RepetitionController", "\n", "\n", "path_subdir", "=", "\"\"", "# is set to group_id if group_id != None", "\n", "run_id_str", "=", "None", "# either \"-all\" if run_id == None, als \"-{run_id}\"", "\n", "\n", "# plot data from simple experiment, or a single data group", "\n", "if", "type", "(", "self", ".", "experiment", ")", "is", "SimpleExperiment", "or", "group_id", "!=", "None", ":", "\n", "            ", "if", "group_id", "!=", "None", ":", "\n", "                ", "path_subdir", "=", "str", "(", "self", ".", "experiment", ".", "parts", "[", "group_id", "]", ".", "id", ")", "\n", "group", "=", "self", ".", "experiment", ".", "hdf5", "[", "path_subdir", "]", "\n", "label", "=", "self", ".", "experiment", ".", "parts", "[", "group_id", "]", ".", "label", "\n", "", "else", ":", "\n", "                ", "group", "=", "self", ".", "experiment", ".", "hdf5", "\n", "label", "=", "self", ".", "experiment", ".", "algorithm", ".", "name", "\n", "\n", "", "dset_list", ",", "run_id_str", "=", "self", ".", "_get_dset_list", "(", "group", ",", "run_id", ")", "\n", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "f", ".", "gca", "(", ")", "\n", "self", ".", "_plot", "(", "axis", ",", "data", "=", "dset_list", ",", "label", "=", "label", ")", "\n", "\n", "# plot data from MultiExperiment with no specific group_id given", "\n", "", "elif", "isinstance", "(", "self", ".", "experiment", ",", "MultiExperiment", ")", ":", "\n", "\n", "# generate plots for SequentialController: each part goes into separate plot", "\n", "            ", "if", "issubclass", "(", "self", ".", "experiment", ".", "config", ".", "multi_controller", ",", "SequentialController", ")", ":", "\n", "                ", "f", ",", "axes", "=", "plt", ".", "subplots", "(", "ncols", "=", "len", "(", "self", ".", "experiment", ".", "parts", ")", ")", "\n", "\n", "for", "axis", ",", "item", "in", "zip", "(", "axes", ",", "self", ".", "experiment", ".", "parts", ")", ":", "\n", "                    ", "group", "=", "self", ".", "experiment", ".", "hdf5", "[", "str", "(", "item", ".", "id", ")", "]", "\n", "data_list", ",", "run_id_str", "=", "self", ".", "_get_dset_list", "(", "group", ",", "run_id", ")", "\n", "self", ".", "_plot", "(", "axis", "=", "axis", ",", "data", "=", "data_list", ",", "label", "=", "item", ".", "label", ")", "\n", "\n", "axis", ".", "set_title", "(", "item", ".", "label", ")", "\n", "\n", "# generate plot for RepetitionController: all parts go into same plot", "\n", "", "", "elif", "issubclass", "(", "self", ".", "experiment", ".", "config", ".", "multi_controller", ",", "RepetitionController", ")", ":", "\n", "                ", "self", ".", "_show_legend", "=", "True", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "f", ".", "gca", "(", ")", "\n", "\n", "# iterate parts and plot data for each group", "\n", "for", "item", "in", "self", ".", "experiment", ".", "parts", ":", "\n", "                    ", "group", "=", "self", ".", "experiment", ".", "hdf5", "[", "str", "(", "item", ".", "id", ")", "]", "\n", "data_list", ",", "run_id_str", "=", "self", ".", "_get_dset_list", "(", "group", ",", "run_id", ")", "\n", "self", ".", "_plot", "(", "axis", ",", "data", "=", "data_list", ",", "label", "=", "item", ".", "label", ")", "\n", "\n", "\n", "", "", "", "if", "self", ".", "_show_legend", ":", "\n", "            ", "f", ".", "legend", "(", ")", "\n", "\n", "# f.legend()", "\n", "", "f", ".", "suptitle", "(", "self", ".", "title", ")", "\n", "\n", "# save figure", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment", ".", "directory", ",", "'plots'", ",", "path_subdir", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "filename", "=", "self", ".", "title", ".", "lower", "(", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "+", "f'-{run_id_str}.pdf'", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "plt", ".", "savefig", "(", "full_path", ")", "\n", "logger", ".", "info", "(", "f\"Saved plot to {full_path}\"", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot._plot": [[90, 92], ["None"], "methods", ["None"], ["", "", "def", "_plot", "(", "self", ",", "axis", ",", "data", ",", "label", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot._get_dset_list": [[93, 107], ["str", "group.values", "group.keys"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.values", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.keys"], ["", "def", "_get_dset_list", "(", "self", ",", "group", ",", "run_id", ")", ":", "\n", "        ", "\"\"\"\n        Helper function to return list of dsets in a hdf5 group, given run_id or run_id=None\n        Also return the run_id as str (this is to convert run_id=-1 to the actual run-id).\n        \"\"\"", "\n", "if", "run_id", "!=", "None", ":", "\n", "            ", "if", "run_id", ">=", "0", ":", "\n", "                ", "dset_name", "=", "str", "(", "run_id", ")", "\n", "", "else", ":", "\n", "                ", "dset_name", "=", "[", "*", "group", ".", "keys", "(", ")", "]", "[", "-", "1", "]", "\n", "", "return", "[", "group", "[", "dset_name", "]", "]", ",", "dset_name", "\n", "\n", "", "else", ":", "\n", "            ", "return", "[", "*", "group", ".", "values", "(", ")", "]", ",", "\"all\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.DataPlot.__init__": [[111, 114], ["plot.Plot.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "experiment", ")", "\n", "self", ".", "_plot_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.DataPlot._plot": [[115, 139], ["len", "axis.errorbar", "plot.DataPlot._init_dset", "enumerate", "numpy.mean", "scipy.sem", "range", "plot.DataPlot._get_value", "values[].append", "max", "len", "values.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.CumulativeTime._init_dset", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.CumulativeTime._get_value"], ["", "def", "_plot", "(", "self", ",", "axis", ",", "data", ",", "label", ")", ":", "\n", "        ", "values", "=", "[", "]", "\n", "\n", "for", "dset", "in", "data", ":", "\n", "            ", "self", ".", "_init_dset", "(", "dset", ")", "\n", "\n", "for", "t", ",", "row", "in", "enumerate", "(", "dset", ")", ":", "\n", "                ", "value", "=", "self", ".", "_get_value", "(", "row", ",", "t", ")", "\n", "\n", "if", "len", "(", "values", ")", "<=", "t", ":", "\n", "                    ", "values", ".", "append", "(", "[", "]", ")", "\n", "", "values", "[", "t", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "avg_values", "=", "[", "np", ".", "mean", "(", "row", ")", "for", "row", "in", "values", "]", "# need to do this row-wise because rows might have different lengths", "\n", "sterr", "=", "[", "stats", ".", "sem", "(", "row", ")", "for", "row", "in", "values", "]", "\n", "\n", "T", "=", "len", "(", "avg_values", ")", "\n", "\n", "\n", "linestyle", "=", "'-'", "\n", "if", "self", ".", "_plot_counter", ">", "9", ":", "\n", "            ", "linestyle", "=", "'--'", "\n", "", "axis", ".", "errorbar", "(", "range", "(", "T", ")", ",", "avg_values", ",", "yerr", "=", "sterr", ",", "label", "=", "label", ",", "errorevery", "=", "max", "(", "1", ",", "T", "//", "20", ")", ",", "linestyle", "=", "linestyle", ")", "\n", "self", ".", "_plot_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.DataPlot._init_dset": [[140, 142], ["None"], "methods", ["None"], ["", "def", "_init_dset", "(", "self", ",", "dset", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.DataPlot._get_value": [[143, 145], ["None"], "methods", ["None"], ["", "def", "_get_value", "(", "self", ",", "row", ",", "t", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Performance.__init__": [[148, 151], ["plot.DataPlot.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "experiment", ")", "\n", "self", ".", "_title", "=", "'Performance'", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Performance._get_value": [[153, 158], ["None"], "methods", ["None"], ["", "def", "_get_value", "(", "self", ",", "row", ",", "t", ")", ":", "\n", "        ", "if", "'y_exact'", "in", "row", ".", "dtype", ".", "fields", ":", "\n", "            ", "return", "row", "[", "'y_exact'", "]", "\n", "", "else", ":", "\n", "            ", "return", "row", "[", "'y'", "]", "", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.Time.__init__": [[5, 8], ["febo.plots.plot.DataPlot.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "experiment", ")", "\n", "self", ".", "_title", "=", "'Time per Step'", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.Time._get_value": [[9, 11], ["None"], "methods", ["None"], ["", "def", "_get_value", "(", "self", ",", "row", ",", "t", ")", ":", "\n", "        ", "return", "row", "[", "\"time\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.CumulativeTime.__init__": [[14, 17], ["febo.plots.plot.DataPlot.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "experiment", ")", "\n", "self", ".", "_title", "=", "'Cumulative Time'", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.CumulativeTime._init_dset": [[18, 20], ["None"], "methods", ["None"], ["", "def", "_init_dset", "(", "self", ",", "dset", ")", ":", "\n", "        ", "self", ".", "_total_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.time.CumulativeTime._get_value": [[21, 24], ["None"], "methods", ["None"], ["", "def", "_get_value", "(", "self", ",", "row", ",", "t", ")", ":", "\n", "        ", "self", ".", "_total_time", "+=", "row", "[", "\"time\"", "]", "\n", "return", "self", ".", "_total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.ucb.UCB.initialize": [[13, 17], ["super().initialize", "print"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UCB", ",", "self", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "print", "(", "self", ".", "model", ".", "gp", ")", "\n", "self", ".", "_initial", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.ucb.UCB.acquisition": [[18, 21], ["X.reshape.reshape.reshape", "ucb.UCB.model.ucb"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.ucb"], ["", "def", "acquisition", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "domain", ".", "d", ")", "\n", "return", "-", "(", "self", ".", "model", ".", "ucb", "(", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.ucb.UCB.add_data": [[22, 24], ["super().add_data"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data"], ["", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.ucb.UCB.acquisition_grad": [[26, 32], ["ucb.UCB.model.mean_var", "numpy.sqrt", "ucb.UCB.model.mean_var_grad", "dmu_dX.reshape.reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.mean_var_grad"], ["", "def", "acquisition_grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", ",", "var", "=", "self", ".", "model", ".", "mean_var", "(", "x", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "var", ")", "\n", "dmu_dX", ",", "dv_dX", "=", "self", ".", "model", ".", "mean_var_grad", "(", "x", ")", "\n", "dmu_dX", "=", "dmu_dX", ".", "reshape", "(", "dmu_dX", ".", "shape", "[", "0", ":", "2", "]", ")", "# flatten out inner dimension", "\n", "return", "-", "(", "mean", "+", "self", ".", "model", ".", "beta", "*", "std", ")", ",", "-", "(", "dmu_dX", "+", "self", ".", "model", ".", "beta", "*", "dv_dX", ")", "/", "(", "2", "*", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.thread.ThreadAlgorithm.initialize": [[14, 29], ["super().initialize", "threading.Event", "thread.ThreadAlgorithm._event_x_ready.clear", "threading.Event", "thread.ThreadAlgorithm._event_y_ready.clear", "threading.Thread", "thread.ThreadAlgorithm._optimizer_thread.start"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.clear", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.clear", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.start"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_exit_thread", "=", "False", "# exit flag", "\n", "\n", "# events for mutual locking", "\n", "self", ".", "_event_x_ready", "=", "Event", "(", ")", "\n", "self", ".", "_event_x_ready", ".", "clear", "(", ")", "\n", "\n", "self", ".", "_event_y_ready", "=", "Event", "(", ")", "\n", "self", ".", "_event_y_ready", ".", "clear", "(", ")", "\n", "\n", "# start thread", "\n", "self", ".", "_optimizer_thread", "=", "Thread", "(", "target", "=", "self", ".", "_minimize", ")", "\n", "self", ".", "_optimizer_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.thread.ThreadAlgorithm._next": [[30, 34], ["thread.ThreadAlgorithm._event_x_ready.wait"], "methods", ["None"], ["", "def", "_next", "(", "self", ")", ":", "\n", "# let the optimizer thread calculate x", "\n", "        ", "self", ".", "_event_x_ready", ".", "wait", "(", ")", "\n", "return", "self", ".", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.thread.ThreadAlgorithm.add_data": [[35, 42], ["super().add_data", "thread.ThreadAlgorithm._event_x_ready.clear", "thread.ThreadAlgorithm._event_y_ready.set", "thread.ThreadAlgorithm._event_x_ready.wait"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.clear"], ["", "def", "add_data", "(", "self", ",", "evaluation", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_data", "(", "evaluation", ")", "\n", "self", ".", "_y", "=", "evaluation", "[", "'y'", "]", "\n", "\n", "self", ".", "_event_x_ready", ".", "clear", "(", ")", "\n", "self", ".", "_event_y_ready", ".", "set", "(", ")", "\n", "self", ".", "_event_x_ready", ".", "wait", "(", ")", "# block main thread until next x is calculated, or optimizer thread terminates", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.thread.ThreadAlgorithm.finalize": [[43, 49], ["thread.ThreadAlgorithm._event_y_ready.set", "thread.ThreadAlgorithm._optimizer_thread.join", "super().finalize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "self", ".", "_exit_thread", "=", "True", "\n", "self", ".", "_event_y_ready", ".", "set", "(", ")", "# unblock optimizer thread", "\n", "\n", "self", ".", "_optimizer_thread", ".", "join", "(", ")", "\n", "return", "super", "(", ")", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.thread.ThreadAlgorithm._minimize": [[50, 54], ["thread.ThreadAlgorithm.minimize", "thread.ThreadAlgorithm._event_x_ready.set"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize"], ["", "def", "_minimize", "(", "self", ")", ":", "\n", "        ", "self", ".", "minimize", "(", ")", "\n", "self", ".", "_exit", "=", "True", "\n", "self", ".", "_event_x_ready", ".", "set", "(", ")", "# unblock main thread", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.thread.ThreadAlgorithm.minimize": [[55, 60], ["None"], "methods", ["None"], ["", "def", "minimize", "(", "self", ")", ":", "\n", "        ", "\"\"\" Start the minimize routine here.\n        e.g. call here: scipy.optimize.minimize(self.f, self.x0, method='Nelder-Mead')\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.thread.ThreadAlgorithm.f": [[61, 73], ["thread.ThreadAlgorithm._event_x_ready.set", "thread.ThreadAlgorithm._event_y_ready.wait", "thread.ThreadAlgorithm._event_y_ready.clear", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.clear", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.exit"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "_x", "=", "x", "\n", "\n", "self", ".", "_event_x_ready", ".", "set", "(", ")", "\n", "self", ".", "_event_y_ready", ".", "wait", "(", ")", "\n", "self", ".", "_event_y_ready", ".", "clear", "(", ")", "\n", "\n", "# if exit flag is set, terminate thread", "\n", "if", "self", ".", "_exit_thread", ":", "\n", "            ", "sys", ".", "exit", "(", ")", "\n", "\n", "", "return", "-", "1", "*", "self", ".", "_y", "# maximize signal, hence \"-1*\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo.initialize": [[25, 58], ["kwargs.get", "numpy.random.normal", "numpy.array", "rembo.Rembo._compute_boundaries_embedding", "febo.environment.ContinuousDomain", "febo.solvers.ScipySolver", "numpy.linalg.pinv", "numpy.empty", "super().initialize", "numpy.linalg.pinv.dot", "febo.utils.join_dtypes", "febo.utils.join_dtype_arrays().view", "aug_initial_data.append", "zip", "febo.utils.join_dtype_arrays"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._compute_boundaries_embedding", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_dtypes", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_dtype_arrays"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# compute embedded domain", "\n", "        ", "domain", "=", "kwargs", ".", "get", "(", "'domain'", ")", "\n", "self", ".", "n_dims", "=", "domain", ".", "d", "\n", "self", ".", "n_embedding_dims", "=", "self", ".", "config", ".", "emb_d", "\n", "\n", "# Determine random embedding matrix", "\n", "self", ".", "A", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "self", ".", "n_dims", ",", "self", ".", "n_embedding_dims", ")", ")", "\n", "self", ".", "_boundaries", "=", "np", ".", "array", "(", "[", "[", "l", ",", "u", "]", "for", "l", ",", "u", "in", "zip", "(", "domain", ".", "l", ",", "domain", ".", "u", ")", "]", ")", "\n", "# Compute boundaries on embedded space", "\n", "self", ".", "_boundaries_embedded", "=", "self", ".", "_compute_boundaries_embedding", "(", "self", ".", "_boundaries", ")", "\n", "self", ".", "_embbeded_domain", "=", "ContinuousDomain", "(", "l", "=", "self", ".", "_boundaries_embedded", "[", ":", ",", "0", "]", ",", "u", "=", "self", ".", "_boundaries_embedded", "[", ":", ",", "1", "]", ")", "\n", "self", ".", "_embbded_solver", "=", "ScipySolver", "(", "self", ".", "_embbeded_domain", ")", "\n", "\n", "# set model_domain to embbeded_domain", "\n", "kwargs", "[", "'model_domain'", "]", "=", "self", ".", "_embbeded_domain", "\n", "\n", "# We manually add x_emb into the data for initial_data        ", "\n", "A_inv", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "A", ")", "\n", "\n", "# Init the x_emb in inital_data", "\n", "initial_data", "=", "kwargs", "[", "'initial_data'", "]", "\n", "aug_initial_data", "=", "[", "]", "\n", "add_data", "=", "np", ".", "empty", "(", "shape", "=", "(", ")", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "for", "ea_d", "in", "initial_data", ":", "\n", "            ", "add_data", "[", "'x_emb'", "]", "=", "A_inv", ".", "dot", "(", "ea_d", "[", "'x'", "]", ")", "\n", "\n", "aug_data_dtype", "=", "join_dtypes", "(", "ea_d", ".", "dtype", ",", "add_data", ".", "dtype", ")", "\n", "ea_aug_data", "=", "join_dtype_arrays", "(", "ea_d", ",", "add_data", ",", "aug_data_dtype", ")", ".", "view", "(", "np", ".", "recarray", ")", "\n", "\n", "aug_initial_data", ".", "append", "(", "ea_aug_data", ")", "\n", "", "kwargs", "[", "'initial_data'", "]", "=", "aug_initial_data", "\n", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._acquisition_function": [[71, 74], ["rembo.Rembo.model.ucb"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.ucb"], ["", "def", "_acquisition_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\" works in embedded domain \"\"\"", "\n", "return", "-", "self", ".", "model", ".", "ucb", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._next": [[75, 82], ["rembo.Rembo._map_to_dataspace", "rembo.Rembo._embbded_solver.minimize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._map_to_dataspace", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize"], ["", "def", "_next", "(", "self", ")", ":", "\n", "        ", "X_query_embedded", "=", "self", ".", "_embbded_solver", ".", "minimize", "(", "self", ".", "_acquisition_function", ")", "[", "0", "]", "\n", "\n", "# Map to higher dimensional space", "\n", "# it is clip to hard boundaries by base class", "\n", "X_query", "=", "self", ".", "_map_to_dataspace", "(", "X_query_embedded", ")", "\n", "return", "X_query", ",", "{", "'x_emb'", ":", "X_query_embedded", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._map_to_dataspace": [[83, 86], ["rembo.Rembo.A.dot"], "methods", ["None"], ["", "def", "_map_to_dataspace", "(", "self", ",", "X_embedded", ")", ":", "\n", "        ", "\"\"\" Map data from manifold to original data space. \"\"\"", "\n", "return", "self", ".", "A", ".", "dot", "(", "X_embedded", ")", "\n", "# if self.data_space is not None:", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._compute_boundaries_embedding": [[92, 132], ["numpy.empty", "range", "numpy.zeros", "numpy.zeros", "rembo.Rembo._map_to_dataspace", "rembo.Rembo._map_to_dataspace", "numpy.sum", "numpy.sum", "numpy.logical_or", "numpy.logical_or"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._map_to_dataspace", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._map_to_dataspace"], ["", "def", "_compute_boundaries_embedding", "(", "self", ",", "boundaries", ")", ":", "\n", "        ", "\"\"\" Approximate box constraint boundaries on low-dimensional manifold\"\"\"", "\n", "# # Check if boundaries have been determined before", "\n", "# boundaries_hash = hash(boundaries[self.n_keep_dims:].tostring())", "\n", "# if boundaries_hash in self.boundaries_cache:", "\n", "#     boundaries_embedded = \\", "\n", "#         np.array(self.boundaries_cache[boundaries_hash])", "\n", "#     boundaries_embedded[:self.n_keep_dims] = \\", "\n", "#         boundaries[:self.n_keep_dims]  # Overwrite keep-dim's boundaries", "\n", "#     return boundaries_embedded", "\n", "\n", "# Determine boundaries on embedded space", "\n", "boundaries_embedded", "=", "np", ".", "empty", "(", "(", "self", ".", "n_embedding_dims", ",", "2", ")", ")", "\n", "for", "dim", "in", "range", "(", "self", ".", "n_embedding_dims", ")", ":", "\n", "            ", "x_embedded", "=", "np", ".", "zeros", "(", "self", ".", "n_embedding_dims", ")", "\n", "while", "True", ":", "\n", "                ", "x", "=", "self", ".", "_map_to_dataspace", "(", "x_embedded", ")", "\n", "if", "np", ".", "sum", "(", "np", ".", "logical_or", "(", "\n", "x", "<", "boundaries", "[", ":", ",", "0", "]", ",", "\n", "x", ">", "boundaries", "[", ":", ",", "1", "]", ")", ")", ">", "self", ".", "n_dims", "/", "2", ":", "\n", "                    ", "break", "\n", "", "x_embedded", "[", "dim", "]", "-=", "0.01", "\n", "", "boundaries_embedded", "[", "dim", ",", "0", "]", "=", "x_embedded", "[", "dim", "]", "\n", "\n", "x_embedded", "=", "np", ".", "zeros", "(", "self", ".", "n_embedding_dims", ")", "\n", "while", "True", ":", "\n", "                ", "x", "=", "self", ".", "_map_to_dataspace", "(", "x_embedded", ")", "\n", "if", "np", ".", "sum", "(", "np", ".", "logical_or", "(", "\n", "x", "<", "boundaries", "[", ":", ",", "0", "]", ",", "\n", "x", ">", "boundaries", "[", ":", ",", "1", "]", ")", ")", ">", "self", ".", "n_dims", "/", "2", ":", "\n", "                    ", "break", "\n", "", "x_embedded", "[", "dim", "]", "+=", "0.01", "\n", "", "boundaries_embedded", "[", "dim", ",", "1", "]", "=", "x_embedded", "[", "dim", "]", "\n", "\n", "# self.boundaries_cache[boundaries_hash] = boundaries_embedded", "\n", "\n", "", "return", "boundaries_embedded", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._get_dtype_fields": [[133, 137], ["super()._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "fields", "=", "super", "(", ")", ".", "_get_dtype_fields", "(", ")", "\n", "fields", "+=", "[", "(", "'x_emb'", ",", "f'({self.config.emb_d},)f'", ")", "]", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._get_x_from_data": [[138, 140], ["None"], "methods", ["None"], ["", "def", "_get_x_from_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "[", "'x_emb'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo.best_predicted": [[141, 145], ["rembo.Rembo._embbded_solver.minimize", "rembo.Rembo.domain.project", "rembo.Rembo._map_to_dataspace", "rembo.Rembo.model.mean"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.Rembo._map_to_dataspace", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "best_x_emb", ",", "self", ".", "_best_predicted_y", "=", "self", ".", "_embbded_solver", ".", "minimize", "(", "lambda", "X", ":", "-", "self", ".", "model", ".", "mean", "(", "X", ")", ")", "\n", "self", ".", "_best_predicted_x", "=", "self", ".", "domain", ".", "project", "(", "self", ".", "_map_to_dataspace", "(", "best_x_emb", ")", ")", "\n", "return", "self", ".", "_best_predicted_x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.InterleavedRembo.__init__": [[152, 155], ["febo.algorithms.Algorithm.__init__", "rembo.Rembo", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_rembos", "=", "[", "Rembo", "(", "**", "kwargs", ")", "for", "_", "in", "range", "(", "self", ".", "config", ".", "interleaved_runs", ")", "]", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.InterleavedRembo.initialize": [[156, 164], ["super().initialize", "itertools.cycle", "rembo.InterleavedRembo.next"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next"], ["", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "for", "rembo", "in", "self", ".", "_rembos", ":", "\n", "            ", "rembo", ".", "initialize", "(", "**", "kwargs", ")", "\n", "rembo", ".", "_best_predicted_computed", "=", "False", "\n", "\n", "", "self", ".", "_cycle_rembo", "=", "cycle", "(", "self", ".", "_rembos", ")", "\n", "self", ".", "_current_rembo", "=", "next", "(", "self", ".", "_cycle_rembo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.InterleavedRembo.next": [[165, 167], ["rembo.InterleavedRembo._current_rembo.next"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_current_rembo", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.InterleavedRembo.add_data": [[168, 172], ["rembo.InterleavedRembo._current_rembo.add_data", "rembo.InterleavedRembo.next"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next"], ["", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_current_rembo", ".", "add_data", "(", "data", ")", "\n", "self", ".", "_current_rembo", ".", "_best_predicted_computed", "=", "False", "\n", "self", ".", "_current_rembo", "=", "next", "(", "self", ".", "_cycle_rembo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.InterleavedRembo.best_predicted": [[173, 186], ["rembo.best_predicted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.best_predicted"], ["", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "best_x", "=", "None", "\n", "best_y", "=", "-", "10e10", "\n", "for", "rembo", "in", "self", ".", "_rembos", ":", "\n", "            ", "if", "not", "rembo", ".", "_best_predicted_computed", ":", "\n", "                ", "rembo", ".", "best_predicted", "(", ")", "\n", "rembo", ".", "_best_predicted_computed", "=", "True", "\n", "\n", "", "if", "rembo", ".", "_best_predicted_y", ">", "best_y", ":", "\n", "                ", "best_x", "=", "rembo", ".", "_best_predicted_x", "\n", "best_y", "=", "rembo", ".", "_best_predicted_y", "\n", "\n", "", "", "return", "best_x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.rembo.InterleavedRembo._get_dtype_fields": [[187, 189], ["rembo.InterleavedRembo._rembos[]._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_rembos", "[", "0", "]", ".", "_get_dtype_fields", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.neldermead.NelderMead.initialize": [[20, 24], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["    ", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_bext_x_nelder_mead", "=", "None", "\n", "\n", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.neldermead.NelderMead.f": [[26, 29], ["super().f", "neldermead.NelderMead.domain.project", "neldermead.NelderMead.denormalize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.denormalize"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "# provide normalized access", "\n", "        ", "return", "super", "(", ")", ".", "f", "(", "self", ".", "domain", ".", "project", "(", "self", ".", "denormalize", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.neldermead.NelderMead.normalize": [[30, 32], ["None"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "x", "-", "self", ".", "domain", ".", "l", ")", "/", "self", ".", "domain", ".", "range", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.neldermead.NelderMead.denormalize": [[33, 35], ["None"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "domain", ".", "range", "+", "self", ".", "domain", ".", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.neldermead.NelderMead.minimize": [[36, 74], ["numpy.vstack", "numpy.maximum", "scipy.optimize.minimize", "neldermead.NelderMead.domain.project", "logger.info", "max", "logger.info", "numpy.minimum", "neldermead.NelderMead.denormalize", "numpy.random.uniform().reshape", "res[].copy", "neldermead.NelderMead.denormalize", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.denormalize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.denormalize"], ["", "def", "minimize", "(", "self", ")", ":", "\n", "# NelderMead requires an initial point", "\n", "        ", "if", "self", ".", "x0", "is", "None", ":", "\n", "            ", "self", ".", "x0", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "_range", "/", "2", "\n", "\n", "# normalize x0", "\n", "", "self", ".", "_x0", "=", "(", "self", ".", "x0", "-", "self", ".", "domain", ".", "l", ")", "/", "self", ".", "domain", ".", "range", "\n", "self", ".", "_stepsize", "=", "self", ".", "config", ".", "initial_stepsize", "\n", "\n", "# keep restarting Nelder-Mead after convergence", "\n", "while", "True", ":", "\n", "# initial_simplex = self._stepsize *np.eye(self.domain.d) + self._x0", "\n", "\n", "# choose d initial points at random around x0", "\n", "            ", "initial_simplex", "=", "self", ".", "_x0", "+", "self", ".", "_stepsize", "*", "np", ".", "random", ".", "uniform", "(", "size", "=", "self", ".", "domain", ".", "d", "**", "2", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "domain", ".", "d", ")", "\n", "initial_simplex", "=", "np", ".", "vstack", "(", "(", "initial_simplex", ",", "self", ".", "_x0", ")", ")", "\n", "# make sure initial_simplex is in domain", "\n", "initial_simplex", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "initial_simplex", ",", "1", ")", ",", "0", ")", "\n", "\n", "# options:", "\n", "# set fatol to large value,", "\n", "# to ignore it as stopping condition (because of the noise)", "\n", "# x0 is overwritten by 'initial_simplex'", "\n", "xatol", "=", "self", ".", "config", ".", "restart_threshold", "\n", "res", "=", "minimize", "(", "self", ".", "f", ",", "x0", "=", "self", ".", "_x0", ",", "method", "=", "'Nelder-Mead'", ",", "options", "=", "{", "'maxiter'", ":", "10000", ",", "\n", "'maxfev'", ":", "10000", ",", "\n", "'initial_simplex'", ":", "initial_simplex", ",", "\n", "'adaptive'", ":", "self", ".", "config", ".", "adaptive", ",", "\n", "'xatol'", ":", "xatol", ",", "\n", "'fatol'", ":", "10e12", "}", ")", "\n", "\n", "self", ".", "_x0", "=", "res", "[", "'x'", "]", "\n", "self", ".", "_bext_x_nelder_mead", "=", "self", ".", "domain", ".", "project", "(", "self", ".", "denormalize", "(", "res", "[", "'x'", "]", ".", "copy", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "f\"Saved best_x\"", ")", "\n", "\n", "self", ".", "_stepsize", "*=", "self", ".", "config", ".", "contraction_factor", "\n", "self", ".", "_stepsize", "=", "max", "(", "0.1", ",", "self", ".", "_stepsize", ")", "\n", "logger", ".", "info", "(", "f\"Restarting nelder-mead at {self.denormalize(self._x0)}, contraction factor {self.config.contraction_factor}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.neldermead.NelderMead.best_predicted": [[75, 80], ["super().best_predicted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.best_predicted"], ["", "", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_bext_x_nelder_mead", "is", "None", ":", "\n", "            ", "return", "self", ".", "_bext_x_nelder_mead", "\n", "\n", "", "return", "super", "(", ")", ".", "best_predicted", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.greedy.Greedy.initialize": [[11, 13], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Greedy", ",", "self", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.greedy.Greedy.acquisition": [[14, 17], ["X.reshape.reshape.reshape", "greedy.Greedy.model.mean"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["", "def", "acquisition", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "domain", ".", "d", ")", "\n", "return", "-", "(", "self", ".", "model", ".", "mean", "(", "X", ")", "-", "self", ".", "model", ".", "bias", ")", "/", "self", ".", "model", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.ts.ThompsonSampling.acquisition_init": [[10, 12], ["ts.ThompsonSampling.model.sample"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.sample"], ["def", "acquisition_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sample", "=", "self", ".", "model", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.ts.ThompsonSampling.acquisition": [[13, 15], ["ts.ThompsonSampling._sample"], "methods", ["None"], ["", "def", "acquisition", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "_sample", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.ts.ThompsonSampling.acquisition_grad": [[16, 18], ["None"], "methods", ["None"], ["", "def", "acquisition_grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.compass.Compass.initialize": [[16, 19], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["    ", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.compass.Compass.minimize": [[20, 46], ["noisyopt.minimizeCompass", "noisyopt.minimizeCompass"], "methods", ["None"], ["", "def", "minimize", "(", "self", ")", ":", "\n", "# Compass requires an initial point", "\n", "        ", "if", "self", ".", "x0", "is", "None", ":", "\n", "            ", "self", ".", "x0", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "_range", "/", "2", "\n", "\n", "", "res", "=", "minimizeCompass", "(", "self", ".", "f", ",", "bounds", "=", "self", ".", "domain", ".", "bounds", ",", "x0", "=", "self", ".", "x0", ",", "\n", "niter", "=", "self", ".", "config", ".", "niter", ",", "\n", "deltatol", "=", "self", ".", "config", ".", "deltatol", ",", "\n", "deltainit", "=", "self", ".", "config", ".", "deltainit", ",", "\n", "scaling", "=", "self", ".", "domain", ".", "range", ",", "\n", "redfactor", "=", "self", ".", "config", ".", "redfactor", ",", "\n", "errorcontrol", "=", "False", ",", "\n", "funcNinit", "=", "30", ",", "\n", "alpha", "=", "0.05", ",", "\n", "paired", "=", "False", ")", "\n", "x0", "=", "res", "[", "'x'", "]", "\n", "res", "=", "minimizeCompass", "(", "self", ".", "f", ",", "bounds", "=", "self", ".", "domain", ".", "bounds", ",", "x0", "=", "x0", ",", "\n", "niter", "=", "self", ".", "config", ".", "niter", ",", "\n", "deltatol", "=", "self", ".", "config", ".", "deltatol", ",", "\n", "deltainit", "=", "2", "*", "self", ".", "config", ".", "deltatol", ",", "\n", "scaling", "=", "self", ".", "domain", ".", "range", ",", "\n", "redfactor", "=", "self", ".", "config", ".", "redfactor", ",", "\n", "errorcontrol", "=", "True", ",", "\n", "funcNinit", "=", "30", ",", "\n", "alpha", "=", "0.05", ",", "\n", "paired", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.compass.Compass.best_predicted": [[47, 49], ["None"], "methods", ["None"], ["", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_x", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.candidate.CandidateAlgorithm.initialize": [[22, 28], ["super().initialize", "candidate.CandidateAlgorithm._get_candidates", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.candidate.GridSearch._get_candidates"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "self", ".", "_candidates", "=", "self", ".", "_get_candidates", "(", ")", "\n", "self", ".", "_num_candidates", "=", "len", "(", "self", ".", "_candidates", ")", "\n", "self", ".", "_i", "=", "0", "\n", "self", ".", "_exit", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.candidate.CandidateAlgorithm._get_candidates": [[29, 31], ["candidate.CandidateAlgorithm.config.candidates"], "methods", ["None"], ["", "def", "_get_candidates", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "candidates", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.candidate.CandidateAlgorithm._next": [[32, 38], ["None"], "methods", ["None"], ["", "def", "_next", "(", "self", ")", ":", "\n", "        ", "next", "=", "self", ".", "_candidates", "[", "self", ".", "_i", "]", "\n", "self", ".", "_i", "+=", "1", "\n", "if", "self", ".", "_i", "==", "self", ".", "_num_candidates", ":", "\n", "            ", "self", ".", "_exit", "=", "True", "\n", "", "return", "next", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.candidate.CandidateAlgorithm.exit": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "exit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_exit", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.candidate.GridSearch._get_candidates": [[50, 52], ["febo.utils.cartesian", "numpy.linspace", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.cartesian", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["    ", "def", "_get_candidates", "(", "self", ")", ":", "\n", "        ", "return", "cartesian", "(", "[", "np", ".", "linspace", "(", "self", ".", "domain", ".", "l", "[", "i", "]", ",", "self", ".", "domain", ".", "u", "[", "i", "]", ",", "self", ".", "config", ".", "points_per_dim", ")", "for", "i", "in", "range", "(", "self", ".", "domain", ".", "d", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.initialize": [[9, 25], ["super().initialize", "safety.SafetyMixin._get_solver"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm._get_solver"], ["    ", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SafetyMixin", ",", "self", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "expander_solver", "=", "self", ".", "_get_solver", "(", "self", ".", "domain", ")", "\n", "\n", "\n", "# set safe_mode on optimizer", "\n", "self", ".", "expander_solver", ".", "safe_mode", "=", "True", "\n", "self", ".", "solver", ".", "safe_mode", "=", "True", "\n", "\n", "self", ".", "expander_solver", ".", "safety_wrapper", "=", "self", ".", "safety_wrapper", "\n", "self", ".", "solver", ".", "safety_wrapper", "=", "self", ".", "safety_wrapper", "\n", "\n", "# disable exception when no feasible point was found", "\n", "self", ".", "expander_solver", ".", "infeasible_exception", "=", "False", "\n", "self", ".", "solver", ".", "infeasible_exception", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.safety_wrapper": [[27, 45], ["len", "s.mean_var", "numpy.sqrt", "enumerate", "safety.SafetyMixin.bump"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.bump"], ["", "def", "safety_wrapper", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "safe", "=", "[", "True", "]", "*", "len", "(", "x", ")", "\n", "# add gradients of all safety gps which violate the safety constraint", "\n", "for", "s", "in", "self", ".", "s", ":", "\n", "            ", "s_mean", ",", "s_var", "=", "s", ".", "mean_var", "(", "x", ")", "\n", "s_std", "=", "np", ".", "sqrt", "(", "s_var", ")", "\n", "s_ucb", "=", "s_mean", "+", "s_std", "\n", "\n", "# add ucb of any violated safety constraint", "\n", "for", "i", ",", "ucb_i", "in", "enumerate", "(", "s_ucb", ")", ":", "\n", "                ", "if", "ucb_i", ">", "0", ":", "\n", "                    ", "safe", "[", "i", "]", "=", "False", "\n", "y", "[", "i", "]", "+=", "ucb_i", "\n", "\n", "", "", "bump_y", "=", "self", ".", "bump", "(", "s_ucb", ")", "\n", "y", "+=", "-", "(", "s_std", "/", "s", ".", "scale", "*", "bump_y", ")", "\n", "\n", "", "return", "y", ",", "safe", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.next": [[47, 51], ["super().next"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "x", ",", "info", "=", "super", "(", "SafetyMixin", ",", "self", ")", ".", "next", "(", ")", "\n", "info", "[", "'point_type'", "]", "=", "self", ".", "_point_type", "\n", "return", "x", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin._next": [[52, 86], ["safety.SafetyMixin.acquisition_init", "safety.SafetyMixin.solver.minimize", "safety.SafetyMixin.expander_solver.minimize", "safety.SafetyMixin._get_uncertainty", "safety.SafetyMixin._get_uncertainty", "logger.warning", "logger.warning", "logger.warning", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm.acquisition_init", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin._get_uncertainty", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin._get_uncertainty", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "_next", "(", "self", ")", ":", "\n", "        ", "self", ".", "_point_type", "=", "'initial'", "\n", "if", "self", ".", "t", "==", "0", ":", "\n", "            ", "return", "self", ".", "x0", "\n", "\n", "", "self", ".", "acquisition_init", "(", ")", "\n", "x_acq", ",", "_", "=", "self", ".", "solver", ".", "minimize", "(", "self", ".", "acquisition", ")", "\n", "x_exp", ",", "_", "=", "self", ".", "expander_solver", ".", "minimize", "(", "self", ".", "expander_acquisiton", ")", "\n", "\n", "if", "x_acq", "is", "None", "and", "x_exp", "is", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "'Failed to find feasible point. Choosing initial parameter.'", ")", "\n", "return", "self", ".", "x0", "\n", "\n", "\n", "", "if", "x_acq", "is", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "'Failed to find feasible acquisition point. Choosing expander'", ")", "\n", "return", "x_exp", "\n", "\n", "", "if", "x_exp", "is", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "'Failed to find feasible expander. Choosing acquisition point.'", ")", "\n", "return", "x_acq", "\n", "\n", "", "var_x_acq", "=", "self", ".", "_get_uncertainty", "(", "x_acq", ")", "\n", "var_x_exp", "=", "self", ".", "_get_uncertainty", "(", "x_exp", ")", "\n", "\n", "if", "var_x_acq", ">=", "var_x_exp", ":", "\n", "            ", "logger", ".", "info", "(", "'Choosing acquisition point'", ")", "\n", "self", ".", "_point_type", "=", "'acquisition'", "\n", "return", "x_acq", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Choosing expander'", ")", "\n", "self", ".", "_is_expander", "=", "True", "\n", "self", ".", "_point_type", "=", "'expander'", "\n", "return", "x_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin._get_uncertainty": [[88, 94], ["safety.SafetyMixin.model.var", "max", "m.var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["", "", "def", "_get_uncertainty", "(", "self", ",", "x", ")", ":", "\n", "        ", "var", "=", "self", ".", "model", ".", "var", "(", "x", ")", "/", "self", ".", "model", ".", "gp", ".", "kern", ".", "variance", "\n", "\n", "for", "m", "in", "self", ".", "s", ":", "\n", "            ", "var", "=", "max", "(", "m", ".", "var", "(", "x", ")", "/", "m", ".", "gp", ".", "kern", ".", "variance", ",", "var", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.expander_acquisiton": [[95, 109], ["numpy.atleast_2d", "numpy.zeros", "s.mean_var", "numpy.sqrt", "safety.SafetyMixin.bump"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.bump"], ["", "def", "expander_acquisiton", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "np", ".", "zeros", "(", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "\n", "for", "s", "in", "self", ".", "s", ":", "\n", "            ", "s_mean", ",", "s_var", "=", "s", ".", "mean_var", "(", "x", ")", "\n", "s_std", "=", "np", ".", "sqrt", "(", "s_var", ")", "\n", "s_ucb", "=", "s_mean", "+", "s_std", "\n", "\n", "bump_y", "=", "self", ".", "bump", "(", "s_ucb", ")", "\n", "y", "+=", "-", "(", "s_var", "/", "s", ".", "scale", "*", "bump_y", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.bump": [[110, 113], ["numpy.exp", "numpy.square"], "methods", ["None"], ["", "def", "bump", "(", "self", ",", "y", ")", ":", "\n", "        ", "A", "=", "5", "\n", "return", "A", "*", "np", ".", "exp", "(", "-", "np", ".", "square", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin._is_safe": [[114, 130], ["numpy.array", "len", "s.mean_var", "numpy.sqrt", "enumerate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "_is_safe", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        helper function for plotting\n        \"\"\"", "\n", "safe", "=", "[", "True", "]", "*", "len", "(", "x", ")", "\n", "for", "s", "in", "self", ".", "s", ":", "\n", "            ", "s_mean", ",", "s_var", "=", "s", ".", "mean_var", "(", "x", ")", "\n", "s_std", "=", "np", ".", "sqrt", "(", "s_var", ")", "\n", "s_ucb", "=", "s_mean", "+", "s_std", "\n", "\n", "# add ucb of any violated safety constraint", "\n", "for", "i", ",", "ucb_i", "in", "enumerate", "(", "s_ucb", ")", ":", "\n", "                ", "if", "ucb_i", ">", "0", ":", "\n", "                    ", "safe", "[", "i", "]", "=", "False", "\n", "\n", "", "", "", "return", "np", ".", "array", "(", "safe", ",", "dtype", "=", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin.requires_x0": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_x0", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safety.SafetyMixin._get_dtype_fields": [[136, 145], ["super()._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Fields used to define ``self.dtype``.\n\n        Returns:\n\n        \"\"\"", "\n", "fields", "=", "super", "(", "SafetyMixin", ",", "self", ")", ".", "_get_dtype_fields", "(", ")", "\n", "return", "fields", "+", "[", "(", "'point_type'", ",", "'S25'", ")", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOptSwarmMod.__init__": [[16, 19], ["kwargs.pop", "safeopt.SafeOptSwarm.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.pop", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "x0", "=", "kwargs", ".", "pop", "(", "'x0'", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOptSwarmMod.optimize": [[20, 29], ["super().optimize", "super().optimize", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize"], ["", "def", "optimize", "(", "self", ",", "ucb", "=", "False", ")", ":", "\n", "# Make sure the safe set is still safe", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", ")", ".", "optimize", "(", "ucb", "=", "ucb", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Empty safeset, choosing initial point\"", ")", "\n", "return", "self", ".", "x0", "\n", "\n", "", "return", "super", "(", ")", ".", "optimize", "(", "ucb", "=", "ucb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOptStub.__init__": [[32, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x0", ")", ":", "\n", "        ", "self", ".", "x0", "=", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOptStub.optimize": [[35, 37], ["None"], "methods", ["None"], ["", "def", "optimize", "(", "self", ",", "ucb", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOptStub.get_maximum": [[38, 40], ["None"], "methods", ["None"], ["", "def", "get_maximum", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOpt.initialize": [[45, 49], ["super().initialize", "safeopt.SafeOptStub"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["    ", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "self", ".", "_lower_bound_objective", "=", "kwargs", "[", "'lower_bound_objective'", "]", "\n", "self", ".", "safeopt", "=", "SafeOptStub", "(", "self", ".", "x0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOpt._next": [[50, 56], ["safeopt.SafeOpt.safeopt.optimize", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize"], ["", "def", "_next", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "safeopt", ".", "optimize", "(", "ucb", "=", "self", ".", "config", ".", "ucb", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Empty safeset, choosing initial point\"", ")", "\n", "return", "self", ".", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOpt.add_data": [[57, 63], ["super().add_data", "isinstance", "safeopt.SafeOpt._initialize_safeopt", "safeopt.SafeOpt.safeopt.add_new_data_point"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SwarmSafeOpt._initialize_safeopt"], ["", "", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_data", "(", "data", ")", "\n", "if", "isinstance", "(", "self", ".", "safeopt", ",", "SafeOptStub", ")", ":", "\n", "            ", "self", ".", "_initialize_safeopt", "(", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "safeopt", ".", "add_new_data_point", "(", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOpt.best_predicted": [[64, 70], ["safeopt.SafeOpt.safeopt.get_maximum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOptStub.get_maximum"], ["", "", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "res", "=", "self", ".", "safeopt", ".", "get_maximum", "(", ")", "\n", "if", "res", "is", "None", ":", "\n", "            ", "return", "self", ".", "x0", "\n", "", "else", ":", "\n", "            ", "return", "res", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SafeOpt._initialize_safeopt": [[71, 77], ["safeopt.SafeOpt.model._get_kernel", "GPy.models.GPRegression", "safeopt.linearly_spaced_combinations", "safeopt.SafeOpt", "x0.reshape", "y0.reshape", "zip"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_kernel", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.utilities.linearly_spaced_combinations"], ["", "", "def", "_initialize_safeopt", "(", "self", ",", "x0", ",", "y0", ")", ":", "\n", "        ", "kernel", "=", "self", ".", "model", ".", "_get_kernel", "(", ")", "\n", "gp", "=", "GPy", ".", "models", ".", "GPRegression", "(", "x0", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "y0", ".", "reshape", "(", "1", ",", "1", ")", ",", "kernel", ",", "noise_var", "=", "self", ".", "model", ".", "config", ".", "noise_var", ")", "\n", "bounds", "=", "[", "(", "l", ",", "u", ")", "for", "l", ",", "u", "in", "zip", "(", "self", ".", "domain", ".", "l", ",", "self", ".", "domain", ".", "u", ")", "]", "\n", "parameter_set", "=", "safeopt", ".", "linearly_spaced_combinations", "(", "bounds", ",", "self", ".", "config", ".", "points_per_dimension", ")", "\n", "self", ".", "safeopt", "=", "safeopt", ".", "SafeOpt", "(", "gp", ",", "parameter_set", ",", "self", ".", "_lower_bound_objective", ",", "threshold", "=", "self", ".", "_lower_bound_objective", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.safeopt.SwarmSafeOpt._initialize_safeopt": [[82, 88], ["safeopt.SwarmSafeOpt.model._get_kernel", "GPy.models.GPRegression", "safeopt.SafeOptSwarmMod", "x0.reshape", "y0.reshape", "zip"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_kernel"], ["    ", "def", "_initialize_safeopt", "(", "self", ",", "x0", ",", "y0", ")", ":", "\n", "        ", "kernel", "=", "self", ".", "model", ".", "_get_kernel", "(", ")", "\n", "gp", "=", "GPy", ".", "models", ".", "GPRegression", "(", "x0", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "y0", ".", "reshape", "(", "1", ",", "1", ")", ",", "kernel", ",", "noise_var", "=", "self", ".", "model", ".", "config", ".", "noise_var", ")", "\n", "bounds", "=", "[", "(", "l", ",", "u", ")", "for", "l", ",", "u", "in", "zip", "(", "self", ".", "domain", ".", "l", ",", "self", ".", "domain", ".", "u", ")", "]", "\n", "self", ".", "safeopt", "=", "SafeOptSwarmMod", "(", "gp", ",", "self", ".", "_lower_bound_objective", ",", "bounds", "=", "bounds", ",", "\n", "threshold", "=", "self", ".", "_lower_bound_objective", ",", "x0", "=", "x0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm.initialize": [[21, 26], ["super().initialize", "acquisition.AcquisitionAlgorithm._get_solver"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm._get_solver"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AcquisitionAlgorithm", ",", "self", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "self", ".", "_evaluate_x0", "=", "self", ".", "config", ".", "evaluate_x0", "\n", "\n", "self", ".", "solver", "=", "self", ".", "_get_solver", "(", "domain", "=", "self", ".", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm.__getstate__": [[27, 31], ["acquisition.AcquisitionAlgorithm.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "self_dict", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "del", "self_dict", "[", "'solver'", "]", "\n", "return", "self_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm.acquisition": [[32, 34], ["None"], "methods", ["None"], ["", "def", "acquisition", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm.acquisition_init": [[35, 37], ["None"], "methods", ["None"], ["", "def", "acquisition_init", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm.acquisition_grad": [[38, 40], ["None"], "methods", ["None"], ["", "def", "acquisition_grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm._next": [[41, 62], ["acquisition.AcquisitionAlgorithm.acquisition_init", "acquisition.AcquisitionAlgorithm.solver.minimize", "acquisition.AcquisitionAlgorithm._get_solver", "logger.error", "logger.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm.acquisition_init", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm._get_solver", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "_next", "(", "self", ",", "context", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "_evaluate_x0", ":", "\n", "            ", "self", ".", "_evaluate_x0", "=", "False", "\n", "if", "self", ".", "x0", "is", "None", ":", "\n", "                ", "logger", ".", "error", "(", "\"Cannot evaluate x0, no initial point given\"", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "f\"{self.name}: Choosing initial point.\"", ")", "\n", "return", "self", ".", "x0", "\n", "\n", "# for contextual bandits, if domain changes, adjust solver (for now, just a new instance)", "\n", "", "", "if", "not", "context", "is", "None", "and", "'domain'", "in", "context", ":", "\n", "            ", "self", ".", "solver", "=", "self", ".", "_get_solver", "(", "context", "[", "'domain'", "]", ")", "\n", "\n", "", "self", ".", "acquisition_init", "(", ")", "\n", "\n", "if", "self", ".", "solver", ".", "requires_gradients", ":", "\n", "            ", "acq", "=", "self", ".", "acquisition_grad", "\n", "", "else", ":", "\n", "            ", "acq", "=", "self", ".", "acquisition", "\n", "", "x", ",", "_", "=", "self", ".", "solver", ".", "minimize", "(", "acq", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.acquisition.AcquisitionAlgorithm._get_solver": [[63, 73], ["acquisition.AcquisitionAlgorithm.config.solver", "isinstance", "febo.solvers.FiniteDomainSolver", "febo.solvers.ScipySolver"], "methods", ["None"], ["", "def", "_get_solver", "(", "self", ",", "domain", ")", ":", "\n", "        ", "if", "not", "self", ".", "config", ".", "solver", "is", "None", ":", "\n", "            ", "solver", "=", "self", ".", "config", ".", "solver", "(", "domain", "=", "domain", ",", "initial_x", "=", "self", ".", "x0", ")", "\n", "", "else", ":", "\n", "# if solver is not provided, use default choices", "\n", "            ", "if", "isinstance", "(", "domain", ",", "DiscreteDomain", ")", ":", "\n", "                ", "solver", "=", "solvers", ".", "FiniteDomainSolver", "(", "domain", "=", "domain", ")", "\n", "", "else", ":", "\n", "                ", "solver", "=", "solvers", ".", "ScipySolver", "(", "domain", "=", "domain", ",", "initial_x", "=", "self", ".", "x0", ")", "\n", "", "", "return", "solver", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.random.Random._next": [[11, 17], ["numpy.random.uniform", "numpy.random.choice"], "methods", ["None"], ["def", "_next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "domain", ".", "is_continuous", ":", "\n", "            ", "next", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "self", ".", "domain", ".", "d", ")", "*", "self", ".", "domain", ".", "range", "+", "self", ".", "domain", ".", "l", "\n", "", "else", ":", "\n", "            ", "next", "=", "self", ".", "domain", ".", "points", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "domain", ".", "num_points", ")", "]", "\n", "", "return", "next", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.initialize": [[22, 55], ["super().initialize", "kwargs.get", "febo.utils.config.config_manager.load_data", "kwargs.get", "model.ModelMixin._initialize_best_prediction_algorithm", "model.ModelMixin.config.model", "febo.utils.config.config_manager.load_data", "kwargs.get", "febo.utils.config.config_manager.load_data", "kwargs.get", "kwargs.copy", "model.ModelMixin.config.noise_model", "model.ModelMixin._add_data_to_models", "model.ModelMixin.config.constraints_model", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._initialize_best_prediction_algorithm", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._add_data_to_models", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            model: optional. If a model is passed, this is used instead of the model according to the config\n\n        Returns:\n\n        \"\"\"", "\n", "super", "(", "ModelMixin", ",", "self", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "self", ".", "_model_domain", "=", "kwargs", ".", "get", "(", "'model_domain'", ",", "self", ".", "domain", ")", "\n", "\n", "config_manager", ".", "load_data", "(", "self", ".", "config", ".", "model_config", ")", "\n", "\n", "# if model was passed as kwarg, use it, else create a new model from config", "\n", "self", ".", "model", "=", "kwargs", ".", "get", "(", "'model'", ",", "self", ".", "config", ".", "model", "(", "domain", "=", "self", ".", "_model_domain", ")", ")", "\n", "\n", "self", ".", "_has_constraints_model", "=", "self", ".", "config", ".", "constraints_model", "is", "not", "None", "\n", "if", "self", ".", "_has_constraints_model", ":", "\n", "            ", "config_manager", ".", "load_data", "(", "self", ".", "config", ".", "constraints_model_config", ")", "\n", "self", ".", "s", "=", "kwargs", ".", "get", "(", "'constraint_model'", ",", "[", "self", ".", "config", ".", "constraints_model", "(", "domain", "=", "self", ".", "_model_domain", ")", "for", "_", "in", "range", "(", "self", ".", "num_constraints", ")", "]", ")", "\n", "\n", "", "self", ".", "_has_noise_model", "=", "self", ".", "config", ".", "noise_model", "is", "not", "None", "\n", "if", "self", ".", "_has_noise_model", ":", "\n", "            ", "config_manager", ".", "load_data", "(", "self", ".", "config", ".", "noise_model_config", ")", "\n", "self", ".", "noise", "=", "kwargs", ".", "get", "(", "'noise_model'", ",", "self", ".", "config", ".", "noise_model", "(", "domain", "=", "self", ".", "_model_domain", ")", ")", "\n", "\n", "# add initial data", "\n", "", "if", "not", "self", ".", "initial_data", "is", "None", ":", "\n", "            ", "for", "evaluation", "in", "self", ".", "initial_data", ":", "\n", "                ", "self", ".", "_add_data_to_models", "(", "evaluation", ")", "\n", "\n", "", "", "self", ".", "_initialize_best_prediction_algorithm", "(", "kwargs", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._initialize_best_prediction_algorithm": [[56, 77], ["isinstance", "isinstance", "model.ModelMixin._best_prediction_algorithm.initialize", "SafeGreedy", "Greedy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["", "def", "_initialize_best_prediction_algorithm", "(", "self", ",", "greedy_initialize_kwargs", ")", ":", "\n", "# avoid mutual imports since Greedy itself uses a ModelMixin", "\n", "        ", "from", "febo", ".", "algorithms", ".", "greedy", "import", "SafeGreedy", ",", "Greedy", "\n", "# initialize an algorithm to calculate best predicted point", "\n", "self", ".", "_best_prediction_algorithm", "=", "None", "\n", "if", "not", "isinstance", "(", "self", ",", "(", "SafeGreedy", ",", "Greedy", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ",", "SafetyMixin", ")", ":", "\n", "                ", "self", ".", "_best_prediction_algorithm", "=", "SafeGreedy", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_best_prediction_algorithm", "=", "Greedy", "(", ")", "\n", "\n", "# do not pass any initial data to greedy algorithm, as we are using the current model", "\n", "", "if", "'initial_data'", "in", "greedy_initialize_kwargs", ":", "\n", "                ", "del", "greedy_initialize_kwargs", "[", "'initial_data'", "]", "\n", "", "greedy_initialize_kwargs", "[", "'model'", "]", "=", "self", ".", "model", "\n", "if", "self", ".", "_has_noise_model", ":", "\n", "                ", "greedy_initialize_kwargs", "[", "'noise_model'", "]", "=", "self", ".", "noise", "\n", "", "if", "self", ".", "_has_constraints_model", ":", "\n", "                ", "greedy_initialize_kwargs", "[", "'constraint_model'", "]", "=", "self", ".", "s", "\n", "\n", "", "self", ".", "_best_prediction_algorithm", ".", "initialize", "(", "**", "greedy_initialize_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.add_data": [[79, 83], ["super().add_data", "model.ModelMixin._add_data_to_models"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._add_data_to_models"], ["", "", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\" by default just passes the observed data to the model \"\"\"", "\n", "super", "(", "ModelMixin", ",", "self", ")", ".", "add_data", "(", "data", ")", "\n", "self", ".", "_add_data_to_models", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._add_data_to_models": [[84, 104], ["model.ModelMixin._get_x_from_data", "model.ModelMixin.model.add_data", "model.ModelMixin.model.add_data", "model.ModelMixin._get_std", "zip", "zip", "model.ModelMixin.noise.add_data", "model.ModelMixin.noise.add_data", "m.add_data", "m.add_data"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._get_x_from_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._get_std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data"], ["", "def", "_add_data_to_models", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", "=", "self", ".", "_get_x_from_data", "(", "data", ")", "\n", "if", "self", ".", "model", ".", "requires_std", ":", "\n", "            ", "self", ".", "model", ".", "add_data", "(", "x", ",", "data", "[", "\"y\"", "]", ",", "self", ".", "_get_std", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "add_data", "(", "x", ",", "data", "[", "\"y\"", "]", ")", "\n", "\n", "", "if", "self", ".", "_has_constraints_model", "and", "self", ".", "num_constraints", ":", "\n", "            ", "if", "self", ".", "s", "[", "0", "]", ".", "requires_std", ":", "\n", "                ", "for", "m", ",", "s", ",", "s_std", "in", "zip", "(", "self", ".", "s", ",", "data", "[", "'s'", "]", ",", "data", "[", "'s_std'", "]", ")", ":", "\n", "                    ", "m", ".", "add_data", "(", "x", ",", "s", ",", "s_std", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "m", ",", "s", "in", "zip", "(", "self", ".", "s", ",", "data", "[", "'s'", "]", ")", ":", "\n", "                    ", "m", ".", "add_data", "(", "x", ",", "s", ")", "\n", "\n", "", "", "", "if", "self", ".", "_has_noise_model", ":", "\n", "            ", "if", "self", ".", "noise", ".", "requires_std", ":", "\n", "                ", "self", ".", "noise", ".", "add_data", "(", "x", ",", "data", "[", "'y_std'", "]", ",", "data", "[", "'y_std_std'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "noise", ".", "add_data", "(", "x", ",", "data", "[", "'y_std'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._get_x_from_data": [[105, 107], ["None"], "methods", ["None"], ["", "", "", "def", "_get_x_from_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "[", "'x'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._get_std": [[108, 118], ["None"], "methods", ["None"], ["", "def", "_get_std", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        get std of observations from data, potentially computed from some other model\n        Args:\n            data:\n\n        Returns:\n\n        \"\"\"", "\n", "return", "data", "[", "\"y_std\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.next": [[119, 125], ["super().next"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next"], ["", "def", "next", "(", "self", ",", "context", "=", "None", ")", ":", "\n", "        ", "x", ",", "additional_data", "=", "super", "(", ")", ".", "next", "(", "context", "=", "context", ")", "\n", "# m,v = self.model.mean_var(x)", "\n", "# additional_data['y_model'] = m", "\n", "# additional_data['y_std_model'] = np.sqrt(v)", "\n", "return", "x", ",", "additional_data", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.optimize_model": [[126, 135], ["model.ModelMixin.model.minimize", "model.ModelMixin.noise.minimize", "s.minimize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize"], ["", "def", "optimize_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "minimize", "(", ")", "\n", "\n", "if", "self", ".", "_has_constraints_model", ":", "\n", "            ", "for", "s", "in", "self", ".", "s", ":", "\n", "                ", "s", ".", "minimize", "(", ")", "\n", "\n", "", "", "if", "self", ".", "_has_noise_model", ":", "\n", "            ", "self", ".", "noise", ".", "minimize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.best_predicted": [[136, 141], ["model.ModelMixin._best_prediction_algorithm.next"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next"], ["", "", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_best_prediction_algorithm", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "self", ".", "_best_prediction_algorithm", ".", "next", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin._get_dtype_fields": [[142, 147], ["super()._get_dtype_fields", "super()._get_dtype_fields.append", "super()._get_dtype_fields.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "fields", "=", "super", "(", ")", ".", "_get_dtype_fields", "(", ")", "\n", "fields", ".", "append", "(", "(", "'y_model'", ",", "'f8'", ")", ")", "\n", "fields", ".", "append", "(", "(", "'y_std_model'", ",", "'f8'", ")", ")", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.get_joined_constrained_cb": [[148, 160], ["numpy.empty", "numpy.empty", "enumerate", "s.mean_var", "mean.flatten.flatten.flatten", "numpy.sqrt", "numpy.max().reshape", "numpy.max().reshape", "var.flatten", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "get_joined_constrained_cb", "(", "self", ",", "X", ")", ":", "\n", "        ", "joined_ucb", "=", "np", ".", "empty", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "num_constraints", ")", ")", "\n", "joined_lcb", "=", "np", ".", "empty", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "num_constraints", ")", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "s", ")", ":", "\n", "            ", "mean", ",", "var", "=", "s", ".", "mean_var", "(", "X", ")", "\n", "mean", "=", "mean", ".", "flatten", "(", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "var", ".", "flatten", "(", ")", ")", "\n", "joined_lcb", "[", ":", ",", "i", "]", ",", "joined_ucb", "[", ":", ",", "i", "]", "=", "mean", "-", "s", ".", "beta", "*", "std", ",", "mean", "+", "s", ".", "beta", "*", "std", "\n", "\n", "\n", "# Safe is <=0", "\n", "", "return", "np", ".", "max", "(", "joined_lcb", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "np", ".", "max", "(", "joined_ucb", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.cmaes.CMAES.initialize": [[15, 26], ["super().initialize", "cmaes.CMAES.domain.normalize", "cma.CMAEvolutionStrategy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.normalize"], ["    ", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "x0", "is", "None", ":", "\n", "            ", "self", ".", "x0", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "range", "/", "2", "\n", "\n", "# cma operates on normalized scale", "\n", "", "x0", "=", "self", ".", "domain", ".", "normalize", "(", "self", ".", "x0", ")", "\n", "self", ".", "cma", "=", "CMAEvolutionStrategy", "(", "x0", "=", "x0", ",", "sigma0", "=", "self", ".", "config", ".", "sigma0", ",", "inopts", "=", "{", "'bounds'", ":", "[", "0", ",", "1", "]", "}", ")", "\n", "self", ".", "_X", "=", "None", "\n", "self", ".", "_X_i", "=", "0", "\n", "self", ".", "_Y", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.cmaes.CMAES._next": [[27, 35], ["cmaes.CMAES.domain.denormalize", "cmaes.CMAES.cma.ask", "numpy.empty", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.denormalize"], ["", "def", "_next", "(", "self", ",", "context", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "_X", "is", "None", ":", "\n", "# get new population", "\n", "            ", "self", ".", "_X", "=", "self", ".", "cma", ".", "ask", "(", ")", "\n", "self", ".", "_Y", "=", "np", ".", "empty", "(", "len", "(", "self", ".", "_X", ")", ")", "\n", "self", ".", "_X_i", "=", "0", "\n", "\n", "", "return", "self", ".", "domain", ".", "denormalize", "(", "self", ".", "_X", "[", "self", ".", "_X_i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.cmaes.CMAES.finalize": [[36, 38], ["cmaes.CMAES.cma.result_pretty"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "self", ".", "cma", ".", "result_pretty", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.cmaes.CMAES.best_predicted": [[40, 46], ["cmaes.CMAES.domain.denormalize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.denormalize"], ["", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "xbest", "=", "None", "\n", "if", "self", ".", "cma", ".", "result", ".", "xbest", "is", "not", "None", ":", "\n", "            ", "xbest", "=", "self", ".", "domain", ".", "denormalize", "(", "self", ".", "cma", ".", "result", ".", "xbest", ")", "\n", "\n", "", "return", "xbest", "if", "not", "xbest", "is", "None", "else", "self", ".", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.cmaes.CMAES.add_data": [[48, 58], ["super().add_data", "len", "cmaes.CMAES.cma.tell"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data"], ["", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_Y", "[", "self", ".", "_X_i", "]", "=", "data", "[", "'y'", "]", "\n", "self", ".", "_X_i", "+=", "1", "\n", "\n", "# population complete", "\n", "if", "self", ".", "_X_i", "==", "len", "(", "self", ".", "_X", ")", ":", "\n", "            ", "self", ".", "cma", ".", "tell", "(", "self", ".", "_X", ",", "-", "self", ".", "_Y", ")", "\n", "self", ".", "_X", "=", "None", "\n", "\n", "", "super", "(", ")", ".", "add_data", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.__init__": [[28, 32], ["type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "experiment_info", ")", ":", "\n", "        ", "self", ".", "experiment_info", "=", "experiment_info", "\n", "self", ".", "_dtype_fields", "=", "[", "]", "\n", "self", ".", "name", "=", "type", "(", "self", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.initialize": [[33, 60], ["kwargs.get", "kwargs.get", "kwargs.get", "logger.info", "kwargs.get", "kwargs.get", "kwargs.get", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Called to initialize the algorithm. Resets the algorithm, discards previous data.\n\n        Args:\n            **kwargs: Arbitrary keyword arguments, recieved from environment.initialize().\n            domain (DiscreteDomain, ContinousDomain): Mandatory argument. Domain of the environment\n            initial_evaluation: (Optional) Initial evaluation taken from the environment\n\n\n        Returns:\n\n        \"\"\"", "\n", "self", ".", "domain", "=", "kwargs", ".", "get", "(", "\"domain\"", ")", "\n", "self", ".", "x0", "=", "kwargs", ".", "get", "(", "\"x0\"", ",", "None", ")", "\n", "self", ".", "initial_data", "=", "kwargs", ".", "get", "(", "\"initial_data\"", ",", "[", "]", ")", "\n", "logger", ".", "info", "(", "f\"Got {len(self.initial_data)} initial data points.\"", ")", "\n", "self", ".", "_exit", "=", "False", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# TODO Move the next two arguments into a separate class?", "\n", "self", ".", "lower_bound_objective_value", "=", "kwargs", ".", "get", "(", "\"lower_bound_objective_value\"", ",", "None", ")", "\n", "self", ".", "num_constraints", "=", "kwargs", ".", "get", "(", "\"num_constraints\"", ",", "None", ")", "\n", "self", ".", "noise_obs_mode", "=", "kwargs", ".", "get", "(", "\"noise_obs_mode\"", ",", "None", ")", "\n", "\n", "self", ".", "__best_x", "=", "None", "\n", "self", ".", "__best_y", "=", "-", "10e10", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm._next": [[61, 69], ["None"], "methods", ["None"], ["", "def", "_next", "(", "self", ",", "context", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Called by next(), used to get proposed parameter.\n        Opposed to ``next()``, does return only x, not a tuple.\n        Returns: parameter x\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.next": [[70, 101], ["isinstance", "isinstance", "algorithm.Algorithm._next", "algorithm.Algorithm._next", "numpy.maximum", "numpy.minimum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._next", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._next"], ["", "def", "next", "(", "self", ",", "context", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Called to get next evaluation point from the algorithm.\n        By default uses  self._next() to get a proposed parameter, and creates additional_data\n\n        Returns: Tuple (x, additional_data), where x is the proposed parameter, and additional_data is np 1-dim array of dtype self.dtype\n\n        \"\"\"", "\n", "if", "context", "is", "None", ":", "\n", "# call without context (algorithm might not allow context argument)", "\n", "            ", "next_x", "=", "self", ".", "_next", "(", ")", "\n", "", "else", ":", "\n", "# call with context", "\n", "            ", "next_x", "=", "self", ".", "_next", "(", "context", ")", "\n", "\n", "", "if", "isinstance", "(", "next_x", ",", "tuple", ")", ":", "\n", "            ", "x", "=", "next_x", "[", "0", "]", "\n", "additional_data", "=", "next_x", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "next_x", "\n", "additional_data", "=", "{", "}", "\n", "", "additional_data", "[", "'t'", "]", "=", "self", ".", "t", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "# for continous domains, check if x is inside box", "\n", "if", "isinstance", "(", "self", ".", "domain", ",", "ContinuousDomain", ")", ":", "\n", "            ", "if", "(", "x", ">", "self", ".", "domain", ".", "u", ")", ".", "any", "(", ")", "or", "(", "x", "<", "self", ".", "domain", ".", "l", ")", ".", "any", "(", ")", ":", "\n", "# logger.warning(f'Point outside domain. Projecting back into box.\\nx is {x}, with limits {self.domain.l}, {self.domain.u}')", "\n", "                ", "x", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "x", ",", "self", ".", "domain", ".", "u", ")", ",", "self", ".", "domain", ".", "l", ")", "\n", "\n", "", "", "return", "x", ",", "additional_data", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.add_data": [[102, 115], ["algorithm.Algorithm.initial_data.append"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Add observation data to the algorithm.\n\n        Args:\n            data: TBD\n\n        \"\"\"", "\n", "if", "data", "[", "'y'", "]", ">", "self", ".", "__best_y", ":", "\n", "            ", "self", ".", "__best_y", "=", "data", "[", "'y'", "]", "\n", "self", ".", "__best_x", "=", "data", "[", "'x'", "]", "\n", "\n", "", "self", ".", "initial_data", ".", "append", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.dtype": [[116, 124], ["numpy.dtype", "algorithm.Algorithm._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.dtype", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Numpy dtype of additional data return with next().\n\n        \"\"\"", "\n", "return", "np", ".", "dtype", "(", "self", ".", "_get_dtype_fields", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm._get_dtype_fields": [[125, 134], ["None"], "methods", ["None"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Fields used to define ``self.dtype``.\n\n        Returns:\n\n        \"\"\"", "\n", "fields", "=", "[", "(", "\"t\"", ",", "\"i\"", ")", "]", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.finalize": [[135, 138], ["algorithm.Algorithm.best_predicted"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.best_predicted"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "return", "{", "'initial_data'", ":", "self", ".", "initial_data", ",", "\n", "'best_x'", ":", "self", ".", "best_predicted", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.requires_x0": [[139, 146], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_x0", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        If true, algorithm requires initial evaluation from environment.\n        By default set to False.\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.exit": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "exit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_exit", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.algorithm.Algorithm.best_predicted": [[151, 158], ["None"], "methods", ["None"], ["", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        If implemented, this should returns a point in the domain, which is currently believed to be best\n        Returns:\n\n        \"\"\"", "\n", "return", "self", ".", "__best_x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.spsa.SPSA.initialize": [[18, 21], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["    ", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.spsa.SPSA.minimize": [[22, 29], ["noisyopt.minimizeSPSA"], "methods", ["None"], ["", "def", "minimize", "(", "self", ")", ":", "\n", "# NelderMead requires an initial point", "\n", "        ", "if", "self", ".", "x0", "is", "None", ":", "\n", "            ", "self", ".", "x0", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "_range", "/", "2", "\n", "\n", "", "res", "=", "minimizeSPSA", "(", "self", ".", "f", ",", "bounds", "=", "self", ".", "domain", ".", "bounds", ",", "x0", "=", "self", ".", "x0", ",", "niter", "=", "self", ".", "config", ".", "niter", ",", "paired", "=", "False", ",", "\n", "a", "=", "self", ".", "config", ".", "a", ",", "c", "=", "self", ".", "config", ".", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.spsa.SPSA.best_predicted": [[30, 32], ["None"], "methods", ["None"], ["", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_x", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.TrustRegionDomain.__init__": [[8, 16], ["subdomain.TrustRegionDomain._get_axes_points", "subdomain.TrustRegionDomain._get_random_points", "numpy.vstack", "febo.environment.DiscreteDomain.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.TrustRegionDomain._get_axes_points", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.TrustRegionDomain._get_random_points", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "domain", ",", "x0", ",", "radius", ",", "num_random_points", "=", "500", ",", "num_axis_points", "=", "10", ")", ":", "\n", "        ", "self", ".", "_domain", "=", "domain", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "radius", "=", "radius", "\n", "axis_points", ",", "self", ".", "_axis_point_list", "=", "self", ".", "_get_axes_points", "(", "num_axis_points", ")", "\n", "random_points", "=", "self", ".", "_get_random_points", "(", "num_random_points", ")", "\n", "points", "=", "np", ".", "vstack", "(", "(", "axis_points", ",", "random_points", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", "points", ",", "domain", ".", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.TrustRegionDomain.get_axis_points": [[17, 19], ["None"], "methods", ["None"], ["", "def", "get_axis_points", "(", "self", ",", "coord", ")", ":", "\n", "        ", "return", "self", ".", "_axis_point_list", "[", "coord", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.TrustRegionDomain._get_axes_points": [[20, 36], ["subdomain.TrustRegionDomain.x0.copy().reshape", "enumerate", "numpy.eye", "numpy.vstack", "numpy.vstack", "axis_point_list.append", "subdomain.TrustRegionDomain.x0.copy", "numpy.vstack", "numpy.logical_and", "numpy.linspace().reshape", "numpy.linspace().reshape", "numpy.linspace", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "_get_axes_points", "(", "self", ",", "num_points", ")", ":", "\n", "        ", "axis_point_list", "=", "[", "]", "\n", "points", "=", "self", ".", "x0", ".", "copy", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "np", ".", "eye", "(", "self", ".", "_domain", ".", "d", ")", ")", ":", "\n", "            ", "axis_points_1", "=", "self", ".", "x0", "+", "v", "*", "np", ".", "linspace", "(", "0", ",", "self", ".", "radius", "[", "i", "]", ",", "num_points", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "[", "1", ":", "]", "\n", "axis_points_2", "=", "self", ".", "x0", "-", "v", "*", "np", ".", "linspace", "(", "0", ",", "self", ".", "radius", "[", "i", "]", ",", "num_points", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "[", "1", ":", "]", "\n", "\n", "# remove points beyond boundary", "\n", "axis_points", "=", "np", ".", "vstack", "(", "(", "axis_points_1", ",", "axis_points_2", ")", ")", "\n", "axis_points", "=", "axis_points", "[", "np", ".", "logical_and", "(", "(", "axis_points", "<=", "self", ".", "_domain", ".", "u", ")", ".", "all", "(", "axis", "=", "1", ")", ",", "(", "axis_points", ">=", "self", ".", "_domain", ".", "l", ")", ".", "all", "(", "axis", "=", "1", ")", ")", "]", "\n", "\n", "points", "=", "np", ".", "vstack", "(", "(", "points", ",", "axis_points", ")", ")", "\n", "axis_point_list", ".", "append", "(", "np", ".", "vstack", "(", "(", "self", ".", "x0", ",", "axis_points", ")", ")", ")", "\n", "\n", "", "return", "points", ",", "axis_point_list", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.TrustRegionDomain._get_random_points": [[37, 42], ["numpy.random.normal().reshape", "subdomain.TrustRegionDomain._domain.project", "numpy.linalg.norm().reshape", "numpy.random.normal", "numpy.linalg.norm", "numpy.random.uniform().reshape", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project"], ["", "def", "_get_random_points", "(", "self", ",", "num_points", ")", ":", "\n", "# generate random points in ball with radius", "\n", "        ", "directions", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "size", "=", "num_points", "*", "self", ".", "_domain", ".", "d", ")", ".", "reshape", "(", "num_points", ",", "self", ".", "_domain", ".", "d", ")", "\n", "directions", "=", "directions", "/", "np", ".", "linalg", ".", "norm", "(", "directions", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "self", ".", "_domain", ".", "project", "(", "self", ".", "x0", "+", "directions", "*", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "num_points", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "self", ".", "radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.__init__": [[48, 55], ["subdomain.LineDomain._find_subdomain_bounds", "febo.environment.domain.ContinuousDomain.__init__", "numpy.linalg.norm", "subdomain.LineDomain.project_on_line"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.RandomSafeSubDomain._find_subdomain_bounds", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.project_on_line"], ["def", "__init__", "(", "self", ",", "domain", ",", "x0", ",", "direction", ")", ":", "\n", "        ", "self", ".", "_domain", "=", "domain", "\n", "self", ".", "x0", "=", "x0", "\n", "self", ".", "direction", "=", "direction", "/", "np", ".", "linalg", ".", "norm", "(", "direction", ")", "\n", "lower", ",", "upper", "=", "self", ".", "_find_subdomain_bounds", "(", "domain", ")", "\n", "super", "(", "LineDomain", ",", "self", ")", ".", "__init__", "(", "lower", ",", "upper", ")", "\n", "self", ".", "c", "=", "self", ".", "project_on_line", "(", "x0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.project_on_line": [[56, 59], ["numpy.atleast_2d", "numpy.dot"], "methods", ["None"], ["", "def", "project_on_line", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "return", "np", ".", "dot", "(", "X", "-", "self", ".", "x0", ",", "self", ".", "direction", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain": [[60, 63], ["numpy.atleast_2d", "numpy.dot"], "methods", ["None"], ["", "def", "embed_in_domain", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "return", "np", ".", "dot", "(", "X", ",", "self", ".", "direction", ")", "+", "self", ".", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain._find_subdomain_bounds": [[64, 95], ["numpy.array", "numpy.array", "numpy.empty", "numpy.empty", "range", "len", "numpy.empty_like", "numpy.empty_like", "range", "numpy.min", "numpy.max", "ValueError", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "_find_subdomain_bounds", "(", "self", ",", "domain", ")", ":", "\n", "\n", "#make sure these are numpy arrays", "\n", "        ", "old_lower", "=", "np", ".", "array", "(", "domain", ".", "_l", ")", "\n", "old_upper", "=", "np", ".", "array", "(", "domain", ".", "_u", ")", "\n", "\n", "#define the output arrays", "\n", "lower", "=", "np", ".", "empty", "(", "(", "1", ")", ")", "\n", "upper", "=", "np", ".", "empty", "(", "(", "1", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "direction", ")", ")", ":", "\n", "            ", "v", "=", "self", ".", "direction", "[", "j", "]", "\n", "if", "len", "(", "old_lower", ")", "!=", "len", "(", "v", ")", "or", "len", "(", "old_upper", ")", "!=", "len", "(", "v", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Basis needs to have the same dimension than the bounds\"", ")", "\n", "", "temp_l", "=", "np", ".", "empty_like", "(", "v", ")", "\n", "temp_u", "=", "np", ".", "empty_like", "(", "v", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "v", ")", ")", ":", "\n", "                ", "if", "v", "[", "i", "]", ">", "0", ":", "\n", "                    ", "temp_u", "[", "i", "]", "=", "(", "old_upper", "[", "i", "]", "-", "self", ".", "x0", "[", "i", "]", ")", "/", "v", "[", "i", "]", "\n", "temp_l", "[", "i", "]", "=", "(", "old_lower", "[", "i", "]", "-", "self", ".", "x0", "[", "i", "]", ")", "/", "v", "[", "i", "]", "\n", "", "elif", "v", "[", "i", "]", "<", "0", ":", "\n", "                    ", "temp_l", "[", "i", "]", "=", "(", "old_upper", "[", "i", "]", "-", "self", ".", "x0", "[", "i", "]", ")", "/", "v", "[", "i", "]", "\n", "temp_u", "[", "i", "]", "=", "(", "old_lower", "[", "i", "]", "-", "self", ".", "x0", "[", "i", "]", ")", "/", "v", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "temp_l", "[", "i", "]", "=", "-", "np", ".", "inf", "\n", "temp_u", "[", "i", "]", "=", "np", ".", "inf", "\n", "#we use the minimum distance to the boundaries to define our new bounds", "\n", "", "", "upper", "[", "j", "]", "=", "np", ".", "min", "(", "temp_u", ")", "\n", "lower", "[", "j", "]", "=", "np", ".", "max", "(", "temp_l", ")", "\n", "\n", "", "return", "lower", ",", "upper", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.set_u": [[96, 99], ["None"], "methods", ["None"], ["", "def", "set_u", "(", "self", ",", "new_u", ")", ":", "\n", "        ", "self", ".", "_u", "=", "new_u", "\n", "self", ".", "_range", "=", "self", ".", "_u", "-", "self", ".", "_l", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.set_l": [[100, 103], ["None"], "methods", ["None"], ["", "def", "set_l", "(", "self", ",", "new_l", ")", ":", "\n", "        ", "self", ".", "_l", "=", "new_l", "\n", "self", ".", "_range", "=", "self", ".", "_u", "-", "self", ".", "_l", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.RandomSafeSubDomain.__init__": [[109, 112], ["subdomain.LineDomain.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "domain", ",", "x0", ",", "direction", ",", "safeset", ")", ":", "\n", "        ", "self", ".", "_safeset", "=", "safeset", "\n", "super", "(", ")", ".", "__init__", "(", "domain", ",", "x0", ",", "direction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.RandomSafeSubDomain._find_subdomain_bounds": [[113, 118], ["subdomain.RandomSafeSubDomain._safeset.one_dim_bounds", "subdomain.RandomSafeSubDomain._safeset.in_safeset", "subdomain.RandomSafeSubDomain._safeset.project_back_to_ellipse", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_find_subdomain_bounds", "(", "self", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "_safeset", ".", "in_safeset", "(", "self", ".", "x0", ")", ")", ":", "\n", "            ", "self", ".", "x0", "=", "self", ".", "_safeset", ".", "project_back_to_ellipse", "(", "self", ".", "x0", ")", "\n", "", "lower", ",", "upper", "=", "self", ".", "_safeset", ".", "one_dim_bounds", "(", "self", ".", "direction", "[", "0", "]", ",", "self", ".", "x0", ")", "\n", "return", "np", ".", "array", "(", "[", "-", "lower", "]", ")", ",", "np", ".", "array", "(", "[", "upper", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.TrustRegionSafetyMixin._tr_add_data": [[19, 22], ["super()._tr_add_data", "safeopt.TrustRegionSafetyMixin._tr_compute_safe_region"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.TrustRegionSafetyMixin._tr_compute_safe_region"], ["\n", "", "def", "optimize", "(", "self", ",", "ucb", "=", "False", ")", ":", "\n", "# Make sure the safe set is still safe", "\n", "        ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.TrustRegionSafetyMixin._tr_solver_init": [[23, 26], ["super()._tr_solver_init", "safeopt.TrustRegionSafetyMixin._tr_compute_safe_region"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_init", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.TrustRegionSafetyMixin._tr_compute_safe_region"], ["            ", "return", "super", "(", ")", ".", "optimize", "(", "ucb", "=", "ucb", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Empty safeset, choosing initial point\"", ")", "\n", "return", "self", ".", "x0", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.TrustRegionSafetyMixin._tr_compute_safe_region": [[27, 34], ["safeopt.TrustRegionSafetyMixin.get_joined_constrained_cb"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.get_joined_constrained_cb"], ["\n", "", "return", "super", "(", ")", ".", "optimize", "(", "ucb", "=", "ucb", ")", "\n", "\n", "", "", "class", "SafeOptStub", ":", "\n", "    ", "\"\"\" just to ease evaluation of first data point. \"\"\"", "\n", "def", "__init__", "(", "self", ",", "x0", ")", ":", "\n", "        ", "self", ".", "x0", "=", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.TrustRegionSafetyMixin._tr_solver_step": [[35, 68], ["febo.algorithms.subdomainbo.utils.maximize", "safeopt.TrustRegionSafetyMixin.get_joined_constrained_cb", "zip", "safeopt.TrustRegionSafetyMixin.get_joined_constrained_cb", "logger.warning", "x_expander.reshape", "numpy.asscalar", "numpy.linspace().reshape", "safeopt.TrustRegionSafetyMixin.model.std", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.maximize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.get_joined_constrained_cb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.get_joined_constrained_cb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std"], ["", "def", "optimize", "(", "self", ",", "ucb", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "x0", "\n", "\n", "", "def", "get_maximum", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x0", ",", "None", "\n", "\n", "\n", "", "", "@", "assign_config", "(", "SafeOptConfig", ")", "\n", "class", "SafeOpt", "(", "ModelMixin", ",", "Algorithm", ")", ":", "\n", "\n", "    ", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "self", ".", "_lower_bound_objective", "=", "kwargs", "[", "'lower_bound_objective'", "]", "\n", "self", ".", "safeopt", "=", "SafeOptStub", "(", "self", ".", "x0", ")", "\n", "\n", "", "def", "_next", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "safeopt", ".", "optimize", "(", "ucb", "=", "self", ".", "config", ".", "ucb", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Empty safeset, choosing initial point\"", ")", "\n", "return", "self", ".", "x0", "\n", "\n", "", "", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_data", "(", "data", ")", "\n", "if", "isinstance", "(", "self", ".", "safeopt", ",", "SafeOptStub", ")", ":", "\n", "            ", "self", ".", "_initialize_safeopt", "(", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "safeopt", ".", "add_new_data_point", "(", "data", "[", "'x'", "]", ",", "data", "[", "'y'", "]", ")", "\n", "\n", "", "", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "res", "=", "self", ".", "safeopt", ".", "get_maximum", "(", ")", "\n", "if", "res", "is", "None", ":", "\n", "            ", "return", "self", ".", "x0", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.TrustRegionSafetyMixin._tr_solver_best": [[69, 73], ["febo.algorithms.subdomainbo.utils.maximize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.maximize"], ["            ", "return", "res", "[", "0", "]", "\n", "\n", "", "", "def", "_initialize_safeopt", "(", "self", ",", "x0", ",", "y0", ")", ":", "\n", "        ", "kernel", "=", "self", ".", "model", ".", "_get_kernel", "(", ")", "\n", "gp", "=", "GPy", ".", "models", ".", "GPRegression", "(", "x0", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "y0", ".", "reshape", "(", "1", ",", "1", ")", ",", "kernel", ",", "noise_var", "=", "self", ".", "model", ".", "config", ".", "noise_var", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin.initialize": [[76, 79], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["self", ".", "safeopt", "=", "safeopt", ".", "SafeOpt", "(", "gp", ",", "parameter_set", ",", "self", ".", "_lower_bound_objective", ",", "threshold", "=", "self", ".", "_lower_bound_objective", ")", "\n", "\n", "\n", "", "", "@", "assign_config", "(", "SafeOptConfig", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin.plot_line": [[81, 118], ["super().plot_line", "safeopt.LineSafetyMixin.get_joined_constrained_cb", "axis.axhline", "axis.fill_between", "febo.algorithms.subdomainbo.utils.plot_colored_region", "febo.algorithms.subdomainbo.utils.plot_colored_region", "febo.algorithms.subdomainbo.utils.plot_colored_region", "febo.algorithms.subdomainbo.utils.plot_colored_region", "febo.algorithms.subdomainbo.utils.plot_colored_region", "numpy.empty", "enumerate", "s_lcb.flatten", "s_ucb.flatten", "axis.plot", "axis.scatter", "s.mean", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.CoordinateLineBO.plot_line", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.get_joined_constrained_cb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_colored_region", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_colored_region", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_colored_region", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_colored_region", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_colored_region", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["\n", "    ", "def", "_initialize_safeopt", "(", "self", ",", "x0", ",", "y0", ")", ":", "\n", "        ", "kernel", "=", "self", ".", "model", ".", "_get_kernel", "(", ")", "\n", "gp", "=", "GPy", ".", "models", ".", "GPRegression", "(", "x0", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "y0", ".", "reshape", "(", "1", ",", "1", ")", ",", "kernel", ",", "noise_var", "=", "self", ".", "model", ".", "config", ".", "noise_var", ")", "\n", "bounds", "=", "[", "(", "l", ",", "u", ")", "for", "l", ",", "u", "in", "zip", "(", "self", ".", "domain", ".", "l", ",", "self", ".", "domain", ".", "u", ")", "]", "\n", "self", ".", "safeopt", "=", "SafeOptSwarmMod", "(", "gp", ",", "self", ".", "_lower_bound_objective", ",", "bounds", "=", "bounds", ",", "\n", "threshold", "=", "self", ".", "_lower_bound_objective", ",", "x0", "=", "x0", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._compute_boundary_helper": [[119, 142], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_add_data": [[144, 147], ["super()._line_add_data", "safeopt.LineSafetyMixin._line_compute_safe_region"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_compute_safe_region"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_solver_init": [[148, 151], ["super()._line_solver_init", "safeopt.LineSafetyMixin._line_compute_safe_region"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_init", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_compute_safe_region"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_max_ucb": [[152, 154], ["febo.algorithms.subdomainbo.utils.maximize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.maximize"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_solver_stop": [[155, 160], ["super()._line_solver_stop"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_stop"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_compute_safe_region": [[161, 225], ["numpy.linspace", "safeopt.LineSafetyMixin._line_domain.embed_in_domain", "numpy.ones", "safeopt.LineSafetyMixin.model.ci", "numpy.max", "safeopt.LineSafetyMixin.get_joined_constrained_cb", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.linspace.reshape", "numpy.sum", "safeopt.LineSafetyMixin._compute_boundary_helper", "numpy.sum", "safeopt.LineSafetyMixin._compute_boundary_helper", "numpy.logical_and", "numpy.logical_and", "zip", "zip", "numpy.sum", "numpy.max", "numpy.sum", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.ci", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.get_joined_constrained_cb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._compute_boundary_helper", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._compute_boundary_helper"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_solver_best": [[226, 231], ["febo.algorithms.subdomainbo.utils.maximize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.maximize"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.safeopt.LineSafetyMixin._line_solver_step": [[232, 265], ["febo.algorithms.subdomainbo.utils.maximize", "safeopt.LineSafetyMixin.get_joined_constrained_cb", "logger.warning", "safeopt.LineSafetyMixin._line_domain.project_on_line", "x_expander.reshape", "numpy.asscalar", "safeopt.LineSafetyMixin._line_domain.embed_in_domain", "safeopt.LineSafetyMixin._line_domain.embed_in_domain", "safeopt.LineSafetyMixin.model.std"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.maximize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.algorithms.model.ModelMixin.get_joined_constrained_cb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.project_on_line", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.acquisition.ucb": [[6, 8], ["model.ucb"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.ucb"], ["\n", "logger", "=", "get_logger", "(", "'algorithm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.initialize": [[51, 69], ["super().initialize", "subdomainbo.SubDomainBO.x0.copy", "kwargs.get", "febo.algorithms.subdomainbo.utils.dimension_setting_helper", "febo.algorithms.subdomainbo.utils.dimension_setting_helper", "febo.algorithms.subdomainbo.utils.dimension_setting_helper", "febo.algorithms.subdomainbo.utils.dimension_setting_helper", "febo.utils.locate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.dimension_setting_helper", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.dimension_setting_helper", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.dimension_setting_helper", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.dimension_setting_helper", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate"], ["def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SubDomainBO", ",", "self", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_best_x", "=", "self", ".", "x0", ".", "copy", "(", ")", "\n", "\n", "self", ".", "_best_direction", "=", "None", "\n", "self", ".", "_phase", "=", "'best'", "\n", "self", ".", "_iteration", "=", "0", "\n", "\n", "self", ".", "_parameter_names", "=", "kwargs", ".", "get", "(", "'parameter_names'", ")", "\n", "\n", "self", ".", "_max_queries_line", "=", "dimension_setting_helper", "(", "self", ".", "config", ".", "max_queries_line", ",", "self", ".", "domain", ".", "d", ")", "\n", "self", ".", "_min_queries_line", "=", "dimension_setting_helper", "(", "self", ".", "config", ".", "min_queries_line", ",", "self", ".", "domain", ".", "d", ")", "\n", "self", ".", "_max_queries_tr", "=", "dimension_setting_helper", "(", "self", ".", "config", ".", "max_queries_tr", ",", "self", ".", "domain", ".", "d", ")", "\n", "self", ".", "_minx_queries_tr", "=", "dimension_setting_helper", "(", "self", ".", "config", ".", "min_queries_tr", ",", "self", ".", "domain", ".", "d", ")", "\n", "self", ".", "_point_type_addition", "=", "''", "\n", "\n", "self", ".", "__acquisition", "=", "locate", "(", "self", ".", "config", ".", "acquisition", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._next": [[73, 101], ["subdomainbo.SubDomainBO._line_solver_step", "isinstance", "subdomainbo.SubDomainBO._tr_solver_step", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_step", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_step", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "_next", "(", "self", ",", "context", "=", "None", ")", ":", "\n", "        ", "additional_data", "=", "{", "'iteration'", ":", "self", ".", "_iteration", "}", "\n", "# sampling phases", "\n", "if", "self", ".", "_phase", "==", "'best'", ":", "\n", "            ", "additional_data", "[", "'point_type'", "]", "=", "'best'", "\n", "return", "self", ".", "_best_x", ",", "additional_data", "\n", "\n", "", "if", "self", ".", "_phase", "==", "'line'", ":", "\n", "            ", "additional_data", "[", "'point_type'", "]", "=", "'line'", "+", "self", ".", "_point_type_addition", "\n", "self", ".", "_point_type_addition", "=", "''", "\n", "x_next", "=", "self", ".", "_line_solver_step", "(", ")", "\n", "# if a tuple is returned, it contains x,m", "\n", "if", "isinstance", "(", "x_next", ",", "tuple", ")", ":", "\n", "                ", "x_next", ",", "m", "=", "x_next", "\n", "additional_data", "[", "'m'", "]", "=", "m", "\n", "logger", ".", "info", "(", "f\"Choosing {m} measurements.\"", ")", "\n", "\n", "", "return", "x_next", ",", "additional_data", "\n", "\n", "", "if", "self", ".", "_phase", "==", "'tr'", ":", "\n", "            ", "additional_data", "[", "'point_type'", "]", "=", "'tr'", "+", "self", ".", "_point_type_addition", "\n", "self", ".", "_point_type_addition", "=", "''", "\n", "x_next", "=", "self", ".", "_tr_solver_step", "(", ")", "\n", "if", "isinstance", "(", "x_next", ",", "tuple", ")", ":", "\n", "                ", "x_next", ",", "m", "=", "x_next", "\n", "additional_data", "[", "'m'", "]", "=", "m", "\n", "logger", ".", "info", "(", "f\"Choosing {m} measurements.\"", ")", "\n", "", "return", "x_next", ",", "additional_data", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.add_data": [[102, 140], ["super().add_data", "subdomainbo.SubDomainBO._line_add_data", "subdomainbo.SubDomainBO._line_solver_best", "subdomainbo.SubDomainBO._best_x_list.append", "subdomainbo.SubDomainBO._line_solver_stop", "subdomainbo.SubDomainBO._best_x.copy", "subdomainbo.SubDomainBO._line_solver_finalize", "subdomainbo.SubDomainBO._tr_add_data", "subdomainbo.SubDomainBO._tr_solver_best", "subdomainbo.SubDomainBO._tr_solver_stop", "subdomainbo.SubDomainBO._tr_solver_best_direction", "subdomainbo.SubDomainBO._tr_solver_finalize", "subdomainbo.SubDomainBO._get_new_subdomain", "logger.info", "logger.info", "subdomainbo.SubDomainBO._line_solver_init", "subdomainbo.SubDomainBO._tr_solver_init"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_best", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_stop", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_finalize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_best", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_stop", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_best_direction", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_finalize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.AscentLineBO._get_new_subdomain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_init", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_init"], ["", "", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "super", "(", ")", ".", "add_data", "(", "data", ")", "\n", "\n", "# evaluate stopping conditions", "\n", "if", "self", ".", "_phase", "==", "'line'", ":", "\n", "# add line data", "\n", "            ", "self", ".", "_line_add_data", "(", "data", ")", "\n", "self", ".", "_best_x", "=", "self", ".", "_line_solver_best", "(", ")", "\n", "self", ".", "_best_x_list", ".", "append", "(", "self", ".", "_best_x", ".", "copy", "(", ")", ")", "\n", "\n", "if", "self", ".", "_line_solver_stop", "(", ")", ":", "\n", "                ", "self", ".", "_line_solver_finalize", "(", ")", "\n", "self", ".", "_phase", "=", "'best'", "\n", "\n", "", "", "elif", "self", ".", "_phase", "==", "'tr'", ":", "\n", "# add tr data", "\n", "            ", "self", ".", "_tr_add_data", "(", "data", ")", "\n", "self", ".", "_best_x", "=", "self", ".", "_tr_solver_best", "(", ")", "\n", "\n", "if", "self", ".", "_tr_solver_stop", "(", ")", ":", "\n", "# compute best direction", "\n", "                ", "self", ".", "_best_direction", "=", "self", ".", "_tr_solver_best_direction", "(", ")", "\n", "self", ".", "_tr_solver_finalize", "(", ")", "\n", "self", ".", "_phase", "=", "'best'", "\n", "\n", "", "", "elif", "self", ".", "_phase", "==", "'best'", ":", "\n", "            ", "self", ".", "_iteration", "+=", "1", "\n", "\n", "self", ".", "_phase", ",", "subdomain", "=", "self", ".", "_get_new_subdomain", "(", ")", "\n", "logger", ".", "info", "(", "f'best_x evaluate, y={data[\"y\"]}'", ")", "\n", "\n", "\n", "if", "self", ".", "_phase", "==", "'line'", ":", "\n", "                ", "self", ".", "_line_solver_init", "(", "subdomain", ")", "\n", "", "elif", "self", ".", "_phase", "==", "'tr'", ":", "\n", "                ", "self", ".", "_tr_solver_init", "(", "subdomain", ")", "\n", "\n", "", "logger", ".", "info", "(", "f'starting {self._iteration}, {self._phase}-solver.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._get_new_subdomain": [[141, 146], ["None"], "methods", ["None"], ["", "", "def", "_get_new_subdomain", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_iteration", "%", "2", "==", "0", ":", "\n", "            ", "return", "'tr'", ",", "\n", "", "else", ":", "\n", "            ", "return", "'line'", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_init": [[147, 152], ["febo.solvers.GridSolver"], "methods", ["None"], ["", "", "def", "_line_solver_init", "(", "self", ",", "line_domain", ")", ":", "\n", "        ", "self", ".", "_line_data", "=", "[", "]", "\n", "self", ".", "_best_x_list", "=", "[", "]", "\n", "self", ".", "_line_domain", "=", "line_domain", "\n", "self", ".", "_line_solver", "=", "GridSolver", "(", "domain", "=", "line_domain", ",", "points_per_dimension", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_add_data": [[153, 155], ["subdomainbo.SubDomainBO._line_data.append"], "methods", ["None"], ["", "def", "_line_add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_line_data", ".", "append", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_max_ucb": [[156, 159], ["subdomainbo.SubDomainBO._line_solver.minimize", "subdomainbo.SubDomainBO.model.ucb", "subdomainbo.SubDomainBO._line_domain.embed_in_domain"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.ucb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain"], ["", "def", "_line_max_ucb", "(", "self", ")", ":", "\n", "        ", "max_ucb", "=", "self", ".", "_line_solver", ".", "minimize", "(", "lambda", "X", ":", "-", "self", ".", "model", ".", "ucb", "(", "self", ".", "_line_domain", ".", "embed_in_domain", "(", "X", ")", ")", ")", "[", "1", "]", "\n", "return", "-", "max_ucb", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_stop": [[160, 180], ["len", "logger.warning", "len", "subdomainbo.SubDomainBO._line_max_ucb", "subdomainbo.SubDomainBO.model.lcb", "subdomainbo.SubDomainBO.model.mean"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_max_ucb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.lcb", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["", "def", "_line_solver_stop", "(", "self", ")", ":", "\n", "# don't stop below min-queries", "\n", "        ", "if", "len", "(", "self", ".", "_line_data", ")", "<=", "self", ".", "_min_queries_line", ":", "\n", "            ", "return", "False", "\n", "\n", "# accuracy of maximum < 1%", "\n", "", "if", "self", ".", "_line_max_ucb", "(", ")", "-", "self", ".", "model", ".", "lcb", "(", "self", ".", "_best_x", ")", "<", "0.01", "*", "self", ".", "model", ".", "mean", "(", "self", ".", "_best_x", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Uncertainty at best_x reduced to 1%, stopping line.\"", ")", "\n", "return", "True", "\n", "\n", "# best_x didn't change after half the samples", "\n", "# flexible_query_range = max(self._max_queries_line - self._min_queries_line, 6)", "\n", "# if len(self._line_data) >= self._min_queries_line + flexible_query_range/4:", "\n", "#     # maximum distance of last few best_x did not change by more than 2 % on domain", "\n", "#     if np.max(pdist(self._best_x_list[-flexible_query_range // 2:], w=1/self.domain.range**2)) < 0.02:", "\n", "#         logger.warning(f\"No best_x change in {flexible_query_range // 2} steps. Stopping line.\")", "\n", "#         return True", "\n", "\n", "# stop at max queries", "\n", "", "return", "len", "(", "self", ".", "_line_data", ")", ">=", "self", ".", "_max_queries_line", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_best": [[181, 189], ["subdomainbo.SubDomainBO._line_domain.embed_in_domain().flatten", "subdomainbo.SubDomainBO._line_solver.minimize", "subdomainbo.SubDomainBO._line_domain.embed_in_domain", "subdomainbo.SubDomainBO.model.mean", "numpy.logical_or", "subdomainbo.SubDomainBO._line_domain.embed_in_domain"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain"], ["", "def", "_line_solver_best", "(", "self", ")", ":", "\n", "        ", "boundary_margin", "=", "self", ".", "_line_domain", ".", "range", "*", "self", ".", "config", ".", "line_boundary_margin", "\n", "def", "mean", "(", "X", ")", ":", "\n", "# return model mean on line, but ignore a margin at the boundary to account for boundary effects of the gp", "\n", "            ", "return", "-", "self", ".", "model", ".", "mean", "(", "self", ".", "_line_domain", ".", "embed_in_domain", "(", "X", ")", ")", "+", "10e10", "*", "np", ".", "logical_or", "(", "X", "<", "self", ".", "_line_domain", ".", "l", "+", "boundary_margin", ",", "X", ">", "self", ".", "_line_domain", ".", "u", "-", "boundary_margin", ")", "\n", "", "x_line", "=", "self", ".", "_line_solver", ".", "minimize", "(", "mean", ")", "[", "0", "]", "\n", "return", "self", ".", "_line_domain", ".", "embed_in_domain", "(", "x_line", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_step": [[190, 196], ["subdomainbo.SubDomainBO._line_domain.embed_in_domain().flatten", "subdomainbo.SubDomainBO._save_line_plot", "subdomainbo.SubDomainBO._line_solver.minimize", "subdomainbo.SubDomainBO._line_domain.embed_in_domain", "subdomainbo.SubDomainBO.global_acquisition", "subdomainbo.SubDomainBO._line_domain.embed_in_domain"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._save_line_plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.global_acquisition", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain"], ["", "def", "_line_solver_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "plot_every_step", ":", "\n", "            ", "self", ".", "_save_line_plot", "(", "with_step_num", "=", "True", ")", "\n", "\n", "", "x_line", "=", "self", ".", "_line_solver", ".", "minimize", "(", "lambda", "X", ":", "-", "self", ".", "global_acquisition", "(", "self", ".", "_line_domain", ".", "embed_in_domain", "(", "X", ")", ")", ")", "[", "0", "]", "\n", "return", "self", ".", "_line_domain", ".", "embed_in_domain", "(", "x_line", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._line_solver_finalize": [[197, 200], ["subdomainbo.SubDomainBO._save_line_plot"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._save_line_plot"], ["", "def", "_line_solver_finalize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "plot", ":", "\n", "            ", "self", ".", "_save_line_plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._save_line_plot": [[201, 225], ["matplotlib.figure", "matplotlib.figure.gca", "subdomainbo.SubDomainBO.plot_line", "subdomainbo.SubDomainBO.experiment_info.get", "os.path.join", "os.makedirs", "matplotlib.figure.subplots_adjust", "matplotlib.figure.savefig", "logger.info", "matplotlib.close", "str", "str", "os.path.join", "os.path.join", "subdomainbo.SubDomainBO.experiment_info.get"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.CoordinateLineBO.plot_line", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close"], ["", "", "def", "_save_line_plot", "(", "self", ",", "with_step_num", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Save a plot of the current line. The plot is generated in .plot_line(...)\n        \"\"\"", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "f", ".", "gca", "(", ")", "\n", "\n", "self", ".", "plot_line", "(", "axis", "=", "axis", ")", "\n", "\n", "# save plot", "\n", "group_id", "=", "self", ".", "experiment_info", ".", "get", "(", "\"group_id\"", ",", "\"\"", ")", "\n", "if", "group_id", "is", "None", ":", "# group_id might be set to None already in self.experiment_dir", "\n", "            ", "group_id", "=", "\"\"", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_info", "[", "\"experiment_dir\"", "]", ",", "\"plots\"", ",", "str", "(", "group_id", ")", ",", "str", "(", "self", ".", "experiment_info", ".", "get", "(", "\"run_id\"", ",", "\"\"", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "f", ".", "subplots_adjust", "(", "top", "=", "0.71", ")", "\n", "if", "with_step_num", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f'Iteration_{self._iteration}_{self.t}.pdf'", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f'Iteration_{self._iteration}.pdf'", ")", "\n", "", "f", ".", "savefig", "(", "path", ")", "\n", "logger", ".", "info", "(", "f'Saved line plot to {path}'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.plot_line": [[226, 263], ["numpy.linspace", "subdomainbo.SubDomainBO._line_domain.embed_in_domain", "subdomainbo.SubDomainBO.model.mean_var", "axis.fill_between", "axis.plot", "axis.scatter", "axis.axvline", "axis.axvline", "axis.set_title", "numpy.linspace.reshape", "mean.flatten", "numpy.sqrt().flatten", "subdomainbo.SubDomainBO._line_domain.project_on_line().flatten", "subdomainbo.SubDomainBO._line_domain.project_on_line", "subdomainbo.SubDomainBO._line_domain.project_on_line", "numpy.sqrt", "subdomainbo.SubDomainBO._line_domain.project_on_line", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.embed_in_domain", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.project_on_line", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.project_on_line", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.LineDomain.project_on_line"], ["", "def", "plot_line", "(", "self", ",", "axis", ",", "steps", "=", "300", ")", ":", "\n", "        ", "\"\"\"\n        This function uses the datapoints measured in one dim and plots these together with the standard deviation\n        and mean of the model to check the lengthscale. It returns the plots into a folder with one plot per line in the dropout algorithm\n\n        :param axis: axis to plot on\n        :param line_data:\n        :param steps:\n        \"\"\"", "\n", "\n", "# first create evaluation grid with correct bounds on the sub-domain", "\n", "X_eval", "=", "np", ".", "linspace", "(", "self", ".", "_line_domain", ".", "l", "[", "0", "]", ",", "self", ".", "_line_domain", ".", "u", "[", "0", "]", ",", "steps", ")", "\n", "\n", "# then we evaluate the mean and the variance by projecting back to high-d space", "\n", "X_eval_embedded", "=", "self", ".", "_line_domain", ".", "embed_in_domain", "(", "X_eval", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "mean", ",", "var", "=", "self", ".", "model", ".", "mean_var", "(", "X_eval_embedded", ")", "\n", "mean", ",", "std", "=", "mean", ".", "flatten", "(", ")", ",", "np", ".", "sqrt", "(", "var", ")", ".", "flatten", "(", ")", "\n", "\n", "# we plot the mean, mean +/- std and the data points", "\n", "axis", ".", "fill_between", "(", "X_eval", ",", "mean", "-", "std", ",", "mean", "+", "std", ",", "alpha", "=", "0.4", ",", "facecolor", "=", "'grey'", ",", "color", "=", "'C0'", ")", "\n", "axis", ".", "plot", "(", "X_eval", ",", "mean", ",", "color", "=", "'C0'", ")", "\n", "\n", "\n", "data_x", "=", "[", "self", ".", "_line_domain", ".", "project_on_line", "(", "p", "[", "'x'", "]", ")", ".", "flatten", "(", ")", "for", "p", "in", "self", ".", "_line_data", "]", "\n", "data_y", "=", "[", "p", "[", "'y'", "]", "for", "p", "in", "self", ".", "_line_data", "]", "\n", "axis", ".", "scatter", "(", "data_x", ",", "data_y", ",", "marker", "=", "'x'", ",", "c", "=", "'C0'", ")", "\n", "\n", "# starting and best_predicted point", "\n", "axis", ".", "axvline", "(", "self", ".", "_line_domain", ".", "project_on_line", "(", "self", ".", "_line_domain", ".", "x0", ")", ",", "color", "=", "'C0'", ",", "linestyle", "=", "'--'", ")", "\n", "axis", ".", "axvline", "(", "self", ".", "_line_domain", ".", "project_on_line", "(", "self", ".", "_best_x", ")", ",", "color", "=", "'C0'", ")", "\n", "\n", "# add some information in the title", "\n", "axis", ".", "set_title", "(", "f'Iteration: {self._iteration}'", "\n", "f'\\nbeta= {round(self.model.beta,3)}, variance= {round(self.model.gp.kern.variance[0],3)}, '", "\n", "f'\\nnoise variance= {round(self.model.gp.Gaussian_noise.variance[0],5)}'", ")", "\n", "\n", "return", "X_eval", ",", "X_eval_embedded", ",", "data_x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_init": [[264, 268], ["febo.solvers.FiniteDomainSolver"], "methods", ["None"], ["", "def", "_tr_solver_init", "(", "self", ",", "tr_domain", ")", ":", "\n", "        ", "self", ".", "_tr_domain", "=", "tr_domain", "\n", "self", ".", "_tr_solver", "=", "FiniteDomainSolver", "(", "tr_domain", ")", "\n", "self", ".", "_tr_data", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_add_data": [[269, 271], ["subdomainbo.SubDomainBO._tr_data.append"], "methods", ["None"], ["", "def", "_tr_add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_tr_data", ".", "append", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_step": [[272, 288], ["subdomainbo.sample_grad_gp", "numpy.linalg.norm", "subdomainbo.SubDomainBO.domain.project", "subdomainbo.SubDomainBO._tr_solver.minimize", "subdomainbo.SubDomainBO.global_acquisition"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.sample_grad_gp", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.global_acquisition"], ["", "def", "_tr_solver_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "tr_method", "==", "'ball'", ":", "\n", "            ", "return", "self", ".", "_tr_solver", ".", "minimize", "(", "lambda", "X", ":", "-", "self", ".", "global_acquisition", "(", "X", ")", ")", "[", "0", "]", "\n", "# print(self._tr_domain.radius)", "\n", "# print(np.sum((next_x - self._tr_domain.x0)**2/self._tr_domain.radius**2))", "\n", "# return next_x", "\n", "", "if", "self", ".", "config", ".", "tr_method", "==", "'grad'", ":", "\n", "            ", "grad_sample", "=", "sample_grad_gp", "(", "self", ".", "model", ",", "self", ".", "_tr_domain", ".", "x0", ",", "self", ".", "_tr_domain", ".", "radius", ",", "0.01", ")", "\n", "# print('grad', grad_sample)", "\n", "# print('x0', self._tr_domain.x0)", "\n", "# normalize gradient", "\n", "grad_sample", "/=", "np", ".", "linalg", ".", "norm", "(", "grad_sample", ")", "\n", "# scale gradient to boundary of TR", "\n", "next_x", "=", "self", ".", "domain", ".", "project", "(", "self", ".", "_tr_domain", ".", "x0", "+", "grad_sample", "*", "self", ".", "_tr_domain", ".", "radius", ")", "\n", "# print('next_x)", "\n", "return", "next_x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_best": [[289, 301], ["subdomainbo.mean_grad_gp", "subdomainbo.SubDomainBO.domain.project", "subdomainbo.SubDomainBO._tr_solver.minimize", "numpy.linalg.norm", "febo.algorithms.subdomainbo.utils.maximize", "numpy.outer", "numpy.linspace", "tr_best.reshape", "subdomainbo.SubDomainBO.model.mean"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.mean_grad_gp", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.maximize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["", "", "def", "_tr_solver_best", "(", "self", ")", ":", "\n", "# return self._tr_solver.minimize(lambda X : -self.model.mean(X))[0]", "\n", "\n", "        ", "if", "self", ".", "config", ".", "tr_method", "==", "'ball'", ":", "\n", "            ", "return", "self", ".", "_tr_solver", ".", "minimize", "(", "lambda", "X", ":", "-", "self", ".", "model", ".", "mean", "(", "X", ")", ")", "[", "0", "]", "\n", "", "if", "self", ".", "config", ".", "tr_method", "==", "'grad'", ":", "\n", "            ", "grad", "=", "mean_grad_gp", "(", "self", ".", "model", ",", "self", ".", "_tr_domain", ".", "x0", ",", "self", ".", "_tr_domain", ".", "radius", ",", "0.001", ")", "\n", "tr_best", "=", "self", ".", "_tr_domain", ".", "radius", "*", "grad", "/", "np", ".", "linalg", ".", "norm", "(", "grad", ")", "\n", "\n", "# line search on model mean", "\n", "candidates", "=", "self", ".", "domain", ".", "project", "(", "self", ".", "_tr_domain", ".", "x0", "+", "np", ".", "outer", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "100", ")", ",", "tr_best", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "return", "maximize", "(", "self", ".", "model", ".", "mean", ",", "candidates", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_best_direction": [[303, 322], ["numpy.linalg.norm", "logger.warning", "subdomainbo.SubDomainBO.get_random_direction", "subdomainbo.SubDomainBO.model.mean", "subdomainbo.SubDomainBO.model.mean", "logger.warning", "subdomainbo.SubDomainBO.get_random_direction"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.get_random_direction", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.get_random_direction"], ["", "", "def", "_tr_solver_best_direction", "(", "self", ")", ":", "\n", "        ", "direction", "=", "(", "self", ".", "_best_x", "-", "self", ".", "_tr_domain", ".", "x0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# if self.config.tr_method == 'ball':", "\n", "#     direction = (self._best_x - self._tr_domain.x0).reshape(1, -1)", "\n", "# if self.config.tr_method == 'grad':", "\n", "#     direction = mean_grad_gp(self.model, self._tr_domain.x0, self._tr_domain.radius, 0.001)", "\n", "\n", "# if change is less  than 2% of tr-radius or increase is less then 0.5%, pick a random direction", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "direction", "/", "self", ".", "_tr_domain", ".", "radius", ")", "<", "0.02", ":", "\n", "            ", "logger", ".", "warning", "(", "'change in best_x < 2% of trust-region, picking random direction.'", ")", "\n", "direction", "=", "self", ".", "get_random_direction", "(", ")", "\n", "", "else", ":", "\n", "            ", "y_x0", "=", "self", ".", "model", ".", "mean", "(", "self", ".", "_tr_domain", ".", "x0", ")", "\n", "y_new", "=", "self", ".", "model", ".", "mean", "(", "self", ".", "_best_x", ")", "\n", "if", "y_new", "/", "y_x0", "<", "1.005", ":", "\n", "                ", "logger", ".", "warning", "(", "'predicted objective increase at best_x < 0.5%, picking random direction.'", ")", "\n", "direction", "=", "self", ".", "get_random_direction", "(", ")", "\n", "\n", "", "", "return", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_stop": [[323, 325], ["len"], "methods", ["None"], ["", "def", "_tr_solver_stop", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_tr_data", ")", ">=", "self", ".", "_max_queries_tr", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_solver_finalize": [[326, 329], ["subdomainbo.SubDomainBO._tr_save_plot"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_save_plot"], ["", "def", "_tr_solver_finalize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "plot", ":", "\n", "            ", "self", ".", "_tr_save_plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._tr_save_plot": [[330, 372], ["matplotlib.subplots", "utils.plot_parameter_changes", "numpy.asscalar", "numpy.asscalar", "numpy.asscalar", "numpy.empty", "range", "utils.plot_model_changes", "subdomainbo.SubDomainBO.experiment_info.get", "os.path.join", "os.makedirs", "fig.savefig", "logger.info", "matplotlib.close", "subdomainbo.SubDomainBO.model.mean", "subdomainbo.SubDomainBO.model.mean", "subdomainbo.SubDomainBO.model.std", "subdomainbo.SubDomainBO._tr_domain.get_axis_points", "numpy.max", "str", "str", "os.path.join", "os.path.join", "x0.reshape", "xnew.reshape", "xnew.reshape", "subdomainbo.SubDomainBO.model.mean", "subdomainbo.SubDomainBO.experiment_info.get"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_parameter_changes", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_model_changes", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomain.TrustRegionDomain.get_axis_points", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["", "", "def", "_tr_save_plot", "(", "self", ",", "with_step_num", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n              Save a plot of the current line. The plot is generated in .plot_line(...)\n              \"\"\"", "\n", "fig", ",", "axis", "=", "plt", ".", "subplots", "(", "ncols", "=", "1", ",", "figsize", "=", "(", "self", ".", "domain", ".", "d", ",", "4", ")", ")", "\n", "\n", "\n", "\n", "plot_parameter_changes", "(", "axis", ",", "self", ".", "_parameter_names", ",", "self", ".", "_tr_domain", ".", "x0", ",", "self", ".", "_best_x", ",", "self", ".", "domain", ".", "l", ",", "self", ".", "domain", ".", "u", ",", "self", ".", "_tr_domain", ".", "radius", ",", "self", ".", "x0", ")", "\n", "\n", "x0", "=", "self", ".", "_tr_domain", ".", "x0", "\n", "xnew", "=", "self", ".", "_best_x", "\n", "y_x0", "=", "np", ".", "asscalar", "(", "self", ".", "model", ".", "mean", "(", "x0", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "y_xnew", "=", "np", ".", "asscalar", "(", "self", ".", "model", ".", "mean", "(", "xnew", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "# ucb_xnew = np.asscalar(self.model.ucb(xnew.reshape(1,-1)))", "\n", "std_xnew", "=", "np", ".", "asscalar", "(", "self", ".", "model", ".", "std", "(", "xnew", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ")", "\n", "\n", "y_coord", "=", "np", ".", "empty", "(", "self", ".", "domain", ".", "d", ")", "\n", "# ucb_coord = np.empty(self.domain.d)", "\n", "for", "i", "in", "range", "(", "self", ".", "domain", ".", "d", ")", ":", "\n", "            ", "axis_points", "=", "self", ".", "_tr_domain", ".", "get_axis_points", "(", "i", ")", "\n", "y_coord", "[", "i", "]", "=", "np", ".", "max", "(", "self", ".", "model", ".", "mean", "(", "axis_points", ")", ")", "\n", "# ucb_coord[i] = np.max(self.model.ucb(axis_points))", "\n", "\n", "", "plot_model_changes", "(", "axis", ",", "y_x0", ",", "y_xnew", ",", "std_xnew", ",", "y_coord", ")", "\n", "\n", "# save plot", "\n", "group_id", "=", "self", ".", "experiment_info", ".", "get", "(", "\"group_id\"", ",", "\"\"", ")", "\n", "if", "group_id", "is", "None", ":", "# group_id might be set to None already in self.experiment_dir", "\n", "            ", "group_id", "=", "\"\"", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_info", "[", "\"experiment_dir\"", "]", ",", "\"plots\"", ",", "str", "(", "group_id", ")", ",", "\n", "str", "(", "self", ".", "experiment_info", ".", "get", "(", "\"run_id\"", ",", "\"\"", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "# fig.subplots_adjust(wspace=0.4)", "\n", "if", "with_step_num", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f'Iteration_{self._iteration}_{self.t}.pdf'", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f'Iteration_{self._iteration}.pdf'", ")", "\n", "", "fig", ".", "savefig", "(", "path", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "logger", ".", "info", "(", "f'Saved trust-region plot to {path}'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.global_acquisition": [[373, 375], ["subdomainbo.SubDomainBO.__acquisition"], "methods", ["None"], ["", "def", "global_acquisition", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "__acquisition", "(", "self", ".", "model", ",", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO._get_dtype_fields": [[376, 382], ["super()._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "fields", "=", "super", "(", ")", ".", "_get_dtype_fields", "(", ")", "\n", "fields", "+=", "[", "(", "'iteration'", ",", "'i'", ")", "]", "\n", "fields", "+=", "[", "(", "'direction'", ",", "'(1,%s)f'", "%", "self", ".", "domain", ".", "d", ")", "]", "\n", "fields", "+=", "[", "(", "'point_type'", ",", "'S25'", ")", "]", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.best_predicted": [[383, 385], ["subdomainbo.SubDomainBO.domain.project"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project"], ["", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "domain", ".", "project", "(", "self", ".", "_best_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.get_random_direction": [[386, 395], ["numpy.random.normal().reshape", "numpy.linalg.norm", "numpy.random.normal"], "methods", ["None"], ["", "def", "get_random_direction", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        creates a random directional vector in d = domain.d dimensions\n        :return: return a vector in shape (1, self.domain.d)\n        \"\"\"", "\n", "direction", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "domain", ".", "d", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "direction", "/=", "np", ".", "linalg", ".", "norm", "(", "direction", ")", "\n", "direction", "*=", "self", ".", "domain", ".", "range", "# scale direction with parameter ranges, such that the expected change in each direction has the same relative magnitude", "\n", "return", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.CoordinateLineBO.plot_line": [[402, 410], ["subdomainbo.SubDomainBO.plot_line", "axis.set_xlabel", "axis.set_xlabel"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.CoordinateLineBO.plot_line"], ["def", "plot_line", "(", "self", ",", "axis", ",", "steps", "=", "300", ")", ":", "\n", "        ", "info", "=", "super", "(", ")", ".", "plot_line", "(", "axis", ",", "steps", "=", "steps", ")", "\n", "# set the parameter name as x-label", "\n", "if", "self", ".", "_parameter_names", "is", "None", ":", "\n", "            ", "axis", ".", "set_xlabel", "(", "f'x_{self._iteration % self.domain.d}'", ")", "\n", "", "else", ":", "\n", "            ", "axis", ".", "set_xlabel", "(", "self", ".", "_parameter_names", "[", "self", ".", "_iteration", "%", "self", ".", "domain", ".", "d", "]", ")", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.CoordinateLineBO._get_new_subdomain": [[411, 415], ["[].reshape", "subdomain.LineDomain", "numpy.eye"], "methods", ["None"], ["", "def", "_get_new_subdomain", "(", "self", ")", ":", "\n", "        ", "direction", "=", "np", ".", "eye", "(", "self", ".", "domain", ".", "d", ")", "[", "self", ".", "_iteration", "%", "self", ".", "domain", ".", "d", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "line_domain", "=", "LineDomain", "(", "self", ".", "domain", ",", "self", ".", "_best_x", ",", "direction", ")", "\n", "return", "'line'", ",", "line_domain", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.RandomLineBO._get_new_subdomain": [[422, 426], ["subdomainbo.RandomLineBO.get_random_direction", "subdomain.LineDomain", "subdomainbo.RandomLineBO._best_x.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.get_random_direction", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["def", "_get_new_subdomain", "(", "self", ")", ":", "\n", "        ", "direction", "=", "self", ".", "get_random_direction", "(", ")", "\n", "line_domain", "=", "LineDomain", "(", "self", ".", "domain", ",", "self", ".", "_best_x", ".", "copy", "(", ")", ",", "direction", ")", "\n", "return", "'line'", ",", "line_domain", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.AscentLineBO._get_new_subdomain": [[433, 439], ["subdomain.TrustRegionDomain", "subdomain.LineDomain", "subdomainbo.AscentLineBO._best_x.copy", "subdomainbo.AscentLineBO._best_x.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["def", "_get_new_subdomain", "(", "self", ")", ":", "\n", "        ", "radius", "=", "self", ".", "domain", ".", "range", "*", "self", ".", "config", ".", "tr_radius", "\n", "if", "self", ".", "_iteration", "%", "2", "==", "1", ":", "\n", "            ", "return", "'tr'", ",", "TrustRegionDomain", "(", "self", ".", "domain", ",", "self", ".", "_best_x", ".", "copy", "(", ")", ",", "radius", "=", "radius", ")", "\n", "", "else", ":", "\n", "            ", "return", "'line'", ",", "LineDomain", "(", "self", ".", "domain", ",", "self", ".", "_best_x", ".", "copy", "(", ")", ",", "self", ".", "_best_direction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.sample_grad_gp": [[31, 36], ["numpy.vstack", "model.gp.posterior_samples_f().flatten", "model.gp.posterior_samples_f", "numpy.eye", "len"], "function", ["None"], ["", "def", "sample_grad_gp", "(", "model", ",", "x0", ",", "scale", ",", "eps", "=", "0.01", ")", ":", "\n", "    ", "points", "=", "x0", "+", "np", ".", "eye", "(", "len", "(", "x0", ")", ")", "*", "scale", "*", "eps", "\n", "points", "=", "np", ".", "vstack", "(", "(", "x0", ",", "points", ")", ")", "\n", "Y", "=", "model", ".", "gp", ".", "posterior_samples_f", "(", "points", ",", "size", "=", "1", ")", ".", "flatten", "(", ")", "\n", "return", "(", "Y", "[", "1", ":", "]", "-", "Y", "[", "0", "]", ")", "/", "(", "scale", "*", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.mean_grad_gp": [[37, 39], ["[].flatten", "model.gp.predictive_gradients", "x0.reshape"], "function", ["None"], ["", "def", "mean_grad_gp", "(", "model", ",", "x0", ",", "scale", ",", "eps", "=", "0.01", ")", ":", "\n", "    ", "return", "model", ".", "gp", ".", "predictive_gradients", "(", "x0", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", ".", "flatten", "(", ")", "\n", "# points = x0 + np.eye(len(x0))*scale*eps", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.maximize": [[5, 7], ["utils.minimize", "f"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["import", "sys", "\n", "import", "select", "\n", "import", "tty", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.minimize": [[8, 31], ["f", "numpy.argmin", "numpy.argmin"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["import", "termios", "\n", "from", "datetime", "import", "datetime", "\n", "import", "os", ".", "path", "\n", "import", "logging", "\n", "import", "importlib", "\n", "import", "pkgutil", "\n", "import", "coloredlogs", "\n", "import", "yaml", "\n", "import", "math", "\n", "import", "scipy", ".", "special", "\n", "\n", "\n", "def", "sherrman_morrision_update", "(", "A_inv", ",", "x_inc", ")", ":", "\n", "        ", "A_x", "=", "A_inv", ".", "dot", "(", "x_inc", ")", "\n", "return", "A_inv", "-", "A_x", ".", "dot", "(", "x_inc", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", ".", "dot", "(", "A_inv", ")", "/", "(", "1", "+", "np", ".", "asscalar", "(", "x_inc", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "dot", "(", "A_x", ")", ")", ")", "\n", "\n", "\n", "# https://arxiv.org/abs/1309.1541", "\n", "", "def", "project_onto_simplex", "(", "p", ",", "m", ")", ":", "\n", "    ", "u", "=", "np", ".", "sort", "(", "np", ".", "copy", "(", "p", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "rho", "=", "-", "1", "\n", "s", "=", "0", "\n", "s_rho", "=", "0", "\n", "j", "=", "1", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_colored_region": [[34, 39], ["matplotlib.transforms.blended_transform_factory", "axis.fill_between", "numpy.asscalar", "numpy.asscalar"], "function", ["None"], ["        ", "s", "+=", "u", "[", "j", "]", "\n", "if", "u", "[", "j", "]", "+", "1", "/", "(", "j", "+", "1", ")", "*", "(", "1", "-", "s", ")", ">", "0", ":", "\n", "            ", "rho", "=", "j", "+", "1", "\n", "s_rho", "=", "s", "\n", "", "else", ":", "\n", "            ", "break", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_parameter_changes": [[40, 78], ["len", "axis.set_ylim", "axis.set_xlim", "axis.set_ylabel", "axis.set_xticks", "enumerate", "axis.bar", "range", "axis.set_xticklabels", "axis.set_xticklabels", "zip", "axis.plot", "axis.plot", "axis.plot", "axis.arrow", "range", "len", "numpy.abs", "numpy.abs", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["\n", "", "", "l", "=", "1", "/", "rho", "*", "(", "1", "-", "s_rho", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "p", "[", "i", "]", "=", "max", "(", "p", "[", "i", "]", "+", "l", ",", "0", ")", "\n", "\n", "", "", "def", "cartesian", "(", "arrays", ",", "out", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.plot_model_changes": [[80, 92], ["len", "axis.twinx", "axis.twinx.axhline", "axis.twinx.bar", "axis.twinx.set_ylabel", "axis.set_title", "numpy.arange"], "function", ["None"], ["\n", "arrays", "=", "[", "np", ".", "asarray", "(", "x", ")", "for", "x", "in", "arrays", "]", "\n", "dtype", "=", "arrays", "[", "0", "]", ".", "dtype", "\n", "\n", "n", "=", "np", ".", "prod", "(", "[", "x", ".", "size", "for", "x", "in", "arrays", "]", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "np", ".", "zeros", "(", "[", "n", ",", "len", "(", "arrays", ")", "]", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "m", "=", "n", "/", "arrays", "[", "0", "]", ".", "size", "\n", "m", "=", "int", "(", "m", ")", "\n", "out", "[", ":", ",", "0", "]", "=", "np", ".", "repeat", "(", "arrays", "[", "0", "]", ",", "m", ")", "\n", "if", "arrays", "[", "1", ":", "]", ":", "\n", "            ", "cartesian", "(", "arrays", "[", "1", ":", "]", ",", "out", "=", "out", "[", "0", ":", "m", ",", "1", ":", "]", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.utils.dimension_setting_helper": [[93, 115], ["isinstance", "isinstance", "Exception", "int", "max_config.startswith", "max_config.split", "round", "float"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split"], ["for", "j", "in", "range", "(", "1", ",", "arrays", "[", "0", "]", ".", "size", ")", ":", "\n", "                ", "out", "[", "j", "*", "m", ":", "(", "j", "+", "1", ")", "*", "m", ",", "1", ":", "]", "=", "out", "[", "0", ":", "m", ",", "1", ":", "]", "\n", "", "", "return", "out", "\n", "\n", "\n", "", "def", "query_yes_no", "(", "question", ",", "default", "=", "\"yes\"", ")", ":", "\n", "    ", "\"\"\"Ask a yes/no question via raw_input() and return their answer.\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits <Enter>.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n    The \"answer\" return value is one of \"yes\" or \"no\".\n    \"\"\"", "\n", "valid", "=", "{", "\"yes\"", ":", "True", ",", "\"y\"", ":", "True", ",", "\"ye\"", ":", "True", ",", "\n", "\"no\"", ":", "False", ",", "\"n\"", ":", "False", "}", "\n", "if", "default", "==", "None", ":", "\n", "        ", "prompt", "=", "\" [y/n] \"", "\n", "", "elif", "default", "==", "\"yes\"", ":", "\n", "        ", "prompt", "=", "\" [Y/n] \"", "\n", "", "elif", "default", "==", "\"no\"", ":", "\n", "        ", "prompt", "=", "\" [y/N] \"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid default answer: '%s'\"", "%", "default", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.__init__": [[7, 14], ["numpy.vstack"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "l", ",", "u", ",", "denormalized_domain", "=", "None", ")", ":", "\n", "# TODO make sure everything is a numpy array", "\n", "        ", "self", ".", "_l", "=", "l", "\n", "self", ".", "_u", "=", "u", "\n", "self", ".", "_range", "=", "self", ".", "_u", "-", "self", ".", "_l", "\n", "self", ".", "_d", "=", "l", ".", "shape", "[", "0", "]", "\n", "self", ".", "_bounds", "=", "np", ".", "vstack", "(", "(", "self", ".", "_l", ",", "self", ".", "_u", ")", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.l": [[15, 18], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "l", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_l", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.u": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "u", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_u", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.bounds": [[23, 26], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bounds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_range", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.d": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_d", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.normalize": [[35, 37], ["None"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "x", "-", "self", ".", "_l", ")", "/", "self", ".", "_range", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.denormalize": [[38, 40], ["None"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "_range", "+", "self", ".", "_l", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.project": [[41, 46], ["numpy.minimum", "numpy.maximum"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Project X into domain rectangle.\n        \"\"\"", "\n", "return", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "X", ",", "self", ".", "l", ")", ",", "self", ".", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.is_continuous": [[47, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_continuous", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.__init__": [[53, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "points", ",", "d", "=", "None", ")", ":", "\n", "# TODO make sure everything is a numpy array in the right format", "\n", "        ", "self", ".", "_points", "=", "points", "\n", "if", "d", "is", "None", ":", "\n", "            ", "self", ".", "_d", "=", "points", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_d", "=", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.points": [[62, 65], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_points", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.d": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "d", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_d", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.num_points": [[70, 73], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_points", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.normalize": [[74, 76], ["None"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.denormalize": [[77, 79], ["None"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.DiscreteDomain.is_continuous": [[80, 83], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_continuous", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.UnitCube.__init__": [[85, 87], ["domain.ContinuousDomain.__init__", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", ")", ":", "\n", "        ", "super", "(", "UnitCube", ",", "self", ")", ".", "__init__", "(", "np", ".", "zeros", "(", "d", ")", ",", "np", ".", "ones", "(", "d", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.__init__": [[18, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "self", ".", "_domain", "=", "None", "\n", "self", ".", "_tmax", "=", "None", "\n", "self", ".", "_path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.name": [[23, 26], ["type", "type"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "f\"{type(self).__module__}.{type(self).__name__}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.domain": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "domain", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.initialize": [[31, 41], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize domain.\n\n        Returns (dict):\n            Dictionary containing environment information, which is passed as kwargs to the algorithm.\n            By default, { 'domain' : self.domain } is returned.\n\n        \"\"\"", "\n", "return", "{", "'domain'", ":", "self", ".", "domain", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.evaluate": [[42, 44], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "x", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.finalize": [[45, 47], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment._get_dtype_fields": [[48, 54], ["None"], "methods", ["None"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return:\n        \"\"\"", "\n", "return", "[", "(", "'x'", ",", "f'({self.domain.d},)f8'", ")", ",", "(", "'y'", ",", "'f8'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.dtype": [[55, 58], ["numpy.dtype", "environment.Environment._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.dtype", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "dtype", "(", "self", ".", "_get_dtype_fields", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.Environment.Tmax": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "Tmax", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tmax", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.NoiseObsMixin.__init__": [[73, 75], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", "NoiseObsMixin", ",", "self", ")", ".", "__init__", "(", "path", "=", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.NoiseObsMixin._get_noise_obs_fields": [[76, 83], ["None"], "methods", ["None"], ["", "def", "_get_noise_obs_fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        List of fields (strings) where noise is observed. By default [\"y\"].\n        Returns:\n\n        \"\"\"", "\n", "return", "[", "\"y\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.NoiseObsMixin._get_dtype_fields": [[84, 94], ["super()._get_dtype_fields", "environment.NoiseObsMixin._get_noise_obs_fields", "new_fields.append"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_noise_obs_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "fields", "=", "super", "(", "NoiseObsMixin", ",", "self", ")", ".", "_get_dtype_fields", "(", ")", "\n", "\n", "noise_obs_fields", "=", "self", ".", "_get_noise_obs_fields", "(", ")", "\n", "new_fields", "=", "[", "]", "\n", "for", "field", ",", "dtype", "in", "fields", ":", "\n", "            ", "if", "field", "in", "noise_obs_fields", ":", "\n", "                ", "new_fields", ".", "append", "(", "(", "f\"{field}_std\"", ",", "dtype", ")", ")", "\n", "\n", "", "", "return", "fields", "+", "new_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.NoiseObsMixin.noise_obs_mode": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "noise_obs_mode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ConstraintsMixin.__init__": [[101, 105], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", "ConstraintsMixin", ",", "self", ")", ".", "__init__", "(", "path", "=", "path", ")", "\n", "self", ".", "_num_constraints", "=", "0", "\n", "self", ".", "_lower_bound_objective", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ConstraintsMixin.initialize": [[106, 111], ["super().initialize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "info", "=", "super", "(", "ConstraintsMixin", ",", "self", ")", ".", "initialize", "(", ")", "\n", "info", "[", "'num_constraints'", "]", "=", "self", ".", "_num_constraints", "\n", "info", "[", "'lower_bound_objective'", "]", "=", "self", ".", "_lower_bound_objective", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ConstraintsMixin.num_constraints": [[112, 115], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_constraints", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_constraints", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ConstraintsMixin.lower_bound_objective": [[116, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lower_bound_objective", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_lower_bound_objective", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ConstraintsMixin._get_dtype_fields": [[120, 127], ["super()._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "fields", "=", "super", "(", "ConstraintsMixin", ",", "self", ")", ".", "_get_dtype_fields", "(", ")", "\n", "\n", "if", "self", ".", "_num_constraints", ":", "\n", "            ", "fields", "+=", "[", "(", "'s'", ",", "f\"({self._num_constraints},)f8\"", ")", "]", "\n", "\n", "", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ContextMixin.__init__": [[133, 135], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ContextMixin", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ContextMixin.get_context": [[136, 138], ["None"], "methods", ["None"], ["", "def", "get_context", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.NoiseFunction.__init__": [[30, 39], ["isinstance", "Exception", "logger.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "domain", ",", "benchmark_f", "=", "None", ")", ":", "\n", "        ", "self", ".", "_domain", "=", "domain", "\n", "self", ".", "_f", "=", "benchmark_f", "\n", "\n", "if", "not", "isinstance", "(", "domain", ",", "self", ".", "allowed_domains", ")", ":", "\n", "            ", "raise", "Exception", "(", "f\"Invalid domain {domain.__class__.__name__} for this noise function.\"", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "high", "<", "self", ".", "config", ".", "low", ":", "\n", "            ", "logger", ".", "error", "(", "\"Config environment.benchmark.noise:high high is smaller than environment.benchmark.noise:low\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.NoiseFunction.__call__": [[41, 43], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.NoiseFunction.allowed_domains": [[44, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "allowed_domains", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns: tuple of allowed domain classes.\n\n        \"\"\"", "\n", "return", "(", "DiscreteDomain", ",", "ContinuousDomain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.GaussianNoiseFunction.std": [[55, 57], ["None"], "methods", ["None"], ["    ", "def", "std", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.GaussianNoiseFunction.__call__": [[58, 60], ["numpy.random.normal", "noise.GaussianNoiseFunction.std"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std"], ["", "def", "__call__", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "normal", "(", "scale", "=", "self", ".", "std", "(", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.ExpPropValueNoise.std": [[63, 65], ["numpy.exp"], "methods", ["None"], ["    ", "def", "std", "(", "self", ",", "X", "=", "None", ",", "Y", "=", "None", ")", ":", "\n", "        ", "return", "np", ".", "exp", "(", "Y", ")", "+", "self", ".", "config", ".", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.ReluValueNoise.std": [[68, 71], ["noise.ReluValueNoise._f", "numpy.maximum"], "methods", ["None"], ["    ", "def", "std", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "Y", "=", "self", ".", "_f", "(", "X", ")", "\n", "return", "np", ".", "maximum", "(", "Y", "*", "self", ".", "config", ".", "high", ",", "self", ".", "config", ".", "low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.ReluInvValueNoise.std": [[74, 77], ["numpy.minimum", "noise.ReluInvValueNoise._f", "numpy.maximum"], "methods", ["None"], ["    ", "def", "std", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "Y", "=", "1", "-", "self", ".", "_f", "(", "X", ")", "\n", "return", "np", ".", "minimum", "(", "self", ".", "config", ".", "high", ",", "np", ".", "maximum", "(", "Y", "*", "self", ".", "config", ".", "high", ",", "self", ".", "config", ".", "low", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.TanHPropValueNoise.std": [[80, 83], ["noise.TanHPropValueNoise._f", "numpy.tanh"], "methods", ["None"], ["    ", "def", "std", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "Y", "=", "self", ".", "_f", "(", "X", ")", "\n", "return", "self", ".", "config", ".", "high", "*", "(", "np", ".", "tanh", "(", "8", "*", "(", "Y", "-", "0.6", ")", ")", "+", "1", ")", "/", "2", "+", "self", ".", "config", ".", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.TanHInvPropValueNoise.std": [[85, 88], ["noise.TanHInvPropValueNoise._f", "numpy.tanh"], "methods", ["None"], ["    ", "def", "std", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "Y", "=", "self", ".", "_f", "(", "X", ")", "\n", "return", "self", ".", "config", ".", "high", "*", "(", "2", "-", "np", ".", "tanh", "(", "8", "*", "(", "Y", "-", "0.6", ")", ")", ")", "/", "2", "+", "self", ".", "config", ".", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.ContinuousNoiseFunction.allowed_domains": [[91, 94], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "allowed_domains", "(", "self", ")", ":", "\n", "        ", "return", "(", "ContinuousDomain", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.ContinuousNoiseFunction.std": [[95, 97], ["noise.ContinuousNoiseFunction.n"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.SinNorm.n"], ["", "def", "std", "(", "self", ",", "X", "=", "None", ",", "Y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "n", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.ContinuousNoiseFunction.n": [[98, 108], ["None"], "methods", ["None"], ["", "def", "n", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Implementation of noise function. X is normalized to unit cube.\n        Args:\n            X:\n\n        Returns: Noise value at X\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.HighNoiseAroundOrigin.n": [[111, 113], ["numpy.exp", "numpy.sum"], "methods", ["None"], ["    ", "def", "n", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "(", "self", ".", "config", ".", "high", "-", "self", ".", "config", ".", "low", ")", "*", "np", ".", "exp", "(", "-", "10", "*", "np", ".", "sum", "(", "(", "X", "-", "0.5", ")", "**", "2", ")", ")", "+", "self", ".", "config", ".", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.LowNoiseAroundOrigin.n": [[116, 118], ["numpy.exp"], "methods", ["None"], ["    ", "def", "n", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "(", "self", ".", "config", ".", "high", "-", "self", ".", "config", ".", "low", ")", "*", "(", "1", "-", "np", ".", "exp", "(", "-", "10", "*", "(", "X", "-", "0.5", ")", "**", "2", ")", ")", "+", "self", ".", "config", ".", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.Sin1D.std": [[121, 123], ["numpy.sin"], "methods", ["None"], ["    ", "def", "std", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "(", "-", "np", ".", "sin", "(", "50", "*", "np", ".", "pi", "*", "X", ")", "+", "1", ")", "/", "2", "*", "(", "self", ".", "config", ".", "high", "-", "self", ".", "config", ".", "low", ")", "+", "self", ".", "config", ".", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.SinNorm.n": [[126, 130], ["numpy.atleast_2d", "numpy.linalg.norm().reshape", "numpy.linalg.norm", "numpy.sin"], "methods", ["None"], ["    ", "def", "n", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "X", "=", "np", ".", "linalg", ".", "norm", "(", "X", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "(", "-", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "X", ")", "+", "1", ")", "/", "2", "*", "(", "self", ".", "config", ".", "high", "-", "self", ".", "config", ".", "low", ")", "+", "self", ".", "config", ".", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.RandomNoise.__init__": [[136, 147], ["noise.NoiseFunction.__init__", "numpy.random.uniform().reshape", "Exception", "numpy.random.seed", "len", "len", "numpy.random.uniform", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed"], ["    ", "def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain", ")", "\n", "\n", "if", "not", "len", "(", "np", ".", "unique", "(", "self", ".", "_domain", ".", "points", ",", "axis", "=", "0", ")", ")", "==", "len", "(", "self", ".", "_domain", ".", "points", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Need unique domain points to add random noise.\"", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "self", ".", "config", ".", "seed", ")", "\n", "\n", "", "self", ".", "_rho", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "config", ".", "low", ",", "self", ".", "config", ".", "high", ",", "\n", "size", "=", "self", ".", "_domain", ".", "num_points", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "# generate uniform noise bound", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.RandomNoise.allowed_domains": [[148, 151], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "allowed_domains", "(", "self", ")", ":", "\n", "        ", "return", "(", "DiscreteDomain", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.noise.RandomNoise.std": [[152, 155], ["numpy.atleast_2d", "numpy.vstack"], "methods", ["None"], ["", "def", "std", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "return", "np", ".", "vstack", "(", "[", "self", ".", "_rho", "[", "(", "row", "==", "self", ".", "_domain", ".", "points", ")", ".", "all", "(", "axis", "=", "1", ")", "]", "for", "row", "in", "x", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.constraints.ball": [[3, 5], ["numpy.linalg.norm"], "function", ["None"], ["def", "ball", "(", "x", ")", ":", "\n", "    ", "return", "2", "*", "(", "np", ".", "linalg", ".", "norm", "(", "x", ")", "**", "2", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.FiniteLinearBandit.__init__": [[13, 29], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.ones", "numpy.random.seed", "numpy.random.multivariate_normal", "numpy.random.seed", "febo.environment.domain.DiscreteDomain", "functions.FiniteLinearBandit._get_max_value", "numpy.linalg.norm", "numpy.zeros", "numpy.eye", "numpy.maximum().reshape", "numpy.maximum", "numpy.linalg.norm", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.FiniteLinearBandit._get_max_value"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", "=", "path", ")", "\n", "self", ".", "_theta", "=", "np", ".", "ones", "(", "self", ".", "config", ".", "dimension", ")", "\n", "self", ".", "_theta", "=", "self", ".", "_theta", "/", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_theta", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "self", ".", "_domain_points", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "self", ".", "config", ".", "dimension", ")", ",", "\n", "np", ".", "eye", "(", "self", ".", "config", ".", "dimension", ")", ",", "\n", "size", "=", "self", ".", "config", ".", "num_domain_points", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", ")", "# reset to random state", "\n", "\n", "self", ".", "_domain_points", "=", "self", ".", "_domain_points", "/", "np", ".", "maximum", "(", "np", ".", "linalg", ".", "norm", "(", "self", ".", "_domain_points", ",", "axis", "=", "-", "1", ")", ",", "\n", "np", ".", "ones", "(", "self", ".", "config", ".", "num_domain_points", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "self", ".", "_domain", "=", "DiscreteDomain", "(", "self", ".", "_domain_points", ")", "\n", "self", ".", "_max_value", "=", "self", ".", "_get_max_value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.FiniteLinearBandit.name": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "\"Finite Linear Bandit\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.FiniteLinearBandit._requires_random_seed": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_requires_random_seed", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.FiniteLinearBandit.f": [[38, 40], ["numpy.dot"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "dot", "(", "x", ",", "self", ".", "_theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.FiniteLinearBandit._get_max_value": [[41, 43], ["numpy.max", "functions.FiniteLinearBandit.f"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["", "def", "_get_max_value", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "self", ".", "f", "(", "self", ".", "_domain_points", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Camelback1D.__init__": [[49, 54], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.array", "febo.environment.domain.ContinuousDomain", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "_x", "=", "np", ".", "array", "(", "[", "1.", "]", ")", "\n", "self", ".", "_max_value", "=", "1.0026469", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "[", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Camelback1D.f": [[55, 57], ["numpy.exp", "numpy.square", "numpy.square"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "exp", "(", "-", "np", ".", "square", "(", "x", "-", "1.5", ")", "/", "0.05", ")", "+", "1.98", "/", "(", "1", "+", "np", ".", "square", "(", "x", "-", "0.5", ")", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Camelback.__init__": [[63, 69], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.array", "numpy.array", "febo.environment.domain.ContinuousDomain", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "_x0", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.2", "]", ")", "\n", "self", ".", "_x0", "=", "np", ".", "array", "(", "[", "-", "0.12977758051079197", ",", "0.2632096107305229", "]", ")", "\n", "self", ".", "_max_value", "=", "1.03162842", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "[", "-", "2", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "2", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Camelback.f": [[70, 76], ["numpy.atleast_2d", "numpy.maximum"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "xx", "=", "x", "[", ":", ",", "0", "]", "\n", "yy", "=", "x", "[", ":", ",", "1", "]", "\n", "y", "=", "(", "4.", "-", "2.1", "*", "xx", "**", "2", "+", "(", "xx", "**", "4", ")", "/", "3.", ")", "*", "(", "xx", "**", "2", ")", "+", "xx", "*", "yy", "+", "(", "-", "4.", "+", "4", "*", "(", "yy", "**", "2", ")", ")", "*", "(", "yy", "**", "2", ")", "\n", "return", "np", ".", "maximum", "(", "-", "y", ",", "-", "2.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Camelmod.__init__": [[82, 87], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.array", "febo.environment.domain.ContinuousDomain", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "_x0", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", "]", ")", "\n", "self", ".", "_max_value", "=", "1.", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "[", "-", "0.5", ",", "-", "0.5", "]", ")", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Camelmod.f": [[88, 93], ["numpy.atleast_2d"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "X", ",", "Y", "=", "X", "[", ":", ",", "0", "]", ",", "X", "[", ":", ",", "1", "]", "\n", "return", "(", "(", "8", "*", "X", ")", "**", "4", "-", "16.", "*", "(", "8", "*", "X", ")", "**", "2", "+", "5", "*", "(", "8", "*", "X", ")", "+", "(", "8", "*", "Y", ")", "**", "4", "-", "16.", "*", "(", "8", "*", "Y", ")", "**", "2", "+", "5", "*", "(", "\n", "8", "*", "Y", ")", ")", "/", "-", "156.66466273", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Gaussian.__init__": [[104, 112], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.ones", "numpy.sqrt", "febo.environment.domain.ContinuousDomain", "numpy.sqrt", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "ones", "=", "np", ".", "ones", "(", "self", ".", "config", ".", "dimension", ")", "\n", "\n", "self", ".", "_dist_initial", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "1", "/", "self", ".", "config", ".", "initial_value", ")", "/", "4", ")", "\n", "self", ".", "_x0", "=", "self", ".", "_dist_initial", "*", "ones", "/", "np", ".", "sqrt", "(", "self", ".", "config", ".", "dimension", ")", "\n", "self", ".", "_max_value", "=", "1.0", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "-", "ones", ",", "ones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Gaussian._get_random_initial_point": [[113, 116], ["numpy.random.normal", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "_get_random_initial_point", "(", "self", ")", ":", "\n", "        ", "dir", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "self", ".", "config", ".", "dimension", ")", "\n", "return", "self", ".", "_dist_initial", "*", "dir", "/", "np", ".", "linalg", ".", "norm", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Gaussian.f": [[117, 121], ["numpy.atleast_2d", "numpy.exp", "numpy.sum", "numpy.square"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "Y", "=", "np", ".", "exp", "(", "-", "4", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "X", ")", ",", "axis", "=", "1", ")", ")", "\n", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Quadratic.__init__": [[127, 133], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.ones", "febo.environment.domain.ContinuousDomain", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "ones", "=", "np", ".", "ones", "(", "self", ".", "config", ".", "dimension", ")", "\n", "self", ".", "_x0", "=", "0.5", "*", "ones", "/", "np", ".", "sqrt", "(", "self", ".", "config", ".", "dimension", ")", "\n", "self", ".", "_max_value", "=", "1.0", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "-", "ones", ",", "ones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.Quadratic.f": [[134, 138], ["numpy.atleast_2d", "numpy.sum", "numpy.square"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "Y", "=", "2", "*", "np", ".", "sum", "(", "np", ".", "square", "(", "X", ")", ",", "axis", "=", "1", ")", "\n", "return", "1", "-", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.CamelbackEmbedded.__init__": [[143, 151], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.array", "febo.environment.domain.ContinuousDomain", "Exception", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "_max_value", "=", "1.03162842", "\n", "d", "=", "self", ".", "config", ".", "dimension", "\n", "if", "d", "<=", "2", ":", "\n", "            ", "raise", "Exception", "(", "\"Need dimension at least 3 to create embedded version of Camelback\"", ")", "\n", "", "self", ".", "_x0", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.2", "]", "+", "[", "0.", "]", "*", "(", "d", "-", "2", ")", ")", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "[", "-", "2", ",", "-", "1", "]", "+", "[", "-", "1", "]", "*", "(", "d", "-", "2", ")", ")", ",", "np", ".", "array", "(", "[", "2", ",", "1", "]", "+", "[", "1", "]", "*", "(", "d", "-", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.CamelbackEmbedded.f": [[152, 157], ["None"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "x", "[", "0", "]", "\n", "yy", "=", "x", "[", "1", "]", "\n", "y", "=", "(", "4.", "-", "2.1", "*", "xx", "**", "2", "+", "(", "xx", "**", "4", ")", "/", "3.", ")", "*", "(", "xx", "**", "2", ")", "+", "xx", "*", "yy", "+", "(", "-", "4.", "+", "4", "*", "(", "yy", "**", "2", ")", ")", "*", "(", "yy", "**", "2", ")", "\n", "return", "-", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.LinSin1D.__init__": [[163, 168], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.array", "febo.environment.domain.ContinuousDomain", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "_x", "=", "np", ".", "array", "(", "[", "15", "]", ")", "\n", "self", ".", "_max_value", "=", "1.25375424", "# determined using scipy.minimze", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "[", "-", "20", "]", ")", ",", "np", ".", "array", "(", "[", "20", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.LinSin1D.f": [[169, 171], ["numpy.sin"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "10.", "+", "0.05", "*", "X", "+", "np", ".", "sin", "(", "X", "-", "5", ")", "/", "(", "X", "-", "5", ")", "-", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.CosUnique1D.__init__": [[177, 182], ["benchmarks.BenchmarkEnvironment.__init__", "numpy.array", "febo.environment.domain.ContinuousDomain", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "_x", "=", "np", ".", "array", "(", "[", "0.1", "]", ")", "\n", "self", ".", "_max_value", "=", "1.1", "# at 0.5", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "[", "0.", "]", ")", ",", "np", ".", "array", "(", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.functions.CosUnique1D.f": [[183, 185], ["numpy.abs", "numpy.cos"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "-", "np", ".", "cos", "(", "10", "*", "np", ".", "pi", "*", "X", ")", "+", "0.1", "-", "0.1", "*", "np", ".", "abs", "(", "X", "-", "0.5", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.subspace.AugmentedDimensionMixin.__init__": [[16, 36], ["super().__init__", "numpy.concatenate", "numpy.concatenate", "numpy.arange", "numpy.argsort", "febo.environment.ContinuousDomain", "numpy.concatenate", "isinstance", "Exception", "numpy.random.permutation", "numpy.ones", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "_domain", ",", "ContinuousDomain", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Can only augment a ContinuousDomain!\"", ")", "\n", "", "self", ".", "_orig_domain", "=", "self", ".", "_domain", "\n", "\n", "l", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_domain", ".", "l", ",", "-", "np", ".", "ones", "(", "self", ".", "config", ".", "aug_d", ")", ")", ")", "\n", "u", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_domain", ".", "u", ",", "np", ".", "ones", "(", "self", ".", "config", ".", "aug_d", ")", ")", ")", "\n", "total_d", "=", "self", ".", "_domain", ".", "d", "+", "self", ".", "config", ".", "aug_d", "\n", "\n", "# define permutation", "\n", "self", ".", "_per", "=", "np", ".", "arange", "(", "total_d", ")", "\n", "if", "self", ".", "config", ".", "random_permutation", ":", "\n", "            ", "self", ".", "_per", "=", "np", ".", "random", ".", "permutation", "(", "total_d", ")", "\n", "# compute inverse permutation", "\n", "", "self", ".", "_inv_per", "=", "np", ".", "argsort", "(", "self", ".", "_per", ")", "\n", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "l", "[", "self", ".", "_per", "]", ",", "u", "[", "self", ".", "_per", "]", ")", "\n", "self", ".", "_x0", "=", "np", ".", "concatenate", "(", "(", "self", ".", "_x0", ",", "np", ".", "zeros", "(", "self", ".", "config", ".", "aug_d", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.subspace.AugmentedDimensionMixin.f": [[37, 41], ["super().f"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["", "def", "f", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "X", "[", "self", ".", "_inv_per", "]", "# undo permutation", "\n", "X", "=", "X", "[", ":", "self", ".", "_orig_domain", ".", "d", "]", "# take active dimensions", "\n", "return", "super", "(", "AugmentedDimensionMixin", ",", "self", ")", ".", "f", "(", "X", ")", "# return original function", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.HpolibBenchmark.__init__": [[13, 24], ["febo.environment.benchmarks.BenchmarkEnvironment.__init__", "bench.get_meta_information", "numpy.array", "numpy.array", "febo.environment.ContinuousDomain"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "bench", ",", "path", "=", "None", ",", "min_value", "=", "-", "np", ".", "inf", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ")", "\n", "self", ".", "_bench", "=", "bench", "\n", "info", "=", "bench", ".", "get_meta_information", "(", ")", "\n", "self", ".", "_max_value", "=", "-", "info", "[", "'f_opt'", "]", "\n", "\n", "l", "=", "np", ".", "array", "(", "[", "b", "[", "0", "]", "for", "b", "in", "info", "[", "'bounds'", "]", "]", ")", "\n", "u", "=", "np", ".", "array", "(", "[", "b", "[", "1", "]", "for", "b", "in", "info", "[", "'bounds'", "]", "]", ")", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "l", ",", "u", ")", "\n", "self", ".", "_x0", "=", "l", "+", "0.1", "*", "self", ".", "_domain", ".", "range", "\n", "self", ".", "_min_value", "=", "min_value", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.HpolibBenchmark.f": [[25, 27], ["numpy.maximum", "hpolib.HpolibBenchmark._bench"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "maximum", "(", "-", "self", ".", "_bench", "(", "x", ")", ",", "self", ".", "_min_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Branin.__init__": [[32, 34], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.Branin"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Branin", "(", ")", ",", "path", ",", "min_value", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Hartmann3.__init__": [[39, 41], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.Hartmann3"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Hartmann3", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Hartmann6.__init__": [[46, 51], ["hpolib.HpolibBenchmark.__init__", "numpy.array", "hpolib.benchmarks.synthetic_functions.Hartmann6"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Hartmann6", "(", ")", ",", "path", ")", "\n", "self", ".", "_x0", "=", "np", ".", "array", "(", "[", "0.1335990371483741", ",", "0.2743781816448671", ",", "0.2879962344461537", ",", "0.10242147970254536", ",", "0.3959197145814795", ",", "0.5982863622683936", "]", ")", "\n", "self", ".", "_old_max_value", "=", "self", ".", "_max_value", "\n", "self", ".", "_max_value", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Hartmann6.f": [[52, 54], ["hpolib.HpolibBenchmark.f"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["", "def", "f", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "f", "(", "X", ")", "/", "self", ".", "_old_max_value", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Camelback.__init__": [[59, 63], ["hpolib.HpolibBenchmark.__init__", "febo.environment.ContinuousDomain", "hpolib.benchmarks.synthetic_functions.Camelback", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Camelback", "(", ")", ",", "path", ")", "\n", "# overwrite domain to get a reasonable range of function values", "\n", "self", ".", "_domain", "=", "ContinuousDomain", "(", "np", ".", "array", "(", "[", "-", "2", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "2", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Forrester.__init__": [[68, 70], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.Forrester"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Forrester", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Bohachevsky.__init__": [[75, 77], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.Bohachevsky"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Bohachevsky", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.GoldsteinPrice.__init__": [[82, 84], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.GoldsteinPrice"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "GoldsteinPrice", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Levy.__init__": [[89, 91], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.Levy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Levy", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Rosenbrock.__init__": [[96, 98], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.Rosenbrock"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "Rosenbrock", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Rosenbrock5D.__init__": [[103, 105], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.rosenbrock.Rosenbrock5D"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "rosenbrock", ".", "Rosenbrock5D", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Rosenbrock10D.__init__": [[110, 112], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.rosenbrock.Rosenbrock10D"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "rosenbrock", ".", "Rosenbrock10D", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.Rosenbrock20D.__init__": [[117, 119], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.rosenbrock.Rosenbrock20D"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "rosenbrock", ".", "Rosenbrock20D", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.SinOne.__init__": [[124, 126], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.SinOne"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "SinOne", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.hpolib.SinTwo.__init__": [[131, 133], ["hpolib.HpolibBenchmark.__init__", "hpolib.benchmarks.synthetic_functions.SinTwo"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "synthetic_functions", ".", "SinTwo", "(", ")", ",", "path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.__init__": [[40, 50], ["febo.environment.environment.NoiseObsMixin.__init__", "benchmarks.BenchmarkEnvironment._init_seed", "len", "int"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._init_seed"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", "=", "path", ")", "\n", "self", ".", "_x", "=", "None", "# current parameter set in the environment", "\n", "self", ".", "_max_value", "=", "None", "# max value achievable", "\n", "self", ".", "_s", "=", "self", ".", "config", ".", "constraints", "\n", "self", ".", "_lower_bound_objective", "=", "self", ".", "config", ".", "lower_bound_objective", "\n", "self", ".", "_num_constraints", "=", "len", "(", "self", ".", "_s", ")", "+", "int", "(", "self", ".", "_lower_bound_objective", "is", "not", "None", ")", "\n", "self", ".", "_env_parameters", "=", "{", "}", "\n", "self", ".", "_init_seed", "(", ")", "\n", "self", ".", "_x0", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.initialize": [[52, 70], ["benchmarks.BenchmarkEnvironment._init_noise_function", "super().initialize", "logger.info", "benchmarks.BenchmarkEnvironment._get_random_initial_point"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._init_noise_function", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_random_initial_point"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_noise_function", "(", ")", "\n", "env_info", "=", "super", "(", ")", ".", "initialize", "(", ")", "\n", "if", "self", ".", "config", ".", "noise_obs_mode", "==", "NoiseObsMode", ".", "full", ":", "\n", "            ", "env_info", "[", "'noise_function'", "]", "=", "self", ".", "_noise_function", ".", "std", "\n", "\n", "", "env_info", "[", "'noise_obs_mode'", "]", "=", "self", ".", "config", ".", "noise_obs_mode", "\n", "\n", "if", "self", ".", "x0", "is", "None", ":", "\n", "            ", "self", ".", "_x0", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "range", "/", "2", "\n", "\n", "", "if", "self", ".", "config", ".", "random_x0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Using random initial point.\"", ")", "\n", "self", ".", "_x0", "=", "self", ".", "_get_random_initial_point", "(", ")", "\n", "\n", "", "env_info", "[", "'x0'", "]", "=", "self", ".", "x0", "\n", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_random_initial_point": [[71, 79], ["logger.info", "numpy.random.uniform", "benchmarks.BenchmarkEnvironment.f", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["", "def", "_get_random_initial_point", "(", "self", ")", ":", "\n", "        ", "x0", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "range", "*", "np", ".", "random", ".", "uniform", "(", "size", "=", "self", ".", "domain", ".", "d", ")", "\n", "if", "not", "self", ".", "config", ".", "random_x0_min_value", "is", "None", ":", "\n", "            ", "while", "self", ".", "f", "(", "x0", ")", "<", "self", ".", "config", ".", "random_x0_min_value", ":", "\n", "                ", "x0", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "range", "*", "np", ".", "random", ".", "uniform", "(", "size", "=", "self", ".", "domain", ".", "d", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Found initial feasible point.\"", ")", "\n", "", "return", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_noise_obs_fields": [[80, 85], ["None"], "methods", ["None"], ["", "def", "_get_noise_obs_fields", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "noise_obs_mode", "in", "[", "NoiseObsMode", ".", "full", ",", "NoiseObsMode", ".", "evaluation", "]", ":", "\n", "            ", "return", "[", "\"y\"", ",", "\"s\"", "]", "\n", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields": [[86, 88], ["super()._get_dtype_fields"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._get_dtype_fields"], ["", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "_get_dtype_fields", "(", ")", "+", "[", "(", "'y_exact'", ",", "'f8'", ")", ",", "(", "'y_max'", ",", "'f8'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.evaluate": [[89, 115], ["numpy.empty", "isinstance", "enumerate", "benchmarks.BenchmarkEnvironment._noise_function", "numpy.asscalar", "numpy.asscalar", "s", "benchmarks.BenchmarkEnvironment._noise_function", "isinstance", "numpy.asscalar", "benchmarks.BenchmarkEnvironment.f", "benchmarks.BenchmarkEnvironment._noise_function.std", "benchmarks.BenchmarkEnvironment._noise_function.std"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std"], ["", "def", "evaluate", "(", "self", ",", "x", "=", "None", ")", ":", "\n", "        ", "if", "x", "is", "not", "None", ":", "\n", "            ", "self", ".", "_x", "=", "x", "\n", "\n", "", "evaluation", "=", "np", ".", "empty", "(", "shape", "=", "(", ")", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "evaluation", "[", "'x'", "]", "=", "self", ".", "_x", "\n", "\n", "evaluation", "[", "'y_exact'", "]", "=", "np", ".", "asscalar", "(", "self", ".", "f", "(", "self", ".", "_x", ")", ")", "*", "self", ".", "config", ".", "scale", "+", "self", ".", "config", ".", "bias", "\n", "evaluation", "[", "'y_max'", "]", "=", "self", ".", "max_value", "\n", "\n", "# if we use Gaussian Noise, we can query the std", "\n", "if", "isinstance", "(", "self", ".", "_noise_function", ",", "GaussianNoiseFunction", ")", ":", "\n", "# if noise is observed, add to evaluation", "\n", "            ", "if", "self", ".", "config", ".", "noise_obs_mode", "in", "[", "NoiseObsMode", ".", "evaluation", ",", "NoiseObsMode", ".", "full", "]", ":", "\n", "                ", "evaluation", "[", "'y_std'", "]", "=", "np", ".", "asscalar", "(", "self", ".", "_noise_function", ".", "std", "(", "self", ".", "_x", ")", ")", "\n", "\n", "", "", "evaluation", "[", "'y'", "]", "=", "evaluation", "[", "'y_exact'", "]", "+", "self", ".", "_noise_function", "(", "self", ".", "_x", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "_s", ")", ":", "\n", "            ", "evaluation", "[", "'s'", "]", "[", "i", "]", "=", "s", "(", "self", ".", "_x", ")", "+", "self", ".", "_noise_function", "(", "self", ".", "_x", ")", "\n", "if", "isinstance", "(", "self", ".", "_noise_function", ",", "GaussianNoiseFunction", ")", "and", "self", ".", "config", ".", "noise_obs_mode", "in", "[", "NoiseObsMode", ".", "evaluation", ",", "NoiseObsMode", ".", "full", "]", ":", "\n", "                ", "evaluation", "[", "'s_std'", "]", "[", "i", "]", "=", "np", ".", "asscalar", "(", "self", ".", "_noise_function", ".", "std", "(", "self", ".", "_x", ")", ")", "\n", "", "", "if", "self", ".", "_lower_bound_objective", "is", "not", "None", ":", "\n", "            ", "evaluation", "[", "'s'", "]", "[", "-", "1", "]", "=", "-", "(", "evaluation", "[", "'y_exact'", "]", "-", "self", ".", "lower_bound_objective", ")", "\n", "\n", "", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f": [[116, 126], ["None"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Function to be implemented by actual benchmark.\n        Args:\n            x:\n\n        Returns:\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.x0": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x0", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_x0", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._init_noise_function": [[131, 157], ["benchmarks.BenchmarkEnvironment._noise_function_cls", "isinstance", "isinstance", "isinstance", "type", "issubclass", "numpy.atleast_2d", "febo.utils.locate", "Exception", "numpy.ones", "febo.utils.locate."], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate"], ["", "def", "_init_noise_function", "(", "self", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "self", ".", "config", ".", "noise_function", ":", "\n", "\n", "# if self.config.noise_function is a number", "\n", "            ", "if", "isinstance", "(", "self", ".", "config", ".", "noise_function", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "                ", "noise_var", "=", "self", ".", "config", ".", "noise_function", "\n", "\n", "# define noise _function", "\n", "def", "noise_function", "(", "x", ")", ":", "\n", "                    ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "return", "noise_var", "*", "np", ".", "ones", "(", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "", "", "elif", "isinstance", "(", "self", ".", "config", ".", "noise_function", ",", "str", ")", ":", "\n", "                ", "noise_function", "=", "locate", "(", "self", ".", "config", ".", "noise_function", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Invalid setting for 'noise_function'.\"", ")", "\n", "# if noise_function is a function, assume it provides std for GaussianNoiseFunction", "\n", "", "if", "isinstance", "(", "noise_function", ",", "FunctionType", ")", ":", "\n", "                ", "self", ".", "_noise_function_cls", "=", "type", "(", "f\"__{noise_function.__name__}_Noise\"", ",", "(", "GaussianNoiseFunction", ",", ")", ",", "\n", "{", "'std'", ":", "lambda", "self", ",", "x", ":", "noise_function", "(", "x", ")", "}", ")", "\n", "", "elif", "issubclass", "(", "noise_function", ",", "NoiseFunction", ")", ":", "\n", "                ", "self", ".", "_noise_function_cls", "=", "noise_function", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_noise_function_cls", "=", "NoiseFunction", "\n", "\n", "", "self", ".", "_noise_function", "=", "self", ".", "_noise_function_cls", "(", "self", ".", "_domain", ",", "self", ".", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.max_value": [[158, 164], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_value", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_max_value", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "self", ".", "_max_value", "*", "self", ".", "config", ".", "scale", "+", "self", ".", "config", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed": [[165, 171], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "seed", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Provides a random seed for random generation of environments.\n        \"\"\"", "\n", "return", "self", ".", "_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._requires_random_seed": [[172, 178], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_requires_random_seed", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Overwrite this property and set to True to use random seed.\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment._init_seed": [[179, 219], ["os.path.join", "logger.warning", "os.path.exists", "logger.info", "numpy.random.randint", "os.path.join", "logger.warning", "open", "yaml.load", "logger.info", "open", "yaml.dump", "logger.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "_init_seed", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize self.seed. First checks if self._path is provided, and if a file 'environment.yaml' exists in this path. If that file contains a dict {'seed', some_seed} this is used as seed. Else the the value from self.config.seed is taken, if this is None, a random integer is generated as seed. This seed, either randomly generated or from self.config.seed is saved in 'environment.yaml'.\n        \"\"\"", "\n", "# only if enviornment requires a random seed", "\n", "if", "not", "self", ".", "_requires_random_seed", ":", "\n", "            ", "return", "\n", "\n", "# initialize seed", "\n", "", "self", ".", "_seed", "=", "None", "\n", "\n", "# try to read seed from file", "\n", "if", "self", ".", "_path", ":", "\n", "            ", "env_config_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_path", ",", "'environment.yaml'", ")", "\n", "if", "self", ".", "_path", "and", "os", ".", "path", ".", "exists", "(", "env_config_path", ")", ":", "\n", "                ", "with", "open", "(", "env_config_path", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "data", "=", "yaml", ".", "load", "(", "f", ")", "\n", "self", ".", "_seed", "=", "data", "[", "'seed'", "]", "\n", "logger", ".", "info", "(", "\"Using random seed from environment.yaml.\"", ")", "\n", "", "", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "'Path not provided, cannot load/save seed.'", ")", "\n", "\n", "# if seed was not loaded from file", "\n", "", "if", "self", ".", "_seed", "is", "None", ":", "\n", "            ", "self", ".", "_seed", "=", "self", ".", "config", ".", "seed", "\n", "# no seed given in configuration, pick a random one", "\n", "if", "self", ".", "_seed", "is", "None", ":", "\n", "                ", "logger", ".", "info", "(", "\"No random seed provided in config, choosing a random random seed.\"", ")", "\n", "self", ".", "_seed", "=", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", "\n", "\n", "# save seed", "\n", "", "if", "self", ".", "_path", ":", "\n", "                ", "env_config_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_path", ",", "'environment.yaml'", ")", "\n", "data", "=", "{", "'seed'", ":", "self", ".", "_seed", "}", "\n", "with", "open", "(", "env_config_path", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "yaml", ".", "dump", "(", "data", ",", "f", ")", "\n", "logger", ".", "info", "(", "\"Saved random seed to environment.yaml.\"", ")", "\n", "", "", "", "elif", "self", ".", "config", ".", "seed", "is", "not", "None", "and", "self", ".", "_seed", "!=", "self", ".", "config", ".", "seed", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Seed from saved environment file is different than seed in config. Using seed from environment file.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.controller.Controller.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_completed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.controller.Controller.initialize": [[15, 17], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.controller.Controller.run": [[18, 20], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.controller.Controller.finalize": [[21, 23], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.controller.Controller.completed": [[24, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "completed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_completed", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.plotting.PlottingMixin.finalize": [[26, 38], ["super().finalize", "febo.utils.locate", "plot.", "plot.plot", "logger.error", "logger.info", "str", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.plots.plot.Plot.plot", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["    ", "def", "finalize", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "res", "=", "super", "(", ")", ".", "finalize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "plot_cls", "in", "self", ".", "config", ".", "plots", ":", "\n", "            ", "try", ":", "\n", "                ", "plot", "=", "locate", "(", "plot_cls", ")", "\n", "plot", "=", "plot", "(", "self", ".", "experiment", ")", "\n", "plot", ".", "plot", "(", "show", "=", "False", ",", "group_id", "=", "self", ".", "group_id", ",", "run_id", "=", "self", ".", "run_id", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f'Error {str(e)} while plotting {plot_cls}'", ")", "\n", "logger", ".", "info", "(", "f\"Here is the stack trace:\\n{traceback.format_exc()} \"", ")", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController.__init__": [[18, 34], ["controller.Controller.__init__", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SimpleController", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "experiment", "=", "kwargs", ".", "get", "(", "\"experiment\"", ")", "\n", "self", ".", "algorithm", "=", "kwargs", ".", "get", "(", "\"algorithm\"", ")", "\n", "self", ".", "environment", "=", "kwargs", ".", "get", "(", "\"environment\"", ")", "\n", "self", ".", "dbase", "=", "kwargs", ".", "get", "(", "\"dbase\"", ",", "None", ")", "\n", "self", ".", "dset", "=", "None", "\n", "\n", "\n", "self", ".", "run_id", "=", "kwargs", ".", "get", "(", "\"run_id\"", ",", "None", ")", "\n", "self", ".", "group_id", "=", "kwargs", ".", "get", "(", "\"group_id\"", ",", "None", ")", "\n", "\n", "self", ".", "T", "=", "self", ".", "config", ".", "T", "\n", "self", ".", "_exit", "=", "False", "\n", "self", ".", "_data", "=", "[", "]", "# only used if self.dset is None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController.initialize": [[36, 98], ["logger.info", "simple.SimpleController.algorithm.initialize", "numpy.dtype", "numpy.dtype", "febo.utils.join_dtypes", "logger.info", "simple.SimpleController.environment.initialize", "simple.SimpleController.items", "logger.info", "hasattr", "simple.SimpleController.dbase.get_dset", "simple.SimpleController.dbase.get_group", "len", "simple.SimpleController.environment.dtype.fields.items", "len", "logger.info", "simple.SimpleController.algorithm.add_data"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.dtype", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.dtype", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_dtypes", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.get_dset", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.get_group", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data"], ["", "def", "initialize", "(", "self", ",", "initialize_environment", "=", "True", ",", "algo_kwargs", "=", "None", ",", "run_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "run_id", "=", "run_id", "\n", "self", ".", "_completed", "=", "False", "\n", "\n", "if", "initialize_environment", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Initializing environment: {self.environment.name}.\"", ")", "\n", "# initialize environment and get initial measurement", "\n", "env_info", "=", "self", ".", "environment", ".", "initialize", "(", ")", "\n", "# merge env_info and algo_kwargs. give priority to algo_kwargs", "\n", "if", "algo_kwargs", "is", "None", ":", "\n", "                ", "algo_kwargs", "=", "{", "}", "\n", "", "for", "k", ",", "v", "in", "env_info", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "k", "in", "algo_kwargs", ":", "\n", "                    ", "algo_kwargs", "[", "k", "]", "=", "v", "\n", "\n", "# check if environment provides Tmax", "\n", "", "", "", "if", "not", "self", ".", "environment", ".", "Tmax", "is", "None", ":", "\n", "            ", "self", ".", "T", "=", "self", ".", "environment", ".", "Tmax", "\n", "logger", ".", "info", "(", "f\"Setting T = Tmax = {self.T}.\"", ")", "\n", "# initialize algorithm", "\n", "", "logger", ".", "info", "(", "f\"Initializing algorithm: {self.algorithm.name}.\"", ")", "\n", "self", ".", "algorithm", ".", "initialize", "(", "**", "algo_kwargs", ")", "\n", "\n", "best_predicted_fields", "=", "[", "]", "\n", "if", "self", ".", "config", ".", "best_predicted_every", ">", "0", ":", "\n", "# add all fields from environment.dtype except for 'x'", "\n", "            ", "best_predicted_fields", "+=", "[", "(", "f'{field}_bp'", ",", "d", "[", "0", "]", ")", "for", "field", ",", "d", "in", "self", ".", "environment", ".", "dtype", ".", "fields", ".", "items", "(", ")", "if", "not", "field", "in", "(", "'y_max'", ",", ")", "]", "\n", "if", "hasattr", "(", "self", ".", "algorithm", ",", "'model'", ")", ":", "\n", "                ", "best_predicted_fields", "+=", "[", "(", "'y_model_bp'", ",", "'f8'", ")", ",", "(", "'y_std_model_bp'", ",", "'f8'", ")", "]", "\n", "\n", "", "", "self", ".", "_best_predicted_dtype", "=", "np", ".", "dtype", "(", "best_predicted_fields", ")", "\n", "self", ".", "_time_dtype", "=", "np", ".", "dtype", "(", "[", "(", "'time_acq'", ",", "'f'", ")", ",", "(", "'time_data'", ",", "'f'", ")", "]", ")", "\n", "self", ".", "evaluation_dtype", "=", "join_dtypes", "(", "self", ".", "algorithm", ".", "dtype", ",", "self", ".", "environment", ".", "dtype", ",", "self", ".", "_best_predicted_dtype", ",", "self", ".", "_time_dtype", ")", "\n", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# initialize dataset", "\n", "if", "not", "self", ".", "dbase", "is", "None", ":", "\n", "            ", "self", ".", "dset", "=", "self", ".", "dbase", ".", "get_dset", "(", "group", "=", "self", ".", "group_id", ",", "id", "=", "self", ".", "run_id", ",", "dtype", "=", "self", ".", "evaluation_dtype", ")", "\n", "self", ".", "run_id", "=", "self", ".", "dset", ".", "id", "\n", "\n", "group", "=", "self", ".", "dbase", ".", "get_group", "(", "self", ".", "group_id", ")", "\n", "group", ".", "attrs", "[", "'environment'", "]", "=", "self", ".", "environment", ".", "name", "\n", "group", ".", "attrs", "[", "'algorithm'", "]", "=", "self", ".", "algorithm", ".", "name", "\n", "\n", "# load existing data", "\n", "if", "len", "(", "self", ".", "dset", ".", "data", ")", "==", "self", ".", "T", ":", "\n", "                ", "self", ".", "t", "=", "self", ".", "T", "\n", "self", ".", "_completed", "=", "True", "\n", "\n", "", "elif", "len", "(", "self", ".", "dset", ".", "data", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Loading existing data into algorithm.\"", ")", "\n", "for", "evaluation", "in", "self", ".", "dset", ".", "data", ":", "\n", "                    ", "self", ".", "algorithm", ".", "add_data", "(", "evaluation", ")", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "", "", "", "self", ".", "_data", "=", "[", "]", "# only used if self.dset is None", "\n", "self", ".", "_exit", "=", "(", "self", ".", "t", ">=", "self", ".", "T", ")", "\n", "\n", "# set experiment_info data on algorithm", "\n", "self", ".", "algorithm", ".", "experiment_info", "[", "\"run_id\"", "]", "=", "self", ".", "run_id", "\n", "self", ".", "algorithm", ".", "experiment_info", "[", "\"group_id\"", "]", "=", "self", ".", "group_id", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController.run": [[100, 105], ["logger.info", "simple.SimpleController._run_step"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._run_step"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Starting optimization: {self.algorithm.name}\"", ")", "\n", "# interaction loop", "\n", "while", "not", "self", ".", "_exit", ":", "\n", "            ", "self", ".", "_run_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController.finalize": [[107, 123], ["logger.info", "simple.SimpleController.algorithm.finalize", "simple.SimpleController.dset.adjust_size", "logger.info", "simple.SimpleController.environment.finalize", "logger.error", "str"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.adjust_size", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize"], ["", "", "def", "finalize", "(", "self", ",", "finalize_environment", "=", "True", ")", ":", "\n", "# finalize environment, but make sure we don't crash here, as we still need to close files in the controller", "\n", "\n", "        ", "if", "finalize_environment", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "info", "(", "\"Finalizing environment...\"", ")", "\n", "self", ".", "environment", ".", "finalize", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"The following error occurred during finalizing the environment: %s\"", "%", "str", "(", "e", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "f\"Finalizing: {self.algorithm.name}\"", ")", "\n", "\n", "if", "not", "self", ".", "dset", "is", "None", ":", "\n", "            ", "self", ".", "dset", ".", "adjust_size", "(", ")", "\n", "\n", "", "return", "self", ".", "algorithm", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._handle_exception": [[124, 126], ["None"], "methods", ["None"], ["", "def", "_handle_exception", "(", "self", ",", "e", ")", ":", "\n", "        ", "raise", "e", "# by default, just raise the exception", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._run_step": [[127, 148], ["logger.debug", "simple.SimpleController._run_interaction", "logger.info", "simple.SimpleController._evaluate_best_predicted", "simple.SimpleController.dset.add", "simple.SimpleController._data.append", "simple.SimpleController._handle_exception"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._run_interaction", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._evaluate_best_predicted", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._handle_exception"], ["", "def", "_run_step", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Starting iteration %s\"", "%", "self", ".", "t", ")", "\n", "try", ":", "\n", "            ", "evaluation", "=", "self", ".", "_run_interaction", "(", ")", "\n", "if", "self", ".", "config", ".", "best_predicted_every", ">", "0", ":", "\n", "                ", "self", ".", "_evaluate_best_predicted", "(", "evaluation", ")", "\n", "\n", "# record data", "\n", "", "if", "not", "self", ".", "dset", "is", "None", ":", "\n", "                ", "self", ".", "dset", ".", "add", "(", "evaluation", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_data", ".", "append", "(", "evaluation", ")", "# if no dset is provided, manually record data", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "", "except", "(", "Exception", ",", "KeyboardInterrupt", ")", "as", "e", ":", "\n", "            ", "self", ".", "_handle_exception", "(", "e", ")", "\n", "\n", "", "if", "self", ".", "algorithm", ".", "exit", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Algorithm terminated.\"", ")", "\n", "\n", "", "self", ".", "_exit", "=", "(", "self", ".", "t", ">=", "self", ".", "T", ")", "or", "self", ".", "algorithm", ".", "exit", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._run_interaction": [[149, 182], ["isinstance", "simple.SimpleController.environment.evaluate", "febo.utils.join_dtype_arrays().view", "time.time.time", "simple.SimpleController.algorithm.add_data", "logger.debug", "logger.debug", "simple.SimpleController.environment.get_context", "time.time.time", "simple.SimpleController.algorithm.next", "time.time.time", "simple.SimpleController.algorithm.next", "time.time.time", "time.time.time", "time.time.time", "febo.utils.join_dtype_arrays"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.environment.ContextMixin.get_context", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_dtype_arrays"], ["", "def", "_run_interaction", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "environment", ",", "ContextMixin", ")", ":", "\n", "# algorithm call with context", "\n", "            ", "context", "=", "self", ".", "environment", ".", "get_context", "(", ")", "\n", "start", "=", "time", "(", ")", "\n", "x", ",", "additional_data", "=", "self", ".", "algorithm", ".", "next", "(", "context", ")", "\n", "time_acq", "=", "time", "(", ")", "-", "start", "\n", "", "else", ":", "\n", "# call algorithm without context", "\n", "            ", "start", "=", "time", "(", ")", "\n", "x", ",", "additional_data", "=", "self", ".", "algorithm", ".", "next", "(", ")", "\n", "time_acq", "=", "time", "(", ")", "-", "start", "\n", "# logger.info(f\"target from algorithm: {evaluation.x_target}\")  # todo denormalize", "\n", "\n", "", "env_evaluation", "=", "self", ".", "environment", ".", "evaluate", "(", "x", ")", "\n", "\n", "evaluation", "=", "join_dtype_arrays", "(", "env_evaluation", ",", "additional_data", ",", "self", ".", "evaluation_dtype", ")", ".", "view", "(", "np", ".", "recarray", ")", "\n", "\n", "start", "=", "time", "(", ")", "\n", "self", ".", "algorithm", ".", "add_data", "(", "evaluation", ")", "\n", "time_data", "=", "time", "(", ")", "-", "start", "\n", "\n", "evaluation", "[", "'time_acq'", "]", "=", "time_acq", "\n", "evaluation", "[", "'time_data'", "]", "=", "time_data", "\n", "\n", "# if self.t > 5:", "\n", "#     self.algorithm.optimize_model()", "\n", "\n", "logger", ".", "debug", "(", "f\"Objective value {evaluation.y}.\"", ")", "\n", "# logger.info(f\"safety constraints {evaluation.s}\")", "\n", "logger", ".", "debug", "(", "f\"Completed step {self.t}.\"", ")", "\n", "\n", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._evaluate_best_predicted": [[183, 200], ["hasattr", "simple.SimpleController.algorithm.best_predicted", "logger.debug", "simple.SimpleController._evaluate_best_predicted_environment", "simple.SimpleController.algorithm.model.mean_var", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.subdomainbo.subdomainbo.SubDomainBO.best_predicted", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._evaluate_best_predicted_environment", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "_evaluate_best_predicted", "(", "self", ",", "evaluation", ",", "**", "add_env_kwargs", ")", ":", "\n", "        ", "if", "self", ".", "t", "%", "self", ".", "config", ".", "best_predicted_every", "==", "0", ":", "\n", "            ", "best_predicted_x", "=", "self", ".", "algorithm", ".", "best_predicted", "(", ")", "\n", "logger", ".", "debug", "(", "f\"Calculating the best predicted point at: {best_predicted_x}\"", ")", "\n", "self", ".", "_best_predicted_eval", "=", "self", ".", "_evaluate_best_predicted_environment", "(", "best_predicted_x", ",", "**", "add_env_kwargs", ")", "\n", "\n", "# copy values from environment evaluation at x_best_predicted to evaluation", "\n", "", "for", "field", "in", "self", ".", "_best_predicted_eval", ".", "dtype", ".", "fields", ":", "\n", "            ", "bp_field_name", "=", "f'{field}_bp'", "\n", "if", "bp_field_name", "in", "self", ".", "evaluation_dtype", ".", "fields", ":", "\n", "                    ", "evaluation", "[", "bp_field_name", "]", "=", "self", ".", "_best_predicted_eval", "[", "field", "]", "\n", "\n", "# if algorithm uses a model, also evalute the model at best_predicted_x", "\n", "", "", "if", "hasattr", "(", "self", ".", "algorithm", ",", "'model'", ")", ":", "\n", "            ", "m", ",", "v", "=", "self", ".", "algorithm", ".", "model", ".", "mean_var", "(", "evaluation", "[", "'x_bp'", "]", ")", "\n", "evaluation", "[", "'y_model_bp'", "]", "=", "m", "\n", "evaluation", "[", "'y_std_model_bp'", "]", "=", "np", ".", "sqrt", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.simple.SimpleController._evaluate_best_predicted_environment": [[201, 203], ["simple.SimpleController.environment.evaluate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate"], ["", "", "def", "_evaluate_best_predicted_environment", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "environment", ".", "evaluate", "(", "x", ",", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.remote.RemoteController.__init__": [[15, 17], ["febo.controller.SimpleController.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RemoteController", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.remote.RemoteController.initialize": [[19, 36], ["kwargs.get", "super().initialize", "febo.utils.config.config_manager.get_config_as_dict", "remote.RemoteController.dset.adjust_size", "remote.RemoteController.dbase.dset_exists", "Exception"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.get_config_as_dict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.adjust_size", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.dset_exists"], ["", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# first check if data table for given run_id exists already", "\n", "# we don't allow this for now", "\n", "        ", "run_id", "=", "kwargs", ".", "get", "(", "'run_id'", ",", "None", ")", "\n", "self", ".", "_dset_exists", "=", "not", "run_id", "is", "None", "and", "self", ".", "dbase", ".", "dset_exists", "(", "group", "=", "self", ".", "group_id", ",", "id", "=", "run_id", ")", "\n", "\n", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_initialize_kwargs", "=", "kwargs", "\n", "self", ".", "_config", "=", "config_manager", ".", "get_config_as_dict", "(", ")", "\n", "\n", "# check if we have a dbase object", "\n", "if", "self", ".", "dbase", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Need database for remote controller.\"", ")", "\n", "\n", "", "self", ".", "dset", ".", "adjust_size", "(", ")", "\n", "self", ".", "run_id", "=", "self", ".", "dset", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.remote.RemoteController.run": [[37, 44], ["logger.warning", "logger.info", "int", "run_simple_controller.delay", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_dset_exists", ":", "\n", "            ", "logger", ".", "warning", "(", "\"dset already exists, not submitting.\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Starting a remote controller using ceramo.\"", ")", "\n", "seed", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ",", "dtype", "=", "np", ".", "uint32", ")", ")", "\n", "run_simple_controller", ".", "delay", "(", "self", ".", "_config", ",", "self", ".", "experiment", ".", "name", ",", "self", ".", "experiment", ".", "timestamp", ",", "self", ".", "run_id", ",", "self", ".", "group_id", ",", "self", ".", "_initialize_kwargs", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.remote.RemoteController.finalize": [[45, 47], ["super().finalize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize"], ["", "", "def", "finalize", "(", "self", ",", "finalize_environment", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "finalize", "(", "finalize_environment", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.__init__": [[12, 17], ["controller.Controller.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parts", ",", "fixed_environment", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiController", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "parts", "=", "parts", "\n", "self", ".", "_fixed_environment", "=", "fixed_environment", "\n", "self", ".", "_algo_kwargs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize": [[18, 22], ["multi.MultiController._fixed_environment.initialize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "# initialize environment if fixed_environment is provided", "\n", "        ", "if", "not", "self", ".", "_fixed_environment", "is", "None", ":", "\n", "            ", "self", ".", "_algo_kwargs", "=", "self", ".", "_fixed_environment", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.run": [[23, 29], ["multi.MultiController._run_part", "hasattr"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.SequentialController._run_part"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "            ", "for", "part", "in", "self", ".", "parts", ":", "\n", "                ", "self", ".", "_run_part", "(", "part", ")", "\n", "if", "hasattr", "(", "part", ".", "controller", ",", "'_global_exit'", ")", ":", "\n", "                    ", "if", "part", ".", "controller", ".", "_global_exit", ":", "\n", "                        ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController._run_part": [[31, 41], ["None"], "methods", ["None"], ["", "", "", "", "def", "_run_part", "(", "self", ",", "part", ")", ":", "\n", "        ", "\"\"\"\n        Stub to be overwritten by subclasses. Should run the subexperiment given by part (initialize,run,finalize).\n        Args:\n            part:\n\n        Returns:\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize": [[42, 46], ["multi.MultiController._fixed_environment.finalize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "# initialize environment if fixed_environment is provided", "\n", "        ", "if", "not", "self", ".", "_fixed_environment", "is", "None", ":", "\n", "            ", "self", ".", "_algo_kwargs", "=", "self", ".", "_fixed_environment", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.RepetitionController._run_part": [[56, 70], ["part.apply_config", "range", "part.controller.initialize", "part.controller.finalize", "logger.info", "part.controller.run"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.apply_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run"], ["def", "_run_part", "(", "self", ",", "part", ")", ":", "\n", "        ", "part", ".", "apply_config", "(", ")", "\n", "# run all repetitions of using same controller", "\n", "for", "rep", "in", "range", "(", "self", ".", "config", ".", "repetitions", ")", ":", "\n", "            ", "part", ".", "controller", ".", "initialize", "(", "initialize_environment", "=", "(", "self", ".", "_fixed_environment", "is", "None", ")", ",", "\n", "algo_kwargs", "=", "self", ".", "_algo_kwargs", ",", "\n", "run_id", "=", "rep", ")", "# explicitly set run_id", "\n", "\n", "if", "part", ".", "controller", ".", "completed", ":", "\n", "                ", "logger", ".", "info", "(", "\"Run complete, skipping.\"", ")", "\n", "", "else", ":", "\n", "                ", "part", ".", "controller", ".", "run", "(", ")", "\n", "\n", "", "part", ".", "controller", ".", "finalize", "(", "finalize_environment", "=", "(", "self", ".", "_fixed_environment", "is", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.SequentialController.__init__": [[78, 83], ["multi.MultiController.__init__", "Exception"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "parts", ",", "fixed_environment", "=", "None", ")", ":", "\n", "        ", "if", "fixed_environment", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Can run sequential controller only with a fixed environment for now.\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "parts", "=", "parts", ",", "fixed_environment", "=", "fixed_environment", ")", "\n", "self", ".", "_run_id", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.SequentialController._run_part": [[84, 103], ["part.apply_config", "part.controller.initialize", "part.controller.run", "part.controller.finalize", "part.controller.finalize.items"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.apply_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items"], ["", "def", "_run_part", "(", "self", ",", "part", ")", ":", "\n", "        ", "part", ".", "apply_config", "(", ")", "\n", "\n", "# if we already have a run_id, set it on the controller to make sure, all parts get the same id", "\n", "part", ".", "controller", ".", "initialize", "(", "algo_kwargs", "=", "self", ".", "_algo_kwargs", ",", "initialize_environment", "=", "False", ",", "run_id", "=", "self", ".", "_run_id", ")", "\n", "\n", "# if we do not have a run_id yet, take it from the controller", "\n", "if", "self", ".", "_run_id", "is", "None", ":", "\n", "            ", "self", ".", "_run_id", "=", "part", ".", "controller", ".", "run_id", "\n", "\n", "", "part", ".", "controller", ".", "run", "(", ")", "\n", "finalize_result", "=", "part", ".", "controller", ".", "finalize", "(", "finalize_environment", "=", "False", ")", "\n", "\n", "# update algorithm kwargs", "\n", "if", "not", "finalize_result", "is", "None", ":", "\n", "            ", "for", "key", ",", "item", "in", "finalize_result", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_algo_kwargs", "[", "key", "]", "=", "item", "\n", "\n", "", "", "return", "finalize_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.simple.SimpleExperiment.create": [[25, 28], ["super().create", "simple.SimpleExperiment.config.environment"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.create", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.environment"], ["self", ".", "dset", "=", "None", "\n", "\n", "\n", "self", ".", "run_id", "=", "kwargs", ".", "get", "(", "\"run_id\"", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.simple.SimpleExperiment.load": [[29, 34], ["super().load", "simple.SimpleExperiment.config.environment", "simple.SimpleExperiment.config.algorithm"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.environment", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.algorithm"], ["self", ".", "group_id", "=", "kwargs", ".", "get", "(", "\"group_id\"", ",", "None", ")", "\n", "\n", "self", ".", "T", "=", "self", ".", "config", ".", "T", "\n", "self", ".", "_exit", "=", "False", "\n", "self", ".", "_data", "=", "[", "]", "# only used if self.dset is None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.simple.SimpleExperiment.get_controller": [[35, 59], ["kwargs.get", "config_cls"], "methods", ["None"], ["\n", "", "def", "initialize", "(", "self", ",", "initialize_environment", "=", "True", ",", "algo_kwargs", "=", "None", ",", "run_id", "=", "None", ")", ":", "\n", "        ", "self", ".", "run_id", "=", "run_id", "\n", "self", ".", "_completed", "=", "False", "\n", "\n", "if", "initialize_environment", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Initializing environment: {self.environment.name}.\"", ")", "\n", "# initialize environment and get initial measurement", "\n", "env_info", "=", "self", ".", "environment", ".", "initialize", "(", ")", "\n", "# merge env_info and algo_kwargs. give priority to algo_kwargs", "\n", "if", "algo_kwargs", "is", "None", ":", "\n", "                ", "algo_kwargs", "=", "{", "}", "\n", "", "for", "k", ",", "v", "in", "env_info", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "k", "in", "algo_kwargs", ":", "\n", "                    ", "algo_kwargs", "[", "k", "]", "=", "v", "\n", "\n", "# check if environment provides Tmax", "\n", "", "", "", "if", "not", "self", ".", "environment", ".", "Tmax", "is", "None", ":", "\n", "            ", "self", ".", "T", "=", "self", ".", "environment", ".", "Tmax", "\n", "logger", ".", "info", "(", "f\"Setting T = Tmax = {self.T}.\"", ")", "\n", "# initialize algorithm", "\n", "", "logger", ".", "info", "(", "f\"Initializing algorithm: {self.algorithm.name}.\"", ")", "\n", "self", ".", "algorithm", ".", "initialize", "(", "**", "algo_kwargs", ")", "\n", "\n", "best_predicted_fields", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.simple.SimpleExperiment.sync": [[61, 118], ["super().sync", "ceramo.results.Backend", "super().sync.iterrows", "simple.SimpleExperiment._dbase.get_dset", "os.path.join", "h5py.File", "logger.info", "simple.SimpleExperiment.add", "backend.store", "shutil.rmtree", "logger.info", "simple.SimpleExperiment._dbase.dset_exists", "logger.error", "febo.utils.query_yes_no", "logger.error", "febo.utils.query_yes_no", "os.path.exists", "logger.error", "logger.error", "logger.error", "len", "logger.error", "backend.store", "backend.store", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.sync", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.get_dset", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.dset_exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.query_yes_no", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.query_yes_no", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["# add all fields from environment.dtype except for 'x'", "\n", "            ", "best_predicted_fields", "+=", "[", "(", "f'{field}_bp'", ",", "d", "[", "0", "]", ")", "for", "field", ",", "d", "in", "self", ".", "environment", ".", "dtype", ".", "fields", ".", "items", "(", ")", "if", "not", "field", "in", "(", "'y_max'", ",", ")", "]", "\n", "if", "hasattr", "(", "self", ".", "algorithm", ",", "'model'", ")", ":", "\n", "                ", "best_predicted_fields", "+=", "[", "(", "'y_model_bp'", ",", "'f8'", ")", ",", "(", "'y_std_model_bp'", ",", "'f8'", ")", "]", "\n", "\n", "", "", "self", ".", "_best_predicted_dtype", "=", "np", ".", "dtype", "(", "best_predicted_fields", ")", "\n", "self", ".", "_time_dtype", "=", "np", ".", "dtype", "(", "[", "(", "'time_acq'", ",", "'f'", ")", ",", "(", "'time_data'", ",", "'f'", ")", "]", ")", "\n", "self", ".", "evaluation_dtype", "=", "join_dtypes", "(", "self", ".", "algorithm", ".", "dtype", ",", "self", ".", "environment", ".", "dtype", ",", "self", ".", "_best_predicted_dtype", ",", "self", ".", "_time_dtype", ")", "\n", "\n", "self", ".", "t", "=", "0", "\n", "\n", "# initialize dataset", "\n", "if", "not", "self", ".", "dbase", "is", "None", ":", "\n", "            ", "self", ".", "dset", "=", "self", ".", "dbase", ".", "get_dset", "(", "group", "=", "self", ".", "group_id", ",", "id", "=", "self", ".", "run_id", ",", "dtype", "=", "self", ".", "evaluation_dtype", ")", "\n", "self", ".", "run_id", "=", "self", ".", "dset", ".", "id", "\n", "\n", "group", "=", "self", ".", "dbase", ".", "get_group", "(", "self", ".", "group_id", ")", "\n", "group", ".", "attrs", "[", "'environment'", "]", "=", "self", ".", "environment", ".", "name", "\n", "group", ".", "attrs", "[", "'algorithm'", "]", "=", "self", ".", "algorithm", ".", "name", "\n", "\n", "# load existing data", "\n", "if", "len", "(", "self", ".", "dset", ".", "data", ")", "==", "self", ".", "T", ":", "\n", "                ", "self", ".", "t", "=", "self", ".", "T", "\n", "self", ".", "_completed", "=", "True", "\n", "\n", "", "elif", "len", "(", "self", ".", "dset", ".", "data", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Loading existing data into algorithm.\"", ")", "\n", "for", "evaluation", "in", "self", ".", "dset", ".", "data", ":", "\n", "                    ", "self", ".", "algorithm", ".", "add_data", "(", "evaluation", ")", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "", "", "", "self", ".", "_data", "=", "[", "]", "# only used if self.dset is None", "\n", "self", ".", "_exit", "=", "(", "self", ".", "t", ">=", "self", ".", "T", ")", "\n", "\n", "# set experiment_info data on algorithm", "\n", "self", ".", "algorithm", ".", "experiment_info", "[", "\"run_id\"", "]", "=", "self", ".", "run_id", "\n", "self", ".", "algorithm", ".", "experiment_info", "[", "\"group_id\"", "]", "=", "self", ".", "group_id", "\n", "\n", "\n", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Starting optimization: {self.algorithm.name}\"", ")", "\n", "# interaction loop", "\n", "while", "not", "self", ".", "_exit", ":", "\n", "            ", "self", ".", "_run_step", "(", ")", "\n", "\n", "\n", "", "", "def", "finalize", "(", "self", ",", "finalize_environment", "=", "True", ")", ":", "\n", "# finalize environment, but make sure we don't crash here, as we still need to close files in the controller", "\n", "\n", "        ", "if", "finalize_environment", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "info", "(", "\"Finalizing environment...\"", ")", "\n", "self", ".", "environment", ".", "finalize", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"The following error occurred during finalizing the environment: %s\"", "%", "str", "(", "e", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "f\"Finalizing: {self.algorithm.name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.__init__": [[19, 42], ["str", "int", "len", "group.create_dataset", "len", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "group", ",", "id", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "\"\"\" read table `id` from group, or creates a table with name `id` if not existing. \"\"\"", "\n", "\n", "if", "id", "is", "None", ":", "\n", "            ", "id", "=", "len", "(", "group", ")", "\n", "\n", "", "id", "=", "str", "(", "id", ")", "\n", "\n", "if", "not", "id", "in", "group", ":", "\n", "            ", "if", "dtype", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"dtype not provided and table does not exist.\"", ")", "\n", "\n", "", "group", ".", "create_dataset", "(", "name", "=", "id", ",", "\n", "shape", "=", "(", "self", ".", "config", ".", "chunk_size", ",", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "chunks", "=", "(", "True", ",", ")", ",", "\n", "maxshape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "_num_data_points", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "_num_data_points", "=", "len", "(", "group", "[", "id", "]", ")", "\n", "\n", "", "self", ".", "hdf5_table", "=", "group", "[", "id", "]", "\n", "self", ".", "_id", "=", "int", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.id": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_id", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add": [[48, 59], ["numpy.atleast_1d", "data.DataSet.hdf5_table.resize", "max"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "evaluations", ")", ":", "\n", "        ", "\"\"\" add evaluation. resizes table if not large enough\"\"\"", "\n", "evaluations", "=", "np", ".", "atleast_1d", "(", "evaluations", ")", "\n", "n_new", "=", "evaluations", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "hdf5_table", ".", "size", "<", "self", ".", "_num_data_points", "+", "n_new", ":", "\n", "# increase table size at least by chunk_size, or to fit all evaluations", "\n", "            ", "self", ".", "hdf5_table", ".", "resize", "(", "(", "self", ".", "hdf5_table", ".", "size", "+", "max", "(", "self", ".", "config", ".", "chunk_size", ",", "n_new", ")", ",", ")", ")", "\n", "\n", "", "self", ".", "hdf5_table", "[", "self", ".", "_num_data_points", ":", "self", ".", "_num_data_points", "+", "n_new", "]", "=", "evaluations", "\n", "self", ".", "_num_data_points", "+=", "evaluations", ".", "shape", "[", "0", "]", "# adjust counter", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.data": [[60, 63], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hdf5_table", "[", ":", "self", ".", "_num_data_points", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.attrs": [[64, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "attrs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hdf5_table", ".", "attrs", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.dtype": [[68, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "hdf5_table", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.size": [[72, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_data_points", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.adjust_size": [[76, 80], ["data.DataSet.hdf5_table.resize"], "methods", ["None"], ["", "def", "adjust_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" adjust size to actual number of recorded data points\"\"\"", "\n", "self", ".", "hdf5_table", ".", "attrs", "[", "\"T\"", "]", "=", "self", ".", "_num_data_points", "\n", "self", ".", "hdf5_table", ".", "resize", "(", "(", "self", ".", "_num_data_points", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.__init__": [[85, 90], ["os.path.join", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\" load from 'evaluations.hdf5' from path. \"\"\"", "\n", "self", ".", "_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'data'", ")", "\n", "self", ".", "_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_path", ",", "'evaluations.hdf5'", ")", "\n", "self", ".", "_hdf5", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.create": [[91, 98], ["h5py.File", "data.DataBase._hdf5.flush", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["", "def", "create", "(", "self", ")", ":", "\n", "        ", "\"\"\" creates file, and directory if not exists \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "_path", ")", "\n", "\n", "", "self", ".", "_hdf5", "=", "h5py", ".", "File", "(", "self", ".", "_file_path", ",", "'w-'", ")", "\n", "self", ".", "_hdf5", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open": [[99, 102], ["h5py.File"], "methods", ["None"], ["", "def", "open", "(", "self", ")", ":", "\n", "        ", "\"\"\" open hdf5 file\"\"\"", "\n", "self", ".", "_hdf5", "=", "h5py", ".", "File", "(", "self", ".", "_file_path", ",", "'r+'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.close": [[103, 107], ["data.DataBase._hdf5.close"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\" close hdf5 file\"\"\"", "\n", "if", "not", "self", ".", "_hdf5", "is", "None", ":", "\n", "            ", "self", ".", "_hdf5", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.get_group": [[108, 120], ["data.DataBase._check_dataset_loaded", "str", "data.DataBase._hdf5.create_group"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase._check_dataset_loaded"], ["", "", "def", "get_group", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\" get existing group or create new on root level of hdf5 file. \"\"\"", "\n", "self", ".", "_check_dataset_loaded", "(", ")", "\n", "if", "group", "is", "None", ":", "\n", "            ", "return", "self", ".", "_hdf5", "\n", "\n", "", "group", "=", "str", "(", "group", ")", "\n", "\n", "if", "not", "group", "in", "self", ".", "_hdf5", ":", "\n", "            ", "self", ".", "_hdf5", ".", "create_group", "(", "group", ")", "\n", "\n", "", "return", "self", ".", "_hdf5", "[", "group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.get_dset": [[121, 133], ["data.DataBase._check_dataset_loaded", "data.DataBase.get_group", "data.DataSet", "len"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase._check_dataset_loaded", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.get_group"], ["", "def", "get_dset", "(", "self", ",", "group", "=", "None", ",", "id", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        get dset in group, creates if not existing.\n            returns DataSet wrapper around hdf5 table.\n        \"\"\"", "\n", "self", ".", "_check_dataset_loaded", "(", ")", "\n", "group", "=", "self", ".", "get_group", "(", "group", ")", "\n", "\n", "if", "id", "is", "None", ":", "\n", "            ", "id", "=", "len", "(", "group", ")", "\n", "\n", "", "return", "DataSet", "(", "group", ",", "id", "=", "id", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.dset_exists": [[134, 149], ["data.DataBase._check_dataset_loaded", "str", "str"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase._check_dataset_loaded"], ["", "def", "dset_exists", "(", "self", ",", "id", ",", "group", "=", "None", ")", ":", "\n", "        ", "self", ".", "_check_dataset_loaded", "(", ")", "\n", "\n", "dset", "=", "self", ".", "_hdf5", "\n", "\n", "\n", "if", "not", "group", "is", "None", ":", "\n", "            ", "group", "=", "str", "(", "group", ")", "\n", "if", "not", "group", "in", "dset", ":", "\n", "                ", "return", "False", "\n", "", "dset", "=", "dset", "[", "group", "]", "\n", "\n", "", "id", "=", "str", "(", "id", ")", "\n", "\n", "return", "id", "in", "dset", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.hdf5": [[150, 153], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hdf5", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hdf5", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase._check_dataset_loaded": [[154, 157], ["Exception"], "methods", ["None"], ["", "def", "_check_dataset_loaded", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hdf5", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Dataset not loaded. You need to call .create() or .load() first.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.__del__": [[158, 160], ["data.DataBase.close"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.__init__": [[19, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "experiment_dir", ")", ":", "\n", "        ", "self", ".", "_directory", "=", "None", "\n", "self", ".", "_timestamp", "=", "None", "\n", "self", ".", "_dbase", "=", "None", "\n", "self", ".", "_experiment_dir", "=", "experiment_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.directory": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "directory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_directory", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.timestamp": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "timestamp", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.name": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_experiment_name", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.hdf5": [[37, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hdf5", "(", "self", ")", ":", "\n", "        ", "\"\"\" direct access to hdf5 data \"\"\"", "\n", "return", "self", ".", "_dbase", ".", "hdf5", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.path": [[42, 44], ["os.path.join"], "methods", ["None"], ["", "def", "path", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_experiment_dir", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists": [[45, 47], ["os.path.exists", "experiment.Experiment.path"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.path"], ["", "def", "exists", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "self", ".", "path", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.create": [[48, 75], ["os.path.join", "febo.utils.get_logger.set_path", "experiment.Experiment._save_config_file", "logger.info", "febo.experiment.data.DataBase", "febo.utils.get_timestamp", "experiment.Experiment._dbase.create", "experiment.Experiment._dbase.close", "os.path.exists", "Exception", "os.path.exists", "os.mkdir", "Exception"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.set_path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment._save_config_file", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.get_timestamp", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.create", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["", "def", "create", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n            Creates a new experiment with name `experiment_name`.\n            Info `experiment_name == \"` no directory inside `experiment_dir` (as passed to the constructor) is created.\n        \"\"\"", "\n", "self", ".", "_experiment_name", "=", "name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_experiment_dir", ")", ":", "\n", "            ", "raise", "Exception", "(", "f\"Experiment directory '{self._experiment_dir}' does not exist.\"", ")", "\n", "\n", "", "self", ".", "_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_experiment_dir", ",", "name", ")", "\n", "\n", "# accept empty experiment name, in this case, directly write to experiment_dir", "\n", "if", "not", "name", "==", "''", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "_directory", ")", ":", "\n", "                ", "raise", "Exception", "(", "f\"Could not create experiment, directory {self._directory} already exists.\"", ")", "\n", "\n", "", "os", ".", "mkdir", "(", "self", ".", "_directory", ")", "\n", "\n", "", "get_logger", ".", "set_path", "(", "self", ".", "_directory", ")", "\n", "self", ".", "_save_config_file", "(", ")", "\n", "logger", ".", "info", "(", "f'Created a new experiment in {self._directory}.'", ")", "\n", "\n", "self", ".", "_dbase", "=", "DataBase", "(", "self", ".", "_directory", ")", "\n", "self", ".", "_timestamp", "=", "get_timestamp", "(", ")", "\n", "self", ".", "_dbase", ".", "create", "(", ")", "\n", "self", ".", "_dbase", ".", "hdf5", ".", "attrs", "[", "'timestamp'", "]", "=", "self", ".", "_timestamp", "\n", "self", ".", "_dbase", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.load": [[76, 102], ["os.path.join", "febo.utils.get_logger.set_path", "febo.utils.config.config_manager.load_yaml", "febo.utils.config.config_manager.update_config", "febo.experiment.data.DataBase", "experiment.Experiment._dbase.open", "logger.info", "os.path.exists", "Exception", "os.path.join", "logger.warning", "febo.utils.get_timestamp"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.Logger.set_path", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_yaml", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.update_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.get_timestamp"], ["", "def", "load", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n            Load existing experiment\n            path: Path where experiment is stored\n        \"\"\"", "\n", "self", ".", "_experiment_name", "=", "name", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_experiment_dir", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_path", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Could not find experiment directory (%s).\"", "%", "full_path", ")", "\n", "\n", "", "self", ".", "_directory", "=", "full_path", "\n", "\n", "# set path for log files", "\n", "get_logger", ".", "set_path", "(", "self", ".", "_directory", ")", "\n", "\n", "# load config and update own config", "\n", "config_manager", ".", "load_yaml", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_directory", ",", "'experiment.yaml'", ")", ")", "\n", "config_manager", ".", "update_config", "(", "self", ".", "config", ")", "\n", "\n", "self", ".", "_dbase", "=", "DataBase", "(", "self", ".", "_directory", ")", "\n", "self", ".", "_dbase", ".", "open", "(", ")", "\n", "if", "not", "'timestamp'", "in", "self", ".", "_dbase", ".", "hdf5", ".", "attrs", ":", "\n", "            ", "logger", ".", "warning", "(", "\"timestamp not set, adding now.\"", ")", "\n", "self", ".", "_dbase", ".", "hdf5", ".", "attrs", "[", "'timestamp'", "]", "=", "get_timestamp", "(", ")", "\n", "", "self", ".", "_timestamp", "=", "self", ".", "_dbase", ".", "hdf5", ".", "attrs", "[", "'timestamp'", "]", "\n", "logger", ".", "info", "(", "f'Loaded experiment from {self._directory}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.get_controller": [[103, 111], ["None"], "methods", ["None"], ["", "def", "get_controller", "(", "self", ",", "remote", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        returns a controller instance\n        :param kwargs: arguments passed to the controller\n        :return: controller instance\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.start": [[112, 119], ["experiment.Experiment.get_controller", "experiment.Experiment.initialize", "experiment.Experiment.run", "experiment.Experiment.finalize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.get_controller", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.initialize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.controller.multi.MultiController.finalize"], ["", "def", "start", "(", "self", ",", "remote", "=", "False", ")", ":", "\n", "        ", "controller", "=", "self", ".", "get_controller", "(", "remote", "=", "remote", ")", "\n", "try", ":", "\n", "            ", "controller", ".", "initialize", "(", ")", "\n", "controller", ".", "run", "(", ")", "\n", "", "finally", ":", "\n", "            ", "controller", ".", "finalize", "(", ")", "# important for file closing", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close": [[120, 123], ["experiment.Experiment._dbase.close"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_dbase", "is", "None", ":", "\n", "            ", "self", ".", "_dbase", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment._save_config_file": [[124, 130], ["febo.utils.join_path_if_not_exists", "febo.utils.config.config_manager.write_yaml"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.join_path_if_not_exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.write_yaml"], ["", "", "def", "_save_config_file", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "self", ".", "_directory", "\n", "", "config_path", "=", "utils", ".", "join_path_if_not_exists", "(", "path", ",", "'experiment.yaml'", ")", "\n", "\n", "config_manager", ".", "write_yaml", "(", "config_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.sync": [[132, 144], ["ceramo.results.load_remote_data", "ceramo.results.Backend", "backend.query"], "methods", ["None"], ["", "def", "sync", "(", "self", ",", "sync_dir", ")", ":", "\n", "        ", "\"\"\"\n\n        Returns:\n\n        \"\"\"", "\n", "with", "ceramo", ".", "results", ".", "Backend", "(", ")", "as", "backend", ":", "\n", "            ", "results", "=", "backend", ".", "query", "(", "{", "'task'", ":", "'febo.controller.remote.run_simple_controller'", ",", "'status'", ":", "'SUCCESS'", ",", "\n", "'experiment_name'", ":", "self", ".", "_experiment_name", ",", "\n", "'experiment_timestamp'", ":", "self", ".", "_timestamp", "}", ")", "\n", "\n", "", "return", "ceramo", ".", "results", ".", "load_remote_data", "(", "results", ",", "sync_dir", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.SubconfigField._decode": [[10, 34], ["isinstance", "benchmark.items", "decoded_list.append", "febo.utils.locate", "settings.items", "section.rsplit", "field._encode"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.EnumConfigField._encode"], ["# base class to run multiple algorithms, instantiated by MultiExperiment.", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "parts", ",", "fixed_environment", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiController", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "parts", "=", "parts", "\n", "self", ".", "_fixed_environment", "=", "fixed_environment", "\n", "self", ".", "_algo_kwargs", "=", "None", "\n", "\n", "", "def", "initialize", "(", "self", ")", ":", "\n", "# initialize environment if fixed_environment is provided", "\n", "        ", "if", "not", "self", ".", "_fixed_environment", "is", "None", ":", "\n", "            ", "self", ".", "_algo_kwargs", "=", "self", ".", "_fixed_environment", ".", "initialize", "(", ")", "\n", "\n", "", "", "def", "run", "(", "self", ")", ":", "\n", "            ", "for", "part", "in", "self", ".", "parts", ":", "\n", "                ", "self", ".", "_run_part", "(", "part", ")", "\n", "if", "hasattr", "(", "part", ".", "controller", ",", "'_global_exit'", ")", ":", "\n", "                    ", "if", "part", ".", "controller", ".", "_global_exit", ":", "\n", "                        ", "break", "\n", "\n", "\n", "", "", "", "", "def", "_run_part", "(", "self", ",", "part", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.__init__": [[62, 69], ["os.path.join", "str"], "methods", ["None"], ["run_id", "=", "rep", ")", "# explicitly set run_id", "\n", "\n", "if", "part", ".", "controller", ".", "completed", ":", "\n", "                ", "logger", ".", "info", "(", "\"Run complete, skipping.\"", ")", "\n", "", "else", ":", "\n", "                ", "part", ".", "controller", ".", "run", "(", ")", "\n", "\n", "", "part", ".", "controller", ".", "finalize", "(", "finalize_environment", "=", "(", "self", ".", "_fixed_environment", "is", "None", ")", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.id": [[70, 73], ["None"], "methods", ["None"], ["\n", "\n", "", "", "", "class", "SequentialController", "(", "MultiController", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.config": [[74, 77], ["None"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.label": [[78, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "parts", ",", "fixed_environment", "=", "None", ")", ":", "\n", "        ", "if", "fixed_environment", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Can run sequential controller only with a fixed environment for now.\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "parts", "=", "parts", ",", "fixed_environment", "=", "fixed_environment", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.controller": [[82, 85], ["None"], "methods", ["None"], ["self", ".", "_run_id", "=", "None", "\n", "\n", "", "def", "_run_part", "(", "self", ",", "part", ")", ":", "\n", "        ", "part", ".", "apply_config", "(", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.path": [[86, 89], ["None"], "methods", ["None"], ["\n", "# if we already have a run_id, set it on the controller to make sure, all parts get the same id", "\n", "part", ".", "controller", ".", "initialize", "(", "algo_kwargs", "=", "self", ".", "_algo_kwargs", ",", "initialize_environment", "=", "False", ",", "run_id", "=", "self", ".", "_run_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.set_config": [[90, 93], ["multi.ExperimentPart._label_fun"], "methods", ["None"], ["# if we do not have a run_id yet, take it from the controller", "\n", "if", "self", ".", "_run_id", "is", "None", ":", "\n", "            ", "self", ".", "_run_id", "=", "part", ".", "controller", ".", "run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.set_controller": [[94, 96], ["None"], "methods", ["None"], ["", "part", ".", "controller", ".", "run", "(", ")", "\n", "finalize_result", "=", "part", ".", "controller", ".", "finalize", "(", "finalize_environment", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.apply_config": [[97, 101], ["febo.utils.config.config_manager.load_data", "febo.utils.config.config_manager.update_config"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.load_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.ConfigManager.update_config"], ["# update algorithm kwargs", "\n", "if", "not", "finalize_result", "is", "None", ":", "\n", "            ", "for", "key", ",", "item", "in", "finalize_result", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_algo_kwargs", "[", "key", "]", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save": [[102, 108], ["os.path.exists", "os.mkdir", "open", "ruamel.yaml.YAML", "ruamel.yaml.YAML.dump", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["", "", "return", "finalize_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.load": [[109, 113], ["multi.ExperimentPart._label_fun", "open", "yaml.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.__init__": [[117, 121], ["febo.experiment.simple.SimpleExperiment.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.parts": [[122, 125], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.create": [[126, 145], ["super().create", "os.path.join", "os.mkdir", "enumerate", "multi.MultiExperiment.config.environment", "multi.ExperimentPart", "multi.ExperimentPart.set_config", "multi.MultiExperiment._parts.append", "multi.ExperimentPart.save", "multi.ExperimentPart.apply_config", "multi.MultiExperiment.config.environment"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.create", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.environment", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.set_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.apply_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.environment"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.load": [[146, 163], ["super().load", "os.path.join", "sorted", "os.listdir", "os.path.isdir", "multi.MultiExperiment.config.environment", "os.path.join", "int", "multi.ExperimentPart", "multi.ExperimentPart.load", "multi.MultiExperiment._parts.append", "int"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.environment", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.get_controller": [[165, 190], ["multi.MultiExperiment.config.multi_controller", "part.apply_config", "multi.MultiExperiment.config.algorithm", "super().get_controller", "part.set_controller", "multi.MultiExperiment.config.environment"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.apply_config", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.algorithm", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.MultiExperiment.get_controller", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.set_controller", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.labels.environment"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.label_id": [[50, 52], ["None"], "function", ["None"], ["", "@", "assign_config", "(", "RepetitionControllerConfig", ")", "\n", "class", "RepetitionController", "(", "MultiController", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.__init__": [[29, 52], ["stpy.kernels.KernelFunction", "stpy.gauss_procc.GaussianProcess", "eval", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.BattackFn.eval"], ["    ", "def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            d (int): input dimension\n        \"\"\"", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "d", "=", "domain", ".", "d", "\n", "self", ".", "fit", "=", "False", "\n", "self", ".", "s", "=", "self", ".", "config", ".", "noise_var", "\n", "self", ".", "kernel_name", "=", "self", ".", "config", ".", "kernels", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "gamma", "=", "self", ".", "config", ".", "kernels", "[", "0", "]", "[", "1", "]", "[", "'lengthscale'", "]", "\n", "\n", "if", "self", ".", "config", ".", "kernels", "[", "0", "]", "[", "1", "]", "[", "'groups'", "]", "is", "None", ":", "\n", "            ", "self", ".", "groups", "=", "self", ".", "config", ".", "kernels", "[", "0", "]", "[", "1", "]", "[", "'groups'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "eval", "(", "self", ".", "config", ".", "kernels", "[", "0", "]", "[", "1", "]", "[", "'groups'", "]", ")", "\n", "\n", "", "kernel", "=", "KernelFunction", "(", "kernel_name", "=", "self", ".", "kernel_name", ",", "gamma", "=", "torch", ".", "ones", "(", "self", ".", "d", ",", "dtype", "=", "torch", ".", "float64", ")", "*", "self", ".", "gamma", ",", "groups", "=", "self", ".", "groups", ")", "\n", "self", ".", "gp", "=", "GaussianProcess", "(", "kernel_custom", "=", "kernel", ",", "s", "=", "self", ".", "s", ",", "d", "=", "self", ".", "d", ")", "\n", "self", ".", "_beta_cached", "=", "2", "\n", "\n", "self", ".", "X", "=", "None", "\n", "self", ".", "Y", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.mean": [[53, 67], ["torch.from_numpy", "gpm.StandaloneGP.gp.mean_var", "mean.numpy", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "mean", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Calculate predicted mean at X.\n\n        Args:\n            X: input narray of shape (N,d)\n\n        Returns:\n            Predicted mean, narray of shape (N,1)\n\n        \"\"\"", "\n", "X", "=", "torch", ".", "from_numpy", "(", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "d", ")", ")", "\n", "mean", ",", "_", "=", "self", ".", "gp", ".", "mean_var", "(", "X", ")", "\n", "return", "mean", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.var": [[68, 82], ["torch.from_numpy", "gpm.StandaloneGP.gp.mean_var", "var.numpy", "torch.from_numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "var", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Calculate predicted variance at X\n\n        Args:\n            X: input narray of shape (N,d)\n\n        Returns:\n            Predicted variance, narray of shape (N,1)\n\n        \"\"\"", "\n", "X", "=", "torch", ".", "from_numpy", "(", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "d", ")", ")", "\n", "mean", ",", "var", "=", "self", ".", "gp", ".", "mean_var", "(", "X", ")", "\n", "return", "var", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP._beta": [[84, 86], ["None"], "methods", ["None"], ["", "def", "_beta", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_beta_cached", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.mean_var": [[87, 102], ["torch.from_numpy", "gpm.StandaloneGP.gp.mean_var", "torch.from_numpy.reshape", "mean.numpy", "var.numpy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "mean_var", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n\n        Calculate predicted mean and variance at X\n\n        Args:\n            X: input narray of shape (N,d)\n\n        Returns:\n            (mean, var) Predicted mean and variance, each narray of shape (N,1)\n\n        \"\"\"", "\n", "X", "=", "torch", ".", "from_numpy", "(", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "d", ")", ")", "\n", "mean", ",", "var", "=", "self", ".", "gp", ".", "mean_var", "(", "X", ")", "\n", "return", "(", "mean", ".", "numpy", "(", ")", ",", "var", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.sample": [[103, 123], ["torch.from_numpy", "gpm.StandaloneGP.gp.sample().numpy", "torch.from_numpy.reshape", "gpm.StandaloneGP.gp.sample"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.sample"], ["", "def", "sample", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns a sample form the posterior. It should return a function ``def my_sample(X):``\n\n        Args:\n            X: if specified, the sample function is only valid for points X\n\n        Returns (function):\n\n        \"\"\"", "\n", "def", "sampler", "(", "X", ")", ":", "\n", "            ", "X", "=", "torch", ".", "from_numpy", "(", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "d", ")", ")", "\n", "f", "=", "self", ".", "gp", ".", "sample", "(", "X", ")", ".", "numpy", "(", ")", "\n", "return", "f", "\n", "\n", "# def sampler_coord(X):", "\n", "#     X = torch.from_numpy(X.reshape(-1, self.d))", "\n", "#     x,val = self.gp.sample_iteratively_max(X, multistart = 20, minimizer = \"coordinate-wise\", grid = 100).numpy()", "\n", "#     return (x,val )", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.fit_gp": [[126, 129], ["gpm.StandaloneGP.gp.fit_gp"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.fit_gp"], ["", "def", "fit_gp", "(", "self", ")", ":", "\n", "        ", "self", ".", "gp", ".", "fit_gp", "(", "self", ".", "X", ",", "self", ".", "Y", ")", "\n", "self", ".", "fit", "=", "True", "\n", "", "def", "add_data", "(", "self", ",", "X", ",", "Y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.add_data": [[129, 148], ["torch.from_numpy", "torch.from_numpy", "gpm.StandaloneGP.fit_gp", "torch.from_numpy.reshape", "torch.from_numpy.reshape", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.fit_gp"], ["", "def", "add_data", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        Add data to the model.\n\n        Args:\n            X: input narray of shape (N,d)\n            Y: observation narray of shape (N,1)\n\n        \"\"\"", "\n", "X", "=", "torch", ".", "from_numpy", "(", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "d", ")", ")", "\n", "Y", "=", "torch", ".", "from_numpy", "(", "Y", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "X", "is", "None", ":", "\n", "            ", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "Y", "\n", "", "else", ":", "\n", "            ", "self", ".", "X", "=", "torch", ".", "cat", "(", "(", "self", ".", "X", ",", "X", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "Y", "=", "torch", ".", "cat", "(", "(", "self", ".", "Y", ",", "Y", ")", ",", "dim", "=", "0", ")", "\n", "", "self", ".", "fit_gp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.info": [[149, 151], ["gpm.StandaloneGP.gp.description"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "gp", ".", "description", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpm.StandaloneGP.requires_std": [[152, 155], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_std", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelCacheMixin.__init__": [[32, 35], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_K", "=", "None", "\n", "super", "(", "IncrementalKernelCacheMixin", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelCacheMixin.update_incremental": [[36, 41], ["gpy.IncrementalKernelCacheMixin.K", "numpy.block"], "methods", ["None"], ["", "def", "update_incremental", "(", "self", ",", "X", ")", ":", "\n", "        ", "K_tmp", "=", "self", ".", "K", "(", "X", ",", "X", "[", "-", "1", ":", "]", ")", "\n", "K_inc", "=", "K_tmp", "[", ":", "-", "1", "]", "\n", "K_inc2", "=", "K_tmp", "[", "-", "1", ":", "]", "\n", "self", ".", "_K", "=", "np", ".", "block", "(", "[", "[", "self", ".", "_K", ",", "K_inc", "]", ",", "[", "K_inc", ".", "T", ",", "K_inc2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelCacheMixin.update_non_incremental": [[42, 44], ["gpy.IncrementalKernelCacheMixin.K"], "methods", ["None"], ["", "def", "update_non_incremental", "(", "self", ",", "X", ")", ":", "\n", "        ", "self", ".", "_K", "=", "self", ".", "K", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelGradientsMixin.__init__": [[49, 51], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IncrementalKernelGradientsMixin", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelGradientsMixin.update_gradients_incremental": [[52, 73], ["gpy.IncrementalKernelGradientsMixin.dK_dr_via_X", "numpy.block", "numpy.sum", "GPy.util.config.config.getboolean", "gpy.IncrementalKernelGradientsMixin._scaled_dist", "gpy.IncrementalKernelGradientsMixin._inv_dist", "gpy.IncrementalKernelGradientsMixin._lengthscale_grads_cython", "gpy.IncrementalKernelGradientsMixin._lengthscale_grads_pure", "gpy.IncrementalKernelGradientsMixin._dK_dr_via_X.copy", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "update_gradients_incremental", "(", "self", ",", "dL_dK", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "        ", "self", ".", "variance", ".", "gradient", "=", "np", ".", "sum", "(", "self", ".", "_K", "*", "dL_dK", ")", "/", "self", ".", "variance", "\n", "\n", "dK_dr_via_X_tmp", "=", "self", ".", "dK_dr_via_X", "(", "X", ",", "X", "[", "-", "1", ":", "]", ")", "\n", "dK_dr_via_X_inc", "=", "dK_dr_via_X_tmp", "[", ":", "-", "1", "]", "\n", "dK_dr_via_X_inc2", "=", "dK_dr_via_X_tmp", "[", "-", "1", ":", "]", "\n", "self", ".", "_dK_dr_via_X", "=", "np", ".", "block", "(", "[", "[", "self", ".", "_dK_dr_via_X", ".", "copy", "(", ")", ",", "dK_dr_via_X_inc", "]", ",", "[", "dK_dr_via_X_inc", ".", "T", ",", "dK_dr_via_X_inc2", "]", "]", ")", "\n", "\n", "# now the lengthscale gradient(s)", "\n", "dL_dr", "=", "self", ".", "_dK_dr_via_X", "*", "dL_dK", "\n", "if", "self", ".", "ARD", ":", "\n", "\n", "            ", "tmp", "=", "dL_dr", "*", "self", ".", "_inv_dist", "(", "X", ",", "X2", ")", "\n", "if", "X2", "is", "None", ":", "X2", "=", "X", "\n", "if", "GPy", ".", "util", ".", "config", ".", "config", ".", "getboolean", "(", "'cython'", ",", "'working'", ")", ":", "\n", "                ", "self", ".", "lengthscale", ".", "gradient", "=", "self", ".", "_lengthscale_grads_cython", "(", "tmp", ",", "X", ",", "X2", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lengthscale", ".", "gradient", "=", "self", ".", "_lengthscale_grads_pure", "(", "tmp", ",", "X", ",", "X2", ")", "\n", "", "", "else", ":", "\n", "            ", "r", "=", "self", ".", "_scaled_dist", "(", "X", ",", "X2", ")", "\n", "self", ".", "lengthscale", ".", "gradient", "=", "-", "np", ".", "sum", "(", "dL_dr", "*", "r", ")", "/", "self", ".", "lengthscale", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelGradientsMixin.update_gradients_full": [[74, 77], ["super().update_gradients_full", "gpy.IncrementalKernelGradientsMixin.dK_dr_via_X"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelGradientsMixin.update_gradients_full"], ["", "", "def", "update_gradients_full", "(", "self", ",", "dL_dK", ",", "X", ",", "X2", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_gradients_full", "(", "dL_dK", ",", "X", ",", "X2", ")", "\n", "self", ".", "_dK_dr_via_X", "=", "self", ".", "dK_dr_via_X", "(", "X", ",", "X2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GP.__init__": [[92, 105], ["numpy.zeros().reshape", "numpy.zeros().reshape", "gpy.ExactGaussianInferenceIncremental", "super().__init__", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "kernel", ",", "likelihood", ",", "mean_function", "=", "None", ",", "name", "=", "'gp'", ",", "Y_metadata", "=", "None", ",", "normalizer", "=", "False", ",", "calculate_gradients", "=", "True", ")", ":", "\n", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "input_dim", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "# add some data to make GPy happy", "\n", "Y", "=", "np", ".", "zeros", "(", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "# add some data to make GPy happy", "\n", "\n", "inference_method", "=", "ExactGaussianInferenceIncremental", "(", ")", "# add our own incremental inference method", "\n", "self", ".", "_update_incremental", "=", "False", "\n", "self", ".", "_calculate_gradients", "=", "calculate_gradients", "\n", "self", ".", "_input_dim", "=", "input_dim", "\n", "# inference_method = None", "\n", "# inference_method = None", "\n", "# extend_instance(kernel, IncrementalKernelMixin)", "\n", "super", "(", ")", ".", "__init__", "(", "X", ",", "Y", ",", "kernel", ",", "likelihood", ",", "mean_function", ",", "inference_method", ",", "name", ",", "Y_metadata", ",", "normalizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GP.parameters_changed": [[106, 143], ["gpy.GP.inference_method.inference", "gpy.GP.kern.update_non_incremental", "gpy.GP.kern.update_incremental", "gpy.GP.inference_method.incremental_inference", "gpy.GP.likelihood.update_gradients", "gpy.GP.kern.update_gradients_full", "gpy.GP.likelihood.update_gradients", "hasattr", "gpy.GP.mean_function.update_gradients", "gpy.GP.kern.update_gradients_incremental", "gpy.GP.kern.update_gradients_full", "gpy.GP.mean_function.update_gradients"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.ExactGaussianInferenceIncremental.inference", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelCacheMixin.update_non_incremental", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelCacheMixin.update_incremental", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.ExactGaussianInferenceIncremental.incremental_inference", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelGradientsMixin.update_gradients_full", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelGradientsMixin.update_gradients_incremental", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.IncrementalKernelGradientsMixin.update_gradients_full"], ["", "def", "parameters_changed", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Method that is called upon any changes to :class:`~GPy.core.parameterization.param.Param` variables within the model.\n        In particular in the GP class this method re-performs inference, recalculating the posterior and log marginal likelihood and gradients of the model\n\n        .. warning::\n            This method is not designed to be called manually, the framework is set up to automatically call this method upon changes to parameters, if you call\n            this method yourself, there may be unexpected consequences.\n        \"\"\"", "\n", "if", "not", "self", ".", "_update_incremental", ":", "\n", "            ", "self", ".", "posterior", ",", "self", ".", "_log_marginal_likelihood", ",", "self", ".", "grad_dict", "=", "self", ".", "inference_method", ".", "inference", "(", "self", ".", "kern", ",", "\n", "self", ".", "X", ",", "\n", "self", ".", "likelihood", ",", "\n", "self", ".", "Y_normalized", ",", "\n", "self", ".", "mean_function", ",", "\n", "self", ".", "Y_metadata", ")", "\n", "if", "self", ".", "_calculate_gradients", ":", "# switch for updating gradients", "\n", "                ", "self", ".", "likelihood", ".", "update_gradients", "(", "self", ".", "grad_dict", "[", "'dL_dthetaL'", "]", ")", "\n", "self", ".", "kern", ".", "update_gradients_full", "(", "self", ".", "grad_dict", "[", "'dL_dK'", "]", ",", "self", ".", "X", ")", "\n", "if", "self", ".", "mean_function", "is", "not", "None", ":", "\n", "                    ", "self", ".", "mean_function", ".", "update_gradients", "(", "self", ".", "grad_dict", "[", "'dL_dm'", "]", ",", "self", ".", "X", ")", "\n", "", "", "self", ".", "kern", ".", "update_non_incremental", "(", "self", ".", "X", ")", "\n", "", "else", ":", "\n", "# print(\"performing incremental update\")", "\n", "            ", "self", ".", "kern", ".", "update_incremental", "(", "self", ".", "X", ")", "\n", "self", ".", "posterior", ",", "self", ".", "_log_marginal_likelihood", ",", "self", ".", "grad_dict", "=", "self", ".", "inference_method", ".", "incremental_inference", "(", "self", ".", "kern", ",", "self", ".", "X", ",", "self", ".", "likelihood", ",", "self", ".", "Y_normalized", ",", "self", ".", "mean_function", ",", "self", ".", "Y_metadata", ")", "\n", "\n", "if", "self", ".", "_calculate_gradients", ":", "# switch for updating gradients", "\n", "                ", "self", ".", "likelihood", ".", "update_gradients", "(", "self", ".", "grad_dict", "[", "'dL_dthetaL'", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "kern", ",", "'update_gradients_incremental'", ")", ":", "\n", "                    ", "self", ".", "kern", ".", "update_gradients_incremental", "(", "self", ".", "grad_dict", "[", "'dL_dK'", "]", ",", "self", ".", "X", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "kern", ".", "update_gradients_full", "(", "self", ".", "grad_dict", "[", "'dL_dK'", "]", ",", "self", ".", "X", ")", "\n", "", "if", "self", ".", "mean_function", "is", "not", "None", ":", "\n", "                    ", "self", ".", "mean_function", ".", "update_gradients", "(", "self", ".", "grad_dict", "[", "'dL_dm'", "]", ",", "self", ".", "X", ")", "\n", "\n", "", "", "self", ".", "_update_incremental", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GP.append_XY": [[144, 153], ["super().set_XY"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY"], ["", "", "def", "append_XY", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        The real functionality is implemented in self._appendXY.\n        This is to make sure, that on the first call of either append_XY or set_XY we remove the fake data point\n        \"\"\"", "\n", "super", "(", ")", ".", "set_XY", "(", "X", ",", "Y", ")", "\n", "# remap functions", "\n", "self", ".", "append_XY", "=", "self", ".", "_append_XY", "\n", "self", ".", "set_XY", "=", "super", "(", ")", ".", "set_XY", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GP.set_XY": [[154, 163], ["super().set_XY"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY"], ["", "def", "set_XY", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        The real functionality is implemented in super().set_XY\n        This is to make sure, that on the first call of either append_XY or set_XY we remove the fake data point\n        \"\"\"", "\n", "super", "(", ")", ".", "set_XY", "(", "X", ",", "Y", ")", "\n", "# remap functions", "\n", "self", ".", "append_XY", "=", "self", ".", "_append_XY", "\n", "self", ".", "set_XY", "=", "super", "(", ")", ".", "set_XY", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GP._append_XY": [[165, 177], ["numpy.concatenate", "numpy.concatenate", "gpy.GP.set_XY"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY"], ["", "def", "_append_XY", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        append X,Y to current data, perform incremental model update.\n        needs an inference method which supports incremental updates\n        Can only add a single data point for now\n        :param X: X to be appended\n        :param Y: Y to be appended\n        \"\"\"", "\n", "X", "=", "np", ".", "concatenate", "(", "(", "self", ".", "X", ",", "X", ")", ")", "\n", "Y", "=", "np", ".", "concatenate", "(", "(", "self", ".", "Y", ",", "Y", ")", ")", "\n", "self", ".", "_update_incremental", "=", "True", "\n", "self", ".", "set_XY", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPRegression.__init__": [[183, 187], ["GPy.likelihoods.Gaussian", "gpy.GP.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "kernel", ",", "mean_function", "=", "None", ",", "noise_var", "=", "1.", ",", "Y_metadata", "=", "None", ",", "normalizer", "=", "False", ",", "calculate_gradients", "=", "True", ")", ":", "\n", "        ", "likelihood", "=", "GPy", ".", "likelihoods", ".", "Gaussian", "(", "variance", "=", "noise_var", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "input_dim", ",", "kernel", ",", "likelihood", ",", "name", "=", "'GP regression'", ",", "Y_metadata", "=", "Y_metadata", ",", "normalizer", "=", "normalizer", ",", "mean_function", "=", "mean_function", ",", "calculate_gradients", "=", "calculate_gradients", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.HeteroscedasticGaussian.gaussian_variance": [[195, 197], ["Y_metadata[].flatten"], "methods", ["None"], ["def", "gaussian_variance", "(", "self", ",", "Y_metadata", "=", "None", ")", ":", "\n", "        ", "return", "Y_metadata", "[", "'variance'", "]", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.HeteroscedasticGaussian.predictive_values": [[198, 208], ["Y_metadata[].flatten", "numpy.atleast_3d", "numpy.eye", "numpy.eye"], "methods", ["None"], ["", "def", "predictive_values", "(", "self", ",", "mu", ",", "var", ",", "full_cov", "=", "False", ",", "Y_metadata", "=", "None", ")", ":", "\n", "        ", "_s", "=", "Y_metadata", "[", "'variance'", "]", ".", "flatten", "(", ")", "\n", "if", "full_cov", ":", "\n", "            ", "if", "var", ".", "ndim", "==", "2", ":", "\n", "                ", "var", "+=", "np", ".", "eye", "(", "var", ".", "shape", "[", "0", "]", ")", "*", "_s", "\n", "", "if", "var", ".", "ndim", "==", "3", ":", "\n", "                ", "var", "+=", "np", ".", "atleast_3d", "(", "np", ".", "eye", "(", "var", ".", "shape", "[", "0", "]", ")", "*", "_s", ")", "\n", "", "", "else", ":", "\n", "            ", "var", "+=", "_s", "\n", "", "return", "mu", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.HeteroscedasticGaussian.predictive_quantiles": [[209, 212], ["Y_metadata[].flatten", "scipy.stats.norm.ppf", "numpy.sqrt"], "methods", ["None"], ["", "def", "predictive_quantiles", "(", "self", ",", "mu", ",", "var", ",", "quantiles", ",", "Y_metadata", "=", "None", ")", ":", "\n", "        ", "_s", "=", "Y_metadata", "[", "'output_index'", "]", ".", "flatten", "(", ")", "\n", "return", "[", "stats", ".", "norm", ".", "ppf", "(", "q", "/", "100.", ")", "*", "np", ".", "sqrt", "(", "var", "+", "_s", ")", "+", "mu", "for", "q", "in", "quantiles", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.__init__": [[214, 223], ["numpy.ones().reshape", "gpy.HeteroscedasticGaussian", "gpy.GP.__init__", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "kernel", "=", "None", ",", "calculate_gradients", "=", "True", ",", "normalizer", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "S", "=", "np", ".", "ones", "(", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "Y_metadata", "=", "{", "'variance'", ":", "self", ".", "S", "}", "# continue with the hack of the 'empty' gp in base class", "\n", "\n", "# Likelihood", "\n", "likelihood", "=", "HeteroscedasticGaussian", "(", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "input_dim", ",", "kernel", ",", "likelihood", ",", "Y_metadata", "=", "Y_metadata", ",", "normalizer", "=", "normalizer", ",", "calculate_gradients", "=", "calculate_gradients", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY": [[225, 239], ["gpy.GP.set_XY"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY"], ["", "def", "set_XY", "(", "self", ",", "X", ",", "Y", ",", "S", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            X:\n            Y:\n            S: standard deviation\n\n        Returns:\n\n        \"\"\"", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "Y_metadata", "[", "'variance'", "]", "=", "S", "*", "S", "\n", "super", "(", ")", ".", "set_XY", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.append_XY": [[240, 252], ["gpy.GPHeteroscedasticRegression.set_XY"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY"], ["", "def", "append_XY", "(", "self", ",", "X", ",", "Y", ",", "S", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            X:\n            Y:\n            S: standard deviation\n\n        Returns:\n\n        \"\"\"", "\n", "self", ".", "set_XY", "(", "X", ",", "Y", ",", "S", ")", "# super class remaps this methods to _append_XY after first call, see documentation there", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression._append_XY": [[253, 257], ["numpy.concatenate", "numpy.concatenate", "gpy.GP._append_XY"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression._append_XY"], ["", "def", "_append_XY", "(", "self", ",", "X", ",", "Y", ",", "S", ")", ":", "\n", "        ", "self", ".", "S", "=", "np", ".", "concatenate", "(", "(", "self", ".", "S", ",", "S", ")", ")", "\n", "self", ".", "Y_metadata", "[", "'variance'", "]", "=", "np", ".", "concatenate", "(", "(", "self", ".", "Y_metadata", "[", "'variance'", "]", ",", "S", "*", "S", ")", ")", "\n", "super", "(", ")", ".", "_append_XY", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.ExactGaussianInferenceIncremental.__init__": [[262, 269], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ExactGaussianInferenceIncremental", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_incremental_update", "=", "False", "\n", "self", ".", "_old_LW", "=", "None", "\n", "self", ".", "_old_X", "=", "None", "\n", "self", ".", "_old_Wi", "=", "None", "\n", "self", ".", "_K", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.ExactGaussianInferenceIncremental.inference": [[270, 283], ["super().inference", "kern.K().copy", "GPy.util.linalg.dpotri", "likelihood.gaussian_variance", "kern.K"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.ExactGaussianInferenceIncremental.inference", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.HeteroscedasticGaussian.gaussian_variance"], ["", "def", "inference", "(", "self", ",", "kern", ",", "X", ",", "likelihood", ",", "Y", ",", "mean_function", "=", "None", ",", "Y_metadata", "=", "None", ",", "K", "=", "None", ",", "variance", "=", "None", ",", "\n", "Z_tilde", "=", "None", ")", ":", "\n", "        ", "if", "variance", "is", "None", ":", "\n", "            ", "variance", "=", "likelihood", ".", "gaussian_variance", "(", "Y_metadata", ")", "\n", "\n", "", "posterior", "=", "super", "(", "ExactGaussianInferenceIncremental", ",", "self", ")", ".", "inference", "(", "kern", ",", "X", ",", "likelihood", ",", "Y", ",", "mean_function", ",", "\n", "Y_metadata", ",", "K", ",", "variance", ",", "Z_tilde", ")", "\n", "self", ".", "_old_LW", "=", "posterior", "[", "0", "]", ".", "woodbury_chol", "\n", "self", ".", "_K", "=", "kern", ".", "K", "(", "X", ")", ".", "copy", "(", ")", "\n", "self", ".", "_old_Wi", ",", "_", "=", "dpotri", "(", "self", ".", "_old_LW", ",", "lower", "=", "1", ")", "\n", "# diag.add(self._K, variance + 1e-8)", "\n", "\n", "return", "posterior", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.ExactGaussianInferenceIncremental.incremental_inference": [[284, 332], ["gpy.pdinv_inc", "GPy.util.linalg.dpotrs", "likelihood.exact_inference_gradients", "GPy.inference.latent_function_inference.posterior.PosteriorExact", "mean_function.f", "likelihood.gaussian_variance", "numpy.diag", "numpy.sum", "GPy.util.linalg.tdot"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.pdinv_inc", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.HeteroscedasticGaussian.gaussian_variance"], ["", "def", "incremental_inference", "(", "self", ",", "kern", ",", "X", ",", "likelihood", ",", "Y", ",", "mean_function", "=", "None", ",", "Y_metadata", "=", "None", ",", "K", "=", "None", ",", "variance", "=", "None", ",", "\n", "Z_tilde", "=", "None", ")", ":", "\n", "\n", "# do incremental update", "\n", "        ", "if", "mean_function", "is", "None", ":", "\n", "            ", "m", "=", "0", "\n", "", "else", ":", "\n", "            ", "m", "=", "mean_function", ".", "f", "(", "X", ")", "\n", "\n", "", "if", "variance", "is", "None", ":", "\n", "            ", "variance", "=", "likelihood", ".", "gaussian_variance", "(", "Y_metadata", ")", "\n", "\n", "", "YYT_factor", "=", "Y", "-", "m", "\n", "\n", "\n", "# K_tmp = kern.K(X, X[-1:])", "\n", "K_inc", "=", "kern", ".", "_K", "[", ":", "-", "1", ",", "-", "1", "]", "\n", "K_inc2", "=", "kern", ".", "_K", "[", "-", "1", ":", ",", "-", "1", "]", "\n", "# self._K = np.block([[self._K, K_inc], [K_inc.T, K_inc2]])", "\n", "\n", "# Ky = K.copy()", "\n", "jitter", "=", "variance", "[", "-", "1", "]", "+", "1e-8", "# variance can be given for each point individually, in which case we just take the last point", "\n", "# diag.add(Ky, jitter)", "\n", "\n", "# LW_old = self._old_posterior.woodbury_chol", "\n", "\n", "Wi", ",", "LW", ",", "LWi", ",", "W_logdet", "=", "pdinv_inc", "(", "self", ".", "_old_LW", ",", "K_inc", ",", "K_inc2", "+", "jitter", ",", "self", ".", "_old_Wi", ")", "\n", "\n", "alpha", ",", "_", "=", "dpotrs", "(", "LW", ",", "YYT_factor", ",", "lower", "=", "1", ")", "\n", "\n", "log_marginal", "=", "0.5", "*", "(", "-", "Y", ".", "size", "*", "log_2_pi", "-", "Y", ".", "shape", "[", "1", "]", "*", "W_logdet", "-", "np", ".", "sum", "(", "alpha", "*", "YYT_factor", ")", ")", "\n", "\n", "if", "Z_tilde", "is", "not", "None", ":", "\n", "# This is a correction term for the log marginal likelihood", "\n", "# In EP this is log Z_tilde, which is the difference between the", "\n", "# Gaussian marginal and Z_EP", "\n", "            ", "log_marginal", "+=", "Z_tilde", "\n", "\n", "", "dL_dK", "=", "0.5", "*", "(", "tdot", "(", "alpha", ")", "-", "Y", ".", "shape", "[", "1", "]", "*", "Wi", ")", "\n", "\n", "dL_dthetaL", "=", "likelihood", ".", "exact_inference_gradients", "(", "np", ".", "diag", "(", "dL_dK", ")", ",", "Y_metadata", ")", "\n", "\n", "self", ".", "_old_LW", "=", "LW", "\n", "self", ".", "_old_Wi", "=", "Wi", "\n", "posterior", "=", "Posterior", "(", "woodbury_chol", "=", "LW", ",", "woodbury_vector", "=", "alpha", ",", "K", "=", "K", ")", "\n", "\n", "# TODO add logdet to posterior ?", "\n", "return", "posterior", ",", "log_marginal", ",", "{", "'dL_dK'", ":", "dL_dK", ",", "'dL_dthetaL'", ":", "dL_dthetaL", ",", "'dL_dm'", ":", "alpha", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.__setattr_patch__": [[10, 21], ["super().__setattr__", "hasattr", "gpy..parameter_names", "gpy..index"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.config.Config.__setattr__"], ["def", "__setattr_patch__", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "# override the default behaviour, if setting a param, so broadcasting can by used", "\n", "# fix: ignore names stasrting with '_', this prevents parameter_names(...) to be called, when", "\n", "# private members of a Parameterized class are called (during some tests, this made for 3% runtime)", "\n", "    ", "if", "name", "[", "0", "]", "!=", "'_'", "and", "hasattr", "(", "self", ",", "\"parameters\"", ")", ":", "\n", "        ", "pnames", "=", "self", ".", "parameter_names", "(", "False", ",", "adjust_for_printing", "=", "True", ",", "recursive", "=", "False", ")", "\n", "if", "name", "in", "pnames", ":", "\n", "            ", "param", "=", "self", ".", "parameters", "[", "pnames", ".", "index", "(", "name", ")", "]", "\n", "param", "[", ":", "]", "=", "val", "\n", "return", "\n", "", "", "return", "super", "(", "Parameterized", ",", "self", ")", ".", "__setattr__", "(", "name", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.pdinv_inc": [[334, 373], ["numpy.sqrt().reshape", "numpy.zeros", "numpy.asfortranarray", "Ai_old.dot().reshape", "Ai_old.dot().reshape.dot", "numpy.block", "GPy.util.linalg.symmetrify", "GPy.util.linalg.dtrtrs", "numpy.block", "numpy.sum", "numpy.sqrt", "numpy.log", "Ai_old.dot", "numpy.diag", "numpy.sum", "Ai_old.dot().reshape.T.dot"], "function", ["None"], ["", "", "def", "pdinv_inc", "(", "L_old", ",", "A_inc", ",", "A_inc2", ",", "Ai_old", ",", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    similar to pdinv, but uses old choleski decompositon to compute new\n    as proposed in https://github.com/SheffieldML/GPy/issues/464#issuecomment-285500122\n\n    :rval Ai: the inverse of A\n    :rtype Ai: np.ndarray\n    :rval L: the Cholesky decomposition of A\n    :rtype L: np.ndarray\n    :rval Li: the Cholesky decomposition of Ai\n    :rtype Li: np.ndarray (set to None for now, because not needed)\n    :rval logdet: the log of the determinant of A\n    :rtype logdet: float64\n    \"\"\"", "\n", "\"\"\" \n    \"\"\"", "\n", "# A_inc = A_inc.reshape(-1)", "\n", "u", "=", "dtrtrs", "(", "L_old", ",", "A_inc", ",", "lower", "=", "1", ")", "[", "0", "]", "\n", "v", "=", "np", ".", "sqrt", "(", "A_inc2", "-", "np", ".", "sum", "(", "u", "*", "u", ")", ")", ".", "reshape", "(", "1", ")", "\n", "z", "=", "np", ".", "zeros", "(", "(", "A_inc", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "L", "=", "np", ".", "asfortranarray", "(", "np", ".", "block", "(", "[", "[", "L_old", ",", "z", "]", ",", "[", "u", ",", "v", "]", "]", ")", ")", "\n", "logdet", "=", "2.", "*", "np", ".", "sum", "(", "np", ".", "log", "(", "np", ".", "diag", "(", "L", ")", ")", ")", "\n", "\n", "# _Ai, _ = dpotri(L, lower=1)  # consider also incrementally updating this", "\n", "\n", "# incrementally update the inverse", "\n", "alpha", "=", "Ai_old", ".", "dot", "(", "A_inc", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "# print('alpha', alpha)", "\n", "gamma", "=", "alpha", ".", "dot", "(", "alpha", ".", "T", ")", "\n", "# print('gamma', gamma)", "\n", "beta", "=", "1", "/", "(", "A_inc2", "-", "alpha", ".", "T", ".", "dot", "(", "A_inc", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "beta_alpha", "=", "-", "beta", "*", "alpha", "\n", "# print('beta', beta)", "\n", "Ai", "=", "np", ".", "block", "(", "[", "[", "Ai_old", "+", "beta", "*", "gamma", ",", "beta_alpha", "]", ",", "[", "beta_alpha", ".", "T", ",", "beta", "]", "]", ")", "\n", "# print(Ai -_Ai)", "\n", "\n", "symmetrify", "(", "Ai", ")", "\n", "\n", "return", "Ai", ",", "L", ",", "None", ",", "logdet", "# could also return Li as in pdinv, but we don't need this right now", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.extend_instance": [[374, 379], ["type"], "function", ["None"], ["", "def", "extend_instance", "(", "obj", ",", "cls", ")", ":", "\n", "    ", "\"\"\"Apply mixins to a class instance after creation (https://stackoverflow.com/a/31075641) \"\"\"", "\n", "base_cls", "=", "obj", ".", "__class__", "\n", "base_cls_name", "=", "obj", ".", "__class__", ".", "__name__", "\n", "obj", ".", "__class__", "=", "type", "(", "base_cls_name", ",", "(", "base_cls", ",", "cls", ")", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.__init__": [[47, 64], ["febo.models.ConfidenceBoundModel.__init__", "gp.GP._get_kernel", "gp.GP._get_gp", "gp.GP.kernel.copy", "numpy.asfortranarray", "gp.GP.gp.posterior._woodbury_vector.copy", "gp.GP.gp.X.copy", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_kernel", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.HeteroscedasticGP._get_gp", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "super", "(", "GP", ",", "self", ")", ".", "__init__", "(", "domain", ")", "\n", "\n", "# the description of a kernel", "\n", "self", ".", "kernel", "=", "self", ".", "_get_kernel", "(", ")", "\n", "\n", "# calling of the kernel", "\n", "self", ".", "gp", "=", "self", ".", "_get_gp", "(", ")", "\n", "# number of data points", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "kernel", "=", "self", ".", "kernel", ".", "copy", "(", ")", "\n", "self", ".", "_woodbury_chol", "=", "np", ".", "asfortranarray", "(", "self", ".", "gp", ".", "posterior", ".", "_woodbury_chol", ")", "# we create a copy of the matrix in fortranarray, such that we can directly pass it to lapack dtrtrs without doing another copy", "\n", "self", ".", "_woodbury_vector", "=", "self", ".", "gp", ".", "posterior", ".", "_woodbury_vector", ".", "copy", "(", ")", "\n", "self", ".", "_X", "=", "self", ".", "gp", ".", "X", ".", "copy", "(", ")", "\n", "self", ".", "_Y", "=", "np", ".", "empty", "(", "shape", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "_beta_cached", "=", "2", "\n", "self", ".", "_bias", "=", "self", ".", "config", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_kernel": [[66, 78], ["len", "febo.utils.locate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate"], ["", "def", "_get_kernel", "(", "self", ")", ":", "\n", "        ", "kernel", "=", "None", "\n", "for", "kernel_module", ",", "kernel_params", "in", "self", ".", "config", ".", "kernels", ":", "\n", "            ", "input_dim", "=", "self", ".", "domain", ".", "d", "\n", "if", "'active_dims'", "in", "kernel_params", ":", "\n", "                ", "input_dim", "=", "len", "(", "kernel_params", "[", "'active_dims'", "]", ")", "\n", "", "kernel_part", "=", "locate", "(", "kernel_module", ")", "(", "input_dim", "=", "input_dim", ",", "**", "kernel_params", ")", "\n", "if", "kernel", "is", "None", ":", "\n", "                ", "kernel", "=", "kernel_part", "\n", "", "else", ":", "\n", "                ", "kernel", "+=", "kernel_part", "\n", "", "", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._beta": [[79, 81], ["None"], "methods", ["None"], ["", "def", "_beta", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_beta_cached", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.scale": [[82, 88], ["sum", "numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "gp", ".", "kern", ".", "name", "==", "'sum'", ":", "\n", "            ", "return", "sum", "(", "[", "part", ".", "variance", "for", "part", "in", "self", ".", "gp", ".", "kern", ".", "parts", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "sqrt", "(", "self", ".", "gp", ".", "kern", ".", "variance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.bias": [[89, 92], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "bias", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_gp": [[93, 95], ["febo.models.gpy.GPRegression"], "methods", ["None"], ["", "def", "_get_gp", "(", "self", ")", ":", "\n", "        ", "return", "GPRegression", "(", "self", ".", "domain", ".", "d", ",", "self", ".", "kernel", ",", "noise_var", "=", "self", ".", "config", ".", "noise_var", ",", "calculate_gradients", "=", "self", ".", "config", ".", "calculate_gradients", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.add_data": [[96, 112], ["numpy.atleast_2d", "numpy.atleast_2d", "numpy.vstack", "gp.GP.gp.append_XY", "gp.GP._update_cache"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.append_XY", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._update_cache"], ["", "def", "add_data", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Add a new function observation to the GPs.\n        Parameters\n        ----------\n        x: 2d-array\n        y: 2d-array\n        \"\"\"", "\n", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "np", ".", "atleast_2d", "(", "y", ")", "\n", "\n", "self", ".", "_Y", "=", "np", ".", "vstack", "(", "[", "self", ".", "_Y", ",", "y", "]", ")", "# store unbiased data", "\n", "self", ".", "gp", ".", "append_XY", "(", "x", ",", "y", "-", "self", ".", "_bias", ")", "\n", "\n", "self", ".", "t", "+=", "y", ".", "shape", "[", "1", "]", "\n", "self", ".", "_update_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize": [[114, 121], ["gp.GP._update_beta", "gp.GP._optimize_bias", "gp.GP._optimize_var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._update_beta", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._optimize_bias", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._optimize_var"], ["", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "optimize_bias", ":", "\n", "            ", "self", ".", "_optimize_bias", "(", ")", "\n", "", "if", "self", ".", "config", ".", "optimize_var", ":", "\n", "            ", "self", ".", "_optimize_var", "(", ")", "\n", "\n", "", "self", ".", "_update_beta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._update_cache": [[123, 130], ["numpy.asfortranarray", "gp.GP.gp.posterior._woodbury_vector.copy", "gp.GP.gp.X.copy", "gp.GP._update_beta"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._update_beta"], ["", "def", "_update_cache", "(", "self", ")", ":", "\n", "# if not self.config.calculate_gradients:", "\n", "        ", "self", ".", "_woodbury_chol", "=", "np", ".", "asfortranarray", "(", "self", ".", "gp", ".", "posterior", ".", "_woodbury_chol", ")", "\n", "self", ".", "_woodbury_vector", "=", "self", ".", "gp", ".", "posterior", ".", "_woodbury_vector", ".", "copy", "(", ")", "\n", "self", ".", "_X", "=", "self", ".", "gp", ".", "X", ".", "copy", "(", ")", "\n", "\n", "self", ".", "_update_beta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._optimize_bias": [[131, 135], ["[].copy", "gp.GP._set_bias", "logger.info", "scipy.optimize.minimize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._set_bias", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize"], ["", "def", "_optimize_bias", "(", "self", ")", ":", "\n", "        ", "self", ".", "_bias", "=", "minimize", "(", "self", ".", "_bias_loss", ",", "self", ".", "_bias", ",", "method", "=", "'L-BFGS-B'", ")", "[", "'x'", "]", ".", "copy", "(", ")", "\n", "self", ".", "_set_bias", "(", "self", ".", "_bias", ")", "\n", "logger", ".", "info", "(", "f\"Updated bias to {self._bias}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._bias_loss": [[136, 144], ["GPy.util.linalg.dpotrs", "gp.GP.gp.kern.K", "numpy.dot", "new_woodbury_vector.T.dot", "numpy.asscalar", "numpy.sum", "numpy.square"], "methods", ["None"], ["", "def", "_bias_loss", "(", "self", ",", "c", ")", ":", "\n", "# calculate mean and norm for new bias via a new woodbury_vector", "\n", "        ", "new_woodbury_vector", ",", "_", "=", "dpotrs", "(", "self", ".", "_woodbury_chol", ",", "self", ".", "_Y", "-", "c", ",", "lower", "=", "1", ")", "\n", "K", "=", "self", ".", "gp", ".", "kern", ".", "K", "(", "self", ".", "gp", ".", "X", ")", "\n", "mean", "=", "np", ".", "dot", "(", "K", ",", "new_woodbury_vector", ")", "\n", "norm", "=", "new_woodbury_vector", ".", "T", ".", "dot", "(", "mean", ")", "\n", "# loss is least_squares_error + norm", "\n", "return", "np", ".", "asscalar", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "mean", "+", "c", "-", "self", ".", "_Y", ")", ")", "+", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._set_bias": [[145, 149], ["gp.GP.gp.set_Y", "gp.GP.gp.posterior._woodbury_vector.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "_set_bias", "(", "self", ",", "c", ")", ":", "\n", "        ", "self", ".", "_bias", "=", "c", "\n", "self", ".", "gp", ".", "set_Y", "(", "self", ".", "_Y", "-", "c", ")", "\n", "self", ".", "_woodbury_vector", "=", "self", ".", "gp", ".", "posterior", ".", "_woodbury_vector", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._update_beta": [[150, 154], ["gp.GP._get_logdet", "gp.GP._get_logdet_prior_noise", "numpy.asscalar", "numpy.sqrt", "gp.GP._norm", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_logdet", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.HeteroscedasticGP._get_logdet_prior_noise", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._norm"], ["", "def", "_update_beta", "(", "self", ")", ":", "\n", "        ", "logdet", "=", "self", ".", "_get_logdet", "(", ")", "\n", "logdet_priornoise", "=", "self", ".", "_get_logdet_prior_noise", "(", ")", "\n", "self", ".", "_beta_cached", "=", "np", ".", "asscalar", "(", "np", ".", "sqrt", "(", "2", "*", "np", ".", "log", "(", "1", "/", "self", ".", "delta", ")", "+", "(", "logdet", "-", "logdet_priornoise", ")", ")", "+", "self", ".", "_norm", "(", ")", ")", "\n", "# print(self._norm(), 'norm')", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._optimize_var": [[158, 180], ["gp.GP.gp.optimize", "logger.info", "p.fix", "gp.GP.gp.kern.variance.unfix", "numpy.asscalar", "p.unfix", "part.variance.unfix", "numpy.asscalar.append", "numpy.asscalar"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "_optimize_var", "(", "self", ")", ":", "\n", "# fix all parameters", "\n", "        ", "for", "p", "in", "self", ".", "gp", ".", "parameters", ":", "\n", "            ", "p", ".", "fix", "(", ")", "\n", "\n", "", "if", "self", ".", "gp", ".", "kern", ".", "name", "==", "'sum'", ":", "\n", "            ", "for", "part", "in", "self", ".", "gp", ".", "kern", ".", "parts", ":", "\n", "                ", "part", ".", "variance", ".", "unfix", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "gp", ".", "kern", ".", "variance", ".", "unfix", "(", ")", "\n", "", "self", ".", "gp", ".", "optimize", "(", ")", "\n", "if", "self", ".", "gp", ".", "kern", ".", "name", "==", "'sum'", ":", "\n", "            ", "values", "=", "[", "]", "\n", "for", "part", "in", "self", ".", "gp", ".", "kern", ".", "parts", ":", "\n", "                ", "values", ".", "append", "(", "np", ".", "asscalar", "(", "part", ".", "variance", ".", "values", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "values", "=", "np", ".", "asscalar", "(", "self", ".", "gp", ".", "kern", ".", "variance", ".", "values", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"Updated prior variance to {values}\"", ")", "\n", "# unfix all parameters", "\n", "for", "p", "in", "self", ".", "gp", ".", "parameters", ":", "\n", "            ", "p", ".", "unfix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_logdet": [[181, 183], ["numpy.sum", "numpy.log", "numpy.diag"], "methods", ["None"], ["", "", "def", "_get_logdet", "(", "self", ")", ":", "\n", "        ", "return", "2.", "*", "np", ".", "sum", "(", "np", ".", "log", "(", "np", ".", "diag", "(", "self", ".", "gp", ".", "posterior", ".", "_woodbury_chol", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._get_logdet_prior_noise": [[184, 186], ["numpy.log"], "methods", ["None"], ["", "def", "_get_logdet_prior_noise", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "t", "*", "np", ".", "log", "(", "self", ".", "gp", ".", "likelihood", ".", "variance", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.mean_var": [[188, 203], ["numpy.atleast_2d", "gp.GP.gp.predict_noiseless", "gp.GP._raw_predict"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._raw_predict"], ["", "def", "mean_var", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Recompute the confidence intervals form the GP.\n        Parameters\n        ----------\n        context: ndarray\n            Array that contains the context used to compute the sets\n        \"\"\"", "\n", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "\n", "if", "self", ".", "config", ".", "calculate_gradients", ":", "\n", "            ", "mean", ",", "var", "=", "self", ".", "gp", ".", "predict_noiseless", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "self", ".", "_raw_predict", "(", "x", ")", "\n", "\n", "", "return", "mean", "+", "self", ".", "_bias", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.mean_var_grad": [[204, 206], ["gp.GP.gp.predictive_gradients"], "methods", ["None"], ["", "def", "mean_var_grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "gp", ".", "predictive_gradients", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.var": [[207, 209], ["gp.GP.mean_var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "var", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mean_var", "(", "x", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.predictive_var_scattered": [[210, 223], ["numpy.vstack", "numpy.diag", "gp.GP.gp.predict_noiseless"], "methods", ["None"], ["", "def", "predictive_var_scattered", "(", "self", ",", "X_cond", ",", "X_target", ")", ":", "\n", "# X_cond = np.atleast_2d(X_cond)", "\n", "# X_target = np.atleast_2d(X_target)", "\n", "# KXX =", "\n", "# var_X, KXX = self._raw_predict_covar(X_cond, X_target)", "\n", "# if var_X_target is None:", "\n", "#     var_X_target = self.var(X_target)", "\n", "\n", "        ", "X_joined", "=", "np", ".", "vstack", "(", "(", "X_target", ",", "X_cond", ")", ")", "\n", "COV", "=", "self", ".", "gp", ".", "predict_noiseless", "(", "X_joined", ",", "full_cov", "=", "True", ")", "[", "1", "]", "\n", "covar", "=", "COV", "[", "1", ":", ",", "0", ":", "1", "]", "\n", "var_X", "=", "np", ".", "diag", "(", "COV", "[", "1", ":", ",", "1", ":", "]", ")", "\n", "return", "covar", "*", "covar", ",", "var_X", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.predictive_var": [[224, 252], ["gp.GP.var", "numpy.vstack", "gp.GP.var", "print", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "gp.GP.gp.predict_noiseless"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["", "def", "predictive_var", "(", "self", ",", "X_cond", ",", "X_target", ",", "S_X", ",", "var_X_target", "=", "None", ")", ":", "\n", "# X_cond = np.atleast_2d(X_cond)", "\n", "# X_target = np.atleast_2d(X_target)", "\n", "# KXX =", "\n", "# var_X, KXX = self._raw_predict_covar(X_cond, X_target)", "\n", "# if var_X_target is None:", "\n", "#     var_X_target = self.var(X_target)", "\n", "\n", "        ", "var_X", "=", "self", ".", "var", "(", "X_cond", ")", "\n", "X_joined", "=", "np", ".", "vstack", "(", "(", "X_target", ",", "X_cond", ")", ")", "\n", "covar", "=", "self", ".", "gp", ".", "predict_noiseless", "(", "X_joined", ",", "full_cov", "=", "True", ")", "[", "1", "]", "[", "1", ":", ",", "0", ":", "1", "]", "\n", "var_X_target", "=", "self", ".", "var", "(", "X_target", ")", "\n", "\n", "return", "var_X_target", "-", "covar", "*", "covar", "/", "(", "S_X", "*", "S_X", "+", "var_X", ")", "\n", "\n", "# TODO There are numerical problems with the version below", "\n", "# It fails te testcase with large lengthscale", "\n", "# print(var_Xcond)", "\n", "print", "(", "\"------\"", ")", "\n", "print", "(", "np", ".", "min", "(", "S_X", "*", "S_X", ")", ")", "\n", "print", "(", "np", ".", "max", "(", "KXX", "*", "KXX", "/", "(", "S_X", "*", "S_X", "+", "var_X", ")", ")", ")", "\n", "print", "(", "np", ".", "min", "(", "var_X", ")", ")", "\n", "print", "(", "'rho'", ",", "np", ".", "min", "(", "S_X", "*", "S_X", ")", ")", "\n", "print", "(", "np", ".", "min", "(", "(", "S_X", "*", "S_X", "+", "var_X", ")", ")", ")", "\n", "print", "(", "np", ".", "max", "(", "1", "/", "(", "S_X", "*", "S_X", "+", "var_X", ")", ")", ")", "\n", "print", "(", "(", "KXX", "*", "KXX", "/", "(", "S_X", "*", "S_X", "+", "var_X", ")", ")", ".", "shape", ")", "\n", "print", "(", "\"------\"", ")", "\n", "return", "var_X_target", "-", "KXX", "*", "KXX", "/", "(", "S_X", "*", "S_X", "+", "var_X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.mean": [[253, 255], ["gp.GP.mean_var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], ["", "def", "mean", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mean_var", "(", "x", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.set_data": [[256, 263], ["gp.GP.gp.set_XY", "gp.GP._update_cache", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._update_cache"], ["", "def", "set_data", "(", "self", ",", "X", ",", "Y", ",", "append", "=", "True", ")", ":", "\n", "        ", "if", "append", ":", "\n", "            ", "X", "=", "np", ".", "concatenate", "(", "(", "self", ".", "gp", ".", "X", ",", "X", ")", ")", "\n", "Y", "=", "np", ".", "concatenate", "(", "(", "self", ".", "gp", ".", "Y", ",", "Y", ")", ")", "\n", "", "self", ".", "gp", ".", "set_XY", "(", "X", ",", "Y", ")", "\n", "self", ".", "t", "=", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "_update_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.sample": [[264, 294], ["GPSampler", "gp.GP.gp.X.copy", "gp.GP.gp.Y.copy", "GPy.models.GPHeteroscedasticRegression", "numpy.atleast_2d", "numpy.empty", "enumerate", "numpy.ones", "gp.GP.m.posterior_samples_f", "numpy.vstack", "numpy.vstack", "numpy.vstack", "GPy.models.GPHeteroscedasticRegression", "x.reshape"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "sample", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "class", "GPSampler", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "X", ",", "Y", ",", "kernel", ",", "var", ")", ":", "\n", "                ", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "Y", "\n", "self", ".", "N", "=", "var", "*", "np", ".", "ones", "(", "shape", "=", "Y", ".", "shape", ")", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "m", "=", "GPy", ".", "models", ".", "GPHeteroscedasticRegression", "(", "self", ".", "X", ",", "self", ".", "Y", ",", "self", ".", "kernel", ")", "\n", "self", ".", "m", "[", "'.*het_Gauss.variance'", "]", "=", "self", ".", "N", "\n", "\n", "", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "                ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "sample", "=", "np", ".", "empty", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "# iteratively generate sample values for all x in x_test", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "                    ", "sample", "[", "i", "]", "=", "self", ".", "m", ".", "posterior_samples_f", "(", "x", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "size", "=", "1", ")", "\n", "\n", "# add observation as without noise", "\n", "self", ".", "X", "=", "np", ".", "vstack", "(", "(", "self", ".", "X", ",", "x", ")", ")", "\n", "self", ".", "Y", "=", "np", ".", "vstack", "(", "(", "self", ".", "Y", ",", "sample", "[", "i", "]", ")", ")", "\n", "self", ".", "N", "=", "np", ".", "vstack", "(", "(", "self", ".", "N", ",", "0", ")", ")", "\n", "\n", "# recalculate model", "\n", "self", ".", "m", "=", "GPy", ".", "models", ".", "GPHeteroscedasticRegression", "(", "self", ".", "X", ",", "self", ".", "Y", ",", "self", ".", "kernel", ")", "\n", "self", ".", "m", "[", "'.*het_Gauss.variance'", "]", "=", "self", ".", "N", "# Set the noise parameters to the error in Y", "\n", "\n", "", "return", "sample", "\n", "\n", "", "", "return", "GPSampler", "(", "self", ".", "gp", ".", "X", ".", "copy", "(", ")", ",", "self", ".", "gp", ".", "Y", ".", "copy", "(", ")", ",", "self", ".", "kernel", ",", "self", ".", "gp", ".", "likelihood", ".", "variance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._raw_predict": [[295, 307], ["gp.GP.kernel.K", "numpy.dot", "gp.GP.kernel.Kdiag", "len", "mu.reshape.reshape.reshape", "scipy.linalg.lapack.dtrtrs", "numpy.square().sum", "numpy.square"], "methods", ["None"], ["", "def", "_raw_predict", "(", "self", ",", "Xnew", ")", ":", "\n", "\n", "        ", "Kx", "=", "self", ".", "kernel", ".", "K", "(", "self", ".", "_X", ",", "Xnew", ")", "\n", "mu", "=", "np", ".", "dot", "(", "Kx", ".", "T", ",", "self", ".", "_woodbury_vector", ")", "\n", "\n", "if", "len", "(", "mu", ".", "shape", ")", "==", "1", ":", "\n", "            ", "mu", "=", "mu", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "Kxx", "=", "self", ".", "kernel", ".", "Kdiag", "(", "Xnew", ")", "\n", "tmp", "=", "lapack", ".", "dtrtrs", "(", "self", ".", "_woodbury_chol", ",", "Kx", ",", "lower", "=", "1", ",", "trans", "=", "0", ",", "unitdiag", "=", "0", ")", "[", "0", "]", "\n", "var", "=", "(", "Kxx", "-", "np", ".", "square", "(", "tmp", ")", ".", "sum", "(", "0", ")", ")", "[", ":", ",", "None", "]", "\n", "return", "mu", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._raw_predict_covar": [[308, 323], ["gp.GP.kernel.K", "gp.GP.kernel.K", "gp.GP.kernel.Kdiag", "numpy.vstack", "scipy.linalg.lapack.dtrtrs", "tmp1.T.dot", "numpy.square().sum", "numpy.square"], "methods", ["None"], ["", "def", "_raw_predict_covar", "(", "self", ",", "Xnew", ",", "Xcond", ")", ":", "\n", "        ", "Kx", "=", "self", ".", "kernel", ".", "K", "(", "self", ".", "_X", ",", "np", ".", "vstack", "(", "(", "Xnew", ",", "Xcond", ")", ")", ")", "\n", "tmp", "=", "lapack", ".", "dtrtrs", "(", "self", ".", "_woodbury_chol", ",", "Kx", ",", "lower", "=", "1", ",", "trans", "=", "0", ",", "unitdiag", "=", "0", ")", "[", "0", "]", "\n", "\n", "n", "=", "Xnew", ".", "shape", "[", "0", "]", "\n", "tmp1", "=", "tmp", "[", ":", ",", ":", "n", "]", "\n", "tmp2", "=", "tmp", "[", ":", ",", "n", ":", "]", "\n", "\n", "Kxx", "=", "self", ".", "kernel", ".", "K", "(", "Xnew", ",", "Xcond", ")", "\n", "var", "=", "Kxx", "-", "(", "tmp1", ".", "T", ")", ".", "dot", "(", "tmp2", ")", "\n", "\n", "Kxx_new", "=", "self", ".", "kernel", ".", "Kdiag", "(", "Xnew", ")", "\n", "var_Xnew", "=", "(", "Kxx_new", "-", "np", ".", "square", "(", "tmp1", ")", ".", "sum", "(", "0", ")", ")", "[", ":", ",", "None", "]", "\n", "# var = var", "\n", "return", "var_Xnew", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._norm": [[324, 327], ["gp.GP._woodbury_vector.T.dot().dot", "numpy.asscalar", "numpy.sqrt", "gp.GP._woodbury_vector.T.dot", "gp.GP.gp.kern.K"], "methods", ["None"], ["", "def", "_norm", "(", "self", ")", ":", "\n", "        ", "norm", "=", "self", ".", "_woodbury_vector", ".", "T", ".", "dot", "(", "self", ".", "gp", ".", "kern", ".", "K", "(", "self", ".", "gp", ".", "X", ")", ")", ".", "dot", "(", "self", ".", "_woodbury_vector", ")", "\n", "return", "np", ".", "asscalar", "(", "np", ".", "sqrt", "(", "norm", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.__getstate__": [[330, 334], ["gp.GP.__dict__.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "self_dict", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "del", "self_dict", "[", "'gp'", "]", "# remove the gp from state dict to allow pickling. calculations are done via the cache woodbury/cholesky", "\n", "return", "self_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.HeteroscedasticGP._get_gp": [[338, 340], ["febo.models.gpy.GPHeteroscedasticRegression"], "methods", ["None"], ["    ", "def", "_get_gp", "(", "self", ")", ":", "\n", "         ", "return", "GPHeteroscedasticRegression", "(", "self", ".", "domain", ".", "d", ",", "self", ".", "kernel", ",", "calculate_gradients", "=", "self", ".", "config", ".", "calculate_gradients", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.HeteroscedasticGP.add_data": [[341, 349], ["numpy.atleast_2d", "numpy.atleast_2d", "numpy.atleast_2d", "numpy.vstack", "gp.HeteroscedasticGP.gp.append_XY", "gp.HeteroscedasticGP._update_cache"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.append_XY", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP._update_cache"], ["", "def", "add_data", "(", "self", ",", "x", ",", "y", ",", "s", ")", ":", "\n", "        ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "np", ".", "atleast_2d", "(", "y", ")", "\n", "s", "=", "np", ".", "atleast_2d", "(", "s", ")", "\n", "self", ".", "_Y", "=", "np", ".", "vstack", "(", "[", "self", ".", "_Y", ",", "y", "]", ")", "\n", "self", ".", "gp", ".", "append_XY", "(", "x", ",", "y", "-", "self", ".", "_bias", ",", "s", ")", "\n", "self", ".", "t", "+=", "y", ".", "shape", "[", "1", "]", "\n", "self", ".", "_update_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.HeteroscedasticGP.requires_std": [[360, 363], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_std", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.HeteroscedasticGP._get_logdet_prior_noise": [[364, 366], ["numpy.sum", "numpy.log"], "methods", ["None"], ["", "def", "_get_logdet_prior_noise", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "2", "*", "np", ".", "log", "(", "self", ".", "gp", ".", "S", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.optimize_gp": [[33, 37], ["experiment.algorithm.f.gp.kern.variance.fix", "experiment.algorithm.f.gp.optimize", "print"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize"], ["", "def", "optimize_gp", "(", "experiment", ")", ":", "\n", "    ", "experiment", ".", "algorithm", ".", "f", ".", "gp", ".", "kern", ".", "variance", ".", "fix", "(", ")", "\n", "experiment", ".", "algorithm", ".", "f", ".", "gp", ".", "optimize", "(", ")", "\n", "print", "(", "experiment", ".", "algorithm", ".", "f", ".", "gp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.__init__": [[12, 20], ["None"], "methods", ["None"], ["_section", "=", "'algorithm'", "\n", "\n", "\n", "", "@", "assign_config", "(", "ModelMixinConfig", ")", "\n", "class", "ModelMixin", ":", "\n", "    "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.mean": [[21, 33], ["None"], "methods", ["None"], ["\n", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            model: optional. If a model is passed, this is used instead of the model according to the config\n\n        Returns:\n\n        \"\"\"", "\n", "super", "(", "ModelMixin", ",", "self", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "self", ".", "_model_domain", "=", "kwargs", ".", "get", "(", "'model_domain'", ",", "self", ".", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.var": [[34, 46], ["None"], "methods", ["None"], ["config_manager", ".", "load_data", "(", "self", ".", "config", ".", "model_config", ")", "\n", "\n", "# if model was passed as kwarg, use it, else create a new model from config", "\n", "self", ".", "model", "=", "kwargs", ".", "get", "(", "'model'", ",", "self", ".", "config", ".", "model", "(", "domain", "=", "self", ".", "_model_domain", ")", ")", "\n", "\n", "self", ".", "_has_constraints_model", "=", "self", ".", "config", ".", "constraints_model", "is", "not", "None", "\n", "if", "self", ".", "_has_constraints_model", ":", "\n", "            ", "config_manager", ".", "load_data", "(", "self", ".", "config", ".", "constraints_model_config", ")", "\n", "self", ".", "s", "=", "kwargs", ".", "get", "(", "'constraint_model'", ",", "[", "self", ".", "config", ".", "constraints_model", "(", "domain", "=", "self", ".", "_model_domain", ")", "for", "_", "in", "range", "(", "self", ".", "num_constraints", ")", "]", ")", "\n", "\n", "", "self", ".", "_has_noise_model", "=", "self", ".", "config", ".", "noise_model", "is", "not", "None", "\n", "if", "self", ".", "_has_noise_model", ":", "\n", "            ", "config_manager", ".", "load_data", "(", "self", ".", "config", ".", "noise_model_config", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std": [[47, 49], ["numpy.sqrt", "model.Model.var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["self", ".", "noise", "=", "kwargs", ".", "get", "(", "'noise_model'", ",", "self", ".", "config", ".", "noise_model", "(", "domain", "=", "self", ".", "_model_domain", ")", ")", "\n", "\n", "# add initial data", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.mean_var": [[50, 63], ["None"], "methods", ["None"], ["", "if", "not", "self", ".", "initial_data", "is", "None", ":", "\n", "            ", "for", "evaluation", "in", "self", ".", "initial_data", ":", "\n", "                ", "self", ".", "_add_data_to_models", "(", "evaluation", ")", "\n", "\n", "", "", "self", ".", "_initialize_best_prediction_algorithm", "(", "kwargs", ".", "copy", "(", ")", ")", "\n", "\n", "", "def", "_initialize_best_prediction_algorithm", "(", "self", ",", "greedy_initialize_kwargs", ")", ":", "\n", "# avoid mutual imports since Greedy itself uses a ModelMixin", "\n", "        ", "from", "febo", ".", "algorithms", ".", "greedy", "import", "SafeGreedy", ",", "Greedy", "\n", "# initialize an algorithm to calculate best predicted point", "\n", "self", ".", "_best_prediction_algorithm", "=", "None", "\n", "if", "not", "isinstance", "(", "self", ",", "(", "SafeGreedy", ",", "Greedy", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ",", "SafetyMixin", ")", ":", "\n", "                ", "self", ".", "_best_prediction_algorithm", "=", "SafeGreedy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.mean_var_grad": [[64, 73], ["None"], "methods", ["None"], ["", "else", ":", "\n", "                ", "self", ".", "_best_prediction_algorithm", "=", "Greedy", "(", ")", "\n", "\n", "# do not pass any initial data to greedy algorithm, as we are using the current model", "\n", "", "if", "'initial_data'", "in", "greedy_initialize_kwargs", ":", "\n", "                ", "del", "greedy_initialize_kwargs", "[", "'initial_data'", "]", "\n", "", "greedy_initialize_kwargs", "[", "'model'", "]", "=", "self", ".", "model", "\n", "if", "self", ".", "_has_noise_model", ":", "\n", "                ", "greedy_initialize_kwargs", "[", "'noise_model'", "]", "=", "self", ".", "noise", "\n", "", "if", "self", ".", "_has_constraints_model", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.add_data": [[74, 84], ["None"], "methods", ["None"], ["                ", "greedy_initialize_kwargs", "[", "'constraint_model'", "]", "=", "self", ".", "s", "\n", "\n", "", "self", ".", "_best_prediction_algorithm", ".", "initialize", "(", "**", "greedy_initialize_kwargs", ")", "\n", "\n", "\n", "", "", "def", "add_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\" by default just passes the observed data to the model \"\"\"", "\n", "super", "(", "ModelMixin", ",", "self", ")", ".", "add_data", "(", "data", ")", "\n", "self", ".", "_add_data_to_models", "(", "data", ")", "\n", "\n", "", "def", "_add_data_to_models", "(", "self", ",", "data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.sample": [[85, 96], ["None"], "methods", ["None"], ["        ", "x", "=", "self", ".", "_get_x_from_data", "(", "data", ")", "\n", "if", "self", ".", "model", ".", "requires_std", ":", "\n", "            ", "self", ".", "model", ".", "add_data", "(", "x", ",", "data", "[", "\"y\"", "]", ",", "self", ".", "_get_std", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "add_data", "(", "x", ",", "data", "[", "\"y\"", "]", ")", "\n", "\n", "", "if", "self", ".", "_has_constraints_model", "and", "self", ".", "num_constraints", ":", "\n", "            ", "if", "self", ".", "s", "[", "0", "]", ".", "requires_std", ":", "\n", "                ", "for", "m", ",", "s", ",", "s_std", "in", "zip", "(", "self", ".", "s", ",", "data", "[", "'s'", "]", ",", "data", "[", "'s_std'", "]", ")", ":", "\n", "                    ", "m", ".", "add_data", "(", "x", ",", "s", ",", "s_std", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "m", ",", "s", "in", "zip", "(", "self", ".", "s", ",", "data", "[", "'s'", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info": [[98, 104], ["None"], "methods", ["None"], ["\n", "", "", "", "if", "self", ".", "_has_noise_model", ":", "\n", "            ", "if", "self", ".", "noise", ".", "requires_std", ":", "\n", "                ", "self", ".", "noise", ".", "add_data", "(", "x", ",", "data", "[", "'y_std'", "]", ",", "data", "[", "'y_std_std'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "noise", ".", "add_data", "(", "x", ",", "data", "[", "'y_std'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.requires_std": [[106, 109], ["None"], "methods", ["None"], ["        ", "return", "data", "[", "'x'", "]", "\n", "\n", "", "def", "_get_std", "(", "self", ",", "data", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.predictive_var": [[110, 123], ["None"], "methods", ["None"], ["\n", "return", "data", "[", "\"y_std\"", "]", "\n", "\n", "", "def", "next", "(", "self", ",", "context", "=", "None", ")", ":", "\n", "        ", "x", ",", "additional_data", "=", "super", "(", ")", ".", "next", "(", "context", "=", "context", ")", "\n", "# m,v = self.model.mean_var(x)", "\n", "# additional_data['y_model'] = m", "\n", "# additional_data['y_std_model'] = np.sqrt(v)", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.__init__": [[136, 150], ["model.Model.__init__", "isinstance", "febo.utils.locate", "logger.info", "isinstance", "logger.info"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.locate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "", "def", "best_predicted", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_best_prediction_algorithm", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "self", ".", "_best_prediction_algorithm", ".", "next", "(", ")", "[", "0", "]", "\n", "\n", "", "def", "_get_dtype_fields", "(", "self", ")", ":", "\n", "        ", "fields", "=", "super", "(", ")", ".", "_get_dtype_fields", "(", ")", "\n", "fields", ".", "append", "(", "(", "'y_model'", ",", "'f8'", ")", ")", "\n", "fields", ".", "append", "(", "(", "'y_std_model'", ",", "'f8'", ")", ")", "\n", "return", "fields", "\n", "\n", "", "def", "get_joined_constrained_cb", "(", "self", ",", "X", ")", ":", "\n", "        ", "joined_ucb", "=", "np", ".", "empty", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "num_constraints", ")", ")", "\n", "joined_lcb", "=", "np", ".", "empty", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "num_constraints", ")", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.delta": [[151, 158], ["None"], "methods", ["None"], ["for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "s", ")", ":", "\n", "            ", "mean", ",", "var", "=", "s", ".", "mean_var", "(", "X", ")", "\n", "mean", "=", "mean", ".", "flatten", "(", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "var", ".", "flatten", "(", ")", ")", "\n", "joined_lcb", "[", ":", ",", "i", "]", ",", "joined_ucb", "[", ":", ",", "i", "]", "=", "mean", "-", "s", ".", "beta", "*", "std", ",", "mean", "+", "s", ".", "beta", "*", "std", "\n", "\n", "\n", "# Safe is <=0", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta": [[159, 165], ["model.ConfidenceBoundModel.__beta"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.__beta"], ["", "return", "np", ".", "max", "(", "joined_lcb", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "np", ".", "max", "(", "joined_ucb", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.__beta": [[166, 168], ["model.ConfidenceBoundModel._beta"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel._beta"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.__beta_function": [[169, 171], ["model.ConfidenceBoundModel._beta_function"], "methods", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel._beta": [[172, 177], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.ucb": [[178, 191], ["model.ConfidenceBoundModel.mean_var", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.lcb": [[192, 205], ["model.ConfidenceBoundModel.mean_var", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.ci": [[206, 220], ["model.ConfidenceBoundModel.mean_var", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.__init__": [[9, 16], ["febo.models.ConfidenceBoundModel.__init__", "numpy.eye", "numpy.zeros", "numpy.zeros", "lls.LinearModel._update_cached"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel._update_cached"], ["    ", "def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "domain", ")", "\n", "self", ".", "_V", "=", "np", ".", "eye", "(", "self", ".", "domain", ".", "d", ")", "\n", "self", ".", "_Y", "=", "np", ".", "zeros", "(", "self", ".", "domain", ".", "d", ")", "\n", "self", ".", "_theta", "=", "np", ".", "zeros", "(", "self", ".", "domain", ".", "d", ")", "\n", "self", ".", "_n", "=", "0", "\n", "self", ".", "_update_cached", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.add_data": [[17, 21], ["lls.LinearModel._update_cached"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel._update_cached"], ["", "def", "add_data", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" just updating cache here and counting, adding datapoint needs to be done in child class\"\"\"", "\n", "self", ".", "_update_cached", "(", ")", "\n", "self", ".", "_n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel._update_cached": [[22, 26], ["numpy.linalg.solve", "numpy.linalg.det", "numpy.sqrt", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "_update_cached", "(", "self", ")", ":", "\n", "        ", "self", ".", "_theta", "=", "np", ".", "linalg", ".", "solve", "(", "self", ".", "_V", ",", "self", ".", "_Y", ")", "\n", "self", ".", "_detV", "=", "np", ".", "linalg", ".", "det", "(", "self", ".", "V", ")", "\n", "self", ".", "_beta_t", "=", "np", ".", "sqrt", "(", "np", ".", "log", "(", "self", ".", "detV", ")", "-", "2", "*", "np", ".", "log", "(", "self", ".", "delta", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.V": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "V", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_V", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean": [[31, 34], ["numpy.atleast_2d", "numpy.atleast_2d.dot().reshape", "numpy.atleast_2d.dot"], "methods", ["None"], ["", "def", "mean", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "return", "X", ".", "dot", "(", "self", ".", "_theta", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var": [[35, 38], ["numpy.atleast_2d", "numpy.sum().reshape", "numpy.sum", "numpy.linalg.solve"], "methods", ["None"], ["", "def", "var", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "return", "np", ".", "sum", "(", "X", "*", "(", "np", ".", "linalg", ".", "solve", "(", "self", ".", "V", ",", "X", ".", "T", ")", ".", "T", ")", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean_var": [[39, 42], ["X.reshape.reshape.reshape", "lls.LinearModel.mean", "lls.LinearModel.var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["", "def", "mean_var", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "X", ".", "reshape", "(", "-", "1", ",", "self", ".", "domain", ".", "d", ")", "\n", "return", "self", ".", "mean", "(", "X", ")", ",", "self", ".", "var", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.detV": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "detV", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_detV", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.V_inv": [[53, 56], ["numpy.linalg.inv"], "methods", ["None"], ["", "@", "property", "\n", "def", "V_inv", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "linalg", ".", "inv", "(", "self", ".", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel._beta": [[57, 59], ["None"], "methods", ["None"], ["", "def", "_beta", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_beta_t", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.sample": [[60, 66], ["numpy.random.multivariate_normal", "numpy.linalg.inv", "numpy.atleast_2d", "numpy.atleast_2d.dot().reshape", "numpy.atleast_2d.dot"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "X", "=", "None", ")", ":", "\n", "        ", "sampled_theta", "=", "np", ".", "random", ".", "multivariate_normal", "(", "self", ".", "_theta", ",", "np", ".", "linalg", ".", "inv", "(", "self", ".", "_V", ")", ")", "\n", "def", "sample_f", "(", "X", ")", ":", "\n", "            ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "return", "X", ".", "dot", "(", "sampled_theta", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "return", "sample_f", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearLeastSquares.add_data": [[69, 79], ["X.reshape.reshape.reshape", "Y.reshape.reshape.reshape", "X.reshape.reshape.T.dot().flatten", "zip", "lls.LinearModel.add_data", "x.reshape.reshape.reshape", "x.reshape.reshape.T.dot", "X.reshape.reshape.T.dot"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data"], ["    ", "def", "add_data", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "X", "=", "X", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "domain", ".", "d", ")", ")", "\n", "Y", "=", "Y", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "_Y", "+=", "X", ".", "T", ".", "dot", "(", "Y", ")", ".", "flatten", "(", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "X", ",", "Y", ")", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "self", ".", "_V", "+=", "x", ".", "T", ".", "dot", "(", "x", ")", "\n", "\n", "", "super", "(", "LinearLeastSquares", ",", "self", ")", ".", "add_data", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.requires_std": [[84, 87], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "requires_std", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data": [[88, 100], ["numpy.atleast_2d", "numpy.atleast_2d", "numpy.atleast_2d", "numpy.atleast_2d.T.dot().flatten", "zip", "lls.LinearModel.add_data", "x.reshape.reshape.reshape", "numpy.atleast_2d.T.dot", "x.reshape.reshape.T.dot"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.add_data"], ["", "def", "add_data", "(", "self", ",", "X", ",", "Y", ",", "rho", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "Y", "=", "np", ".", "atleast_2d", "(", "Y", ")", "\n", "rho", "=", "np", ".", "atleast_2d", "(", "rho", ")", "\n", "\n", "r2", "=", "rho", "*", "rho", "\n", "self", ".", "_Y", "+=", "X", ".", "T", ".", "dot", "(", "Y", "/", "r2", ")", ".", "flatten", "(", ")", "\n", "for", "x", ",", "y", ",", "r", "in", "zip", "(", "X", ",", "Y", ",", "r2", ")", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "self", ".", "_V", "+=", "x", ".", "T", ".", "dot", "(", "x", ")", "/", "r", "\n", "\n", "", "super", "(", "WeightedLinearLeastSquares", ",", "self", ")", ".", "add_data", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.WeightedLinearLeastSquares.predictive_var": [[101, 108], ["numpy.atleast_2d", "numpy.atleast_2d", "numpy.atleast_2d", "numpy.sum().reshape", "lls.WeightedLinearLeastSquares.var", "numpy.sum", "lls.WeightedLinearLeastSquares.var", "numpy.linalg.solve"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["", "def", "predictive_var", "(", "self", ",", "X_cond", ",", "X", ",", "rho_cond", ",", "var_x", "=", "None", ")", ":", "\n", "        ", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "rho_cond", "=", "np", ".", "atleast_2d", "(", "rho_cond", ")", "\n", "X_cond", "=", "np", ".", "atleast_2d", "(", "X_cond", ")", "\n", "\n", "X_V_X_cond", "=", "np", ".", "sum", "(", "X_cond", "*", "(", "np", ".", "linalg", ".", "solve", "(", "self", ".", "_V", ",", "X", ".", "T", ")", ".", "T", ")", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "self", ".", "var", "(", "X", ")", "-", "X_V_X_cond", "*", "X_V_X_cond", "/", "(", "rho_cond", "*", "rho_cond", "+", "self", ".", "var", "(", "X_cond", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.base.BaseModel._create_model": [[5, 8], ["NotImplementedError"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "_create_model", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.base.BaseModel._update_model": [[9, 15], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_update_model", "(", "self", ",", "X_all", ",", "Y_all", ",", "itr", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Updates the model with new observations.\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.base.BaseModel.predict": [[16, 22], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Predictions with the model. Returns posterior means and standard deviations at X.\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.base.BaseModel.predict_withGradients": [[23, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict_withGradients", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Returns the mean, standard deviation, mean gradient and standard deviation gradient at X.\n        \"\"\"", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp.__init__": [[18, 57], ["numpy.random.rand"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel", "=", "None", ",", "noise_var", "=", "None", ",", "exact_feval", "=", "False", ",", "optimizer", "=", "'bfgs'", ",", "\n", "max_iters", "=", "1000", ",", "optimize_restarts", "=", "5", ",", "sparse", "=", "None", ",", "num_inducing", "=", "10", ",", "\n", "verbose", "=", "False", ",", "ARD", "=", "False", ",", "seed", "=", "42", ",", "normalize_Y", "=", "True", ",", "n_subspaces", "=", "12", ",", "update_freq", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        Additive GP model which learns the decomposition.\n\n        :param kernel: the GP kernel option; use default if set to None\n        :param noise_var: observation noise variance\n        :param exact_feval: whether to learn observation noise (exact_feval=False) or not (exact_feval=True)\n        :param optimizer: to optimise marginal likelihood w.r.t GP hyperparameters\n        :param max_iters: max iterations for optimising marginal likelihood\n        :param optimize_restarts: number of restart for optimising marginal likelihood\n        :param sparse:\n        :param num_inducing: number of inducing points if a sparse GP is used.\n        :param verbose: enable print-statements\n        :param ARD: whether ARD is used in the kernel (default, False).\n        :param seed: set ranfom seed\n        :param normalize_Y: normalise output data\n        :param n_subspaces: number of subspaces to be decomposed into\n        :param update_freq: frequency of relearning GP hyperparameters\n        \"\"\"", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "self", ".", "exact_feval", "=", "exact_feval", "\n", "self", ".", "optimize_restarts", "=", "optimize_restarts", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "sparse", "=", "sparse", "\n", "self", ".", "sparse_surrogate", "=", "False", "\n", "self", ".", "num_inducing", "=", "num_inducing", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "ARD", "=", "ARD", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "update_interval", "=", "update_freq", "\n", "self", ".", "normalize_Y", "=", "normalize_Y", "\n", "self", ".", "n_sub", "=", "n_subspaces", "\n", "self", ".", "n_decomp", "=", "20", "\n", "np", ".", "random", ".", "rand", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp._create_model_sub": [[58, 103], ["additive_gp_decomp.split", "range", "GPy.kern.Matern52", "GPy.models.GPRegression", "GPy.models.SparseGPRegression", "GPy.models.SparseGPRegression.Gaussian_noise.constrain_fixed", "GPy.models.SparseGPRegression.Gaussian_noise.constrain_bounded", "GPy.models.SparseGPRegression.optimize", "GPy.models.SparseGPRegression.log_likelihood", "len", "Y.var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["", "def", "_create_model_sub", "(", "self", ",", "X", ",", "Y", ",", "input_dim_permutate_list", ")", ":", "\n", "        ", "\"\"\"\n        Creates the model for a subspace of dimensions\n\n        :param X: observed input data\n        :param Y: observed output data\n        :param input_dim_permutate_list: shuffled input dimension list\n        \"\"\"", "\n", "# split the input dimensions into nsubspaces", "\n", "subspace_dim_list", "=", "split", "(", "input_dim_permutate_list", ",", "self", ".", "n_sub", ")", "\n", "# define the additive kernel", "\n", "for", "i", "in", "range", "(", "self", ".", "n_sub", ")", ":", "\n", "# get active dimensions for each subspace_id", "\n", "            ", "subspace_dim", "=", "subspace_dim_list", "[", "i", "]", "\n", "kern_i", "=", "GPy", ".", "kern", ".", "Matern52", "(", "len", "(", "subspace_dim", ")", ",", "variance", "=", "1.", ",", "ARD", "=", "self", ".", "ARD", ",", "\n", "active_dims", "=", "subspace_dim", ",", "name", "=", "f'k{i}'", ")", "\n", "# kern_i.variance.fix()", "\n", "if", "i", "==", "0", ":", "\n", "                ", "kern", "=", "kern_i", "\n", "", "else", ":", "\n", "                ", "kern", "+=", "kern_i", "\n", "\n", "# define GP model", "\n", "", "", "noise_var", "=", "Y", ".", "var", "(", ")", "*", "0.01", "if", "self", ".", "noise_var", "is", "None", "else", "self", ".", "noise_var", "\n", "if", "not", "self", ".", "sparse_surrogate", ":", "\n", "            ", "sub_model", "=", "GPy", ".", "models", ".", "GPRegression", "(", "X", ",", "Y", ",", "kernel", "=", "kern", ",", "noise_var", "=", "noise_var", ")", "\n", "", "else", ":", "\n", "            ", "sub_model", "=", "GPy", ".", "models", ".", "SparseGPRegression", "(", "X", ",", "Y", ",", "kernel", "=", "kern", ",", "num_inducing", "=", "self", ".", "num_inducing", ")", "\n", "\n", "", "if", "self", ".", "exact_feval", ":", "\n", "# restrict noise variance if exact evaluations of the objective", "\n", "            ", "sub_model", ".", "Gaussian_noise", ".", "constrain_fixed", "(", "1e-6", ",", "warning", "=", "False", ")", "\n", "", "else", ":", "\n", "# bound the noise variance if not", "\n", "            ", "sub_model", ".", "Gaussian_noise", ".", "constrain_bounded", "(", "1e-9", ",", "1e6", ",", "warning", "=", "False", ")", "\n", "\n", "# optimise the GP hyperparameters", "\n", "", "try", ":", "\n", "            ", "sub_model", ".", "optimize", "(", "optimizer", "=", "self", ".", "optimizer", ",", "max_iters", "=", "self", ".", "max_iters", ",", "messages", "=", "False", ",", "\n", "ipython_notebook", "=", "False", ")", "\n", "model_log_likelihood", "=", "sub_model", ".", "log_likelihood", "(", ")", "\n", "", "except", ":", "\n", "            ", "model_log_likelihood", "=", "-", "100.00", "\n", "\n", "", "return", "sub_model", ",", "model_log_likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp._update_model": [[104, 164], ["additive_gp_decomp.Additive_GPModel_Learn_Decomp.sparse.startswith", "utilities.utilities.subset_select", "list", "additive_gp_decomp.Additive_GPModel_Learn_Decomp.model.set_XY", "input_dim_permutate_list.append", "enumerate", "numpy.argmax", "additive_gp_decomp.Additive_GPModel_Learn_Decomp.model.set_XY", "additive_gp_decomp.split", "input_dim_opt.copy", "print", "additive_gp_decomp.Additive_GPModel_Learn_Decomp.model.optimize_restarts", "Y_all_raw.std", "range", "int", "numpy.random.permutation", "print", "utilities.utilities.subset_select_for_learning", "additive_gp_decomp.Additive_GPModel_Learn_Decomp._create_model_sub", "print", "ll_list.append", "submodel_list.append", "Y_all_raw.mean", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.subset_select", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.subset_select_for_learning", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp._create_model_sub", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "_update_model", "(", "self", ",", "X_all", ",", "Y_all_raw", ",", "itr", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param X_all: observed input data\n        :param Y_all_raw: observed output raw data\n        :param itr: BO iteration counter\n        \"\"\"", "\n", "# normalise the observed output raw data", "\n", "if", "self", ".", "normalize_Y", ":", "\n", "            ", "Y_all", "=", "(", "Y_all_raw", "-", "Y_all_raw", ".", "mean", "(", ")", ")", "/", "(", "Y_all_raw", ".", "std", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "Y_all", "=", "Y_all_raw", "\n", "\n", "# if use sparse GP option, select only a subset of observed data for training surrogate (one-type of sparse GP)", "\n", "", "if", "self", ".", "sparse", ".", "startswith", "(", "'SUB'", ")", ":", "\n", "            ", "X_all", ",", "Y_all", "=", "subset_select", "(", "X_all", ",", "Y_all", ",", "select_metric", "=", "self", ".", "sparse", ")", "\n", "\n", "# initialise model or update the observed data for the model", "\n", "", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "self", ".", "input_dim", "=", "X_all", ".", "shape", "[", "1", "]", "\n", "self", ".", "input_dim_opt_ex", "=", "list", "(", "range", "(", "self", ".", "input_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "set_XY", "(", "X_all", ",", "Y_all", ")", "\n", "\n", "", "if", "itr", "%", "int", "(", "self", ".", "update_interval", "*", "8", ")", "==", "0", ":", "\n", "\n", "# learn decomposition at the interval of (8 * interval of relearning hyperparameter)", "\n", "            ", "input_dim_permutate_list", "=", "[", "np", ".", "random", ".", "permutation", "(", "range", "(", "self", ".", "input_dim", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_decomp", ")", "]", "\n", "input_dim_permutate_list", ".", "append", "(", "self", ".", "input_dim_opt_ex", ")", "\n", "\n", "if", "'ADD'", "in", "self", ".", "sparse", ":", "\n", "                ", "print", "(", "'learn the decomposition with subset observed data'", ")", "\n", "X_ob", ",", "Y_ob", "=", "subset_select_for_learning", "(", "X_all", ",", "Y_all", ",", "select_metric", "=", "self", ".", "sparse", ")", "\n", "", "else", ":", "\n", "                ", "X_ob", ",", "Y_ob", "=", "X_all", ",", "Y_all", "\n", "\n", "", "ll_list", "=", "[", "]", "\n", "submodel_list", "=", "[", "]", "\n", "for", "i", ",", "input_dim_i", "in", "enumerate", "(", "input_dim_permutate_list", ")", ":", "\n", "                ", "sub_model_i", ",", "ll_i", "=", "self", ".", "_create_model_sub", "(", "X_ob", ",", "Y_ob", ",", "input_dim_i", ")", "\n", "print", "(", "f'll for decom {i} ={ll_i}'", ")", "\n", "ll_list", ".", "append", "(", "ll_i", ")", "\n", "submodel_list", ".", "append", "(", "sub_model_i", ")", "\n", "\n", "# select the decomposition with the maximum marginal likelihood", "\n", "", "mlh_idx", "=", "np", ".", "argmax", "(", "ll_list", ")", "\n", "self", ".", "model", "=", "submodel_list", "[", "mlh_idx", "]", "\n", "self", ".", "model", ".", "set_XY", "(", "X_all", ",", "Y_all", ")", "\n", "\n", "# set to the selected decomposition", "\n", "input_dim_opt", "=", "input_dim_permutate_list", "[", "mlh_idx", "]", "\n", "self", ".", "active_dims_list", "=", "split", "(", "input_dim_opt", ",", "self", ".", "n_sub", ")", "\n", "self", ".", "model_kern_list", "=", "[", "self", ".", "model", ".", "kern", ".", "__dict__", "[", "f'k{k_indx}'", "]", "for", "k_indx", "in", "range", "(", "self", ".", "n_sub", ")", "]", "\n", "self", ".", "input_dim_opt_ex", "=", "input_dim_opt", ".", "copy", "(", ")", "\n", "\n", "print", "(", "f'opt_decom={mlh_idx}'", ")", "\n", "\n", "", "if", "itr", "%", "self", ".", "update_interval", "==", "0", ":", "\n", "# relearn the GP hyperparameters at a certain iteration interval", "\n", "            ", "self", ".", "model", ".", "optimize_restarts", "(", "num_restarts", "=", "self", ".", "optimize_restarts", ",", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "max_iters", "=", "self", ".", "max_iters", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp.predictSub": [[165, 178], ["additive_gp_decomp.Additive_GPModel_Learn_Decomp.model.predict", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "", "def", "predictSub", "(", "self", ",", "X", ",", "subspace_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param X: test location\n        :param subspace_id: decide the specific subspace of active dimensions\n        :return m_sub: predictive posterior mean in this subspace\n        :return s_sub: predictive posterior standard deviation in this subspace\n        \"\"\"", "\n", "\n", "if", "X", ".", "ndim", "==", "1", ":", "X", "=", "X", "[", "None", ",", ":", "]", "\n", "m_sub", ",", "v_sub", "=", "self", ".", "model", ".", "predict", "(", "X", ",", "kern", "=", "self", ".", "model_kern_list", "[", "subspace_id", "]", ")", "\n", "v_sub", "=", "np", ".", "clip", "(", "v_sub", ",", "1e-10", ",", "np", ".", "inf", ")", "\n", "\n", "return", "m_sub", ",", "np", ".", "sqrt", "(", "v_sub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp.predictSub_withGradients": [[179, 200], ["additive_gp_decomp.Additive_GPModel_Learn_Decomp.model.predict", "numpy.clip", "additive_gp_decomp.Additive_GPModel_Learn_Decomp.model.predictive_gradients", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "def", "predictSub_withGradients", "(", "self", ",", "X", ",", "subspace_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param X: test location\n        :param subspace_id: decide the specific subspace of active dimensions\n        :return m_sub: predictive posterior mean in this subspace\n        :return s_sub: predictive posterior standard deviation in this subspace\n        :return dmdx_sub: derivative of predictive posterior mean in this subspace\n        :return dsdx_sub: derivative of predictive posterior standard deviation in this subspace\n        \"\"\"", "\n", "\n", "if", "X", ".", "ndim", "==", "1", ":", "X", "=", "X", "[", "None", ",", ":", "]", "\n", "m_sub", ",", "v_sub", "=", "self", ".", "model", ".", "predict", "(", "X", ",", "kern", "=", "self", ".", "model_kern_list", "[", "subspace_id", "]", ")", "\n", "v_sub", "=", "np", ".", "clip", "(", "v_sub", ",", "1e-10", ",", "np", ".", "inf", ")", "\n", "\n", "dmdx", ",", "dvdx", "=", "self", ".", "model", ".", "predictive_gradients", "(", "X", ",", "kern", "=", "self", ".", "model_kern_list", "[", "subspace_id", "]", ")", "\n", "dmdx", "=", "dmdx", "[", ":", ",", ":", ",", "0", "]", "\n", "dsdx", "=", "dvdx", "/", "(", "2", "*", "np", ".", "sqrt", "(", "v_sub", ")", ")", "\n", "\n", "dmdx_sub", "=", "dmdx", "[", ":", ",", "self", ".", "active_dims_list", "[", "subspace_id", "]", "]", "\n", "dsdx_sub", "=", "dsdx", "[", ":", ",", "self", ".", "active_dims_list", "[", "subspace_id", "]", "]", "\n", "return", "m_sub", ",", "np", ".", "sqrt", "(", "v_sub", ")", ",", "dmdx_sub", ",", "dsdx_sub", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split": [[10, 14], ["divmod", "len", "range", "min", "min"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["def", "split", "(", "a", ",", "n", ")", ":", "\n", "# split array a into n approximately equal splits", "\n", "    ", "k", ",", "m", "=", "divmod", "(", "len", "(", "a", ")", ",", "n", ")", "\n", "return", "[", "a", "[", "i", "*", "k", "+", "min", "(", "i", ",", "m", ")", ":", "(", "i", "+", "1", ")", "*", "k", "+", "min", "(", "i", "+", "1", ",", "m", ")", "]", "for", "i", "in", "range", "(", "n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpdr.GPModelLDR.__init__": [[13, 61], ["int", "numpy.random.rand", "int", "list", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["    ", "def", "__init__", "(", "self", ",", "kernel", "=", "None", ",", "noise_var", "=", "None", ",", "exact_feval", "=", "False", ",", "optimizer", "=", "'bfgs'", ",", "\n", "max_iters", "=", "1000", ",", "optimize_restarts", "=", "5", ",", "sparse", "=", "None", ",", "num_inducing", "=", "10", ",", "\n", "verbose", "=", "False", ",", "ARD", "=", "False", ",", "seed", "=", "42", ",", "normalize_Y", "=", "True", ",", "update_freq", "=", "5", ",", "\n", "high_dim", "=", "int", "(", "32", "*", "32", ")", ",", "nchannel", "=", "3", ",", "dim_reduction", "=", "'BILI'", ")", ":", "\n", "        ", "\"\"\"\n        GP model which also learns the reduced dimension dr\n\n        :param kernel: the GP kernel option; use default if set to None\n        :param noise_var: observation noise variance\n        :param exact_feval: whether to learn observation noise (exact_feval=False) or not (exact_feval=True)\n        :param optimizer: to optimise marginal likelihood w.r.t GP hyperparameters\n        :param max_iters: max iterations for optimising marginal likelihood\n        :param optimize_restarts: number of restart for optimising marginal likelihood\n        :param sparse:\n        :param num_inducing: number of inducing points if a sparse GP is used\n        :param verbose: enable print-statements\n        :param ARD: whether ARD is used in the kernel (default, False).\n        :param seed: set ranfom seed\n        :param normalize_Y: normalise output data\n        :param update_freq: frequency of relearning GP hyperparameters\n        :param high_dim: image dimension (e.g. 32x32 for CIFAR10) or high-dimensional search space for imagenet (96x96)\n        :param nchannel: number of image channels\n        :param dim_reduction: dimension reduction method used in upsampling\n        \"\"\"", "\n", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "self", ".", "exact_feval", "=", "exact_feval", "\n", "self", ".", "optimize_restarts", "=", "optimize_restarts", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "sparse", "=", "sparse", "\n", "self", ".", "sparse_surrogate", "=", "False", "\n", "self", ".", "num_inducing", "=", "num_inducing", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "ARD", "=", "ARD", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "update_interval", "=", "update_freq", "\n", "self", ".", "normalize_Y", "=", "normalize_Y", "\n", "if", "high_dim", ">", "int", "(", "40", "*", "40", ")", ":", "\n", "            ", "self", ".", "dr_list", "=", "list", "(", "range", "(", "6", ",", "61", ",", "6", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dr_list", "=", "list", "(", "range", "(", "6", ",", "21", ",", "2", ")", ")", "\n", "", "self", ".", "high_dim", "=", "high_dim", "\n", "self", ".", "nchannel", "=", "nchannel", "\n", "self", ".", "dim_reduction", "=", "dim_reduction", "\n", "np", ".", "random", ".", "rand", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpdr.GPModelLDR._create_model": [[62, 97], ["GPy.kern.Matern52", "GPy.models.GPRegression", "GPy.models.SparseGPRegression", "GPy.models.SparseGPRegression.Gaussian_noise.constrain_fixed", "GPy.models.SparseGPRegression.Gaussian_noise.constrain_bounded", "GPy.models.SparseGPRegression.optimize", "Y.var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GP.optimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["", "def", "_create_model", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        :param X: observed input data\n        :param Y: observed output data\n        :return model: GP model\n        \"\"\"", "\n", "# define GP kernel", "\n", "self", ".", "input_dim", "=", "X", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "kernel", "is", "None", ":", "\n", "            ", "kern", "=", "GPy", ".", "kern", ".", "Matern52", "(", "self", ".", "input_dim", ",", "variance", "=", "1.", ",", "ARD", "=", "self", ".", "ARD", ")", "\n", "", "else", ":", "\n", "            ", "kern", "=", "self", ".", "kernel", "\n", "self", ".", "kernel", "=", "None", "\n", "\n", "# define GP model", "\n", "", "noise_var", "=", "Y", ".", "var", "(", ")", "*", "0.01", "if", "self", ".", "noise_var", "is", "None", "else", "self", ".", "noise_var", "\n", "if", "not", "self", ".", "sparse_surrogate", ":", "\n", "            ", "model", "=", "GPy", ".", "models", ".", "GPRegression", "(", "X", ",", "Y", ",", "kernel", "=", "kern", ",", "noise_var", "=", "noise_var", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "GPy", ".", "models", ".", "SparseGPRegression", "(", "X", ",", "Y", ",", "kernel", "=", "kern", ",", "num_inducing", "=", "self", ".", "num_inducing", ")", "\n", "\n", "", "if", "self", ".", "exact_feval", ":", "\n", "# restrict noise variance if exact evaluations of the objective", "\n", "            ", "model", ".", "Gaussian_noise", ".", "constrain_fixed", "(", "1e-6", ",", "warning", "=", "False", ")", "\n", "", "else", ":", "\n", "# bound the noise variance if not", "\n", "            ", "model", ".", "Gaussian_noise", ".", "constrain_bounded", "(", "1e-9", ",", "1e6", ",", "warning", "=", "False", ")", "\n", "\n", "", "try", ":", "\n", "            ", "model", ".", "optimize", "(", "optimizer", "=", "self", ".", "optimizer", ",", "max_iters", "=", "self", ".", "max_iters", ",", "messages", "=", "False", ",", "\n", "ipython_notebook", "=", "False", ")", "\n", "", "except", ":", "\n", "            ", "model", "=", "model", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpdr.GPModelLDR._update_model": [[98, 153], ["gpdr.GPModelLDR.sparse.startswith", "Y_all_raw.mean", "Y_all_raw.std", "utilities.utilities.subset_select", "numpy.argmax", "int", "print", "utilities.upsampler.downsample_projection", "gpdr.GPModelLDR.model.set_XY", "gpdr.GPModelLDR.model.optimize_restarts", "Y_all_raw.std", "int", "print", "utilities.utilities.subset_select_for_learning", "utilities.upsampler.downsample_projection", "gpdr.GPModelLDR._create_model", "gpdr.GPModelLDR.log_likelihood", "print", "ll_list.append", "model_list.append", "int", "Y_all_raw.mean", "int"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.subset_select", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.downsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.subset_select_for_learning", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.downsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._create_model", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["", "def", "_update_model", "(", "self", ",", "X_all", ",", "Y_all_raw", ",", "itr", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param X_all: observed input data\n        :param Y_all_raw: observed output raw data\n        :param itr: BO iteration counter\n        \"\"\"", "\n", "\n", "# normalise the observed output raw data", "\n", "if", "self", ".", "normalize_Y", ":", "\n", "            ", "Y_all", "=", "(", "Y_all_raw", "-", "Y_all_raw", ".", "mean", "(", ")", ")", "/", "(", "Y_all_raw", ".", "std", "(", ")", ")", "\n", "self", ".", "Y_mean", "=", "Y_all_raw", ".", "mean", "(", ")", "\n", "self", ".", "Y_std", "=", "Y_all_raw", ".", "std", "(", ")", "\n", "", "else", ":", "\n", "            ", "Y_all", "=", "Y_all_raw", "\n", "\n", "# if use sparse GP option, select only a subset of observed data for training surrogate (one-type of sparse GP)", "\n", "", "if", "self", ".", "sparse", ".", "startswith", "(", "'SUB'", ")", ":", "\n", "            ", "X_all", ",", "Y_all", "=", "subset_select", "(", "X_all", ",", "Y_all", ",", "select_metric", "=", "self", ".", "sparse", ")", "\n", "\n", "", "if", "itr", "%", "int", "(", "8", "*", "self", ".", "update_interval", ")", "==", "0", ":", "\n", "# learn the optimal dr at an interval of (8 * interval of relearning hyperparameter)", "\n", "            ", "if", "'ADD'", "in", "self", ".", "sparse", ":", "\n", "                ", "print", "(", "'learn the optimal dr with subset observed data'", ")", "\n", "X_ob", ",", "Y_ob", "=", "subset_select_for_learning", "(", "X_all", ",", "Y_all", ",", "select_metric", "=", "self", ".", "sparse", ")", "\n", "", "else", ":", "\n", "                ", "X_ob", ",", "Y_ob", "=", "X_all", ",", "Y_all", "\n", "\n", "", "ll_list", "=", "[", "]", "\n", "model_list", "=", "[", "]", "\n", "for", "dr", "in", "self", ".", "dr_list", ":", "\n", "                ", "X_all_d_r", "=", "downsample_projection", "(", "self", ".", "dim_reduction", ",", "X_ob", ",", "int", "(", "dr", "**", "2", ")", ",", "self", ".", "high_dim", ",", "\n", "nchannel", "=", "self", ".", "nchannel", ",", "align_corners", "=", "True", ")", "\n", "model", "=", "self", ".", "_create_model", "(", "X_all_d_r", ",", "Y_ob", ")", "\n", "ll_dr", "=", "model", ".", "log_likelihood", "(", ")", "\n", "print", "(", "f'dr={dr}, ll={ll_dr}'", ")", "\n", "ll_list", ".", "append", "(", "ll_dr", ")", "\n", "model_list", ".", "append", "(", "model", ")", "\n", "\n", "# select the dr with the maximum marginal likelihood", "\n", "", "mle_idx", "=", "np", ".", "argmax", "(", "ll_list", ")", "\n", "self", ".", "opt_dr", "=", "int", "(", "self", ".", "dr_list", "[", "mle_idx", "]", ")", "\n", "self", ".", "model", "=", "model_list", "[", "mle_idx", "]", "\n", "print", "(", "f'opt_dr={self.opt_dr}'", ")", "\n", "\n", "", "else", ":", "\n", "# downsample the observed input data to the previous optimal dr", "\n", "            ", "X_all_d_r", "=", "downsample_projection", "(", "self", ".", "dim_reduction", ",", "X_all", ",", "int", "(", "self", ".", "opt_dr", "**", "2", ")", ",", "self", ".", "high_dim", ",", "\n", "nchannel", "=", "self", ".", "nchannel", ",", "\n", "align_corners", "=", "True", ")", "\n", "self", ".", "model", ".", "set_XY", "(", "X_all_d_r", ",", "Y_all", ")", "\n", "\n", "", "if", "itr", "%", "self", ".", "update_interval", "==", "0", ":", "\n", "# relearn the GP hyperparameters at a certain iteration interval", "\n", "            ", "self", ".", "model", ".", "optimize_restarts", "(", "num_restarts", "=", "self", ".", "optimize_restarts", ",", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "max_iters", "=", "self", ".", "max_iters", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpdr.GPModelLDR.predict": [[154, 166], ["gpdr.GPModelLDR.model.predict", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        :param X: test location\n        :return m: predictive posterior mean\n        :return s: predictive posterior standard deviation\n        \"\"\"", "\n", "\n", "if", "X", ".", "ndim", "==", "1", ":", "X", "=", "X", "[", "None", ",", ":", "]", "\n", "m", ",", "v", "=", "self", ".", "model", ".", "predict", "(", "X", ")", "\n", "v", "=", "np", ".", "clip", "(", "v", ",", "1e-10", ",", "np", ".", "inf", ")", "\n", "\n", "return", "m", ",", "np", ".", "sqrt", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpdr.GPModelLDR.predict_withGradients": [[167, 184], ["gpdr.GPModelLDR.model.predict", "numpy.clip", "gpdr.GPModelLDR.model.predictive_gradients", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "def", "predict_withGradients", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        :param X: test location\n        :return m: predictive posterior mean\n        :return s: predictive posterior standard deviation\n        :return dmdx: derivative of predictive posterior mean\n        :return dsdx: derivative of predictive posterior standard deviation\n        \"\"\"", "\n", "\n", "if", "X", ".", "ndim", "==", "1", ":", "X", "=", "X", "[", "None", ",", ":", "]", "\n", "m", ",", "v", "=", "self", ".", "model", ".", "predict", "(", "X", ")", "\n", "v", "=", "np", ".", "clip", "(", "v", ",", "1e-10", ",", "np", ".", "inf", ")", "\n", "dmdx", ",", "dvdx", "=", "self", ".", "model", ".", "predictive_gradients", "(", "X", ")", "\n", "dmdx", "=", "dmdx", "[", ":", ",", ":", ",", "0", "]", "\n", "dsdx", "=", "dvdx", "/", "(", "2", "*", "np", ".", "sqrt", "(", "v", ")", ")", "\n", "\n", "return", "m", ",", "np", ".", "sqrt", "(", "v", ")", ",", "dmdx", ",", "dsdx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel.__init__": [[13, 50], ["numpy.random.rand"], "methods", ["None"], ["from", "scipy", ".", "optimize", "import", "minimize", "\n", "\n", "logger", "=", "get_logger", "(", "'model'", ")", "\n", "\n", "class", "GPConfig", "(", "ModelConfig", ")", ":", "\n", "    ", "\"\"\"\n    * kernels: List of kernels\n    * noise_var: noise variance\n\n    \"\"\"", "\n", "kernels", "=", "ConfigField", "(", "[", "(", "'GPy.kern.RBF'", ",", "{", "'variance'", ":", "2.", ",", "'lengthscale'", ":", "0.2", ",", "'ARD'", ":", "True", "}", ")", "]", ")", "\n", "noise_var", "=", "ConfigField", "(", "0.1", ")", "\n", "calculate_gradients", "=", "ConfigField", "(", "True", ",", "comment", "=", "'Enable/Disable computation of gradient on each update.'", ")", "\n", "optimize_bias", "=", "ConfigField", "(", "False", ")", "\n", "optimize_var", "=", "ConfigField", "(", "True", ")", "\n", "bias", "=", "ConfigField", "(", "0", ")", "\n", "_section", "=", "'models.gp'", "\n", "\n", "# config_manager.register(GPConfig)", "\n", "\n", "", "def", "optimize_gp", "(", "experiment", ")", ":", "\n", "    ", "experiment", ".", "algorithm", ".", "f", ".", "gp", ".", "kern", ".", "variance", ".", "fix", "(", ")", "\n", "experiment", ".", "algorithm", ".", "f", ".", "gp", ".", "optimize", "(", ")", "\n", "print", "(", "experiment", ".", "algorithm", ".", "f", ".", "gp", ")", "\n", "\n", "\n", "", "@", "assign_config", "(", "GPConfig", ")", "\n", "class", "GP", "(", "ConfidenceBoundModel", ")", ":", "\n", "    ", "\"\"\"\n    Base class for GP optimization.\n    Handles common functionality.\n\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "domain", ")", ":", "\n", "        ", "super", "(", "GP", ",", "self", ")", ".", "__init__", "(", "domain", ")", "\n", "\n", "# the description of a kernel", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._create_model": [[51, 77], ["GPy.kern.Matern52", "GPy.models.GPRegression", "GPy.models.SparseGPRegression", "gp.GPModel.model.Gaussian_noise.constrain_fixed", "gp.GPModel.model.Gaussian_noise.constrain_bounded", "Y.var"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.var"], ["self", ".", "kernel", "=", "self", ".", "_get_kernel", "(", ")", "\n", "\n", "# calling of the kernel", "\n", "self", ".", "gp", "=", "self", ".", "_get_gp", "(", ")", "\n", "# number of data points", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "kernel", "=", "self", ".", "kernel", ".", "copy", "(", ")", "\n", "self", ".", "_woodbury_chol", "=", "np", ".", "asfortranarray", "(", "self", ".", "gp", ".", "posterior", ".", "_woodbury_chol", ")", "# we create a copy of the matrix in fortranarray, such that we can directly pass it to lapack dtrtrs without doing another copy", "\n", "self", ".", "_woodbury_vector", "=", "self", ".", "gp", ".", "posterior", ".", "_woodbury_vector", ".", "copy", "(", ")", "\n", "self", ".", "_X", "=", "self", ".", "gp", ".", "X", ".", "copy", "(", ")", "\n", "self", ".", "_Y", "=", "np", ".", "empty", "(", "shape", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "_beta_cached", "=", "2", "\n", "self", ".", "_bias", "=", "self", ".", "config", ".", "bias", "\n", "\n", "\n", "", "def", "_get_kernel", "(", "self", ")", ":", "\n", "        ", "kernel", "=", "None", "\n", "for", "kernel_module", ",", "kernel_params", "in", "self", ".", "config", ".", "kernels", ":", "\n", "            ", "input_dim", "=", "self", ".", "domain", ".", "d", "\n", "if", "'active_dims'", "in", "kernel_params", ":", "\n", "                ", "input_dim", "=", "len", "(", "kernel_params", "[", "'active_dims'", "]", ")", "\n", "", "kernel_part", "=", "locate", "(", "kernel_module", ")", "(", "input_dim", "=", "input_dim", ",", "**", "kernel_params", ")", "\n", "if", "kernel", "is", "None", ":", "\n", "                ", "kernel", "=", "kernel_part", "\n", "", "else", ":", "\n", "                ", "kernel", "+=", "kernel_part", "\n", "", "", "return", "kernel", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._update_model": [[78, 107], ["gp.GPModel.sparse.startswith", "Y_all_raw.mean", "Y_all_raw.std", "utilities.utilities.subset_select", "gp.GPModel._create_model", "gp.GPModel.model.set_XY", "gp.GPModel.model.optimize_restarts", "Y_all_raw.std", "Y_all_raw.mean"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.subset_select", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._create_model", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gpy.GPHeteroscedasticRegression.set_XY", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.std", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["\n", "", "def", "_beta", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_beta_cached", "\n", "\n", "", "@", "property", "\n", "def", "scale", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "gp", ".", "kern", ".", "name", "==", "'sum'", ":", "\n", "            ", "return", "sum", "(", "[", "part", ".", "variance", "for", "part", "in", "self", ".", "gp", ".", "kern", ".", "parts", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "sqrt", "(", "self", ".", "gp", ".", "kern", ".", "variance", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "bias", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bias", "\n", "\n", "", "def", "_get_gp", "(", "self", ")", ":", "\n", "        ", "return", "GPRegression", "(", "self", ".", "domain", ".", "d", ",", "self", ".", "kernel", ",", "noise_var", "=", "self", ".", "config", ".", "noise_var", ",", "calculate_gradients", "=", "self", ".", "config", ".", "calculate_gradients", ")", "\n", "\n", "", "def", "add_data", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Add a new function observation to the GPs.\n        Parameters\n        ----------\n        x: 2d-array\n        y: 2d-array\n        \"\"\"", "\n", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "np", ".", "atleast_2d", "(", "y", ")", "\n", "\n", "self", ".", "_Y", "=", "np", ".", "vstack", "(", "[", "self", ".", "_Y", ",", "y", "]", ")", "# store unbiased data", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel.predict": [[108, 120], ["gp.GPModel.model.predict", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["self", ".", "gp", ".", "append_XY", "(", "x", ",", "y", "-", "self", ".", "_bias", ")", "\n", "\n", "self", ".", "t", "+=", "y", ".", "shape", "[", "1", "]", "\n", "self", ".", "_update_cache", "(", ")", "\n", "\n", "\n", "", "def", "optimize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "optimize_bias", ":", "\n", "            ", "self", ".", "_optimize_bias", "(", ")", "\n", "", "if", "self", ".", "config", ".", "optimize_var", ":", "\n", "            ", "self", ".", "_optimize_var", "(", ")", "\n", "\n", "", "self", ".", "_update_beta", "(", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel.predict_withGradients": [[121, 138], ["gp.GPModel.model.predict", "numpy.clip", "gp.GPModel.model.predictive_gradients", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["\n", "\n", "", "def", "_update_cache", "(", "self", ")", ":", "\n", "# if not self.config.calculate_gradients:", "\n", "        ", "self", ".", "_woodbury_chol", "=", "np", ".", "asfortranarray", "(", "self", ".", "gp", ".", "posterior", ".", "_woodbury_chol", ")", "\n", "self", ".", "_woodbury_vector", "=", "self", ".", "gp", ".", "posterior", ".", "_woodbury_vector", ".", "copy", "(", ")", "\n", "self", ".", "_X", "=", "self", ".", "gp", ".", "X", ".", "copy", "(", ")", "\n", "\n", "self", ".", "_update_beta", "(", ")", "\n", "\n", "", "def", "_optimize_bias", "(", "self", ")", ":", "\n", "        ", "self", ".", "_bias", "=", "minimize", "(", "self", ".", "_bias_loss", ",", "self", ".", "_bias", ",", "method", "=", "'L-BFGS-B'", ")", "[", "'x'", "]", ".", "copy", "(", ")", "\n", "self", ".", "_set_bias", "(", "self", ".", "_bias", ")", "\n", "logger", ".", "info", "(", "f\"Updated bias to {self._bias}\"", ")", "\n", "\n", "", "def", "_bias_loss", "(", "self", ",", "c", ")", ":", "\n", "# calculate mean and norm for new bias via a new woodbury_vector", "\n", "        ", "new_woodbury_vector", ",", "_", "=", "dpotrs", "(", "self", ".", "_woodbury_chol", ",", "self", ".", "_Y", "-", "c", ",", "lower", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.multi_lbfgs.LbfgsInvHessProduct.__init__": [[460, 473], ["scipy.sparse.linalg.LinearOperator.__init__", "ValueError", "numpy.einsum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["def", "__init__", "(", "self", ",", "sk", ",", "yk", ")", ":", "\n", "        ", "\"\"\"Construct the operator.\"\"\"", "\n", "if", "sk", ".", "shape", "!=", "yk", ".", "shape", "or", "sk", ".", "ndim", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'sk and yk must have matching shape, (n_corrs, n)'", ")", "\n", "", "n_corrs", ",", "n", "=", "sk", ".", "shape", "\n", "\n", "super", "(", "LbfgsInvHessProduct", ",", "self", ")", ".", "__init__", "(", "\n", "dtype", "=", "np", ".", "float64", ",", "shape", "=", "(", "n", ",", "n", ")", ")", "\n", "\n", "self", ".", "sk", "=", "sk", "\n", "self", ".", "yk", "=", "yk", "\n", "self", ".", "n_corrs", "=", "n_corrs", "\n", "self", ".", "rho", "=", "1", "/", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "sk", ",", "yk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.multi_lbfgs.LbfgsInvHessProduct._matvec": [[474, 507], ["numpy.array", "numpy.zeros", "range", "range", "q.reshape.reshape.reshape", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "_matvec", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Efficient matrix-vector multiply with the BFGS matrices.\n\n        This calculation is described in Section (4) of [1].\n\n        Parameters\n        ----------\n        x : ndarray\n            An array with shape (n,) or (n,1).\n\n        Returns\n        -------\n        y : ndarray\n            The matrix-vector product\n\n        \"\"\"", "\n", "s", ",", "y", ",", "n_corrs", ",", "rho", "=", "self", ".", "sk", ",", "self", ".", "yk", ",", "self", ".", "n_corrs", ",", "self", ".", "rho", "\n", "q", "=", "np", ".", "array", "(", "x", ",", "dtype", "=", "self", ".", "dtype", ",", "copy", "=", "True", ")", "\n", "if", "q", ".", "ndim", "==", "2", "and", "q", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "q", "=", "q", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "alpha", "=", "np", ".", "zeros", "(", "n_corrs", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_corrs", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "alpha", "[", "i", "]", "=", "rho", "[", "i", "]", "*", "np", ".", "dot", "(", "s", "[", "i", "]", ",", "q", ")", "\n", "q", "=", "q", "-", "alpha", "[", "i", "]", "*", "y", "[", "i", "]", "\n", "\n", "", "r", "=", "q", "\n", "for", "i", "in", "range", "(", "n_corrs", ")", ":", "\n", "            ", "beta", "=", "rho", "[", "i", "]", "*", "np", ".", "dot", "(", "y", "[", "i", "]", ",", "r", ")", "\n", "r", "=", "r", "+", "s", "[", "i", "]", "*", "(", "alpha", "[", "i", "]", "-", "beta", ")", "\n", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.multi_lbfgs.LbfgsInvHessProduct.todense": [[508, 529], ["numpy.eye", "range", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "todense", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a dense array representation of this operator.\n\n        Returns\n        -------\n        arr : ndarray, shape=(n, n)\n            An array with the same shape and containing\n            the same data represented by this `LinearOperator`.\n\n        \"\"\"", "\n", "s", ",", "y", ",", "n_corrs", ",", "rho", "=", "self", ".", "sk", ",", "self", ".", "yk", ",", "self", ".", "n_corrs", ",", "self", ".", "rho", "\n", "I", "=", "np", ".", "eye", "(", "*", "self", ".", "shape", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "Hk", "=", "I", "\n", "\n", "for", "i", "in", "range", "(", "n_corrs", ")", ":", "\n", "            ", "A1", "=", "I", "-", "s", "[", "i", "]", "[", ":", ",", "np", ".", "newaxis", "]", "*", "y", "[", "i", "]", "[", "np", ".", "newaxis", ",", ":", "]", "*", "rho", "[", "i", "]", "\n", "A2", "=", "I", "-", "y", "[", "i", "]", "[", ":", ",", "np", ".", "newaxis", "]", "*", "s", "[", "i", "]", "[", "np", ".", "newaxis", ",", ":", "]", "*", "rho", "[", "i", "]", "\n", "\n", "Hk", "=", "np", ".", "dot", "(", "A1", ",", "np", ".", "dot", "(", "Hk", ",", "A2", ")", ")", "+", "(", "rho", "[", "i", "]", "*", "s", "[", "i", "]", "[", ":", ",", "np", ".", "newaxis", "]", "*", "\n", "s", "[", "i", "]", "[", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "", "return", "Hk", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.multi_lbfgs._approx_fprime_helper": [[50, 69], ["numpy.vstack", "range", "f", "numpy.hstack", "range", "range"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["def", "_approx_fprime_helper", "(", "X", ",", "f", ",", "epsilon", ",", "args", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\"\n    See ``approx_fprime``.  An optional initial function value arg is added.\n    This a multi-point version of the original approx_fprime helper. Given a 2d array X,\n    the gradient and the function value of f is determined at all of the given points,\n    using a single call to f.\n\n    Returns: f(X), df(X)\n    \"\"\"", "\n", "k", ",", "d", "=", "X", ".", "shape", "\n", "X", "=", "np", ".", "vstack", "(", "[", "X", "for", "_", "in", "range", "(", "d", "+", "1", ")", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "        ", "X", "[", "(", "i", "+", "1", ")", "*", "k", ":", "(", "i", "+", "2", ")", "*", "k", ",", "i", "]", "+=", "epsilon", "\n", "\n", "", "Y", "=", "f", "(", "*", "(", "(", "X", ",", ")", "+", "args", ")", ")", "\n", "\n", "grad", "=", "np", ".", "hstack", "(", "[", "(", "Y", "[", "(", "i", "+", "1", ")", "*", "k", ":", "(", "i", "+", "2", ")", "*", "k", "]", "-", "Y", "[", "0", ":", "k", "]", ")", "/", "epsilon", "for", "i", "in", "range", "(", "d", ")", "]", ")", "\n", "return", "Y", "[", "0", ":", "k", "]", ",", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.multi_lbfgs.fmin_multipoint_l_bfgs_b": [[71, 231], ["multi_lbfgs._minimize_lbfgsb_multi", "scipy.optimize.optimize.MemoizeJac", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.multi_lbfgs._minimize_lbfgsb_multi"], ["", "def", "fmin_multipoint_l_bfgs_b", "(", "func", ",", "x0", ",", "fprime", "=", "None", ",", "args", "=", "(", ")", ",", "\n", "approx_grad", "=", "0", ",", "\n", "bounds", "=", "None", ",", "m", "=", "10", ",", "factr", "=", "1e7", ",", "pgtol", "=", "1e-5", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", "iprint", "=", "-", "1", ",", "maxfun", "=", "15000", ",", "maxiter", "=", "15000", ",", "disp", "=", "None", ",", "\n", "callback", "=", "None", ",", "maxls", "=", "20", ")", ":", "\n", "    ", "\"\"\"\n    Minimize a function func using the L-BFGS-B algorithm.\n\n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Function to minimise.\n    x0 : ndarray\n        Initial guess.\n    fprime : callable fprime(x,*args), optional\n        The gradient of `func`.  If None, then `func` returns the function\n        value and the gradient (``f, g = func(x, *args)``), unless\n        `approx_grad` is True in which case `func` returns only ``f``.\n    args : sequence, optional\n        Arguments to pass to `func` and `fprime`.\n    approx_grad : bool, optional\n        Whether to approximate the gradient numerically (in which case\n        `func` returns only the function value).\n    bounds : list, optional\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None or +-inf for one of ``min`` or\n        ``max`` when there is no bound in that direction.\n    m : int, optional\n        The maximum number of variable metric corrections\n        used to define the limited memory matrix. (The limited memory BFGS\n        method does not store the full hessian but uses this many terms in an\n        approximation to it.)\n    factr : float, optional\n        The iteration stops when\n        ``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,\n        where ``eps`` is the machine precision, which is automatically\n        generated by the code. Typical values for `factr` are: 1e12 for\n        low accuracy; 1e7 for moderate accuracy; 10.0 for extremely\n        high accuracy. See Notes for relationship to `ftol`, which is exposed\n        (instead of `factr`) by the `scipy.optimize.minimize` interface to\n        L-BFGS-B.\n    pgtol : float, optional\n        The iteration will stop when\n        ``max{|proj g_i | i = 1, ..., n} <= pgtol``\n        where ``pg_i`` is the i-th component of the projected gradient.\n    epsilon : float, optional\n        Step size used when `approx_grad` is True, for numerically\n        calculating the gradient\n    iprint : int, optional\n        Controls the frequency of output. ``iprint < 0`` means no output;\n        ``iprint = 0``    print only one line at the last iteration;\n        ``0 < iprint < 99`` print also f and ``|proj g|`` every iprint iterations;\n        ``iprint = 99``   print details of every iteration except n-vectors;\n        ``iprint = 100``  print also the changes of active set and final x;\n        ``iprint > 100``  print details of every iteration including x and g.\n    disp : int, optional\n        If zero, then no output.  If a positive number, then this over-rides\n        `iprint` (i.e., `iprint` gets the value of `disp`).\n    maxfun : int, optional\n        Maximum number of function evaluations.\n    maxiter : int, optional\n        Maximum number of iterations.\n    callback : callable, optional\n        Called after each iteration, as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    maxls : int, optional\n        Maximum number of line search steps (per iteration). Default is 20.\n\n    Returns\n    -------\n    x : array_like\n        Estimated position of the minimum.\n    f : float\n        Value of `func` at the minimum.\n    d : dict\n        Information dictionary.\n\n        * d['warnflag'] is\n\n          - 0 if converged,\n          - 1 if too many function evaluations or too many iterations,\n          - 2 if stopped for another reason, given in d['task']\n\n        * d['grad'] is the gradient at the minimum (should be 0 ish)\n        * d['funcalls'] is the number of function calls made.\n        * d['nit'] is the number of iterations.\n\n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'L-BFGS-B' `method` in particular. Note that the\n        `ftol` option is made available via that interface, while `factr` is\n        provided via this interface, where `factr` is the factor multiplying\n        the default machine floating-point precision to arrive at `ftol`:\n        ``ftol = factr * numpy.finfo(float).eps``.\n\n    Notes\n    -----\n    License of L-BFGS-B (FORTRAN code):\n\n    The version included here (in fortran code) is 3.0\n    (released April 25, 2011).  It was written by Ciyou Zhu, Richard Byrd,\n    and Jorge Nocedal <nocedal@ece.nwu.edu>. It carries the following\n    condition for use:\n\n    This software is freely available, but we expect that all publications\n    describing work using this software, or all commercial products using it,\n    quote at least one of the references given below. This software is released\n    under the BSD License.\n\n    References\n    ----------\n    * R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for Bound\n      Constrained Optimization, (1995), SIAM Journal on Scientific and\n      Statistical Computing, 16, 5, pp. 1190-1208.\n    * C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (1997),\n      ACM Transactions on Mathematical Software, 23, 4, pp. 550 - 560.\n    * J.L. Morales and J. Nocedal. L-BFGS-B: Remark on Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (2011),\n      ACM Transactions on Mathematical Software, 38, 1.\n\n    \"\"\"", "\n", "# handle fprime/approx_grad", "\n", "if", "approx_grad", ":", "\n", "        ", "fun", "=", "func", "\n", "jac", "=", "None", "\n", "", "elif", "fprime", "is", "None", ":", "\n", "        ", "fun", "=", "MemoizeJac", "(", "func", ")", "\n", "jac", "=", "fun", ".", "derivative", "\n", "", "else", ":", "\n", "        ", "fun", "=", "func", "\n", "jac", "=", "fprime", "\n", "\n", "# build options", "\n", "", "if", "disp", "is", "None", ":", "\n", "        ", "disp", "=", "iprint", "\n", "", "opts", "=", "{", "'disp'", ":", "disp", ",", "\n", "'iprint'", ":", "iprint", ",", "\n", "'maxcor'", ":", "m", ",", "\n", "'ftol'", ":", "factr", "*", "np", ".", "finfo", "(", "float", ")", ".", "eps", ",", "\n", "'gtol'", ":", "pgtol", ",", "\n", "'eps'", ":", "epsilon", ",", "\n", "'maxfun'", ":", "maxfun", ",", "\n", "'maxiter'", ":", "maxiter", ",", "\n", "'callback'", ":", "callback", ",", "\n", "'maxls'", ":", "maxls", "}", "\n", "\n", "res", "=", "_minimize_lbfgsb_multi", "(", "fun", ",", "x0", ",", "args", "=", "args", ",", "jac", "=", "jac", ",", "bounds", "=", "bounds", ",", "\n", "**", "opts", ")", "\n", "d", "=", "{", "'grad'", ":", "res", "[", "'jac'", "]", ",", "\n", "'task'", ":", "res", "[", "'message'", "]", ",", "\n", "'funcalls'", ":", "res", "[", "'nfev'", "]", ",", "\n", "'nit'", ":", "res", "[", "'nit'", "]", ",", "\n", "'warnflag'", ":", "res", "[", "'status'", "]", "}", "\n", "f", "=", "res", "[", "'fun'", "]", "\n", "x", "=", "res", "[", "'x'", "]", "\n", "\n", "return", "x", ",", "f", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.multi_lbfgs._minimize_lbfgsb_multi": [[232, 430], ["scipy.optimize.optimize._check_unknown_options", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "x0.copy", "range", "enumerate", "scipy.optimize.optimize.OptimizeResult", "len", "ValueError", "ValueError", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "multi_lbfgs._minimize_lbfgsb_multi.func_and_grad"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "_minimize_lbfgsb_multi", "(", "fun", ",", "x0", ",", "args", "=", "(", ")", ",", "jac", "=", "None", ",", "bounds", "=", "None", ",", "\n", "disp", "=", "None", ",", "maxcor", "=", "10", ",", "ftol", "=", "2.2204460492503131e-09", ",", "\n", "gtol", "=", "1e-5", ",", "eps", "=", "1e-8", ",", "maxfun", "=", "15000", ",", "maxiter", "=", "15000", ",", "\n", "iprint", "=", "-", "1", ",", "callback", "=", "None", ",", "maxls", "=", "20", ",", "**", "unknown_options", ")", ":", "\n", "    ", "\"\"\"\n    Minimize a scalar function of one or more variables using the L-BFGS-B\n    algorithm.\n\n    Options\n    -------\n    disp : bool\n       Set to True to print convergence messages.\n    maxcor : int\n        The maximum number of variable metric corrections used to\n        define the limited memory matrix. (The limited memory BFGS\n        method does not store the full hessian but uses this many terms\n        in an approximation to it.)\n    ftol : float\n        The iteration stops when ``(f^k -\n        f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= ftol``.\n    gtol : float\n        The iteration will stop when ``max{|proj g_i | i = 1, ..., n}\n        <= gtol`` where ``pg_i`` is the i-th component of the\n        projected gradient.\n    eps : float\n        Step size used for numerical approximation of the jacobian.\n    disp : int\n        Set to True to print convergence messages.\n    maxfun : int\n        Maximum number of function evaluations.\n    maxiter : int\n        Maximum number of iterations.\n    maxls : int, optional\n        Maximum number of line search steps (per iteration). Default is 20.\n\n    Notes\n    -----\n    The option `ftol` is exposed via the `scipy.optimize.minimize` interface,\n    but calling `scipy.optimize.fmin_l_bfgs_b` directly exposes `factr`. The\n    relationship between the two is ``ftol = factr * numpy.finfo(float).eps``.\n    I.e., `factr` multiplies the default machine floating-point precision to\n    arrive at `ftol`.\n\n    \"\"\"", "\n", "_check_unknown_options", "(", "unknown_options", ")", "\n", "m", "=", "maxcor", "\n", "epsilon", "=", "eps", "\n", "pgtol", "=", "gtol", "\n", "factr", "=", "ftol", "/", "np", ".", "finfo", "(", "float", ")", ".", "eps", "\n", "\n", "k", ",", "n", "=", "x0", ".", "shape", "\n", "\n", "# x0 = [asarray(x).ravel() for x in x0]", "\n", "# n, = x0.shape", "\n", "\n", "if", "bounds", "is", "None", ":", "\n", "        ", "bounds", "=", "[", "(", "None", ",", "None", ")", "]", "*", "n", "\n", "\n", "", "if", "len", "(", "bounds", ")", "!=", "n", ":", "\n", "        ", "raise", "ValueError", "(", "'length of x0 != length of bounds'", ")", "\n", "# unbounded variables must use None, not +-inf, for optimizer to work properly", "\n", "", "bounds", "=", "[", "(", "None", "if", "l", "==", "-", "np", ".", "inf", "else", "l", ",", "None", "if", "u", "==", "np", ".", "inf", "else", "u", ")", "for", "l", ",", "u", "in", "bounds", "]", "\n", "\n", "if", "disp", "is", "not", "None", ":", "\n", "        ", "if", "disp", "==", "0", ":", "\n", "            ", "iprint", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "iprint", "=", "disp", "\n", "\n", "", "", "if", "jac", "is", "None", ":", "\n", "        ", "def", "func_and_grad", "(", "x", ")", ":", "\n", "# f = fun(x, *args)", "\n", "            ", "f", ",", "g", "=", "_approx_fprime_helper", "(", "x", ",", "fun", ",", "epsilon", ",", "args", "=", "args", ")", "\n", "return", "f", ",", "g", "\n", "", "", "else", ":", "\n", "        ", "def", "func_and_grad", "(", "x", ")", ":", "\n", "            ", "f", "=", "fun", "(", "x", ",", "*", "args", ")", "\n", "g", "=", "jac", "(", "x", ",", "*", "args", ")", "\n", "return", "f", ",", "g", "\n", "\n", "", "", "nbd", "=", "zeros", "(", "n", ",", "int32", ")", "\n", "low_bnd", "=", "zeros", "(", "n", ",", "float64", ")", "\n", "upper_bnd", "=", "zeros", "(", "n", ",", "float64", ")", "\n", "bounds_map", "=", "{", "(", "None", ",", "None", ")", ":", "0", ",", "\n", "(", "1", ",", "None", ")", ":", "1", ",", "\n", "(", "1", ",", "1", ")", ":", "2", ",", "\n", "(", "None", ",", "1", ")", ":", "3", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "l", ",", "u", "=", "bounds", "[", "i", "]", "\n", "if", "l", "is", "not", "None", ":", "\n", "            ", "low_bnd", "[", "i", "]", "=", "l", "\n", "l", "=", "1", "\n", "", "if", "u", "is", "not", "None", ":", "\n", "            ", "upper_bnd", "[", "i", "]", "=", "u", "\n", "u", "=", "1", "\n", "", "nbd", "[", "i", "]", "=", "bounds_map", "[", "l", ",", "u", "]", "\n", "\n", "", "if", "not", "maxls", ">", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'maxls must be positive.'", ")", "\n", "\n", "# x = [array(x0_, float64) for x0_ in x0]", "\n", "", "X", "=", "x0", ".", "copy", "(", ")", "\n", "\n", "f", "=", "[", "array", "(", "0.0", ",", "float64", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "g", "=", "[", "zeros", "(", "(", "n", ",", ")", ",", "float64", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "wa", "=", "[", "zeros", "(", "2", "*", "m", "*", "n", "+", "5", "*", "n", "+", "11", "*", "m", "*", "m", "+", "8", "*", "m", ",", "float64", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "iwa", "=", "[", "zeros", "(", "3", "*", "n", ",", "int32", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "task", "=", "[", "zeros", "(", "1", ",", "'S60'", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "csave", "=", "[", "zeros", "(", "1", ",", "'S60'", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "lsave", "=", "[", "zeros", "(", "4", ",", "int32", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "isave", "=", "[", "zeros", "(", "44", ",", "int32", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "dsave", "=", "[", "zeros", "(", "29", ",", "float64", ")", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "n_function_evals", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "task", "[", "i", "]", "[", ":", "]", "=", "'START'", "\n", "\n", "", "n_iterations", "=", "[", "0", "for", "_", "in", "range", "(", "k", ")", "]", "\n", "\n", "k_running", "=", "[", "i", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "while", "1", ":", "\n", "# x, f, g, wa, iwa, task, csave, lsave, isave, dsave = \\", "\n", "\n", "        ", "request_index", "=", "[", "]", "\n", "\n", "# run all instance until they request a new point", "\n", "# X contains only points for the remaining instances", "\n", "for", "i", "in", "k_running", ":", "\n", "            ", "while", "1", ":", "\n", "                ", "_lbfgsb", ".", "setulb", "(", "m", ",", "X", "[", "i", "]", ",", "low_bnd", ",", "upper_bnd", ",", "nbd", ",", "f", "[", "i", "]", ",", "g", "[", "i", "]", ",", "factr", ",", "\n", "pgtol", ",", "wa", "[", "i", "]", ",", "iwa", "[", "i", "]", ",", "task", "[", "i", "]", ",", "iprint", ",", "csave", "[", "i", "]", ",", "lsave", "[", "i", "]", ",", "\n", "isave", "[", "i", "]", ",", "dsave", "[", "i", "]", ",", "maxls", ")", "\n", "task_str", "=", "task", "[", "i", "]", ".", "tostring", "(", ")", "\n", "\n", "if", "task_str", ".", "startswith", "(", "b'FG'", ")", ":", "\n", "# The minimization routine wants f and g at the current x.", "\n", "# Note that interruptions due to maxfun are postponed", "\n", "# until the completion of the current minimization iteration.", "\n", "# Overwrite f and g:", "\n", "                    ", "request_index", ".", "append", "(", "i", ")", "\n", "break", "\n", "\n", "", "elif", "task_str", ".", "startswith", "(", "b'NEW_X'", ")", ":", "\n", "# new iteration", "\n", "                    ", "if", "n_iterations", "[", "i", "]", ">", "maxiter", ":", "\n", "                        ", "task", "[", "i", "]", "[", ":", "]", "=", "'STOP: TOTAL NO. of ITERATIONS EXCEEDS LIMIT'", "\n", "# break", "\n", "", "elif", "n_function_evals", ">", "maxfun", ":", "\n", "                        ", "task", "[", "i", "]", "[", ":", "]", "=", "(", "'STOP: TOTAL NO. of f AND g EVALUATIONS '", "\n", "'EXCEEDS LIMIT'", ")", "\n", "# break", "\n", "", "else", ":", "\n", "                        ", "n_iterations", "[", "i", "]", "+=", "1", "\n", "# if callback is not None:", "\n", "#     callback(x)", "\n", "", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "\n", "", "", "", "k_running", "=", "request_index", "\n", "if", "len", "(", "k_running", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "\n", "", "F", ",", "G", "=", "func_and_grad", "(", "X", "[", "request_index", "]", ")", "\n", "n_function_evals", "+=", "1", "\n", "\n", "for", "ff", ",", "gg", ",", "i", "in", "zip", "(", "F", ",", "G", ",", "k_running", ")", ":", "\n", "            ", "f", "[", "i", "]", "=", "ff", "\n", "g", "[", "i", "]", "=", "gg", "\n", "\n", "", "", "warnflag", "=", "[", "]", "\n", "task_str", "=", "[", "t", ".", "tostring", "(", ")", ".", "strip", "(", "b'\\x00'", ")", ".", "strip", "(", ")", "for", "t", "in", "task", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "task_str", ")", ":", "\n", "        ", "if", "t", ".", "startswith", "(", "b'CONV'", ")", ":", "\n", "            ", "warnflag", ".", "append", "(", "0", ")", "\n", "", "elif", "n_function_evals", ">", "maxfun", ":", "\n", "            ", "warnflag", ".", "append", "(", "1", ")", "\n", "", "elif", "n_iterations", "[", "i", "]", ">", "maxiter", ":", "\n", "            ", "warnflag", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "warnflag", ".", "append", "(", "3", ")", "\n", "\n", "# These two portions of the workspace are described in the mainlb", "\n", "# subroutine in lbfgsb.f. See line 363.", "\n", "# s = [wa[i][0: m*n].reshape(m, n) for i in range(k)]", "\n", "# y = [wa[i][m*n: 2*m*n].reshape(m, n) for i in range(k)]", "\n", "\n", "# See lbfgsb.f line 160 for this portion of the workspace.", "\n", "# isave(31) = the total number of BFGS updates prior the current iteration;", "\n", "# n_bfgs_updates = isave[30]", "\n", "\n", "# n_corrs = min(n_bfgs_updates, maxcor)", "\n", "# hess_inv = LbfgsInvHessProduct(s[:n_corrs], y[:n_corrs])", "\n", "\n", "", "", "return", "OptimizeResult", "(", "fun", "=", "f", ",", "jac", "=", "g", ",", "nfev", "=", "n_function_evals", ",", "\n", "nit", "=", "n_iterations", ",", "status", "=", "warnflag", ",", "message", "=", "task_str", ",", "\n", "x", "=", "X", ",", "success", "=", "(", "sum", "(", "warnflag", ")", "==", "0", ")", ")", "\n", "# return OptimizeResult(fun=f, jac=g, nfev=n_function_evals[0],", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.solver.Solver.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "domain", ",", "initial_x", "=", "None", ")", ":", "\n", "        ", "self", ".", "_domain", "=", "domain", "\n", "self", ".", "initial_x", "=", "initial_x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.solver.Solver.minimize": [[9, 16], ["None"], "methods", ["None"], ["", "def", "minimize", "(", "self", ",", "f", ")", ":", "\n", "        ", "\"\"\"\n            optimize f over domain\n            if self.requires_gradients = True, fun should return a tuple of (y,grad)\n\n         \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.solver.Solver.requires_gradients": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_gradients", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.solver.Solver.requires_safety": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_safety", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.candidate.CandidateSolver.__init__": [[9, 18], ["solver.Solver.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["class", "CandidateAlgorithmConfig", "(", "AlgorithmConfig", ")", ":", "\n", "    ", "candidates", "=", "ClassConfigField", "(", "None", ",", "comment", "=", "\"Function which returns a list of candidate points to be evaluated.\"", ",", "allow_none", "=", "True", ")", "\n", "_section", "=", "\"algorithm.candidate\"", "\n", "\n", "# config_manager.register(CandidateAlgorithmConfig)", "\n", "\n", "\n", "", "@", "assign_config", "(", "CandidateAlgorithmConfig", ")", "\n", "class", "CandidateAlgorithm", "(", "Algorithm", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.candidate.CandidateSolver.minimize": [[19, 24], ["f", "numpy.argmin"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["\n", "\n", "def", "initialize", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "**", "kwargs", ")", "\n", "self", ".", "_candidates", "=", "self", ".", "_get_candidates", "(", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.candidate.CandidateSolver.requires_gradients": [[25, 28], ["None"], "methods", ["None"], ["self", ".", "_num_candidates", "=", "len", "(", "self", ".", "_candidates", ")", "\n", "self", ".", "_i", "=", "0", "\n", "self", ".", "_exit", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.candidate.CandidateSolver.requires_safety": [[29, 32], ["None"], "methods", ["None"], ["", "def", "_get_candidates", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "candidates", "(", ")", "\n", "\n", "", "def", "_next", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.candidate.FiniteDomainSolver.__init__": [[34, 36], ["candidate.CandidateSolver.__init__"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["self", ".", "_i", "+=", "1", "\n", "if", "self", ".", "_i", "==", "self", ".", "_num_candidates", ":", "\n", "            ", "self", ".", "_exit", "=", "True", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.candidate.GridSolver.__init__": [[44, 52], ["febo.utils.cartesian", "candidate.CandidateSolver.__init__", "numpy.linspace().reshape", "zip", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.cartesian", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "points_per_dim", "=", "ConfigField", "(", "5", ")", "\n", "\n", "# config_manager.register(GridSearchConfig)", "\n", "\n", "", "@", "assign_config", "(", "GridSearchConfig", ")", "\n", "class", "GridSearch", "(", "CandidateAlgorithm", ")", ":", "\n", "    ", "def", "_get_candidates", "(", "self", ")", ":", "\n", "        ", "return", "cartesian", "(", "[", "np", ".", "linspace", "(", "self", ".", "domain", ".", "l", "[", "i", "]", ",", "self", ".", "domain", ".", "u", "[", "i", "]", ",", "self", ".", "config", ".", "points_per_dim", ")", "for", "i", "in", "range", "(", "self", ".", "domain", ".", "d", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.__init__": [[22, 29], ["numpy.empty", "numpy.empty"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "domain", ",", "initial_safe_point", "=", "None", ")", ":", "\n", "        ", "self", ".", "domain", "=", "domain", "\n", "self", ".", "d", "=", "domain", ".", "d", "\n", "self", ".", "initial_safe_point", "=", "initial_safe_point", "\n", "self", ".", "tail", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "d", ")", ")", "\n", "self", ".", "random_points", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "d", ")", ")", "\n", "self", ".", "initial_safe_point", "=", "initial_safe_point", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next": [[31, 48], ["numpy.random.binomial", "len"], "methods", ["None"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        return next seed\n        :return:\n        \"\"\"", "\n", "# randomly determine which list to choose", "\n", "\n", "#  pick randomly between the two lists, and increase current position of chosen list, cycle to beginning if needed", "\n", "if", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", "and", "len", "(", "self", ".", "tail", ")", ":", "\n", "            ", "x", "=", "self", ".", "tail", "[", "self", ".", "pos_tail", "]", "\n", "self", ".", "pos_tail", "=", "(", "self", ".", "pos_tail", "+", "1", ")", "%", "self", ".", "tail", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "# TODO generated random points on demand / use up list, then generate new points", "\n", "            ", "x", "=", "self", ".", "random_points", "[", "self", ".", "pos_random_points", "]", "\n", "self", ".", "pos_random_points", "=", "(", "self", ".", "pos_random_points", "+", "1", ")", "%", "self", ".", "random_points", ".", "shape", "[", "0", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds._return_initial_point": [[49, 52], ["None"], "methods", ["None"], ["", "def", "_return_initial_point", "(", "self", ")", ":", "\n", "        ", "self", ".", "next", "=", "self", ".", "_next", "\n", "return", "self", ".", "initial_safe_point", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.new_iteration": [[53, 60], ["seeds.Seeds.generate_random_points", "seeds.Seeds.add_to_tail"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.generate_random_points", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.add_to_tail"], ["", "def", "new_iteration", "(", "self", ",", "sfun", "=", "None", ")", ":", "\n", "        ", "self", ".", "pos_tail", "=", "0", "\n", "self", ".", "pos_random_points", "=", "0", "\n", "self", ".", "generate_random_points", "(", "sfun", ")", "\n", "\n", "if", "not", "self", ".", "initial_safe_point", "is", "None", ":", "\n", "            ", "self", ".", "add_to_tail", "(", "self", ".", "initial_safe_point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.add_to_tail": [[61, 77], ["numpy.concatenate", "numpy.random.binomial().astype", "x.reshape", "numpy.random.binomial"], "methods", ["None"], ["", "", "def", "add_to_tail", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            append x to tail, and apply binomial mask to fade out older items\n        \"\"\"", "\n", "tail_length", "=", "self", ".", "tail", ".", "shape", "[", "0", "]", "\n", "if", "tail_length", ">=", "self", ".", "config", ".", "expected_tail_length", ":", "\n", "# flip a coin, such that in expectation, we have (SEEDS_TAIL_LENGTH_EXPECTED - 1) successes", "\n", "            ", "p", "=", "(", "self", ".", "config", ".", "expected_tail_length", "-", "1", ")", "/", "tail_length", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "p", ",", "size", "=", "tail_length", ")", ".", "astype", "(", "bool", ")", "\n", "self", ".", "tail", "=", "self", ".", "tail", "[", "mask", "]", "# boolean mask", "\n", "\n", "", "if", "self", ".", "tail", ".", "shape", "[", "0", "]", ">", "self", ".", "config", ".", "max_tail_length", ":", "\n", "            ", "self", ".", "tail", "=", "self", ".", "tail", "[", "0", ":", "self", ".", "config", ".", "max_tail_length", "]", "\n", "\n", "# insert new point on top", "\n", "", "self", ".", "tail", "=", "np", ".", "concatenate", "(", "(", "x", ".", "reshape", "(", "-", "1", ",", "self", ".", "d", ")", ",", "self", ".", "tail", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.generate_random_points": [[78, 106], ["numpy.concatenate", "numpy.array", "numpy.random.uniform", "int", "range", "projected_points.append", "seeds.Seeds.initial_safe_point.reshape", "numpy.random.randint", "sfun"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "generate_random_points", "(", "self", ",", "sfun", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        adds random points to the queue\n        :param sfun: function, which takes array x as input, and returns True if x is safe and False otherwise.\n        \"\"\"", "\n", "self", ".", "random_points", "=", "self", ".", "domain", ".", "l", "+", "self", ".", "domain", ".", "range", "*", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "self", ".", "config", ".", "num_random_points", ",", "self", ".", "d", ")", ")", "\n", "\n", "if", "self", ".", "config", ".", "safe_projection", "and", "sfun", "is", "not", "None", ":", "\n", "# sample a point from a known safe set", "\n", "            ", "point_array", "=", "np", ".", "concatenate", "(", "(", "self", ".", "initial_safe_point", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "self", ".", "tail", ")", ")", "\n", "projected_points", "=", "[", "]", "\n", "\n", "for", "point", "in", "self", ".", "random_points", ":", "\n", "                ", "random_index", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "point_array", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "safe_point", "=", "point_array", "[", "random_index", ",", ":", "]", "\n", "# do a line search", "\n", "alpha", "=", "1.0", "\n", "for", "i", "in", "range", "(", "self", ".", "config", ".", "projection_max_line_search", ")", ":", "\n", "                    ", "new_point", "=", "safe_point", "+", "alpha", "*", "(", "point", "-", "safe_point", ")", "\n", "if", "sfun", "(", "new_point", ")", ":", "\n", "                        ", "break", "\n", "\n", "", "alpha", "/=", "1.5", "\n", "\n", "# just always add the last point we get, even if it is not safe", "\n", "", "projected_points", ".", "append", "(", "new_point", ")", "\n", "\n", "", "self", ".", "random_points", "=", "np", ".", "array", "(", "projected_points", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.FunWrapper.__init__": [[28, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fun", ",", "use_gradients", ",", "safe_mode", "=", "False", ",", "safety_wrapper", "=", "None", ")", ":", "\n", "        ", "self", ".", "_fun", "=", "fun", "\n", "self", ".", "best_x", "=", "None", "\n", "self", ".", "best_y", "=", "10e10", "\n", "self", ".", "_use_gradients", "=", "use_gradients", "\n", "self", ".", "_safe_mode", "=", "safe_mode", "\n", "self", ".", "_safety_wrapper", "=", "safety_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.FunWrapper.__call__": [[36, 57], ["numpy.atleast_2d", "scipy.FunWrapper._fun", "zip", "len", "scipy.FunWrapper._safety_wrapper", "xx.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "res", "=", "self", ".", "_fun", "(", "x", ")", "\n", "if", "self", ".", "_use_gradients", ":", "\n", "            ", "y", ",", "grad", "=", "res", "\n", "", "else", ":", "\n", "            ", "y", "=", "res", "\n", "\n", "", "safe", "=", "[", "True", "]", "*", "len", "(", "x", ")", "\n", "if", "self", ".", "_safe_mode", ":", "\n", "            ", "y", ",", "safe", "=", "self", ".", "_safety_wrapper", "(", "x", ",", "y", ")", "# pass through safety wrapper", "\n", "\n", "", "for", "xx", ",", "yy", ",", "ss", "in", "zip", "(", "x", ",", "y", ",", "safe", ")", ":", "\n", "            ", "if", "yy", "<", "self", ".", "best_y", "and", "ss", ":", "\n", "                ", "self", ".", "best_y", "=", "yy", "\n", "self", ".", "best_x", "=", "xx", ".", "copy", "(", ")", "\n", "\n", "", "", "if", "self", ".", "_use_gradients", ":", "\n", "            ", "return", "y", ",", "grad", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.ScipySolver.__init__": [[61, 76], ["solver.Solver.__init__", "seeds.Seeds", "multiprocessing.pool.Pool", "zip"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ScipySolver", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "seeds", "=", "Seeds", "(", "self", ".", "_domain", ",", "self", ".", "initial_x", ")", "\n", "\n", "\n", "if", "self", ".", "config", ".", "num_processes", ">", "1", ":", "\n", "            ", "pool", "=", "Pool", "(", "self", ".", "config", ".", "num_processes", ")", "\n", "self", ".", "map", "=", "pool", ".", "map", "\n", "", "else", ":", "\n", "            ", "self", ".", "map", "=", "map", "\n", "\n", "", "self", ".", "_bounds", "=", "[", "(", "l", ",", "u", ")", "for", "l", ",", "u", "in", "zip", "(", "self", ".", "_domain", ".", "l", ",", "self", ".", "_domain", ".", "u", ")", "]", "\n", "self", ".", "safe_mode", "=", "False", "\n", "self", ".", "safety_wrapper", "=", "None", "\n", "self", ".", "infeasible_exception", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.ScipySolver.requires_gradients": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "requires_gradients", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "lbfgs_use_gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.ScipySolver.minimize": [[81, 113], ["scipy.ScipySolver.seeds.new_iteration", "scipy.FunWrapper", "febo.utils.split_int", "scipy.ScipySolver.map", "Exception", "scipy.ScipySolver.seeds.add_to_tail", "numpy.array", "range", "scipy.ScipySolver.seeds.next", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.new_iteration", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utils.utils.split_int", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.add_to_tail", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.next", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["", "def", "minimize", "(", "self", ",", "f", ")", ":", "\n", "        ", "self", ".", "seeds", ".", "new_iteration", "(", ")", "\n", "fun", "=", "FunWrapper", "(", "f", ",", "self", ".", "requires_gradients", ",", "self", ".", "safe_mode", ",", "self", ".", "safety_wrapper", ")", "\n", "restarts_per_process", "=", "split_int", "(", "self", ".", "config", ".", "num_restart", ",", "self", ".", "config", ".", "num_processes", ")", "\n", "opt", "=", "{", "'maxfun'", ":", "self", ".", "config", ".", "lbfgs_maxfun", "}", "\n", "restart_args", "=", "[", "{", "\n", "'fun'", ":", "fun", ",", "\n", "'X0'", ":", "np", ".", "array", "(", "[", "self", ".", "seeds", ".", "next", "(", ")", "for", "_", "in", "range", "(", "restarts_per_process", "[", "p", "]", ")", "]", ")", ",", "\n", "'use_gradients'", ":", "self", ".", "requires_gradients", ",", "\n", "'bounds'", ":", "self", ".", "_bounds", ",", "\n", "'sync_restarts'", ":", "self", ".", "config", ".", "sync_restarts", ",", "\n", "'warnings'", ":", "self", ".", "config", ".", "convergence_warnings", ",", "\n", "'options'", ":", "opt", "}", "\n", "for", "p", "in", "range", "(", "self", ".", "config", ".", "num_processes", ")", "]", "\n", "res", "=", "self", ".", "map", "(", "minimize", ",", "restart_args", ")", "\n", "\n", "\n", "best_y", "=", "10e10", "\n", "best_x", "=", "None", "\n", "for", "x", ",", "y", "in", "res", ":", "\n", "            ", "if", "y", "<", "best_y", ":", "\n", "                ", "best_y", "=", "y", "\n", "best_x", "=", "x", "\n", "\n", "", "", "if", "best_x", "is", "None", "and", "self", ".", "infeasible_exception", ":", "\n", "            ", "raise", "Exception", "(", "\"Optimizer did not find a feasible point!\"", ")", "\n", "\n", "# adding best x to seeds", "\n", "", "if", "best_x", "is", "not", "None", ":", "\n", "            ", "self", ".", "seeds", ".", "add_to_tail", "(", "best_x", ")", "\n", "\n", "", "return", "best_x", ",", "best_y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.SafeScipyOptimizer._wrap_f_grad": [[119, 127], ["scipy.SafeScipyOptimizer.f", "x.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["    ", "def", "_wrap_f_grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", ",", "grad", ",", "safe", "=", "self", ".", "f", "(", "x", ")", "\n", "\n", "if", "safe", "and", "y", "<", "self", ".", "best_y", ":", "\n", "            ", "self", ".", "best_y", "=", "y", "\n", "self", ".", "best_x", "=", "x", ".", "copy", "(", ")", "\n", "\n", "", "return", "y", ",", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.SafeScipyOptimizer._wrap_f": [[128, 136], ["scipy.SafeScipyOptimizer.f", "x.copy"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy"], ["", "def", "_wrap_f", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", ",", "safe", "=", "self", ".", "f", "(", "x", ")", "\n", "\n", "if", "safe", "and", "y", "<", "self", ".", "best_y", ":", "\n", "            ", "self", ".", "best_y", "=", "y", "\n", "self", ".", "best_x", "=", "x", ".", "copy", "(", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.SafeScipyOptimizer._initialize_seeds": [[137, 140], ["scipy.SafeScipyOptimizer.seeds.new_iteration"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.seeds.Seeds.new_iteration"], ["", "def", "_initialize_seeds", "(", "self", ")", ":", "\n", "        ", "sfun", "=", "self", ".", "_s_grad", "if", "self", ".", "requires_gradients", "else", "self", ".", "_s", "\n", "self", ".", "seeds", ".", "new_iteration", "(", "sfun", "=", "sfun", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.SafeScipyOptimizer._s_grad": [[141, 144], ["scipy.SafeScipyOptimizer.f"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["", "def", "_s_grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", ",", "grad", ",", "safe", "=", "self", ".", "f", "(", "x", ")", "\n", "return", "safe", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.SafeScipyOptimizer._s": [[145, 148], ["scipy.SafeScipyOptimizer.f"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.f"], ["", "def", "_s", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", ",", "safe", "=", "self", ".", "f", "(", "x", ")", "\n", "return", "safe", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize": [[150, 187], ["scipy.optimize.minimize", "zip", "warnings.items", "scipy.optimize.minimize", "logger.warning"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.items", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.solvers.scipy.minimize"], ["", "", "def", "minimize", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper around scipy.optimizer.minimize, which can be called using multi processing.\n    This method does multiple restarts for each x0 in X0 provided.\n\n    \"\"\"", "\n", "fun", "=", "args", "[", "'fun'", "]", "\n", "X0", "=", "args", "[", "'X0'", "]", "\n", "use_gradients", "=", "args", "[", "'use_gradients'", "]", "\n", "bounds", "=", "args", "[", "'bounds'", "]", "\n", "sync_restarts", "=", "args", "[", "'sync_restarts'", "]", "\n", "warnings", "=", "args", "[", "'warnings'", "]", "\n", "options", "=", "args", "[", "'options'", "]", "\n", "\n", "warnings", "=", "{", "}", "# dict to collect warnings", "\n", "if", "sync_restarts", ":", "\n", "         ", "res", "=", "scipy_minimize", "(", "fun", ",", "X0", ",", "method", "=", "_minimize_lbfgsb_multi", ",", "jac", "=", "use_gradients", ",", "tol", "=", "0.001", ",", "bounds", "=", "bounds", ",", "options", "=", "options", ")", "\n", "for", "status", ",", "mes", "in", "zip", "(", "res", "[", "'status'", "]", ",", "res", "[", "'message'", "]", ")", ":", "\n", "\n", "             ", "if", "status", ":", "\n", "                 ", "if", "not", "mes", "in", "warnings", ":", "\n", "                     ", "warnings", "[", "mes", "]", "=", "0", "\n", "", "warnings", "[", "mes", "]", "+=", "1", "\n", "", "", "", "else", ":", "\n", "        ", "for", "x", "in", "X0", ":", "\n", "            ", "res", "=", "scipy_minimize", "(", "fun", ",", "x", ",", "method", "=", "\"L-BFGS-B\"", ",", "jac", "=", "use_gradients", ",", "tol", "=", "1e-7", ",", "bounds", "=", "bounds", ",", "options", "=", "options", ")", "\n", "if", "res", "[", "'status'", "]", ":", "\n", "                ", "mes", "=", "res", "[", "'message'", "]", "\n", "\n", "if", "not", "mes", "in", "warnings", ":", "\n", "                    ", "warnings", "[", "mes", "]", "=", "0", "\n", "", "warnings", "[", "mes", "]", "+=", "1", "\n", "\n", "", "", "", "if", "warnings", ":", "\n", "        ", "for", "mes", ",", "num", "in", "warnings", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "f'Optimizer Warning ({num}x): {mes}'", ")", "\n", "", "", "return", "fun", ".", "best_x", ",", "fun", ".", "best_y", "\n", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.run_bayesopt_attack.BayesOpt_attack": [[15, 179], ["objective_func.objective_functions_tf.CNN", "numpy.vstack", "numpy.vstack", "os.path.exists", "os.makedirs", "list", "print", "print", "objective_func.objective_functions_tf.CNN.get_data_sample", "print", "os.path.join", "os.path.join", "int", "range", "numpy.random.seed", "print", "bayesopt.Bayes_opt", "bayesopt.Bayes_opt.initialise", "bayesopt.Bayes_opt.run", "Y_opt_all_slices.append", "Y_query_all_slices.append", "int", "os.path.exists", "print", "print", "utilities.utilities.get_init_data", "X_reduced_opt_all_slices.append", "X_reduced_query_all_slices.append", "X_query_all_slices.append", "X_opt_all_slices.append", "print", "X_reduced_opt_all_slices.append", "X_reduced_query_all_slices.append", "utilities.upsampler.upsample_projection", "X_query_all_slices.append", "utilities.upsampler.upsample_projection", "X_opt_all_slices.append", "print", "numpy.abs().sum", "numpy.sqrt", "open", "pickle.dump", "objective_func.objective_functions_tf.CNN.np_evaluate_bili", "objective_func.objective_functions_tf.CNN.np_upsample_evaluate_bili", "objective_func.objective_functions_tf.CNN.np_evaluate", "objective_func.objective_functions_tf.CNN.np_upsample_evaluate", "open", "pickle.load", "X_opt.astype", "X_query.astype", "X_opt.astype", "X_query.astype", "numpy.sum", "numpy.abs", "X_h_opt[].ravel"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.get_data_sample", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.initialise", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.get_init_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_evaluate_bili", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_upsample_evaluate_bili", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_upsample_evaluate", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load"], ["def", "BayesOpt_attack", "(", "obj_func", ",", "model_type", ",", "acq_type", ",", "batch_size", ",", "low_dim", ",", "sparse", ",", "seed", ",", "\n", "img_offset", ",", "n_init", "=", "50", ",", "num_iter", "=", "40", ",", "ntargets", "=", "9", ",", "target_label", "=", "0", ",", "dim_reduction", "=", "'BILI'", ",", "\n", "cost_metric", "=", "None", ",", "obj_metric", "=", "1", ",", "update_freq", "=", "10", ",", "nsubspaces", "=", "1", ")", ":", "\n", "# Specify code directory", "\n", "    ", "directory", "=", "'./'", "\n", "\n", "if", "obj_func", "==", "'mnist'", ":", "\n", "        ", "high_dim", "=", "784", "\n", "nchannel", "=", "1", "\n", "epsilon", "=", "0.3", "\n", "\n", "", "elif", "obj_func", "==", "'cifar10'", ":", "\n", "        ", "high_dim", "=", "int", "(", "32", "*", "32", ")", "\n", "nchannel", "=", "3", "\n", "epsilon", "=", "0.05", "\n", "\n", "", "elif", "obj_func", "==", "'imagenet'", ":", "\n", "        ", "high_dim", "=", "int", "(", "96", "*", "96", ")", "\n", "nchannel", "=", "3", "\n", "epsilon", "=", "0.05", "\n", "ntargets", "=", "1", "\n", "\n", "", "if", "'LDR'", "in", "model_type", ":", "\n", "        ", "low_dim", "=", "high_dim", "\n", "\n", "", "if", "dim_reduction", "==", "'NONE'", ":", "\n", "        ", "x_bounds", "=", "np", ".", "vstack", "(", "[", "[", "-", "1", ",", "1", "]", "]", "*", "high_dim", "*", "nchannel", ")", "\n", "", "else", ":", "\n", "        ", "x_bounds", "=", "np", ".", "vstack", "(", "[", "[", "-", "1", ",", "1", "]", "]", "*", "low_dim", "*", "nchannel", ")", "\n", "\n", "# Specify the experiment results saving directory", "\n", "", "results_data_folder", "=", "f'{directory}exp_results/{obj_func}_tf_{model_type}_ob{obj_metric}_'", "f'_freq{update_freq}_ld{low_dim}_{dim_reduction}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_data_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "results_data_folder", ")", "\n", "\n", "# Define the model and the original images to be attacked", "\n", "", "cnn", "=", "CNN", "(", "dataset_name", "=", "obj_func", ",", "img_offset", "=", "img_offset", ",", "epsilon", "=", "epsilon", ",", "\n", "dim_reduction", "=", "dim_reduction", ",", "low_dim", "=", "low_dim", ",", "high_dim", "=", "high_dim", ",", "\n", "obj_metric", "=", "obj_metric", ",", "results_folder", "=", "results_data_folder", ",", "\n", "directory", "=", "directory", ")", "\n", "\n", "# For each image, define the target class", "\n", "if", "ntargets", ">", "1", ":", "\n", "        ", "target_list", "=", "list", "(", "range", "(", "ntargets", ")", ")", "\n", "", "else", ":", "\n", "        ", "target_list", "=", "[", "target_label", "]", "\n", "\n", "# Start attack each target in sequence", "\n", "", "for", "tg", "in", "target_list", ":", "\n", "        ", "print", "(", "tg", ",", "target_label", ")", "\n", "print", "(", "'*'", "*", "100", ")", "\n", "cnn", ".", "get_data_sample", "(", "tg", ")", "\n", "input_label", "=", "cnn", ".", "input_label", "\n", "img_id", "=", "cnn", ".", "orig_img_id", "\n", "target_label", "=", "cnn", ".", "target_label", "[", "0", "]", "\n", "print", "(", "f'id={img_offset}, origin={input_label}, target={target_label}, eps={epsilon}, dr={low_dim}'", ")", "\n", "\n", "# Define the BO objective function", "\n", "if", "obj_func", "==", "'imagenet'", ":", "\n", "            ", "if", "'LDR'", "in", "model_type", "or", "dim_reduction", "==", "'NONE'", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_evaluate_bili", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_upsample_evaluate_bili", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'LDR'", "in", "model_type", "or", "dim_reduction", "==", "'NONE'", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_evaluate", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "f", "=", "lambda", "x", ":", "cnn", ".", "np_upsample_evaluate", "(", "x", ")", "\n", "\n", "# Define the name of results file and failure fail(for debug or resume)", "\n", "", "", "results_file_name", "=", "os", ".", "path", ".", "join", "(", "results_data_folder", ",", "\n", "f'{model_type}{acq_type}{batch_size}_{dim_reduction}_\\\n                                         d{low_dim}_i{input_label}_t{target_label}_id{img_id}'", ")", "\n", "failed_file_name", "=", "os", ".", "path", ".", "join", "(", "results_data_folder", ",", "\n", "f'failed_{model_type}{acq_type}{batch_size}_{dim_reduction}_\\\n                                        d{low_dim}_i{input_label}_t{target_label}_id{img_id}'", ")", "\n", "\n", "X_opt_all_slices", "=", "[", "]", "\n", "Y_opt_all_slices", "=", "[", "]", "\n", "X_query_all_slices", "=", "[", "]", "\n", "Y_query_all_slices", "=", "[", "]", "\n", "X_reduced_opt_all_slices", "=", "[", "]", "\n", "X_reduced_query_all_slices", "=", "[", "]", "\n", "\n", "seed_list", "=", "[", "seed", "]", "# can be modified to do BO over multiple seeds", "\n", "for", "seed", "in", "seed_list", ":", "\n", "# Specify the random seed", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Generate initial observation data for BO", "\n", "if", "os", ".", "path", ".", "exists", "(", "results_file_name", ")", "and", "'LDR'", "not", "in", "model_type", ":", "\n", "                ", "print", "(", "'load old init data'", ")", "\n", "with", "open", "(", "results_file_name", ",", "'rb'", ")", "as", "pre_file", ":", "\n", "                    ", "previous_bo_results", "=", "pickle", ".", "load", "(", "pre_file", ")", "\n", "", "x_init", "=", "previous_bo_results", "[", "'X_reduced_query'", "]", "[", "0", "]", "\n", "y_init", "=", "previous_bo_results", "[", "'Y_query'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "'generate new init data'", ")", "\n", "x_init", ",", "y_init", "=", "get_init_data", "(", "obj_func", "=", "f", ",", "n_init", "=", "n_init", ",", "bounds", "=", "x_bounds", ")", "\n", "", "print", "(", "f'X init shape {x_init.shape}'", ")", "\n", "\n", "# Initialise BO", "\n", "bayes_opt", "=", "Bayes_opt", "(", "func", "=", "f", ",", "bounds", "=", "x_bounds", ",", "saving_path", "=", "failed_file_name", ")", "\n", "bayes_opt", ".", "initialise", "(", "X_init", "=", "x_init", ",", "Y_init", "=", "y_init", ",", "model_type", "=", "model_type", ",", "acq_type", "=", "acq_type", ",", "\n", "sparse", "=", "sparse", ",", "nsubspaces", "=", "nsubspaces", ",", "batch_size", "=", "batch_size", ",", "update_freq", "=", "update_freq", ",", "\n", "nchannel", "=", "nchannel", ",", "high_dim", "=", "high_dim", ",", "dim_reduction", "=", "dim_reduction", ",", "\n", "cost_metric", "=", "cost_metric", ",", "seed", "=", "seed", ")", "\n", "\n", "# Run BO", "\n", "X_query_full", ",", "Y_query", ",", "X_opt_full", ",", "Y_opt", ",", "time_record", "=", "bayes_opt", ".", "run", "(", "total_iterations", "=", "num_iter", ")", "\n", "\n", "# Reduce the memory needed for storing results", "\n", "if", "'LDR'", "in", "model_type", ":", "\n", "                ", "X_query", "=", "X_query_full", "[", "-", "2", ":", "]", "\n", "X_opt", "=", "X_opt_full", "[", "-", "2", ":", "]", "\n", "", "else", ":", "\n", "                ", "X_query", "=", "X_query_full", "\n", "X_opt", "=", "X_opt_full", "[", "-", "2", ":", "]", "\n", "\n", "# Store the results", "\n", "", "Y_opt_all_slices", ".", "append", "(", "Y_opt", ")", "\n", "Y_query_all_slices", ".", "append", "(", "Y_query", ")", "\n", "opt_dr_list", "=", "bayes_opt", ".", "opt_dr_list", "\n", "\n", "if", "dim_reduction", "==", "'NONE'", ":", "\n", "                ", "X_reduced_opt_all_slices", ".", "append", "(", "X_opt", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "X_reduced_query_all_slices", ".", "append", "(", "X_query", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "X_query_all_slices", ".", "append", "(", "X_query", ")", "\n", "X_opt_all_slices", ".", "append", "(", "X_opt", ")", "\n", "print", "(", "f'Y_opt={Y_opt[-1]}, X_opt shape{X_opt.shape}, X_h_opt shape{X_opt.shape}, '", "\n", "f'X_query shape{X_query.shape}, X_h_query shape{X_query.shape}, opt_dr={opt_dr_list[-1]}'", ")", "\n", "", "else", ":", "\n", "                ", "X_reduced_opt_all_slices", ".", "append", "(", "X_opt", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "X_reduced_query_all_slices", ".", "append", "(", "X_query", ".", "astype", "(", "np", ".", "float16", ")", ")", "\n", "\n", "# Transform data from reduced search space to original high-dimensional input space", "\n", "X_h_query", "=", "upsample_projection", "(", "dim_reduction", ",", "X_query", ",", "low_dim", "=", "low_dim", ",", "high_dim", "=", "high_dim", ",", "\n", "nchannel", "=", "nchannel", ")", "\n", "X_query_all_slices", ".", "append", "(", "X_h_query", ")", "\n", "X_h_opt", "=", "upsample_projection", "(", "dim_reduction", ",", "X_opt", ",", "low_dim", "=", "low_dim", ",", "high_dim", "=", "high_dim", ",", "\n", "nchannel", "=", "nchannel", ")", "\n", "X_opt_all_slices", ".", "append", "(", "X_h_opt", ")", "\n", "print", "(", "f'Y_opt={Y_opt[-1]}, X_opt shape{X_opt.shape}, X_h_opt shape{X_h_opt.shape}, '", "\n", "f'X_query shape{X_query.shape}, X_h_query shape{X_h_query.shape}'", ")", "\n", "\n", "# For ImageNet images, save only the L_inf norm and L2 norm instead of the adversarial image", "\n", "", "if", "'imagenet'", "in", "obj_func", ":", "\n", "                ", "l_inf_sum", "=", "np", ".", "abs", "(", "X_h_opt", "[", "-", "1", ",", ":", "]", ")", ".", "sum", "(", ")", "\n", "l_2_norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "epsilon", "*", "X_h_opt", "[", "-", "1", ",", ":", "]", ".", "ravel", "(", ")", ")", "**", "2", ")", ")", "\n", "X_opt_all_slices", "=", "[", "l_inf_sum", "]", "\n", "X_query_all_slices", "=", "[", "l_2_norm", "]", "\n", "\n", "# Save the results locally", "\n", "", "results", "=", "{", "'X_opt'", ":", "X_opt_all_slices", ",", "\n", "'Y_opt'", ":", "Y_opt_all_slices", ",", "\n", "'X_query'", ":", "X_query_all_slices", ",", "\n", "'Y_query'", ":", "Y_query_all_slices", ",", "\n", "'X_reduced_opt'", ":", "X_reduced_opt_all_slices", ",", "\n", "'X_reduced_query'", ":", "X_reduced_query_all_slices", ",", "\n", "'dr_opt_list'", ":", "opt_dr_list", ",", "\n", "'runtime'", ":", "time_record", "}", "\n", "with", "open", "(", "results_file_name", ",", "'wb'", ")", "as", "file", ":", "\n", "                ", "pickle", ".", "dump", "(", "results", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.__init__": [[19, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "func", ",", "bounds", ",", "saving_path", ",", "noise_var", ")", ":", "\n", "        ", "\"\"\"\n        Bayesian Optimisation algorithm\n\n        :param func: the objective function to be optimised\n        :param bounds: the input space bounds\n        :param saving_path: saving path for failed BO runs (rarely occurred)\n        \"\"\"", "\n", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "bounds", "=", "bounds", "\n", "#self.noise_var = 1.0e-10", "\n", "self", ".", "noise_var", "=", "noise_var", "\n", "self", ".", "saving_path", "=", "saving_path", "\n", "\n", "self", ".", "mlflow_logging", "=", "self", ".", "func", ".", "mlflow_logging", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.initialise": [[36, 152], ["int", "bayesopt.Bayes_opt.mlflow_logging.log_init_y", "numpy.copy", "numpy.copy", "numpy.atleast_2d", "numpy.min", "acq_funcs.acq_optimizer.Acq_Optimizer", "numpy.min", "model_type.startswith", "logging.info", "models.gp.GPModel", "models.gp.GPModel", "models.gpdr.GPModelLDR", "models.gpdr.GPModelLDR", "logging.info", "acq_funcs.acquisitions.LCB_budget_additive", "acq_funcs.acquisitions.LCB_budget", "numpy.argmin", "models.additive_gp_decomp.Additive_GPModel_Learn_Decomp", "models.additive_gp_decomp.Additive_GPModel_Learn_Decomp"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_init_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info"], ["", "def", "initialise", "(", "self", ",", "X_init", "=", "None", ",", "Y_init", "=", "None", ",", "model_type", "=", "'GP'", ",", "\n", "acq_type", "=", "'LCB'", ",", "batch_option", "=", "'CL'", ",", "batch_size", "=", "1", ",", "sparse", "=", "None", ",", "seed", "=", "42", ",", "nchannel", "=", "3", ",", "\n", "high_dim", "=", "int", "(", "32", "*", "32", ")", ",", "\n", "ARD", "=", "False", ",", "cost_metric", "=", "None", ",", "nsubspaces", "=", "1", ",", "normalize_Y", "=", "True", ",", "update_freq", "=", "10", ",", "dim_reduction", "=", "'BILI'", ",", "beta", "=", "None", ",", "gridSize", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param X_init: initial observation input data\n        :param Y_init: initial observation input data\n        :param model_type: BO surrogate model type\n        :param acq_type: BO acquisition function type\n        :param batch_option: for selecting a batch of new locations to be evaluated in parallel next\n        :param batch_size: the number of new query locations in the batch (=1 for sequential BO and > 1 for parallel BO)\n        :param sparse: sparse GP options\n        :param seed: random seed\n        :param nchannel: number of image channels\n        :param high_dim: image dimension (e.g. 32x32 for CIFAR10) or high-dimensional search space for imagenet (96x96)\n        :param ARD: ARD option for GP models\n        :param cost_metric: perturbatino cost metric; if None, the acqusition equals to normal LCB acquisition function\n        :param nsubspaces: number of subspaces in the decomposition for ADDGP only\n        :param normalize_Y: normalise output data\n        :param update_freq: frequency of relearning GP hyperparameters\n        :param dim_reduction: dimension reduction method used in upsampling\n        \"\"\"", "\n", "\n", "# INIT mlflow logging", "\n", "self", ".", "mlflow_logging", ".", "log_init_y", "(", "np", ".", "min", "(", "self", ".", "func", ".", "history_y", ")", ")", "\n", "\n", "assert", "X_init", ".", "ndim", "==", "2", ",", "\"X_init has to be 2D array\"", "\n", "assert", "Y_init", ".", "ndim", "==", "2", ",", "\"Y_init has to be 2D array\"", "\n", "\n", "'''\n        print(X_init.shape)\n        print(Y_init.shape)\n        print(model_type)\n        print(acq_type)\n        print(batch_option)\n        print(batch_size)\n        print(sparse)\n        print(seed)\n        print(nchannel)\n        print(high_dim)\n        print(ARD)\n        print(cost_metric)\n        print(nsubspaces)\n        print(normalize_Y)\n        print(update_freq)\n        print(dim_reduction)\n        input()\n        '''", "\n", "\n", "self", ".", "X_init", "=", "X_init", "\n", "self", ".", "Y_init", "=", "Y_init", "\n", "self", ".", "X", "=", "np", ".", "copy", "(", "X_init", ")", "\n", "self", ".", "Y", "=", "np", ".", "copy", "(", "Y_init", ")", "\n", "self", ".", "acq_type", "=", "acq_type", "\n", "self", ".", "batch_option", "=", "batch_option", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "model_type", "=", "model_type", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "normalize_Y", "=", "normalize_Y", "\n", "self", ".", "nchannel", "=", "nchannel", "\n", "self", ".", "X_dim", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "high_dim", "=", "high_dim", "\n", "self", ".", "dim_reduction", "=", "dim_reduction", "\n", "\n", "# Find the minimum observed functional value and its location", "\n", "self", ".", "arg_opt", "=", "np", ".", "atleast_2d", "(", "self", ".", "X", "[", "np", ".", "argmin", "(", "self", ".", "Y", ")", "]", ")", "\n", "self", ".", "minY", "=", "np", ".", "min", "(", "self", ".", "Y", ")", "\n", "\n", "# Choose the surrogate model for BO", "\n", "if", "model_type", "==", "'GP'", ":", "\n", "            ", "nsubspaces", "=", "1", "\n", "if", "self", ".", "noise_var", ">", "1e-6", ":", "\n", "                ", "self", ".", "model", "=", "GPModel", "(", "noise_var", "=", "self", ".", "noise_var", ",", "ARD", "=", "ARD", ",", "seed", "=", "seed", ",", "\n", "normalize_Y", "=", "self", ".", "normalize_Y", ",", "\n", "update_freq", "=", "update_freq", ",", "sparse", "=", "sparse", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "GPModel", "(", "exact_feval", "=", "True", ",", "ARD", "=", "ARD", ",", "seed", "=", "seed", ",", "normalize_Y", "=", "self", ".", "normalize_Y", ",", "\n", "update_freq", "=", "update_freq", ",", "sparse", "=", "sparse", ")", "\n", "\n", "", "", "if", "model_type", "==", "'GPLDR'", ":", "\n", "            ", "nsubspaces", "=", "1", "\n", "if", "self", ".", "noise_var", ">", "1e-6", ":", "\n", "                ", "self", ".", "model", "=", "GPModelLDR", "(", "noise_var", "=", "self", ".", "noise_var", ",", "ARD", "=", "ARD", ",", "seed", "=", "seed", ",", "high_dim", "=", "high_dim", ",", "\n", "dim_reduction", "=", "dim_reduction", ",", "sparse", "=", "sparse", ",", "\n", "normalize_Y", "=", "self", ".", "normalize_Y", ",", "update_freq", "=", "update_freq", ",", "nchannel", "=", "nchannel", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "GPModelLDR", "(", "exact_feval", "=", "True", ",", "ARD", "=", "ARD", ",", "seed", "=", "seed", ",", "high_dim", "=", "high_dim", ",", "\n", "dim_reduction", "=", "dim_reduction", ",", "sparse", "=", "sparse", ",", "\n", "normalize_Y", "=", "self", ".", "normalize_Y", ",", "update_freq", "=", "update_freq", ",", "nchannel", "=", "nchannel", ")", "\n", "\n", "", "", "elif", "model_type", "==", "'ADDGPLD'", ":", "\n", "            ", "logging", ".", "info", "(", "f'nsubspaces={nsubspaces}'", ")", "\n", "if", "self", ".", "noise_var", ">", "1e-6", ":", "\n", "                ", "self", ".", "model", "=", "Additive_GPModel_Learn_Decomp", "(", "noise_var", "=", "self", ".", "noise_var", ",", "ARD", "=", "ARD", ",", "\n", "sparse", "=", "sparse", ",", "\n", "seed", "=", "seed", ",", "normalize_Y", "=", "self", ".", "normalize_Y", ",", "\n", "n_subspaces", "=", "nsubspaces", ",", "update_freq", "=", "update_freq", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "Additive_GPModel_Learn_Decomp", "(", "exact_feval", "=", "True", ",", "ARD", "=", "ARD", ",", "sparse", "=", "sparse", ",", "\n", "seed", "=", "seed", ",", "normalize_Y", "=", "self", ".", "normalize_Y", ",", "\n", "n_subspaces", "=", "nsubspaces", ",", "update_freq", "=", "update_freq", ")", "\n", "\n", "# Choose the acquisition function for BO", "\n", "", "", "if", "self", ".", "acq_type", "==", "'LCB'", ":", "\n", "            ", "assert", "(", "beta", "!=", "None", ")", "\n", "if", "cost_metric", "==", "10", ":", "\n", "                ", "cost_metric", "=", "np", ".", "inf", "\n", "", "if", "model_type", ".", "startswith", "(", "'ADDGP'", ")", ":", "\n", "                ", "self", ".", "acqu_func", "=", "LCB_budget_additive", "(", "self", ".", "model", ",", "dis_metric", "=", "cost_metric", ",", "beta", "=", "beta", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "acqu_func", "=", "LCB_budget", "(", "self", ".", "model", ",", "dis_metric", "=", "cost_metric", ",", "beta", "=", "beta", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Not implemented'", ")", "\n", "", "self", ".", "query_strategy", "=", "Acq_Optimizer", "(", "model", "=", "self", ".", "model", ",", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "\n", "batch_size", "=", "batch_size", ",", "batch_method", "=", "batch_option", ",", "model_name", "=", "model_type", ",", "\n", "nsubspace", "=", "nsubspaces", ",", "gridSize", "=", "gridSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run": [[153, 266], ["numpy.random.seed", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.exp", "bayesopt.Bayes_opt.model._update_model", "numpy.atleast_2d", "numpy.atleast_2d", "range", "int", "utilities.upsampler.upsample_projection", "time.time", "bayesopt.Bayes_opt.query_strategy.get_next", "numpy.max", "bayesopt.Bayes_opt.func", "bayesopt.Bayes_opt.mlflow_logging.log_cost_ba", "bayesopt.Bayes_opt.mlflow_logging.log_y", "numpy.vstack", "numpy.vstack", "numpy.min", "numpy.vstack", "numpy.vstack", "numpy.concatenate", "numpy.concatenate", "logging.info", "time.time", "logging.info", "bayesopt.Bayes_opt.mlflow_logging.log_cost_ba", "bayesopt.Bayes_opt.mlflow_logging.log_y", "time.time", "bayesopt.Bayes_opt.opt_dr_list.append", "bayesopt.Bayes_opt.opt_dr_list.append", "numpy.min", "min", "bayesopt.Bayes_opt.model._update_model", "time.time", "bayesopt.Bayes_opt.mlflow_logging.log_cost_ba", "bayesopt.Bayes_opt.mlflow_logging.log_battack", "bayesopt.Bayes_opt.mlflow_logging.log_y", "int", "int", "utilities.upsampler.upsample_projection", "numpy.atleast_2d", "numpy.atleast_2d", "numpy.atleast_2d", "numpy.atleast_2d", "numpy.atleast_2d", "logging.info", "min", "numpy.min", "bayesopt.Bayes_opt.X.astype", "bayesopt.Bayes_opt.Y.astype", "open", "pickle.dump", "int", "numpy.argmin"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._update_model", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acq_optimizer.Acq_Optimizer.get_next", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost_ba", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost_ba", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._update_model", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_cost_ba", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_y", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["", "def", "run", "(", "self", ",", "total_iterations", ")", ":", "\n", "        ", "\"\"\"\n        :param total_iterations:\n        # X_query, Y_query - query points selected by BO;\n            # X_opt, Yopt      - guesses of the global optimum/optimiser (= optimum point of GP posterior mean)\n        :return X_query: inputs queried by BO;\n        :return Y_query: output values at queried locations\n        :return X_opt: the guess of the global optimum location\n        :return Yopt: the guess of the global optimum value\n        :return time_record: BO time array for all iterations\n        \"\"\"", "\n", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "X_query", "=", "np", ".", "copy", "(", "self", ".", "X", ")", "\n", "Y_query", "=", "np", ".", "copy", "(", "self", ".", "Y", ")", "\n", "X_opt", "=", "np", ".", "copy", "(", "np", ".", "atleast_2d", "(", "self", ".", "arg_opt", ")", ")", "\n", "Y_opt", "=", "np", ".", "copy", "(", "np", ".", "atleast_2d", "(", "self", ".", "minY", ")", ")", "\n", "time_record", "=", "np", ".", "zeros", "(", "[", "total_iterations", ",", "2", "]", ")", "\n", "self", ".", "e", "=", "np", ".", "exp", "(", "1", ")", "\n", "self", ".", "opt_dr_list", "=", "[", "]", "\n", "\n", "# Upsample the observed data to image dimension in the case of auto-learning of d^r", "\n", "if", "'LDR'", "in", "self", ".", "model_type", ":", "\n", "            ", "x_curr_dim", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "if", "int", "(", "x_curr_dim", "/", "self", ".", "nchannel", ")", "<", "self", ".", "high_dim", ":", "\n", "                ", "self", ".", "X", "=", "upsample_projection", "(", "self", ".", "dim_reduction", ",", "X_query", ",", "low_dim", "=", "int", "(", "x_curr_dim", "/", "self", ".", "nchannel", ")", ",", "\n", "high_dim", "=", "self", ".", "high_dim", ",", "nchannel", "=", "self", ".", "nchannel", ")", "\n", "\n", "# Fit GP model to the observed data", "\n", "", "", "self", ".", "model", ".", "_update_model", "(", "self", ".", "X", ",", "self", ".", "Y", ",", "itr", "=", "0", ")", "\n", "\n", "try", ":", "\n", "            ", "for", "k", "in", "range", "(", "total_iterations", ")", ":", "\n", "\n", "# Always start from 1 for acq fn beta fn", "\n", "                ", "self", ".", "acqu_func", ".", "n_iter", "=", "k", "+", "1", "\n", "\n", "# Optimise the acquisition function to get the next query point and evaluate at next query point", "\n", "start_time_opt", "=", "time", ".", "time", "(", ")", "\n", "x_next_batch", ",", "acqu_value_batch", "=", "self", ".", "query_strategy", ".", "get_next", "(", "self", ".", "X", ",", "self", ".", "Y", ")", "\n", "max_acqu_value", "=", "np", ".", "max", "(", "acqu_value_batch", ")", "\n", "t_opt_acq", "=", "time", ".", "time", "(", ")", "-", "start_time_opt", "\n", "time_record", "[", "k", ",", "0", "]", "=", "t_opt_acq", "\n", "\n", "# Upsample the observed data to image dimension in the case of auto-learning of d^r after each iteration", "\n", "if", "'LDR'", "in", "self", ".", "model_type", ":", "\n", "                    ", "self", ".", "opt_dr_list", ".", "append", "(", "self", ".", "model", ".", "opt_dr", ")", "\n", "x_curr_dim", "=", "x_next_batch", ".", "shape", "[", "1", "]", "\n", "if", "int", "(", "x_curr_dim", "/", "self", ".", "nchannel", ")", "<", "self", ".", "high_dim", ":", "\n", "                        ", "x_next_batch", "=", "upsample_projection", "(", "self", ".", "dim_reduction", ",", "x_next_batch", ",", "\n", "low_dim", "=", "int", "(", "x_curr_dim", "/", "self", ".", "nchannel", ")", ",", "high_dim", "=", "self", ".", "high_dim", ",", "\n", "nchannel", "=", "self", ".", "nchannel", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "opt_dr_list", ".", "append", "(", "np", ".", "atleast_2d", "(", "0", ")", ")", "\n", "\n", "# Evaluate the objective function at the next query point", "\n", "#y_next_batch = self.func(x_next_batch) + np.random.normal(0, np.sqrt(self.noise_var),", "\n", "#                                                          (x_next_batch.shape[0], 1))", "\n", "", "y_next_batch", "=", "self", ".", "func", "(", "x_next_batch", ")", "\n", "self", ".", "mlflow_logging", ".", "log_cost_ba", "(", ")", "\n", "self", ".", "mlflow_logging", ".", "log_y", "(", "np", ".", "min", "(", "self", ".", "func", ".", "history_y", "[", "-", "1", "]", ")", ")", "\n", "\n", "# This is with noise", "\n", "#logging.info(y_next_batch)", "\n", "\n", "# Augment the observed data", "\n", "self", ".", "X", "=", "np", ".", "vstack", "(", "(", "self", ".", "X", ",", "x_next_batch", ")", ")", "\n", "self", ".", "Y", "=", "np", ".", "vstack", "(", "(", "self", ".", "Y", ",", "y_next_batch", ")", ")", "\n", "self", ".", "minY", "=", "np", ".", "min", "(", "self", ".", "Y", ")", "\n", "\n", "#  Store the intermediate BO results", "\n", "X_query", "=", "np", ".", "vstack", "(", "(", "X_query", ",", "np", ".", "atleast_2d", "(", "x_next_batch", ")", ")", ")", "\n", "Y_query", "=", "np", ".", "vstack", "(", "(", "Y_query", ",", "np", ".", "atleast_2d", "(", "y_next_batch", ")", ")", ")", "\n", "X_opt", "=", "np", ".", "concatenate", "(", "(", "X_opt", ",", "np", ".", "atleast_2d", "(", "X_query", "[", "np", ".", "argmin", "(", "Y_query", ")", ",", ":", "]", ")", ")", ")", "\n", "Y_opt", "=", "np", ".", "concatenate", "(", "(", "Y_opt", ",", "np", ".", "atleast_2d", "(", "min", "(", "Y_query", ")", ")", ")", ")", "\n", "\n", "logging", ".", "info", "(", "f'{self.model_type}{self.acq_type}{self.batch_option} ||'", "\n", "f'seed:{self.seed},itr:{k}, y_next:{np.min(y_next_batch)}, y_opt:{Y_opt[-1, :]}'", ")", "\n", "\n", "# Terminate the BO loop if the attack succeeds", "\n", "if", "min", "(", "Y_query", ")", "<=", "0", ":", "\n", "                    ", "break", "\n", "\n", "# Update the surrogate model with new data", "\n", "", "start_time_update", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "                    ", "self", ".", "model", ".", "_update_model", "(", "self", ".", "X", ",", "self", ".", "Y", ",", "itr", "=", "k", ")", "\n", "", "except", ":", "\n", "# If the model update fails, terminate the BO loop", "\n", "                    ", "partial_results", "=", "{", "'X_query'", ":", "self", ".", "X", ".", "astype", "(", "np", ".", "float16", ")", ",", "\n", "'Y_query'", ":", "self", ".", "Y", ".", "astype", "(", "np", ".", "float16", ")", ",", "\n", "'model_kernel'", ":", "self", ".", "model", ".", "model", ".", "kern", "}", "\n", "failed_file_name", "=", "self", ".", "saving_path", "\n", "with", "open", "(", "failed_file_name", ",", "'wb'", ")", "as", "file", ":", "\n", "                        ", "pickle", ".", "dump", "(", "partial_results", ",", "file", ")", "\n", "", "logging", ".", "info", "(", "'This BO target failed'", ")", "\n", "assert", "False", "\n", "", "t_update_model", "=", "time", ".", "time", "(", ")", "-", "start_time_update", "\n", "time_record", "[", "k", ",", "1", "]", "=", "t_update_model", "\n", "logging", ".", "info", "(", "f'Time for optimising acquisition function={t_opt_acq}; '", "\n", "f'Time for updating the model={t_update_model}'", ")", "\n", "\n", "", "", "except", "EarlyTerminationException", "as", "e", ":", "\n", "\n", "            ", "self", ".", "mlflow_logging", ".", "log_cost_ba", "(", ")", "\n", "self", ".", "mlflow_logging", ".", "log_y", "(", "e", ".", "metrics", "[", "'y'", "]", ")", "\n", "\n", "while", "self", ".", "mlflow_logging", ".", "t_y", "<", "total_iterations", ":", "\n", "                ", "self", ".", "mlflow_logging", ".", "log_cost_ba", "(", ")", "\n", "self", ".", "mlflow_logging", ".", "log_battack", "(", "e", ".", "metrics", "[", "'attack_success'", "]", ",", "e", ".", "metrics", "[", "'predicted_lbl'", "]", ")", "\n", "self", ".", "mlflow_logging", ".", "log_y", "(", "e", ".", "metrics", "[", "'y'", "]", ")", "\n", "\n", "", "", "return", "X_query", ",", "Y_query", ",", "X_opt", ",", "Y_opt", ",", "time_record", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.__init__": [[20, 118], ["os.path.expanduser", "os.path.join", "logging.info", "numpy.argmax", "numpy.array", "tf_models.Utils.generate_attack_data_set", "tf_models.setup_mnist.MNIST", "tf_models.setup_mnist.MNISTModel", "range", "tf_models.Utils.generate_attack_data_set", "tf_models.Utils.generate_attack_data_set", "tf_models.setup_cifar.CIFAR", "tf_models.setup_cifar.CIFARModel", "int", "ImageNetDataNP", "InceptionModel", "list", "range"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.Utils.generate_attack_data_set", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.Utils.generate_attack_data_set", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.Utils.generate_attack_data_set", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["    ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "num_img", "=", "1", ",", "img_offset", "=", "0", ",", "epsilon", "=", "0.05", ",", "rescale", "=", "True", ",", "\n", "dim_reduction", "=", "None", ",", "low_dim", "=", "None", ",", "high_dim", "=", "784", ",", "obj_metric", "=", "2", ",", "results_folder", "=", "None", ",", "directory", "=", "'~/ba_models/'", ",", "rs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        CNN Classifier on MNIST, CIFAR10 and ImageNet\n\n        :param dataset_name: image dataset name\n        :param num_img: number of images to be attacked (default=1)\n        :param img_offset: the image id e.g. img_offset=4 means 4th image in the correctly classified test set\n        :param epsilon: maximum perturbation\n        :param rescale: rescale the adversarial image to the range of the original image\n        :param dim_reduction: dimension reduction method used in upsampling\n        :param low_dim: reduced dimension (drxdr)\n        :param high_dim: image dimension (e.g. 32x32 for CIFAR10) or high-dimensional search space for imagenet (96x96)\n        :param obj_metric: Metric used to compute objective function (default = 2)\n        :param results_folder: results saving folder directory\n        :param directory: BayesOpt Attack code directory\n        \"\"\"", "\n", "\n", "'''\n        print(dataset_name)\n        print(num_img)\n        print(img_offset)\n        print(epsilon)\n        print(rescale)\n        print(dim_reduction)\n        print(low_dim)\n        print(high_dim)\n        print(obj_metric)\n        input()\n        '''", "\n", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "dim_reduction", "=", "dim_reduction", "\n", "self", ".", "num_img", "=", "num_img", "\n", "self", ".", "low_dim", "=", "low_dim", "\n", "self", ".", "high_dim", "=", "high_dim", "\n", "self", ".", "objective_metric", "=", "obj_metric", "\n", "self", ".", "results_folder", "=", "results_folder", "\n", "self", ".", "rescale", "=", "rescale", "\n", "folder_path", "=", "os", ".", "path", ".", "expanduser", "(", "directory", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "'.'", ",", "'hdbo/boattack/objective_func/tf_models/'", ")", "\n", "\n", "# Get the image data and the target model", "\n", "if", "'mnist'", "in", "dataset_name", ":", "\n", "            ", "self", ".", "d1", "=", "28", "\n", "self", ".", "nchannel", "=", "1", "\n", "self", ".", "dataset_name", "=", "'mnist'", "\n", "self", ".", "total_classes", "=", "10", "\n", "data", ",", "model", "=", "MNIST", "(", "folder_path", ")", ",", "MNISTModel", "(", "f'{model_path}models/mnist'", ",", "use_softmax", "=", "True", ")", "\n", "\n", "", "elif", "'cifar10'", "in", "dataset_name", ":", "\n", "            ", "self", ".", "d1", "=", "32", "\n", "self", ".", "nchannel", "=", "3", "\n", "self", ".", "total_classes", "=", "10", "\n", "self", ".", "dataset_name", "=", "'cifar10'", "\n", "data", ",", "model", "=", "CIFAR", "(", "folder_path", ")", ",", "CIFARModel", "(", "f'{model_path}models/cifar'", ",", "use_softmax", "=", "True", ")", "\n", "\n", "", "elif", "'imagenet'", "in", "dataset_name", ":", "\n", "            ", "from", ".", "tf_models", ".", "setup_inception", "import", "InceptionModel", ",", "ImageNetDataNP", "\n", "self", ".", "d1", "=", "299", "\n", "self", ".", "nchannel", "=", "3", "\n", "self", ".", "total_classes", "=", "1001", "# num_labels in InceptionModel is 1001", "\n", "self", ".", "dataset_name", "=", "'imagenet'", "\n", "data", ",", "model", "=", "ImageNetDataNP", "(", "folder_path", ")", ",", "InceptionModel", "(", "f'{model_path}models/cifar'", ",", "use_softmax", "=", "True", ")", "\n", "\n", "", "random_target", "=", "False", "\n", "shift_index", "=", "False", "\n", "attack_type", "=", "'targeted'", "\n", "logging", ".", "info", "(", "f'Loading data and classification model: {self.dataset_name}'", ")", "\n", "\n", "# Get the correctly classified image data to be attacked", "\n", "if", "'imagenet'", "in", "dataset_name", ":", "\n", "# find all possible class", "\n", "            ", "all_class", "=", "np", ".", "array", "(", "range", "(", "int", "(", "self", ".", "total_classes", "-", "1", ")", ")", ")", "\n", "all_orig_img", ",", "all_target_labels", ",", "all_orig_labels", ",", "all_orig_img_id", "=", "generate_attack_data_set", "(", "\n", "data", ",", "num_img", ",", "img_offset", ",", "model", ",", "attack_type", "=", "attack_type", ",", "random_target_class", "=", "all_class", ",", "\n", "shift_index", "=", "True", ",", "rs", "=", "rs", ")", "\n", "", "elif", "random_target", ":", "\n", "# random target on all possible classes", "\n", "            ", "class_num", "=", "data", ".", "test_labels", ".", "shape", "[", "1", "]", "\n", "all_orig_img", ",", "all_target_labels", ",", "all_orig_labels", ",", "all_orig_img_id", "=", "generate_attack_data_set", "(", "\n", "data", ",", "num_img", ",", "img_offset", ",", "model", ",", "attack_type", "=", "attack_type", ",", "random_target_class", "=", "list", "(", "range", "(", "class_num", ")", ")", ",", "\n", "shift_index", "=", "shift_index", ",", "rs", "=", "rs", ")", "\n", "", "else", ":", "\n", "            ", "all_orig_img", ",", "all_target_labels", ",", "all_orig_labels", ",", "all_orig_img_id", "=", "generate_attack_data_set", "(", "\n", "data", ",", "num_img", ",", "img_offset", ",", "model", ",", "attack_type", "=", "attack_type", ",", "shift_index", "=", "shift_index", ",", "rs", "=", "rs", ")", "\n", "\n", "", "self", ".", "blackbox_model", "=", "model", ".", "model", "\n", "self", ".", "all_orig_img", "=", "all_orig_img", "\n", "self", ".", "all_target_labels", "=", "all_target_labels", "\n", "self", ".", "all_orig_img_id", "=", "all_orig_img_id", "\n", "self", ".", "all_orig_labels_int", "=", "np", ".", "argmax", "(", "all_orig_labels", ",", "1", ")", "\n", "\n", "# Check the original image labels", "\n", "if", "(", "dataset_name", "==", "'mnist'", "or", "dataset_name", "==", "'cifar10'", ")", ":", "\n", "            ", "if", "(", "self", ".", "all_orig_labels_int", "[", "0", "]", "!=", "self", ".", "all_orig_labels_int", "[", "-", "1", "]", ")", ":", "\n", "                ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.get_data_sample": [[119, 142], ["logging.info", "logging.info", "os.path.join", "numpy.argmax", "numpy.save", "numpy.save", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save"], ["", "", "", "def", "get_data_sample", "(", "self", ",", "i", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param i: the attack target label id\n        \"\"\"", "\n", "logging", ".", "info", "(", "(", "self", ".", "total_classes", "-", "2", ")", ")", "\n", "logging", ".", "info", "(", "i", ")", "\n", "if", "i", ">", "(", "self", ".", "total_classes", "-", "2", ")", ":", "\n", "            ", "assert", "False", "\n", "\n", "# Get the original image label and save original image", "\n", "", "self", ".", "X_origin", "=", "self", ".", "all_orig_img", "[", "i", ":", "i", "+", "1", "]", "\n", "self", ".", "orig_img_id", "=", "self", ".", "all_orig_img_id", "[", "i", ":", "i", "+", "1", "]", "[", "0", "]", "\n", "self", ".", "input_label", "=", "self", ".", "all_orig_labels_int", "[", "i", ":", "i", "+", "1", "]", "[", "0", "]", "\n", "X_orig_img_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_folder", ",", "\n", "f'X_{self.dataset_name}_origin_{self.input_label}_id{self.orig_img_id}'", ")", "\n", "if", "'imagenet'", "in", "self", ".", "dataset_name", ":", "\n", "            ", "np", ".", "save", "(", "X_orig_img_file", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "np", ".", "save", "(", "X_orig_img_file", ",", "self", ".", "X_origin", ")", "\n", "\n", "# Get the attack target label", "\n", "", "target_label_vector", "=", "self", ".", "all_target_labels", "[", "i", ":", "i", "+", "1", "]", "\n", "self", ".", "target_label", "=", "np", ".", "argmax", "(", "target_label_vector", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate": [[143, 209], ["delta_vector.reshape", "objective_functions_tf.CNN.blackbox_model.predict", "numpy.atleast_2d", "numpy.log", "numpy.max", "numpy.argmax", "objective_functions_tf.CNN.X_origin.copy", "X_adv.clip.clip.clip", "all_queries_success.sum", "logging.info", "os.path.join", "logging.info", "len", "objective_functions_tf.CNN.mlflow_logging.log_battack", "objective_functions_tf.CNN.mlflow_logging.log_battack", "exceptions.EarlyTerminationException", "numpy.log", "numpy.save", "numpy.save", "int", "int", "numpy.array", "int", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.Model.info", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.mlflow_logging.MlflowLogger.log_battack", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.multi.ExperimentPart.save"], ["", "def", "evaluate", "(", "self", ",", "delta_vector", ")", ":", "\n", "        ", "\"\"\"\n        :param delta_vector: adversarial perturbation in the range of [-epsilon, epsilon]\n        :return score:  = log_p_max - log_p_target [N] if obj_metric=1;\n                        = log_sum_{j \\not target} p_j - log_p_target [N] if obj_metric=2 (default)\n                        both to be minimised\n        \"\"\"", "\n", "\n", "# Add adversarial delta to the original image", "\n", "delta", "=", "delta_vector", ".", "reshape", "(", "-", "1", ",", "self", ".", "d1", ",", "self", ".", "d1", ",", "self", ".", "nchannel", ")", "\n", "X_adv", "=", "self", ".", "X_origin", ".", "copy", "(", ")", "+", "delta", "\n", "\n", "# Rescale to the value range of the original image", "\n", "if", "self", ".", "rescale", ":", "\n", "            ", "X_adv", "=", "X_adv", "/", "(", "1", "+", "2", "*", "self", ".", "epsilon", ")", "\n", "", "else", ":", "\n", "            ", "X_adv", "=", "X_adv", ".", "clip", "(", "-", "0.5", ",", "0.5", ")", "\n", "\n", "# Query the black-box gets the log(softmax output) over all classes: (1,10)", "\n", "# input to the blackbox_model has the shape (N, size, size, nchannel) e.g. (1,32,32,3)", "\n", "", "prob_all_labels", "=", "self", ".", "blackbox_model", ".", "predict", "(", "X_adv", ")", "\n", "prob_all_labels", "=", "np", ".", "atleast_2d", "(", "prob_all_labels", ")", "\n", "log_prob_all_labels", "=", "np", ".", "log", "(", "prob_all_labels", "+", "1e-30", ")", "\n", "log_p_target", "=", "log_prob_all_labels", "[", ":", ",", "self", ".", "target_label", "]", "\n", "log_p_predicted_label", "=", "np", ".", "max", "(", "log_prob_all_labels", ",", "1", ")", "\n", "predicted_labels", "=", "np", ".", "argmax", "(", "log_prob_all_labels", ",", "1", ")", "\n", "\n", "# Select the objective function for BO", "\n", "if", "self", ".", "objective_metric", "==", "1", ":", "\n", "            ", "score", "=", "(", "log_p_predicted_label", "[", ":", ",", "None", "]", "-", "log_p_target", ")", "\n", "", "elif", "self", ".", "objective_metric", "==", "2", ":", "\n", "            ", "p_target_labels", "=", "prob_all_labels", "[", ":", ",", "self", ".", "target_label", "]", "\n", "sum_p_other_labels", "=", "np", ".", "sum", "(", "prob_all_labels", ",", "1", ")", "[", ":", ",", "None", "]", "-", "p_target_labels", "\n", "log_sum_p_other_labels", "=", "np", ".", "log", "(", "sum_p_other_labels", "+", "1e-30", ")", "\n", "score", "=", "(", "log_sum_p_other_labels", "-", "log_p_target", ")", "\n", "\n", "# Check whether the attack is successful", "\n", "", "all_queries_success", "=", "predicted_labels", "==", "self", ".", "target_label", "\n", "if", "all_queries_success", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "success", "=", "True", "\n", "score", "=", "-", "1", "\n", "X_success_adv", "=", "X_adv", "[", "predicted_labels", "==", "self", ".", "target_label", "]", "\n", "# Save the successful adversarial example", "\n", "logging", ".", "info", "(", "f'attack succeed! || origin={self.input_label}| target={self.target_label[0]}'", ")", "\n", "X_success_saving_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_folder", ",", "\n", "f'X_{self.dataset_name}_adv_i{self.input_label}_t{self.target_label[0]}_'", "\n", "f'eps{self.epsilon}_id{self.orig_img_id}'", ")", "\n", "if", "'imagenet'", "in", "self", ".", "dataset_name", ":", "\n", "                ", "np", ".", "save", "(", "X_success_saving_path", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "np", ".", "save", "(", "X_success_saving_path", ",", "X_success_adv", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "success", "=", "False", "\n", "logging", ".", "info", "(", "f'attack succeed={False}|| origin={self.input_label}| target={self.target_label[0]}|'", "\n", "f'min score at target={score}| predicted={predicted_labels}'", ")", "\n", "\n", "# Prevent the case when initalizing", "\n", "", "if", "len", "(", "predicted_labels", ")", "==", "1", ":", "\n", "            ", "self", ".", "mlflow_logging", ".", "log_battack", "(", "int", "(", "self", ".", "success", ")", ",", "predicted_labels", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlflow_logging", ".", "log_battack", "(", "int", "(", "self", ".", "success", ")", ",", "predicted_labels", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "success", ":", "\n", "            ", "raise", "EarlyTerminationException", "(", "\"BO Attack succeeded\"", ",", "{", "'attack_success'", ":", "int", "(", "self", ".", "success", ")", ",", "'predicted_lbl'", ":", "predicted_labels", "[", "0", "]", ",", "'y'", ":", "score", "}", ")", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_evaluate": [[210, 221], ["objective_functions_tf.CNN.evaluate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate"], ["", "def", "np_evaluate", "(", "self", ",", "delta_vector_np", ")", ":", "\n", "        ", "\"\"\"\n        :param delta_vector_np: adversarial perturbation in the range of [-1, 1]\n        :return score: objective function value\n        \"\"\"", "\n", "\n", "# Scale the adversarial delta to [-epsilon, + epsilon]", "\n", "delta_vector_np", "=", "delta_vector_np", "*", "self", ".", "epsilon", "\n", "score", "=", "self", ".", "evaluate", "(", "delta_vector_np", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_evaluate_bili": [[222, 238], ["int", "utilities.upsampler.upsample_projection", "objective_functions_tf.CNN.evaluate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate"], ["", "def", "np_evaluate_bili", "(", "self", ",", "delta_vector_np", ")", ":", "\n", "        ", "\"\"\"\n        :param delta_vector_np: adversarial perturbation in the range of [-1, 1] with dimension (96x96x3)\n        :return score: objective function value\n        \"\"\"", "\n", "\n", "# Scale the adversarial delta to [-epsilon, + epsilon]", "\n", "delta_vector_np", "=", "delta_vector_np", "*", "self", ".", "epsilon", "\n", "\n", "origin_dim", "=", "int", "(", "299", "*", "299", ")", "\n", "# Upsample to image dimension (299x299x3)", "\n", "delta_vector_origin_np", "=", "upsample_projection", "(", "'BILI'", ",", "delta_vector_np", ",", "self", ".", "high_dim", ",", "origin_dim", ",", "\n", "nchannel", "=", "self", ".", "nchannel", ")", "\n", "score", "=", "self", ".", "evaluate", "(", "delta_vector_origin_np", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_upsample_evaluate": [[239, 253], ["utilities.upsampler.upsample_projection", "objective_functions_tf.CNN.evaluate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate"], ["", "def", "np_upsample_evaluate", "(", "self", ",", "delta_vector_ld_np", ")", ":", "\n", "        ", "\"\"\"\n        :param delta_vector_np: adversarial perturbation in the range of [-1, 1] with dimension (low_dim x nchannel)\n        :return score: objective function value\n        \"\"\"", "\n", "\n", "# Scale the adversarial delta to [-epsilon, + epsilon]", "\n", "delta_vector_np", "=", "delta_vector_ld_np", "*", "self", ".", "epsilon", "\n", "\n", "# Upsample to high_dimx3", "\n", "delta_vector_hg_np", "=", "upsample_projection", "(", "self", ".", "dim_reduction", ",", "delta_vector_np", ",", "self", ".", "low_dim", ",", "self", ".", "high_dim", ",", "\n", "nchannel", "=", "self", ".", "nchannel", ")", "\n", "score", "=", "self", ".", "evaluate", "(", "delta_vector_hg_np", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.np_upsample_evaluate_bili": [[254, 271], ["utilities.upsampler.upsample_projection", "int", "utilities.upsampler.upsample_projection", "objective_functions_tf.CNN.evaluate"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.objective_func.objective_functions_tf.CNN.evaluate"], ["", "def", "np_upsample_evaluate_bili", "(", "self", ",", "delta_vector_ld_np", ")", ":", "\n", "        ", "\"\"\"\n        :param delta_vector_np: adversarial perturbation in the range of [-1, 1] with dimension (low_dim x nchannel)\n        :return score: objective function value\n        \"\"\"", "\n", "\n", "# Scale the adversarial delta to [-epsilon, + epsilon]", "\n", "delta_vector_np", "=", "delta_vector_ld_np", "*", "self", ".", "epsilon", "\n", "# Upsample to high_dim (96x96x3)", "\n", "delta_vector_hg_np", "=", "upsample_projection", "(", "self", ".", "dim_reduction", ",", "delta_vector_np", ",", "self", ".", "low_dim", ",", "self", ".", "high_dim", ",", "\n", "nchannel", "=", "self", ".", "nchannel", ")", "\n", "# Upsample to image dimension (299x299x3)", "\n", "origin_dim", "=", "int", "(", "299", "*", "299", ")", "\n", "delta_vector_origin_np", "=", "upsample_projection", "(", "'BILI'", ",", "delta_vector_hg_np", ",", "self", ".", "high_dim", ",", "origin_dim", ",", "\n", "nchannel", "=", "self", ".", "nchannel", ")", "\n", "score", "=", "self", ".", "evaluate", "(", "delta_vector_origin_np", ")", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.MNIST.__init__": [[36, 61], ["os.path.expanduser", "os.path.join", "setup_mnist.extract_data", "setup_mnist.extract_labels", "setup_mnist.extract_data", "setup_mnist.extract_labels", "os.path.exists", "os.mkdir", "urllib.request.urlretrieve"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.extract_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.extract_labels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.extract_data", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.extract_labels", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists"], ["    ", "def", "__init__", "(", "self", ",", "folder_path", "=", "'~/ba_models/'", ")", ":", "\n", "\n", "        ", "folder_path", "=", "os", ".", "path", ".", "expanduser", "(", "folder_path", ")", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "\"mnist_data\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "data_path", ")", "\n", "files", "=", "[", "\"train-images-idx3-ubyte.gz\"", ",", "\n", "\"t10k-images-idx3-ubyte.gz\"", ",", "\n", "\"train-labels-idx1-ubyte.gz\"", ",", "\n", "\"t10k-labels-idx1-ubyte.gz\"", "]", "\n", "for", "name", "in", "files", ":", "\n", "                ", "urllib", ".", "request", ".", "urlretrieve", "(", "'http://yann.lecun.com/exdb/mnist/'", "+", "name", ",", "f\"{data_path}/\"", "+", "name", ")", "\n", "\n", "", "", "train_data", "=", "extract_data", "(", "f\"{data_path}/train-images-idx3-ubyte.gz\"", ",", "60000", ")", "\n", "train_labels", "=", "extract_labels", "(", "f\"{data_path}/train-labels-idx1-ubyte.gz\"", ",", "60000", ")", "\n", "self", ".", "test_data", "=", "extract_data", "(", "f\"{data_path}/t10k-images-idx3-ubyte.gz\"", ",", "10000", ")", "\n", "self", ".", "test_labels", "=", "extract_labels", "(", "f\"{data_path}/t10k-labels-idx1-ubyte.gz\"", ",", "10000", ")", "\n", "\n", "VALIDATION_SIZE", "=", "5000", "\n", "\n", "self", ".", "validation_data", "=", "train_data", "[", ":", "VALIDATION_SIZE", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "validation_labels", "=", "train_labels", "[", ":", "VALIDATION_SIZE", "]", "\n", "self", ".", "train_data", "=", "train_data", "[", "VALIDATION_SIZE", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "train_labels", "=", "train_labels", "[", "VALIDATION_SIZE", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.MNISTModel.__init__": [[64, 97], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.load_weights", "tensorflow.keras.layers.Activation"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add"], ["    ", "def", "__init__", "(", "self", ",", "restore", "=", "None", ",", "session", "=", "None", ",", "use_softmax", "=", "False", ")", ":", "\n", "        ", "self", ".", "num_channels", "=", "1", "\n", "self", ".", "image_size", "=", "28", "\n", "self", ".", "num_labels", "=", "10", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "\n", "input_shape", "=", "(", "28", ",", "28", ",", "1", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "200", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "200", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "10", ")", ")", "\n", "# output log probability, used for black-box attack", "\n", "if", "use_softmax", ":", "\n", "            ", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "", "if", "restore", ":", "\n", "            ", "model", ".", "load_weights", "(", "restore", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.MNISTModel.predict": [[98, 100], ["setup_mnist.MNISTModel.model"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.extract_data": [[19, 27], ["gzip.open", "bytestream.read", "bytestream.read", "numpy.frombuffer().astype", "data.reshape.reshape", "numpy.frombuffer"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["def", "extract_data", "(", "filename", ",", "num_images", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "filename", ")", "as", "bytestream", ":", "\n", "        ", "bytestream", ".", "read", "(", "16", ")", "\n", "buf", "=", "bytestream", ".", "read", "(", "num_images", "*", "28", "*", "28", ")", "\n", "data", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data", "=", "(", "data", "/", "255", ")", "-", "0.5", "\n", "data", "=", "data", ".", "reshape", "(", "num_images", ",", "28", ",", "28", ",", "1", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_mnist.extract_labels": [[28, 34], ["gzip.open", "bytestream.read", "bytestream.read", "numpy.frombuffer", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["", "", "def", "extract_labels", "(", "filename", ",", "num_images", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "filename", ")", "as", "bytestream", ":", "\n", "        ", "bytestream", ".", "read", "(", "8", ")", "\n", "buf", "=", "bytestream", ".", "read", "(", "1", "*", "num_images", ")", "\n", "labels", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "return", "(", "np", ".", "arange", "(", "10", ")", "==", "labels", "[", ":", ",", "None", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.Utils.generate_attack_data_set": [[28, 102], ["numpy.argmax", "numpy.argmax", "numpy.where", "rs.shuffle", "print", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "model.model.predict", "len", "len", "zip", "list", "rs.choice.remove", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "rs.choice", "range", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["def", "generate_attack_data_set", "(", "data", ",", "num_sample", ",", "img_offset", ",", "model", ",", "attack_type", "=", "\"targeted\"", ",", "random_target_class", "=", "None", ",", "shift_index", "=", "False", ",", "rs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate the data for conducting attack. Only select the data being classified correctly.\n    \"\"\"", "\n", "orig_img", "=", "[", "]", "\n", "orig_labels", "=", "[", "]", "\n", "target_labels", "=", "[", "]", "\n", "orig_img_id", "=", "[", "]", "\n", "\n", "pred_labels", "=", "np", ".", "argmax", "(", "model", ".", "model", ".", "predict", "(", "data", ".", "test_data", ")", ",", "axis", "=", "1", ")", "\n", "true_labels", "=", "np", ".", "argmax", "(", "data", ".", "test_labels", ",", "axis", "=", "1", ")", "\n", "correct_data_indices", "=", "np", ".", "where", "(", "[", "1", "if", "x", "==", "y", "else", "0", "for", "(", "x", ",", "y", ")", "in", "zip", "(", "pred_labels", ",", "true_labels", ")", "]", ")", "\n", "rs", ".", "shuffle", "(", "correct_data_indices", "[", "0", "]", ")", "\n", "\n", "print", "(", "\"Total testing data:{}, correct classified data:{}\"", ".", "format", "(", "len", "(", "data", ".", "test_labels", ")", ",", "len", "(", "correct_data_indices", "[", "0", "]", ")", ")", ")", "\n", "\n", "data", ".", "test_data", "=", "data", ".", "test_data", "[", "correct_data_indices", "]", "\n", "data", ".", "test_labels", "=", "data", ".", "test_labels", "[", "correct_data_indices", "]", "\n", "true_labels", "=", "true_labels", "[", "correct_data_indices", "]", "\n", "\n", "'''\n    # === Code to ensure stratified sampling\n    total_classes = len(set(list(true_labels)))\n    sampling_dict = defaultdict(list)\n    for i, t_l in enumerate(true_labels):\n        sampling_dict[t_l].append(i)\n    # Permute\n    for i in sorted(sampling_dict.keys()):\n        sampling_dict[i] = rs.permutation(sampling_dict[i])\n    lbl_offset, lbl = divmod(img_offset, total_classes)\n    img_offset = sampling_dict[lbl][lbl_offset]\n    # === Code to ensure stratified sampling\n    '''", "\n", "\n", "#np.random.seed(img_offset) # for parallel running", "\n", "class_num", "=", "data", ".", "test_labels", ".", "shape", "[", "1", "]", "\n", "for", "sample_index", "in", "range", "(", "num_sample", ")", ":", "\n", "        ", "if", "attack_type", "==", "\"targeted\"", ":", "\n", "            ", "if", "random_target_class", "is", "not", "None", ":", "\n", "#np.random.seed(0)  # for parallel running", "\n", "# randomly select one class to attack, except the true labels", "\n", "# seq_imagenet = np.random.choice(random_target_class, 100)", "\n", "                ", "seq_imagenet", "=", "[", "1", ",", "4", ",", "6", ",", "8", ",", "9", ",", "13", ",", "15", ",", "16", ",", "19", ",", "20", ",", "22", ",", "24", ",", "25", ",", "27", ",", "28", ",", "30", ",", "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "44", ",", "49", ",", "\n", "51", ",", "56", ",", "59", ",", "60", ",", "61", ",", "62", ",", "63", ",", "67", ",", "68", ",", "70", ",", "71", ",", "74", ",", "75", ",", "76", ",", "77", ",", "78", ",", "79", ",", "82", ",", "84", ",", "85", ",", "87", ",", "88", ",", "\n", "91", ",", "94", ",", "96", ",", "97", ",", "99", "]", "\n", "\n", "seq", "=", "[", "seq_imagenet", "[", "img_offset", "+", "sample_index", "]", "]", "\n", "while", "seq", "==", "true_labels", "[", "img_offset", "+", "sample_index", "]", ":", "\n", "                    ", "seq", "=", "rs", ".", "choice", "(", "random_target_class", ",", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "seq", "=", "list", "(", "range", "(", "class_num", ")", ")", "\n", "seq", ".", "remove", "(", "true_labels", "[", "img_offset", "+", "sample_index", "]", ")", "\n", "\n", "", "for", "s", "in", "seq", ":", "\n", "                ", "if", "shift_index", "and", "s", "==", "0", ":", "\n", "                    ", "s", "+=", "1", "\n", "", "orig_img", ".", "append", "(", "data", ".", "test_data", "[", "img_offset", "+", "sample_index", "]", ")", "\n", "target_labels", ".", "append", "(", "np", ".", "eye", "(", "class_num", ")", "[", "s", "]", ")", "\n", "orig_labels", ".", "append", "(", "data", ".", "test_labels", "[", "img_offset", "+", "sample_index", "]", ")", "\n", "orig_img_id", ".", "append", "(", "img_offset", "+", "sample_index", ")", "\n", "\n", "", "", "elif", "attack_type", "==", "\"untargeted\"", ":", "\n", "            ", "orig_img", ".", "append", "(", "data", ".", "test_data", "[", "img_offset", "+", "sample_index", "]", ")", "\n", "target_labels", ".", "append", "(", "data", ".", "test_labels", "[", "img_offset", "+", "sample_index", "]", ")", "\n", "orig_labels", ".", "append", "(", "data", ".", "test_labels", "[", "img_offset", "+", "sample_index", "]", ")", "\n", "orig_img_id", ".", "append", "(", "img_offset", "+", "sample_index", ")", "\n", "\n", "", "", "orig_img", "=", "np", ".", "array", "(", "orig_img", ")", "\n", "target_labels", "=", "np", ".", "array", "(", "target_labels", ")", "\n", "orig_labels", "=", "np", ".", "array", "(", "orig_labels", ")", "\n", "orig_img_id", "=", "np", ".", "array", "(", "orig_img_id", ")", "\n", "\n", "return", "orig_img", ",", "target_labels", ",", "orig_labels", ",", "orig_img_id", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.Utils.model_prediction": [[103, 108], ["model.model.predict", "numpy.argmax", "numpy.array2string().replace", "numpy.array2string"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "def", "model_prediction", "(", "model", ",", "inputs", ")", ":", "\n", "    ", "prob", "=", "model", ".", "model", ".", "predict", "(", "inputs", ")", "\n", "predicted_class", "=", "np", ".", "argmax", "(", "prob", ")", "\n", "prob_str", "=", "np", ".", "array2string", "(", "prob", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "return", "prob", ",", "predicted_class", ",", "prob_str", "\n", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.__init__": [[82, 88], ["os.path.join", "setup_inception.NodeLookup.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load"], ["def", "__init__", "(", "self", ",", "model_path", "=", "'./'", ",", "\n", "label_lookup_path", "=", "None", ")", ":", "\n", "    ", "model_path_dir", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "FLAGS", ".", "model_dir", ")", "\n", "if", "not", "label_lookup_path", ":", "\n", "      ", "label_lookup_path", "=", "os", ".", "path", ".", "join", "(", "model_path_dir", ",", "'labels.txt'", ")", "\n", "", "self", ".", "node_lookup", "=", "self", ".", "load", "(", "label_lookup_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load": [[89, 113], ["tensorflow.gfile.GFile().readlines", "tensorflow.gfile.Exists", "tensorflow.logging.fatal", "tensorflow.gfile.GFile", "line.split", "int"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split"], ["", "def", "load", "(", "self", ",", "label_lookup_path", ")", ":", "\n", "    ", "\"\"\"Loads a human readable English name for each softmax node.\n\n    Args:\n      label_lookup_path: string UID to integer node ID.\n      uid_lookup_path: string UID to human-readable string.\n\n    Returns:\n      dict from integer node ID to human-readable string.\n    \"\"\"", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "label_lookup_path", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "fatal", "(", "'File does not exist %s'", ",", "label_lookup_path", ")", "\n", "\n", "# Loads mapping from string UID to integer node ID.", "\n", "", "node_id_to_name", "=", "{", "}", "\n", "proto_as_ascii", "=", "tf", ".", "gfile", ".", "GFile", "(", "label_lookup_path", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "proto_as_ascii", ":", "\n", "      ", "if", "line", ":", "\n", "        ", "words", "=", "line", ".", "split", "(", "':'", ")", "\n", "target_class", "=", "int", "(", "words", "[", "0", "]", ")", "\n", "name", "=", "words", "[", "1", "]", "\n", "node_id_to_name", "[", "target_class", "]", "=", "name", "\n", "\n", "", "", "return", "node_id_to_name", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.id_to_string": [[114, 118], ["None"], "methods", ["None"], ["", "def", "id_to_string", "(", "self", ",", "node_id", ")", ":", "\n", "    ", "if", "node_id", "not", "in", "self", ".", "node_lookup", ":", "\n", "      ", "return", "''", "\n", "", "return", "self", ".", "node_lookup", "[", "node_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.InceptionModelPrediction.__init__": [[185, 198], ["tensorflow.placeholder", "tensorflow.import_graph_def", "sess.graph.as_graph_def"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "sess", ",", "model_path", ",", "use_softmax", "=", "False", ")", ":", "\n", "    ", "self", ".", "model_path", "=", "model_path", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "if", "self", ".", "use_softmax", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Softmax:0'", "\n", "", "else", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Reshape:0'", "\n", "", "self", ".", "img", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "299", ",", "299", ",", "3", ")", ")", "\n", "self", ".", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'input:0'", ":", "self", ".", "img", "}", ",", "\n", "return_elements", "=", "[", "output_name", "]", ")", "\n", "", "def", "predict", "(", "self", ",", "dat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.InceptionModelPrediction.predict": [[198, 219], ["numpy.squeeze", "setup_inception.InceptionModelPrediction.sess.run", "numpy.squeeze", "setup_inception.NodeLookup", "numpy.squeeze.argsort", "len", "numpy.squeeze.reshape", "print", "setup_inception.NodeLookup.id_to_string", "print"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.id_to_string"], ["", "def", "predict", "(", "self", ",", "dat", ")", ":", "\n", "    ", "dat", "=", "np", ".", "squeeze", "(", "dat", ")", "\n", "# scaled = (0.5 + dat) * 255", "\n", "if", "len", "(", "dat", ".", "shape", ")", "<", "4", ":", "\n", "      ", "scaled", "=", "dat", ".", "reshape", "(", "(", "1", ",", ")", "+", "dat", ".", "shape", ")", "\n", "", "else", ":", "\n", "      ", "scaled", "=", "dat", "\n", "# print(scaled.shape)", "\n", "", "predictions", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "softmax_tensor", ",", "\n", "{", "self", ".", "img", ":", "scaled", "}", ")", "\n", "predictions", "=", "np", ".", "squeeze", "(", "predictions", ")", "\n", "return", "predictions", "\n", "# Creates node ID --> English string lookup.", "\n", "node_lookup", "=", "NodeLookup", "(", "model_path", "=", "self", ".", "model_path", ")", "\n", "top_k", "=", "predictions", ".", "argsort", "(", ")", "#[-FLAGS.num_top_predictions:][::-1]", "\n", "for", "node_id", "in", "top_k", ":", "\n", "      ", "print", "(", "'id'", ",", "node_id", ")", "\n", "human_string", "=", "node_lookup", ".", "id_to_string", "(", "node_id", ")", "\n", "score", "=", "predictions", "[", "node_id", "]", "\n", "print", "(", "'%s (score = %.5f)'", "%", "(", "human_string", ",", "score", ")", ")", "\n", "", "return", "top_k", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.InceptionModel.__init__": [[226, 235], ["tensorflow.Session", "setup_inception.InceptionModelPrediction", "setup_inception.create_graph"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.create_graph"], ["def", "__init__", "(", "self", ",", "model_path", ",", "use_softmax", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "global", "CREATED_GRAPH", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "if", "not", "CREATED_GRAPH", ":", "\n", "        ", "create_graph", "(", "model_path", "=", "model_path", ")", "\n", "CREATED_GRAPH", "=", "True", "\n", "", "self", ".", "model", "=", "InceptionModelPrediction", "(", "sess", ",", "model_path", ",", "use_softmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.InceptionModel.predict": [[236, 257], ["img.shape.as_list", "tensorflow.import_graph_def", "tensorflow.import_graph_def", "int", "setup_inception.InceptionModel.sess.graph.as_graph_def", "setup_inception.InceptionModel.sess.graph.as_graph_def"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "img", ")", ":", "\n", "    ", "if", "self", ".", "use_softmax", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Softmax:0'", "\n", "", "else", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Reshape:0'", "\n", "# scaled = (0.5+tf.reshape(img,((299,299,3))))*255", "\n", "# scaled = (0.5+img)*255", "\n", "", "if", "img", ".", "shape", ".", "as_list", "(", ")", "[", "0", "]", ":", "\n", "# check if a shape has been specified explicitly", "\n", "      ", "shape", "=", "(", "int", "(", "img", ".", "shape", "[", "0", "]", ")", ",", "1001", ")", "\n", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "self", ".", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'input:0'", ":", "img", ",", "'InceptionV3/Predictions/Shape:0'", ":", "shape", "}", ",", "\n", "return_elements", "=", "[", "output_name", "]", ")", "\n", "", "else", ":", "\n", "# placeholder shape", "\n", "      ", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "self", ".", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'input:0'", ":", "img", "}", ",", "\n", "return_elements", "=", "[", "output_name", "]", ")", "\n", "", "return", "softmax_tensor", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.ImageNet.__init__": [[324, 384], ["random.seed", "os.walk", "random.shuffle", "re.compile", "re.compile", "re.compile", "re.compile", "len", "print", "numpy.concatenate", "numpy.array", "numpy.zeros", "print", "setup_inception.readimg", "numpy.array", "numpy.array", "numpy.zeros", "print", "scipy.misc.imread", "numpy.expand_dims", "numpy.concatenate.append", "re.compile.search", "re.compile.search", "numpy.array.append", "fnmatch", "int", "file_list.append", "numpy.array", "re.compile.search.group", "numpy.arange", "os.path.join", "scipy.misc.imresize"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.benchmarks.benchmarks.BenchmarkEnvironment.seed", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.readimg"], ["  ", "def", "__init__", "(", "self", ",", "data_path", ",", "targetFile", "=", "None", ",", "targetClass", "=", "None", ")", ":", "\n", "# fix random number to generate training and testing set", "\n", "# fix last 5000 data as testing data", "\n", "    ", "if", "targetFile", "is", "None", ":", "\n", "      ", "random", ".", "seed", "(", "5566", ")", "\n", "from", "fnmatch", "import", "fnmatch", "\n", "\n", "file_list", "=", "[", "]", "\n", "\n", "for", "path", ",", "subdirs", ",", "files", "in", "os", ".", "walk", "(", "data_path", ")", ":", "\n", "        ", "for", "name", "in", "files", ":", "\n", "          ", "if", "fnmatch", "(", "name", ",", "\"*.jpg\"", ")", ":", "\n", "            ", "file_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "\n", "#from multiprocessing import Pool", "\n", "#pool = Pool(8)", "\n", "\n", "#print(file_list)", "\n", "", "", "", "random", ".", "shuffle", "(", "file_list", ")", "\n", "\n", "\n", "FILENAME_RE", "=", "re", ".", "compile", "(", "r\"(\\d+).(\\d+).jpg\"", ")", "\n", "#r = pool.map(readimg, file_list)", "\n", "#r = [x for x in r if x != None]", "\n", "#data_num = len(r)", "\n", "#print(\"Imagenet load # testing images:{}\".format(data_num))", "\n", "#temp_data, temp_labels = zip(*r)", "\n", "#temp_data = np.array(temp_data)", "\n", "#temp_labels = np.array(temp_labels)", "\n", "temp_data", "=", "[", "]", "\n", "temp_labels", "=", "[", "]", "\n", "for", "f", "in", "file_list", ":", "\n", "        ", "img", "=", "scipy", ".", "misc", ".", "imread", "(", "f", ")", "\n", "if", "img", ".", "shape", "[", "0", "]", "<", "299", "or", "img", ".", "shape", "[", "1", "]", "<", "299", ":", "\n", "          ", "continue", "\n", "", "img", "=", "np", ".", "array", "(", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "(", "299", ",", "299", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "-", ".5", "\n", "if", "img", ".", "shape", "!=", "(", "299", ",", "299", ",", "3", ")", ":", "\n", "          ", "continue", "\n", "", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "0", ")", "\n", "#print(\"{}: shape:{}\".format(f, img.shape))", "\n", "temp_data", ".", "append", "(", "img", ")", "\n", "filename_search", "=", "FILENAME_RE", ".", "search", "(", "f", ")", "\n", "temp_labels", ".", "append", "(", "int", "(", "filename_search", ".", "group", "(", "1", ")", ")", ")", "\n", "\n", "", "data_num", "=", "len", "(", "temp_data", ")", "\n", "print", "(", "\"Imagenet load # testing images:{}\"", ".", "format", "(", "data_num", ")", ")", "\n", "temp_data", "=", "np", ".", "concatenate", "(", "temp_data", ")", "\n", "temp_labels", "=", "np", ".", "array", "(", "temp_labels", ")", "\n", "\n", "self", ".", "test_data", "=", "temp_data", "\n", "self", ".", "test_labels", "=", "np", ".", "zeros", "(", "(", "data_num", ",", "1001", ")", ")", "\n", "self", ".", "test_labels", "[", "np", ".", "arange", "(", "data_num", ")", ",", "temp_labels", "]", "=", "1", "\n", "\n", "", "else", ":", "\n", "      ", "print", "(", "\"Target file:{}\"", ".", "format", "(", "targetFile", ")", ")", "\n", "temp_data", ",", "temp_label", "=", "readimg", "(", "targetFile", ",", "force", "=", "True", ")", "\n", "self", ".", "test_data", "=", "np", ".", "array", "(", "temp_data", ")", "\n", "temp_label", "=", "np", ".", "array", "(", "temp_label", ")", "\n", "self", ".", "test_labels", "=", "np", ".", "zeros", "(", "(", "1", ",", "1001", ")", ")", "\n", "self", ".", "test_labels", "[", "0", ",", "temp_label", "]", "=", "1", "\n", "print", "(", "\"Read target file {}\"", ".", "format", "(", "targetFile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.ImageNetDataGen.__init__": [[387, 417], ["tensorflow.keras.preprocessing.image.ImageDataGenerator", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "print", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "print", "tensorflow.keras.preprocessing.image.ImageDataGenerator"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "train_dir", ",", "validate_dir", ",", "batch_size", "=", "100", ",", "data_augmentation", "=", "True", ")", ":", "\n", "    ", "if", "data_augmentation", ":", "\n", "      ", "print", "(", "\"Enable data augmentation\"", ")", "\n", "train_datagen", "=", "ImageDataGenerator", "(", "\n", "#rescale=1./255,", "\n", "preprocessing_function", "=", "lambda", "x", ":", "x", "/", "255", "-", "0.5", ",", "\n", "shear_range", "=", "0.2", ",", "\n", "zoom_range", "=", "0.2", ",", "\n", "width_shift_range", "=", "0.3", ",", "\n", "height_shift_range", "=", "0.3", ",", "\n", "horizontal_flip", "=", "True", ",", "\n", "fill_mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "\"Disable data augmentation\"", ")", "\n", "train_datagen", "=", "ImageDataGenerator", "(", "preprocessing_function", "=", "lambda", "x", ":", "x", "/", "255", "-", "0.5", ")", "\n", "", "validation_datagen", "=", "ImageDataGenerator", "(", "preprocessing_function", "=", "lambda", "x", ":", "x", "/", "255", "-", "0.5", ")", "\n", "train_generator_flow", "=", "train_datagen", ".", "flow_from_directory", "(", "\n", "train_dir", ",", "\n", "target_size", "=", "(", "299", ",", "299", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "class_mode", "=", "\"input\"", ")", "\n", "\n", "# this is a similar generator, for validation data", "\n", "validation_generator_flow", "=", "validation_datagen", ".", "flow_from_directory", "(", "\n", "validate_dir", ",", "\n", "target_size", "=", "(", "299", ",", "299", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "class_mode", "=", "\"input\"", ")", "\n", "self", ".", "train_generator_flow", "=", "train_generator_flow", "\n", "self", ".", "validation_generator_flow", "=", "validation_generator_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.ImageNetDataNP.__init__": [[419, 430], ["os.path.expanduser", "numpy.load", "numpy.load", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.load"], ["  ", "def", "__init__", "(", "self", ",", "folder_path", "=", "'~/ba_models/'", ")", ":", "\n", "\n", "    ", "folder_path", "=", "os", ".", "path", ".", "expanduser", "(", "folder_path", ")", "\n", "\n", "#train_data = np.load(\"imagenet_train_data.npy\")", "\n", "#train_labels = np.load(\"imagenet_train_labels.npy\")", "\n", "test_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "\"imagenet_test_data.npy\"", ")", ")", "\n", "test_labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "\"imagenet_test_labels.npy\"", ")", ")", "\n", "\n", "self", ".", "test_data", "=", "test_data", "\n", "self", ".", "test_labels", "=", "test_labels", "\n", "# self.train_data = train_data", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.create_graph": [[120, 134], ["os.path.join", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "os.path.join", "f.read"], "function", ["None"], ["", "", "def", "create_graph", "(", "model_path", "=", "'./'", ")", ":", "\n", "  ", "\"\"\"Creates a graph from saved GraphDef file and returns a saver.\"\"\"", "\n", "# Creates graph from saved graph_def.pb.", "\n", "sys", ".", "argv", "=", "[", "sys", ".", "argv", "[", "0", "]", "]", "\n", "model_path_dir", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "FLAGS", ".", "model_dir", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "#  FLAGS.model_dir, 'classify_image_graph_def.pb'), 'rb') as f:", "\n", "model_path_dir", ",", "'frozen_inception_v3.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "#for line in repr(graph_def).split(\"\\n\"):", "\n", "#  if \"tensor_content\" not in line:", "\n", "#    print(line)", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.run_inference_on_image": [[136, 183], ["tensorflow.gfile.FastGFile().read", "setup_inception.create_graph", "tensorflow.gfile.Exists", "tensorflow.logging.fatal", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.import_graph_def", "scipy.misc.imresize", "sess.run", "numpy.squeeze", "setup_inception.NodeLookup", "np.squeeze.argsort", "tensorflow.gfile.FastGFile", "sess.graph.as_graph_def", "scipy.misc.imread", "print", "setup_inception.NodeLookup.id_to_string", "print", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.create_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.boattack.bayesopt.Bayes_opt.run", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.id_to_string"], ["", "", "def", "run_inference_on_image", "(", "image", ")", ":", "\n", "  ", "\"\"\"Runs inference on an image. (Not updated, not working for inception v3 20160828)\n\n  Args:\n    image: Image file name.\n\n  Returns:\n    Nothing\n  \"\"\"", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "image", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "fatal", "(", "'File does not exist %s'", ",", "image", ")", "\n", "", "image_data", "=", "tf", ".", "gfile", ".", "FastGFile", "(", "image", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "\n", "# Creates graph from saved GraphDef.", "\n", "create_graph", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "# Some useful tensors:", "\n", "# 'softmax:0': A tensor containing the normalized prediction across", "\n", "#   1000 labels.", "\n", "# 'pool_3:0': A tensor containing the next-to-last layer containing 2048", "\n", "#   float description of the image.", "\n", "# 'DecodeJpeg/contents:0': A tensor containing a string providing JPEG", "\n", "#   encoding of the image.", "\n", "# Runs the softmax tensor by feeding the image_data as input to the graph.", "\n", "#softmax_tensor = sess.graph.get_tensor_by_name('softmax:0')", "\n", "    ", "img", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "(", "299", ",", "299", ",", "3", ")", ")", "\n", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'DecodeJpeg:0'", ":", "tf", ".", "reshape", "(", "img", ",", "(", "(", "299", ",", "299", ",", "3", ")", ")", ")", "}", ",", "\n", "return_elements", "=", "[", "'softmax/logits:0'", "]", ")", "\n", "\n", "dat", "=", "scipy", ".", "misc", ".", "imresize", "(", "scipy", ".", "misc", ".", "imread", "(", "image", ")", ",", "(", "299", ",", "299", ")", ")", "\n", "predictions", "=", "sess", ".", "run", "(", "softmax_tensor", ",", "\n", "{", "img", ":", "dat", "}", ")", "\n", "\n", "predictions", "=", "np", ".", "squeeze", "(", "predictions", ")", "\n", "\n", "# Creates node ID --> English string lookup.", "\n", "node_lookup", "=", "NodeLookup", "(", ")", "\n", "\n", "top_k", "=", "predictions", ".", "argsort", "(", ")", "#[-FLAGS.num_top_predictions:][::-1]", "\n", "for", "node_id", "in", "top_k", ":", "\n", "      ", "print", "(", "'id'", ",", "node_id", ")", "\n", "human_string", "=", "node_lookup", ".", "id_to_string", "(", "node_id", ")", "\n", "score", "=", "predictions", "[", "node_id", "]", "\n", "print", "(", "'%s (score = %.5f)'", "%", "(", "human_string", ",", "score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.maybe_download_and_extract": [[259, 276], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "sys.stdout.write", "sys.stdout.flush", "tarfile.open", "float", "float"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["", "", "def", "maybe_download_and_extract", "(", ")", ":", "\n", "  ", "\"\"\"Download and extract model tar file.\"\"\"", "\n", "dest_directory", "=", "FLAGS", ".", "model_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest_directory", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dest_directory", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "dest_directory", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "    ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "dest_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.main": [[278, 300], ["setup_inception.maybe_download_and_extract", "setup_inception.create_graph", "os.path.join", "tensorflow.Session", "numpy.array", "setup_inception.InceptionModelPrediction", "setup_inception.InceptionModelPrediction.predict", "setup_inception.NodeLookup", "model.predict.argsort", "PIL.Image.fromarray().resize", "print", "setup_inception.NodeLookup.id_to_string", "print", "PIL.Image.fromarray", "imageio.imread"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.maybe_download_and_extract", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.create_graph", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.NodeLookup.id_to_string"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "maybe_download_and_extract", "(", ")", "\n", "image", "=", "(", "FLAGS", ".", "image_file", "if", "FLAGS", ".", "image_file", "else", "\n", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "model_dir", ",", "'cropped_panda.jpg'", ")", ")", "\n", "# run_inference_on_image(image)", "\n", "create_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "#dat = np.array(scipy.misc.imresize(scipy.misc.imread(image),(299,299)), dtype = np.float32)", "\n", "    ", "dat", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "imageio", ".", "imread", "(", "image", ")", ")", ".", "resize", "(", "(", "299", ",", "299", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dat", "/=", "255.0", "\n", "dat", "-=", "0.5", "\n", "# print(dat)", "\n", "model", "=", "InceptionModelPrediction", "(", "sess", ",", "True", ")", "\n", "predictions", "=", "model", ".", "predict", "(", "dat", ")", "\n", "# Creates node ID --> English string lookup.", "\n", "node_lookup", "=", "NodeLookup", "(", ")", "\n", "top_k", "=", "predictions", ".", "argsort", "(", ")", "#[-FLAGS.num_top_predictions:][::-1]", "\n", "for", "node_id", "in", "top_k", ":", "\n", "      ", "print", "(", "'id'", ",", "node_id", ")", "\n", "human_string", "=", "node_lookup", ".", "id_to_string", "(", "node_id", ")", "\n", "score", "=", "predictions", "[", "node_id", "]", "\n", "print", "(", "'%s (score = %.5f)'", "%", "(", "human_string", ",", "score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_inception.readimg": [[302, 322], ["re.compile", "re.compile", "scipy.misc.imread", "re.compile.search", "print", "int", "numpy.array", "FILENAME_RE.search.group", "scipy.misc.imresize"], "function", ["None"], ["", "", "", "def", "readimg", "(", "f", ",", "force", "=", "False", ")", ":", "\n", "#if f is None:", "\n", "#  f = \"../imagenetdata/imgs/\"+ff", "\n", "#else:", "\n", "#  f = f+ff", "\n", "  ", "FILENAME_RE", "=", "re", ".", "compile", "(", "r\"(\\d+).(\\d+).jpg\"", ")", "\n", "img", "=", "scipy", ".", "misc", ".", "imread", "(", "f", ")", "\n", "# skip small images (image should be at least 299x299)", "\n", "if", "img", ".", "shape", "[", "0", "]", "<", "299", "or", "img", ".", "shape", "[", "1", "]", "<", "299", ":", "\n", "    ", "return", "None", "\n", "", "img", "=", "np", ".", "array", "(", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "(", "299", ",", "299", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "-", ".5", "\n", "\n", "if", "not", "force", ":", "\n", "    ", "if", "img", ".", "shape", "!=", "(", "299", ",", "299", ",", "3", ")", ":", "\n", "      ", "return", "None", "\n", "", "", "else", ":", "\n", "    ", "print", "(", "\"Force read {}\"", ".", "format", "(", "f", ")", ")", "\n", "", "filename_search", "=", "FILENAME_RE", ".", "search", "(", "f", ")", "\n", "\n", "return", "[", "img", ",", "int", "(", "filename_search", ".", "group", "(", "1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFAR.__init__": [[61, 89], ["os.path.expanduser", "range", "numpy.array", "numpy.array", "setup_cifar.load_batch", "os.path.exists", "urllib.request.urlretrieve", "os.popen().read", "shutil.move", "setup_cifar.load_batch", "numpy.array.extend", "numpy.array.extend", "os.popen", "str"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.load_batch", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.experiment.Experiment.exists", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.load_batch"], ["    ", "def", "__init__", "(", "self", ",", "folder_path", "=", "'~/ba_models/'", ")", ":", "\n", "        ", "train_data", "=", "[", "]", "\n", "train_labels", "=", "[", "]", "\n", "\n", "folder_path", "=", "os", ".", "path", ".", "expanduser", "(", "folder_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f\"{folder_path}cifar-10-batches-bin\"", ")", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "\"https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz\"", ",", "\n", "\"cifar-data.tar.gz\"", ")", "\n", "os", ".", "popen", "(", "f\"tar -xzf cifar-data.tar.gz\"", ")", ".", "read", "(", ")", "\n", "shutil", ".", "move", "(", "'./cifar-10-batches-bin'", ",", "f'{folder_path}cifar-10-batches-bin'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "r", ",", "s", "=", "load_batch", "(", "f\"{folder_path}cifar-10-batches-bin/data_batch_\"", "+", "str", "(", "i", "+", "1", ")", "+", "\".bin\"", ")", "\n", "train_data", ".", "extend", "(", "r", ")", "\n", "train_labels", ".", "extend", "(", "s", ")", "\n", "\n", "", "train_data", "=", "np", ".", "array", "(", "train_data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "train_labels", "=", "np", ".", "array", "(", "train_labels", ")", "\n", "\n", "self", ".", "test_data", ",", "self", ".", "test_labels", "=", "load_batch", "(", "f\"{folder_path}cifar-10-batches-bin/test_batch.bin\"", ")", "\n", "\n", "VALIDATION_SIZE", "=", "5000", "\n", "\n", "self", ".", "validation_data", "=", "train_data", "[", ":", "VALIDATION_SIZE", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "validation_labels", "=", "train_labels", "[", ":", "VALIDATION_SIZE", "]", "\n", "self", ".", "train_data", "=", "train_data", "[", "VALIDATION_SIZE", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "train_labels", "=", "train_labels", "[", "VALIDATION_SIZE", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.__init__": [[91, 123], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.load_weights", "tensorflow.keras.layers.Activation"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataSet.add"], ["    ", "def", "__init__", "(", "self", ",", "restore", "=", "None", ",", "session", "=", "None", ",", "use_softmax", "=", "False", ")", ":", "\n", "        ", "self", ".", "num_channels", "=", "3", "\n", "self", ".", "image_size", "=", "32", "\n", "self", ".", "num_labels", "=", "10", "\n", "# restore = '/data/engs-bayesian-machine-learning/sedm4615/TF_BO_Black-box_Attack/objective_func/cifar'", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "\n", "input_shape", "=", "(", "32", ",", "32", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "10", ")", ")", "\n", "if", "use_softmax", ":", "\n", "            ", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "", "if", "restore", ":", "\n", "            ", "model", ".", "load_weights", "(", "restore", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict": [[124, 126], ["setup_cifar.CIFARModel.model"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.load_batch": [[44, 57], ["open().read", "range", "numpy.fromstring", "arr[].reshape().transpose", "labels.append", "images.append", "numpy.array", "numpy.array", "open", "numpy.identity", "arr[].reshape"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.experiment.data.DataBase.open"], ["", "def", "load_batch", "(", "fpath", ")", ":", "\n", "    ", "f", "=", "open", "(", "fpath", ",", "\"rb\"", ")", ".", "read", "(", ")", "\n", "size", "=", "32", "*", "32", "*", "3", "+", "1", "\n", "labels", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "arr", "=", "np", ".", "fromstring", "(", "f", "[", "i", "*", "size", ":", "(", "i", "+", "1", ")", "*", "size", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lab", "=", "np", ".", "identity", "(", "10", ")", "[", "arr", "[", "0", "]", "]", "\n", "img", "=", "arr", "[", "1", ":", "]", ".", "reshape", "(", "(", "3", ",", "32", ",", "32", ")", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "labels", ".", "append", "(", "lab", ")", "\n", "images", ".", "append", "(", "(", "img", "/", "255", ")", "-", ".5", ")", "\n", "", "return", "np", ".", "array", "(", "images", ")", ",", "np", ".", "array", "(", "labels", ")", "\n", "", "import", "shutil", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acq_optimizer.Acq_Optimizer.__init__": [[13, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "acqu_func", ",", "bounds", ",", "batch_method", "=", "'CL'", ",", "batch_size", "=", "1", ",", "model_name", "=", "'GP'", ",", "nsubspace", "=", "1", ",", "gridSize", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Optimise the acquisition functions to recommend the next (batch) locations for evaluation\n\n        :param model: BO surrogate model function\n        :param acqu_func: BO acquisition function\n        :param bounds: input space bounds\n        :param batch_method: the method for selecting a batch of new locations to be evaluated next\n        :param batch_size: the number of new query locations in the batch (=1 for sequential BO and > 1 for parallel BO)\n        :param model_name: the name of the BO surrogate model\n        :param nsubspace: number of subspaces needs to be specified for ADDGP-BO but equals 1 for other BO attacks\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "acqu_func", "=", "acqu_func", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "batch_method", "=", "batch_method", "\n", "self", ".", "bounds", "=", "bounds", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "nsubspace", "=", "nsubspace", "\n", "self", ".", "gridSize", "=", "gridSize", "\n", "assert", "(", "gridSize", "!=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acq_optimizer.Acq_Optimizer.get_next": [[35, 147], ["acq_optimizer.Acq_Optimizer.batch_method.upper", "numpy.copy", "numpy.copy", "numpy.min", "utilities.utilities.optimise_acqu_func", "numpy.vstack", "numpy.vstack", "acq_optimizer.Acq_Optimizer.model._update_model", "numpy.vstack", "numpy.vstack", "acq_optimizer.Acq_Optimizer.batch_method.upper", "numpy.copy", "numpy.copy", "utilities.utilities.optimise_acqu_func_mledr", "acq_optimizer.Acq_Optimizer.model_name.startswith", "utilities.utilities.optimise_acqu_func", "utilities.utilities.optimise_acqu_func", "acq_optimizer.Acq_Optimizer.model_name.startswith", "acq_optimizer.Acq_Optimizer.model.predict", "numpy.vstack", "numpy.vstack", "acq_optimizer.Acq_Optimizer.model._update_model", "numpy.vstack", "numpy.append", "utilities.utilities.optimise_acqu_func_additive", "utilities.utilities.optimise_acqu_func_for_NN", "utilities.utilities.optimise_acqu_func_mledr", "acq_optimizer.Acq_Optimizer.model_name.startswith", "utilities.utilities.optimise_acqu_func_additive", "utilities.utilities.optimise_acqu_func", "acq_optimizer.Acq_Optimizer.model_name.startswith", "utilities.utilities.optimise_acqu_func_additive", "utilities.utilities.optimise_acqu_func_for_NN", "utilities.utilities.optimise_acqu_func_mledr", "utilities.utilities.optimise_acqu_func_for_NN", "utilities.utilities.optimise_acqu_func_additive", "utilities.utilities.optimise_acqu_func_mledr", "utilities.utilities.optimise_acqu_func_for_NN"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._update_model", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.hdbo.datasets.ComponentFunction.copy", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_mledr", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel._update_model", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_additive", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_for_NN", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_mledr", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_additive", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_additive", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_for_NN", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_mledr", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_for_NN", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_additive", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_mledr", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_for_NN"], ["", "def", "get_next", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\"\n        :param X: observed input data\n        :param Y: observed output data\n        :return X_batch: batch of inputs recommended by BO to be evaluated next\n        :return batch_acq_value: acqusitioin function values of the batch of inputs recommended\n        \"\"\"", "\n", "\n", "# BO batch method: Constant Liar", "\n", "if", "self", ".", "batch_method", ".", "upper", "(", ")", "==", "'CL'", ":", "\n", "\n", "            ", "if", "self", ".", "model_name", "==", "'GP'", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "elif", "self", ".", "model_name", "==", "'GPLDR'", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func_mledr", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "\n", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "elif", "self", ".", "model_name", ".", "startswith", "(", "'ADDGP'", ")", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func_additive", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "\n", "X_ob", "=", "X", ",", "nsubspace", "=", "self", ".", "nsubspace", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "else", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func_for_NN", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "\n", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "\n", "", "new_batch_point", "=", "X_batch", "\n", "temporal_X", "=", "np", ".", "copy", "(", "X", ")", "\n", "temporal_Y", "=", "np", ".", "copy", "(", "Y", ")", "\n", "\n", "# Assume the functional value at last query location is equal to a constant", "\n", "L", "=", "np", ".", "min", "(", "temporal_Y", ")", "\n", "# Get the remaining points in the batch", "\n", "k", "=", "1", "\n", "\n", "while", "k", "<", "self", ".", "batch_size", ":", "\n", "# Augment the observed data with previous query location and the constant liar L", "\n", "                ", "temporal_X", "=", "np", ".", "vstack", "(", "(", "temporal_X", ",", "new_batch_point", ")", ")", "\n", "temporal_Y", "=", "np", ".", "vstack", "(", "(", "temporal_Y", ",", "L", ")", ")", "\n", "\n", "# Update the surrogate model (no update on hyperparameter) and acq_func with the augmented observation data", "\n", "self", ".", "model", ".", "_update_model", "(", "temporal_X", ",", "temporal_Y", ")", "\n", "\n", "if", "self", ".", "model_name", "==", "'GP'", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "\n", "", "elif", "self", ".", "model_name", "==", "'GPLDR'", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func_mledr", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "\n", "", "elif", "self", ".", "model_name", ".", "startswith", "(", "'ADDGP'", ")", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func_additive", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "\n", "nsubspace", "=", "self", ".", "nsubspace", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "else", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func_for_NN", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "\n", "", "X_batch", "=", "np", ".", "vstack", "(", "(", "X_batch", ",", "new_batch_point", ")", ")", "\n", "batch_acq_value", "=", "np", ".", "vstack", "(", "(", "batch_acq_value", ",", "next_batch_acq_value", ")", ")", "\n", "k", "+=", "1", "\n", "\n", "# BO batch method: Kriging Believer", "\n", "", "", "elif", "self", ".", "batch_method", ".", "upper", "(", ")", "==", "'KB'", ":", "\n", "\n", "            ", "if", "self", ".", "model_name", "==", "'GP'", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "elif", "self", ".", "model_name", ".", "startswith", "(", "'ADDGP'", ")", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func_additive", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "\n", "X_ob", "=", "X", ",", "nsubspace", "=", "self", ".", "nsubspace", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "elif", "self", ".", "model_name", "==", "'GPLDR'", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func_mledr", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "\n", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "else", ":", "\n", "                ", "X_batch", ",", "batch_acq_value", "=", "optimise_acqu_func_for_NN", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "bounds", "=", "self", ".", "bounds", ",", "\n", "X_ob", "=", "X", ",", "func_gradient", "=", "False", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "\n", "", "new_batch_point", "=", "X_batch", "\n", "temporal_X", "=", "np", ".", "copy", "(", "X", ")", "\n", "temporal_Y", "=", "np", ".", "copy", "(", "Y", ")", "\n", "\n", "# Get the remaining points in the batch if batch_size > 1", "\n", "k", "=", "1", "\n", "while", "self", ".", "batch_size", ">", "1", ":", "\n", "\n", "# Believe the predictor: the functional value at last query location is equal to its predicitve mean", "\n", "                ", "mu_new_batch_point", ",", "_", "=", "self", ".", "model", ".", "predict", "(", "new_batch_point", ")", "\n", "\n", "# Augment the observed data with previous query location and the preditive mean at that location", "\n", "temporal_X", "=", "np", ".", "vstack", "(", "(", "temporal_X", ",", "new_batch_point", ")", ")", "\n", "temporal_Y", "=", "np", ".", "vstack", "(", "(", "temporal_Y", ",", "mu_new_batch_point", ")", ")", "\n", "\n", "# Update the surrogate model (no update on hyperparameter) and acq_func with the augmented observation data", "\n", "self", ".", "model", ".", "_update_model", "(", "temporal_X", ",", "temporal_Y", ")", "\n", "\n", "if", "self", ".", "model_name", "==", "'GP'", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "elif", "self", ".", "model_name", ".", "startswith", "(", "'ADDGP'", ")", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func_additive", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "\n", "nsubspace", "=", "self", ".", "nsubspace", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "elif", "self", ".", "model_name", "==", "'GPLDR'", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func_mledr", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "", "else", ":", "\n", "                    ", "new_batch_point", ",", "next_batch_acq_value", "=", "optimise_acqu_func_for_NN", "(", "acqu_func", "=", "self", ".", "acqu_func", ",", "\n", "bounds", "=", "self", ".", "bounds", ",", "X_ob", "=", "X", ",", "gridSize", "=", "self", ".", "gridSize", ")", "\n", "\n", "", "X_batch", "=", "np", ".", "vstack", "(", "(", "X_batch", ",", "new_batch_point", ")", ")", "\n", "batch_acq_value", "=", "np", ".", "append", "(", "batch_acq_value", ",", "next_batch_acq_value", ")", "\n", "k", "+=", "1", "\n", "\n", "", "", "return", "X_batch", ",", "batch_acq_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.EI.__init__": [[18, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "jitter", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"\n        EI acquisition function\n\n        :param model: BO surrogate model function\n        :param jitter: EI jitter to encourage exploration\n        \"\"\"", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "jitter", "=", "jitter", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.EI._compute_acq": [[29, 40], ["acquisitions.EI.model.predict", "acquisitions.EI.model.get_fmin", "GPyOpt.util.general.get_quantiles"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict"], ["", "def", "_compute_acq", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :return f_acqu: acqusition function value\n        \"\"\"", "\n", "\n", "m", ",", "s", "=", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "fmin", "=", "self", ".", "model", ".", "get_fmin", "(", ")", "\n", "phi", ",", "Phi", ",", "u", "=", "get_quantiles", "(", "self", ".", "jitter", ",", "fmin", ",", "m", ",", "s", ")", "\n", "f_acqu", "=", "s", "*", "(", "u", "*", "Phi", "+", "phi", ")", "\n", "return", "f_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.EI._compute_acq_withGradients": [[41, 54], ["acquisitions.EI.model.get_fmin", "acquisitions.EI.model.predict_withGradients", "GPyOpt.util.general.get_quantiles"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel.predict_withGradients"], ["", "def", "_compute_acq_withGradients", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :return f_acqu: acqusition function value\n        :return df_acqu: derivative of acqusition function values w.r.t test location\n        \"\"\"", "\n", "\n", "fmin", "=", "self", ".", "model", ".", "get_fmin", "(", ")", "\n", "m", ",", "s", ",", "dmdx", ",", "dsdx", "=", "self", ".", "model", ".", "predict_withGradients", "(", "x", ")", "\n", "phi", ",", "Phi", ",", "u", "=", "get_quantiles", "(", "self", ".", "jitter", ",", "fmin", ",", "m", ",", "s", ")", "\n", "f_acqu", "=", "s", "*", "(", "u", "*", "Phi", "+", "phi", ")", "\n", "df_acqu", "=", "dsdx", "*", "phi", "-", "Phi", "*", "dmdx", "\n", "return", "f_acqu", ",", "df_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB.__init__": [[58, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "beta", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        LCB acquisition function\n\n        :param model: BO surrogate model function\n        :param beta: LCB exploration and exploitation trade-off parameter\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB._compute_acq": [[68, 78], ["acquisitions.LCB.model.predict", "acquisitions.LCB.beta"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta"], ["", "def", "_compute_acq", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :return f_acqu: acqusition function value\n        \"\"\"", "\n", "\n", "m", ",", "s", "=", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "f_acqu", "=", "-", "(", "m", "-", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "s", ")", "\n", "\n", "return", "f_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB._compute_acq_withGradients": [[79, 90], ["acquisitions.LCB.model.predict_withGradients", "acquisitions.LCB.beta", "acquisitions.LCB.beta"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel.predict_withGradients", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta"], ["", "def", "_compute_acq_withGradients", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :return f_acqu: acqusition function value\n        :return df_acqu: derivative of acqusition function values w.r.t test location\n        \"\"\"", "\n", "\n", "m", ",", "s", ",", "dmdx", ",", "dsdx", "=", "self", ".", "model", ".", "predict_withGradients", "(", "x", ")", "\n", "f_acqu", "=", "-", "m", "+", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "s", "\n", "df_acqu", "=", "-", "dmdx", "+", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "dsdx", "\n", "return", "f_acqu", ",", "df_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget.__init__": [[94, 105], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "beta", "=", "3", ",", "dis_metric", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Cost-aware LCB acquisition function which encourages low perturbation costs\n\n        :param model: BO surrogate model function\n        :param beta: LCB exploration and exploitation trade-off parameter\n        :param dis_metric: perturbatino cost metric; if None, the acqusition equals to normal LCB acquisition function\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "dis_metric", "=", "dis_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget._compute_acq": [[106, 120], ["acquisitions.LCB_budget.model.predict", "numpy.atleast_2d", "acquisitions.LCB_budget.beta", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.tf_models.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta"], ["", "def", "_compute_acq", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :return f_acqu: acqusition function value\n        \"\"\"", "\n", "m", ",", "s", "=", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "f_acqu", "=", "-", "(", "m", "-", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "s", ")", "\n", "\n", "if", "self", ".", "dis_metric", "is", "not", "None", ":", "\n", "            ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "perturb_cost", "=", "(", "np", ".", "sum", "(", "x", "**", "2", ",", "axis", "=", "1", ")", "/", "(", "x", ".", "shape", "[", "1", "]", ")", ")", "[", ":", ",", "None", "]", "\n", "f_acqu", "=", "f_acqu", "/", "perturb_cost", "\n", "\n", "", "return", "f_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget._compute_acq_withGradients": [[121, 138], ["acquisitions.LCB_budget.model.predict_withGradients", "numpy.atleast_2d", "acquisitions.LCB_budget.beta", "acquisitions.LCB_budget.beta", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.gp.GPModel.predict_withGradients", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta"], ["", "def", "_compute_acq_withGradients", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :return f_acqu: acqusition function value\n        :return df_acqu: derivative of acqusition function values w.r.t test location\n        \"\"\"", "\n", "m", ",", "s", ",", "dmdx", ",", "dsdx", "=", "self", ".", "model", ".", "predict_withGradients", "(", "x", ")", "\n", "f_acqu", "=", "-", "m", "+", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "s", "\n", "df_acqu", "=", "-", "dmdx", "+", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "dsdx", "\n", "\n", "if", "self", ".", "dis_metric", "is", "not", "None", ":", "\n", "            ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "perturb_cost", "=", "(", "np", ".", "sum", "(", "x", "**", "2", ",", "axis", "=", "1", ")", "/", "(", "x", ".", "shape", "[", "1", "]", ")", ")", "[", ":", ",", "None", "]", "\n", "f_acqu", "=", "f_acqu", "/", "perturb_cost", "\n", "df_acqu", "=", "df_acqu", "/", "perturb_cost", "\n", "\n", "", "return", "f_acqu", ",", "df_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive.__init__": [[142, 154], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "beta", "=", "3", ",", "dis_metric", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Cost-aware LCB acquisition function with additive GP surrogate which encourages low perturbation costs\n\n        :param model: BO surrogate model function\n        :param beta: LCB exploration and exploitation trade-off parameter\n        :param dis_metric: perturbatino cost metric; if None, the acqusition equals to normal LCB acquisition function\n        \"\"\"", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "dis_metric", "=", "dis_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq": [[155, 173], ["acquisitions.LCB_budget_additive.model.predictSub", "numpy.atleast_2d", "acquisitions.LCB_budget_additive.beta", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp.predictSub", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta"], ["", "def", "_compute_acq", "(", "self", ",", "x", ",", "subspace_id", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :param subspace_id: select a specific subspace of active dimensions\n        :return f_acqu: acqusition function value\n        \"\"\"", "\n", "\n", "m", ",", "s", "=", "self", ".", "model", ".", "predictSub", "(", "x", ",", "subspace_id", "=", "subspace_id", ")", "\n", "f_acqu", "=", "-", "(", "m", "-", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "s", ")", "\n", "\n", "if", "self", ".", "dis_metric", "is", "not", "None", ":", "\n", "            ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "# perturb_cost = np.exp(np.linalg.norm(x, ord=self.dis_metric, axis=1))[:,None]", "\n", "perturb_cost", "=", "(", "np", ".", "sum", "(", "x", "[", ":", ",", "self", ".", "model", ".", "active_dims_list", "[", "subspace_id", "]", "]", "**", "2", ",", "axis", "=", "1", ")", "\n", "/", "(", "x", ".", "shape", "[", "1", "]", "/", "self", ".", "model", ".", "n_sub", ")", ")", "[", ":", ",", "None", "]", "\n", "f_acqu", "=", "f_acqu", "/", "perturb_cost", "\n", "\n", "", "return", "f_acqu", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq_withGradients": [[174, 193], ["acquisitions.LCB_budget_additive.model.predictSub_withGradients", "numpy.atleast_2d", "acquisitions.LCB_budget_additive.beta", "acquisitions.LCB_budget_additive.beta", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.Additive_GPModel_Learn_Decomp.predictSub_withGradients", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.model.ConfidenceBoundModel.beta"], ["", "def", "_compute_acq_withGradients", "(", "self", ",", "x", ",", "subspace_id", ")", ":", "\n", "        ", "\"\"\"\n        :param x: test location\n        :param subspace_id: select a specific subspace of active dimensions\n        :return f_acqu: acqusition function value\n        :return df_acqu: derivative of acqusition function values w.r.t test location\n        \"\"\"", "\n", "\n", "m", ",", "s", ",", "dmdx", ",", "dsdx", "=", "self", ".", "model", ".", "predictSub_withGradients", "(", "x", ",", "subspace_id", "=", "subspace_id", ")", "\n", "f_acqu", "=", "-", "m", "+", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "s", "\n", "df_acqu", "=", "-", "dmdx", "+", "self", ".", "beta", "(", "self", ".", "n_iter", ")", "*", "dsdx", "\n", "\n", "if", "self", ".", "dis_metric", "is", "not", "None", ":", "\n", "            ", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "perturb_cost", "=", "(", "np", ".", "sum", "(", "x", "[", ":", ",", "self", ".", "model", ".", "active_dims_list", "[", "subspace_id", "]", "]", "**", "2", ",", "axis", "=", "1", ")", "\n", "/", "(", "x", ".", "shape", "[", "1", "]", "/", "self", ".", "model", ".", "n_sub", ")", ")", "[", ":", ",", "None", "]", "\n", "f_acqu", "=", "f_acqu", "/", "perturb_cost", "\n", "df_acqu", "=", "df_acqu", "/", "perturb_cost", "\n", "", "return", "f_acqu", ",", "df_acqu", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.get_init_data": [[10, 33], ["numpy.random.uniform", "pyDOE.lhs"], "function", ["None"], ["import", "scipy", "as", "sp", "\n", "\n", "try", ":", "\n", "    ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "mpl_toolkits", ".", "mplot3d", "import", "Axes3D", "# Create 3D axes", "\n", "from", "matplotlib", "import", "cm", "# 3D plot colors", "\n", "", "except", "ImportError", ":", "\n", "    ", "print", "(", "\"Plotting library could not be loaded.\"", ")", "\n", "\n", "\n", "", "__all__", "=", "[", "'linearly_spaced_combinations'", ",", "'sample_gp_function'", ",", "'plot_2d_gp'", ",", "\n", "'plot_3d_gp'", ",", "'plot_contour_gp'", "]", "\n", "\n", "\n", "def", "linearly_spaced_combinations", "(", "bounds", ",", "num_samples", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.subset_select": [[34, 68], ["print", "numpy.random.permutation", "range", "numpy.exp", "numpy.random.choice", "numpy.sum", "pseudo_prob.flatten", "Y_all.min"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["\n", "num_vars", "=", "len", "(", "bounds", ")", "\n", "\n", "if", "not", "isinstance", "(", "num_samples", ",", "Sequence", ")", ":", "\n", "        ", "num_samples", "=", "[", "num_samples", "]", "*", "num_vars", "\n", "\n", "", "if", "len", "(", "bounds", ")", "==", "1", ":", "\n", "        ", "return", "np", ".", "linspace", "(", "bounds", "[", "0", "]", "[", "0", "]", ",", "bounds", "[", "0", "]", "[", "1", "]", ",", "num_samples", "[", "0", "]", ")", "[", ":", ",", "None", "]", "\n", "\n", "# Create linearly spaced test inputs", "\n", "", "inputs", "=", "[", "np", ".", "linspace", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "n", ")", "for", "b", ",", "n", "in", "zip", "(", "bounds", ",", "\n", "num_samples", ")", "]", "\n", "\n", "# Convert to 2-D array", "\n", "return", "np", ".", "array", "(", "[", "x", ".", "ravel", "(", ")", "for", "x", "in", "np", ".", "meshgrid", "(", "*", "inputs", ")", "]", ")", ".", "T", "\n", "\n", "\n", "", "def", "sample_gp_function", "(", "kernel", ",", "bounds", ",", "noise_var", ",", "num_samples", ",", "\n", "interpolation", "=", "'kernel'", ",", "mean_function", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.subset_select_for_learning": [[70, 87], ["numpy.exp", "numpy.random.choice", "numpy.sum", "pseudo_prob.flatten", "Y_all.min"], "function", ["None"], []], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func": [[89, 144], ["list", "numpy.vstack", "utilities.optimise_acqu_func_additive.target_func", "acqu_func._compute_acq_withGradients", "numpy.tile", "target_func.flatten().argsort", "numpy.array", "acqu_func._compute_acq", "numpy.tile", "numpy.random.rand", "scipy.optimize.fmin_l_bfgs_b", "scipy.optimize.fmin_l_bfgs_b", "target_func.flatten"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq_withGradients", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq"], ["\n", "inputs", "=", "linearly_spaced_combinations", "(", "bounds", ",", "num_samples", ")", "\n", "cov", "=", "kernel", ".", "K", "(", "inputs", ")", "+", "np", ".", "eye", "(", "inputs", ".", "shape", "[", "0", "]", ")", "*", "1e-6", "\n", "output", "=", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "inputs", ".", "shape", "[", "0", "]", ")", ",", "\n", "cov", ")", "\n", "\n", "if", "interpolation", "==", "'linear'", ":", "\n", "\n", "        ", "def", "evaluate_gp_function_linear", "(", "x", ",", "noise", "=", "True", ")", ":", "\n", "            ", "\"\"\"\n            Evaluate the GP sample function with linear interpolation.\n\n            Parameters\n            ----------\n            x: np.array\n                2D array with inputs\n            noise: bool\n                Whether to include prediction noise\n            \"\"\"", "\n", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "sp", ".", "interpolate", ".", "griddata", "(", "inputs", ",", "output", ",", "x", ",", "method", "=", "'linear'", ")", "\n", "\n", "# Work around weird dimension squishing in griddata", "\n", "y", "=", "np", ".", "atleast_2d", "(", "y", ".", "squeeze", "(", ")", ")", ".", "T", "\n", "\n", "if", "mean_function", "is", "not", "None", ":", "\n", "                ", "y", "+=", "mean_function", "(", "x", ")", "\n", "", "if", "noise", ":", "\n", "                ", "y", "+=", "np", ".", "sqrt", "(", "noise_var", ")", "*", "np", ".", "random", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "return", "y", "\n", "", "return", "evaluate_gp_function_linear", "\n", "\n", "", "elif", "interpolation", "==", "'kernel'", ":", "\n", "        ", "cho_factor", "=", "sp", ".", "linalg", ".", "cho_factor", "(", "cov", ")", "\n", "alpha", "=", "sp", ".", "linalg", ".", "cho_solve", "(", "cho_factor", ",", "output", ")", "\n", "\n", "def", "evaluate_gp_function_kernel", "(", "x", ",", "noise", "=", "True", ")", ":", "\n", "            ", "\"\"\"\n            Evaluate the GP sample function with kernel interpolation.\n\n            Parameters\n            ----------\n            x: np.array\n                2D array with inputs\n            noise: bool\n                Whether to include prediction noise\n            \"\"\"", "\n", "x", "=", "np", ".", "atleast_2d", "(", "x", ")", "\n", "y", "=", "kernel", ".", "K", "(", "x", ",", "inputs", ")", ".", "dot", "(", "alpha", ")", "\n", "y", "=", "y", "[", ":", ",", "None", "]", "\n", "if", "mean_function", "is", "not", "None", ":", "\n", "                ", "y", "+=", "mean_function", "(", "x", ")", "\n", "", "if", "noise", ":", "\n", "                ", "y", "+=", "np", ".", "sqrt", "(", "noise_var", ")", "*", "np", ".", "random", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "return", "y", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_mledr": [[146, 221], ["int", "numpy.vstack", "int", "upsampler.downsample_projection", "int", "range", "numpy.vstack", "numpy.vstack", "acqu_func._compute_acq_withGradients", "int", "utilities.optimise_acqu_func_additive.target_func", "random_starts_candidates_list.append", "good_results_list.append", "target_func.flatten().argsort", "numpy.array", "acqu_func._compute_acq", "numpy.tile", "numpy.vstack", "target_func.flatten().argsort", "scipy.optimize.fmin_l_bfgs_b", "scipy.optimize.fmin_l_bfgs_b", "numpy.tile", "numpy.random.rand", "target_func.flatten", "target_func.flatten"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.downsample_projection", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq_withGradients", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq"], ["", "return", "evaluate_gp_function_kernel", "\n", "\n", "\n", "", "", "def", "plot_2d_gp", "(", "gp", ",", "inputs", ",", "predictions", "=", "None", ",", "figure", "=", "None", ",", "axis", "=", "None", ",", "\n", "fixed_inputs", "=", "None", ",", "beta", "=", "3", ",", "fmin", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Plot a 2D GP with uncertainty.\n\n        Parameters\n        ----------\n        gp: Instance of GPy.models.GPRegression\n        inputs: 2darray\n            The input parameters at which the GP is to be evaluated\n        predictions: ndarray\n            Can be used to manually pass the GP predictions, set to None to\n            use the gp directly. Is of the form (mean, variance)\n        figure: matplotlib figure\n            The figure on which to draw (ignored if axis is provided\n        axis: matplotlib axis\n            The axis on which to draw\n        fixed_inputs: list\n            A list containing the the fixed inputs and their corresponding\n            values, e.g., [(0, 3.2), (4, -2.43)]. Set the value to None if\n            it's not fixed, but should not be a plotted axis either\n        beta: float\n            The confidence interval used\n        fmin : float\n            The safety threshold value.\n\n        Returns\n        -------\n        axis\n        \"\"\"", "\n", "if", "fixed_inputs", "is", "None", ":", "\n", "            ", "if", "gp", ".", "kern", ".", "input_dim", ">", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'This only works for 1D inputs'", ")", "\n", "", "fixed_inputs", "=", "[", "]", "\n", "", "elif", "gp", ".", "kern", ".", "input_dim", "-", "len", "(", "fixed_inputs", ")", "!=", "1", ":", "\n", "            ", "raise", "NotImplemented", "(", "'This only works for 1D inputs'", ")", "\n", "\n", "", "ms", "=", "kwargs", ".", "pop", "(", "'ms'", ",", "10", ")", "\n", "mew", "=", "kwargs", ".", "pop", "(", "'mew'", ",", "3", ")", "\n", "point_color", "=", "kwargs", ".", "pop", "(", "'point_color'", ",", "'k'", ")", "\n", "\n", "if", "axis", "is", "None", ":", "\n", "            ", "if", "figure", "is", "None", ":", "\n", "                ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "", "else", ":", "\n", "                ", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "\n", "# Get a list of unfixed inputs to plot", "\n", "", "", "unfixed", "=", "list", "(", "range", "(", "gp", ".", "kern", ".", "input_dim", ")", ")", "\n", "for", "dim", ",", "val", "in", "fixed_inputs", ":", "\n", "            ", "if", "val", "is", "not", "None", ":", "\n", "                ", "inputs", "[", ":", ",", "dim", "]", "=", "val", "\n", "", "unfixed", ".", "remove", "(", "dim", ")", "\n", "\n", "# Compute GP predictions if not provided", "\n", "", "if", "predictions", "is", "None", ":", "\n", "            ", "mean", ",", "var", "=", "gp", ".", "_raw_predict", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "predictions", "\n", "\n", "", "output", "=", "mean", ".", "squeeze", "(", ")", "\n", "std_dev", "=", "beta", "*", "np", ".", "sqrt", "(", "var", ".", "squeeze", "(", ")", ")", "\n", "\n", "axis", ".", "fill_between", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "output", "-", "std_dev", ",", "\n", "output", "+", "std_dev", ",", "\n", "facecolor", "=", "'blue'", ",", "\n", "alpha", "=", "0.3", ")", "\n", "\n", "axis", ".", "plot", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ",", "output", ",", "**", "kwargs", ")", "\n", "axis", ".", "scatter", "(", "gp", ".", "X", "[", ":", "-", "1", ",", "unfixed", "[", "0", "]", "]", ",", "gp", ".", "Y", "[", ":", "-", "1", ",", "0", "]", ",", "s", "=", "20", "*", "ms", ",", "\n", "marker", "=", "'x'", ",", "linewidths", "=", "mew", ",", "color", "=", "point_color", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_additive": [[223, 307], ["numpy.vstack", "numpy.zeros", "range", "numpy.sum", "numpy.tile", "print", "utilities.optimise_acqu_func_additive.target_func"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["marker", "=", "'x'", ",", "linewidths", "=", "mew", ",", "color", "=", "'r'", ")", "\n", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "if", "fmin", "is", "not", "None", ":", "\n", "            ", "axis", ".", "plot", "(", "inputs", "[", "[", "0", ",", "-", "1", "]", ",", "unfixed", "[", "0", "]", "]", ",", "[", "fmin", ",", "fmin", "]", ",", "'k--'", ")", "\n", "\n", "", "return", "axis", "\n", "\n", "\n", "", "def", "plot_3d_gp", "(", "gp", ",", "inputs", ",", "predictions", "=", "None", ",", "figure", "=", "None", ",", "axis", "=", "None", ",", "\n", "fixed_inputs", "=", "None", ",", "beta", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Plot a 3D gp with uncertainty.\n\n        Parameters\n        ----------\n        gp: Instance of GPy.models.GPRegression\n        inputs: 2darray\n            The input parameters at which the GP is to be evaluated\n        predictions: ndarray\n            Can be used to manually pass the GP predictions, set to None to\n            use the gp directly. Is of the form [mean, variance]\n        figure: matplotlib figure\n            The figure on which to draw (ignored if axis is provided\n        axis: matplotlib axis\n            The axis on which to draw\n        fixed_inputs: list\n            A list containing the the fixed inputs and their corresponding\n            values, e.g., [(0, 3.2), (4, -2.43)]. Set the value to None if\n            it's not fixed, but should not be a plotted axis either\n        beta: float\n            The confidence interval used\n\n        Returns\n        -------\n        surface: matplotlib trisurf plot\n        data: matplotlib plot for data points\n        \"\"\"", "\n", "if", "fixed_inputs", "is", "None", ":", "\n", "            ", "if", "gp", ".", "kern", ".", "input_dim", ">", "2", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'This only works for 2D inputs'", ")", "\n", "", "fixed_inputs", "=", "[", "]", "\n", "", "elif", "gp", ".", "kern", ".", "input_dim", "-", "len", "(", "fixed_inputs", ")", "!=", "2", ":", "\n", "            ", "raise", "NotImplemented", "(", "'Only two inputs can be unfixed'", ")", "\n", "\n", "", "if", "axis", "is", "None", ":", "\n", "            ", "if", "figure", "is", "None", ":", "\n", "                ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "Axes3D", "(", "figure", ")", "\n", "", "else", ":", "\n", "                ", "axis", "=", "Axes3D", "(", "figure", ")", "\n", "\n", "# Get a list of unfixed inputs to plot", "\n", "", "", "unfixed", "=", "list", "(", "range", "(", "gp", ".", "kern", ".", "input_dim", ")", ")", "\n", "for", "dim", ",", "val", "in", "fixed_inputs", ":", "\n", "            ", "if", "val", "is", "not", "None", ":", "\n", "                ", "inputs", "[", ":", ",", "dim", "]", "=", "val", "\n", "", "unfixed", ".", "remove", "(", "dim", ")", "\n", "\n", "# Compute GP predictions if not provided", "\n", "", "if", "predictions", "is", "None", ":", "\n", "            ", "mean", ",", "var", "=", "gp", ".", "_raw_predict", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "predictions", "\n", "\n", "", "surf", "=", "axis", ".", "plot_trisurf", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "inputs", "[", ":", ",", "unfixed", "[", "1", "]", "]", ",", "\n", "mean", "[", ":", ",", "0", "]", ",", "\n", "cmap", "=", "cm", ".", "jet", ",", "linewidth", "=", "0.2", ",", "alpha", "=", "0.5", ")", "\n", "\n", "data", "=", "axis", ".", "plot", "(", "gp", ".", "X", "[", ":", "-", "1", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "gp", ".", "X", "[", ":", "-", "1", ",", "unfixed", "[", "1", "]", "]", ",", "\n", "gp", ".", "Y", "[", ":", "-", "1", ",", "0", "]", ",", "\n", "'o'", ")", "\n", "axis", ".", "plot", "(", "gp", ".", "X", "[", "-", "1", ",", "unfixed", "[", "0", "]", "]", ",", "\n", "gp", ".", "X", "[", "-", "1", ",", "unfixed", "[", "1", "]", "]", ",", "\n", "gp", ".", "Y", "[", "-", "1", ",", "0", "]", ",", "\n", "'ro'", ")", "\n", "\n", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", ":", ",", "unfixed", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "axis", ".", "set_ylim", "(", "[", "np", ".", "min", "(", "inputs", "[", ":", ",", "unfixed", "[", "1", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", ":", ",", "unfixed", "[", "1", "]", "]", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.utilities.optimise_acqu_func_for_NN": [[309, 346], ["numpy.split", "np.split.append", "numpy.vstack", "numpy.vstack", "print", "numpy.tile", "utilities.optimise_acqu_func_additive.target_func", "np.vstack.flatten().argsort", "numpy.array", "acqu_func._compute_acq", "numpy.tile", "numpy.random.rand", "np.vstack.flatten", "int"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.additive_gp_decomp.split", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.acq_funcs.acquisitions.LCB_budget_additive._compute_acq"], ["return", "surf", ",", "data", "\n", "\n", "", "def", "plot_x_and_f", "(", "f", ",", "inputs", ",", "X", ",", "axis", "=", "None", ",", "figure", "=", "None", ")", ":", "\n", "    ", "if", "axis", "is", "None", ":", "\n", "        ", "if", "figure", "is", "None", ":", "\n", "            ", "figure", "=", "plt", ".", "figure", "(", ")", "\n", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "", "else", ":", "\n", "            ", "axis", "=", "figure", ".", "gca", "(", ")", "\n", "\n", "", "", "slices", "=", "[", "]", "\n", "lengths", "=", "[", "]", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "if", "isinstance", "(", "inp", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "slices", ".", "append", "(", "i", ")", "\n", "lengths", ".", "append", "(", "inp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "", "axis", ".", "set_xlim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "0", "]", "]", ")", "]", ")", "\n", "\n", "axis", ".", "set_ylim", "(", "[", "np", ".", "min", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", ",", "\n", "np", ".", "max", "(", "inputs", "[", "slices", "[", "1", "]", "]", ")", "]", ")", "\n", "\n", "\n", "data", "=", "axis", ".", "plot", "(", "X", "[", ":", ",", "slices", "[", "0", "]", "]", ",", "X", "[", ":", ",", "slices", "[", "1", "]", "]", ",", "'xk'", ",", "markersize", "=", "15", ")", "\n", "\n", "", "def", "plot_contour_gp", "(", "gp", ",", "inputs", ",", "predictions", "=", "None", ",", "figure", "=", "None", ",", "axis", "=", "None", ",", "\n", "colorbar", "=", "True", ",", "red_points", "=", "None", ",", "green_points", "=", "None", ",", "blue_points", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.upsample_projection": [[8, 57], ["int", "int", "numpy.floor", "int", "numpy.zeros", "range", "np.zeros.reshape", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.interpolate", "F.interpolate.data.numpy().squeeze().reshape", "numpy.sqrt", "numpy.sqrt", "range", "int", "int", "numpy.floor", "range", "torch.FloatTensor", "torch.FloatTensor", "numpy.sqrt", "numpy.sqrt", "F.interpolate.data.numpy().squeeze", "numpy.sqrt", "range", "int", "int", "range", "numpy.sqrt", "numpy.sqrt", "F.interpolate.data.numpy"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range"], ["def", "upsample_projection", "(", "dim_reduction", ",", "X_low", ",", "low_dim", ",", "high_dim", ",", "nchannel", "=", "1", ",", "align_corners", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Various upsampling methods: CLUSTER,  BILI (bilinear), NN (bilinear), BICU (bicubic)\n\n    :param dim_reduction: dimension reduction method used in upsampling\n    :param X_low: input data in low dimension\n    :param low_dim: the low dimension\n    :param high_dim: the high dimension\n    :param nchannel: number of image channels\n    :param align_corners: align corner option for interpolate\n    :return X_high: input data in high dimension\n    \"\"\"", "\n", "\n", "if", "dim_reduction", "==", "'CLUSTER'", ":", "\n", "        ", "n", "=", "X_low", ".", "shape", "[", "0", "]", "\n", "high_int", "=", "int", "(", "np", ".", "sqrt", "(", "high_dim", ")", ")", "\n", "low_int", "=", "int", "(", "np", ".", "sqrt", "(", "low_dim", ")", ")", "\n", "ratio", "=", "np", ".", "floor", "(", "high_dim", "/", "low_dim", ")", "\n", "low_edge", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "ratio", ")", ")", "+", "1", ")", "\n", "high_edge", "=", "low_edge", "*", "low_int", "\n", "high_obs", "=", "np", ".", "zeros", "(", "(", "n", ",", "high_edge", ",", "high_edge", ",", "nchannel", ")", ")", "\n", "for", "ch", "in", "range", "(", "nchannel", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "low_int", ")", ":", "\n", "                ", "for", "col", "in", "range", "(", "low_int", ")", ":", "\n", "                    ", "k", "=", "row", "*", "low_int", "+", "col", "\n", "for", "jj", "in", "range", "(", "low_edge", ")", ":", "\n", "                        ", "for", "ii", "in", "range", "(", "low_edge", ")", ":", "\n", "                            ", "high_obs", "[", ":", ",", "row", "*", "low_edge", "+", "jj", ",", "col", "*", "low_edge", "+", "ii", ",", "ch", "]", "=", "X_low", "[", ":", ",", "ch", "*", "low_dim", "+", "k", "]", "\n", "\n", "", "", "", "", "", "high_obs", "=", "high_obs", "[", ":", ",", ":", "high_int", ",", ":", "high_int", ",", ":", "]", "\n", "X_high", "=", "high_obs", ".", "reshape", "(", "X_low", ".", "shape", "[", "0", "]", ",", "high_dim", "*", "nchannel", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "if", "dim_reduction", "==", "'BILI'", ":", "\n", "            ", "upsample_mode", "=", "'bilinear'", "\n", "", "elif", "dim_reduction", "==", "'NN'", ":", "\n", "            ", "upsample_mode", "=", "'nearest'", "\n", "align_corners", "=", "None", "\n", "", "elif", "dim_reduction", "==", "'BICU'", ":", "\n", "            ", "upsample_mode", "=", "'bicubic'", "\n", "\n", "", "X_low_tensor", "=", "torch", ".", "FloatTensor", "(", "X_low", ")", ".", "view", "(", "X_low", ".", "shape", "[", "0", "]", ",", "nchannel", ",", "int", "(", "np", ".", "sqrt", "(", "low_dim", ")", ")", ",", "\n", "int", "(", "np", ".", "sqrt", "(", "low_dim", ")", ")", ")", "\n", "X_high_tensor_resize", "=", "F", ".", "interpolate", "(", "X_low_tensor", ",", "\n", "size", "=", "(", "int", "(", "np", ".", "sqrt", "(", "high_dim", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "high_dim", ")", ")", ")", ",", "mode", "=", "upsample_mode", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "X_high", "=", "X_high_tensor_resize", ".", "data", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "reshape", "(", "X_low", ".", "shape", "[", "0", "]", ",", "high_dim", "*", "nchannel", ")", "\n", "", "return", "X_high", "\n", "\n"]], "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.utilities.upsampler.downsample_projection": [[59, 115], ["int", "numpy.reshape", "int", "numpy.floor", "int", "numpy.zeros", "range", "range", "numpy.zeros", "range", "F.interpolate.reshape", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.interpolate", "F.interpolate.data.numpy().squeeze().reshape", "numpy.sqrt", "numpy.sqrt", "range", "int", "int", "numpy.floor", "range", "torch.FloatTensor", "torch.FloatTensor", "numpy.sqrt", "numpy.sqrt", "F.interpolate.data.numpy().squeeze", "numpy.sqrt", "range", "int", "int", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "F.interpolate.data.numpy"], "function", ["home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.environment.domain.ContinuousDomain.range", "home.repos.pwc.inspect_result.eric-vader_HD-BO-Additive-Models.models.lls.LinearModel.mean"], ["", "def", "downsample_projection", "(", "dim_reduction", ",", "X_high", ",", "low_dim", ",", "high_dim", ",", "nchannel", "=", "1", ",", "align_corners", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Various downsampling methods: CLUSTER,  BILI (bilinear), NN (bilinear), BICU (bicubic)\n\n    :param dim_reduction: dimension reduction method used in upsampling\n    :param X_high: input data in high dimension\n    :param low_dim: the low dimension\n    :param high_dim: the high dimension\n    :param nchannel: number of image channels\n    :param align_corners: align corner option for interpolate\n    :return X_low: input data in low dimension\n    \"\"\"", "\n", "\n", "if", "dim_reduction", "==", "'CLUSTER'", ":", "\n", "\n", "        ", "n", "=", "X_high", ".", "shape", "[", "0", "]", "\n", "high_int", "=", "int", "(", "np", ".", "sqrt", "(", "high_dim", ")", ")", "\n", "X_high", "=", "np", ".", "reshape", "(", "X_high", ",", "(", "n", ",", "high_int", ",", "high_int", ",", "nchannel", ")", ")", "\n", "low_int", "=", "int", "(", "np", ".", "sqrt", "(", "low_dim", ")", ")", "\n", "ratio", "=", "np", ".", "floor", "(", "high_dim", "/", "low_dim", ")", "\n", "low_edge", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "ratio", ")", ")", "+", "1", ")", "\n", "high_edge", "=", "low_edge", "*", "low_int", "\n", "npadd", "=", "high_edge", "-", "high_int", "\n", "high_obs", "=", "np", ".", "zeros", "(", "(", "n", ",", "high_edge", ",", "high_edge", ",", "nchannel", ")", ")", "\n", "high_obs", "[", ":", ",", ":", "high_int", ",", ":", "high_int", ",", ":", "]", "=", "X_high", "\n", "for", "kk", "in", "range", "(", "npadd", ")", ":", "\n", "            ", "high_obs", "[", ":", ",", "high_int", "+", "kk", ",", ":", "high_int", ",", ":", "]", "=", "high_obs", "[", ":", ",", "high_int", "-", "1", ",", ":", "high_int", ",", ":", "]", "\n", "", "for", "kk", "in", "range", "(", "npadd", ")", ":", "\n", "            ", "high_obs", "[", ":", ",", ":", ",", "high_int", "+", "kk", ",", ":", "]", "=", "high_obs", "[", ":", ",", ":", ",", "high_int", "-", "1", ",", ":", "]", "\n", "", "low_obs", "=", "np", ".", "zeros", "(", "(", "n", ",", "low_int", ",", "low_int", ",", "nchannel", ")", ")", "\n", "for", "ch", "in", "range", "(", "nchannel", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "low_int", ")", ":", "\n", "                ", "for", "col", "in", "range", "(", "low_int", ")", ":", "\n", "                    ", "for", "point", "in", "range", "(", "n", ")", ":", "\n", "                        ", "low_obs", "[", "point", ",", "row", ",", "col", ",", "ch", "]", "=", "np", ".", "mean", "(", "\n", "high_obs", "[", "point", ",", "(", "row", "*", "low_edge", ")", ":", "(", "(", "row", "+", "1", ")", "*", "low_edge", ")", ",", "\n", "(", "col", "*", "low_edge", ")", ":", "(", "(", "col", "+", "1", ")", "*", "low_edge", ")", ",", "ch", "]", ")", "\n", "", "", "", "", "X_low_tensor_resize", "=", "low_obs", "\n", "X_low", "=", "X_low_tensor_resize", ".", "reshape", "(", "X_high", ".", "shape", "[", "0", "]", ",", "low_dim", "*", "nchannel", ")", "\n", "\n", "", "else", ":", "\n", "        ", "if", "dim_reduction", "==", "'BILI'", ":", "\n", "            ", "upsample_mode", "=", "'bilinear'", "\n", "", "elif", "dim_reduction", "==", "'NN'", ":", "\n", "            ", "upsample_mode", "=", "'nearest'", "\n", "align_corners", "=", "None", "\n", "", "elif", "dim_reduction", "==", "'BICU'", ":", "\n", "            ", "upsample_mode", "=", "'bicubic'", "\n", "\n", "", "X_high_tensor", "=", "torch", ".", "FloatTensor", "(", "X_high", ")", ".", "view", "(", "X_high", ".", "shape", "[", "0", "]", ",", "nchannel", ",", "int", "(", "np", ".", "sqrt", "(", "high_dim", ")", ")", ",", "\n", "int", "(", "np", ".", "sqrt", "(", "high_dim", ")", ")", ")", "\n", "X_low_tensor_resize", "=", "F", ".", "interpolate", "(", "X_high_tensor", ",", "\n", "size", "=", "(", "int", "(", "np", ".", "sqrt", "(", "low_dim", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "low_dim", ")", ")", ")", ",", "mode", "=", "upsample_mode", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "X_low", "=", "X_low_tensor_resize", ".", "data", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "reshape", "(", "X_high", ".", "shape", "[", "0", "]", ",", "low_dim", "*", "nchannel", ")", "\n", "", "return", "X_low", "\n", "", ""]]}