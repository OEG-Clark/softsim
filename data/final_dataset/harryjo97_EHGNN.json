{"home.repos.pwc.inspect_result.harryjo97_EHGNN.None.main.main": [[3, 28], ["Parser().parse", "Trainer", "Trainer.train", "Parser", "ValueError"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.parse", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.train"], ["def", "main", "(", "work_type_args", ")", ":", "\n", "\n", "    ", "if", "work_type_args", ".", "type", "==", "'classification_TU'", ":", "\n", "        ", "from", "parsers", ".", "classification_TU", "import", "Parser", "\n", "from", "trainers", ".", "classification_TU", "import", "Trainer", "\n", "\n", "", "elif", "work_type_args", ".", "type", "==", "'classification_OGB'", ":", "\n", "        ", "from", "parsers", ".", "classification_OGB", "import", "Parser", "\n", "from", "trainers", ".", "classification_OGB", "import", "Trainer", "\n", "\n", "", "elif", "work_type_args", ".", "type", "==", "'reconstruction_ZINC'", ":", "\n", "        ", "from", "parsers", ".", "reconstruction_ZINC", "import", "Parser", "\n", "from", "trainers", ".", "reconstruction_ZINC", "import", "Trainer", "\n", "\n", "", "elif", "work_type_args", ".", "type", "==", "'classification_node'", ":", "\n", "        ", "from", "parsers", ".", "classification_node", "import", "Parser", "\n", "from", "trainers", ".", "classification_node", "import", "Trainer", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Work Type Name <{}> is Unknown\"", ".", "format", "(", "work_type_args", ".", "type", ")", ")", "\n", "\n", "", "args", "=", "Parser", "(", ")", ".", "parse", "(", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.load_data": [[10, 77], ["range", "tuple", "loader_node.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "loader_node.normalize", "networkx.adjacency_matrix", "scipy.diags", "scipy.diags", "nx.adjacency_matrix.dot", "sp.diags.dot", "scipy.diags", "scipy.diags", "nx.adjacency_matrix.dot", "sp.diags.dot", "numpy.vstack", "range", "range", "np.sort.tolist", "torch.FloatTensor", "torch.LongTensor", "loader_node.sparse_mx_to_torch_sparse_tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "nx.adjacency_matrix.multiply", "scipy.eye", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len", "numpy.array", "numpy.argmax", "torch.LongTensor.max().item", "open", "min", "scipy.vstack", "nx.adjacency_matrix.T.multiply", "nx.adjacency_matrix.sum", "nx.adjacency_matrix.sum", "nx.adjacency_matrix.sum", "nx.adjacency_matrix.sum", "len", "torch.FloatTensor.todense", "objects.append", "objects.append", "max", "len", "len", "torch.LongTensor.max", "pickle.load", "pickle.load", "min", "min"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.parse_index_file", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.normalize", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.sparse_mx_to_torch_sparse_tensor"], ["def", "load_data", "(", "args", ")", ":", "\n", "    ", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"./datasets/NODE/ind.{}.{}\"", ".", "format", "(", "args", ".", "data", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"./datasets/NODE/ind.{}.test.index\"", ".", "format", "(", "args", ".", "data", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "args", ".", "data", "==", "'citeseer'", ":", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "\n", "\n", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "D1_", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "axis", "=", "1", ")", ")", "**", "(", "-", "0.5", ")", "\n", "D2_", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "axis", "=", "0", ")", ")", "**", "(", "-", "0.5", ")", "\n", "D1_", "=", "sp", ".", "diags", "(", "D1_", "[", ":", ",", "0", "]", ",", "format", "=", "'csr'", ")", "\n", "D2_", "=", "sp", ".", "diags", "(", "D2_", "[", "0", ",", ":", "]", ",", "format", "=", "'csr'", ")", "\n", "A_", "=", "adj", ".", "dot", "(", "D1_", ")", "\n", "A_", "=", "D2_", ".", "dot", "(", "A_", ")", "\n", "\n", "\n", "D1", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "axis", "=", "1", ")", ")", "**", "(", "-", "0.5", ")", "\n", "D2", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "axis", "=", "0", ")", ")", "**", "(", "-", "0.5", ")", "\n", "D1", "=", "sp", ".", "diags", "(", "D1", "[", ":", ",", "0", "]", ",", "format", "=", "'csr'", ")", "\n", "D2", "=", "sp", ".", "diags", "(", "D2", "[", "0", ",", ":", "]", ",", "format", "=", "'csr'", ")", "\n", "\n", "A", "=", "adj", ".", "dot", "(", "D1", ")", "\n", "A", "=", "D2", ".", "dot", "(", "A", ")", "\n", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "# onehot", "\n", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "np", ".", "argmax", "(", "labels", ",", "-", "1", ")", ")", "\n", "A", "=", "sparse_mx_to_torch_sparse_tensor", "(", "A", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "args", ".", "num_node_features", "=", "features", ".", "shape", "[", "1", "]", "\n", "args", ".", "num_edge_features", "=", "args", ".", "num_hidden", "*", "2", "# Features of an edge is defined by features of its incidence nodes", "\n", "args", ".", "num_classes", "=", "labels", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "\n", "return", "A", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.parse_index_file": [[79, 84], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["", "def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.normalize": [[86, 93], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.sparse_mx_to_torch_sparse_tensor": [[95, 102], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_node.load_model": [[104, 113], ["models.models.Model_HyperDrop_Node", "ValueError"], "function", ["None"], ["", "def", "load_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "model", "==", "'HyperDrop'", ":", "\n", "        ", "model", "=", "Model_HyperDrop_Node", "(", "args", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Model Name <{}> is Unknown\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.__init__": [[9, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ",", "mode", ",", "lock", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Implements write routine\n        :param filepath: the file where to write\n        :param mode: can be 'w' or 'a'\n        :param lock: pass a shared lock for multi process write access\n        \"\"\"", "\n", "self", ".", "filepath", "=", "filepath", "\n", "if", "mode", "not", "in", "[", "'w'", ",", "'a'", "]", ":", "\n", "            ", "assert", "False", ",", "'Mode must be one of w, r or a'", "\n", "", "else", ":", "\n", "            ", "self", ".", "mode", "=", "mode", "\n", "", "self", ".", "lock", "=", "lock", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log": [[23, 35], ["setting.Logger.lock.acquire", "setting.Logger.lock.release", "open", "f.write", "print"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "str", ")", ":", "\n", "        ", "if", "self", ".", "lock", ":", "\n", "            ", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "\n", "", "try", ":", "\n", "            ", "with", "open", "(", "self", ".", "filepath", ",", "self", ".", "mode", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "+", "'\\n'", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n", "", "if", "self", ".", "lock", ":", "\n", "            ", "self", ".", "lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_seed": [[37, 49], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "", "def", "set_seed", "(", "args", ")", ":", "\n", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "return", "args", ".", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_experiment_name": [[51, 76], ["time.strftime", "os.path.join", "print", "str", "torch.save", "time.gmtime", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "set_experiment_name", "(", "args", ")", ":", "\n", "\n", "    ", "ts", "=", "time", ".", "strftime", "(", "'%Y-%b-%d-%H:%M:%S'", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "\n", "log_folder_name", "=", "os", ".", "path", ".", "join", "(", "*", "[", "args", ".", "data", ",", "args", ".", "model", ",", "args", ".", "experiment_number", "]", ")", "\n", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "'./checkpoints/{}'", ".", "format", "(", "log_folder_name", ")", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "'./checkpoints/{}'", ".", "format", "(", "log_folder_name", ")", ")", ")", "\n", "\n", "", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "'./results/{}'", ".", "format", "(", "log_folder_name", ")", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "'./results/{}'", ".", "format", "(", "log_folder_name", ")", ")", ")", "\n", "\n", "", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "'./logs/{}'", ".", "format", "(", "log_folder_name", ")", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "'./logs/{}'", ".", "format", "(", "log_folder_name", ")", ")", ")", "\n", "\n", "", "print", "(", "\"Make Directory {} in Logs, Checkpoints and Results Folders\"", ".", "format", "(", "log_folder_name", ")", ")", "\n", "\n", "exp_name", "=", "str", "(", ")", "\n", "exp_name", "+=", "f\"{ts}\"", "\n", "# exp_name += \"ER={}\".format(args.edge_ratio)", "\n", "\n", "# Save training arguments for reproduction", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "'./checkpoints/{}'", ".", "format", "(", "log_folder_name", ")", ",", "'training_args.bin'", ")", ")", "\n", "\n", "return", "log_folder_name", ",", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_logger": [[78, 84], ["setting.Logger", "str", "os.path.join"], "function", ["None"], ["", "def", "set_logger", "(", "log_folder_name", ",", "exp_name", ",", "seed", ")", ":", "\n", "\n", "    ", "logger", "=", "Logger", "(", "str", "(", "os", ".", "path", ".", "join", "(", "f'./logs/{log_folder_name}/'", ",", "\n", "f'exp-{exp_name}_seed-{seed}.log'", ")", ")", ",", "mode", "=", "'a'", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_logger_fold": [[86, 92], ["setting.Logger", "str", "os.path.join"], "function", ["None"], ["", "def", "set_logger_fold", "(", "log_folder_name", ",", "exp_name", ",", "seed", ",", "fold_number", ")", ":", "\n", "\n", "    ", "logger", "=", "Logger", "(", "str", "(", "os", ".", "path", ".", "join", "(", "f'./logs/{log_folder_name}/'", ",", "\n", "f'exp-{exp_name}_seed-{seed}_fold-{fold_number}.log'", ")", ")", ",", "mode", "=", "'a'", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_device": [[94, 104], ["torch.cuda.is_available", "torch.cuda.set_device"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_device"], ["", "def", "set_device", "(", "args", ")", ":", "\n", "\n", "    ", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "device", "=", "f'cuda:{args.gpu}'", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "return", "device", "", "", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_TU.load_data": [[10, 35], ["utils.data.get_dataset", "numpy.ceil", "numpy.ceil", "print", "print", "print", "print", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.data.get_dataset"], ["def", "load_data", "(", "args", ")", ":", "\n", "\n", "    ", "dataset", "=", "get_dataset", "(", "args", ".", "data", ",", "normalize", "=", "args", ".", "normalize", ")", "\n", "\n", "args", ".", "num_node_features", "=", "dataset", ".", "data", ".", "num_node_features", "\n", "if", "args", ".", "num_node_features", "==", "0", ":", "\n", "        ", "print", "(", "'Added Node Feature'", ")", "\n", "args", ".", "num_node_features", "=", "dataset", ".", "num_features", "\n", "\n", "", "args", ".", "num_edge_features", "=", "dataset", ".", "data", ".", "num_edge_features", "\n", "if", "args", ".", "num_edge_features", "==", "0", ":", "\n", "        ", "print", "(", "'Added Edge Feature'", ")", "\n", "args", ".", "num_edge_features", "=", "1", "\n", "\n", "", "args", ".", "num_classes", "=", "dataset", ".", "num_classes", "\n", "args", ".", "avg_num_nodes", "=", "np", ".", "ceil", "(", "np", ".", "mean", "(", "[", "data", ".", "num_nodes", "for", "data", "in", "dataset", "]", ")", ")", "\n", "args", ".", "avg_num_edges", "=", "np", ".", "ceil", "(", "np", ".", "mean", "(", "[", "data", ".", "num_edges", "for", "data", "in", "dataset", "]", ")", ")", "\n", "\n", "print", "(", "f'# {dataset}: [NODE FEATURES]-{args.num_node_features} [EDGE FEATURES]-{args.num_edge_features} '", "\n", "f'[NUM_CLASSES]-{args.num_classes} [AVG_NODES]-{args.avg_num_nodes} [AVG_EDGES]-{args.avg_num_edges}'", ")", "\n", "\n", "print", "(", "f\"Nodes : {np.mean([data.num_nodes for data in dataset]):.2f}   \"", "\n", "f\"Edges : {np.mean([data.num_edges for data in dataset])/2:.2f}\"", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_TU.load_dataloader": [[37, 58], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "functools.reduce", "torch.as_tensor", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "len", "len", "numpy.setdiff1d"], "function", ["None"], ["", "def", "load_dataloader", "(", "args", ",", "dataset", ",", "fold_number", ",", "val_fold_number", ")", ":", "\n", "\n", "    ", "train_idxes", "=", "torch", ".", "as_tensor", "(", "np", ".", "loadtxt", "(", "f'./datasets/{args.data}/10fold_idx/train_idx-{fold_number}.txt'", ",", "\n", "dtype", "=", "np", ".", "int32", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "val_idxes", "=", "torch", ".", "as_tensor", "(", "np", ".", "loadtxt", "(", "f'./datasets/{args.data}/10fold_idx/test_idx-{val_fold_number}.txt'", ",", "\n", "dtype", "=", "np", ".", "int32", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "test_idxes", "=", "torch", ".", "as_tensor", "(", "np", ".", "loadtxt", "(", "f'./datasets/{args.data}/10fold_idx/test_idx-{fold_number}.txt'", ",", "\n", "dtype", "=", "np", ".", "int32", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "all_idxes", "=", "reduce", "(", "np", ".", "union1d", ",", "(", "train_idxes", ",", "val_idxes", ",", "test_idxes", ")", ")", "\n", "assert", "len", "(", "all_idxes", ")", "==", "len", "(", "dataset", ")", "\n", "\n", "train_idxes", "=", "torch", ".", "as_tensor", "(", "np", ".", "setdiff1d", "(", "train_idxes", ",", "val_idxes", ")", ")", "\n", "\n", "train_set", ",", "val_set", ",", "test_set", "=", "dataset", "[", "train_idxes", "]", ",", "dataset", "[", "val_idxes", "]", ",", "dataset", "[", "test_idxes", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "val_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "test_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_TU.load_model": [[60, 69], ["models.models.Model_HyperDrop", "ValueError"], "function", ["None"], ["", "def", "load_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "model", "==", "'HyperDrop'", ":", "\n", "        ", "model", "=", "Model_HyperDrop", "(", "args", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Model Name <{}> is Unknown\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.node_utils.accuracy": [[2, 7], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "", "", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.data.NormalizedDegree.__init__": [[9, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.data.NormalizedDegree.__call__": [[13, 18], ["torch_geometric.utils.degree", "torch_geometric.utils.degree.view"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "deg", "=", "degree", "(", "data", ".", "edge_index", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "deg", "=", "(", "deg", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "data", ".", "x", "=", "deg", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.data.get_dataset": [[20, 55], ["torch_geometric.datasets.TUDataset", "os.path.join", "max", "torch_geometric.OneHotDegree", "torch.cat().to", "data.NormalizedDegree", "torch.mean", "torch.std", "max", "torch_geometric.ToDense", "torch_geometric.Compose", "torch_geometric.utils.degree", "degs[].max().item", "torch.cat().to.mean().item", "torch.cat().to.std().item", "torch.cat", "torch_geometric.ToDense", "degs[].max", "torch.cat().to.mean", "torch.cat().to.std"], "function", ["None"], ["", "", "def", "get_dataset", "(", "name", ",", "sparse", "=", "True", ",", "cleaned", "=", "False", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "dataset", "=", "TUDataset", "(", "os", ".", "path", ".", "join", "(", "'./data'", ",", "name", ")", ",", "name", ",", "use_node_attr", "=", "True", ",", "use_edge_attr", "=", "True", ",", "cleaned", "=", "cleaned", ")", "\n", "\n", "if", "dataset", ".", "data", ".", "x", "is", "None", ":", "\n", "        ", "max_degree", "=", "0", "\n", "degs", "=", "[", "]", "\n", "for", "data", "in", "dataset", ":", "\n", "            ", "degs", "+=", "[", "degree", "(", "data", ".", "edge_index", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "]", "\n", "max_degree", "=", "max", "(", "max_degree", ",", "degs", "[", "-", "1", "]", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "max_degree", "<", "1000", ":", "\n", "            ", "dataset", ".", "transform", "=", "T", ".", "OneHotDegree", "(", "max_degree", ")", "\n", "\n", "", "else", ":", "\n", "            ", "deg", "=", "torch", ".", "cat", "(", "degs", ",", "dim", "=", "0", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "mean", ",", "std", "=", "deg", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "deg", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "dataset", ".", "transform", "=", "NormalizedDegree", "(", "mean", ",", "std", ")", "\n", "\n", "", "", "elif", "normalize", ":", "\n", "\n", "        ", "dataset", ".", "data", ".", "x", "-=", "torch", ".", "mean", "(", "dataset", ".", "data", ".", "x", ",", "axis", "=", "0", ")", "\n", "dataset", ".", "data", ".", "x", "/=", "torch", ".", "std", "(", "dataset", ".", "data", ".", "x", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "not", "sparse", ":", "\n", "        ", "max_num_nodes", "=", "0", "\n", "for", "data", "in", "dataset", ":", "\n", "            ", "max_num_nodes", "=", "max", "(", "data", ".", "num_nodes", ",", "max_num_nodes", ")", "\n", "\n", "", "if", "dataset", ".", "transform", "is", "None", ":", "\n", "            ", "dataset", ".", "transform", "=", "T", ".", "ToDense", "(", "max_num_nodes", ")", "\n", "", "else", ":", "\n", "            ", "dataset", ".", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "dataset", ".", "transform", ",", "T", ".", "ToDense", "(", "max_num_nodes", ")", "]", ")", "\n", "\n", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.data.num_graphs": [[57, 62], ["data.x.size"], "function", ["None"], ["", "def", "num_graphs", "(", "data", ")", ":", "\n", "    ", "if", "data", ".", "batch", "is", "not", "None", ":", "\n", "        ", "return", "data", ".", "num_graphs", "\n", "", "else", ":", "\n", "        ", "return", "data", ".", "x", ".", "size", "(", "0", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_ZINC.load_data": [[8, 23], ["utils.molecule_utils.ZINC", "utils.molecule_utils.ZINC", "utils.molecule_utils.ZINC", "utils.molecule_utils.dataset_statistic_node", "utils.molecule_utils.dataset_statistic_edge"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.dataset_statistic_node", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.dataset_statistic_edge"], ["def", "load_data", "(", "args", ")", ":", "\n", "\n", "    ", "subset", "=", "True", "\n", "\n", "train_dataset", "=", "ZINC", "(", "\"./zinc\"", ",", "subset", "=", "subset", ",", "split", "=", "'train'", ",", "transform", "=", "to_one_hot", ")", "\n", "valid_dataset", "=", "ZINC", "(", "\"./zinc\"", ",", "subset", "=", "subset", ",", "split", "=", "'val'", ",", "transform", "=", "to_one_hot", ")", "\n", "test_dataset", "=", "ZINC", "(", "\"./zinc\"", ",", "subset", "=", "subset", ",", "split", "=", "\"test\"", ",", "transform", "=", "to_one_hot", ")", "\n", "\n", "args", ".", "num_node_features", "=", "28", "\n", "args", ".", "num_edge_features", "=", "5", "\n", "args", ".", "num_classes", "=", "5", "\n", "args", ".", "avg_num_nodes", "=", "dataset_statistic_node", "(", "train_dataset", ")", "\n", "args", ".", "avg_num_edges", "=", "dataset_statistic_edge", "(", "train_dataset", ")", "\n", "\n", "return", "train_dataset", ",", "valid_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_ZINC.load_dataloader": [[25, 34], ["loader_ZINC.load_data", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_data"], ["", "def", "load_dataloader", "(", "args", ")", ":", "\n", "\n", "    ", "train_dataset", ",", "val_dataset", ",", "test_dataset", "=", "load_data", "(", "args", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_ZINC.load_model": [[36, 45], ["models.models.Model_HyperCluster", "ValueError"], "function", ["None"], ["", "def", "load_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "model", "==", "'HyperCluster'", ":", "\n", "        ", "model", "=", "Model_HyperCluster", "(", "args", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Model Name <{}> is Unknown\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.ZINC.__init__": [[120, 127], ["torch_geometric.data.InMemoryDataset.__init__", "os.join", "os.join", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "subset", "=", "False", ",", "split", "=", "'train'", ",", "transform", "=", "None", ",", "\n", "pre_transform", "=", "None", ",", "pre_filter", "=", "None", ")", ":", "\n", "        ", "self", ".", "subset", "=", "subset", "\n", "assert", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "super", "(", "ZINC", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ",", "pre_filter", ")", "\n", "path", "=", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "f'{split}.pt'", ")", "\n", "self", ".", "data", ",", "self", ".", "slices", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.ZINC.raw_file_names": [[128, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "'train.pickle'", ",", "'val.pickle'", ",", "'test.pickle'", ",", "'train.index'", ",", "\n", "'val.index'", ",", "'test.index'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.ZINC.processed_dir": [[135, 139], ["os.join", "os.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_dir", "(", "self", ")", ":", "\n", "        ", "name", "=", "'subset'", "if", "self", ".", "subset", "else", "'full'", "\n", "return", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ",", "'processed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.ZINC.processed_file_names": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'train.pt'", ",", "'val.pt'", ",", "'test.pt'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.ZINC.download": [[144, 153], ["shutil.rmtree", "torch_geometric.data.download_url", "torch_geometric.data.extract_zip", "os.rename", "os.rename", "os.rename", "os.rename", "os.unlink", "os.unlink", "os.unlink", "os.unlink", "os.join", "os.join", "torch_geometric.data.download_url", "molecule_utils.ZINC.split_url.format"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "self", ".", "raw_dir", ")", "\n", "path", "=", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ")", "\n", "extract_zip", "(", "path", ",", "self", ".", "root", ")", "\n", "os", ".", "rename", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "'molecules'", ")", ",", "self", ".", "raw_dir", ")", "\n", "os", ".", "unlink", "(", "path", ")", "\n", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "download_url", "(", "self", ".", "split_url", ".", "format", "(", "split", ")", ",", "self", ".", "raw_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.ZINC.process": [[154, 195], ["range", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.close", "torch.save", "torch.save", "torch.save", "torch.save", "open", "pickle.load", "len", "mol[].to().view", "mol[].to", "adj.nonzero().t().contiguous", "adj[].to", "torch_geometric.data.Data", "data_list.append", "tqdm.tqdm.tqdm.update", "molecule_utils.ZINC.collate", "os.join", "os.join", "os.join", "os.join", "open", "len", "molecule_utils.ZINC.pre_transform", "os.join", "os.join", "int", "mol[].to", "adj.nonzero().t", "molecule_utils.ZINC.pre_filter", "[].split", "adj.nonzero", "f.read"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GCNConv_OGB.update"], ["", "", "def", "process", "(", "self", ")", ":", "\n", "        ", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f'{split}.pickle'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "mols", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "indices", "=", "range", "(", "len", "(", "mols", ")", ")", "\n", "\n", "if", "self", ".", "subset", ":", "\n", "                ", "with", "open", "(", "osp", ".", "join", "(", "self", ".", "raw_dir", ",", "f'{split}.index'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "indices", "=", "[", "int", "(", "x", ")", "for", "x", "in", "f", ".", "read", "(", ")", "[", ":", "-", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "\n", "", "", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "indices", ")", ")", "\n", "pbar", ".", "set_description", "(", "f'Processing {split} dataset'", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "mol", "=", "mols", "[", "idx", "]", "\n", "\n", "x", "=", "mol", "[", "'atom_type'", "]", ".", "to", "(", "torch", ".", "long", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "y", "=", "mol", "[", "'logP_SA_cycle_normalized'", "]", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n", "adj", "=", "mol", "[", "'bond_type'", "]", "\n", "edge_index", "=", "adj", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", "\n", "edge_attr", "=", "adj", "[", "edge_index", "[", "0", "]", ",", "edge_index", "[", "1", "]", "]", ".", "to", "(", "torch", ".", "long", ")", "\n", "\n", "data", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_attr", ",", "\n", "y", "=", "y", ")", "\n", "\n", "if", "self", ".", "pre_filter", "is", "not", "None", "and", "not", "self", ".", "pre_filter", "(", "data", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "self", ".", "pre_transform", "is", "not", "None", ":", "\n", "                    ", "data", "=", "self", ".", "pre_transform", "(", "data", ")", "\n", "\n", "", "data_list", ".", "append", "(", "data", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "torch", ".", "save", "(", "self", ".", "collate", "(", "data_list", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "processed_dir", ",", "f'{split}.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.to_one_hot": [[17, 21], ["torch.one_hot().squeeze().to", "torch.one_hot().squeeze().to", "torch.one_hot().squeeze", "torch.one_hot().squeeze", "torch.one_hot", "torch.one_hot"], "function", ["None"], ["def", "to_one_hot", "(", "data", ")", ":", "\n", "    ", "data", ".", "x", "=", "F", ".", "one_hot", "(", "data", ".", "x", ",", "num_classes", "=", "28", ")", ".", "squeeze", "(", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "data", ".", "edge_attr", "=", "F", ".", "one_hot", "(", "data", ".", "edge_attr", ",", "num_classes", "=", "5", ")", ".", "squeeze", "(", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.dataset_statistic_node": [[22, 30], ["collections.Counter", "int", "collections.Counter.update", "numpy.ceil", "data.x.argmax().tolist", "len", "data.x.argmax"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GCNConv_OGB.update"], ["", "def", "dataset_statistic_node", "(", "dataset", ")", ":", "\n", "    ", "total_num_nodes", "=", "0", "\n", "molecule_counter", "=", "Counter", "(", ")", "\n", "for", "data", "in", "dataset", ":", "\n", "        ", "molecule_counter", ".", "update", "(", "data", ".", "x", ".", "argmax", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "total_num_nodes", "+=", "data", ".", "x", ".", "shape", "[", "0", "]", "\n", "", "avg_num_nodes", "=", "int", "(", "np", ".", "ceil", "(", "total_num_nodes", "/", "len", "(", "dataset", ")", ")", ")", "\n", "return", "avg_num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.dataset_statistic_edge": [[31, 39], ["collections.Counter", "int", "collections.Counter.update", "numpy.ceil", "data.edge_attr.argmax().tolist", "len", "data.edge_attr.argmax"], "function", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GCNConv_OGB.update"], ["", "def", "dataset_statistic_edge", "(", "dataset", ")", ":", "\n", "    ", "total_num_edges", "=", "0", "\n", "molecule_counter", "=", "Counter", "(", ")", "\n", "for", "data", "in", "dataset", ":", "\n", "        ", "molecule_counter", ".", "update", "(", "data", ".", "edge_attr", ".", "argmax", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "total_num_edges", "+=", "data", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "", "avg_num_edges", "=", "int", "(", "np", ".", "ceil", "(", "total_num_edges", "/", "len", "(", "dataset", ")", ")", ")", "\n", "return", "avg_num_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.mol_from_graphs": [[44, 83], ["rdkit.Chem.RWMol", "range", "adjacency_matrix.numpy.numpy", "enumerate", "mol.GetMol.GetMol", "len", "rdkit.Chem.Atom", "mol.GetMol.AddAtom", "enumerate", "rdkit.Chem.SanitizeMol", "mol.GetMol.AddBond", "int"], "function", ["None"], ["def", "mol_from_graphs", "(", "node_list", ",", "adjacency_matrix", ")", ":", "\n", "# Create empty but editable mol object", "\n", "    ", "mol", "=", "Chem", ".", "RWMol", "(", ")", "\n", "\n", "node_to_idx", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "node_list", ")", ")", ":", "\n", "        ", "atom_num", "=", "idx_to_atom", "[", "int", "(", "node_list", "[", "i", "]", ")", "]", "\n", "a", "=", "Chem", ".", "Atom", "(", "atom_num", ")", "\n", "mol_idx", "=", "mol", ".", "AddAtom", "(", "a", ")", "\n", "node_to_idx", "[", "i", "]", "=", "mol_idx", "\n", "\n", "", "adjacency_matrix", "=", "adjacency_matrix", ".", "numpy", "(", ")", "\n", "for", "ix", ",", "row", "in", "enumerate", "(", "adjacency_matrix", ")", ":", "\n", "        ", "for", "iy", ",", "bond", "in", "enumerate", "(", "row", ")", ":", "\n", "            ", "if", "iy", "<=", "ix", ":", "\n", "                ", "continue", "\n", "", "if", "bond", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "bond", "==", "1", ":", "\n", "                ", "bond_type", "=", "Chem", ".", "rdchem", ".", "BondType", ".", "SINGLE", "\n", "", "elif", "bond", "==", "2", ":", "\n", "                ", "bond_type", "=", "Chem", ".", "rdchem", ".", "BondType", ".", "DOUBLE", "\n", "", "elif", "bond", "==", "3", ":", "\n", "                ", "bond_type", "=", "Chem", ".", "rdchem", ".", "BondType", ".", "TRIPLE", "\n", "", "elif", "bond", "==", "4", ":", "\n", "                ", "bond_type", "=", "Chem", ".", "rdchem", ".", "BondType", ".", "AROMATIC", "\n", "\n", "", "mol", ".", "AddBond", "(", "node_to_idx", "[", "ix", "]", ",", "node_to_idx", "[", "iy", "]", ",", "bond_type", ")", "\n", "# Convert to Mol object", "\n", "", "", "mol", "=", "mol", ".", "GetMol", "(", ")", "\n", "# Sanitize the molecules", "\n", "try", ":", "\n", "        ", "Chem", ".", "SanitizeMol", "(", "mol", ")", "\n", "", "except", ":", "\n", "# print(node_list)", "\n", "# print(Chem.MolToSmiles(mol))", "\n", "        ", "return", "None", "\n", "\n", "", "return", "mol", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_data": [[8, 24], ["ogb.graphproppred.PygGraphPropPredDataset", "numpy.ceil", "numpy.ceil", "print", "numpy.mean", "numpy.mean"], "function", ["None"], ["def", "load_data", "(", "args", ")", ":", "\n", "\n", "    ", "dataset", "=", "PygGraphPropPredDataset", "(", "name", "=", "args", ".", "data", ")", "\n", "args", ".", "task_type", "=", "dataset", ".", "task_type", "\n", "\n", "args", ".", "num_node_features", "=", "dataset", ".", "data", ".", "num_node_features", "\n", "args", ".", "num_edge_features", "=", "dataset", ".", "data", ".", "num_edge_features", "\n", "\n", "args", ".", "num_classes", "=", "dataset", ".", "num_tasks", "\n", "args", ".", "avg_num_nodes", "=", "np", ".", "ceil", "(", "np", ".", "mean", "(", "[", "data", ".", "num_nodes", "for", "data", "in", "dataset", "]", ")", ")", "\n", "args", ".", "avg_num_edges", "=", "np", ".", "ceil", "(", "np", ".", "mean", "(", "[", "data", ".", "num_edges", "for", "data", "in", "dataset", "]", ")", ")", "\n", "\n", "print", "(", "'# %s: [Task]-%s [NODE FEATURES]-%d [EDGE FEATURES]-%d [NUM_CLASSES]-%d [AVG_NODES]-%d [AVG_EDGES]-%d'", "%", "\n", "(", "dataset", ",", "args", ".", "task_type", ",", "args", ".", "num_node_features", ",", "args", ".", "num_edge_features", ",", "args", ".", "num_classes", ",", "args", ".", "avg_num_nodes", ",", "args", ".", "avg_num_edges", ")", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_dataloader": [[26, 35], ["dataset.get_idx_split", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader"], "function", ["None"], ["", "def", "load_dataloader", "(", "args", ",", "dataset", ")", ":", "\n", "\n", "    ", "split_idx", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "[", "split_idx", "[", "\"train\"", "]", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "[", "split_idx", "[", "\"valid\"", "]", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "[", "split_idx", "[", "\"test\"", "]", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_model": [[37, 46], ["models.models.Model_HyperDrop_OGB", "ValueError"], "function", ["None"], ["", "def", "load_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "model", "==", "'HyperDrop'", ":", "\n", "        ", "model", "=", "Model_HyperDrop_OGB", "(", "args", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Model Name <{}> is Unknown\"", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_node.Trainer.__init__": [[14, 34], ["object.__init__", "utils.setting.set_seed", "utils.setting.set_experiment_name", "utils.setting.set_logger", "utils.setting.set_device", "utils.loader_node.load_data", "A.to", "features.to", "labels.to", "idx_train.to", "idx_val.to", "idx_test.to"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_seed", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_experiment_name", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_logger", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_device", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_data"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed, logger, and gpu device", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "logger", "=", "set_logger", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "\n", "A", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "self", ".", "args", ")", "\n", "self", ".", "dataset", "=", "{", "\n", "'A'", ":", "A", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'features'", ":", "features", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'labels'", ":", "labels", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'idx_train'", ":", "idx_train", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'idx_val'", ":", "idx_val", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'idx_test'", ":", "idx_test", ".", "to", "(", "self", ".", "device", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_node.Trainer.train": [[36, 105], ["utils.loader_node.load_model().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.perf_counter", "tqdm.tqdm.trange", "time.perf_counter", "max", "numpy.argmax", "classification_node.Trainer.logger.log", "pdb.set_trace", "classification_node.Trainer.model.parameters", "transformers.optimization.get_cosine_schedule_with_warmup", "classification_node.Trainer.model.train", "classification_node.Trainer.model", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "classification_node.Trainer.optimizer.step", "classification_node.Trainer.eval", "train_curve.append", "valid_curve.append", "test_curve.append", "classification_node.Trainer.logger.log", "numpy.array", "open", "f.write", "utils.loader_node.load_model", "classification_node.Trainer.model.parameters", "classification_node.Trainer.scheduler.step", "torch.save", "torch.save", "torch.save", "torch.save", "classification_node.Trainer.model.state_dict", "torch.nll_loss.item"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.train", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "            ", "self", ".", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "\n", "self", ".", "args", ".", "patience", ",", "\n", "self", ".", "args", ".", "num_epochs", ")", "\n", "\n", "\n", "", "best_acc", "=", "0.0", "\n", "train_curve", ",", "valid_curve", ",", "test_curve", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "patience", "=", "0", "\n", "\n", "t_start", "=", "time", ".", "perf_counter", "(", ")", "\n", "for", "epoch", "in", "trange", "(", "0", ",", "(", "self", ".", "args", ".", "num_epochs", ")", ",", "desc", "=", "'[Epoch]'", ",", "position", "=", "1", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "out", "=", "self", ".", "model", "(", "self", ".", "dataset", "[", "'features'", "]", ",", "self", ".", "dataset", "[", "'A'", "]", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "\n", "out", "[", "self", ".", "dataset", "[", "'idx_train'", "]", "]", ",", "\n", "self", ".", "dataset", "[", "'labels'", "]", "[", "self", ".", "dataset", "[", "'idx_train'", "]", "]", "\n", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "                ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "results", "=", "self", ".", "eval", "(", ")", "\n", "train_curve", ".", "append", "(", "results", "[", "'train_acc'", "]", ")", "\n", "valid_curve", ".", "append", "(", "results", "[", "'valid_acc'", "]", ")", "\n", "test_curve", ".", "append", "(", "results", "[", "'test_acc'", "]", ")", "\n", "\n", "self", ".", "logger", ".", "log", "(", "f\"[Val: Epoch {epoch:03d}] Loss: {loss.item():.4f} Train: {train_curve[-1]:.4f} \"", "\n", "f\"Valid: {valid_curve[-1]:.4f} Test: {test_curve[-1]:.4f}\"", ")", "\n", "\n", "if", "results", "[", "'valid_acc'", "]", ">=", "best_acc", ":", "\n", "                ", "best_acc", "=", "results", "[", "'valid_acc'", "]", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "f'./checkpoints/{self.log_folder_name}/experiment-{self.exp_name}_'", "\n", "f'seed-{self.seed}_best-model.pth'", ")", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                ", "patience", "+=", "1", "\n", "\n", "", "if", "patience", ">", "self", ".", "args", ".", "patience", ":", "break", "\n", "\n", "", "t_end", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "best_train", "=", "max", "(", "train_curve", ")", "\n", "best_val_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "valid_curve", ")", ")", "\n", "best_val", "=", "valid_curve", "[", "best_val_epoch", "]", "\n", "test_score", "=", "test_curve", "[", "best_val_epoch", "]", "\n", "\n", "self", ".", "logger", ".", "log", "(", "f\"Train: {best_train:4f} Valid: {best_val:4f} Test: {test_score:4f} \"", "\n", "f\"with Time: {t_end - t_start:2f}\"", ")", "\n", "\n", "result_file", "=", "f\"./results/{self.log_folder_name}/{self.exp_name}.txt\"", "\n", "with", "open", "(", "result_file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"SEED={self.seed}  Test Score:{test_score*100:.2f}\\n\"", ")", "\n", "\n", "", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_node.Trainer.eval": [[106, 119], ["classification_node.Trainer.model.eval", "classification_node.Trainer.model", "torch.nll_loss().item", "torch.nll_loss().item", "utils.node_utils.accuracy().item", "torch.nll_loss().item", "torch.nll_loss().item", "utils.node_utils.accuracy().item", "torch.nll_loss().item", "torch.nll_loss().item", "utils.node_utils.accuracy().item", "torch.nll_loss", "torch.nll_loss", "utils.node_utils.accuracy", "torch.nll_loss", "torch.nll_loss", "utils.node_utils.accuracy", "torch.nll_loss", "torch.nll_loss", "utils.node_utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.node_utils.accuracy", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.node_utils.accuracy", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.node_utils.accuracy"], ["", "def", "eval", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "out", "=", "self", ".", "model", "(", "self", ".", "dataset", "[", "'features'", "]", ",", "self", ".", "dataset", "[", "'A'", "]", ")", "\n", "\n", "return", "{", "\n", "'train_loss'", ":", "F", ".", "nll_loss", "(", "out", "[", "self", ".", "dataset", "[", "'idx_train'", "]", "]", ",", "self", ".", "dataset", "[", "'labels'", "]", "[", "self", ".", "dataset", "[", "'idx_train'", "]", "]", ")", ".", "item", "(", ")", ",", "\n", "'train_acc'", ":", "accuracy", "(", "out", "[", "self", ".", "dataset", "[", "'idx_train'", "]", "]", ",", "self", ".", "dataset", "[", "'labels'", "]", "[", "self", ".", "dataset", "[", "'idx_train'", "]", "]", ")", ".", "item", "(", ")", ",", "\n", "'valid_loss'", ":", "F", ".", "nll_loss", "(", "out", "[", "self", ".", "dataset", "[", "'idx_val'", "]", "]", ",", "self", ".", "dataset", "[", "'labels'", "]", "[", "self", ".", "dataset", "[", "'idx_val'", "]", "]", ")", ".", "item", "(", ")", ",", "\n", "'valid_acc'", ":", "accuracy", "(", "out", "[", "self", ".", "dataset", "[", "'idx_val'", "]", "]", ",", "self", ".", "dataset", "[", "'labels'", "]", "[", "self", ".", "dataset", "[", "'idx_val'", "]", "]", ")", ".", "item", "(", ")", ",", "\n", "'test_loss'", ":", "F", ".", "nll_loss", "(", "out", "[", "self", ".", "dataset", "[", "'idx_test'", "]", "]", ",", "self", ".", "dataset", "[", "'labels'", "]", "[", "self", ".", "dataset", "[", "'idx_test'", "]", "]", ")", ".", "item", "(", ")", ",", "\n", "'test_acc'", ":", "accuracy", "(", "out", "[", "self", ".", "dataset", "[", "'idx_test'", "]", "]", ",", "self", ".", "dataset", "[", "'labels'", "]", "[", "self", ".", "dataset", "[", "'idx_test'", "]", "]", ")", ".", "item", "(", ")", "\n", "}", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.reconstruction_ZINC.Trainer.__init__": [[16, 32], ["object.__init__", "utils.setting.set_seed", "utils.setting.set_experiment_name", "utils.setting.set_logger", "utils.setting.set_device", "os.path.join", "utils.loader_ZINC.load_dataloader"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_seed", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_experiment_name", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_logger", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_device", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_dataloader"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed, logger, gpu device and checkoint", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "logger", "=", "set_logger", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "self", ".", "ckpt", "=", "os", ".", "path", ".", "join", "(", "f'./checkpoints/{self.log_folder_name}'", ",", "\n", "f\"best_molecule_{self.seed}.pth\"", ")", "\n", "\n", "### Load dataloader", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", "=", "load_dataloader", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.reconstruction_ZINC.Trainer.train": [[34, 103], ["utils.loader_ZINC.load_model().to", "torch.optim.Adam", "torch.nn.CrossEntropyLoss", "time.perf_counter", "tqdm.tqdm.trange", "time.perf_counter", "utils.loader_ZINC.load_model", "reconstruction_ZINC.Trainer.model.load_state_dict", "reconstruction_ZINC.Trainer.model.to", "reconstruction_ZINC.Trainer.test", "reconstruction_ZINC.Trainer.logger.log", "reconstruction_ZINC.Trainer.logger.log", "reconstruction_ZINC.Trainer.model.parameters", "transformers.optimization.get_cosine_schedule_with_warmup", "reconstruction_ZINC.Trainer.model.train", "enumerate", "reconstruction_ZINC.Trainer.eval", "reconstruction_ZINC.Trainer.logger.log", "torch.load", "open", "f.write", "utils.loader_ZINC.load_model", "tqdm.tqdm.tqdm", "reconstruction_ZINC.Trainer.optimizer.zero_grad", "data.to.to.to", "reconstruction_ZINC.Trainer.model", "data.to.to.edge_attr.argmax", "reconstruction_ZINC.Trainer.criterion", "reconstruction_ZINC.Trainer.backward", "reconstruction_ZINC.Trainer.optimizer.step", "tqdm.tqdm.trange.set_description", "tqdm.tqdm.trange.refresh", "torch.save", "len", "len", "reconstruction_ZINC.Trainer.scheduler.step", "reconstruction_ZINC.Trainer.model.state_dict", "reconstruction_ZINC.Trainer.item"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_model", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.reconstruction_ZINC.Trainer.test", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.train", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "### Load model and optimizer", "\n", "        ", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "            ", "self", ".", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "\n", "self", ".", "args", ".", "patience", "*", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "self", ".", "args", ".", "num_epochs", "*", "len", "(", "self", ".", "train_loader", ")", ")", "\n", "\n", "### Train", "\n", "", "best_loss", "=", "1e+6", "\n", "patience", "=", "self", ".", "args", ".", "patience", "\n", "\n", "t_start", "=", "time", ".", "perf_counter", "(", ")", "\n", "epoch_iter", "=", "trange", "(", "0", ",", "self", ".", "args", ".", "num_epochs", ",", "desc", "=", "'[EPOCH]'", ",", "position", "=", "1", ")", "\n", "\n", "for", "epoch", "in", "epoch_iter", ":", "\n", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "tqdm", "(", "self", ".", "train_loader", ",", "desc", "=", "'[Train]'", ",", "position", "=", "0", ")", ")", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "target", "=", "data", ".", "edge_attr", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "out", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "desc", "=", "f\"[Train] Train Loss {loss.item():.4f}\"", "\n", "epoch_iter", ".", "set_description", "(", "desc", ")", "\n", "epoch_iter", ".", "refresh", "(", ")", "\n", "\n", "", "valid_acc", ",", "valid_loss", "=", "self", ".", "eval", "(", "self", ".", "val_loader", ")", "\n", "self", ".", "logger", ".", "log", "(", "f\"[Epoch {epoch}] Loss: {valid_loss:.4f}, Acc: {valid_acc:.4f}\"", ")", "\n", "\n", "if", "valid_loss", "<", "best_loss", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "self", ".", "ckpt", ")", "\n", "patience", "=", "self", ".", "args", ".", "patience", "\n", "best_loss", "=", "valid_loss", "\n", "", "else", ":", "\n", "                ", "patience", "-=", "1", "\n", "if", "patience", "==", "0", ":", "break", "\n", "\n", "", "", "t_end", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "### Load best model", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "ckpt", ")", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "### Compute exact match, validity, and test accuracy", "\n", "num_valid", ",", "num_invalid", ",", "exact_match", ",", "validity", ",", "test_acc", "=", "self", ".", "test", "(", "self", ".", "test_loader", ")", "\n", "\n", "### Report results", "\n", "self", ".", "logger", ".", "log", "(", "f\"GT Valid Molecules: {num_valid}, Invalid Molecules: {num_invalid}\"", ")", "\n", "self", ".", "logger", ".", "log", "(", "f\"EM: {exact_match:.4f}, Validity: {validity:.4f}, Acc: {test_acc:.4f} \"", "\n", "f\"with Time: {t_end - t_start:.2f}\"", ")", "\n", "\n", "result_file", "=", "f\"./results/{self.log_folder_name}/{self.exp_name}.txt\"", "\n", "with", "open", "(", "result_file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"{self.seed}: ExactMatch={exact_match:.4f}  Validity={validity:.4f}  \"", "\n", "f\"TestAcc={test_acc:.4f}\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.reconstruction_ZINC.Trainer.eval": [[107, 130], ["reconstruction_ZINC.Trainer.model.eval", "enumerate", "tqdm.tqdm.tqdm", "data.to.to.to", "reconstruction_ZINC.Trainer.model", "torch.softmax", "data.to.to.edge_attr.argmax", "reconstruction_ZINC.Trainer.criterion", "torch.softmax.argmax", "float", "float", "valid_loss.item", "len"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval"], ["", "", "def", "eval", "(", "self", ",", "loader", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "valid_loss", "=", "0", "\n", "valid_acc", "=", "0", "\n", "total_node_num", "=", "0", "\n", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "tqdm", "(", "loader", ",", "desc", "=", "'[Eval]'", ",", "position", "=", "0", ")", ")", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "pred_logit", "=", "torch", ".", "softmax", "(", "out", ",", "dim", "=", "-", "1", ")", "\n", "target", "=", "data", ".", "edge_attr", ".", "argmax", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "pred_logit", ",", "target", ")", "\n", "pred", "=", "pred_logit", ".", "argmax", "(", "-", "1", ")", "\n", "valid_loss", "+=", "loss", "\n", "valid_acc", "+=", "(", "pred", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total_node_num", "+=", "float", "(", "pred", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "valid_loss", "=", "valid_loss", "/", "float", "(", "len", "(", "loader", ")", ")", "\n", "valid_acc", "=", "valid_acc", "/", "total_node_num", "*", "100", "\n", "\n", "return", "valid_acc", ",", "valid_loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.reconstruction_ZINC.Trainer.test": [[133, 174], ["reconstruction_ZINC.Trainer.eval", "enumerate", "tqdm.tqdm.tqdm", "data.to.to.x.argmax", "utils.molecule_utils.mol_from_graphs", "rdkit.Chem.MolToSmiles", "data.to.to.to", "reconstruction_ZINC.Trainer.model", "torch.softmax().argmax", "[].to", "utils.molecule_utils.mol_from_graphs", "torch_geometric.utils.to_dense_adj", "rdkit.Chem.MolToSmiles", "float", "float", "torch.softmax", "data.to.to.edge_attr.argmax", "torch_geometric.utils.to_dense_adj"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.mol_from_graphs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.molecule_utils.mol_from_graphs"], ["", "def", "test", "(", "self", ",", "loader", ")", ":", "\n", "\n", "        ", "test_acc", ",", "_", "=", "self", ".", "eval", "(", "loader", ")", "\n", "\n", "exact_match", "=", "0", "\n", "validity", "=", "0", "\n", "num_valid", "=", "0", "\n", "num_invalid", "=", "0", "\n", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "tqdm", "(", "loader", ",", "desc", "=", "'[Test]'", ")", ")", ":", "\n", "            ", "nodes", "=", "data", ".", "x", ".", "argmax", "(", "-", "1", ")", "\n", "a", "=", "to_dense_adj", "(", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_attr", ".", "argmax", "(", "-", "1", ")", ")", "[", "0", "]", "\n", "mol", "=", "mol_from_graphs", "(", "nodes", ",", "a", ")", "\n", "\n", "if", "mol", "is", "None", ":", "\n", "                ", "num_invalid", "+=", "1", "\n", "continue", "\n", "", "else", ":", "num_valid", "+=", "1", "\n", "\n", "smiles", "=", "rdkit", ".", "Chem", ".", "MolToSmiles", "(", "mol", ")", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "pred", "=", "torch", ".", "softmax", "(", "out", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "a_pred", "=", "to_dense_adj", "(", "data", ".", "edge_index", ",", "edge_attr", "=", "pred", ")", "[", "0", "]", ".", "to", "(", "'cpu'", ")", "\n", "pred_mol", "=", "mol_from_graphs", "(", "nodes", ",", "a_pred", ")", "\n", "\n", "if", "pred_mol", "is", "not", "None", ":", "\n", "                ", "pred_smiles", "=", "rdkit", ".", "Chem", ".", "MolToSmiles", "(", "pred_mol", ")", "\n", "", "else", ":", "pred_smiles", "=", "''", "\n", "\n", "_exact_match", "=", "smiles", "==", "pred_smiles", "\n", "_validity", "=", "pred_smiles", "!=", "''", "\n", "\n", "exact_match", "+=", "_exact_match", "\n", "validity", "+=", "_validity", "\n", "\n", "", "exact_match", "=", "exact_match", "/", "float", "(", "num_valid", ")", "*", "100", "\n", "validity", "=", "validity", "/", "float", "(", "num_valid", ")", "*", "100", "\n", "\n", "return", "num_valid", ",", "num_invalid", ",", "exact_match", ",", "validity", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_OGB.Trainer.__init__": [[15, 30], ["object.__init__", "utils.setting.set_seed", "utils.setting.set_experiment_name", "utils.setting.set_logger", "utils.setting.set_device", "utils.loader_OGB.load_data", "ogb.graphproppred.Evaluator"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_seed", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_experiment_name", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_logger", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_device", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_data"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed, logger, and gpu device", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "logger", "=", "set_logger", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "\n", "### Load dataset and evaluator", "\n", "self", ".", "dataset", "=", "load_data", "(", "args", ")", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "args", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_OGB.Trainer.train": [[32, 123], ["utils.loader_OGB.load_dataloader", "utils.loader_OGB.load_model().to", "torch.optim.Adam", "torch.nn.BCEWithLogitsLoss", "torch.nn.MSELoss", "time.perf_counter", "tqdm.tqdm.trange", "time.perf_counter", "classification_OGB.Trainer.logger.log", "torch.save", "classification_OGB.Trainer.model.parameters", "transformers.optimization.get_cosine_schedule_with_warmup", "classification_OGB.Trainer.model.train", "enumerate", "train_curve.append", "valid_curve.append", "test_curve.append", "classification_OGB.Trainer.logger.log", "numpy.argmax", "max", "numpy.argmin", "min", "open", "f.write", "utils.loader_OGB.load_model", "tqdm.tqdm.tqdm", "classification_OGB.Trainer.optimizer.zero_grad", "data.to.to.to", "classification_OGB.Trainer.model", "classification_OGB.Trainer.backward", "torch.nn.utils.clip_grad_norm_", "classification_OGB.Trainer.optimizer.step", "len", "numpy.array", "numpy.array", "classification_OGB.Trainer.model.state_dict", "len", "len", "classification_OGB.Trainer.cls_criterion", "classification_OGB.Trainer.reg_criterion", "classification_OGB.Trainer.model.parameters", "classification_OGB.Trainer.item", "utils.data.num_graphs", "classification_OGB.Trainer.scheduler.step", "classification_OGB.Trainer.eval", "classification_OGB.Trainer.eval", "classification_OGB.Trainer.eval", "classification_OGB.Trainer.to", "data.to.to.y.to", "classification_OGB.Trainer.to", "data.to.to.y.to"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_dataloader", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.train", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_model", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.data.num_graphs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "train_loader", ",", "val_loader", ",", "test_loader", "=", "load_dataloader", "(", "self", ".", "args", ",", "self", ".", "dataset", ")", "\n", "\n", "### Load model and optimizer", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "\n", "self", ".", "cls_criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "reg_criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "            ", "self", ".", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "\n", "self", ".", "args", ".", "patience", "*", "len", "(", "train_loader", ")", ",", "\n", "self", ".", "args", ".", "num_epochs", "*", "len", "(", "train_loader", ")", ")", "\n", "\n", "### Train", "\n", "", "train_curve", "=", "[", "]", "\n", "valid_curve", "=", "[", "]", "\n", "test_curve", "=", "[", "]", "\n", "eval_metric", "=", "self", ".", "dataset", ".", "eval_metric", "\n", "\n", "t_start", "=", "time", ".", "perf_counter", "(", ")", "\n", "for", "epoch", "in", "trange", "(", "0", ",", "(", "self", ".", "args", ".", "num_epochs", ")", ",", "desc", "=", "'[Epoch]'", ",", "position", "=", "1", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ",", "desc", "=", "\"[Iteration]\"", ")", ")", ":", "\n", "\n", "                ", "if", "data", ".", "x", ".", "shape", "[", "0", "]", "==", "1", "or", "data", ".", "batch", "[", "-", "1", "]", "==", "0", ":", "pass", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "is_labeled", "=", "data", ".", "y", "==", "data", ".", "y", "\n", "if", "\"classification\"", "in", "self", ".", "args", ".", "task_type", ":", "\n", "                    ", "loss", "=", "self", ".", "cls_criterion", "(", "out", ".", "to", "(", "torch", ".", "float32", ")", "[", "is_labeled", "]", ",", "\n", "data", ".", "y", ".", "to", "(", "torch", ".", "float32", ")", "[", "is_labeled", "]", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "reg_criterion", "(", "out", ".", "to", "(", "torch", ".", "float32", ")", "[", "is_labeled", "]", ",", "\n", "data", ".", "y", ".", "to", "(", "torch", ".", "float32", ")", "[", "is_labeled", "]", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_norm", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "num_graphs", "(", "data", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "total_loss", "=", "total_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "train_curve", ".", "append", "(", "self", ".", "eval", "(", "train_loader", ")", "[", "eval_metric", "]", ")", "\n", "valid_curve", ".", "append", "(", "self", ".", "eval", "(", "val_loader", ")", "[", "eval_metric", "]", ")", "\n", "test_curve", ".", "append", "(", "self", ".", "eval", "(", "test_loader", ")", "[", "eval_metric", "]", ")", "\n", "\n", "self", ".", "logger", ".", "log", "(", "f\"[Val: Epoch {epoch:03d}] Loss: {total_loss:.4f} Train: {train_curve[-1]:.4f} \"", "\n", "f\"Valid: {valid_curve[-1]:.4f} Test: {test_curve[-1]:.4f}\"", ")", "\n", "\n", "", "t_end", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "### Report results for highest validation result", "\n", "if", "'classification'", "in", "self", ".", "dataset", ".", "task_type", ":", "\n", "            ", "best_val_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "valid_curve", ")", ")", "\n", "best_train", "=", "max", "(", "train_curve", ")", "\n", "", "else", ":", "\n", "            ", "best_val_epoch", "=", "np", ".", "argmin", "(", "np", ".", "array", "(", "valid_curve", ")", ")", "\n", "best_train", "=", "min", "(", "train_curve", ")", "\n", "\n", "", "best_val", "=", "valid_curve", "[", "best_val_epoch", "]", "\n", "test_score", "=", "test_curve", "[", "best_val_epoch", "]", "\n", "\n", "self", ".", "logger", ".", "log", "(", "f\"Train: {best_train:4f} Valid: {best_val:4f} Test: {test_score:4f} \"", "\n", "f\"with Time: {t_end - t_start:2f}\"", ")", "\n", "\n", "result_file", "=", "f\"./results/{self.log_folder_name}/{self.exp_name}.txt\"", "\n", "with", "open", "(", "result_file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"SEED={self.seed}   Test Score:{test_score*100:.2f}\\n\"", ")", "\n", "\n", "\n", "### Save trained model", "\n", "", "torch", ".", "save", "(", "{", "\n", "'model_state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'Val'", ":", "best_val", ",", "\n", "'Train'", ":", "train_curve", "[", "best_val_epoch", "]", ",", "\n", "'Test'", ":", "test_score", ",", "\n", "'BestTrain'", ":", "best_train", "\n", "}", ",", "'./checkpoints/{}/best-model_{}.pth'", ".", "format", "(", "self", ".", "log_folder_name", ",", "self", ".", "seed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_OGB.Trainer.eval": [[126, 150], ["classification_OGB.Trainer.model.eval", "enumerate", "torch.cat().numpy", "torch.cat().numpy", "classification_OGB.Trainer.evaluator.eval", "tqdm.tqdm.tqdm", "batch.to.to.to", "torch.cat().numpy.append", "torch.cat().numpy.append", "torch.no_grad", "classification_OGB.Trainer.model", "batch.to.to.y.view().detach().cpu", "classification_OGB.Trainer.detach().cpu", "torch.cat", "torch.cat", "batch.to.to.y.view().detach", "classification_OGB.Trainer.detach", "batch.to.to.y.view"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval"], ["", "def", "eval", "(", "self", ",", "loader", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "y_true", "=", "[", "]", "\n", "y_pred", "=", "[", "]", "\n", "\n", "for", "_", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "loader", ",", "desc", "=", "\"[Iteration]\"", ")", ")", ":", "\n", "            ", "batch", "=", "batch", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "batch", ".", "x", ".", "shape", "[", "0", "]", "==", "1", ":", "pass", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "self", ".", "model", "(", "batch", ")", "\n", "\n", "", "y_true", ".", "append", "(", "batch", ".", "y", ".", "view", "(", "pred", ".", "shape", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "y_pred", ".", "append", "(", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "y_true", "=", "torch", ".", "cat", "(", "y_true", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "torch", ".", "cat", "(", "y_pred", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "input_dict", "=", "{", "\"y_true\"", ":", "y_true", ",", "\"y_pred\"", ":", "y_pred", "}", "\n", "\n", "return", "self", ".", "evaluator", ".", "eval", "(", "input_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.__init__": [[15, 28], ["object.__init__", "utils.setting.set_seed", "utils.setting.set_experiment_name", "utils.setting.set_device", "utils.loader_TU.load_data"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_seed", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_experiment_name", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_device", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_data"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed and gpu device", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "\n", "### Load dataset ", "\n", "self", ".", "dataset", "=", "load_data", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.train": [[30, 152], ["tqdm.tqdm.tqdm", "range", "utils.setting.set_logger_fold", "utils.loader_TU.load_dataloader", "utils.loader_TU.load_model().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.perf_counter", "tqdm.tqdm.trange", "time.perf_counter", "torch.load", "torch.load", "torch.load", "torch.load", "classification_TU.Trainer.model.load_state_dict", "classification_TU.Trainer.eval", "utils.setting.set_logger_fold.log", "utils.setting.set_logger_fold.log", "overall_results[].append", "overall_results[].append", "range", "classification_TU.Trainer.model.parameters", "transformers.optimization.get_cosine_schedule_with_warmup", "classification_TU.Trainer.model.train", "enumerate", "classification_TU.Trainer.eval", "utils.setting.set_logger_fold.log", "utils.setting.set_logger_fold.log", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.refresh", "open", "f.write", "open", "f.write", "utils.loader_TU.load_model", "classification_TU.Trainer.optimizer.zero_grad", "data.to.to.to", "classification_TU.Trainer.model", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "classification_TU.Trainer.optimizer.step", "len", "torch.save", "torch.save", "torch.save", "torch.save", "len", "len", "classification_TU.Trainer.model.parameters", "torch.nll_loss.item", "utils.data.num_graphs", "classification_TU.Trainer.scheduler.step", "classification_TU.Trainer.model.state_dict", "numpy.array().mean", "numpy.array().std", "numpy.array().mean", "numpy.array().std", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.set_logger_fold", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_dataloader", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.train", "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.setting.Logger.log", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.loader_OGB.load_model", "home.repos.pwc.inspect_result.harryjo97_EHGNN.utils.data.num_graphs"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "### Train", "\n", "        ", "overall_results", "=", "{", "\n", "'val_acc'", ":", "[", "]", ",", "\n", "'test_acc'", ":", "[", "]", "\n", "}", "\n", "\n", "train_fold_iter", "=", "tqdm", "(", "range", "(", "1", ",", "11", ")", ",", "desc", "=", "'Training'", ")", "\n", "val_fold_iter", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "11", ")", "]", "\n", "\n", "for", "fold_number", "in", "train_fold_iter", ":", "\n", "\n", "### Set logger, loss and accuracy for each fold", "\n", "            ", "logger", "=", "set_logger_fold", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ",", "fold_number", ")", "\n", "\n", "patience", "=", "0", "\n", "best_loss_epoch", "=", "0", "\n", "best_acc_epoch", "=", "0", "\n", "best_loss", "=", "1e9", "\n", "best_loss_acc", "=", "-", "1e9", "\n", "best_acc", "=", "-", "1e9", "\n", "best_acc_loss", "=", "1e9", "\n", "\n", "val_fold_number", "=", "val_fold_iter", "[", "fold_number", "-", "2", "]", "\n", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "load_dataloader", "(", "self", ".", "args", ",", "self", ".", "dataset", ",", "\n", "fold_number", ",", "val_fold_number", ")", "\n", "\n", "# Load model and optimizer", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "                ", "self", ".", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "\n", "self", ".", "args", ".", "patience", "*", "len", "(", "train_loader", ")", ",", "\n", "self", ".", "args", ".", "num_epochs", "*", "len", "(", "train_loader", ")", ")", "\n", "\n", "\n", "", "t_start", "=", "time", ".", "perf_counter", "(", ")", "\n", "### K-Fold Training", "\n", "for", "epoch", "in", "trange", "(", "0", ",", "(", "self", ".", "args", ".", "num_epochs", ")", ",", "desc", "=", "'[Epoch]'", ",", "position", "=", "1", ")", ":", "\n", "\n", "                ", "self", ".", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "\n", "for", "_", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "                    ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "data", ".", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "grad_norm", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "num_graphs", "(", "data", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "                        ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "total_loss", "=", "total_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "### Validation", "\n", "val_acc", ",", "val_loss", "=", "self", ".", "eval", "(", "val_loader", ")", "\n", "\n", "if", "val_loss", "<", "best_loss", ":", "\n", "                    ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "f'./checkpoints/{self.log_folder_name}/experiment-{self.exp_name}_'", "\n", "f'fold-{fold_number}_seed-{self.seed}_best-model.pth'", ")", "\n", "\n", "best_loss_acc", "=", "val_acc", "\n", "best_loss", "=", "val_loss", "\n", "best_loss_epoch", "=", "epoch", "\n", "patience", "=", "0", "\n", "", "else", ":", "\n", "                    ", "patience", "+=", "1", "\n", "\n", "", "if", "val_acc", ">", "best_acc", ":", "\n", "                    ", "best_acc", "=", "val_acc", "\n", "best_acc_loss", "=", "val_loss", "\n", "best_acc_epoch", "=", "epoch", "\n", "\n", "### Validation log", "\n", "", "logger", ".", "log", "(", "f'[Val: Fold {fold_number}-Epoch {epoch}] TrL: {total_loss:.4f} '", "\n", "f'VaL: {val_loss:.4f} VaAcc: {val_acc:.4f}'", ")", "\n", "logger", ".", "log", "(", "f\"[Val: Fold {fold_number}-Epoch {epoch}] Loss: {best_loss:.4f} \"", "\n", "f\"Acc: {best_loss_acc:.4f} at Epoch: {best_loss_epoch} / \"", "\n", "f\"Loss: {best_acc_loss:.4f} Acc: {best_acc:.4f} at Epoch: {best_acc_epoch}\"", ")", "\n", "\n", "train_fold_iter", ".", "set_description", "(", "f'[Fold {fold_number}] TrL: {total_loss:.4f} '", "\n", "f'VaL: {val_loss:.4f} VaAcc: {val_acc:.4f}'", ")", "\n", "train_fold_iter", ".", "refresh", "(", ")", "\n", "if", "patience", ">", "self", ".", "args", ".", "patience", ":", "break", "\n", "\n", "", "t_end", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "### Test log", "\n", "checkpoint", "=", "torch", ".", "load", "(", "f'./checkpoints/{self.log_folder_name}/experiment-{self.exp_name}_'", "\n", "f'fold-{fold_number}_seed-{self.seed}_best-model.pth'", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "test_acc", ",", "test_loss", "=", "self", ".", "eval", "(", "test_loader", ")", "\n", "\n", "logger", ".", "log", "(", "f\"[Test: Fold {fold_number}] Loss: {best_loss:4f} Acc: {best_loss_acc:4f} \"", "\n", "f\"at Epoch: {best_loss_epoch} / (Acc) Loss: {best_acc_loss:4f} \"", "\n", "f\"Acc: {best_acc:4f} at Epoch: {best_acc_epoch}\"", ")", "\n", "logger", ".", "log", "(", "f\"[Test: Fold {fold_number}] Test Acc: {test_acc:4f} with Time: {t_end-t_start:.2f}\"", ")", "\n", "\n", "test_result_file", "=", "\"./results/{}/{}-results.txt\"", ".", "format", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ")", "\n", "with", "open", "(", "test_result_file", ",", "'a+'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "f\"[FOLD {fold_number}] {self.seed}: {best_loss:.4f} \"", "\n", "f\"{best_acc:.4f} {test_loss:.4f} {test_acc:.4f}\\n\"", ")", "\n", "\n", "### Report results", "\n", "", "overall_results", "[", "'val_acc'", "]", ".", "append", "(", "best_acc", ")", "\n", "overall_results", "[", "'test_acc'", "]", ".", "append", "(", "test_acc", ")", "\n", "\n", "final_result_file", "=", "f\"./results/{self.log_folder_name}/{self.exp_name}.txt\"", "\n", "with", "open", "(", "final_result_file", ",", "'a+'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "f\"{self.seed}: {np.array(overall_results['val_acc']).mean():.4f} \"", "\n", "f\"{np.array(overall_results['val_acc']).std():.4f} \"", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval": [[158, 175], ["classification_TU.Trainer.model.eval", "data.to.to.to", "pred.eq().sum().item", "torch.nll_loss().item", "torch.nll_loss().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "classification_TU.Trainer.model", "classification_TU.Trainer.max", "len", "len", "pred.eq().sum", "torch.nll_loss", "torch.nll_loss", "pred.eq"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.trainers.classification_TU.Trainer.eval"], ["", "", "", "def", "eval", "(", "self", ",", "loader", ")", ":", "\n", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "correct", "=", "0.", "\n", "loss", "=", "0.", "\n", "\n", "for", "data", "in", "loader", ":", "\n", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "", "pred", "=", "out", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "data", ".", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "loss", "+=", "F", ".", "nll_loss", "(", "out", ",", "data", ".", "y", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "correct", "/", "len", "(", "loader", ".", "dataset", ")", ",", "loss", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.__init__": [[17, 29], ["torch.Module.__init__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "GraphRepresentation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_node_features", "=", "args", ".", "num_node_features", "\n", "self", ".", "num_edge_features", "=", "args", ".", "num_edge_features", "\n", "self", ".", "nhid", "=", "args", ".", "num_hidden", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "edge_ratio", "=", "args", ".", "edge_ratio", "\n", "self", ".", "dropout_ratio", "=", "args", ".", "dropout", "\n", "self", ".", "enhid", "=", "args", ".", "num_edge_hidden", "if", "hasattr", "(", "args", ",", "'num_edge_hidden'", ")", "else", "self", ".", "nhid", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.DHT": [[31, 57], ["edge_index.size", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "torch.arange().repeat_interleave().view", "edge_index.T.reshape", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "hyperedge_index[].reshape", "hyperedge_index[].bincount", "hyperedge_index[].max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "DHT", "(", "self", ",", "edge_index", ",", "batch", ",", "add_loops", "=", "True", ")", ":", "\n", "\n", "        ", "num_edge", "=", "edge_index", ".", "size", "(", "1", ")", "\n", "device", "=", "edge_index", ".", "device", "\n", "\n", "### Transform edge list of the original graph to hyperedge list of the dual hypergraph", "\n", "edge_to_node_index", "=", "torch", ".", "arange", "(", "0", ",", "num_edge", ",", "1", ",", "device", "=", "device", ")", ".", "repeat_interleave", "(", "2", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "hyperedge_index", "=", "edge_index", ".", "T", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "hyperedge_index", "=", "torch", ".", "cat", "(", "[", "edge_to_node_index", ",", "hyperedge_index", "]", ",", "dim", "=", "0", ")", ".", "long", "(", ")", "\n", "\n", "### Transform batch of nodes to batch of edges", "\n", "edge_batch", "=", "hyperedge_index", "[", "1", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "[", ":", ",", "0", "]", "\n", "edge_batch", "=", "torch", ".", "index_select", "(", "batch", ",", "0", ",", "edge_batch", ")", "\n", "\n", "### Add self-loops to each node in the dual hypergraph", "\n", "if", "add_loops", ":", "\n", "            ", "bincount", "=", "hyperedge_index", "[", "1", "]", ".", "bincount", "(", ")", "\n", "mask", "=", "bincount", "[", "hyperedge_index", "[", "1", "]", "]", "!=", "1", "\n", "max_edge", "=", "hyperedge_index", "[", "1", "]", ".", "max", "(", ")", "\n", "loops", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "0", ",", "num_edge", ",", "1", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "-", "1", ")", ",", "\n", "torch", ".", "arange", "(", "max_edge", "+", "1", ",", "max_edge", "+", "num_edge", "+", "1", ",", "1", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "-", "1", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "hyperedge_index", "=", "torch", ".", "cat", "(", "[", "hyperedge_index", "[", ":", ",", "mask", "]", ",", "loops", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "hyperedge_index", ",", "edge_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.get_classifier": [[58, 71], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ",", "dim", "=", "1", ")", ":", "\n", "\n", "        ", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "nhid", "*", "dim", ",", "self", ".", "nhid", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_ratio", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "nhid", ",", "self", ".", "nhid", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_ratio", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "nhid", "//", "2", ",", "self", ".", "num_classes", ")", "\n", ")", "\n", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.get_scoreconvs": [[72, 82], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "models.layers.HypergraphConv", "torch.ModuleList.append"], "methods", ["None"], ["", "def", "get_scoreconvs", "(", "self", ")", ":", "\n", "\n", "        ", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_convs", "-", "1", ")", ":", "\n", "\n", "            ", "conv", "=", "HypergraphConv", "(", "self", ".", "enhid", ",", "1", ")", "\n", "convs", ".", "append", "(", "conv", ")", "\n", "\n", "", "return", "convs", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop.__init__": [[86, 96], ["models.GraphRepresentation.__init__", "models.Model_HyperDrop.get_convs", "models.Model_HyperDrop.get_scoreconvs", "models.Model_HyperDrop.get_classifier", "models.Model_HyperDrop.get_convs"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.get_scoreconvs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.get_classifier", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Model_HyperDrop", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "if", "self", ".", "args", ".", "data", "==", "'COLLAB'", ":", "\n", "            ", "self", ".", "enhid", "=", "self", ".", "nhid", "//", "8", "\n", "", "self", ".", "convs", "=", "self", ".", "get_convs", "(", ")", "\n", "self", ".", "hyperconvs", "=", "self", ".", "get_convs", "(", "conv_type", "=", "'Hyper'", ")", "[", ":", "-", "1", "]", "\n", "self", ".", "scoreconvs", "=", "self", ".", "get_scoreconvs", "(", ")", "\n", "self", ".", "classifier", "=", "self", ".", "get_classifier", "(", "dim", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop.forward": [[97, 134], ["range", "models.Model_HyperDrop.classifier", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "models.Model_HyperDrop.DHT", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch_geometric.nn.pool.topk_pool.topk", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "edge_index.size", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_add_pool"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.DHT"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "x", ",", "edge_index", ",", "edge_attr", ",", "batch", "=", "data", ".", "x", ",", "data", ".", "edge_index", ",", "data", ".", "edge_attr", ",", "data", ".", "batch", "\n", "\n", "### Edge feature initialization", "\n", "if", "edge_attr", "is", "None", ":", "\n", "            ", "edge_attr", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", "1", ")", ",", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "xs", "=", "0", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "hyperedge_index", ",", "edge_batch", "=", "self", ".", "DHT", "(", "edge_index", ",", "batch", ")", "\n", "\n", "if", "_", "==", "0", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs", "[", "_", "]", "(", "x", ",", "edge_index", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs", "[", "_", "]", "(", "x", ",", "edge_index", ",", "edge_weight", ")", ")", "\n", "\n", "", "if", "_", "<", "self", ".", "args", ".", "num_convs", "-", "1", ":", "\n", "\n", "                ", "edge_attr", "=", "F", ".", "relu", "(", "self", ".", "hyperconvs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ")", "\n", "\n", "score", "=", "torch", ".", "tanh", "(", "self", ".", "scoreconvs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ".", "squeeze", "(", ")", ")", "\n", "perm", "=", "topk", "(", "score", ",", "self", ".", "edge_ratio", ",", "edge_batch", ")", "\n", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "perm", "]", "\n", "edge_attr", "=", "edge_attr", "[", "perm", ",", ":", "]", "\n", "edge_weight", "=", "score", "[", "perm", "]", "\n", "edge_weight", "=", "torch", ".", "clamp", "(", "edge_weight", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "", "xs", "+=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", ",", "gsp", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "classifier", "(", "xs", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop.get_convs": [[135, 161], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.append", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "ValueError", "models.layers.HypergraphConv", "models.layers.HypergraphConv"], "methods", ["None"], ["", "def", "get_convs", "(", "self", ",", "conv_type", "=", "'GCN'", ")", ":", "\n", "\n", "        ", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "if", "conv_type", "==", "'GCN'", ":", "\n", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "conv", "=", "GCNConv", "(", "self", ".", "num_node_features", ",", "self", ".", "nhid", ")", "\n", "", "else", ":", "\n", "                    ", "conv", "=", "GCNConv", "(", "self", ".", "nhid", ",", "self", ".", "nhid", ")", "\n", "\n", "", "", "elif", "conv_type", "==", "'Hyper'", ":", "\n", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "conv", "=", "HypergraphConv", "(", "self", ".", "num_edge_features", ",", "self", ".", "enhid", ")", "\n", "", "else", ":", "\n", "                    ", "conv", "=", "HypergraphConv", "(", "self", ".", "enhid", ",", "self", ".", "enhid", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Conv Name <{}> is Unknown\"", ".", "format", "(", "conv_type", ")", ")", "\n", "\n", "", "convs", ".", "append", "(", "conv", ")", "\n", "\n", "", "return", "convs", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop_OGB.__init__": [[166, 176], ["models.GraphRepresentation.__init__", "ogb.graphproppred.mol_encoder.AtomEncoder", "ogb.graphproppred.mol_encoder.BondEncoder", "models.Model_HyperDrop_OGB.get_convs", "models.Model_HyperDrop_OGB.get_scoreconvs", "models.Model_HyperDrop_OGB.get_classifier", "models.Model_HyperDrop_OGB.get_convs"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.get_scoreconvs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.get_classifier", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Model_HyperDrop_OGB", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "self", ".", "atom_encoder", "=", "AtomEncoder", "(", "self", ".", "nhid", ")", "\n", "self", ".", "bond_encoder", "=", "BondEncoder", "(", "self", ".", "nhid", ")", "\n", "self", ".", "convs", "=", "self", ".", "get_convs", "(", ")", "\n", "self", ".", "hyperconvs", "=", "self", ".", "get_convs", "(", "conv_type", "=", "'Hyper'", ")", "[", ":", "-", "1", "]", "\n", "self", ".", "scoreconvs", "=", "self", ".", "get_scoreconvs", "(", ")", "\n", "self", ".", "classifier", "=", "self", ".", "get_classifier", "(", "dim", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop_OGB.forward": [[177, 213], ["models.Model_HyperDrop_OGB.atom_encoder", "models.Model_HyperDrop_OGB.bond_encoder", "range", "models.Model_HyperDrop_OGB.classifier", "models.Model_HyperDrop_OGB.DHT", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch_geometric.nn.pool.topk_pool.topk", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_add_pool"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.DHT"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "x", ",", "edge_index", ",", "edge_attr", ",", "batch", "=", "data", ".", "x", ",", "data", ".", "edge_index", ",", "data", ".", "edge_attr", ",", "data", ".", "batch", "\n", "\n", "x", "=", "self", ".", "atom_encoder", "(", "x", ")", "\n", "edge_attr", "=", "self", ".", "bond_encoder", "(", "edge_attr", ")", "\n", "\n", "xs", "=", "0", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "hyperedge_index", ",", "edge_batch", "=", "self", ".", "DHT", "(", "edge_index", ",", "batch", ")", "\n", "\n", "if", "_", "==", "0", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs", "[", "_", "]", "(", "x", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "self", ".", "convs", "[", "_", "]", "(", "x", ",", "edge_index", ",", "edge_attr", ",", "edge_weight", ")", ")", "\n", "\n", "", "if", "_", "<", "self", ".", "args", ".", "num_convs", "-", "1", ":", "\n", "\n", "                ", "edge_attr", "=", "F", ".", "relu", "(", "self", ".", "hyperconvs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ")", "\n", "\n", "score", "=", "torch", ".", "tanh", "(", "self", ".", "scoreconvs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ".", "squeeze", "(", ")", ")", "\n", "perm", "=", "topk", "(", "score", ",", "self", ".", "edge_ratio", ",", "edge_batch", ")", "\n", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "perm", "]", "\n", "edge_attr", "=", "edge_attr", "[", "perm", ",", ":", "]", "\n", "edge_weight", "=", "score", "[", "perm", "]", "\n", "edge_weight", "=", "torch", ".", "clamp", "(", "edge_weight", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "", "xs", "+=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", ",", "gsp", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "classifier", "(", "xs", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop_OGB.get_convs": [[214, 234], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.append", "models.layers.GCNConv_OGB", "models.layers.HypergraphConv", "ValueError"], "methods", ["None"], ["", "def", "get_convs", "(", "self", ",", "conv_type", "=", "'GCN_OGB'", ")", ":", "\n", "\n", "        ", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "if", "conv_type", "==", "'GCN_OGB'", ":", "\n", "\n", "                ", "conv", "=", "GCNConv_OGB", "(", "self", ".", "nhid", ")", "\n", "\n", "", "elif", "conv_type", "==", "'Hyper'", ":", "\n", "\n", "                ", "conv", "=", "HypergraphConv", "(", "self", ".", "enhid", ",", "self", ".", "enhid", ")", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Conv Name <{}> is Unknown\"", ".", "format", "(", "conv_type", ")", ")", "\n", "\n", "", "convs", ".", "append", "(", "conv", ")", "\n", "\n", "", "return", "convs", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop_Node.__init__": [[238, 245], ["models.Model_HyperDrop.__init__", "models.Model_HyperDrop_Node.get_convs", "models.Model_HyperDrop_Node.get_scoreconvs", "models.Model_HyperDrop_Node.get_convs"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.get_scoreconvs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Model_HyperDrop", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "self", ".", "convs", "=", "self", ".", "get_convs", "(", ")", "\n", "self", ".", "hyperconvs", "=", "self", ".", "get_convs", "(", "conv_type", "=", "'Hyper'", ")", "[", ":", "-", "1", "]", "\n", "self", ".", "scoreconvs", "=", "self", ".", "get_scoreconvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop_Node.forward": [[246, 289], ["adj._indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "adj._indices.size", "models.Model_HyperDrop_Node.DHT", "torch.dropout", "torch.dropout", "torch.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch_geometric.nn.pool.topk_pool.topk", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch_geometric.nn.conv.gcn_conv.gcn_norm", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch_geometric.nn.conv.gcn_conv.gcn_norm", "torch.relu.size", "torch.relu.size"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.DHT"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "\n", "        ", "edge_index", "=", "adj", ".", "_indices", "(", ")", "\n", "edge_weight", "=", "None", "\n", "\n", "batch", "=", "torch", ".", "zeros", "(", "edge_index", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "hyperedge_index", ",", "edge_batch", "=", "self", ".", "DHT", "(", "edge_index", ",", "batch", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout_ratio", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "convs", "[", "_", "]", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "if", "_", "<", "self", ".", "args", ".", "num_convs", "-", "1", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "if", "_", "==", "0", ":", "\n", "                ", "edge_attr", "=", "torch", ".", "cat", "(", "(", "x", "[", "edge_index", "[", "0", ",", ":", "]", "]", ",", "x", "[", "edge_index", "[", "1", ",", ":", "]", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "_", "<", "self", ".", "args", ".", "num_convs", "-", "1", ":", "\n", "\n", "                ", "edge_attr", "=", "F", ".", "relu", "(", "self", ".", "hyperconvs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ")", "\n", "edge_attr", "=", "F", ".", "dropout", "(", "edge_attr", ",", "self", ".", "dropout_ratio", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "if", "(", "_", "%", "4", "!=", "1", ")", ":", "continue", "\n", "\n", "score", "=", "torch", ".", "tanh", "(", "self", ".", "scoreconvs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ".", "squeeze", "(", ")", ")", "\n", "perm", "=", "topk", "(", "score", ",", "self", ".", "edge_ratio", ",", "edge_batch", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "edge_index", "=", "edge_index", "[", ":", ",", "perm", "]", "\n", "edge_attr", "=", "edge_attr", "[", "perm", ",", ":", "]", "\n", "edge_weight", "=", "score", "[", "perm", "]", "\n", "edge_weight", "=", "torch", ".", "clamp", "(", "edge_weight", ",", "min", "=", "0.0001", ",", "max", "=", "1", ")", "\n", "edge_index", ",", "edge_weight", "=", "gcn_norm", "(", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", ")", "[", "0", "]", ",", "False", ",", "False", ")", "\n", "", "else", ":", "\n", "                    ", "edge_weight", "=", "score", "\n", "edge_weight", "=", "torch", ".", "clamp", "(", "edge_weight", ",", "min", "=", "0.0001", ",", "max", "=", "1", ")", "\n", "edge_index", ",", "edge_weight", "=", "gcn_norm", "(", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", ")", "[", "0", "]", ",", "False", ",", "False", ")", "\n", "\n", "", "", "", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperDrop_Node.get_convs": [[290, 318], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.append", "torch_geometric.nn.GCNConv", "ValueError", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "models.layers.HypergraphConv", "models.layers.HypergraphConv"], "methods", ["None"], ["", "def", "get_convs", "(", "self", ",", "conv_type", "=", "'GCN'", ")", ":", "\n", "\n", "        ", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "if", "conv_type", "==", "'GCN'", ":", "\n", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "conv", "=", "GCNConv", "(", "self", ".", "num_node_features", ",", "self", ".", "nhid", ",", "normalize", "=", "False", ")", "\n", "", "elif", "i", "==", "self", ".", "args", ".", "num_convs", "-", "1", ":", "\n", "                    ", "conv", "=", "GCNConv", "(", "self", ".", "nhid", ",", "self", ".", "num_classes", ",", "normalize", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "conv", "=", "GCNConv", "(", "self", ".", "nhid", ",", "self", ".", "nhid", ",", "normalize", "=", "False", ")", "\n", "\n", "", "", "elif", "conv_type", "==", "'Hyper'", ":", "\n", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "conv", "=", "HypergraphConv", "(", "self", ".", "num_edge_features", ",", "self", ".", "enhid", ")", "\n", "", "else", ":", "\n", "                    ", "conv", "=", "HypergraphConv", "(", "self", ".", "enhid", ",", "self", ".", "enhid", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Conv Name <{}> is Unknown\"", ".", "format", "(", "conv_type", ")", ")", "\n", "\n", "", "convs", ".", "append", "(", "conv", ")", "\n", "\n", "", "return", "convs", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.__init__": [[322, 336], ["models.GraphRepresentation.__init__", "math.ceil", "models.Model_HyperCluster.get_convs", "models.Model_HyperCluster.get_unconvs", "models.layers.HypergraphConv", "models.layers.GMPool"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_unconvs"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Model_HyperCluster", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n", "self", ".", "pooling_ratio", "=", "self", ".", "args", ".", "edge_ratio", "\n", "self", ".", "num_seeds_edge", "=", "ceil", "(", "self", ".", "pooling_ratio", "*", "self", ".", "args", ".", "avg_num_edges", ")", "\n", "self", ".", "ln", "=", "self", ".", "args", ".", "ln", "\n", "self", ".", "num_heads", "=", "self", ".", "args", ".", "num_heads", "\n", "self", ".", "cluster", "=", "self", ".", "args", ".", "cluster", "\n", "self", ".", "convs", "=", "self", ".", "get_convs", "(", ")", "\n", "self", ".", "unconvs", "=", "self", ".", "get_unconvs", "(", ")", "\n", "self", ".", "last", "=", "HypergraphConv", "(", "self", ".", "nhid", ",", "self", ".", "num_edge_features", ")", "\n", "self", ".", "pool", "=", "GMPool", "(", "self", ".", "nhid", ",", "self", ".", "num_heads", ",", "self", ".", "num_seeds_edge", ",", "\n", "ln", "=", "self", ".", "ln", ",", "cluster", "=", "self", ".", "cluster", ",", "mab_conv", "=", "'Hyper'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.forward": [[337, 367], ["models.Model_HyperCluster.DHT", "range", "torch_geometric.utils.to_dense_batch", "mask.unsqueeze", "extended_attention_mask.to.to.to", "models.Model_HyperCluster.pool", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "range", "models.Model_HyperCluster.last", "torch.relu", "torch.relu", "torch.relu", "attn.transpose", "torch.relu", "torch.relu", "torch.relu", "next", "models.Model_HyperCluster.parameters"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.GraphRepresentation.DHT"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "x", ",", "edge_index", ",", "edge_attr", ",", "batch", "=", "data", ".", "x", ",", "data", ".", "edge_index", ",", "data", ".", "edge_attr", ",", "data", ".", "batch", "\n", "hyperedge_index", ",", "edge_batch", "=", "self", ".", "DHT", "(", "edge_index", ",", "batch", ")", "\n", "\n", "# Message Passing", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "            ", "edge_attr", "=", "F", ".", "relu", "(", "self", ".", "convs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ")", "\n", "\n", "# Pool", "\n", "", "batch_edge_attr", ",", "mask", "=", "to_dense_batch", "(", "edge_attr", ",", "edge_batch", ")", "\n", "\n", "extended_attention_mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "1e9", "\n", "\n", "batch_edge_attr", ",", "attn", "=", "self", ".", "pool", "(", "batch_edge_attr", ",", "attention_mask", "=", "extended_attention_mask", ",", "\n", "graph", "=", "(", "edge_attr", ",", "hyperedge_index", ",", "edge_batch", ")", ",", "return_attn", "=", "True", ")", "\n", "\n", "# Unpool ", "\n", "edge_attr", "=", "torch", ".", "bmm", "(", "attn", ".", "transpose", "(", "1", ",", "2", ")", ",", "batch_edge_attr", ")", "\n", "edge_attr", "=", "edge_attr", "[", "mask", "]", "\n", "\n", "# Message Passing", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "            ", "edge_attr", "=", "F", ".", "relu", "(", "self", ".", "unconvs", "[", "_", "]", "(", "edge_attr", ",", "hyperedge_index", ")", ")", "\n", "\n", "", "edge_attr", "=", "self", ".", "last", "(", "edge_attr", ",", "hyperedge_index", ")", "\n", "\n", "return", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_convs": [[368, 382], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.append", "models.layers.HypergraphConv", "models.layers.HypergraphConv"], "methods", ["None"], ["", "def", "get_convs", "(", "self", ")", ":", "\n", "\n", "        ", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "conv", "=", "HypergraphConv", "(", "self", ".", "num_edge_features", ",", "self", ".", "nhid", ")", "\n", "", "else", ":", "\n", "                ", "conv", "=", "HypergraphConv", "(", "self", ".", "nhid", ",", "self", ".", "nhid", ")", "\n", "\n", "", "convs", ".", "append", "(", "conv", ")", "\n", "\n", "", "return", "convs", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.models.Model_HyperCluster.get_unconvs": [[383, 394], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "models.layers.HypergraphConv", "torch.ModuleList.append"], "methods", ["None"], ["", "def", "get_unconvs", "(", "self", ")", ":", "\n", "\n", "        ", "unconvs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_convs", ")", ":", "\n", "\n", "            ", "conv", "=", "HypergraphConv", "(", "self", ".", "nhid", ",", "self", ".", "nhid", ")", "\n", "\n", "unconvs", ".", "append", "(", "conv", ")", "\n", "\n", "", "return", "unconvs", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.HypergraphConv.__init__": [[15, 46], ["kwargs.setdefault", "torch_geometric.nn.conv.MessagePassing.__init__", "layers.HypergraphConv.reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "layers.HypergraphConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.HypergraphConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_attention", "=", "False", ",", "heads", "=", "1", ",", "\n", "concat", "=", "True", ",", "negative_slope", "=", "0.2", ",", "dropout", "=", "0", ",", "bias", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'aggr'", ",", "'add'", ")", "\n", "super", "(", "HypergraphConv", ",", "self", ")", ".", "__init__", "(", "node_dim", "=", "0", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "use_attention", "=", "use_attention", "\n", "\n", "if", "self", ".", "use_attention", ":", "\n", "            ", "self", ".", "heads", "=", "heads", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "weight", "=", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "in_channels", ",", "heads", "*", "out_channels", ")", ")", "\n", "self", ".", "att", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "heads", ",", "2", "*", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "heads", "=", "1", "\n", "self", ".", "concat", "=", "True", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "", "if", "bias", "and", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "heads", "*", "out_channels", ")", ")", "\n", "", "elif", "bias", "and", "not", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.HypergraphConv.reset_parameters": [[47, 52], ["torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.glorot"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "use_attention", ":", "\n", "            ", "glorot", "(", "self", ".", "att", ")", "\n", "", "zeros", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.HypergraphConv.message": [[53, 59], ["norm[].view", "x_j.view", "alpha.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "edge_index_i", ",", "norm", ",", "alpha", ")", ":", "\n", "        ", "out", "=", "norm", "[", "edge_index_i", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "x_j", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "\n", "if", "alpha", "is", "not", "None", ":", "\n", "            ", "out", "=", "alpha", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "1", ")", "*", "out", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.HypergraphConv.forward": [[60, 110], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "x.view.view.size", "torch.nn.functional.pad", "torch.nn.functional.pad", "layers.HypergraphConv.propagate", "layers.HypergraphConv.propagate", "x.view.view.view", "torch.nn.functional.leaky_relu", "torch.nn.functional.leaky_relu", "torch_geometric.utils.softmax", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch_geometric.utils.degree", "torch_scatter.scatter_add", "hyperedge_index.numel", "torch_geometric.utils.degree", "max", "out.mean.mean.view", "out.mean.mean.mean", "x.view.view.size", "hyperedge_index[].max().item", "x.view.view.size", "x.view.view.size", "float", "float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hyperedge_index[].max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hyperedge_index", ",", "hyperedge_weight", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "alpha", "=", "None", "\n", "\n", "if", "self", ".", "use_attention", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "x_i", ",", "x_j", "=", "x", "[", "hyperedge_index", "[", "0", "]", "]", ",", "x", "[", "hyperedge_index", "[", "1", "]", "]", "\n", "alpha", "=", "(", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", "]", ",", "dim", "=", "-", "1", ")", "*", "self", ".", "att", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "hyperedge_index", "[", "0", "]", ",", "num_nodes", "=", "x", ".", "size", "(", "0", ")", ")", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "if", "hyperedge_weight", "is", "None", ":", "\n", "            ", "D", "=", "degree", "(", "hyperedge_index", "[", "0", "]", ",", "x", ".", "size", "(", "0", ")", ",", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "D", "=", "scatter_add", "(", "hyperedge_weight", "[", "hyperedge_index", "[", "1", "]", "]", ",", "\n", "hyperedge_index", "[", "0", "]", ",", "dim", "=", "0", ",", "dim_size", "=", "x", ".", "size", "(", "0", ")", ")", "\n", "", "D", "=", "1.0", "/", "D", "\n", "D", "[", "D", "==", "float", "(", "\"inf\"", ")", "]", "=", "0", "\n", "\n", "if", "hyperedge_index", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "num_edges", "=", "0", "\n", "", "else", ":", "\n", "            ", "num_edges", "=", "hyperedge_index", "[", "1", "]", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "", "B", "=", "1.0", "/", "degree", "(", "hyperedge_index", "[", "1", "]", ",", "num_edges", ",", "x", ".", "dtype", ")", "\n", "B", "[", "B", "==", "float", "(", "\"inf\"", ")", "]", "=", "0", "\n", "if", "hyperedge_weight", "is", "not", "None", ":", "\n", "            ", "B", "=", "B", "*", "hyperedge_weight", "\n", "\n", "", "num_nodes", "=", "x", ".", "size", "(", "0", ")", "\n", "dif", "=", "max", "(", "[", "num_nodes", ",", "num_edges", "]", ")", "-", "num_nodes", "# get size of padding", "\n", "x_help", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "dif", ")", ")", "# create dif many nodes", "\n", "\n", "self", ".", "flow", "=", "'source_to_target'", "\n", "out", "=", "self", ".", "propagate", "(", "hyperedge_index", ",", "x", "=", "x_help", ",", "norm", "=", "B", ",", "alpha", "=", "alpha", ")", "\n", "self", ".", "flow", "=", "'target_to_source'", "\n", "out", "=", "self", ".", "propagate", "(", "hyperedge_index", ",", "x", "=", "out", ",", "norm", "=", "D", ",", "alpha", "=", "alpha", ")", "\n", "\n", "out", "=", "out", "[", ":", "num_nodes", "]", "# prune back to original x.size()", "\n", "\n", "if", "self", ".", "concat", "is", "True", ":", "\n", "            ", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.HypergraphConv.__repr__": [[111, 114], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, {})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.MAB.__init__": [[118, 133], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "layers.MAB.get_fc_kv", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__", "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.MAB.get_fc_kv"], ["    ", "def", "__init__", "(", "self", ",", "dim_Q", ",", "dim_K", ",", "dim_V", ",", "num_heads", ",", "ln", "=", "False", ",", "cluster", "=", "False", ",", "conv", "=", "None", ")", ":", "\n", "        ", "super", "(", "MAB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_V", "=", "dim_V", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "fc_q", "=", "nn", ".", "Linear", "(", "dim_Q", ",", "dim_V", ")", "\n", "self", ".", "fc_k", ",", "self", ".", "fc_v", "=", "self", ".", "get_fc_kv", "(", "dim_K", ",", "dim_V", ",", "conv", ")", "\n", "\n", "if", "ln", ":", "\n", "            ", "self", ".", "ln0", "=", "nn", ".", "LayerNorm", "(", "dim_V", ")", "\n", "self", ".", "ln1", "=", "nn", ".", "LayerNorm", "(", "dim_V", ")", "\n", "", "self", ".", "fc_o", "=", "nn", ".", "Linear", "(", "dim_V", ",", "dim_V", ")", "\n", "\n", "self", ".", "softmax_dim", "=", "2", "\n", "if", "cluster", "==", "True", ":", "\n", "            ", "self", ".", "softmax_dim", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.MAB.forward": [[134, 171], ["layers.MAB.fc_q", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.utils.to_dense_batch", "torch_geometric.utils.to_dense_batch", "layers.MAB.split", "K.split", "V.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "layers.MAB.ln0", "torch.nn.functional.relu", "torch.nn.functional.relu", "layers.MAB.ln1", "layers.MAB.fc_k", "layers.MAB.fc_v", "layers.MAB.fc_k", "layers.MAB.fc_v", "torch.cat.bmm", "torch.cat.bmm", "math.sqrt", "layers.MAB.size", "getattr", "layers.MAB.fc_o", "getattr", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.bmm", "torch.cat.bmm", "math.sqrt", "range", "torch.cat.transpose", "torch.cat.transpose", "torch.softmax.bmm", "torch.softmax.bmm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "Q", ",", "K", ",", "attention_mask", "=", "None", ",", "graph", "=", "None", ",", "return_attn", "=", "False", ")", ":", "\n", "        ", "Q", "=", "self", ".", "fc_q", "(", "Q", ")", "\n", "\n", "# Adj: Exist (graph is not None), or Identity (else)", "\n", "if", "graph", "is", "not", "None", ":", "\n", "\n", "            ", "(", "x", ",", "edge_index", ",", "batch", ")", "=", "graph", "\n", "\n", "K", ",", "V", "=", "self", ".", "fc_k", "(", "x", ",", "edge_index", ")", ",", "self", ".", "fc_v", "(", "x", ",", "edge_index", ")", "\n", "\n", "K", ",", "_", "=", "to_dense_batch", "(", "K", ",", "batch", ")", "\n", "V", ",", "_", "=", "to_dense_batch", "(", "V", ",", "batch", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "K", ",", "V", "=", "self", ".", "fc_k", "(", "K", ")", ",", "self", ".", "fc_v", "(", "K", ")", "\n", "\n", "", "dim_split", "=", "self", ".", "dim_V", "//", "self", ".", "num_heads", "\n", "Q_", "=", "torch", ".", "cat", "(", "Q", ".", "split", "(", "dim_split", ",", "2", ")", ",", "0", ")", "\n", "K_", "=", "torch", ".", "cat", "(", "K", ".", "split", "(", "dim_split", ",", "2", ")", ",", "0", ")", "\n", "V_", "=", "torch", ".", "cat", "(", "V", ".", "split", "(", "dim_split", ",", "2", ")", ",", "0", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "cat", "(", "[", "attention_mask", "for", "_", "in", "range", "(", "self", ".", "num_heads", ")", "]", ",", "0", ")", "\n", "attention_score", "=", "Q_", ".", "bmm", "(", "K_", ".", "transpose", "(", "1", ",", "2", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "dim_V", ")", "\n", "A", "=", "torch", ".", "softmax", "(", "attention_mask", "+", "attention_score", ",", "self", ".", "softmax_dim", ")", "\n", "", "else", ":", "\n", "            ", "A", "=", "torch", ".", "softmax", "(", "Q_", ".", "bmm", "(", "K_", ".", "transpose", "(", "1", ",", "2", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "dim_V", ")", ",", "self", ".", "softmax_dim", ")", "\n", "\n", "", "O", "=", "torch", ".", "cat", "(", "(", "Q_", "+", "A", ".", "bmm", "(", "V_", ")", ")", ".", "split", "(", "Q", ".", "size", "(", "0", ")", ",", "0", ")", ",", "2", ")", "\n", "O", "=", "O", "if", "getattr", "(", "self", ",", "'ln0'", ",", "None", ")", "is", "None", "else", "self", ".", "ln0", "(", "O", ")", "\n", "O", "=", "O", "+", "F", ".", "relu", "(", "self", ".", "fc_o", "(", "O", ")", ")", "\n", "O", "=", "O", "if", "getattr", "(", "self", ",", "'ln1'", ",", "None", ")", "is", "None", "else", "self", ".", "ln1", "(", "O", ")", "\n", "if", "return_attn", ":", "\n", "            ", "return", "O", ",", "A", "\n", "", "else", ":", "\n", "            ", "return", "O", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.MAB.get_fc_kv": [[172, 190], ["torch_geometric.nn.conv.GCNConv", "torch_geometric.nn.conv.GCNConv", "layers.HypergraphConv", "layers.HypergraphConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "", "def", "get_fc_kv", "(", "self", ",", "dim_K", ",", "dim_V", ",", "conv", ")", ":", "\n", "\n", "        ", "if", "conv", "==", "'GCN'", ":", "\n", "\n", "            ", "fc_k", "=", "GCNConv", "(", "dim_K", ",", "dim_V", ")", "\n", "fc_v", "=", "GCNConv", "(", "dim_K", ",", "dim_V", ")", "\n", "\n", "", "elif", "conv", "==", "'Hyper'", ":", "\n", "\n", "            ", "fc_k", "=", "HypergraphConv", "(", "dim_K", ",", "dim_V", ")", "\n", "fc_v", "=", "HypergraphConv", "(", "dim_K", ",", "dim_V", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "fc_k", "=", "nn", ".", "Linear", "(", "dim_K", ",", "dim_V", ")", "\n", "fc_v", "=", "nn", ".", "Linear", "(", "dim_K", ",", "dim_V", ")", "\n", "\n", "", "return", "fc_k", ",", "fc_v", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GMPool.__init__": [[193, 199], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "layers.MAB", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "num_seeds", ",", "ln", "=", "False", ",", "cluster", "=", "False", ",", "mab_conv", "=", "None", ")", ":", "\n", "        ", "super", "(", "GMPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "S", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "num_seeds", ",", "dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "S", ")", "\n", "\n", "self", ".", "mab", "=", "MAB", "(", "dim", ",", "dim", ",", "dim", ",", "num_heads", ",", "ln", "=", "ln", ",", "cluster", "=", "cluster", ",", "conv", "=", "mab_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GMPool.forward": [[200, 202], ["layers.GMPool.mab", "layers.GMPool.S.repeat", "X.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "attention_mask", "=", "None", ",", "graph", "=", "None", ",", "return_attn", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "mab", "(", "self", ".", "S", ".", "repeat", "(", "X", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ",", "X", ",", "attention_mask", ",", "graph", ",", "return_attn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GCNConv_OGB.__init__": [[206, 213], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ")", ":", "\n", "\n", "        ", "super", "(", "GCNConv_OGB", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "\n", "self", ".", "linear_node", "=", "torch", ".", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "linear_edge", "=", "torch", ".", "nn", ".", "Linear", "(", "emb_dim", ",", "emb_dim", ")", "\n", "self", ".", "root_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "1", ",", "emb_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GCNConv_OGB.forward": [[214, 232], ["layers.GCNConv_OGB.linear_node", "layers.GCNConv_OGB.linear_edge", "layers.GCNConv_OGB.size", "deg.pow", "deg.pow.masked_fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch_scatter.scatter_add", "layers.GCNConv_OGB.propagate", "float", "deg.view", "edge_index.size", "torch.nn.functional.relu", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_attr", ",", "edge_weight", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "linear_node", "(", "x", ")", "\n", "edge_attr", "=", "self", ".", "linear_edge", "(", "edge_attr", ")", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "\n", "if", "edge_weight", "is", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "num_nodes", "=", "x", ".", "size", "(", "0", ")", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "col", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "+", "1", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", ".", "masked_fill_", "(", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", ",", "0", ")", "\n", "\n", "norm", "=", "deg_inv_sqrt", "[", "row", "]", "*", "edge_weight", "*", "deg_inv_sqrt", "[", "col", "]", "\n", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ",", "norm", "=", "norm", ")", "+", "F", ".", "relu", "(", "x", "+", "self", ".", "root_emb", ".", "weight", ")", "*", "1.", "/", "deg", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GCNConv_OGB.message": [[233, 235], ["norm.view", "torch.nn.functional.relu", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "edge_attr", ",", "norm", ")", ":", "\n", "        ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "F", ".", "relu", "(", "x_j", "+", "edge_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.models.layers.GCNConv_OGB.update": [[236, 238], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_node.Parser.__init__": [[5, 11], ["argparse.ArgumentParser", "classification_node.Parser.parser.add_argument", "classification_node.Parser.set_arguments"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.set_arguments"], ["import", "numpy", "as", "np", "\n", "from", "transformers", ".", "optimization", "import", "get_cosine_schedule_with_warmup", "\n", "\n", "from", "utils", ".", "node_utils", "import", "accuracy", "\n", "from", "utils", ".", "setting", "import", "set_seed", ",", "set_logger", ",", "set_experiment_name", ",", "set_device", "\n", "from", "utils", ".", "loader_node", "import", "load_data", ",", "load_model", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_node.Parser.set_arguments": [[12, 40], ["classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument", "classification_node.Parser.parser.add_argument"], "methods", ["None"], ["class", "Trainer", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed, logger, and gpu device", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "logger", "=", "set_logger", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "\n", "A", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "self", ".", "args", ")", "\n", "self", ".", "dataset", "=", "{", "\n", "'A'", ":", "A", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'features'", ":", "features", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'labels'", ":", "labels", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'idx_train'", ":", "idx_train", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'idx_val'", ":", "idx_val", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "'idx_test'", ":", "idx_test", ".", "to", "(", "self", ".", "device", ")", "\n", "}", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_node.Parser.parse": [[41, 49], ["classification_node.Parser.parser.parse_known_args", "len", "SystemExit"], "methods", ["None"], ["weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "            ", "self", ".", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "\n", "self", ".", "args", ".", "patience", ",", "\n", "self", ".", "args", ".", "num_epochs", ")", "\n", "\n", "\n", "", "best_acc", "=", "0.0", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.reconstruction_ZINC.Parser.__init__": [[5, 11], ["argparse.ArgumentParser", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.set_arguments"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.set_arguments"], ["import", "torch", "\n", "from", "torch_geometric", ".", "utils", "import", "to_dense_adj", "\n", "from", "transformers", ".", "optimization", "import", "get_cosine_schedule_with_warmup", "\n", "\n", "from", "utils", ".", "molecule_utils", "import", "mol_from_graphs", "\n", "from", "utils", ".", "setting", "import", "set_seed", ",", "set_logger", ",", "set_experiment_name", ",", "set_device", "\n", "from", "utils", ".", "loader_ZINC", "import", "load_data", ",", "load_model", ",", "load_dataloader", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.reconstruction_ZINC.Parser.set_arguments": [[12, 39], ["reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument", "reconstruction_ZINC.Parser.parser.add_argument"], "methods", ["None"], ["\n", "\n", "class", "Trainer", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed, logger, gpu device and checkoint", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "logger", "=", "set_logger", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "self", ".", "ckpt", "=", "os", ".", "path", ".", "join", "(", "f'./checkpoints/{self.log_folder_name}'", ",", "\n", "f\"best_molecule_{self.seed}.pth\"", ")", "\n", "\n", "### Load dataloader", "\n", "self", ".", "train_loader", ",", "self", ".", "val_loader", ",", "self", ".", "test_loader", "=", "load_dataloader", "(", "self", ".", "args", ")", "\n", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "\n", "### Load model and optimizer", "\n", "        ", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.reconstruction_ZINC.Parser.parse": [[40, 48], ["reconstruction_ZINC.Parser.parser.parse_known_args", "len", "SystemExit"], "methods", ["None"], ["\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "            ", "self", ".", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "\n", "self", ".", "args", ".", "patience", "*", "len", "(", "self", ".", "train_loader", ")", ",", "\n", "self", ".", "args", ".", "num_epochs", "*", "len", "(", "self", ".", "train_loader", ")", ")", "\n", "\n", "### Train", "\n", "", "best_loss", "=", "1e+6", "\n", "patience", "=", "self", ".", "args", ".", "patience", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_OGB.Parser.__init__": [[5, 11], ["argparse.ArgumentParser", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.set_arguments"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.set_arguments"], ["from", "ogb", ".", "graphproppred", "import", "Evaluator", "\n", "from", "transformers", ".", "optimization", "import", "get_cosine_schedule_with_warmup", "\n", "\n", "from", "utils", ".", "data", "import", "num_graphs", "\n", "from", "utils", ".", "setting", "import", "set_seed", ",", "set_logger", ",", "set_experiment_name", ",", "set_device", "\n", "from", "utils", ".", "loader_OGB", "import", "load_data", ",", "load_model", ",", "load_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_OGB.Parser.set_arguments": [[12, 39], ["classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument", "classification_OGB.Parser.parser.add_argument"], "methods", ["None"], ["\n", "class", "Trainer", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed, logger, and gpu device", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "logger", "=", "set_logger", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "\n", "### Load dataset and evaluator", "\n", "self", ".", "dataset", "=", "load_data", "(", "args", ")", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "args", ".", "data", ")", "\n", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "train_loader", ",", "val_loader", ",", "test_loader", "=", "load_dataloader", "(", "self", ".", "args", ",", "self", ".", "dataset", ")", "\n", "\n", "### Load model and optimizer", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "args", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_OGB.Parser.parse": [[40, 48], ["classification_OGB.Parser.parser.parse_known_args", "len", "SystemExit"], "methods", ["None"], ["\n", "self", ".", "cls_criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "reg_criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "lr_schedule", ":", "\n", "            ", "self", ".", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "\n", "self", ".", "args", ".", "patience", "*", "len", "(", "train_loader", ")", ",", "\n", "self", ".", "args", ".", "num_epochs", "*", "len", "(", "train_loader", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.__init__": [[5, 11], ["argparse.ArgumentParser", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.set_arguments"], "methods", ["home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.set_arguments"], ["import", "numpy", "as", "np", "\n", "from", "transformers", ".", "optimization", "import", "get_cosine_schedule_with_warmup", "\n", "\n", "from", "utils", ".", "data", "import", "num_graphs", "\n", "from", "utils", ".", "setting", "import", "set_seed", ",", "set_logger_fold", ",", "set_experiment_name", ",", "set_device", "\n", "from", "utils", ".", "loader_TU", "import", "load_data", ",", "load_model", ",", "load_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.set_arguments": [[12, 40], ["classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument", "classification_TU.Parser.parser.add_argument"], "methods", ["None"], ["\n", "class", "Trainer", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "### Set seed and gpu device", "\n", "self", ".", "seed", "=", "set_seed", "(", "self", ".", "args", ")", "\n", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", "=", "set_experiment_name", "(", "self", ".", "args", ")", "\n", "self", ".", "device", "=", "set_device", "(", "self", ".", "args", ")", "\n", "\n", "### Load dataset ", "\n", "self", ".", "dataset", "=", "load_data", "(", "self", ".", "args", ")", "\n", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "\n", "### Train", "\n", "        ", "overall_results", "=", "{", "\n", "'val_acc'", ":", "[", "]", ",", "\n", "'test_acc'", ":", "[", "]", "\n", "}", "\n", "\n", "train_fold_iter", "=", "tqdm", "(", "range", "(", "1", ",", "11", ")", ",", "desc", "=", "'Training'", ")", "\n", "val_fold_iter", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "11", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.harryjo97_EHGNN.parsers.classification_TU.Parser.parse": [[41, 49], ["classification_TU.Parser.parser.parse_known_args", "len", "SystemExit"], "methods", ["None"], ["for", "fold_number", "in", "train_fold_iter", ":", "\n", "\n", "### Set logger, loss and accuracy for each fold", "\n", "            ", "logger", "=", "set_logger_fold", "(", "self", ".", "log_folder_name", ",", "self", ".", "exp_name", ",", "self", ".", "seed", ",", "fold_number", ")", "\n", "\n", "patience", "=", "0", "\n", "best_loss_epoch", "=", "0", "\n", "best_acc_epoch", "=", "0", "\n", "best_loss", "=", "1e9", "\n"]]}