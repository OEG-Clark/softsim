{"home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis.start_script.scaled_branin_hoo": [[18, 36], ["math.cos", "math.log"], "function", ["None"], ["def", "scaled_branin_hoo", "(", "x", ",", "y", ",", "z", "=", "\"C\"", ")", ":", "\n", "    ", "a", "=", "1", "\n", "b", "=", "5.1", "/", "(", "4", "*", "math", ".", "pi", "**", "2", ")", "\n", "c", "=", "5.0", "/", "math", ".", "pi", "\n", "r", "=", "6", "\n", "s", "=", "10", "\n", "t", "=", "1", "/", "(", "8", "*", "math", ".", "pi", ")", "\n", "f1", "=", "a", "*", "(", "y", "-", "b", "*", "x", "**", "2", "+", "c", "*", "x", "-", "r", ")", "\n", "f2", "=", "s", "*", "(", "1", "-", "t", ")", "*", "math", ".", "cos", "(", "x", ")", "+", "s", "\n", "result", "=", "f1", "**", "2", "+", "f2", "\n", "if", "z", "==", "\"A\"", ":", "\n", "        ", "result", "*=", "10", "\n", "", "if", "z", "==", "\"B\"", ":", "\n", "        ", "result", "*=", "0.8", "\n", "", "if", "result", ">", "10", ":", "\n", "        ", "return", "math", ".", "log", "(", "result", ",", "10", ")", "*", "10", "\n", "", "else", ":", "\n", "        ", "return", "result", "\n", "#app.run()", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.__init__": [[39, 83], ["apsis.utilities.logging_utils.get_logger", "lab_assistant.LabAssistant._logger.info", "lab_assistant.LabAssistant._logger.info", "lab_assistant.LabAssistant._write_state_to_file", "lab_assistant.LabAssistant._logger.info", "time.time", "lab_assistant_json[].values", "lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._logger.debug", "open", "json.load", "lab_assistant.LabAssistant._load_exp_assistant_from_path", "open"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._write_state_to_file", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant._load_exp_assistant_from_path"], ["def", "__init__", "(", "self", ",", "write_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the lab assistant.\n\n        Parameters\n        ----------\n        write_dir: string, optional\n            Sets the write directory for the lab assistant. If None (default),\n            nothing will be written.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Initializing lab assistant.\"", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"\\tWriting results to %s\"", "%", "write_dir", ")", "\n", "self", ".", "_write_dir", "=", "write_dir", "\n", "\n", "self", ".", "_exp_assistants", "=", "{", "}", "\n", "\n", "reloading_possible", "=", "True", "\n", "try", ":", "\n", "            ", "if", "self", ".", "_write_dir", ":", "\n", "                ", "with", "open", "(", "self", ".", "_write_dir", "+", "\"/lab_assistant.json\"", ",", "\"r\"", ")", ":", "\n", "                    ", "pass", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_logger", ".", "debug", "(", "\"\\tReloading impossible due to no \"", "\n", "\"_write_dir specified.\"", ")", "\n", "reloading_possible", "=", "False", "\n", "", "", "except", "IOError", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"\\tReloading impossible due to IOError - \"", "\n", "\"probably no lab_assistant existing.\"", ")", "\n", "reloading_possible", "=", "False", "\n", "\n", "", "if", "not", "reloading_possible", ":", "\n", "            ", "self", ".", "_global_start_date", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "# set the correct path.", "\n", "            ", "with", "open", "(", "self", ".", "_write_dir", "+", "\"/lab_assistant.json\"", ",", "'r'", ")", "as", "infile", ":", "\n", "                ", "lab_assistant_json", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "self", ".", "_global_start_date", "=", "lab_assistant_json", "[", "\"global_start_date\"", "]", "\n", "for", "p", "in", "lab_assistant_json", "[", "\"exp_assistants\"", "]", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "_load_exp_assistant_from_path", "(", "p", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"\\tReloaded all exp_assistants.\"", ")", "\n", "\n", "", "self", ".", "_write_state_to_file", "(", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"lab assistant successfully initialized.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.init_experiment": [[84, 166], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._logger.debug", "apsis.Experiment", "apsis.assistants.experiment_assistant.ExperimentAssistant", "lab_assistant.LabAssistant._logger.info", "lab_assistant.LabAssistant._write_state_to_file", "lab_assistant.LabAssistant._exp_assistants.keys", "ValueError", "lab_assistant.LabAssistant._logger.debug", "os.path.join", "apsis.utilities.file_utils.ensure_directory_exists", "uuid.uuid4", "lab_assistant.LabAssistant._exp_assistants.keys"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._write_state_to_file", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.file_utils.ensure_directory_exists"], ["", "def", "init_experiment", "(", "self", ",", "name", ",", "optimizer", ",", "param_defs", ",", "exp_id", "=", "None", ",", "\n", "notes", "=", "None", ",", "optimizer_arguments", "=", "None", ",", "\n", "minimization", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Initializes an experiment.\n\n        Parameters\n        ----------\n        name : string\n            name of the experiment.\n        optimizer : string\n            String representation of the optimizer.\n        param_defs : dict of parameter definitions\n            Dictionary of parameter definition classes.\n        optimizer_arguments : dict, optional\n            A dictionary defining the operation of the optimizer. See the\n            respective documentation of the optimizers.\n            Default is None, which are default values.\n        exp_id : string or None, optional\n            The id of the experiment, which will be used to reference it.\n            Should be a proper uuid, and especially has to be unique. If it is\n            not, an error may be returned.\n        notes : jsonable object or None, optional\n            Any note that you'd like to put in the experiment. Could be used\n            to provide some details on the experiment, on the start time or the\n            user starting it.\n        minimization : bool, optional\n            Whether the problem is one of minimization. Defaults to True.\n\n        Returns\n        -------\n        exp_id : string\n            String representing the id of the experiment or \"failed\" if failed.\n\n        Raises\n        ------\n        ValueError :\n            Iff there already is an experiment with the exp_id for this lab\n            assistant. Does not occur if no exp_id is given.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing new experiment. Parameters: \"", "\n", "\"name: %s, optimizer: %s, param_defs: %s, \"", "\n", "\"exp_id: %s, notes: %s, optimizer_arguments: %s, \"", "\n", "\"minimization: %s\"", "%", "(", "name", ",", "optimizer", ",", "param_defs", ",", "\n", "exp_id", ",", "notes", ",", "\n", "optimizer_arguments", ",", "\n", "minimization", ")", ")", "\n", "if", "exp_id", "in", "self", ".", "_exp_assistants", ".", "keys", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Already an experiment with id %s registered.\"", "\n", "%", "exp_id", ")", "\n", "\n", "", "if", "exp_id", "is", "None", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "exp_id", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "if", "exp_id", "not", "in", "self", ".", "_exp_assistants", ".", "keys", "(", ")", ":", "\n", "                    ", "break", "\n", "", "", "self", ".", "_logger", ".", "debug", "(", "\"\\tGenerated new exp_id: %s\"", "%", "exp_id", ")", "\n", "\n", "", "if", "not", "self", ".", "_write_dir", ":", "\n", "            ", "exp_assistant_write_directory", "=", "None", "\n", "", "else", ":", "\n", "            ", "exp_assistant_write_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_write_dir", "+", "\n", "\"/\"", "+", "exp_id", ")", "\n", "ensure_directory_exists", "(", "exp_assistant_write_directory", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"\\tExp_ass directory: %s\"", "\n", "%", "exp_assistant_write_directory", ")", "\n", "\n", "exp", "=", "experiment", ".", "Experiment", "(", "name", ",", "\n", "param_defs", ",", "\n", "exp_id", ",", "\n", "notes", ",", "\n", "minimization", ")", "\n", "\n", "exp_ass", "=", "ExperimentAssistant", "(", "optimizer", ",", "\n", "experiment", "=", "exp", ",", "\n", "optimizer_arguments", "=", "optimizer_arguments", ",", "\n", "write_dir", "=", "exp_assistant_write_directory", ")", "\n", "self", ".", "_exp_assistants", "[", "exp_id", "]", "=", "exp_ass", "\n", "self", ".", "_logger", ".", "info", "(", "\"Experiment initialized successfully with id %s.\"", "\n", "%", "exp_id", ")", "\n", "self", ".", "_write_state_to_file", "(", ")", "\n", "return", "exp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant._load_exp_assistant_from_path": [[167, 209], ["lab_assistant.LabAssistant._logger.debug", "apsis.utilities.file_utils.ensure_directory_exists", "lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._load_experiment", "lab_assistant.LabAssistant._logger.debug", "apsis.assistants.experiment_assistant.ExperimentAssistant", "lab_assistant.LabAssistant._logger.info", "open", "json.load", "ValueError", "lab_assistant.LabAssistant.to_dict"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.file_utils.ensure_directory_exists", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant._load_experiment", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "_load_exp_assistant_from_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        This loads a complete exp_assistant from path.\n\n        Specifically, it looks for exp_assistant.json in the path and restores\n        optimizer_class, optimizer_arguments and write_dir from this. It then\n        loads the experiment from the write_dir/experiment.json, then\n        initializes both.\n\n        Parameters\n        ----------\n        path : string\n            The path from which to initialize. This must contain an\n            exp_assistant.json as specified.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Loading Exp_assistant from path %s\"", "%", "path", ")", "\n", "with", "open", "(", "path", "+", "\"/exp_assistant.json\"", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "exp_assistant_json", "=", "json", ".", "load", "(", "infile", ")", "\n", "\n", "", "optimizer_class", "=", "exp_assistant_json", "[", "\"optimizer_class\"", "]", "\n", "optimizer_arguments", "=", "exp_assistant_json", "[", "\"optimizer_arguments\"", "]", "\n", "exp_ass_write_dir", "=", "exp_assistant_json", "[", "\"write_dir\"", "]", "\n", "ensure_directory_exists", "(", "exp_ass_write_dir", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tLoaded exp_parameters: \"", "\n", "\"optimizer_class: %s, optimizer_arguments: %s,\"", "\n", "\"write_dir: %s\"", "%", "(", "optimizer_class", ",", "\n", "optimizer_arguments", ",", "\n", "exp_ass_write_dir", ")", ")", "\n", "exp", "=", "self", ".", "_load_experiment", "(", "path", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tLoaded Experiment. %s\"", "%", "exp", ".", "to_dict", "(", ")", ")", "\n", "\n", "\n", "exp_ass", "=", "ExperimentAssistant", "(", "optimizer_class", "=", "optimizer_class", ",", "\n", "experiment", "=", "exp", ",", "\n", "optimizer_arguments", "=", "optimizer_arguments", ",", "\n", "write_dir", "=", "exp_ass_write_dir", ")", "\n", "\n", "if", "exp_ass", ".", "exp_id", "in", "self", ".", "_exp_assistants", ":", "\n", "            ", "raise", "ValueError", "(", "\"Loaded exp_id is duplicated in experiment! id \"", "\n", "\"is %s\"", "%", "exp_ass", ".", "exp_id", ")", "\n", "", "self", ".", "_exp_assistants", "[", "exp_ass", ".", "exp_id", "]", "=", "exp_ass", "\n", "self", ".", "_logger", ".", "info", "(", "\"Successfully loaded experiment from %s.\"", "%", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant._load_experiment": [[210, 227], ["lab_assistant.LabAssistant._logger.debug", "apsis.from_dict", "lab_assistant.LabAssistant._logger.debug", "open", "json.load", "apsis.from_dict.to_dict"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.from_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "_load_experiment", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Loads an experiment from path.\n\n        Looks for experiment.json in path.\n\n        Parameters\n        ----------\n        path : string\n            The path where experiment.json is located.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Loading experiment.\"", ")", "\n", "with", "open", "(", "path", "+", "\"/experiment.json\"", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "exp_json", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "exp", "=", "experiment", ".", "from_dict", "(", "exp_json", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tLoaded experiment, %s\"", "%", "exp", ".", "to_dict", "(", ")", ")", "\n", "return", "exp", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant._write_state_to_file": [[229, 247], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._logger.debug", "open", "json.dump", "lab_assistant.LabAssistant._exp_assistants.values"], "methods", ["None"], ["", "def", "_write_state_to_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Writes the state of this lab assistant to a file.\n\n        Iff _write_dir is not None, it will collate global_start_date and a\n        dictionary of every experiment assistant, and dump this to\n        self._write_dir/lab_assistant.json.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Writing lab_assistant state to file %s\"", "\n", "%", "self", ".", "_write_dir", ")", "\n", "if", "not", "self", ".", "_write_dir", ":", "\n", "            ", "return", "\n", "", "state", "=", "{", "\"global_start_date\"", ":", "self", ".", "_global_start_date", ",", "\n", "\"exp_assistants\"", ":", "{", "x", ".", "exp_id", ":", "x", ".", "write_dir", "for", "x", "\n", "in", "self", ".", "_exp_assistants", ".", "values", "(", ")", "}", "}", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tState is %s\"", "%", "state", ")", "\n", "with", "open", "(", "self", ".", "_write_dir", "+", "'/lab_assistant.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "state", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_candidates": [[248, 267], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._exp_assistants[].get_candidates", "lab_assistant.LabAssistant._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_candidates"], ["", "", "def", "get_candidates", "(", "self", ",", "experiment_id", ")", ":", "\n", "        ", "\"\"\"\n        Returns all candidates for a specific experiment.\n\n        Parameters\n        ----------\n        experiment_id : string\n            The id of the experiment for which to return the candidates.\n\n        Returns\n        -------\n        result : dict\n            A dictionary of three lists with the keys finished, pending and\n            working, with the corresponding candidates.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning candidates for exp %s\"", "%", "experiment_id", ")", "\n", "candidates", "=", "self", ".", "_exp_assistants", "[", "experiment_id", "]", ".", "get_candidates", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tCandidates are %s\"", "%", "candidates", ")", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_next_candidate": [[268, 287], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._exp_assistants[].get_next_candidate", "lab_assistant.LabAssistant._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate"], ["", "def", "get_next_candidate", "(", "self", ",", "experiment_id", ")", ":", "\n", "        ", "\"\"\"\n        Returns the next candidates for a specific experiment.\n\n        Parameters\n        ----------\n        experiment_id : string\n            The id of the experiment for which to return the next candidate.\n\n        Returns\n        -------\n        next_candidate : Candidate or None\n            The Candidate object that should be evaluated next. May be None,\n            which is equivalent to no candidate generated.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning next candidate for id %s\"", "%", "experiment_id", ")", "\n", "next_cand", "=", "self", ".", "_exp_assistants", "[", "experiment_id", "]", ".", "get_next_candidate", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tNext candidate is %s\"", "%", "next_cand", ")", "\n", "return", "next_cand", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_best_candidate": [[288, 307], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._exp_assistants[].get_best_candidate", "lab_assistant.LabAssistant._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_best_candidate"], ["", "def", "get_best_candidate", "(", "self", ",", "experiment_id", ")", ":", "\n", "        ", "\"\"\"\n        Returns the best candidates for a specific experiment.\n\n        Parameters\n        ----------\n        experiment_id : string\n            The id of the experiment for which to return the best candidate.\n\n        Returns\n        -------\n        best_candidate : Candidate or None\n            The Candidate object that has performed best. May be None,\n            which is equivalent to no candidate being evaluated.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning best candidate for id %s\"", "%", "experiment_id", ")", "\n", "best_cand", "=", "self", ".", "_exp_assistants", "[", "experiment_id", "]", ".", "get_best_candidate", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tBest candidate is %s\"", "%", "best_cand", ")", "\n", "return", "best_cand", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.update": [[308, 331], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._exp_assistants[].update"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["", "def", "update", "(", "self", ",", "experiment_id", ",", "status", ",", "candidate", ")", ":", "\n", "        ", "\"\"\"\n        Updates the specicied experiment with the status of an experiment\n        evaluation.\n\n        Parameters\n        ----------\n        experiment_id : string\n            The id of the experiment for which to return the best candidate.\n        candidate : Candidate\n            The Candidate object whose status is updated.\n        status : {\"finished\", \"pausing\", \"working\"}\n            A string defining the status change. Can be one of the following:\n            - finished: The Candidate is now finished.\n            - pausing: The evaluation of Candidate has been paused and can be\n                resumed by another worker.\n            - working: The Candidate is now being worked on by a worker.\n\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Updating exp_id %s with candidate %s with status\"", "\n", "\"%s.\"", "%", "(", "experiment_id", ",", "candidate", ",", "status", ")", ")", "\n", "self", ".", "_exp_assistants", "[", "experiment_id", "]", ".", "update", "(", "status", "=", "status", ",", "\n", "candidate", "=", "candidate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_experiment_as_dict": [[332, 350], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._exp_assistants[].get_experiment_as_dict", "lab_assistant.LabAssistant._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_experiment_as_dict"], ["", "def", "get_experiment_as_dict", "(", "self", ",", "exp_id", ")", ":", "\n", "        ", "\"\"\"\n        Returns the specified experiment as dictionary.\n\n        Parameters\n        ----------\n        exp_id : string\n            The id of the experiment.\n\n        Returns\n        -------\n        exp_dict : dict\n            The experiment dictionary as defined by Experiment.to_dict().\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning experiment %s as dict.\"", "%", "exp_id", ")", "\n", "exp_dict", "=", "self", ".", "_exp_assistants", "[", "exp_id", "]", ".", "get_experiment_as_dict", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"\\tDict is %s\"", "%", "exp_dict", ")", "\n", "return", "exp_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_plot_result_per_step": [[351, 370], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._exp_assistants[].plot_result_per_step", "lab_assistant.LabAssistant._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.plot_result_per_step"], ["", "def", "get_plot_result_per_step", "(", "self", ",", "exp_id", ")", ":", "\n", "        ", "\"\"\"\n        Returns the figure for the result of each step.\n\n        Parameters\n        ----------\n        exp_id : string\n            The id of the experiment.\n\n        Result\n        ------\n        fig : matplotlib.figure\n            The figure containing the result of each step.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning plot of results per step for %s.\"", "\n", "%", "exp_id", ")", "\n", "fig", "=", "self", ".", "_exp_assistants", "[", "exp_id", "]", ".", "plot_result_per_step", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Figure is %s\"", "%", "fig", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.contains_id": [[372, 392], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._logger.debug"], "methods", ["None"], ["", "def", "contains_id", "(", "self", ",", "exp_id", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether this lab assistant has an experiment with id.\n\n        Parameters\n        ----------\n        exp_id : string\n            The ID to be tested.\n\n        Returns\n        -------\n        contains : bool\n            True iff this lab assistant contains an experiment with this id.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Testing whether this contains id %s\"", "%", "exp_id", ")", "\n", "if", "exp_id", "in", "self", ".", "_exp_assistants", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"exp_id %s is contained.\"", "%", "exp_id", ")", "\n", "return", "True", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"exp_id %s is not contained.\"", "%", "exp_id", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_ids": [[393, 406], ["lab_assistant.LabAssistant._logger.debug", "lab_assistant.LabAssistant._exp_assistants.keys", "lab_assistant.LabAssistant._logger.debug"], "methods", ["None"], ["", "def", "get_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns all known ids for this lab assistant.\n\n        Returns\n        -------\n        exp_ids : list of strings\n            All ids this lab assitant knows.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Requested all exp_ids.\"", ")", "\n", "exp_ids", "=", "self", ".", "_exp_assistants", ".", "keys", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"All exp_ids: %s\"", "%", "exp_ids", ")", "\n", "return", "exp_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.set_exit": [[407, 417], ["lab_assistant.LabAssistant._logger.info", "lab_assistant.LabAssistant._exp_assistants.values", "lab_assistant.LabAssistant._logger.info", "exp.set_exit"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.set_exit"], ["", "def", "set_exit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Exits this assistant.\n\n        Currently, all that is done is exiting all exp_assistants..\n        \"\"\"", "\n", "self", ".", "_logger", ".", "info", "(", "\"Shutting down lab assistant: Setting exit.\"", ")", "\n", "for", "exp", "in", "self", ".", "_exp_assistants", ".", "values", "(", ")", ":", "\n", "            ", "exp", ".", "set_exit", "(", ")", "\n", "", "self", ".", "_logger", ".", "info", "(", "\"Shut down all experiment assistants.\"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.__init__": [[51, 84], ["apsis.utilities.logging_utils.get_logger", "experiment_assistant.ExperimentAssistant._logger.info", "experiment_assistant.ExperimentAssistant._init_optimizer", "experiment_assistant.ExperimentAssistant._write_state_to_file", "experiment_assistant.ExperimentAssistant._logger.info", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._init_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._write_state_to_file"], ["def", "__init__", "(", "self", ",", "optimizer_class", ",", "experiment", ",", "\n", "optimizer_arguments", "=", "None", ",", "\n", "write_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes this experiment assistant.\n\n        Note that calling this function does not yet create an experiment, for\n        that, use init_experiment. If there is an already existing experiment,\n        you can just set self._experiment.\n\n        Parameters\n        ----------\n        optimizer_class : subclass of Optimizer\n            The class of the optimizer, used to initialize it.\n        experiment : Experiment\n            The experiment representing the data of this experiment assistant.\n        write_dir : basestring, optional\n            The directory the state of this experiment assistant is regularly\n            written to. If this is None (default), no state will be written.\n        optimizer_arguments : dict, optional\n            The dictionary of optimizer arguments. If None, default values will\n            be used.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "get_logger", "(", "self", ",", "extra_info", "=", "\"exp_id: \"", "+", "\n", "str", "(", "experiment", ".", "exp_id", ")", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Initializing experiment assistant.\"", ")", "\n", "self", ".", "_optimizer", "=", "optimizer_class", "\n", "self", ".", "_optimizer_arguments", "=", "optimizer_arguments", "\n", "self", ".", "_write_dir", "=", "write_dir", "\n", "self", ".", "_experiment", "=", "experiment", "\n", "self", ".", "_init_optimizer", "(", ")", "\n", "self", ".", "_write_state_to_file", "(", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Experiment assistant successfully initialized.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._init_optimizer": [[85, 95], ["experiment_assistant.ExperimentAssistant._logger.debug", "apsis.utilities.optimizer_utils.check_optimizer", "experiment_assistant.ExperimentAssistant._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer"], ["", "def", "_init_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the optimizer if it does not exist.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing optimizer. Current state is %s\"", "\n", "%", "self", ".", "_optimizer", ")", "\n", "self", ".", "_optimizer", "=", "check_optimizer", "(", "self", ".", "_optimizer", ",", "self", ".", "_experiment", ",", "\n", "optimizer_arguments", "=", "self", ".", "_optimizer_arguments", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialized optimizer. State afterwards is %s\"", "\n", "%", "self", ".", "_optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_next_candidate": [[96, 130], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._write_state_to_file", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._optimizer.get_next_candidates", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._experiment.candidates_pending.pop", "experiment_assistant.ExperimentAssistant._experiment.add_working", "str", "str", "len", "experiment_assistant.ExperimentAssistant._experiment.add_working"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._write_state_to_file", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working"], ["", "def", "get_next_candidate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the Candidate next to evaluate.\n\n        Internally, it first tries to return the most recent pending candidate\n        of this experiment. If there is none, it generates one from optimizer.\n\n        Returns\n        -------\n        next_candidate : Candidate or None\n            The Candidate object that should be evaluated next. May be None,\n            which is equivalent to no candidate generated.\n        \"\"\"", "\n", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning next candidate.\"", ")", "\n", "to_return", "=", "None", "\n", "if", "not", "self", ".", "_experiment", ".", "candidates_pending", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"No candidate pending; requesting one from \"", "\n", "\"optimizer.\"", ")", "\n", "candidates", "=", "self", ".", "_optimizer", ".", "get_next_candidates", "(", "num_candidates", "=", "1", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Got %s\"", ",", "[", "str", "(", "c", ")", "for", "c", "in", "candidates", "]", ")", "\n", "if", "candidates", "is", "None", ":", "\n", "                ", "to_return", "=", "None", "\n", "", "elif", "len", "(", "candidates", ")", ">", "0", ":", "\n", "                ", "self", ".", "_experiment", ".", "add_working", "(", "candidates", "[", "0", "]", ")", "\n", "to_return", "=", "candidates", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Had at least one pending.\"", ")", "\n", "cand", "=", "self", ".", "_experiment", ".", "candidates_pending", ".", "pop", "(", ")", "\n", "self", ".", "_experiment", ".", "add_working", "(", "cand", ")", "\n", "to_return", "=", "cand", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Returning candidate %s\"", "%", "str", "(", "to_return", ")", ")", "\n", "self", ".", "_write_state_to_file", "(", ")", "\n", "return", "to_return", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_experiment_as_dict": [[131, 146], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._experiment.to_dict", "experiment_assistant.ExperimentAssistant._logger.log"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "get_experiment_as_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the dictionary describing this EAss' experiment.\n\n        Signature is equivalent to Experiment.to_dict()\n\n        Returns\n        -------\n            exp_dict : dict\n                The experiment dictionary.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning experiment as dict.\"", ")", "\n", "exp_dict", "=", "self", ".", "_experiment", ".", "to_dict", "(", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Exp_dict is %s\"", "%", "exp_dict", ")", "\n", "return", "exp_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.update": [[147, 195], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._write_state_to_file", "experiment_assistant.ExperimentAssistant._logger.error", "ValueError", "isinstance", "experiment_assistant.ExperimentAssistant._logger.error", "ValueError", "experiment_assistant.ExperimentAssistant._experiment.add_finished", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._optimizer.update", "experiment_assistant.ExperimentAssistant._logger.debug", "str", "experiment_assistant.ExperimentAssistant._experiment.add_pausing", "str", "str", "numpy.isfinite", "experiment_assistant.ExperimentAssistant._experiment.add_working"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._write_state_to_file", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pausing", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working"], ["", "def", "update", "(", "self", ",", "candidate", ",", "status", "=", "\"finished\"", ")", ":", "\n", "        ", "\"\"\"\n        Updates the experiment_assistant with the status of an experiment\n        evaluation.\n\n        Parameters\n        ----------\n        candidate : Candidate\n            The Candidate object whose status is updated.\n        status : {\"finished\", \"pausing\", \"working\"}\n            A string defining the status change. Can be one of the following:\n            - finished: The Candidate is now finished.\n            - pausing: The evaluation of Candidate has been paused and can be\n                resumed by another worker.\n            - working: The Candidate is now being worked on by a worker.\n\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Updating experiment assistant with candidate %s,\"", "\n", "\"status %s\"", "%", "(", "candidate", ",", "status", ")", ")", "\n", "if", "status", "not", "in", "AVAILABLE_STATUS", ":", "\n", "            ", "message", "=", "(", "\"status not in %s but %s.\"", "\n", "%", "(", "str", "(", "AVAILABLE_STATUS", ")", ",", "str", "(", "status", ")", ")", ")", "\n", "self", ".", "_logger", ".", "error", "(", "message", ")", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "candidate", ",", "Candidate", ")", ":", "\n", "            ", "message", "=", "(", "\"candidate %s not a Candidate instance.\"", "\n", "%", "str", "(", "candidate", ")", ")", "\n", "self", ".", "_logger", ".", "error", "(", "message", ")", "\n", "raise", "ValueError", "(", "message", ")", "\n", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Got new %s of candidate %s with parameters %s\"", "\n", "\" and result %s\"", ",", "status", ",", "candidate", ",", "candidate", ".", "params", ",", "\n", "candidate", ".", "result", ")", "\n", "\n", "if", "status", "==", "\"finished\"", ":", "\n", "            ", "if", "(", "candidate", ".", "result", "is", "None", "or", "not", "np", ".", "isfinite", "(", "candidate", ".", "result", ")", ")", ":", "\n", "                ", "candidate", ".", "failed", "=", "True", "\n", "", "self", ".", "_experiment", ".", "add_finished", "(", "candidate", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Was finished, updating optimizer.\"", ")", "\n", "# And we rebuild the new optimizer.", "\n", "self", ".", "_optimizer", ".", "update", "(", "self", ".", "_experiment", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Optimizer updated.\"", ")", "\n", "", "elif", "status", "==", "\"pausing\"", ":", "\n", "            ", "self", ".", "_experiment", ".", "add_pausing", "(", "candidate", ")", "\n", "", "elif", "status", "==", "\"working\"", ":", "\n", "            ", "self", ".", "_experiment", ".", "add_working", "(", "candidate", ")", "\n", "", "self", ".", "_write_state_to_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._write_state_to_file": [[196, 224], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._experiment.write_state_to_file", "experiment_assistant.ExperimentAssistant._logger.debug", "isinstance", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.write_state_to_file"], ["", "def", "_write_state_to_file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Writes the current state to the specified file.\n\n        When this is called, it collects the state of this experiment assistant\n        - that is, optimizer_class, optimizer_arguments and write_dir - and\n        writes them to file. It also forces _experiment to write its state to\n        file.\n        All of this only happens if _write_dir is not None - if it is, we will\n        do nothing.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Writing experiment assistant status to file %s\"", ",", "\n", "self", ".", "_write_dir", ")", "\n", "if", "self", ".", "_write_dir", "is", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"No write directory is set; not writing \"", "\n", "\"anything.\"", ")", "\n", "return", "\n", "", "state", "=", "{", "}", "\n", "opt", "=", "self", ".", "_optimizer", "\n", "if", "not", "isinstance", "(", "opt", ",", "basestring", ")", ":", "\n", "            ", "opt", "=", "opt", ".", "name", "\n", "", "state", "[", "\"optimizer_class\"", "]", "=", "opt", "\n", "state", "[", "\"optimizer_arguments\"", "]", "=", "self", ".", "_optimizer_arguments", "\n", "state", "[", "\"write_dir\"", "]", "=", "self", ".", "_write_dir", "\n", "with", "open", "(", "self", ".", "_write_dir", "+", "'/exp_assistant.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "state", ",", "outfile", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Writing state %s\"", ",", "state", ")", "\n", "self", ".", "_experiment", ".", "write_state_to_file", "(", "self", ".", "_write_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_best_candidate": [[225, 239], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug"], "methods", ["None"], ["", "def", "get_best_candidate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the best candidate to date.\n\n        Returns\n        -------\n        best_candidate : candidate or None\n            Returns a candidate if there is a best one (which corresponds to\n            at least one candidate evaluated) or None if none exists.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning best candidate.\"", ")", "\n", "best_candidate", "=", "self", ".", "_experiment", ".", "best_candidate", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Best candidate is %s\"", ",", "best_candidate", ")", "\n", "return", "best_candidate", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._best_result_per_step_dicts": [[240, 287], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._best_result_per_step_data", "experiment_assistant.ExperimentAssistant._logger.log", "str", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._best_result_per_step_data"], ["", "def", "_best_result_per_step_dicts", "(", "self", ",", "color", "=", "\"b\"", ",", "plot_up_to", "=", "None", ",", "\n", "cutoff_percentage", "=", "1.", ",", "\n", "non_finished_color", "=", "\"g\"", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dict to use with plot_utils.\n        Parameters\n        ----------\n        color=\"b\": string\n            A pyplot-color representing string. Both plots will have that\n            color.\n        Returns\n        -------\n        dicts: list of dicts\n            Two dicts, one for step_eval, one for step_best, and their\n            corresponding definitions.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning best result per step dicts.\"", ")", "\n", "x", ",", "step_eval", ",", "step_best", ",", "non_finished_xs", ",", "non_finished_evals", "=", "self", ".", "_best_result_per_step_data", "(", "plot_up_to", "=", "\n", "plot_up_to", ")", "\n", "\n", "step_eval_dict", "=", "{", "\n", "\"x\"", ":", "x", ",", "\n", "\"y\"", ":", "step_eval", ",", "\n", "\"type\"", ":", "\"scatter\"", ",", "\n", "\"label\"", ":", "\"%s\"", "%", "(", "str", "(", "self", ".", "_experiment", ".", "name", ")", ")", ",", "\n", "\"color\"", ":", "color", ",", "\n", "\"cutoff_percent\"", ":", "cutoff_percentage", "\n", "}", "\n", "\n", "non_finished_dict", "=", "{", "\n", "\"x\"", ":", "non_finished_xs", ",", "\n", "\"y\"", ":", "non_finished_evals", ",", "\n", "\"type\"", ":", "\"scatter\"", ",", "\n", "\"label\"", ":", "\"future %s\"", "%", "(", "str", "(", "self", ".", "_experiment", ".", "name", ")", ")", ",", "\n", "\"color\"", ":", "non_finished_color", ",", "\n", "}", "\n", "\n", "step_best_dict", "=", "{", "\n", "\"x\"", ":", "x", ",", "\n", "\"y\"", ":", "step_best", ",", "\n", "\"type\"", ":", "\"line\"", ",", "\n", "\"color\"", ":", "color", ",", "\n", "}", "\n", "result", "=", "[", "step_eval_dict", ",", "step_best_dict", ",", "non_finished_dict", "]", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Returning %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._best_result_per_step_data": [[288, 346], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug", "enumerate", "enumerate", "enumerate", "experiment_assistant.ExperimentAssistant._logger.debug", "len", "x.append", "sorted", "non_finished_xs.append", "non_finished_evals.append", "sorted", "non_finished_xs.append", "non_finished_evals.append", "step_evaluation.append", "experiment_assistant.ExperimentAssistant._experiment.better_cand", "step_evaluation.append", "step_best.append", "step_best.append", "float", "step_best.append", "step_best.append", "float"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand"], ["", "def", "_best_result_per_step_data", "(", "self", ",", "plot_up_to", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This internal function returns quality of the results by step.\n        This returns an x coordinate, and for each of them a value for the\n        currently evaluated result and the best found result.\n        Returns\n        -------\n        x: list of ints\n            The results per step. Should usually be [0, ..., maxSteps]\n        step_evaluation: list of floats\n            The result of the evaluated candidate during the corresponding step\n        step_best: list of floats\n            The best result that has been found until then.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning best result per step dicts.\"", ")", "\n", "x", "=", "[", "]", "\n", "step_evaluation", "=", "[", "]", "\n", "step_best", "=", "[", "]", "\n", "best_candidate", "=", "None", "\n", "if", "plot_up_to", "is", "None", ":", "\n", "            ", "plot_up_to", "=", "len", "(", "self", ".", "_experiment", ".", "candidates_finished", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Plotting %s candidates\"", ",", "plot_up_to", ")", "\n", "x_from", "=", "0", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "self", ".", "_experiment", ".", "candidates_finished", "\n", "[", ":", "plot_up_to", "]", ")", ":", "\n", "            ", "x", ".", "append", "(", "i", ")", "\n", "if", "not", "e", ".", "failed", ":", "\n", "                ", "step_evaluation", ".", "append", "(", "e", ".", "result", ")", "\n", "if", "self", ".", "_experiment", ".", "better_cand", "(", "e", ",", "best_candidate", ")", ":", "\n", "                    ", "best_candidate", "=", "e", "\n", "step_best", ".", "append", "(", "e", ".", "result", ")", "\n", "", "else", ":", "\n", "                    ", "step_best", ".", "append", "(", "best_candidate", ".", "result", ")", "\n", "", "", "else", ":", "\n", "                ", "step_evaluation", ".", "append", "(", "float", "(", "\"NaN\"", ")", ")", "\n", "if", "best_candidate", "is", "None", ":", "\n", "                    ", "step_best", ".", "append", "(", "float", "(", "\"NaN\"", ")", ")", "\n", "", "else", ":", "\n", "                    ", "step_best", ".", "append", "(", "best_candidate", ".", "result", ")", "\n", "", "", "x_from", "+=", "1", "\n", "\n", "", "non_finished_evals", "=", "[", "]", "\n", "non_finished_xs", "=", "[", "]", "\n", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "sorted", "(", "self", ".", "_experiment", ".", "candidates_pending", ",", "key", "=", "lambda", "v", ":", "v", ".", "generated_time", ")", ")", ":", "\n", "            ", "x_from", "+=", "1", "\n", "non_finished_xs", ".", "append", "(", "x_from", ")", "\n", "non_finished_evals", ".", "append", "(", "e", ".", "result", ")", "\n", "\n", "", "for", "i", ",", "e", "in", "enumerate", "(", "sorted", "(", "self", ".", "_experiment", ".", "candidates_working", ",", "key", "=", "lambda", "v", ":", "v", ".", "generated_time", ")", ")", ":", "\n", "            ", "x_from", "+=", "1", "\n", "non_finished_xs", ".", "append", "(", "x_from", ")", "\n", "non_finished_evals", ".", "append", "(", "e", ".", "result", ")", "\n", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Returning x: %s, step_eval: %s and step_best %s\"", ",", "\n", "x", ",", "step_evaluation", ",", "step_best", ")", "\n", "return", "x", ",", "step_evaluation", ",", "step_best", ",", "non_finished_xs", ",", "non_finished_evals", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_candidates": [[347, 363], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug"], "methods", ["None"], ["", "def", "get_candidates", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the candidates of this experiment in a dict.\n\n        Returns\n        -------\n        result : dict\n            A dictionary of three lists with the keys finished, pending and\n            working, with the corresponding candidates.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning candidates of exp_ass.\"", ")", "\n", "result", "=", "{", "\"finished\"", ":", "self", ".", "_experiment", ".", "candidates_finished", ",", "\n", "\"pending\"", ":", "self", ".", "_experiment", ".", "candidates_pending", ",", "\n", "\"working\"", ":", "self", ".", "_experiment", ".", "candidates_working", "}", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Candidates are %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.plot_result_per_step": [[364, 406], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._best_result_per_step_dicts", "experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug", "apsis.utilities.plot_utils.plot_lists", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant._best_result_per_step_dicts", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils.plot_lists"], ["", "def", "plot_result_per_step", "(", "self", ",", "ax", "=", "None", ",", "color", "=", "\"b\"", ",", "\n", "plot_min", "=", "None", ",", "plot_max", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the plt.figure plotting the results over the steps.\n\n        Parameters\n        ----------\n        ax : None or matplotlib.Axes, optional\n            The ax to update. If None, a new figure will be created.\n        color : string, optional\n            A string representing a pyplot color.\n        plot_min : float, optional\n            The smallest value to plot on the y axis.\n        plot_max : float, optional\n            The biggest value to plot on the y axis.\n        Returns\n        -------\n        ax: plt.Axes\n            The Axes containing the results over the steps.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Plotting result per step. ax %s, colors %s, \"", "\n", "\"plot_min %s, plot_max %s\"", ",", "ax", ",", "color", ",", "plot_min", ",", "\n", "plot_max", ")", "\n", "plots", "=", "self", ".", "_best_result_per_step_dicts", "(", "color", ",", "cutoff_percentage", "=", "0.5", ")", "\n", "if", "self", ".", "_experiment", ".", "minimization_problem", ":", "\n", "            ", "legend_loc", "=", "'upper right'", "\n", "", "else", ":", "\n", "            ", "legend_loc", "=", "'upper left'", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Setting legend to %s LOC\"", ",", "legend_loc", ")", "\n", "plot_options", "=", "{", "\n", "\"legend_loc\"", ":", "legend_loc", ",", "\n", "\"x_label\"", ":", "\"steps\"", ",", "\n", "\"y_label\"", ":", "\"result\"", ",", "\n", "\"title\"", ":", "\"Plot of %s result over the steps.\"", "\n", "%", "(", "str", "(", "self", ".", "_experiment", ".", "name", ")", ")", ",", "\n", "\"minimizing\"", ":", "self", ".", "_experiment", ".", "minimization_problem", "\n", "}", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Plot options are %s\"", ",", "plot_options", ")", "\n", "fig", ",", "ax", "=", "plot_lists", "(", "plots", ",", "ax", "=", "ax", ",", "fig_options", "=", "plot_options", ",", "\n", "plot_min", "=", "plot_min", ",", "plot_max", "=", "plot_max", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.set_exit": [[407, 416], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._optimizer.exit", "experiment_assistant.ExperimentAssistant._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.exit"], ["", "def", "set_exit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Exits this assistant.\n\n        Currently, all that is done is that the optimizer is exited.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Exp assistant received exit.\"", ")", "\n", "self", ".", "_optimizer", ".", "exit", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Sent exit to optimizer.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.exp_id": [[417, 423], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug"], "methods", ["None"], ["", "@", "property", "\n", "def", "exp_id", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Returning exp id.\"", ")", "\n", "exp_id", "=", "self", ".", "_experiment", ".", "exp_id", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Exp_id is %s\"", ",", "exp_id", ")", "\n", "return", "exp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.write_dir": [[424, 430], ["experiment_assistant.ExperimentAssistant._logger.debug", "experiment_assistant.ExperimentAssistant._logger.debug"], "methods", ["None"], ["", "@", "property", "\n", "def", "write_dir", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Returning write_dir\"", ")", "\n", "write_dir", "=", "self", ".", "_write_dir", "\n", "self", ".", "_logger", ".", "debug", "(", "\"write_dir is %s\"", ",", "write_dir", ")", "\n", "return", "write_dir", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_start_script.start_rest": [[12, 18], ["print", "print", "print", "REST_interface.start_apsis"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.start_apsis"], ["def", "start_rest", "(", "save_path", ",", "port", "=", "5000", ",", "fail_deadly", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Initialized apsis on port %s\"", "%", "port", ")", "\n", "print", "(", "\"Save_path is set to %s\"", "%", "save_path", ")", "\n", "print", "(", "\"Fail_deadly is %s\"", "%", "fail_deadly", ")", "\n", "REST_interface", ".", "start_apsis", "(", "save_path", ",", "port", ",", "\n", "fail_deadly", "=", "fail_deadly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.set_exit": [[38, 50], ["_logger.warning", "tornado.ioloop.IOLoop.instance().stop", "lAss.set_exit", "http_server.stop", "sys.exit", "tornado.ioloop.IOLoop.instance"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.set_exit", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.exit"], ["def", "set_exit", "(", "_signo", ",", "_stack_frame", ")", ":", "\n", "    ", "\"\"\"\n    Sets the exit for the lab assistant.\n    \"\"\"", "\n", "_logger", ".", "warning", "(", "\"Shutting down apsis server, due to signal %s with \"", "\n", "\"stackframe %s\"", "%", "(", "_signo", ",", "_stack_frame", ")", ")", "\n", "IOLoop", ".", "instance", "(", ")", ".", "stop", "(", ")", "\n", "lAss", ".", "set_exit", "(", ")", "\n", "http_server", ".", "stop", "(", ")", "\n", "global", "exited", "\n", "exited", "=", "True", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.start_apsis": [[55, 86], ["apsis.utilities.file_utils.ensure_directory_exists", "apsis.utilities.logging_utils.get_logger", "apsis.utilities.file_utils.ensure_directory_exists", "apsis.assistants.lab_assistant.LabAssistant", "tornado.httpserver.HTTPServer", "tornado.httpserver.HTTPServer.listen", "logging_utils.get_logger.info", "tornado.ioloop.IOLoop.instance().start", "print", "logging_utils.get_logger.warning", "tornado.wsgi.WSGIContainer", "tornado.ioloop.IOLoop.instance"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.file_utils.ensure_directory_exists", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.file_utils.ensure_directory_exists"], ["def", "start_apsis", "(", "save_path", ",", "port", "=", "5000", ",", "fail_deadly", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Starts apsis.\n\n    Initializes logger, LabAssistant and the REST app.\n    \"\"\"", "\n", "global", "lAss", ",", "_logger", "\n", "file_utils", ".", "ensure_directory_exists", "(", "save_path", ")", "\n", "_logger", "=", "logging_utils", ".", "get_logger", "(", "\"webservice.REST_interface\"", ",", "\n", "save_path", "=", "save_path", ")", "\n", "if", "fail_deadly", ":", "\n", "        ", "print", "(", "\"WARNING! Fail deadly is active. Make sure you know what you do.\"", "\n", "\"State of the program might be lost at any time, and the \"", "\n", "\"program might crash unexpectedly.\"", ")", "\n", "_logger", ".", "warning", "(", "\"WARNING! Fail deadly is active. Make sure you know \"", "\n", "\"what you do. State of the program might be lost at \"", "\n", "\"any time, and the program might crash unexpectedly.\"", ")", "\n", "\n", "", "write_dir", "=", "save_path", "\n", "file_utils", ".", "ensure_directory_exists", "(", "write_dir", ")", "\n", "\n", "global", "should_fail_deadly", ",", "http_server", ",", "exited", "\n", "should_fail_deadly", "=", "fail_deadly", "\n", "exited", "=", "False", "\n", "\n", "lAss", "=", "LabAssistant", "(", "write_dir", "=", "write_dir", ")", "\n", "\n", "http_server", "=", "HTTPServer", "(", "WSGIContainer", "(", "app", ")", ")", "\n", "http_server", ".", "listen", "(", "port", ")", "\n", "_logger", ".", "info", "(", "\"Finished initialization. Starting tornado..\"", ")", "\n", "IOLoop", ".", "instance", "(", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.exception_handler": [[88, 119], ["functools.wraps", "flask.jsonify", "_logger.exception", "flask.jsonify", "func", "print", "lAss.set_exit", "RuntimeError", "flask.request.environ.get", "SystemExit", "str"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.set_exit"], ["", "def", "exception_handler", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    This wrapper is used to handle jsonifying and exceptions.\n\n    Specficially, it tries to jsonify the function, with the result being\n    written to the \"result\" field. Any failure is catched and logged.\n    If failed, \"result\" is set to \"failed\".\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "handle_exception", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "global", "exited", "\n", "try", ":", "\n", "            ", "return", "jsonify", "(", "result", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "_logger", ".", "exception", "(", "\"Exception while handling the answer. Exception \"", "\n", "\"is %s\"", ",", "e", ")", "\n", "\n", "if", "should_fail_deadly", ":", "\n", "                ", "print", "(", "e", ")", "\n", "request", ".", "environ", ".", "get", "(", "'werkzeug.server.shutdown'", ")", "(", ")", "\n", "lAss", ".", "set_exit", "(", ")", "\n", "raise", "RuntimeError", "(", "\"Exception raised and fail_deadly active.\"", "\n", "\" Raising general exception. Original \"", "\n", "\"exception is \"", "+", "str", "(", "e", ")", ")", "\n", "", "elif", "exited", ":", "\n", "                ", "raise", "SystemExit", "(", ")", "\n", "\n", "", "return", "jsonify", "(", "result", "=", "\"failed\"", ")", "\n", "\n", "", "", "return", "handle_exception", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.overview_page": [[121, 131], ["app.route", "_logger.log", "lAss.get_ids", "flask.render_template", "experiment_dicts.append", "lAss.get_experiment_as_dict"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_ids", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_experiment_as_dict"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/\"", ",", "methods", "=", "[", "\"GET\"", "]", ")", "\n", "def", "overview_page", "(", ")", ":", "\n", "    ", "\"\"\"\n    This will, later, become an overview over the experiment.\n    \"\"\"", "\n", "_logger", ".", "log", "(", "5", ",", "\"Returning overview page.\"", ")", "\n", "experiment_dicts", "=", "[", "]", "\n", "for", "exp_id", "in", "lAss", ".", "get_ids", "(", ")", ":", "\n", "        ", "experiment_dicts", ".", "append", "(", "lAss", ".", "get_experiment_as_dict", "(", "exp_id", ")", ")", "\n", "", "return", "render_template", "(", "\"overview.html\"", ",", "experiments", "=", "experiment_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_init_experiment": [[133, 185], ["app.route", "_logger.debug", "flask.request.get_json", "REST_interface._filter_data", "_filter_data.get", "_filter_data.get", "_filter_data.get", "lAss.contains_id", "_filter_data.get", "_filter_data.get", "_filter_data.get", "_filter_data.get", "apsis.utilities.param_def_utilities.dict_to_param_defs", "_logger.debug", "lAss.init_experiment", "_logger.info", "_logger.warning", "lAss.get_ids"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface._filter_data", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.contains_id", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities.dict_to_param_defs", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.init_experiment", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_ids"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/c/experiments\"", ",", "methods", "=", "[", "\"POST\"", "]", ")", "\n", "@", "exception_handler", "\n", "def", "client_init_experiment", "(", ")", ":", "\n", "    ", "\"\"\"\n    This initializes a single experiment.\n\n    The json-data to be sent should be a dictionary of the following format:\n    {\n    \"name\": string\n        The name of the experiment. Must be unique.\n    \"optimizer\": string\n        The optimizer to be used or None to automatically choose one.\n    \"param_defs\": list of ParamDef dicts.\n        Each entry of this must be in the following format:\n        {\n        \"type\": string\n            The type of the parameter definition\n        \"<parameter_name>\": <parameter_type>\n            Where each of the necessary parameters for the ParamDef must be\n            included.\n        }\n    \"optimizer_arguments\": dict\n        Dictionary of the arguments of the optimizer, in key-value pairs.\n    \"minimization\": bool, optional\n        Whether the problem is one of minimization or maximization. Default\n        is minimization.\n    }\n    \"\"\"", "\n", "_logger", ".", "debug", "(", "\"Initializing experiment. Request is %s, json %s\"", ",", "request", ",", "\n", "request", ".", "json", ")", "\n", "data_received", "=", "request", ".", "get_json", "(", ")", "\n", "data_received", "=", "_filter_data", "(", "data_received", ")", "\n", "name", "=", "data_received", ".", "get", "(", "\"name\"", ",", "None", ")", "\n", "exp_id", "=", "data_received", ".", "get", "(", "\"exp_id\"", ",", "None", ")", "\n", "notes", "=", "data_received", ".", "get", "(", "\"notes\"", ",", "None", ")", "\n", "if", "lAss", ".", "contains_id", "(", "exp_id", ")", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"%s already in exp_ids. (Exp_ids known are %s). \"", "\n", "\"Failing the initialization.\"", "\n", "%", "(", "exp_id", ",", "lAss", ".", "get_ids", "(", ")", ")", ")", "\n", "return", "\"failed\"", "\n", "", "optimizer", "=", "data_received", ".", "get", "(", "\"optimizer\"", ",", "None", ")", "\n", "optimizer_arguments", "=", "data_received", ".", "get", "(", "\"optimizer_arguments\"", ",", "None", ")", "\n", "minimization", "=", "data_received", ".", "get", "(", "\"minimization\"", ",", "True", ")", "\n", "param_defs", "=", "data_received", ".", "get", "(", "\"param_defs\"", ",", "None", ")", "\n", "param_defs", "=", "dict_to_param_defs", "(", "param_defs", ")", "\n", "_logger", ".", "debug", "(", "\"Initializing experiment.\"", ")", "\n", "exp_id", "=", "lAss", ".", "init_experiment", "(", "name", ",", "optimizer", ",", "param_defs", ",", "\n", "exp_id", ",", "notes", ",", "optimizer_arguments", ",", "\n", "minimization", ")", "\n", "_logger", ".", "info", "(", "\"Initialized new experiment of name %s. exp_id is %s\"", ",", "\n", "name", ",", "exp_id", ")", "\n", "return", "exp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_get_all_experiments": [[187, 196], ["app.route", "lAss.get_ids", "_logger.debug"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_ids"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/c/experiments\"", ",", "methods", "=", "[", "\"GET\"", "]", ")", "\n", "@", "exception_handler", "\n", "def", "client_get_all_experiments", "(", ")", ":", "\n", "    ", "\"\"\"\n    This returns all experiment IDs.\n    \"\"\"", "\n", "exp_ids", "=", "lAss", ".", "get_ids", "(", ")", "\n", "_logger", ".", "debug", "(", "\"Asked for all experiment ids. Returning %s\"", ",", "exp_ids", ")", "\n", "return", "exp_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_get_experiment": [[198, 208], ["app.route", "_logger.debug", "lAss.get_experiment_as_dict", "_logger.debug"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_experiment_as_dict"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/c/experiments/<experiment_id>\"", ",", "methods", "=", "[", "\"GET\"", "]", ")", "\n", "@", "exception_handler", "\n", "def", "client_get_experiment", "(", "experiment_id", ")", ":", "\n", "    ", "\"\"\"\n    This will, later, return more details for a single experiment.\n    \"\"\"", "\n", "_logger", ".", "debug", "(", "\"Asked for experiment with id %s\"", ",", "experiment_id", ")", "\n", "experiment_dict", "=", "lAss", ".", "get_experiment_as_dict", "(", "experiment_id", ")", "\n", "_logger", ".", "debug", "(", "\"Returned exp_dict %s\"", ",", "experiment_dict", ")", "\n", "return", "experiment_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.get_experiment": [[210, 245], ["app.route", "_logger.debug", "lAss.get_experiment_as_dict", "lAss.get_plot_result_per_step", "lAss.get_plot_result_per_step.autofmt_xdate", "matplotlib.backends.backend_agg.FigureCanvasAgg", "StringIO.StringIO", "matplotlib.backends.backend_agg.FigureCanvasAgg.print_png", "png_output.getvalue().encode.getvalue().encode", "_logger.debug", "flask.render_template", "_logger.log", "png_output.getvalue().encode.getvalue", "urllib.quote", "png_output.getvalue().encode.rstrip"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_experiment_as_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.lab_assistant.LabAssistant.get_plot_result_per_step"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/experiments/<experiment_id>\"", ",", "methods", "=", "[", "\"GET\"", "]", ")", "\n", "def", "get_experiment", "(", "experiment_id", ")", ":", "\n", "    ", "\"\"\"\n    This will, later, return more details for a single experiment.\n    \"\"\"", "\n", "_logger", ".", "debug", "(", "\"Asked for experiment id %s. This returns the page.\"", ",", "\n", "experiment_id", ")", "\n", "exp_dict", "=", "lAss", ".", "get_experiment_as_dict", "(", "experiment_id", ")", "\n", "param_defs", "=", "exp_dict", "[", "\"parameter_definitions\"", "]", "\n", "finished_candidates_string", "=", "exp_dict", "[", "\"candidates_finished\"", "]", "\n", "pending_candidates_string", "=", "exp_dict", "[", "\"candidates_pending\"", "]", "\n", "working_candidates_string", "=", "exp_dict", "[", "\"candidates_working\"", "]", "\n", "best_candidate_string", "=", "exp_dict", "[", "\"best_candidate\"", "]", "\n", "fig", "=", "lAss", ".", "get_plot_result_per_step", "(", "experiment_id", ")", "\n", "fig", ".", "autofmt_xdate", "(", ")", "\n", "canvas", "=", "FigureCanvas", "(", "fig", ")", "\n", "png_output", "=", "StringIO", ".", "StringIO", "(", ")", "\n", "canvas", ".", "print_png", "(", "png_output", ")", "\n", "png_output", "=", "png_output", ".", "getvalue", "(", ")", ".", "encode", "(", "\"base64\"", ")", "\n", "\n", "_logger", ".", "debug", "(", "\"Rendering template\"", ")", "\n", "templ", "=", "render_template", "(", "\"experiment.html\"", ",", "\n", "exp_name", "=", "exp_dict", "[", "\"name\"", "]", ",", "\n", "exp_id", "=", "exp_dict", "[", "\"exp_id\"", "]", ",", "\n", "exp_last_update", "=", "exp_dict", "[", "\"last_update_time\"", "]", ",", "\n", "minimization", "=", "exp_dict", "[", "\"minimization_problem\"", "]", ",", "\n", "param_defs", "=", "param_defs", ",", "\n", "finished_candidates_string", "=", "finished_candidates_string", ",", "\n", "pending_candidates_string", "=", "pending_candidates_string", ",", "\n", "working_candidates_string", "=", "working_candidates_string", ",", "\n", "result_per_step", "=", "urllib", ".", "quote", "(", "png_output", ".", "rstrip", "(", "'\\n'", ")", ")", ",", "\n", "best_candidate_string", "=", "best_candidate_string", "\n", ")", "\n", "_logger", ".", "log", "(", "5", ",", "\"Returning template %s\"", ",", "templ", ")", "\n", "return", "templ", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_get_next_candidate": [[247, 275], ["app.route", "_logger.debug", "lAss.get_next_candidate", "_logger.debug", "_logger.debug", "lAss.get_next_candidate.to_dict"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/c/experiments/<experiment_id>\"", "\n", "\"/get_next_candidate\"", ",", "methods", "=", "[", "\"GET\"", "]", ")", "\n", "@", "exception_handler", "\n", "def", "client_get_next_candidate", "(", "experiment_id", ")", ":", "\n", "    ", "\"\"\"\n    Returns the next candidate for a specific experiment.\n\n    Parameters\n    ----------\n    experiment_id : string\n        The exp_id of the experiment for which the candidate should be\n        returned.\n\n    Returns\n    -------\n    result : Candidate, None or \"failed\".\n        Returns either a Candidate (if successful), None if none is available\n        or possibly \"failed\" if the request failed.\n    \"\"\"", "\n", "_logger", ".", "debug", "(", "\"Should return next candidate for %s\"", ",", "experiment_id", ")", "\n", "result_cand", "=", "lAss", ".", "get_next_candidate", "(", "experiment_id", ")", "\n", "if", "result_cand", "is", "None", ":", "\n", "        ", "_logger", ".", "debug", "(", "\"No next candidate available. Failing.\"", ")", "\n", "result", "=", "\"failed\"", "\n", "", "else", ":", "\n", "        ", "result", "=", "result_cand", ".", "to_dict", "(", ")", "\n", "", "_logger", ".", "debug", "(", "\"Returning next cand %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_get_best_candidate": [[277, 304], ["app.route", "_logger.debug", "lAss.get_best_candidate", "_logger.debug", "_logger.debug", "lAss.get_best_candidate.to_dict"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_best_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/c/experiments/<experiment_id>\"", "\n", "\"/get_best_candidate\"", ",", "methods", "=", "[", "\"GET\"", "]", ")", "\n", "@", "exception_handler", "\n", "def", "client_get_best_candidate", "(", "experiment_id", ")", ":", "\n", "    ", "\"\"\"\n    Returns the best finished candidate for an experiment.\n\n    Parameters\n    ----------\n    exp_id : string\n        The id of the experiment to return.\n\n    Returns\n    -------\n    best_candidate : dict as a candidate representation\n        Dictionary candidate representation (see get_next_candidate for the\n        exact format). May be None or \"failed\" if no such candidate exists.\n    \"\"\"", "\n", "_logger", ".", "debug", "(", "\"Returning best candidate for %s\"", ",", "experiment_id", ")", "\n", "result_cand", "=", "lAss", ".", "get_best_candidate", "(", "experiment_id", ")", "\n", "if", "result_cand", "is", "None", ":", "\n", "        ", "_logger", ".", "debug", "(", "\"No best candidate available. Returning failed.\"", ")", "\n", "result", "=", "\"failed\"", "\n", "", "else", ":", "\n", "        ", "result", "=", "result_cand", ".", "to_dict", "(", ")", "\n", "", "_logger", ".", "debug", "(", "\"Returning best candidate %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_update": [[306, 366], ["app.route", "_logger.debug", "flask.request.get_json", "apsis.models.candidate.from_dict", "lAss.update", "_logger.debug"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.from_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/c/experiments/<experiment_id>\"", "\n", "\"/update\"", ",", "methods", "=", "[", "\"POST\"", "]", ")", "\n", "@", "exception_handler", "\n", "def", "client_update", "(", "experiment_id", ")", ":", "\n", "    ", "\"\"\"\n    Updates the result of the candidate.\n\n    Parameters\n    ----------\n    exp_id : string\n        The id of the experiment to return.\n    json : json dict\n        Contains two elements.\n        \"candidate\" : dict representing a candidate\n            Represents a candidate. Usually a modified candidate received from\n             get_next_candidate.\n            It consists of the following fields:\n            \"cost\" : float or None\n                The cumulative cost of the evaluations of this candidate.\n                Must be set by the worker. Default is None, representing no\n                cost being set.\n            \"params\" : dict of parameters\n                The parameter values this candidate has. The format is\n                analogous to the parameter defintion of init_experiment,\n                with each entry being an acceptable value according to\n                param_def.\n            \"id\" : string\n                An id uniquely identifying this candidate.\n            \"worker_information\" : arbitrary\n                A field usable for setting worker information, for example a\n                directory in which intermediary results are stored. Any\n                json-able information can be stored in it (though, since\n                it's transferred via network, it is probably better to keep it\n                fairly small), and apsis guarantees never to change it.\n                By default, it's None.\n            \"result\" : float\n                The result of the process we want to optimize.\n                Is None by default\n        \"status\" : string\n            One of \"finished\", \"working\" and \"pausing\".\n            \"finished\": The evaluation is finished.\n            \"working\": The evaluation is still in progress. Later, it will be\n            used to ensure that the worker is still working, allowing us to\n            reschedule the candidate to other workers if necessary.\n            \"pausing\": Signals that this candidate has paused the execution,\n            meaning that we are allowed to reschedule it to another worker.\n\n    Returns\n    -------\n    result : string\n        Returns \"success\" iff successful, \"failed\" otherwise.\n    \"\"\"", "\n", "_logger", ".", "debug", "(", "\"Updating client. request is %s, json %s\"", ",", "request", ",", "\n", "request", ".", "json", ")", "\n", "data_received", "=", "request", ".", "get_json", "(", ")", "\n", "status", "=", "data_received", "[", "\"status\"", "]", "\n", "candidate", "=", "from_dict", "(", "data_received", "[", "\"candidate\"", "]", ")", "\n", "lAss", ".", "update", "(", "experiment_id", ",", "status", "=", "status", ",", "candidate", "=", "candidate", ")", "\n", "_logger", ".", "debug", "(", "\"Updated lAss.\"", ")", "\n", "return", "\"success\"", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_get_all_candidates": [[368, 404], ["app.route", "_logger.debug", "lAss.get_candidates", "_logger.debug", "enumerate", "result[].append", "x.to_dict"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "@", "app", ".", "route", "(", "CONTEXT_ROOT", "+", "\"/c/experiments/<experiment_id>/candidates\"", ",", "\n", "methods", "=", "[", "\"GET\"", "]", ")", "\n", "@", "exception_handler", "\n", "def", "client_get_all_candidates", "(", "experiment_id", ")", ":", "\n", "    ", "\"\"\"\n    Returns the candidates for an experiment.\n\n    Parameters\n    ----------\n    exp_id : string\n        The id of the experiment to return.\n\n    Returns\n    -------\n    candidates : dict of lists\n        Returns a dictionary of three lists of candidates.\n        Each of the lists contains dictionary candidate representation\n        (see get_next_candidate for the exact format). Each list may be\n        empty.\n        The three lists are:\n        \"finished\": The list of finished candidates.\n        \"workign\": The list of candidates on which workers are currently\n        working.\n        \"pending\": The list of not-yet finished candidates on which no\n        worker is currently working.\n        May return None or \"failed\" if failed.\n    \"\"\"", "\n", "_logger", ".", "debug", "(", "\"Ready to return all candidates for %s\"", ",", "experiment_id", ")", "\n", "candidates", "=", "lAss", ".", "get_candidates", "(", "experiment_id", ")", "\n", "result", "=", "{", "}", "\n", "for", "r", "in", "[", "\"finished\"", ",", "\"working\"", ",", "\"pending\"", "]", ":", "\n", "        ", "result", "[", "r", "]", "=", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "candidates", "[", "r", "]", ")", ":", "\n", "            ", "result", "[", "r", "]", ".", "append", "(", "x", ".", "to_dict", "(", ")", ")", "\n", "", "", "_logger", ".", "debug", "(", "\"Returning all candidates %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface._filter_data": [[406, 416], ["isinstance", "str"], "function", ["None"], ["", "def", "_filter_data", "(", "json", ")", ":", "\n", "    ", "\"\"\"\n    Filters json data.\n\n    More specifically, it converts strings to unicode in all json fields.\n    \"\"\"", "\n", "for", "k", "in", "json", ":", "\n", "        ", "if", "isinstance", "(", "json", "[", "k", "]", ",", "unicode", ")", ":", "\n", "            ", "json", "[", "k", "]", "=", "str", "(", "json", "[", "k", "]", ")", "\n", "", "", "return", "json", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.client_date_formatting": [[417, 424], ["dict", "time.strftime", "time.localtime"], "function", ["None"], ["", "@", "app", ".", "context_processor", "\n", "def", "client_date_formatting", "(", ")", ":", "\n", "    ", "def", "format_datetime", "(", "float_time", ")", ":", "\n", "        ", "if", "float_time", "is", "None", ":", "\n", "            ", "return", "\"\"", "\n", "", "return", "time", ".", "strftime", "(", "'%Y-%m-%dT%H:%M:%S'", ",", "time", ".", "localtime", "(", "float_time", ")", ")", "\n", "", "return", "dict", "(", "format_datetime", "=", "format_datetime", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.random_search.RandomSearch.__init__": [[28, 56], ["logging_utils.get_logger", "random_search.RandomSearch._logger.debug", "optimizer_params.get", "random_search.RandomSearch._logger.debug", "apsis.optimizers.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "experiment", ",", "optimizer_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the random search optimizer.\n\n        Parameters\n        ----------\n        experiment : Experiment\n            The experiment representing the current state of the execution.\n        optimizer_params : dict, optional\n            Dictionary of the optimizer parameters. If None, some standard\n            parameters will be assumed.\n            Available parameters are\n            \"random_state\" : randomstate, optional\n                The random state to use. See numpy random states.\n\n        Raises\n        ------\n        ValueError\n            Iff the experiment is not supported.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing random search. experiment is %s,\"", "\n", "\"optimizer_params %s\"", ",", "experiment", ",", "optimizer_params", ")", "\n", "if", "optimizer_params", "is", "None", ":", "\n", "            ", "optimizer_params", "=", "{", "}", "\n", "", "self", ".", "random_state", "=", "optimizer_params", ".", "get", "(", "\"random_state\"", ",", "None", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialized random state to %s\"", ",", "self", ".", "random_state", ")", "\n", "Optimizer", ".", "__init__", "(", "self", ",", "experiment", ",", "optimizer_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.random_search.RandomSearch.get_next_candidates": [[57, 64], ["random_search.RandomSearch._logger.debug", "range", "random_search.RandomSearch._logger.debug", "candidate_list.append", "random_search.RandomSearch._gen_one_candidate"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.random_search.RandomSearch._gen_one_candidate"], ["", "def", "get_next_candidates", "(", "self", ",", "num_candidates", "=", "1", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Returning next %s candidates\"", ",", "num_candidates", ")", "\n", "candidate_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_candidates", ")", ":", "\n", "            ", "candidate_list", ".", "append", "(", "self", ".", "_gen_one_candidate", "(", ")", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Generated candidates: %s\"", ",", "candidate_list", ")", "\n", "return", "candidate_list", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.random_search.RandomSearch._gen_one_candidate": [[65, 85], ["random_search.RandomSearch._logger.debug", "apsis.utilities.randomization.check_random_state", "random_search.RandomSearch._experiment.parameter_definitions.iteritems", "apsis.models.candidate.Candidate", "random_search.RandomSearch._logger.debug", "random_search.RandomSearch._gen_param_val"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.randomization.check_random_state", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.random_search.RandomSearch._gen_param_val"], ["", "def", "_gen_one_candidate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generates a single candidate.\n\n        This is done by generating parameter values for each of the\n        available parameters.\n\n        Returns\n        -------\n        candidate : Candidate\n            The generated candidate\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Generating single candidate.\"", ")", "\n", "self", ".", "random_state", "=", "check_random_state", "(", "self", ".", "random_state", ")", "\n", "value_dict", "=", "{", "}", "\n", "for", "key", ",", "param_def", "in", "self", ".", "_experiment", ".", "parameter_definitions", ".", "iteritems", "(", ")", ":", "\n", "            ", "value_dict", "[", "key", "]", "=", "self", ".", "_gen_param_val", "(", "param_def", ")", "\n", "", "generated_candidate", "=", "Candidate", "(", "value_dict", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Generated candidate: %s\"", ",", "generated_candidate", ")", "\n", "return", "generated_candidate", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.random_search.RandomSearch._gen_param_val": [[86, 104], ["param_def.warp_out", "list", "random_search.RandomSearch.random_state.uniform", "param_def.warped_size"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size"], ["", "def", "_gen_param_val", "(", "self", ",", "param_def", ")", ":", "\n", "        ", "\"\"\"\n        Returns a random parameter value for param_def.\n\n        This is done by generating warped_size many different 0-1 values, which\n        are then warped out.\n\n        Parameters\n        ----------\n        param_def : ParamDef\n            The parameter definition from which to choose one at random.\n        Returns\n        -------\n        param_val:\n            The generated parameter value.\n        \"\"\"", "\n", "return", "param_def", ".", "warp_out", "(", "list", "(", "\n", "self", ".", "random_state", ".", "uniform", "(", "0", ",", "1", ",", "param_def", ".", "warped_size", "(", ")", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.bayesian_optimization.BayesianOptimizer.__init__": [[64, 139], ["get_logger", "bayesian_optimization.BayesianOptimizer._logger.debug", "optimizer_params.get", "optimizer_params.get", "apsis.utilities.randomization.check_random_state", "optimizer_params.get", "optimizer_params.get", "bayesian_optimization.BayesianOptimizer._logger.debug", "optimizer_params.get", "optimizer_params.get", "bayesian_optimization.BayesianOptimizer._logger.debug", "apsis.optimizers.random_search.RandomSearch", "bayesian_optimization.BayesianOptimizer._logger.debug", "apsis.optimizers.optimizer.Optimizer.__init__", "bayesian_optimization.BayesianOptimizer._logger.debug", "optimizer_params.get", "isinstance", "optimizer_params.get", "apsis.utilities.acquisition_utils.check_acquisition", "bayesian_optimization.BayesianOptimizer._logger.debug", "optimizer_params.get", "bayesian_optimization.BayesianOptimizer._logger.debug", "optimizer_params.get"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.randomization.check_random_state", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.acquisition_utils.check_acquisition"], ["def", "__init__", "(", "self", ",", "experiment", ",", "optimizer_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a bayesian optimizer.\n        Parameters\n        ----------\n        experiment : Experiment\n            The experiment for which to optimize.\n        optimizer_arguments: dict of string keys\n            Sets the possible arguments for this optimizer. Available are:\n            \"initial_random_runs\" : int, optional\n                The number of initial random runs before using the GP. Default\n                is 10.\n            \"random_state\" : scipy random state, optional\n                The scipy random state or object to initialize one. Default is\n                None.\n            \"acquisition_hyperparameters\" : dict, optional\n                dictionary of acquisition-function hyperparameters\n            \"num_gp_restarts\" : int\n                GPy's optimization requires restarts to find a good solution.\n                This parameter controls this. Default is 10.\n            \"acquisition\" : AcquisitionFunction\n                The acquisition function to use. Default is\n                ExpectedImprovement.\n            \"num_precomputed\" : int\n                The number of points that should be kept precomputed for faster\n                multiple workers.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing bayesian optimizer. Experiment is %s,\"", "\n", "\" optimizer_params %s\"", ",", "experiment", ",", "\n", "optimizer_params", ")", "\n", "if", "optimizer_params", "is", "None", ":", "\n", "            ", "optimizer_params", "=", "{", "}", "\n", "\n", "", "self", ".", "random_state", "=", "optimizer_params", ".", "get", "(", "\"random_state\"", ",", "None", ")", "\n", "self", ".", "initial_random_runs", "=", "optimizer_params", ".", "get", "(", "\n", "'initial_random_runs'", ",", "self", ".", "initial_random_runs", ")", "\n", "self", ".", "random_state", "=", "check_random_state", "(", "\n", "optimizer_params", ".", "get", "(", "'random_state'", ",", "None", ")", ")", "\n", "self", ".", "acquisition_hyperparams", "=", "optimizer_params", ".", "get", "(", "\n", "'acquisition_hyperparams'", ",", "None", ")", "\n", "self", ".", "num_gp_restarts", "=", "optimizer_params", ".", "get", "(", "\n", "'num_gp_restarts'", ",", "self", ".", "num_gp_restarts", ")", "\n", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialized relevant parameters. \"", "\n", "\"initial_random_runs is %s, random_state is %s, \"", "\n", "\"acquisition_hyperparams %s, num_gp_restarts %s\"", ",", "\n", "self", ".", "initial_random_runs", ",", "self", ".", "random_state", ",", "\n", "self", ".", "acquisition_hyperparams", ",", "self", ".", "num_gp_restarts", ")", "\n", "\n", "if", "not", "isinstance", "(", "optimizer_params", ".", "get", "(", "'acquisition'", ")", ",", "\n", "AcquisitionFunction", ")", ":", "\n", "            ", "self", ".", "acquisition_function", "=", "optimizer_params", ".", "get", "(", "\"acquisition\"", ",", "\n", "ExpectedImprovement", ")", "\n", "self", ".", "acquisition_function", "=", "check_acquisition", "(", "\n", "acquisition", "=", "self", ".", "acquisition_function", ",", "\n", "acquisition_params", "=", "self", ".", "acquisition_hyperparams", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"acquisition is no AcquisitionFunction. Set \"", "\n", "\"it to %s\"", ",", "self", ".", "acquisition_function", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "acquisition_function", "=", "optimizer_params", ".", "get", "(", "\"acquisition\"", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Loaded acquisition function from \"", "\n", "\"optimizer_params. Is %s\"", ",", "\n", "self", ".", "acquisition_function", ")", "\n", "", "self", ".", "kernel_params", "=", "optimizer_params", ".", "get", "(", "\"kernel_params\"", ",", "{", "}", ")", "\n", "self", ".", "kernel", "=", "optimizer_params", ".", "get", "(", "\"kernel\"", ",", "\"matern52\"", ")", "\n", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Kernel details: Kernel is %s, kernel_params %s\"", ",", "\n", "self", ".", "kernel", ",", "self", ".", "kernel_params", ")", "\n", "\n", "self", ".", "random_searcher", "=", "RandomSearch", "(", "experiment", ",", "optimizer_params", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialized required RandomSearcher; is %s\"", ",", "\n", "self", ".", "random_searcher", ")", "\n", "Optimizer", ".", "__init__", "(", "self", ",", "experiment", ",", "optimizer_params", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Finished initializing bayOpt.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates": [[140, 170], ["bayesian_optimization.BayesianOptimizer._logger.debug", "bayesian_optimization.BayesianOptimizer.acquisition_function.compute_proposals", "bayesian_optimization.BayesianOptimizer._logger.debug", "bayesian_optimization.BayesianOptimizer._logger.debug", "len", "bayesian_optimization.BayesianOptimizer.random_searcher.get_next_candidates", "bayesian_optimization.BayesianOptimizer._logger.debug", "bayesian_optimization.BayesianOptimizer._logger.debug", "bayesian_optimization.BayesianOptimizer.update", "apsis.models.candidate.Candidate", "candidates.append", "bayesian_optimization.BayesianOptimizer._experiment.warp_pt_out"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.compute_proposals", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.warp_pt_out"], ["", "def", "get_next_candidates", "(", "self", ",", "num_candidates", "=", "1", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Returning next %s candidates\"", ",", "num_candidates", ")", "\n", "if", "len", "(", "self", ".", "_experiment", ".", "candidates_finished", ")", "<", "self", ".", "initial_random_runs", ":", "\n", "# we do a random search.", "\n", "            ", "random_candidates", "=", "self", ".", "random_searcher", ".", "get_next_candidates", "(", "\n", "num_candidates", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Still in the random run phase. Returning %s\"", ",", "\n", "random_candidates", ")", "\n", "return", "random_candidates", "\n", "", "candidates", "=", "[", "]", "\n", "if", "self", ".", "gp", "is", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"No gp available. Updating with %s\"", ",", "\n", "self", ".", "_experiment", ")", "\n", "self", ".", "update", "(", "self", ".", "_experiment", ")", "\n", "\n", "", "new_candidate_points", "=", "self", ".", "acquisition_function", ".", "compute_proposals", "(", "\n", "self", ".", "gp", ",", "self", ".", "_experiment", ",", "number_proposals", "=", "num_candidates", ",", "\n", "return_max", "=", "self", ".", "return_max", "\n", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Generated new candidate points. Are %s\"", ",", "\n", "new_candidate_points", ")", "\n", "self", ".", "return_max", "=", "False", "\n", "\n", "for", "point_and_value", "in", "new_candidate_points", ":", "\n", "# get the the candidate point which is the first entry in the tuple.", "\n", "            ", "point_candidate", "=", "Candidate", "(", "self", ".", "_experiment", ".", "warp_pt_out", "(", "\n", "point_and_value", "[", "0", "]", ")", ")", "\n", "candidates", ".", "append", "(", "point_candidate", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Candidates extracted. Returning %s\"", ",", "candidates", ")", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.bayesian_optimization.BayesianOptimizer.update": [[171, 199], ["bayesian_optimization.BayesianOptimizer._logger.debug", "apsis.create_cand_matrix_vector", "bayesian_optimization.BayesianOptimizer._check_kernel", "bayesian_optimization.BayesianOptimizer._logger.debug", "bayesian_optimization.BayesianOptimizer._logger.log", "GPy.models.GPRegression", "bayesian_optimization.BayesianOptimizer.gp.constrain_positive", "bayesian_optimization.BayesianOptimizer.gp.constrain_bounded", "bayesian_optimization.BayesianOptimizer._logger.debug", "bayesian_optimization.BayesianOptimizer.gp.optimize_restarts", "bayesian_optimization.BayesianOptimizer._logger.debug", "len", "bayesian_optimization.BayesianOptimizer._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.acquisition_utils.create_cand_matrix_vector", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.bayesian_optimization.BayesianOptimizer._check_kernel"], ["", "def", "update", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Updating bayOpt with %s\"", ",", "experiment", ")", "\n", "self", ".", "_experiment", "=", "experiment", "\n", "if", "(", "len", "(", "self", ".", "_experiment", ".", "candidates_finished", ")", "<", "\n", "self", ".", "initial_random_runs", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Less than initial_random_runs. No refit \"", "\n", "\"necessary.\"", ")", "\n", "return", "\n", "\n", "", "self", ".", "return_max", "=", "True", "\n", "\n", "candidate_matrix", ",", "results_vector", "=", "acq_utils", ".", "create_cand_matrix_vector", "(", "\n", "experiment", ",", "self", ".", "treat_failed", ")", "\n", "\n", "self", ".", "kernel", "=", "self", ".", "_check_kernel", "(", "self", ".", "kernel", ",", "candidate_matrix", ".", "shape", "[", "1", "]", ",", "\n", "kernel_params", "=", "self", ".", "kernel_params", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Checked kernel. Kernel is %s\"", ",", "self", ".", "kernel", ")", "\n", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Refitting gp with cand %s and results %s\"", "\n", "%", "(", "candidate_matrix", ",", "results_vector", ")", ")", "\n", "self", ".", "gp", "=", "GPy", ".", "models", ".", "GPRegression", "(", "candidate_matrix", ",", "results_vector", ",", "\n", "self", ".", "kernel", ")", "\n", "self", ".", "gp", ".", "constrain_positive", "(", "\"*\"", ")", "\n", "self", ".", "gp", ".", "constrain_bounded", "(", "0.1", ",", "1", ",", "warning", "=", "False", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Starting gp optimize.\"", ")", "\n", "self", ".", "gp", ".", "optimize_restarts", "(", "num_restarts", "=", "self", ".", "num_gp_restarts", ",", "\n", "verbose", "=", "False", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"gp optimize finished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.bayesian_optimization.BayesianOptimizer._check_kernel": [[200, 250], ["bayesian_optimization.BayesianOptimizer._logger.debug", "isinstance", "isinstance", "ValueError", "bayesian_optimization.BayesianOptimizer._logger.debug", "str", "isinstance", "bayesian_optimization.BayesianOptimizer._logger.debug", "bayesian_optimization.BayesianOptimizer._logger.debug", "kernel_params.get", "bayesian_optimization.BayesianOptimizer._logger.debug"], "methods", ["None"], ["", "def", "_check_kernel", "(", "self", ",", "kernel", ",", "dimension", ",", "kernel_params", ")", ":", "\n", "        ", "\"\"\"\n        Checks and initializes a kernel.\n\n        Parameters\n        ----------\n        kernel : kernel or string representation\n            The kernel to use. If a kernel, is returned like that. If not, a\n            new kernel is initialized with the respective parameters.\n        dimension : int\n            The dimensions of the new kernel.\n        kernel_params : dict\n            The dictionary of kernel parameters. Currently supported:\n            \"ARD\" : bool, optional\n                Whether to use ARD. Default is True.\n\n        Returns\n        -------\n        kernel : GPy.kern\n            A GPy kernel.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Checking kernel. Kernel is %s, dimension %s, \"", "\n", "\"kernel_params %s\"", ",", "kernel", ",", "dimension", ",", "\n", "kernel_params", ")", "\n", "if", "(", "isinstance", "(", "kernel", ",", "GPy", ".", "kern", ".", "Kern", ")", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Already instance. No changes.\"", ")", "\n", "return", "kernel", "\n", "\n", "", "translation_dict", "=", "{", "\n", "\"matern52\"", ":", "GPy", ".", "kern", ".", "Matern52", ",", "\n", "\"rbf\"", ":", "GPy", ".", "kern", ".", "RBF", "\n", "}", "\n", "\n", "if", "isinstance", "(", "kernel", ",", "unicode", ")", ":", "\n", "            ", "kernel", "=", "str", "(", "kernel", ")", "\n", "\n", "", "if", "isinstance", "(", "kernel", ",", "str", ")", "and", "kernel", "in", "translation_dict", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Is string and can be translated. Kernel is %s\"", ",", "\n", "kernel", ")", "\n", "if", "kernel_params", ".", "get", "(", "'ARD'", ",", "None", ")", "is", "None", ":", "\n", "                ", "self", ".", "_logger", ".", "debug", "(", "\"ARD unknown, setting to True.\"", ")", "\n", "kernel_params", "[", "'ARD'", "]", "=", "True", "\n", "\n", "", "constructed_kernel", "=", "translation_dict", "[", "kernel", "]", "(", "dimension", ",", "\n", "**", "kernel_params", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Constructed kernel. Is %s\"", ",", "constructed_kernel", ")", "\n", "return", "constructed_kernel", "\n", "\n", "", "raise", "ValueError", "(", "\"%s is not a kernel or string representing one!\"", "\n", "%", "kernel", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer.__init__": [[40, 92], ["apsis.utilities.logging_utils.get_logger", "optimizer_params.get", "optimizer.Optimizer._is_experiment_supported", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer._is_experiment_supported"], ["def", "__init__", "(", "self", ",", "experiment", ",", "optimizer_params", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the optimizer.\n\n        Parameters\n        ----------\n        experiment : Experiment\n            The experiment representing the current state of the execution.\n        optimizer_params : dict, optional\n            Dictionary of the optimizer parameters. If None, some standard\n            parameters will be assumed.\n            One existing parameter is 'treat_failed', which changes the\n            treatment of failed candidates. Possible is\n                - 'ignore': Ignores the failed parameters\n                - 'fixed_value': Changes all occurences of failed values\n                    to a fixed value. Default value is 1e6 or 1e-6.\n                - 'worst_mult': Changes all occurences of failed values to a\n                    fixed multiplied of the worst result. Specifically, the\n                    new value will be (worst_value - best_value) * x +\n                    worst_value. The default. Default value is x=10.\n            All of these can either be specified as strings (and use a\n            standard value) or as tuples, in which case the first entry is\n            treated as the string and the second as the value for the parameter.\n\n        Raises\n        ------\n        ValueError\n            Iff the experiment is not supported.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "if", "not", "self", ".", "_is_experiment_supported", "(", "experiment", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Experiment contains unsupported parameters. \"", "\n", "\"Optimizer %s supports %s, experiment parameters \"", "\n", "\"are %s.\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "SUPPORTED_PARAM_TYPES", ",", "\n", "experiment", ".", "parameter_definitions", ")", ")", "\n", "", "self", ".", "_experiment", "=", "experiment", "\n", "if", "optimizer_params", "is", "None", ":", "\n", "            ", "optimizer_params", "=", "{", "}", "\n", "", "self", ".", "treat_failed", "=", "optimizer_params", ".", "get", "(", "\"treat_failed\"", ",", "\"worst_mult\"", ")", "\n", "second_value", "=", "None", "\n", "if", "not", "isinstance", "(", "self", ".", "treat_failed", ",", "tuple", ")", ":", "\n", "            ", "if", "self", ".", "treat_failed", "==", "\"ignore\"", ":", "\n", "                ", "second_value", "=", "False", "\n", "", "elif", "self", ".", "treat_failed", "==", "\"fixed_value\"", ":", "\n", "                ", "if", "self", ".", "_experiment", ".", "minimization_problem", ":", "\n", "                    ", "second_value", "=", "1e6", "\n", "", "else", ":", "\n", "                    ", "second_value", "=", "1e-6", "\n", "", "", "elif", "self", ".", "treat_failed", "==", "\"worst_mult\"", ":", "\n", "                ", "second_value", "=", "2", "\n", "", "self", ".", "treat_failed", "=", "(", "self", ".", "treat_failed", ",", "second_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer.update": [[93, 118], ["optimizer.Optimizer._is_experiment_supported", "ValueError"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer._is_experiment_supported"], ["", "", "def", "update", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Updates the experiment.\n\n        Implementation note: This function (for the base class) only sets\n        the new _experiment. Subclasses can call it to ensure correct setting\n        of the experiment parameter.\n\n        Parameters\n        ----------\n        experiment : Experiment\n            The experiment representing the current state of the execution.\n\n        Raises\n        ------\n        ValueError\n            Iff the experiment is not supported.\n        \"\"\"", "\n", "if", "not", "self", ".", "_is_experiment_supported", "(", "experiment", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Experiment contains unsupported parameters. \"", "\n", "\"Optimizer %s supports %s, experiment parameters \"", "\n", "\"are %s.\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "SUPPORTED_PARAM_TYPES", ",", "\n", "experiment", ".", "parameter_definitions", ")", ")", "\n", "", "self", ".", "_experiment", "=", "experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer.get_next_candidates": [[120, 139], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_next_candidates", "(", "self", ",", "num_candidates", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Returns a number of candidates.\n\n        Parameters\n        ----------\n        num_candidates : strictly positive int, optional\n            The maximum number of candidates returned. Note that there may\n            be less than that in the list.\n\n        Returns\n        -------\n        candidates : list of candidates\n            The list of candidates to evaluate next. May be None (which\n            represents no current candidates being available), and may have\n            between one and num_candidates candidates.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer.exit": [[140, 152], ["None"], "methods", ["None"], ["", "def", "exit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Cleanly exits this optimizer.\n\n        Note that, since optimizers may be of a multiprocessing or\n        distributed nature, this function is important for stopping.\n\n        Internal Note: This function, which will be inherited, does nothing. If\n         an optimizer does not require another any other behaviour, it will not\n         be necessary to redefine it.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer._is_experiment_supported": [[153, 178], ["optimizer.Optimizer._logger.debug", "experiment.parameter_definitions.iteritems", "optimizer.Optimizer._logger.debug", "optimizer.Optimizer._is_supported_param_type", "optimizer.Optimizer._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer._is_supported_param_type"], ["", "def", "_is_experiment_supported", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether all parameter types in experiment are supported by this\n        optimizer.\n\n        Parameters\n        ----------\n        experiment : Experiment\n            The experiment to test.\n\n        Returns\n        -------\n        supported : bool\n            False iff one or more of experiment's parameter definitions are not\n            supported.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Testing whether experiment %s is supported.\"", ",", "\n", "experiment", ")", "\n", "for", "name", ",", "pd", "in", "experiment", ".", "parameter_definitions", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "_is_supported_param_type", "(", "pd", ")", ":", "\n", "                ", "self", ".", "_logger", ".", "debug", "(", "\"It is not.\"", ")", "\n", "return", "False", "\n", "\n", "", "", "self", ".", "_logger", ".", "debug", "(", "\"It is.\"", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.Optimizer._is_supported_param_type": [[179, 203], ["optimizer.Optimizer._logger.debug", "isinstance", "optimizer.Optimizer._logger.debug", "isinstance", "optimizer.Optimizer._logger.debug"], "methods", ["None"], ["", "def", "_is_supported_param_type", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether a certain parameter is supported by the optimizer.\n\n        Parameters\n        ----------\n        param :\n            The parameter to be tested\n\n        Result\n        ------\n        is_supported : bool\n            True iff param is supported by this optimizer.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Testing whether param %s is supported.\"", ",", "\n", "param", ")", "\n", "if", "isinstance", "(", "self", ".", "SUPPORTED_PARAM_TYPES", ",", "list", ")", ":", "\n", "            ", "for", "sup", "in", "self", ".", "SUPPORTED_PARAM_TYPES", ":", "\n", "                ", "if", "isinstance", "(", "param", ",", "sup", ")", ":", "\n", "                    ", "self", ".", "_logger", ".", "debug", "(", "\"It is.\"", ")", "\n", "return", "True", "\n", "\n", "", "", "", "self", ".", "_logger", ".", "debug", "(", "\"It is not.\"", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.__init__": [[235, 275], ["apsis.utilities.logging_utils.get_logger", "optimizer.QueueBasedOptimizer._logger.debug", "Queue.Queue", "Queue.Queue", "optimizer.QueueBasedOptimizer._logger.debug", "threading.Thread", "threading.Thread.start", "optimizer.QueueBasedOptimizer._logger.debug", "optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "optimizer_class", ",", "experiment", ",", "optimizer_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a new QueueBasedOptimizer class.\n\n        Parameters\n        ----------\n        optimizer_class : an Optimizer subclass\n            The class of optimizer this should abstract from. The optimizer is\n            then initialized here.\n        experiment : Experiment\n            The experiment representing the current state of the execution.\n        optimizer_params : dict, optional\n            Dictionary of the optimizer parameters. If None, some standard\n            parameters will be assumed.\n            Supports the parameter \"min_candidates\", which sets the number\n            of candidates that should be kept ready. Default is 5.\n            Supports the parameter \"update_time\", which sets the minimum time\n            in seconds between checking for updates. Default is 0.1s\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing new QueueBasedLogger. \"", "\n", "\"optimizer_class is %s, experiment %s, \"", "\n", "\"optimizer_params %s\"", ",", "optimizer_class", ",", "\n", "experiment", ",", "optimizer_params", ")", "\n", "self", ".", "_optimizer_in_queue", "=", "Queue", ".", "Queue", "(", ")", "\n", "self", ".", "_optimizer_out_queue", "=", "Queue", ".", "Queue", "(", ")", "\n", "self", ".", "_optimizer_class", "=", "optimizer_class", "\n", "self", ".", "SUPPORTED_PARAM_TYPES", "=", "optimizer_class", ".", "SUPPORTED_PARAM_TYPES", "\n", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialized queues. in_queue is %s, out_queue %s\"", ",", "\n", "self", ".", "_optimizer_in_queue", ",", "self", ".", "_optimizer_out_queue", ")", "\n", "\n", "p", "=", "threading", ".", "Thread", "(", "target", "=", "dispatch_queue_backend", ",", "\n", "args", "=", "(", "optimizer_class", ",", "optimizer_params", ",", "\n", "experiment", ",", "\n", "self", ".", "_optimizer_out_queue", ",", "\n", "self", ".", "_optimizer_in_queue", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Started thread.\"", ")", "\n", "super", "(", "QueueBasedOptimizer", ",", "self", ")", ".", "__init__", "(", "experiment", ",", "optimizer_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates": [[276, 288], ["optimizer.QueueBasedOptimizer._logger.debug", "optimizer.QueueBasedOptimizer._logger.debug", "range", "optimizer.QueueBasedOptimizer._optimizer_out_queue.get_nowait", "next_candidates.append", "optimizer.QueueBasedOptimizer._logger.debug"], "methods", ["None"], ["", "def", "get_next_candidates", "(", "self", ",", "num_candidates", "=", "1", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Returning next %s candidates\"", ",", "num_candidates", ")", "\n", "next_candidates", "=", "[", "]", "\n", "try", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_candidates", ")", ":", "\n", "                ", "new_candidate", "=", "self", ".", "_optimizer_out_queue", ".", "get_nowait", "(", ")", "\n", "next_candidates", ".", "append", "(", "new_candidate", ")", "\n", "", "", "except", "Queue", ".", "Empty", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Queue of new candidates is empty.\"", ")", "\n", "pass", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Generated next_candidates %s\"", ",", "next_candidates", ")", "\n", "return", "next_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.name": [[289, 295], ["isinstance"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "_optimizer_class", ",", "basestring", ")", ":", "\n", "            ", "return", "self", ".", "_optimizer_class", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_optimizer_class", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.update": [[296, 300], ["optimizer.QueueBasedOptimizer._logger.debug", "optimizer.QueueBasedOptimizer._optimizer_in_queue.put"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Putting experiment %s into the queue\"", ",", "\n", "experiment", ")", "\n", "self", ".", "_optimizer_in_queue", ".", "put", "(", "experiment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.exit": [[301, 311], ["optimizer.QueueBasedOptimizer._logger.debug", "optimizer.QueueBasedOptimizer._logger.debug", "optimizer.QueueBasedOptimizer._optimizer_in_queue.put"], "methods", ["None"], ["", "def", "exit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Also closes the optimizer.\n\n        It does so by putting \"exit\" into the in_queue and closing both queues.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Exiting.\"", ")", "\n", "if", "self", ".", "_optimizer_in_queue", "is", "not", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Put exit into the optimizer queue.\"", ")", "\n", "self", ".", "_optimizer_in_queue", ".", "put", "(", "\"exit\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend.__init__": [[346, 391], ["apsis.utilities.logging_utils.get_logger", "optimizer.QueueBackend._logger.debug", "optimizer_params.get", "optimizer_params.get", "optimizer_class", "optimizer.QueueBackend._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["def", "__init__", "(", "self", ",", "optimizer_class", ",", "experiment", ",", "out_queue", ",", "in_queue", ",", "\n", "optimizer_params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes this backend.\n\n        Parameters\n        ----------\n        optimizer_class : an Optimizer subclass\n            The class of optimizer this should abstract from. The optimizer is\n            then initialized here.\n        experiment : Experiment\n            The experiment representing the current state of the execution.\n        optimizer_params : dict, optional\n            Dictionary of the optimizer parameters. If None, some standard\n            parameters will be assumed.\n            Supports the parameter \"min_candidates\", which sets the number\n            of candidates that should be kept ready.\n        out_queue : Queue\n            The queue on which to put the candidates.\n        in_queue : Queue\n            The queue on which to receive the new experiments.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing queue backend. Parameters: \"", "\n", "\"optimizer_class %s, experiment %s, out_queue %s, \"", "\n", "\"in_queue %s, optimizer_params %s\"", ",", "\n", "optimizer_class", ",", "experiment", ",", "out_queue", ",", "in_queue", ",", "\n", "optimizer_params", ")", "\n", "\n", "self", ".", "_out_queue", "=", "out_queue", "\n", "self", ".", "_in_queue", "=", "in_queue", "\n", "if", "optimizer_params", "is", "None", ":", "\n", "            ", "optimizer_params", "=", "{", "}", "\n", "", "self", ".", "_min_candidates", "=", "optimizer_params", ".", "get", "(", "\"min_candidates\"", ",", "5", ")", "\n", "self", ".", "_update_time", "=", "optimizer_params", ".", "get", "(", "\"update_time\"", ",", "0.1", ")", "\n", "self", ".", "_optimizer", "=", "optimizer_class", "(", "experiment", ",", "optimizer_params", ")", "\n", "self", ".", "_exited", "=", "False", "\n", "self", ".", "_experiment", "=", "experiment", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Had set the parameters to: out_queue is %s, \"", "\n", "\"in_queue %s, optimizer_params %s, \"", "\n", "\"min_candidates %s, update_time %s,\"", "\n", "\" optimizer %s, exited %s, experiment %s\"", ",", "\n", "out_queue", ",", "in_queue", ",", "optimizer_params", ",", "\n", "self", ".", "_min_candidates", ",", "self", ".", "_update_time", ",", "\n", "self", ".", "_optimizer", ",", "self", ".", "_exited", ",", "self", ".", "_experiment", ")", "\n", "#multiprocessing.Process.__init__(self)", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend.run": [[393, 409], ["optimizer.QueueBackend._check_generation", "optimizer.QueueBackend._check_update", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_generation", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_update"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The run function of this process, checking for new updates.\n\n        Every _update_time seconds, it checks both the necessity of a new\n        generation of candidates, and whether an update is necessary.\n\n        It also makes sure all queues will be closed.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "while", "not", "self", ".", "_exited", ":", "\n", "                ", "self", ".", "_check_generation", "(", ")", "\n", "self", ".", "_check_update", "(", ")", "\n", "sleep", "(", "0.1", ")", "\n", "", "", "finally", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_update": [[410, 445], ["optimizer.QueueBackend._in_queue.empty", "optimizer.QueueBackend._optimizer.update", "optimizer.QueueBackend._logger.debug", "optimizer.QueueBackend._in_queue.get_nowait", "optimizer.QueueBackend._logger.debug", "optimizer.QueueBackend._logger.debug", "optimizer.QueueBackend._logger.debug", "optimizer.QueueBackend._out_queue.empty", "optimizer.QueueBackend._out_queue.get_nowait"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["", "", "def", "_check_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This checks for the availability of updates.\n\n        Specifically, it does the following:\n        If the in_queue is not empty (that is, there are one or more\n        experiments available) it takes the last, most recently added. If\n        one of the elements is \"exit\", it will exit instead.\n        The latest experiment is then used to call the update function of the\n        abstracted optimizer.\n        Additionally, it will empty the out_queue, since we assume it has more,\n        better information available.\n        \"\"\"", "\n", "new_update", "=", "None", "\n", "while", "not", "self", ".", "_in_queue", ".", "empty", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "new_update", "=", "self", ".", "_in_queue", ".", "get_nowait", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Received new update: %s\"", ",", "new_update", ")", "\n", "", "except", "Queue", ".", "Empty", ":", "\n", "                ", "pass", "\n", "", "if", "new_update", "==", "\"exit\"", ":", "\n", "                ", "self", ".", "_logger", ".", "debug", "(", "\"Update received was exit.\"", ")", "\n", "self", ".", "_exited", "=", "True", "\n", "return", "\n", "", "", "if", "new_update", "is", "not", "None", ":", "\n", "# clear the out queue. We'll soon have new information.", "\n", "            ", "try", ":", "\n", "                ", "while", "not", "self", ".", "_out_queue", ".", "empty", "(", ")", ":", "\n", "                    ", "self", ".", "_out_queue", ".", "get_nowait", "(", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Cleared out the update queue.\"", ")", "\n", "", "except", "Queue", ".", "Empty", ":", "\n", "                ", "pass", "\n", "", "self", ".", "_experiment", "=", "new_update", "\n", "self", ".", "_optimizer", ".", "update", "(", "self", ".", "_experiment", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Finished updating.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_generation": [[446, 467], ["optimizer.QueueBackend._out_queue.empty", "optimizer.QueueBackend._optimizer.get_next_candidates", "optimizer.QueueBackend._logger.debug", "optimizer.QueueBackend._out_queue.put_nowait"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates"], ["", "", "def", "_check_generation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This checks whether new candidates should be generated.\n\n        Specifically, it tests whether less than min_candidates are available\n        in the out_queue. If so, it will (via optimizer.get_next_candidates)\n        try to add min_candidates candidates.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "if", "(", "self", ".", "_out_queue", ".", "empty", "(", ")", "or", "\n", "self", ".", "_out_queue", ".", "qsize", "<", "self", ".", "_min_candidates", ")", ":", "\n", "                ", "new_candidates", "=", "self", ".", "_optimizer", ".", "get_next_candidates", "(", "\n", "num_candidates", "=", "self", ".", "_min_candidates", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Needed to generate new candidates. \"", "\n", "\"Generated %s\"", ",", "new_candidates", ")", "\n", "if", "new_candidates", "is", "None", ":", "\n", "                    ", "return", "\n", "", "for", "c", "in", "new_candidates", ":", "\n", "                    ", "self", ".", "_out_queue", ".", "put_nowait", "(", "c", ")", "\n", "", "", "", "except", "Queue", ".", "Full", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.dispatch_queue_backend": [[469, 474], ["optimizer.QueueBackend", "optimizer.QueueBackend.run"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend.run"], ["", "", "", "def", "dispatch_queue_backend", "(", "optimizer_class", ",", "optimizer_params", ",", "experiment", ",", "\n", "out_queue", ",", "in_queue", ")", ":", "\n", "    ", "optimizer", "=", "QueueBackend", "(", "optimizer_class", ",", "experiment", ",", "out_queue", ",", "\n", "in_queue", ",", "optimizer_params", ")", "\n", "optimizer", ".", "run", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.__init__": [[69, 86], ["apsis.utilities.logging_utils.get_logger", "acquisition_functions.AcquisitionFunction._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["def", "__init__", "(", "self", ",", "params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the acquisition function.\n\n        Parameters\n        ----------\n        params : dict or None, optional\n            The dictionary of parameters defining the behaviour of the\n            acquisition function. Supports at least max_searcher and\n            multi_searcher.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing acquisition function. params is %s\"", ",", "\n", "params", ")", "\n", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "{", "}", "\n", "", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.evaluate": [[87, 107], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "evaluate", "(", "self", ",", "x", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates the gp on the point x.\n\n        Parameters\n        ----------\n        x : dict\n            Dictionary of the parameters on point x\n        gp : GPy gp\n            The gp on which to evaluate\n        experiment : Experiment\n            The experiment for further information.\n\n        Returns\n        -------\n        eval : float\n            The value of the acquisition function for the gp on point x.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._compute_minimizing_evaluate": [[108, 133], ["acquisition_functions.AcquisitionFunction._logger.log", "acquisition_functions.AcquisitionFunction.evaluate", "acquisition_functions.AcquisitionFunction._logger.log", "acquisition_functions.AcquisitionFunction._logger.log"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ProbabilityOfImprovement.evaluate"], ["", "def", "_compute_minimizing_evaluate", "(", "self", ",", "x", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        One problem is that, as a standard, scipy.optimize only searches\n        minima. This means we have to convert each acquisition function to\n        the minima meaning the best result.\n        This the function to do so. Each compute_max can therefore just call\n        this function, and know that the returned function has the best value\n        as a global minimum.\n        Whether to actually return the negative evaluate or not is set by the\n        self.minimizes parameter. If true, it will not change the sign.\n\n        Function signature is as evaluate.\n        \"\"\"", "\n", "# Warning: Logs very often if activated.", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Computing minimizing evaluate. x is %s, gp is %s,\"", "\n", "\"experiment is %s\"", ",", "x", ",", "gp", ",", "experiment", ")", "\n", "value", "=", "self", ".", "evaluate", "(", "x", ",", "gp", ",", "experiment", ")", "\n", "if", "self", ".", "minimizes", ":", "\n", "# Warning: Logs very often if activated.", "\n", "            ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Is minimizing, returning %s\"", ",", "value", ")", "\n", "return", "value", "\n", "", "else", ":", "\n", "# Warning: Logs very often if activated.", "\n", "            ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Is maximizing, returning %s\"", ",", "-", "value", ")", "\n", "return", "-", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.compute_proposals": [[134, 227], ["acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction.params.get", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction.params.get", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction._logger.debug", "getattr", "acquisition_functions.AcquisitionFunction._logger.debug", "getattr.", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction._logger.log", "proposals.append", "acquisition_functions.AcquisitionFunction._logger.log", "acquisition_functions.AcquisitionFunction._logger.debug", "getattr", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction.", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction._logger.log", "proposals.extend", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction.params.get", "acquisition_functions.AcquisitionFunction._logger.debug", "good_results.extend", "acquisition_functions.AcquisitionFunction._logger.log", "good_results.extend", "acquisition_functions.AcquisitionFunction._logger.log"], "methods", ["None"], ["", "", "def", "compute_proposals", "(", "self", ",", "gp", ",", "experiment", ",", "number_proposals", "=", "1", ",", "\n", "return_max", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Computes up to number_proposals proposals.\n\n        If return_max, the first entry in the returned list will be the\n        proposal maximizing the acquisition function.\n\n        Parameters\n        ----------\n        gp : GPy.gp\n            The gp.\n\n        experiment : experiment\n            The current state of the experiment.\n\n        number_proposals : int, optional\n            The maximum number of proposals returned. The acquisition function\n             will try its best to return that many proposals, but this cannot\n             be guaranteed. By default, returns one proposal.\n\n        return_max : bool, optional\n            Whether to try and find the maximum of the proposal. If true (the\n            default) will do another evaluation step).\n\n        Returns\n        -------\n        proposals : list of tuples\n            A list of tuples. The first entry of each is a dictionary with the\n            parameter name and a 0-1 hypercube entry representing the warped\n            parameter value. The second entry is the acquisition function score\n            at that point. May return an empty list.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Computing proposals. gp is %s, experiment is %s, \"", "\n", "\"number_proposals %s, return_max %s\"", ",", "\n", "gp", ",", "experiment", ",", "number_proposals", ",", "return_max", ")", "\n", "max_searcher", "=", "\"none\"", "\n", "multi_searcher", "=", "\"none\"", "\n", "if", "return_max", ":", "\n", "            ", "max_searcher", "=", "self", ".", "params", ".", "get", "(", "\"max_searcher\"", ",", "\n", "self", ".", "default_max_searcher", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Returning maximum. Max_searcher is %s\"", ",", "\n", "max_searcher", ")", "\n", "if", "number_proposals", ">", "1", ":", "\n", "                ", "multi_searcher", "=", "self", ".", "params", ".", "get", "(", "\"multi_searcher\"", ",", "\n", "self", ".", "default_multi_searcher", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Also returning multiple results; \"", "\n", "\"multi_searcher is %s\"", ",", "multi_searcher", ")", "\n", "", "", "else", ":", "\n", "            ", "multi_searcher", "=", "self", ".", "params", ".", "get", "(", "\"multi_searcher\"", ",", "\n", "self", ".", "default_multi_searcher", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Not returning max. multi_searcher is %s\"", ",", "\n", "multi_searcher", ")", "\n", "\n", "", "proposals", "=", "[", "]", "\n", "\n", "good_results", "=", "[", "]", "\n", "\n", "if", "max_searcher", "!=", "\"none\"", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Beginning to look for max.\"", ")", "\n", "max_searcher", "=", "getattr", "(", "self", ",", "\"max_searcher_\"", "+", "max_searcher", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Constructed max_search function. max_searcher \"", "\n", "\"is %s\"", ",", "max_searcher", ")", "\n", "max_prop", ",", "good_results_cur", "=", "max_searcher", "(", "gp", ",", "experiment", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Finished search. max_prop is %s\"", ",", "max_prop", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"good results cur is %s\"", ",", "good_results_cur", ")", "\n", "if", "good_results_cur", "is", "not", "None", ":", "\n", "                ", "good_results", ".", "extend", "(", "good_results_cur", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Extended known good results. Now %s\"", ",", "\n", "good_results", ")", "\n", "", "proposals", ".", "append", "(", "max_prop", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Appended %s to max_prop, now %s\"", ",", "max_prop", ",", "\n", "proposals", ")", "\n", "", "if", "multi_searcher", "!=", "\"none\"", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Starting multi_search.\"", ")", "\n", "multi_searcher", "=", "getattr", "(", "self", ",", "\"multi_searcher_\"", "+", "multi_searcher", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"multi_searcher function generated as %s\"", ",", "\n", "multi_searcher", ")", "\n", "multi_prop", ",", "good_results_cur", "=", "multi_searcher", "(", "gp", ",", "experiment", ",", "\n", "good_results", "=", "good_results", ",", "\n", "number_proposals", "=", "number_proposals", "-", "1", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Finished multi search. Multi_prop is %s\"", ",", "\n", "multi_prop", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"good_results_cur is %s\"", ",", "good_results_cur", ")", "\n", "if", "good_results_cur", "is", "not", "None", ":", "\n", "                ", "good_results", ".", "extend", "(", "good_results_cur", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Appended (extend) %s to good_results. Now\"", "\n", "\" %s\"", ",", "good_results_cur", ",", "good_results", ")", "\n", "", "proposals", ".", "extend", "(", "multi_prop", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Appended %s to proposals; now %s\"", ",", "\n", "multi_prop", ",", "proposals", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Returning proposals %s\"", ",", "proposals", ")", "\n", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.max_searcher_random": [[228, 264], ["acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction.params.get", "acquisition_functions.AcquisitionFunction._logger.debug", "float", "range", "acquisition_functions.AcquisitionFunction._logger.debug", "evaluated_params.extend", "acquisition_functions.AcquisitionFunction._logger.log", "acquisition_functions.AcquisitionFunction._gen_random_prop", "acquisition_functions.AcquisitionFunction._compute_minimizing_evaluate", "evaluated_params.append"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._gen_random_prop", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._compute_minimizing_evaluate"], ["", "def", "max_searcher_random", "(", "self", ",", "gp", ",", "experiment", ",", "good_results", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Randomly searches the best result.\n\n        Uses optimization_random_steps in self.params, with a default of 1000.\n\n        For signature details see the introduction in the class docs.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Starting max_searcher_random. gp is %s, experiment\"", "\n", "\" %s, good_results %s\"", ",", "gp", ",", "experiment", ",", "\n", "good_results", ")", "\n", "if", "good_results", "is", "None", ":", "\n", "            ", "good_results", "=", "[", "]", "\n", "", "optimization_random_steps", "=", "self", ".", "params", ".", "get", "(", "\"optimization_random_steps\"", "\n", ",", "1000", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Will generated %s random initial steps\"", ",", "\n", "optimization_random_steps", ")", "\n", "evaluated_params", "=", "[", "]", "\n", "\n", "best_param_idx", "=", "0", "\n", "best_score", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "optimization_random_steps", ")", ":", "\n", "            ", "param_dict_eval", "=", "self", ".", "_gen_random_prop", "(", "experiment", ")", "\n", "score", "=", "self", ".", "_compute_minimizing_evaluate", "(", "param_dict_eval", ",", "gp", ",", "\n", "experiment", ")", "\n", "if", "score", "<", "best_score", ":", "\n", "                ", "best_param_idx", "=", "i", "\n", "best_score", "=", "score", "\n", "", "evaluated_params", ".", "append", "(", "(", "param_dict_eval", ",", "score", ")", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Evaluated all steps: %s\"", ",", "evaluated_params", ")", "\n", "max_prop", "=", "evaluated_params", "[", "best_param_idx", "]", "\n", "del", "evaluated_params", "[", "best_param_idx", "]", "\n", "evaluated_params", ".", "extend", "(", "good_results", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Will return %s and %s\"", ",", "max_prop", ",", "evaluated_params", ")", "\n", "return", "max_prop", ",", "evaluated_params", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.multi_searcher_random_best": [[265, 282], ["acquisition_functions.AcquisitionFunction._multi_random_ordered", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction._logger.log"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._multi_random_ordered"], ["", "def", "multi_searcher_random_best", "(", "self", ",", "gp", ",", "experiment", ",", "good_results", "=", "None", ",", "\n", "number_proposals", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Randomly evaluates a number of proposals, returning the\n        number_proposals best.\n\n        Uses optimization_random_steps in self.params, with a default of 1000.\n\n        For signature details see the introduction in the class docs.\n        \"\"\"", "\n", "evaluated_params", "=", "self", ".", "_multi_random_ordered", "(", "gp", ",", "experiment", ",", "\n", "good_results", ",", "\n", "number_proposals", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Evaluated the best multi candidates.\"", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Result is %s\"", ",", "evaluated_params", ")", "\n", "return", "evaluated_params", "[", ":", "number_proposals", "]", ",", "evaluated_params", "[", "number_proposals", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.multi_searcher_random_weighted": [[284, 320], ["acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction._multi_random_ordered", "acquisition_functions.AcquisitionFunction._logger.log", "acquisition_functions.AcquisitionFunction._logger.log", "range", "acquisition_functions.AcquisitionFunction._logger.log", "enumerate", "random.random", "props.append"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._multi_random_ordered"], ["", "def", "multi_searcher_random_weighted", "(", "self", ",", "gp", ",", "experiment", ",", "\n", "good_results", "=", "None", ",", "number_proposals", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Returns number_proposals proposals randomly weighted by their\n        acquisition result.\n\n        Uses optimization_random_steps in self.params, with a default of 1000.\n\n        For signature details see the introduction in the class docs.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Beginning random-weighted search. gp is %s,\"", "\n", "\"experiment is %s, good_results %s, \"", "\n", "\"number_proposals %s\"", ",", "\n", "gp", ",", "experiment", ",", "good_results", ",", "number_proposals", ")", "\n", "evaluated_params", "=", "self", ".", "_multi_random_ordered", "(", "gp", ",", "experiment", ",", "\n", "good_results", ",", "\n", "number_proposals", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Got initial random results: %s\"", ",", "evaluated_params", ")", "\n", "acq_sum", "=", "0", "\n", "for", "p", "in", "evaluated_params", ":", "\n", "            ", "acq_sum", "+=", "p", "[", "1", "]", "\n", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Total acquisition function values are %s\"", ",", "\n", "acq_sum", ")", "\n", "props", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "number_proposals", ")", ":", "\n", "            ", "rand_acq", "=", "random", ".", "random", "(", ")", "*", "acq_sum", "\n", "cur_sum", "=", "0", "\n", "for", "j", ",", "p", "in", "enumerate", "(", "evaluated_params", ")", ":", "\n", "                ", "if", "cur_sum", "+", "p", "[", "1", "]", ">", "rand_acq", ":", "\n", "                    ", "props", ".", "append", "(", "p", ")", "\n", "del", "evaluated_params", "[", "j", "]", "\n", "break", "\n", "", "cur_sum", "+=", "p", "[", "1", "]", "\n", "", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Got final results. Props: %s, evaluated_params: \"", "\n", "\"%s\"", ",", "props", ",", "evaluated_params", ")", "\n", "return", "props", ",", "evaluated_params", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._multi_random_ordered": [[322, 359], ["acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction.params.get", "acquisition_functions.AcquisitionFunction._logger.debug", "acquisition_functions.AcquisitionFunction._logger.debug", "evaluated_params.extend", "evaluated_params.sort", "acquisition_functions.AcquisitionFunction._logger.log", "max", "len", "range", "acquisition_functions.AcquisitionFunction._gen_random_prop", "acquisition_functions.AcquisitionFunction._compute_minimizing_evaluate", "evaluated_params.append"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._gen_random_prop", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._compute_minimizing_evaluate"], ["", "def", "_multi_random_ordered", "(", "self", ",", "gp", ",", "experiment", ",", "good_results", "=", "None", ",", "\n", "number_proposals", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Generates a number of random proposals, and returns them ordered. Used\n        for other functions.\n\n        Uses optimization_random_steps in self.params, with a default of 1000.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Started multi_random_ordered. gp is %s, \"", "\n", "\"experiment %s, good_results %s, \"", "\n", "\"number_proposals %s\"", ",", "gp", ",", "experiment", ",", "\n", "good_results", ",", "number_proposals", ")", "\n", "if", "good_results", "is", "None", ":", "\n", "            ", "good_results", "=", "[", "]", "\n", "\n", "", "evaluated_params", "=", "[", "]", "\n", "\n", "optimization_random_steps", "=", "self", ".", "params", ".", "get", "(", "\n", "\"optimization_random_steps\"", ",", "1000", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Set optimization_random_steps to %s\"", ",", "\n", "optimization_random_steps", ")", "\n", "\n", "random_steps", "=", "max", "(", "optimization_random_steps", ",", "number_proposals", ")", "-", "len", "(", "good_results", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Requires %s random_steps\"", ",", "random_steps", ")", "\n", "if", "random_steps", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "optimization_random_steps", ")", ":", "\n", "                ", "param_dict_eval", "=", "self", ".", "_gen_random_prop", "(", "experiment", ")", "\n", "score", "=", "self", ".", "_compute_minimizing_evaluate", "(", "param_dict_eval", ",", "gp", ",", "\n", "experiment", ")", "\n", "evaluated_params", ".", "append", "(", "(", "param_dict_eval", ",", "score", ")", ")", "\n", "\n", "", "", "evaluated_params", ".", "extend", "(", "good_results", ")", "\n", "evaluated_params", ".", "sort", "(", "key", "=", "lambda", "prop", ":", "prop", "[", "1", "]", ")", "\n", "# Only activate this logger if crazy. Output is huge.", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Returning %s\"", ",", "evaluated_params", ")", "\n", "return", "evaluated_params", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._gen_random_prop": [[360, 385], ["acquisition_functions.AcquisitionFunction._logger.log", "sorted", "acquisition_functions.AcquisitionFunction._logger.log", "acquisition_functions.AcquisitionFunction._logger.log", "param_defs.keys", "numpy.random.uniform", "pdef.warped_size"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size"], ["", "def", "_gen_random_prop", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Generates a single random proposal in accordance to experiment.\n\n        Parameters\n        ----------\n        experiment : experiment\n            The experiment representing the current state.\n\n        Returns\n        -------\n        param_dict_eval : dict\n            Dictionary with one string key for each parameter name, and the\n            0-1 hypercube value for each of them as value.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Generating single random prop for %s\"", ",", "experiment", ")", "\n", "param_defs", "=", "experiment", ".", "parameter_definitions", "\n", "param_dict_eval", "=", "{", "}", "\n", "param_names", "=", "sorted", "(", "param_defs", ".", "keys", "(", ")", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Generated param_names %s\"", ",", "param_names", ")", "\n", "for", "pn", "in", "param_names", ":", "\n", "            ", "pdef", "=", "param_defs", "[", "pn", "]", "\n", "param_dict_eval", "[", "pn", "]", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "pdef", ".", "warped_size", "(", ")", ")", "\n", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Randomly generated %s\"", ",", "param_dict_eval", ")", "\n", "return", "param_dict_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_dict_vector": [[386, 407], ["acquisition_functions.AcquisitionFunction._logger.log", "sorted", "acquisition_functions.AcquisitionFunction._logger.log", "x.keys", "param_to_eval.extend"], "methods", ["None"], ["", "def", "_translate_dict_vector", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        We translate from a dictionary to a list format for a point's params.\n\n        Parameters\n        ----------\n        x : dictionary of string keys\n            The dictionary defining the point's param values.\n\n        Returns\n        -------\n        param_to_eval : vector\n            Vector of the points' parameter values in order of key.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Translating dict %s to vector.\"", ",", "x", ")", "\n", "param_to_eval", "=", "[", "]", "\n", "param_names", "=", "sorted", "(", "x", ".", "keys", "(", ")", ")", "\n", "for", "pn", "in", "param_names", ":", "\n", "            ", "param_to_eval", ".", "extend", "(", "x", "[", "pn", "]", ")", "\n", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Result is %s\"", ",", "param_to_eval", ")", "\n", "return", "param_to_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_vector_dict": [[408, 437], ["acquisition_functions.AcquisitionFunction._logger.log", "sorted", "enumerate", "acquisition_functions.AcquisitionFunction._logger.log", "experiment.parameter_definitions.keys", "warped_lengths.append", "experiment.parameter_definitions[].warped_size"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size"], ["", "def", "_translate_vector_dict", "(", "self", ",", "x_vector", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        We translate from a vector format to a dictionary of a point's params.\n\n        Parameters\n        ----------\n        x_vector : vector\n            Vector of the points' parameter values. They are assumed to be\n             in order of key.\n\n        Returns\n        -------\n        x : dictionary of string keys\n            The dictionary defining the point's param values.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Translating %s from vector to dict. Experiment\"", "\n", "\" is %s\"", ",", "x_vector", ",", "experiment", ")", "\n", "x_dict", "=", "{", "}", "\n", "\n", "param_names_sorted", "=", "sorted", "(", "experiment", ".", "parameter_definitions", ".", "keys", "(", ")", ")", "\n", "warped_lengths", "=", "[", "]", "\n", "for", "pn", "in", "param_names_sorted", ":", "\n", "            ", "warped_lengths", ".", "append", "(", "experiment", ".", "parameter_definitions", "[", "pn", "]", ".", "warped_size", "(", ")", ")", "\n", "", "index", "=", "0", "\n", "for", "i", ",", "pn", "in", "enumerate", "(", "param_names_sorted", ")", ":", "\n", "            ", "x_dict", "[", "pn", "]", "=", "x_vector", "[", "index", ":", "index", "+", "warped_lengths", "[", "i", "]", "]", "\n", "index", "+=", "warped_lengths", "[", "i", "]", "\n", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Translated to %s\"", ",", "x_dict", ")", "\n", "return", "x_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_vector_nd_array": [[438, 460], ["acquisition_functions.AcquisitionFunction._logger.log", "numpy.zeros", "range", "acquisition_functions.AcquisitionFunction._logger.log", "len", "len"], "methods", ["None"], ["", "def", "_translate_vector_nd_array", "(", "self", ",", "x_vec", ")", ":", "\n", "        ", "\"\"\"\n        We translate from a vector of x_vec's params to a numpy nd_array.\n\n        Parameters\n        ----------\n        x_vec : vector\n            Vector of the points' parameter values. They are assumed to be\n             in order of key.\n\n        Returns\n        -------\n        param_nd_array : numpy nd_array\n            nd_array of the points' parameter values. They are assumed to be\n            in order of key.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Translating vector %s to nd_array.\"", ",", "x_vec", ")", "\n", "param_nd_array", "=", "np", ".", "zeros", "(", "(", "1", ",", "len", "(", "x_vec", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vec", ")", ")", ":", "\n", "            ", "param_nd_array", "[", "0", ",", "i", "]", "=", "x_vec", "[", "i", "]", "\n", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Translated to %s\"", ",", "param_nd_array", ")", "\n", "return", "param_nd_array", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.in_hypercube": [[461, 469], ["acquisition_functions.AcquisitionFunction._logger.log", "range", "acquisition_functions.AcquisitionFunction._logger.log", "len", "acquisition_functions.AcquisitionFunction._logger.log"], "methods", ["None"], ["", "def", "in_hypercube", "(", "self", ",", "x_vec", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Testing %s being in hypercube\"", ",", "x_vec", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vec", ")", ")", ":", "\n", "            ", "if", "not", "0", "<=", "x_vec", "[", "i", "]", "<=", "1", ":", "\n", "                ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"It is not.\"", ")", "\n", "return", "False", "\n", "", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"It is.\"", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.GradientAcquisitionFunction.gradient": [[486, 494], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "gradient", "(", "self", ",", "x", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Computes the gradient of the function at x.\n\n        Signature is the same as evaluate.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Every subclass of \"", "\n", "\"GradientAcquisitionFunction must implement\"", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.GradientAcquisitionFunction._compute_minimizing_gradient": [[497, 516], ["acquisition_functions.GradientAcquisitionFunction._logger.log", "acquisition_functions.GradientAcquisitionFunction.gradient", "acquisition_functions.GradientAcquisitionFunction._logger.log", "acquisition_functions.GradientAcquisitionFunction._logger.log"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement.gradient"], ["", "def", "_compute_minimizing_gradient", "(", "self", ",", "x", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        One problem is that, as a standard, scipy.optimize only searches\n        minima. This means we have to convert each acquisition function to\n        the minima meaning the best result.\n        Whether to actually return the negative gradient or not is set by the\n        self.minimizes parameter. If true, it will not change the sign.\n\n        Function signature is as evaluate.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Computing minimizing gradient for %s. gp is %s,\"", "\n", "\"experiment is %s\"", ",", "x", ",", "gp", ",", "experiment", ")", "\n", "result", "=", "self", ".", "gradient", "(", "x", ",", "gp", ",", "experiment", ")", "\n", "if", "self", ".", "minimizes", ":", "\n", "            ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Is minimization. Returning %s\"", ",", "result", ")", "\n", "return", "result", "\n", "", "else", ":", "\n", "            ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Is maximizing. Returning %s\"", ",", "-", "result", ")", "\n", "return", "-", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.GradientAcquisitionFunction.max_searcher_LBFGSB": [[517, 573], ["acquisition_functions.GradientAcquisitionFunction._logger.debug", "experiment.parameter_definitions.values", "acquisition_functions.GradientAcquisitionFunction._gen_random_prop", "acquisition_functions.GradientAcquisitionFunction._compute_minimizing_evaluate", "good_results.append", "acquisition_functions.GradientAcquisitionFunction._logger.log", "acquisition_functions.GradientAcquisitionFunction.params.get", "acquisition_functions.GradientAcquisitionFunction._logger.debug", "range", "scipy_optimizer_results.extend", "acquisition_functions.GradientAcquisitionFunction._logger.log", "bounds.extend", "acquisition_functions.GradientAcquisitionFunction._logger.log", "acquisition_functions.GradientAcquisitionFunction._translate_dict_vector", "acquisition_functions.GradientAcquisitionFunction._logger.log", "scipy.optimize.minimize", "acquisition_functions.GradientAcquisitionFunction._logger.log", "acquisition_functions.GradientAcquisitionFunction._logger.log", "min", "acquisition_functions.GradientAcquisitionFunction._gen_random_prop", "acquisition_functions.GradientAcquisitionFunction._translate_vector_dict", "acquisition_functions.GradientAcquisitionFunction.in_hypercube", "tuple", "acquisition_functions.GradientAcquisitionFunction._logger.log", "scipy_optimizer_results.append", "acquisition_functions.GradientAcquisitionFunction._logger.log", "range", "pd.warped_size"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._gen_random_prop", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._compute_minimizing_evaluate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_dict_vector", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._gen_random_prop", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_vector_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction.in_hypercube", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size"], ["", "", "def", "max_searcher_LBFGSB", "(", "self", ",", "gp", ",", "experiment", ",", "good_results", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Searches the maximum proposal via L-BFGS-B.\n\n        For signature see the class docs.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Searching maximum via LBFGSB. gp is %s, \"", "\n", "\"experiment is %s, good_results %s\"", ",", "gp", ",", "\n", "experiment", ",", "good_results", ")", "\n", "bounds", "=", "[", "]", "\n", "for", "pd", "in", "experiment", ".", "parameter_definitions", ".", "values", "(", ")", ":", "\n", "            ", "bounds", ".", "extend", "(", "[", "(", "0.0", ",", "1.0", ")", "for", "x", "in", "range", "(", "pd", ".", "warped_size", "(", ")", ")", "]", ")", "\n", "", "if", "good_results", "is", "None", ":", "\n", "            ", "good_results", "=", "[", "]", "\n", "", "random_prop", "=", "self", ".", "_gen_random_prop", "(", "experiment", ")", "\n", "random_prop_result", "=", "self", ".", "_compute_minimizing_evaluate", "(", "random_prop", ",", "\n", "gp", ",", "experiment", ")", "\n", "good_results", ".", "append", "(", "(", "random_prop", ",", "random_prop_result", ")", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Initialized the first good result. Is %s\"", ",", "\n", "good_results", ")", "\n", "scipy_optimizer_results", "=", "[", "]", "\n", "\n", "random_restarts", "=", "self", ".", "params", ".", "get", "(", "\"num_restarts\"", ",", "10", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Doing %s restarts\"", ",", "random_restarts", ")", "\n", "for", "i", "in", "range", "(", "random_restarts", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"New restart.\"", ")", "\n", "initial_guess", "=", "self", ".", "_translate_dict_vector", "(", "\n", "self", ".", "_gen_random_prop", "(", "experiment", ")", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Initial guess is %s\"", ",", "initial_guess", ")", "\n", "result", "=", "scipy", ".", "optimize", ".", "minimize", "(", "\n", "self", ".", "_compute_minimizing_evaluate", ",", "x0", "=", "initial_guess", ",", "\n", "method", "=", "\"L-BFGS-B\"", ",", "jac", "=", "self", ".", "_compute_minimizing_gradient", ",", "\n", "options", "=", "{", "'disp'", ":", "False", "}", ",", "bounds", "=", "bounds", ",", "\n", "args", "=", "tuple", "(", "[", "gp", ",", "experiment", "]", ")", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Result of optimization %s\"", ",", "result", ")", "\n", "x_min", "=", "result", ".", "x", "\n", "f_min", "=", "result", ".", "fun", "\n", "success", "=", "result", ".", "success", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Success: %s\"", ",", "success", ")", "\n", "if", "success", ":", "\n", "                ", "x_min_dict", "=", "self", ".", "_translate_vector_dict", "(", "x_min", ",", "experiment", ")", "\n", "if", "self", ".", "in_hypercube", "(", "x_min", ")", ":", "\n", "                    ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Is in hypercube. Appending.\"", ")", "\n", "scipy_optimizer_results", ".", "append", "(", "(", "x_min_dict", ",", "f_min", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Is not in hypercube. Ignoring.\"", ")", "\n", "\n", "", "", "", "scipy_optimizer_results", ".", "extend", "(", "good_results", ")", "\n", "best_idx", "=", "[", "x", "[", "1", "]", "for", "x", "in", "scipy_optimizer_results", "]", ".", "index", "(", "\n", "min", "(", "[", "x", "[", "1", "]", "for", "x", "in", "scipy_optimizer_results", "]", ")", ")", "\n", "max_prop", "=", "scipy_optimizer_results", "[", "best_idx", "]", "\n", "del", "scipy_optimizer_results", "[", "best_idx", "]", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Extracted best. Final is max_prop %s, \"", "\n", "\"scipy_optimizer_results %s\"", ",", "max_prop", ",", "\n", "scipy_optimizer_results", ")", "\n", "return", "max_prop", ",", "scipy_optimizer_results", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement._evaluate_vector": [[585, 666], ["acquisition_functions.ExpectedImprovement._logger.log", "acquisition_functions.ExpectedImprovement._translate_vector_nd_array", "gp.predict", "gp.predictive_gradients", "acquisition_functions.ExpectedImprovement._logger.log", "numpy.transpose", "acquisition_functions.ExpectedImprovement._logger.log", "acquisition_functions.ExpectedImprovement._logger.log", "scipy.stats.norm().cdf", "scipy.stats.norm().pdf", "acquisition_functions.ExpectedImprovement._logger.log", "acquisition_functions.ExpectedImprovement.params.get", "float", "numpy.transpose", "scipy.stats.norm", "scipy.stats.norm"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_vector_nd_array"], ["def", "_evaluate_vector", "(", "self", ",", "x_vec", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates the value of the gp at the point x_vec.\n\n        Parameters\n        ----------\n        x_vec : vector\n            The vector defining the point.\n        gp : GPy gp\n            The gp on which to evaluate\n        experiment : experiment\n            Some acquisition functions require more information about the\n            experiment.\n\n        Results\n        -------\n        ei_value : vector\n            The value of this acquisition funciton on the point.\n        ei_gradient : vector\n            The value of the gradient on the point\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"evaluating ExpectedImprovement on %s; gp %s,\"", "\n", "\" experiment %s\"", ",", "x_vec", ",", "gp", ",", "experiment", ")", "\n", "x_value", "=", "self", ".", "_translate_vector_nd_array", "(", "x_vec", ")", "\n", "\n", "#mean, variance and their gradients", "\n", "mean", ",", "variance", "=", "gp", ".", "predict", "(", "x_value", ")", "\n", "gradient_mean", ",", "gradient_variance", "=", "gp", ".", "predictive_gradients", "(", "x_value", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Predicted mean/variance of %s / %s. Gradients \"", "\n", "\"are %s and %s respectively.\"", ",", "mean", ",", "variance", ",", "\n", "gradient_mean", ",", "gradient_variance", ")", "\n", "#gpy does everythin in matrices", "\n", "gradient_mean", "=", "gradient_mean", "[", "0", "]", "\n", "#gpy returns variance in row matrices.", "\n", "gradient_variance", "=", "np", ".", "transpose", "(", "gradient_variance", ")", "\n", "\n", "#these values should be real scalars!", "\n", "mean", "=", "mean", "[", "0", "]", "[", "0", "]", "\n", "variance", "=", "variance", "[", "0", "]", "[", "0", "]", "\n", "\n", "std_dev", "=", "variance", "**", "0.5", "\n", "\n", "#Formula adopted from the phd thesis of Jasper Snoek page 48 with", "\n", "# \\gamma equals Z here", "\n", "#Additionally support for the exploration exploitation trade-off", "\n", "#as suggested by Brochu et al.", "\n", "x_best", "=", "experiment", ".", "best_candidate", ".", "result", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Our best result till now was %s\"", ",", "x_best", ")", "\n", "#handle case of maximization", "\n", "sign", "=", "1", "\n", "if", "not", "experiment", ".", "minimization_problem", ":", "\n", "            ", "sign", "=", "-", "1", "\n", "\n", "", "z_numerator", "=", "sign", "*", "(", "x_best", "-", "mean", "+", "self", ".", "params", ".", "get", "(", "\n", "\"exploitation_exploration_tradeoff\"", ",", "0", ")", ")", "\n", "\n", "ei_value", "=", "0", "\n", "ei_gradient", "=", "0", "\n", "if", "std_dev", "!=", "0", ":", "\n", "            ", "z", "=", "float", "(", "z_numerator", ")", "/", "std_dev", "\n", "\n", "cdf_z", "=", "scipy", ".", "stats", ".", "norm", "(", ")", ".", "cdf", "(", "z", ")", "\n", "pdf_z", "=", "scipy", ".", "stats", ".", "norm", "(", ")", ".", "pdf", "(", "z", ")", "\n", "\n", "ei_value", "=", "z_numerator", "*", "cdf_z", "+", "std_dev", "*", "pdf_z", "\n", "\n", "#compute ei gradient", "\n", "#new implementation based on own derivation", "\n", "ei_gradient_part1", "=", "(", "1", "/", "(", "2", "*", "variance", ")", ")", "*", "ei_value", "*", "gradient_variance", "\n", "ei_gradient_part2", "=", "-", "1", "*", "sign", "*", "gradient_mean", "*", "cdf_z", "\n", "ei_gradient_part3", "=", "(", "-", "1", "*", "gradient_variance", "*", "cdf_z", "*", "z", "*", "\n", "(", "1", "/", "(", "2", "*", "std_dev", ")", ")", ")", "\n", "ei_gradient", "=", "(", "ei_gradient_part1", "+", "ei_gradient_part2", "+", "\n", "ei_gradient_part3", ")", "\n", "\n", "ei_gradient", "=", "np", ".", "transpose", "(", "ei_gradient", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"std_dev was 0. Returning 0, 0.\"", ")", "\n", "", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"ei_value, ei_gradient: %s, %s\"", ",", "ei_value", ",", "\n", "ei_gradient", ")", "\n", "return", "ei_value", ",", "ei_gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement._evaluate_vector_gradient": [[667, 691], ["acquisition_functions.ExpectedImprovement._logger.log", "acquisition_functions.ExpectedImprovement._evaluate_vector", "acquisition_functions.ExpectedImprovement._logger.log"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement._evaluate_vector"], ["", "def", "_evaluate_vector_gradient", "(", "self", ",", "x_vec", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates the gradient of the gp at the point x_vec.\n\n        Parameters\n        ----------\n        x_vec : vector\n            The vector defining the point.\n        gp : GPy gp\n            The gp on which to evaluate\n        experiment : experiment\n            Some acquisition functions require more information about the\n            experiment.\n\n        Results\n        -------\n        gradient : vector\n            The value of the gradient on the point\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Evaluating vector to gradient. x_vec %s, gp %s,\"", "\n", "\" experiment %s\"", ",", "x_vec", ",", "gp", ",", "experiment", ")", "\n", "value", ",", "grad", "=", "self", ".", "_evaluate_vector", "(", "x_vec", ",", "gp", ",", "experiment", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Gradient is %s\"", ",", "grad", ")", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement.gradient": [[692, 703], ["acquisition_functions.ExpectedImprovement._logger.log", "isinstance", "acquisition_functions.ExpectedImprovement._evaluate_vector", "acquisition_functions.ExpectedImprovement._logger.log", "acquisition_functions.ExpectedImprovement._logger.log", "acquisition_functions.ExpectedImprovement._translate_dict_vector"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement._evaluate_vector", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_dict_vector"], ["", "def", "gradient", "(", "self", ",", "x", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Computing gradient for %s. gp is %s, experiment \"", "\n", "\"%s\"", ",", "x", ",", "gp", ",", "experiment", ")", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"x is dict. Translating.\"", ")", "\n", "x_value", "=", "self", ".", "_translate_dict_vector", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x_value", "=", "x", "\n", "", "value", ",", "gradient", "=", "self", ".", "_evaluate_vector", "(", "x_value", ",", "gp", ",", "experiment", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Evaluated. Returning %s\"", ",", "gradient", ")", "\n", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement.evaluate": [[704, 715], ["acquisition_functions.ExpectedImprovement._logger.log", "isinstance", "acquisition_functions.ExpectedImprovement._evaluate_vector", "acquisition_functions.ExpectedImprovement._logger.log", "acquisition_functions.ExpectedImprovement._translate_dict_vector", "acquisition_functions.ExpectedImprovement._logger.log"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ExpectedImprovement._evaluate_vector", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_dict_vector"], ["", "def", "evaluate", "(", "self", ",", "x", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Evaluating %s. gp is %s, experiment %s\"", ",", "x", ",", "gp", ",", "\n", "experiment", ")", "\n", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "            ", "x_value", "=", "self", ".", "_translate_dict_vector", "(", "x", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"x was dict, translating to %s\"", ",", "x_value", ")", "\n", "", "else", ":", "\n", "            ", "x_value", "=", "x", "\n", "", "value", ",", "gradient", "=", "self", ".", "_evaluate_vector", "(", "x_value", ",", "gp", ",", "experiment", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Returning %s.\"", ",", "value", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.ProbabilityOfImprovement.evaluate": [[727, 753], ["acquisition_functions.ProbabilityOfImprovement._logger.log", "len", "acquisition_functions.ProbabilityOfImprovement._translate_dict_vector", "acquisition_functions.ProbabilityOfImprovement._translate_vector_nd_array", "gp.predict", "acquisition_functions.ProbabilityOfImprovement._logger.log", "scipy.stats.norm().cdf", "acquisition_functions.ProbabilityOfImprovement._logger.log", "acquisition_functions.ProbabilityOfImprovement._logger.log", "scipy.stats.norm"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_dict_vector", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.bayesian.acquisition_functions.AcquisitionFunction._translate_vector_nd_array"], ["def", "evaluate", "(", "self", ",", "x", ",", "gp", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates the function.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Evaluating probability of improvement. x is %s,\"", "\n", "\" gp is %s, experiment %s\"", ",", "x", ",", "gp", ",", "experiment", ")", "\n", "dimensions", "=", "len", "(", "experiment", ".", "parameter_definitions", ")", "\n", "x_value_vector", "=", "self", ".", "_translate_dict_vector", "(", "x", ")", "\n", "x_value", "=", "self", ".", "_translate_vector_nd_array", "(", "x_value_vector", ")", "\n", "\n", "mean", ",", "variance", "=", "gp", ".", "predict", "(", "x_value", ")", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Mean and variance are %s, %s\"", ",", "mean", ",", "variance", ")", "\n", "# do not standardize on our own, but use the mean, and covariance", "\n", "# we get from the gp", "\n", "stdv", "=", "variance", "**", "0.5", "\n", "x_best", "=", "experiment", ".", "best_candidate", ".", "result", "\n", "z", "=", "(", "x_best", "-", "mean", ")", "/", "stdv", "\n", "\n", "cdf", "=", "scipy", ".", "stats", ".", "norm", "(", ")", ".", "cdf", "(", "z", ")", "\n", "result", "=", "cdf", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"Got cdf from scipy.stats. Result is %s\"", ",", "result", ")", "\n", "if", "not", "experiment", ".", "minimization_problem", ":", "\n", "            ", "result", "=", "1", "-", "cdf", "\n", "self", ".", "_logger", ".", "log", "(", "5", ",", "\"We're changing because we're maximizing. New \"", "\n", "\"result is %s\"", ",", "result", ")", "\n", "", "return", "result", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate.__init__": [[62, 107], ["apsis.utilities.logging_utils.get_logger", "candidate.Candidate._logger.debug", "time.time", "time.time", "candidate.Candidate._logger.debug", "isinstance", "candidate.Candidate._logger.error", "ValueError", "uuid.uuid4", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["def", "__init__", "(", "self", ",", "params", ",", "cand_id", "=", "None", ",", "worker_information", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the unevaluated candidate object.\n\n        Parameters\n        ----------\n        params : dict of string keys\n            A dictionary of parameter value. The keys must correspond to the\n            problem definition.\n            The dictionary requires one key - and value - per parameter\n            defined.\n        cand_id : uuid.UUID, optional\n            The uuid identifying this candidate. This is used to compare\n            candidates over server and client borders.\n            Note that this should only be set explicitly if you are\n            instantiating an already known candidate with its already known\n            UUID. Do not explicitly set the uuid for a new candidate!\n        worker_information : string, optional\n            This is worker-settable information which might be used for\n            communicating things necessary for resuming evaluations et cetera.\n\n        Raises\n        ------\n        ValueError\n            Iff params is not a dictionary.\n        \"\"\"", "\n", "if", "cand_id", "is", "None", ":", "\n", "            ", "cand_id", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "", "self", ".", "cand_id", "=", "cand_id", "\n", "self", ".", "_logger", "=", "get_logger", "(", "self", ",", "extra_info", "=", "\"cand_id \"", "+", "str", "(", "cand_id", ")", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing new candidate. Params %s, cand_id %s,\"", "\n", "\"worker_info %s\"", ",", "params", ",", "cand_id", ",", "\n", "worker_information", ")", "\n", "\n", "if", "not", "isinstance", "(", "params", ",", "dict", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "error", "(", "\"No parameter dict given, received %s instead\"", ",", "\n", "params", ")", "\n", "raise", "ValueError", "(", "\"No parameter dictionary given, received %s \"", "\n", "\"instead\"", "%", "params", ")", "\n", "", "self", ".", "failed", "=", "False", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "worker_information", "=", "worker_information", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "generated_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Finished initializing the candidate.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate.__eq__": [[108, 136], ["candidate.Candidate._logger.debug", "candidate.Candidate._logger.debug", "isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        Compares two Candidate instances.\n\n        Two Candidate instances are defined as being equal iff their ids\n        are equal. A non-Candidate instance is never equal to a\n        Candidate.\n\n        Parameters\n        ----------\n        other :\n            The object to compare this Candidate instance to.\n\n        Returns\n        -------\n        equality : bool\n            True iff other is a Candidate instance and their ids are equal.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Comparing candidates self (%s) with %s.\"", ",", "self", ",", "\n", "other", ")", "\n", "if", "not", "isinstance", "(", "other", ",", "Candidate", ")", ":", "\n", "            ", "equality", "=", "False", "\n", "", "elif", "self", ".", "cand_id", "==", "other", ".", "cand_id", ":", "\n", "            ", "equality", "=", "True", "\n", "", "else", ":", "\n", "            ", "equality", "=", "False", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Equality: %s\"", ",", "equality", ")", "\n", "return", "equality", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate.__str__": [[137, 152], ["candidate.Candidate.to_dict", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Stringifies this Candidate.\n\n        A stringified Candidate is the stringified form of its dict.\n\n        Returns\n        -------\n        string : string\n            The stringified Candidate.\n\n        \"\"\"", "\n", "cand_dict", "=", "self", ".", "to_dict", "(", "do_logging", "=", "False", ")", "\n", "string", "=", "str", "(", "cand_dict", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate.to_dict": [[153, 188], ["candidate.Candidate._logger.debug", "candidate.Candidate._param_defs_to_dict", "candidate.Candidate._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate._param_defs_to_dict"], ["", "def", "to_dict", "(", "self", ",", "do_logging", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Converts this candidate to a dictionary.\n\n        Returns\n        -------\n        d : dictionary\n            Contains the following key/value pairs:\n            \"id\" : string\n                The id of the candidate.\n            \"params\" : dict\n                This dictionary contains one entry for each parameter,\n                each with the string name as key and the value as value.\n            \"result\" : float or None\n                The result of the Candidate\n            \"failed\" : bool\n                Whether the evaluation failed.\n            \"cost\" : float or None\n                The cost of evaluating the Candidate\n            \"worker_information\" : any jsonable or None\n                Client-settable worker information.\n        \"\"\"", "\n", "if", "do_logging", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Converting cand to dict.\"", ")", "\n", "", "d", "=", "{", "\"cand_id\"", ":", "self", ".", "cand_id", ",", "\n", "\"params\"", ":", "self", ".", "_param_defs_to_dict", "(", "do_logging", "=", "do_logging", ")", ",", "\n", "\"result\"", ":", "self", ".", "result", ",", "\n", "\"failed\"", ":", "self", ".", "failed", ",", "\n", "\"cost\"", ":", "self", ".", "cost", ",", "\n", "\"last_update_time\"", ":", "self", ".", "last_update_time", ",", "\n", "\"generated_time\"", ":", "self", ".", "generated_time", ",", "\n", "\"worker_information\"", ":", "self", ".", "worker_information", "}", "\n", "if", "do_logging", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Generated dict %s\"", ",", "d", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate._param_defs_to_dict": [[189, 206], ["candidate.Candidate.params.keys", "candidate.Candidate._logger.debug", "candidate.Candidate._logger.debug"], "methods", ["None"], ["", "def", "_param_defs_to_dict", "(", "self", ",", "do_logging", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Returns a parameter definition dictionary representation.\n\n        Returns\n        -------\n        d : dict\n            Dictionary of the parameters.\n        \"\"\"", "\n", "if", "do_logging", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Converting param_def to dict.\"", ")", "\n", "", "d", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "params", ".", "keys", "(", ")", ":", "\n", "            ", "d", "[", "k", "]", "=", "self", ".", "params", "[", "k", "]", "\n", "", "if", "do_logging", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"param_def dict is %s\"", ",", "d", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.from_dict": [[208, 236], ["apsis.utilities.logging_utils.get_logger", "apsis.utilities.logging_utils.get_logger.log", "candidate.Candidate", "d.get", "d.get", "d.get", "d.get", "d.get", "d.get", "apsis.utilities.logging_utils.get_logger.log"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["", "", "def", "from_dict", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Builds a new candidate from a dictionary.\n\n    Parameters\n    ----------\n    cand_dict : dictionary\n        Uses the same format as in Candidate.to_dict.\n\n    Returns\n    -------\n    c : Candidate\n        The corresponding candidate.\n    \"\"\"", "\n", "cand_logger", "=", "get_logger", "(", "\"models.Candidate\"", ")", "\n", "cand_logger", ".", "log", "(", "5", ",", "\"Constructing new candidate from dict %s.\"", ",", "d", ")", "\n", "cand_id", "=", "None", "\n", "if", "\"cand_id\"", "in", "d", ":", "\n", "        ", "cand_id", "=", "d", "[", "\"cand_id\"", "]", "\n", "", "c", "=", "Candidate", "(", "d", "[", "\"params\"", "]", ",", "cand_id", "=", "cand_id", ")", "\n", "c", ".", "result", "=", "d", ".", "get", "(", "\"result\"", ",", "None", ")", "\n", "c", ".", "cost", "=", "d", ".", "get", "(", "\"cost\"", ",", "None", ")", "\n", "c", ".", "failed", "=", "d", ".", "get", "(", "\"failed\"", ",", "False", ")", "\n", "c", ".", "last_update_time", "=", "d", ".", "get", "(", "\"last_update_time\"", ")", "\n", "c", ".", "generated_time", "=", "d", ".", "get", "(", "\"generated_time\"", ")", "\n", "c", ".", "worker_information", "=", "d", ".", "get", "(", "\"worker_information\"", ",", "None", ")", "\n", "cand_logger", ".", "log", "(", "5", ",", "\"Constructed candidate is %s\"", ",", "c", ")", "\n", "return", "c", "\n", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.__init__": [[65, 131], ["apsis.utilities.logging_utils.get_logger", "experiment.Experiment._logger.debug", "time.time", "experiment.Experiment._logger.debug", "experiment.Experiment._logger.debug", "isinstance", "experiment.Experiment._logger.error", "ValueError", "uuid.uuid4", "isinstance", "experiment.Experiment._logger.error", "ValueError"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["def", "__init__", "(", "self", ",", "name", ",", "parameter_definitions", ",", "exp_id", "=", "None", ",", "notes", "=", "None", ",", "\n", "minimization_problem", "=", "True", ",", ")", ":", "\n", "        ", "\"\"\"\n        Initializes an Experiment with a certain parameter definition.\n\n        All of the Candidate lists are set to empty lists, representing an\n        experiment with no work done.\n\n        Parameters\n        ----------\n        name : string\n            The name of the experiment. This does not have to be unique, but is\n            for human orientation.\n\n        parameter_definitions : dict of ParamDef\n            Defines the parameter space of the experiment. Each entry of the\n            dictionary has to be a ParamDef, and it is that space over which\n            optimization will occur.\n        minimization_problem : bool, optional\n            Defines whether the experiment's goal is to find a minimum result - for\n            example when evaluating errors - or a maximum result - for example when\n            evaluating scores. Is True by default.\n        notes : string or None, optional\n            The note can be used to add additional human-readable information to\n            the experiment.\n        Raises\n        ------\n        ValueError :\n            Iff parameter_definitions are not a dictionary.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing new experiment. name: %s, \"", "\n", "\"param_definition: %s, exp_id %s, notes %s, \"", "\n", "\"minimization_problem %s\"", ",", "name", ",", "\n", "parameter_definitions", ",", "exp_id", ",", "notes", ",", "\n", "minimization_problem", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "exp_id", "is", "None", ":", "\n", "            ", "exp_id", "=", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Had to create new exp_id, is %s\"", ",", "exp_id", ")", "\n", "", "self", ".", "exp_id", "=", "exp_id", "\n", "if", "not", "isinstance", "(", "parameter_definitions", ",", "dict", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "error", "(", "\"parameter_definitions are not a dict but %s.\"", "\n", "%", "parameter_definitions", ")", "\n", "raise", "ValueError", "(", "\"parameter_definitions are not a dict but %s.\"", "\n", "%", "parameter_definitions", ")", "\n", "", "for", "p", "in", "parameter_definitions", ":", "\n", "            ", "if", "not", "isinstance", "(", "parameter_definitions", "[", "p", "]", ",", "ParamDef", ")", ":", "\n", "                ", "self", ".", "_logger", ".", "error", "(", "\"Parameter definition of %s is not a \"", "\n", "\"ParamDef but %s.\"", "\n", "%", "(", "p", ",", "parameter_definitions", "[", "p", "]", ")", ")", "\n", "\n", "raise", "ValueError", "(", "\"Parameter definition of %s is not a ParamDef\"", "\n", "\"but %s.\"", "%", "(", "p", ",", "parameter_definitions", "[", "p", "]", ")", ")", "\n", "", "", "self", ".", "parameter_definitions", "=", "parameter_definitions", "\n", "\n", "self", ".", "minimization_problem", "=", "minimization_problem", "\n", "\n", "self", ".", "candidates_finished", "=", "[", "]", "\n", "self", ".", "candidates_pending", "=", "[", "]", "\n", "self", ".", "candidates_working", "=", "[", "]", "\n", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "notes", "=", "notes", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialization of new experiment finished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished": [[132, 164], ["experiment.Experiment._logger.debug", "experiment.Experiment._check_candidate", "time.time", "experiment.Experiment.candidates_finished.append", "experiment.Experiment._update_best", "experiment.Experiment._logger.debug", "experiment.Experiment.candidates_pending.remove", "experiment.Experiment.candidates_working.remove", "experiment.Experiment.candidates_finished.remove"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._update_best"], ["", "def", "add_finished", "(", "self", ",", "candidate", ")", ":", "\n", "        ", "\"\"\"\n        Announces a Candidate instance to be finished evaluating.\n\n        This moves the Candidate instance to the candidates_finished list and\n        updates the best_candidate.\n\n        Parameters\n        ----------\n        candidate : Candidate\n            The Candidate to be added to the finished list.\n\n        Raises\n        ------\n        ValueError :\n            Iff candidate is not a Candidate object.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Adding finished candidate %s\"", ",", "candidate", ")", "\n", "self", ".", "_check_candidate", "(", "candidate", ")", "\n", "if", "candidate", "in", "self", ".", "candidates_pending", ":", "\n", "            ", "self", ".", "candidates_pending", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_working", ":", "\n", "            ", "self", ".", "candidates_working", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_finished", ":", "\n", "            ", "self", ".", "candidates_finished", ".", "remove", "(", "candidate", ")", "\n", "\n", "", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "candidate", ".", "last_update_time", "=", "cur_time", "\n", "self", ".", "last_update_time", "=", "cur_time", "\n", "self", ".", "candidates_finished", ".", "append", "(", "candidate", ")", "\n", "self", ".", "_update_best", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Added finished candidate %s\"", ",", "candidate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pending": [[165, 200], ["experiment.Experiment._logger.debug", "experiment.Experiment._check_candidate", "time.time", "experiment.Experiment.candidates_pending.append", "experiment.Experiment._update_best", "experiment.Experiment._logger.debug", "experiment.Experiment.candidates_pending.remove", "experiment.Experiment.candidates_working.remove", "experiment.Experiment.candidates_finished.remove"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._update_best"], ["", "def", "add_pending", "(", "self", ",", "candidate", ")", ":", "\n", "        ", "\"\"\"\n        Adds a new pending Candidate object to be evaluated.\n\n        This function should be used when a new pending candidate is supposed\n        to be evaluated. If an old Candidate should be updated as just pausing,\n        use the add_pausing function.\n\n        Parameters\n        ----------\n        candidate : Candidate\n            The Candidate instance that is supposed to be evaluated soon.\n\n        Raises\n        ------\n        ValueError :\n            Iff candidate is no Candidate object.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Adding pending candidate %s\"", ",", "candidate", ")", "\n", "self", ".", "_check_candidate", "(", "candidate", ")", "\n", "if", "candidate", "in", "self", ".", "candidates_pending", ":", "\n", "            ", "self", ".", "candidates_pending", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_working", ":", "\n", "            ", "self", ".", "candidates_working", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_finished", ":", "\n", "            ", "self", ".", "candidates_finished", ".", "remove", "(", "candidate", ")", "\n", "\n", "", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "candidate", ".", "last_update_time", "=", "cur_time", "\n", "self", ".", "last_update_time", "=", "cur_time", "\n", "\n", "self", ".", "candidates_pending", ".", "append", "(", "candidate", ")", "\n", "\n", "self", ".", "_update_best", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Added pending candidate %s\"", ",", "candidate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working": [[201, 234], ["experiment.Experiment._logger.debug", "experiment.Experiment._check_candidate", "time.time", "experiment.Experiment.candidates_working.append", "experiment.Experiment._update_best", "experiment.Experiment._logger.debug", "experiment.Experiment.candidates_pending.remove", "experiment.Experiment.candidates_working.remove", "experiment.Experiment.candidates_finished.remove"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._update_best"], ["", "def", "add_working", "(", "self", ",", "candidate", ")", ":", "\n", "        ", "\"\"\"\n        Updates the experiment to now start working on candidate.\n\n        This updates candidates_working list and the candidates_pending list\n        if candidate is in the candidates_pending list.\n\n        Parameters\n        ----------\n        candidate : Candidate\n            The Candidate instance that is currently being worked on.\n\n        Raises\n        ------\n        ValueError :\n            Iff candidate is no Candidate object.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Added working candidate %s\"", ",", "candidate", ")", "\n", "self", ".", "_check_candidate", "(", "candidate", ")", "\n", "if", "candidate", "in", "self", ".", "candidates_pending", ":", "\n", "            ", "self", ".", "candidates_pending", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_working", ":", "\n", "            ", "self", ".", "candidates_working", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_finished", ":", "\n", "            ", "self", ".", "candidates_finished", ".", "remove", "(", "candidate", ")", "\n", "\n", "", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "candidate", ".", "last_update_time", "=", "cur_time", "\n", "self", ".", "last_update_time", "=", "cur_time", "\n", "\n", "self", ".", "candidates_working", ".", "append", "(", "candidate", ")", "\n", "self", ".", "_update_best", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Added working candidate %s\"", ",", "candidate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pausing": [[235, 271], ["experiment.Experiment._logger.debug", "experiment.Experiment._check_candidate", "time.time", "experiment.Experiment.candidates_pending.append", "experiment.Experiment._update_best", "experiment.Experiment._logger.debug", "experiment.Experiment.candidates_working.remove", "experiment.Experiment.candidates_pending.remove", "experiment.Experiment.candidates_working.remove", "experiment.Experiment.candidates_finished.remove"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._update_best"], ["", "def", "add_pausing", "(", "self", ",", "candidate", ")", ":", "\n", "        ", "\"\"\"\n        Updates the experiment that work on candidate has been paused.\n\n        This updates candidates_pending list and the candidates_working list\n        if it contains the candidate.\n\n        Parameters\n        ----------\n        candidate : Candidate\n            The Candidate instance that is currently paused.\n\n        Raises\n        ------\n        ValueError :\n            Iff candidate is no Candidate object.\n\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Pausing candidate %s\"", ",", "candidate", ")", "\n", "self", ".", "_check_candidate", "(", "candidate", ")", "\n", "if", "candidate", "in", "self", ".", "candidates_working", ":", "\n", "            ", "self", ".", "candidates_working", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_pending", ":", "\n", "            ", "self", ".", "candidates_pending", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_working", ":", "\n", "            ", "self", ".", "candidates_working", ".", "remove", "(", "candidate", ")", "\n", "", "if", "candidate", "in", "self", ".", "candidates_finished", ":", "\n", "            ", "self", ".", "candidates_finished", ".", "remove", "(", "candidate", ")", "\n", "\n", "", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "candidate", ".", "last_update_time", "=", "cur_time", "\n", "self", ".", "last_update_time", "=", "cur_time", "\n", "\n", "self", ".", "candidates_pending", ".", "append", "(", "candidate", ")", "\n", "self", ".", "_update_best", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Pausing candidate %s\"", ",", "candidate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand": [[272, 341], ["experiment.Experiment._logger.debug", "experiment.Experiment._logger.debug", "ValueError", "ValueError", "experiment.Experiment._logger.debug", "experiment.Experiment._logger.debug", "experiment.Experiment._check_candidate", "ValueError", "experiment.Experiment._check_candidate", "ValueError", "isinstance", "isinstance", "str", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_candidate"], ["", "def", "better_cand", "(", "self", ",", "candidateA", ",", "candidateB", ")", ":", "\n", "        ", "\"\"\"\n        Determines whether CandidateA is better than candidateB in the context\n        of this experiment.\n        This is done as follows:\n        If candidateA's result is None or it failed, it is not better.\n        If candidateB's result is None or it failed, it is better.\n        If it is a minimization problem and the result is smaller than B's, it\n        is better. Corresponding for being a maximization problem.\n\n\n        Parameters\n        ----------\n        candidateA : Candidate\n            The candidate which should be better.\n        candidateB : Candidate\n            The baseline candidate.\n\n        Returns\n        -------\n        result : bool\n            True iff A is better than B.\n\n        Raises\n        ------\n        ValueError :\n            If candidateA or candidateB are no Candidates.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Checking better candidate, %s or %s\"", ",", "candidateA", ",", "\n", "candidateB", ")", "\n", "if", "not", "isinstance", "(", "candidateA", ",", "Candidate", ")", "and", "candidateA", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"candidateA is %s, but no Candidate instance.\"", "\n", "%", "str", "(", "candidateA", ")", ")", "\n", "", "if", "not", "isinstance", "(", "candidateB", ",", "Candidate", ")", "and", "candidateB", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"candidateB is %s, but no Candidate instance.\"", "\n", "%", "str", "(", "candidateB", ")", ")", "\n", "\n", "", "if", "candidateA", "is", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"candidateA is None; returning False\"", ")", "\n", "return", "False", "\n", "", "if", "candidateB", "is", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"candidateB is None; returning True\"", ")", "\n", "return", "True", "\n", "\n", "", "if", "not", "self", ".", "_check_candidate", "(", "candidateA", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"candidateA is not valid.\"", ")", "\n", "", "if", "not", "self", ".", "_check_candidate", "(", "candidateB", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"candidateB is not valid.\"", ")", "\n", "\n", "", "a_result", "=", "candidateA", ".", "result", "\n", "b_result", "=", "candidateB", ".", "result", "\n", "\n", "comparison", "=", "None", "\n", "if", "a_result", "is", "None", "or", "candidateA", ".", "failed", ":", "\n", "            ", "comparison", "=", "False", "\n", "", "elif", "b_result", "is", "None", "or", "candidateB", ".", "failed", ":", "\n", "            ", "comparison", "=", "True", "\n", "", "elif", "self", ".", "minimization_problem", ":", "\n", "            ", "if", "a_result", "<", "b_result", ":", "\n", "                ", "comparison", "=", "True", "\n", "", "else", ":", "\n", "                ", "comparison", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "if", "a_result", ">", "b_result", ":", "\n", "                ", "comparison", "=", "True", "\n", "", "else", ":", "\n", "                ", "comparison", "=", "False", "\n", "", "", "self", ".", "_logger", ".", "debug", "(", "\"Comparison result: %s\"", ",", "comparison", ")", "\n", "return", "comparison", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.warp_pt_in": [[342, 362], ["experiment.Experiment._logger.debug", "params.iteritems", "experiment.Experiment._logger.debug", "experiment.Experiment.parameter_definitions[].warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "warp_pt_in", "(", "self", ",", "params", ")", ":", "\n", "        ", "\"\"\"\n        Warps in a point.\n\n        Parameters\n        ----------\n        params : dict of string keys\n            The point to warp in\n\n        Returns\n        -------\n        warped_in : dict of string keys\n            The warped-in parameters.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warping point in. Params: %s\"", ",", "params", ")", "\n", "warped_in", "=", "{", "}", "\n", "for", "name", ",", "value", "in", "params", ".", "iteritems", "(", ")", ":", "\n", "            ", "warped_in", "[", "name", "]", "=", "self", ".", "parameter_definitions", "[", "name", "]", ".", "warp_in", "(", "value", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Warped-in parameters: %s\"", ",", "warped_in", ")", "\n", "return", "warped_in", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.warp_pt_out": [[363, 383], ["experiment.Experiment._logger.debug", "params.iteritems", "experiment.Experiment._logger.debug", "experiment.Experiment.parameter_definitions[].warp_out"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out"], ["", "def", "warp_pt_out", "(", "self", ",", "params", ")", ":", "\n", "        ", "\"\"\"\n        Warps out a point.\n\n        Parameters\n        ----------\n        params : dict of string keys\n            The point to warp out\n\n        Returns\n        -------\n        warped_out : dict of string keys\n            The warped-out parameters.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warping point out. params: %s\"", ",", "params", ")", "\n", "warped_out", "=", "{", "}", "\n", "for", "name", ",", "value", "in", "params", ".", "iteritems", "(", ")", ":", "\n", "            ", "warped_out", "[", "name", "]", "=", "self", ".", "parameter_definitions", "[", "name", "]", ".", "warp_out", "(", "value", ")", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Warped-out parameters: %s\"", ",", "warped_out", ")", "\n", "return", "warped_out", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.clone": [[384, 397], ["experiment.Experiment._logger.debug", "copy.deepcopy", "experiment.Experiment._logger.debug"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Create a deep copy of this experiment and return it.\n\n        Returns\n        -------\n            copied_experiment : Experiment\n                A deep copy of this experiment.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Cloning experiment.\"", ")", "\n", "copied_experiment", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Cloned experiment is %s\"", ",", "copied_experiment", ")", "\n", "return", "copied_experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_candidate": [[398, 426], ["isinstance", "experiment.Experiment._logger.error", "ValueError", "experiment.Experiment._logger.error", "ValueError", "set", "set", "experiment.Experiment.parameter_definitions[].is_in_parameter_domain", "experiment.Experiment._logger.error", "ValueError", "cand.params.keys", "experiment.Experiment.parameter_definitions.keys"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain"], ["", "def", "_check_candidate", "(", "self", ",", "cand", ")", ":", "\n", "        ", "\"\"\"\n        Checks whether cand is valid for this experiment.\n\n        This checks the existence of all parameter definitions and that all\n        values are acceptable.\n\n        Parameter\n        ---------\n        cand : Candidate\n            Candidate to check\n\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "cand", ",", "Candidate", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "error", "(", "\"cand is not an instance of Candidate but is\"", "\n", "\"%s\"", ",", "cand", ")", "\n", "raise", "ValueError", "(", "\"cand is not an instance of Candidate but is\"", "\n", "\"%s\"", "%", "cand", ")", "\n", "", "if", "not", "set", "(", "cand", ".", "params", ".", "keys", "(", ")", ")", "==", "set", "(", "self", ".", "parameter_definitions", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "error", "(", "\"cand %s is not valid.\"", ",", "cand", ")", "\n", "raise", "ValueError", "(", "\"cand %s is not valid.\"", "%", "cand", ")", "\n", "\n", "", "for", "k", "in", "cand", ".", "params", ":", "\n", "            ", "if", "not", "self", ".", "parameter_definitions", "[", "k", "]", ".", "is_in_parameter_domain", "(", "cand", ".", "params", "[", "k", "]", ")", ":", "\n", "                ", "self", ".", "_logger", ".", "error", "(", "\"cand %s is not valid.\"", ",", "cand", ")", "\n", "raise", "ValueError", "(", "\"cand %s is not valid.\"", "%", "cand", ")", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_param_dict": [[427, 458], ["experiment.Experiment._logger.debug", "experiment.Experiment._logger.debug", "experiment.Experiment._logger.debug", "set", "set", "experiment.Experiment.parameter_definitions[].is_in_parameter_domain", "experiment.Experiment._logger.debug", "param_dict.keys", "experiment.Experiment.parameter_definitions.keys"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain"], ["", "def", "_check_param_dict", "(", "self", ",", "param_dict", ")", ":", "\n", "        ", "\"\"\"\n        Checks whether parameter dictionary is valid for this experiment.\n\n        This checks the existence of all parameter definitions and that all\n        values are acceptable.\n\n        Parameter\n        ---------\n        param_dict : dict with string keys\n            Dictionary to check\n\n        Returns\n        -------\n        acceptable : bool\n            True iff the dictionary is valid\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Checking parameter dictionary %s\"", ",", "param_dict", ")", "\n", "if", "not", "set", "(", "param_dict", ".", "keys", "(", ")", ")", "==", "set", "(", "self", ".", "parameter_definitions", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Returned false due to keys not being \"", "\n", "\"identical.\"", ")", "\n", "return", "False", "\n", "\n", "", "for", "k", "in", "param_dict", ":", "\n", "            ", "if", "not", "self", ".", "parameter_definitions", "[", "k", "]", ".", "is_in_parameter_domain", "(", "param_dict", "[", "k", "]", ")", ":", "\n", "                ", "self", ".", "_logger", ".", "debug", "(", "\"Returned false due to param_def %s not\"", "\n", "\"being in parameter domain %s\"", ",", "k", ",", "\n", "self", ".", "parameter_definitions", "[", "k", "]", ")", "\n", "return", "False", "\n", "", "", "self", ".", "_logger", ".", "debug", "(", "\"Returning True; dict acceptable.\"", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.to_dict": [[459, 507], ["experiment.Experiment._logger.debug", "experiment.Experiment._logger.debug", "experiment.Experiment.parameter_definitions[].to_dict", "c.to_dict", "c.to_dict", "c.to_dict", "experiment.Experiment.best_candidate.to_dict"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generates a dictionary describing the current state of the experiment.\n\n        This dictionary contains the following keys/value pairs:\n            - \"name\": The name of the experiment\n            - \"parameter_definition\": The parameter definition. Contains, for\n                each parameter, a key/value pair of the parameter name and the\n                dictionary as defined by param_def.to_dict().\n            - \"mimization_problem\": Boolean. If true, the problem is one we\n                want to minimize. If false, it's one we want to maximize.\n            - \"notes\": Notes the user has entered for the experiment.\n            - \"exp_id\": The ID of the experiment.\n            - One list each for candidates_finished, -_pending and -_working.\n                Contains, for each candidate in the respective list, a\n                dictionary as defined by Candidate.to_dict().\n            - \"best_candidate\": The best candidate or None.\n\n        Returns\n        -------\n            dict : dict\n                Dictionary as defined above.\n\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Generating experiment dictionary.\"", ")", "\n", "param_defs", "=", "{", "}", "\n", "for", "k", "in", "self", ".", "parameter_definitions", ":", "\n", "            ", "param_defs", "[", "k", "]", "=", "self", ".", "parameter_definitions", "[", "k", "]", ".", "to_dict", "(", ")", "\n", "", "cand_dict_finished", "=", "[", "c", ".", "to_dict", "(", ")", "for", "c", "in", "self", ".", "candidates_finished", "]", "\n", "cand_dict_pending", "=", "[", "c", ".", "to_dict", "(", ")", "for", "c", "in", "self", ".", "candidates_pending", "]", "\n", "cand_dict_working", "=", "[", "c", ".", "to_dict", "(", ")", "for", "c", "in", "self", ".", "candidates_working", "]", "\n", "\n", "result_dict", "=", "{", "\"name\"", ":", "self", ".", "name", ",", "\n", "\"parameter_definitions\"", ":", "param_defs", ",", "\n", "\"minimization_problem\"", ":", "self", ".", "minimization_problem", ",", "\n", "\"notes\"", ":", "self", ".", "notes", ",", "\n", "\"exp_id\"", ":", "self", ".", "exp_id", ",", "\n", "\"candidates_finished\"", ":", "cand_dict_finished", ",", "\n", "\"candidates_pending\"", ":", "cand_dict_pending", ",", "\n", "\"candidates_working\"", ":", "cand_dict_working", ",", "\n", "\"last_update_time\"", ":", "self", ".", "last_update_time", "\n", "}", "\n", "if", "self", ".", "best_candidate", "is", "not", "None", ":", "\n", "            ", "result_dict", "[", "\"best_candidate\"", "]", "=", "self", ".", "best_candidate", ".", "to_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "result_dict", "[", "\"best_candidate\"", "]", "=", "None", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Final dictionary: %s\"", ",", "result_dict", ")", "\n", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._update_best": [[508, 517], ["experiment.Experiment._logger.debug", "experiment.Experiment._logger.debug", "experiment.Experiment.better_cand", "experiment.Experiment._logger.debug"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand"], ["", "def", "_update_best", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Updating best candidate.\"", ")", "\n", "best_candidate", "=", "None", "\n", "for", "c", "in", "self", ".", "candidates_finished", ":", "\n", "            ", "if", "self", ".", "better_cand", "(", "c", ",", "best_candidate", ")", ":", "\n", "                ", "best_candidate", "=", "c", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Found new better candidate: %s\"", ",", "c", ")", "\n", "", "", "self", ".", "_logger", ".", "debug", "(", "\"Best candidate now %s\"", ",", "best_candidate", ")", "\n", "self", ".", "best_candidate", "=", "best_candidate", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.write_state_to_file": [[518, 522], ["experiment.Experiment._logger.debug", "open", "json.dump", "experiment.Experiment.to_dict"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "write_state_to_file", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Writing stats to %s\"", ",", "path", ")", "\n", "with", "open", "(", "path", "+", "'/experiment.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "to_dict", "(", ")", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.from_dict": [[525, 560], ["apsis.utilities.logging_utils.get_logger", "logging_utils.get_logger.log", "apsis.utilities.param_def_utilities.dict_to_param_defs", "logging_utils.get_logger.debug", "logging_utils.get_logger.log", "experiment.Experiment", "experiment.Experiment._update_best", "d.get", "logging_utils.get_logger.log", "cands_finished.append", "cands_pending.append", "cands_working.append", "time.time", "apsis.models.candidate.from_dict", "apsis.models.candidate.from_dict", "apsis.models.candidate.from_dict"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities.dict_to_param_defs", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._update_best", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.from_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.from_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.from_dict"], ["", "", "", "def", "from_dict", "(", "d", ")", ":", "\n", "    ", "experiment_logger", "=", "logging_utils", ".", "get_logger", "(", "\"models.Experiment\"", ")", "\n", "experiment_logger", ".", "log", "(", "5", ",", "\"Reconstructing experiment from dict %d\"", ",", "d", ")", "\n", "name", "=", "d", "[", "\"name\"", "]", "\n", "param_defs", "=", "dict_to_param_defs", "(", "d", "[", "\"parameter_definitions\"", "]", ")", "\n", "minimization_problem", "=", "d", "[", "\"minimization_problem\"", "]", "\n", "notes", "=", "d", "[", "\"notes\"", "]", "\n", "exp_id", "=", "d", "[", "\"exp_id\"", "]", "\n", "experiment_logger", ".", "debug", "(", "\"Reconstructed attributes.\"", ")", "\n", "cand_dict_finished", "=", "d", "[", "\"candidates_finished\"", "]", "\n", "cands_finished", "=", "[", "]", "\n", "for", "c", "in", "cand_dict_finished", ":", "\n", "        ", "cands_finished", ".", "append", "(", "candidate", ".", "from_dict", "(", "c", ")", ")", "\n", "", "cand_dict_pending", "=", "d", "[", "\"candidates_pending\"", "]", "\n", "cands_pending", "=", "[", "]", "\n", "for", "c", "in", "cand_dict_pending", ":", "\n", "        ", "cands_pending", ".", "append", "(", "candidate", ".", "from_dict", "(", "c", ")", ")", "\n", "", "cand_dict_working", "=", "d", "[", "\"candidates_working\"", "]", "\n", "cands_working", "=", "[", "]", "\n", "for", "c", "in", "cand_dict_working", ":", "\n", "        ", "cands_working", ".", "append", "(", "candidate", ".", "from_dict", "(", "c", ")", ")", "\n", "", "experiment_logger", ".", "log", "(", "5", ",", "\"Reconstructed candidates.\"", ")", "\n", "best_candidate", "=", "d", "[", "\"best_candidate\"", "]", "\n", "\n", "exp", "=", "Experiment", "(", "name", ",", "param_defs", ",", "exp_id", ",", "notes", ",", "minimization_problem", ")", "\n", "\n", "exp", ".", "candidates_finished", "=", "cands_finished", "\n", "exp", ".", "candidates_pending", "=", "cands_pending", "\n", "exp", ".", "candidates_working", "=", "exp", ".", "candidates_working", "\n", "exp", ".", "_update_best", "(", ")", "\n", "exp", ".", "last_update_time", "=", "d", ".", "get", "(", "\"last_update_time\"", ",", "time", ".", "time", "(", ")", ")", "\n", "\n", "experiment_logger", ".", "log", "(", "5", ",", "\"Finished reconstruction. Exp is %s.\"", ",", "exp", ")", "\n", "\n", "return", "exp", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ParamDef.__init__": [[18, 20], ["apsis.utilities.logging_utils.get_logger"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ParamDef.is_in_parameter_domain": [[21, 42], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "is_in_parameter_domain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Should test whether a certain value is in the parameter domain as\n        defined by this class.\n\n        Note that you have to test a value that is not warped in here. A\n        warped-in value can be tested by checking whether it is in [0, 1].\n\n        Parameters\n        ----------\n        value : object\n            Tests whether the object is in the parameter domain.\n\n        Returns\n        -------\n        is_in_parameter_domain : bool\n            True iff value is in the parameter domain as defined by this\n            instance.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ParamDef.distance": [[43, 53], ["parameter_definition.ParamDef._logger.debug", "parameter_definition.ParamDef._logger.debug"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "valueA", ",", "valueB", ")", ":", "\n", "        ", "\"\"\"\n        Returns the distance between `valueA` and `valueB`.\n        In this case, it's 0 iff valueA == valueB, 1 otherwise.\n        \"\"\"", "\n", "if", "valueA", "==", "valueB", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Values are identical; returning distance 0\"", ")", "\n", "return", "0", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Values are different; returning distance 1\"", ")", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ParamDef.to_dict": [[54, 70], ["parameter_definition.ParamDef._logger.debug", "dict", "parameter_definition.ParamDef._logger.debug"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This returns a dictionary from which we can build a new instance of\n        the parameter.\n\n        Returns\n        -------\n        dict : dictionary\n            The dictionary from which we can rebuild this parameter definition.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Converting param_def to dict\"", ")", "\n", "result_dict", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "del", "result_dict", "[", "\"_logger\"", "]", "\n", "result_dict", "[", "\"type\"", "]", "=", "self", ".", "__class__", ".", "__name__", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Final converted param_def dict %s\"", ",", "result_dict", ")", "\n", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ParamDef.warp_in": [[71, 89], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "warp_in", "(", "self", ",", "unwarped_value", ")", ":", "\n", "        ", "\"\"\"\n        Warps value_in into a [0, 1] hypercube represented by a list.\n\n        Parameters\n        ----------\n        unwarped_value :\n            The value to be warped in. Has to be in parameter domain of this\n            class.\n\n        Returns\n        -------\n        warped_value : list of floats in [0, 1]\n            The warped value. Length of the list is equal to the return of\n            warped_size()\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ParamDef.warp_out": [[90, 108], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "warp_out", "(", "self", ",", "warped_value", ")", ":", "\n", "        ", "\"\"\"\n        Warps a [0, 1] hypercube position representing a value to said value.\n\n        Parameters\n        ----------\n        warped_value : list of floats in [0, 1]\n            The warped value. Length of the list is equal to the return of\n            warped_size()\n\n        Returns\n        -------\n        unwarped_value :\n            The value to be warped in. Has to be in parameter domain of this\n            class.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ParamDef.warped_size": [[109, 115], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "warped_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the size a list of this parameters' warped values will have.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.ComparableParamDef.compare_values": [[125, 150], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "compare_values", "(", "self", ",", "one", ",", "two", ")", ":", "\n", "        ", "\"\"\"\n        Compare values one and two of this datatype.\n\n        It has to follow the same return semantics as the Python standard\n        __cmp__ methods, meaning it returns negative integer if one < two,\n        zero if one == two, a positive integer if one > two.\n\n        Parameters\n        ----------\n        one : object in parameter definition\n            The first value used in comparison.\n\n        two : object in parameter definition\n            The second value used in comparison.\n\n        Returns\n        -------\n        comp: integer\n            comp < 0 iff one < two.\n            comp = 0 iff one = two.\n            comp > 0 iff one > two.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NominalParamDef.__init__": [[162, 194], ["parameter_definition.ParamDef.__init__", "parameter_definition.NominalParamDef._logger.debug", "isinstance", "ValueError", "len", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "values", ")", ":", "\n", "        ", "\"\"\"\n        Instantiates the NominalParamDef instance.\n\n        Parameters\n        ----------\n        values : list\n            A list of values which are the possible values that are in this\n            parameter definition.\n\n        Raises\n        ------\n        ValueError :\n            Iff values is not a list, or values is an empty list.\n        \"\"\"", "\n", "\n", "super", "(", "NominalParamDef", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing nominal param def with values %s\"", ",", "\n", "values", ")", "\n", "if", "not", "isinstance", "(", "values", ",", "list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"You created a NominalParameterDef object without \"", "\n", "\"specifying the possible values list.\"", ")", "\n", "\n", "", "if", "len", "(", "values", ")", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"You need to specify a list of all possible values for this \"", "\n", "\"data type in order to make it being used for your \"", "\n", "\"optimization! The given list was empty: \"", "+", "str", "(", "values", ")", "\n", ")", "\n", "\n", "", "self", ".", "values", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NominalParamDef.is_in_parameter_domain": [[195, 204], ["parameter_definition.NominalParamDef._logger.debug", "parameter_definition.NominalParamDef._logger.debug"], "methods", ["None"], ["", "def", "is_in_parameter_domain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether value is in self.values as defined during the init\n        function.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Testing whether %s is in param domain\"", ",", "value", ")", "\n", "is_in_param_domain", "=", "value", "in", "self", ".", "values", "\n", "self", ".", "_logger", ".", "debug", "(", "\"In param domain: %s\"", ",", "is_in_param_domain", ")", "\n", "return", "is_in_param_domain", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NominalParamDef.warp_in": [[205, 211], ["parameter_definition.NominalParamDef._logger.debug", "parameter_definition.NominalParamDef._logger.debug", "len", "parameter_definition.NominalParamDef.values.index"], "methods", ["None"], ["", "def", "warp_in", "(", "self", ",", "unwarped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping in %s\"", ",", "unwarped_value", ")", "\n", "warped_value", "=", "[", "0", "]", "*", "len", "(", "self", ".", "values", ")", "\n", "warped_value", "[", "self", ".", "values", ".", "index", "(", "unwarped_value", ")", "]", "=", "1", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Results in %s\"", ",", "warped_value", ")", "\n", "return", "warped_value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NominalParamDef.warp_out": [[212, 218], ["parameter_definition.NominalParamDef._logger.debug", "list", "parameter_definition.NominalParamDef._logger.debug", "list.index", "max"], "methods", ["None"], ["", "def", "warp_out", "(", "self", ",", "warped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping out %s\"", ",", "warped_value", ")", "\n", "warped_value", "=", "list", "(", "warped_value", ")", "\n", "unwarped_value", "=", "self", ".", "values", "[", "warped_value", ".", "index", "(", "max", "(", "warped_value", ")", ")", "]", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Results in %s\"", ",", "unwarped_value", ")", "\n", "return", "unwarped_value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NominalParamDef.warped_size": [[219, 223], ["len", "parameter_definition.NominalParamDef._logger.debug"], "methods", ["None"], ["", "def", "warped_size", "(", "self", ")", ":", "\n", "        ", "warped_size", "=", "len", "(", "self", ".", "values", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warped size: %s\"", ",", "warped_size", ")", "\n", "return", "warped_size", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.OrdinalParamDef.__init__": [[233, 235], ["parameter_definition.NominalParamDef.__init__"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "values", ")", ":", "\n", "        ", "super", "(", "OrdinalParamDef", ",", "self", ")", ".", "__init__", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.OrdinalParamDef.compare_values": [[236, 260], ["parameter_definition.OrdinalParamDef._logger.debug", "parameter_definition.OrdinalParamDef._logger.debug", "ValueError", "parameter_definition.OrdinalParamDef.values.index", "parameter_definition.OrdinalParamDef.values.index", "parameter_definition.OrdinalParamDef.values.index", "parameter_definition.OrdinalParamDef.values.index"], "methods", ["None"], ["", "def", "compare_values", "(", "self", ",", "one", ",", "two", ")", ":", "\n", "        ", "\"\"\"\n        Compare values of this ordinal data type. Return is the same\n        semantic as in __cmp__.\n\n        Comparison takes place based on the index the given values one and\n        two have in the values list in this object. Meaning if this ordinal\n        parameter definition has a values list of [3,5,1,4]', then '5' will be\n        considered smaller than '1' and '1' bigger than '5' because the index\n        of '1' in this list is higher than the index of '5'.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Comparing %s and %s\"", ",", "one", ",", "two", ")", "\n", "if", "one", "not", "in", "self", ".", "values", "or", "two", "not", "in", "self", ".", "values", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Values not comparable! Either one or the other is not in the \"", "\n", "\"values domain\"", ")", "\n", "\n", "", "comparison", "=", "0", "\n", "if", "self", ".", "values", ".", "index", "(", "one", ")", "<", "self", ".", "values", ".", "index", "(", "two", ")", ":", "\n", "            ", "comparison", "=", "-", "1", "\n", "", "if", "self", ".", "values", ".", "index", "(", "one", ")", ">", "self", ".", "values", ".", "index", "(", "two", ")", ":", "\n", "            ", "comparison", "=", "1", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Results in %s\"", ",", "comparison", ")", "\n", "return", "comparison", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.OrdinalParamDef.distance": [[261, 278], ["parameter_definition.OrdinalParamDef._logger.debug", "parameter_definition.OrdinalParamDef.values.index", "parameter_definition.OrdinalParamDef.values.index", "abs", "parameter_definition.OrdinalParamDef._logger.debug", "ValueError", "float", "len"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "valueA", ",", "valueB", ")", ":", "\n", "        ", "\"\"\"\n        This distance is defined as the absolute difference between the values'\n        position in the list, normed to the [0, 1] hypercube.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Computing distance between %s and %s\"", ",", "\n", "valueA", ",", "valueB", ")", "\n", "if", "valueA", "not", "in", "self", ".", "values", "or", "valueB", "not", "in", "self", ".", "values", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Values not comparable! Either one or the other is not in the \"", "\n", "\"values domain\"", ")", "\n", "", "indexA", "=", "self", ".", "values", ".", "index", "(", "valueA", ")", "\n", "indexB", "=", "self", ".", "values", ".", "index", "(", "valueB", ")", "\n", "diff", "=", "abs", "(", "indexA", "-", "indexB", ")", "\n", "dist", "=", "float", "(", "diff", ")", "/", "len", "(", "self", ".", "values", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Distance is %s\"", ",", "dist", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.__init__": [[294, 309], ["parameter_definition.ParamDef.__init__"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "warping_in", ",", "warping_out", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the Numeric Param Def.\n\n        Parameters\n        ----------\n        warping_in : function\n            warping_in must take a value and return a corresponding value in\n            the [0, 1] space.\n        warping_out : function\n            warping_out is the reverse function to warping_in.\n        \"\"\"", "\n", "super", "(", "NumericParamDef", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "warping_in", "=", "warping_in", "\n", "self", ".", "warping_out", "=", "warping_out", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.is_in_parameter_domain": [[310, 320], ["parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "is_in_parameter_domain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Uses the warp_out function for tests.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Testing whether %s is in param_domain\"", ",", "value", ")", "\n", "if", "0", "<=", "self", ".", "warp_in", "(", "value", ")", "[", "0", "]", "<=", "1", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"It is.\"", ")", "\n", "return", "True", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"It is not.\"", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.warp_in": [[321, 326], ["parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef.warping_in"], "methods", ["None"], ["", "def", "warp_in", "(", "self", ",", "unwarped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping %s in.\"", ",", "unwarped_value", ")", "\n", "warped_value", "=", "[", "self", ".", "warping_in", "(", "unwarped_value", ")", "]", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Results in %s\"", ",", "warped_value", ")", "\n", "return", "warped_value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.warp_out": [[327, 332], ["parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef.warping_out", "parameter_definition.NumericParamDef._logger.debug"], "methods", ["None"], ["", "def", "warp_out", "(", "self", ",", "warped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping %s out\"", ",", "warped_value", ")", "\n", "warped_out", "=", "self", ".", "warping_out", "(", "warped_value", "[", "0", "]", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warped out: %s\"", ",", "warped_out", ")", "\n", "return", "warped_out", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.warped_size": [[333, 336], ["parameter_definition.NumericParamDef._logger.debug"], "methods", ["None"], ["", "def", "warped_size", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warped size is always 1.\"", ")", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values": [[337, 352], ["parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef.is_in_parameter_domain", "ValueError", "parameter_definition.NumericParamDef.is_in_parameter_domain", "ValueError", "str", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain"], ["", "def", "compare_values", "(", "self", ",", "one", ",", "two", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Comparing %s and %s\"", ",", "one", ",", "two", ")", "\n", "if", "not", "self", ".", "is_in_parameter_domain", "(", "one", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Parameter one = \"", "+", "str", "(", "one", ")", "+", "\" not in value \"", "\n", "\"domain.\"", ")", "\n", "", "if", "not", "self", ".", "is_in_parameter_domain", "(", "two", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Parameter two = \"", "+", "str", "(", "two", ")", "+", "\" not in value \"", "\n", "\"domain.\"", ")", "\n", "", "comparison", "=", "0", "\n", "if", "one", "<", "two", ":", "\n", "            ", "comparison", "=", "-", "1", "\n", "", "elif", "one", ">", "two", ":", "\n", "            ", "comparison", "=", "1", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Comparison is %s\"", ",", "comparison", ")", "\n", "return", "comparison", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.distance": [[353, 365], ["parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef._logger.debug", "parameter_definition.NumericParamDef.is_in_parameter_domain", "ValueError", "parameter_definition.NumericParamDef.is_in_parameter_domain", "ValueError", "parameter_definition.NumericParamDef.warp_in", "parameter_definition.NumericParamDef.warp_in", "str", "str"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "distance", "(", "self", ",", "valueA", ",", "valueB", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Computing distance between %s and %s\"", ",", "valueA", ",", "\n", "valueB", ")", "\n", "if", "not", "self", ".", "is_in_parameter_domain", "(", "valueA", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Parameter one = \"", "+", "str", "(", "valueA", ")", "+", "\" not in value \"", "\n", "\"domain.\"", ")", "\n", "", "if", "not", "self", ".", "is_in_parameter_domain", "(", "valueB", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Parameter two = \"", "+", "str", "(", "valueB", ")", "+", "\" not in value \"", "\n", "\"domain.\"", ")", "\n", "", "dist", "=", "self", ".", "warp_in", "(", "valueB", ")", "[", "0", "]", "-", "self", ".", "warp_in", "(", "valueA", ")", "[", "0", "]", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Distance is %s\"", ",", "dist", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.__init__": [[381, 425], ["apsis.utilities.logging_utils.get_logger", "parameter_definition.MinMaxNumericParamDef._logger.debug", "parameter_definition.MinMaxNumericParamDef._logger.debug", "float", "float", "ValueError"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["def", "__init__", "(", "self", ",", "lower_bound", ",", "upper_bound", ",", "\n", "include_lower", "=", "True", ",", "include_upper", "=", "True", ",", "epsilon", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the lower/upper bound defined parameter space.\n\n        Parameters\n        ----------\n        lower_bound : float\n            The lowest possible value\n        upper_bound : float\n            The highest possible value\n        include_lower : bool, optional\n            If true (default), lower_bound is the smallest possible value that\n            can be returned. If false, all returned values will be greater than\n            lower_bound.\n        include_upper : bool, optional\n            If true (default), upper_bound is the greatest possible value that\n            can be returned. If false, all returned values will be less than\n            upper_bound.\n        epsilon : float, optional\n            The tolerance to use if excluding upper/lower. The lowest or\n            highest value will be epsilon away from the given lower or upper\n            bound. By default, this is ten times the system's float epsilon.\n\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing MinMaxParamDef. Parameters are \"", "\n", "\"lower bound %s, upper_bound %s, include_lower %s,\"", "\n", "\"include_upper %s and epsilon %s\"", ",", "\n", "lower_bound", ",", "upper_bound", ",", "include_lower", ",", "\n", "include_upper", ",", "epsilon", ")", "\n", "try", ":", "\n", "            ", "lower_bound", "=", "float", "(", "lower_bound", ")", "\n", "upper_bound", "=", "float", "(", "upper_bound", ")", "\n", "", "except", ":", "\n", "            ", "raise", "ValueError", "(", "\"Bounds are not floats.\"", ")", "\n", "", "if", "epsilon", "is", "None", ":", "\n", "            ", "epsilon", "=", "sys", ".", "float_info", ".", "epsilon", "*", "10", "\n", "", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "lower_bound", "=", "lower_bound", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "include_lower", "=", "include_lower", "\n", "self", ".", "include_upper", "=", "include_upper", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialized MinMaxParamDef.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.warp_in": [[426, 435], ["parameter_definition.MinMaxNumericParamDef._logger.debug", "parameter_definition.MinMaxNumericParamDef._logger.debug", "float"], "methods", ["None"], ["", "def", "warp_in", "(", "self", ",", "unwarped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping in %s\"", ",", "unwarped_value", ")", "\n", "modifed_lower", "=", "self", ".", "lower_bound", "+", "(", "0", "if", "self", ".", "include_lower", "else", "self", ".", "epsilon", ")", "\n", "modifed_upper", "=", "self", ".", "upper_bound", "-", "(", "0", "if", "self", ".", "include_upper", "else", "self", ".", "epsilon", ")", "\n", "result", "=", "(", "(", "unwarped_value", "-", "(", "modifed_lower", ")", ")", "/", "\n", "(", "modifed_upper", "-", "modifed_lower", ")", ")", "\n", "result", "=", "[", "float", "(", "result", ")", "]", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warped out to %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.warp_out": [[436, 444], ["parameter_definition.MinMaxNumericParamDef._logger.debug", "float", "parameter_definition.MinMaxNumericParamDef._logger.debug"], "methods", ["None"], ["", "def", "warp_out", "(", "self", ",", "warped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping out %s\"", ",", "warped_value", ")", "\n", "modifed_lower", "=", "self", ".", "lower_bound", "+", "(", "0", "if", "self", ".", "include_lower", "else", "self", ".", "epsilon", ")", "\n", "modifed_upper", "=", "self", ".", "upper_bound", "-", "(", "0", "if", "self", ".", "include_upper", "else", "self", ".", "epsilon", ")", "\n", "result", "=", "warped_value", "[", "0", "]", "*", "(", "modifed_upper", "-", "modifed_lower", ")", "+", "modifed_lower", "\n", "result", "=", "float", "(", "result", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warped out to %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.warped_size": [[445, 448], ["parameter_definition.MinMaxNumericParamDef._logger.debug"], "methods", ["None"], ["", "def", "warped_size", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warped size is always 1.\"", ")", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain": [[449, 461], ["parameter_definition.MinMaxNumericParamDef._logger.debug", "parameter_definition.MinMaxNumericParamDef._logger.debug", "parameter_definition.MinMaxNumericParamDef._logger.debug", "parameter_definition.MinMaxNumericParamDef._logger.debug"], "methods", ["None"], ["", "def", "is_in_parameter_domain", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Testing whether %s is in parameter domain\"", ",", "value", ")", "\n", "if", "not", "(", "self", ".", "lower_bound", "<", "value", "or", "\n", "(", "self", ".", "lower_bound", "<=", "value", "and", "self", ".", "include_lower", ")", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Is too small.\"", ")", "\n", "return", "False", "\n", "", "if", "not", "(", "self", ".", "upper_bound", ">", "value", "or", "\n", "(", "self", ".", "upper_bound", ">=", "value", "and", "self", ".", "include_upper", ")", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Is too big.\"", ")", "\n", "return", "False", "\n", "", "self", ".", "_logger", ".", "debug", "(", "\"Seems to fit.\"", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.__init__": [[469, 486], ["parameter_definition.OrdinalParamDef.__init__", "parameter_definition.PositionParamDef._logger.debug", "len", "len"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "values", ",", "positions", ")", ":", "\n", "        ", "\"\"\"\n        Initializes PositionParamDef\n\n        Parameters\n        ----------\n        values : list\n            List of the values\n        positions : list of floats\n            The corresponding positions of these values. Has to have the same\n            length as values.\n        \"\"\"", "\n", "assert", "len", "(", "values", ")", "==", "len", "(", "positions", ")", "\n", "super", "(", "PositionParamDef", ",", "self", ")", ".", "__init__", "(", "values", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing position_param_def with values %s and\"", "\n", "\"positions %s\"", ",", "values", ",", "positions", ")", "\n", "self", ".", "positions", "=", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.warp_in": [[487, 493], ["parameter_definition.PositionParamDef._logger.debug", "parameter_definition.PositionParamDef._logger.debug", "float", "parameter_definition.PositionParamDef.values.index", "max", "min", "min"], "methods", ["None"], ["", "def", "warp_in", "(", "self", ",", "unwarped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping in %s\"", ",", "unwarped_value", ")", "\n", "pos", "=", "self", ".", "positions", "[", "self", ".", "values", ".", "index", "(", "unwarped_value", ")", "]", "\n", "warped_value", "=", "float", "(", "pos", "-", "min", "(", "self", ".", "positions", ")", ")", "/", "(", "max", "(", "self", ".", "positions", ")", "-", "min", "(", "self", ".", "positions", ")", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warped into %s\"", ",", "[", "warped_value", "]", ")", "\n", "return", "[", "warped_value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.warp_out": [[494, 509], ["parameter_definition.PositionParamDef._logger.debug", "enumerate", "parameter_definition.PositionParamDef._logger.debug", "min", "abs", "abs", "max", "min"], "methods", ["None"], ["", "def", "warp_out", "(", "self", ",", "warped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping out %s\"", ",", "warped_value", ")", "\n", "warped_value", "=", "warped_value", "[", "0", "]", "\n", "if", "warped_value", ">", "1", ":", "\n", "            ", "return", "self", ".", "values", "[", "-", "1", "]", "\n", "", "if", "warped_value", "<", "0", ":", "\n", "            ", "return", "self", ".", "values", "[", "0", "]", "\n", "", "pos", "=", "warped_value", "*", "(", "max", "(", "self", ".", "positions", ")", "-", "min", "(", "self", ".", "positions", ")", ")", "+", "min", "(", "self", ".", "positions", ")", "\n", "min_pos_idx", "=", "0", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "self", ".", "positions", ")", ":", "\n", "            ", "if", "abs", "(", "p", "-", "pos", ")", "<", "abs", "(", "self", ".", "positions", "[", "min_pos_idx", "]", "-", "pos", ")", ":", "\n", "                ", "min_pos_idx", "=", "i", "\n", "", "", "result", "=", "self", ".", "values", "[", "min_pos_idx", "]", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Warped out to %s\"", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.warped_size": [[510, 513], ["parameter_definition.PositionParamDef._logger.debug"], "methods", ["None"], ["", "def", "warped_size", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warped size is always 1.\"", ")", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance": [[514, 526], ["parameter_definition.PositionParamDef._logger.debug", "abs", "parameter_definition.PositionParamDef._logger.debug", "float", "ValueError", "parameter_definition.PositionParamDef.values.index", "parameter_definition.PositionParamDef.values.index"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "valueA", ",", "valueB", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Computing distance between %s and %s\"", ",", "valueA", ",", "\n", "valueB", ")", "\n", "if", "valueA", "not", "in", "self", ".", "values", "or", "valueB", "not", "in", "self", ".", "values", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Values not comparable! Either one or the other is not in the \"", "\n", "\"values domain\"", ")", "\n", "", "pos_a", "=", "self", ".", "positions", "[", "self", ".", "values", ".", "index", "(", "valueA", ")", "]", "\n", "pos_b", "=", "self", ".", "positions", "[", "self", ".", "values", ".", "index", "(", "valueB", ")", "]", "\n", "diff", "=", "abs", "(", "pos_a", "-", "pos_b", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Distance is %s\"", ",", "diff", ")", "\n", "return", "float", "(", "diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.FixedValueParamDef.__init__": [[533, 540], ["parameter_definition.PositionParamDef.__init__", "parameter_definition.FixedValueParamDef._logger.debug", "positions.append"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "values", ")", ":", "\n", "        ", "positions", "=", "[", "]", "\n", "for", "v", "in", "values", ":", "\n", "            ", "pos", "=", "v", "\n", "positions", ".", "append", "(", "pos", ")", "\n", "", "super", "(", "FixedValueParamDef", ",", "self", ")", ".", "__init__", "(", "values", ",", "positions", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initialized FixedValue with %s\"", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.FixedValueParamDef.to_dict": [[541, 547], ["parameter_definition.FixedValueParamDef._logger.debug"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "\n", "        ", "param_dict", "=", "{", "\"values\"", ":", "self", ".", "values", ",", "\n", "\"type\"", ":", "self", ".", "__class__", ".", "__name__", "}", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Converting to dict: %s\"", ",", "param_dict", ")", "\n", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.__init__": [[568, 648], ["apsis.utilities.logging_utils.get_logger", "parameter_definition.RangeParamDef._logger.debug", "kwargs.get", "parameter_definition.FixedValueParamDef.__init__", "parameter_definition.RangeParamDef._logger.debug", "len", "len", "ValueError", "abs", "abs", "values.append", "ValueError", "len", "len", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "ValueError", "len", "isinstance", "ValueError", "isinstance", "ValueError", "isinstance", "ValueError", "len", "len", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the RangeParamDef.\n\n        Syntax is mostly as with python's range:\n        - range(b): Iterate from 0 to b with a step size of 1.\n        - range(a, b): Iterate from a to b with a step size of 1.\n        - range(a, b, c): Iterate from a to b with a step size of c.\n        However, an additional parameter allows us to change the behaviour\n        away from python's range function to the equivalent function but\n        allowing non-integer numbers. You can either call it with\n        - range(a, b, c, BOOL) where BOOL is True or False (the default, True,\n        means using normal python range behaviour) or by using ints=BOOL as a\n        kwarg.\n        - range(kwargs) where it receives exactly four kwargs (used for\n        reconstruction).\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Building a RangeParamDef. *args are %s, *kwargs \"", "\n", "\"%s\"", ",", "args", ",", "kwargs", ")", "\n", "self", ".", "_start", "=", "0", "\n", "self", ".", "_stop", "=", "None", "\n", "self", ".", "_step", "=", "1", "\n", "self", ".", "_ints", "=", "kwargs", ".", "get", "(", "\"ints\"", ",", "True", ")", "\n", "if", "len", "(", "args", ")", "==", "4", ":", "\n", "            ", "self", ".", "_start", ",", "self", ".", "_stop", ",", "self", ".", "_step", ",", "self", ".", "_ints", "=", "args", "\n", "if", "not", "kwargs", ":", "\n", "                ", "raise", "ValueError", "(", "\"Received four positional arguments plus at\"", "\n", "\"least one kwarg argument. Cannot guarantee\"", "\n", "\"unambiguity. args were %s, kwargs %s\"", "\n", "%", "(", "args", ",", "kwargs", ")", ")", "\n", "", "", "elif", "len", "(", "args", ")", "==", "3", ":", "\n", "            ", "self", ".", "_start", ",", "self", ".", "_stop", ",", "self", ".", "_step", "=", "args", "\n", "", "elif", "len", "(", "args", ")", "==", "2", ":", "\n", "            ", "self", ".", "_start", ",", "self", ".", "_stop", "=", "args", "\n", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "self", ".", "_stop", ",", "=", "args", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "kwargs", ")", "!=", "4", ":", "\n", "                ", "raise", "ValueError", "(", "\"Did not receive the right amount of\"", "\n", "\"positional arguments. You can have \"", "\n", "\"1, 2, 3 or 4 positional arguments and no \"", "\n", "\"kwargs, 1-3 positional and the ints kwarg \"", "\n", "\"or exactly four kwargs.\"", ")", "\n", "", "", "if", "len", "(", "kwargs", ")", ">=", "1", ":", "\n", "            ", "if", "len", "(", "kwargs", ")", "==", "4", ":", "\n", "                ", "self", ".", "_start", "=", "kwargs", ".", "get", "(", "\"start\"", ")", "\n", "self", ".", "_stop", "=", "kwargs", ".", "get", "(", "\"stop\"", ")", "\n", "self", ".", "_step", "=", "kwargs", ".", "get", "(", "\"step\"", ")", "\n", "self", ".", "_ints", "=", "kwargs", ".", "get", "(", "\"ints\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Received too many keyword arguments. It is \"", "\n", "\"only allowed to specify one of them (ints). \"", "\n", "\"kwarg was %s\"", "%", "(", "kwargs", ")", ")", "\n", "", "", "if", "len", "(", "kwargs", ")", "==", "1", "and", "\"ints\"", "not", "in", "kwargs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Received unknown keyword argument. Only ints is\"", "\n", "\"allowed. Received %s.\"", "%", "(", "kwargs", ")", ")", "\n", "\n", "", "if", "self", ".", "_ints", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "_start", ",", "(", "int", ",", "long", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"start is not an integer type but we are \"", "\n", "\"forced to only work on integers. Either \"", "\n", "\"change start or set ints to False.\"", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_stop", ",", "(", "int", ",", "long", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"stop is not an integer type but we are \"", "\n", "\"forced to only work on integers. Either \"", "\n", "\"change stop or set ints to False.\"", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_step", ",", "(", "int", ",", "long", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"step is not an integer type but we are \"", "\n", "\"forced to only work on integers. Either \"", "\n", "\"change step or set ints to False.\"", ")", "\n", "\n", "", "", "values", "=", "[", "]", "\n", "cur_value", "=", "self", ".", "_start", "\n", "while", "abs", "(", "cur_value", ")", "<", "abs", "(", "self", ".", "_stop", ")", ":", "\n", "            ", "values", ".", "append", "(", "cur_value", ")", "\n", "cur_value", "+=", "self", ".", "_step", "\n", "\n", "", "super", "(", "RangeParamDef", ",", "self", ")", ".", "__init__", "(", "values", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Finished RangeParamDef.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict": [[649, 657], ["parameter_definition.RangeParamDef._logger.debug"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "param_dict", "=", "{", "\"start\"", ":", "self", ".", "_start", ",", "\n", "\"stop\"", ":", "self", ".", "_stop", ",", "\n", "\"step\"", ":", "self", ".", "_step", ",", "\n", "\"ints\"", ":", "self", ".", "_ints", ",", "\n", "\"type\"", ":", "self", ".", "__class__", ".", "__name__", "}", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Converted to param_dict %s\"", ",", "param_dict", ")", "\n", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.EquidistantPositionParamDef.__init__": [[667, 673], ["enumerate", "parameter_definition.PositionParamDef.__init__", "positions.append", "float", "len"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__"], ["def", "__init__", "(", "self", ",", "values", ")", ":", "\n", "        ", "positions", "=", "[", "]", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "values", ")", ":", "\n", "            ", "pos", "=", "float", "(", "i", ")", "/", "(", "len", "(", "values", ")", "-", "1", ")", "\n", "positions", ".", "append", "(", "pos", ")", "\n", "", "super", "(", "EquidistantPositionParamDef", ",", "self", ")", ".", "__init__", "(", "values", ",", "positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.__init__": [[705, 721], ["apsis.utilities.logging_utils.get_logger", "parameter_definition.AsymptoticNumericParamDef._logger.debug", "float", "float"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["def", "__init__", "(", "self", ",", "asymptotic_border", ",", "border", ")", ":", "\n", "        ", "\"\"\"\n        Initializes this parameter definition.\n\n        Parameters\n        ----------\n        asymptotic_border : float\n            The asymptotic border.\n        border : float\n            The non-asymptotic border.\n        \"\"\"", "\n", "self", ".", "_logger", "=", "logging_utils", ".", "get_logger", "(", "self", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Initializing asymptotic param def with asym_border\"", "\n", "\" %s and border %s\"", ",", "asymptotic_border", ",", "border", ")", "\n", "self", ".", "asymptotic_border", "=", "float", "(", "asymptotic_border", ")", "\n", "self", ".", "border", "=", "float", "(", "border", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in": [[722, 739], ["parameter_definition.AsymptoticNumericParamDef._logger.debug", "parameter_definition.AsymptoticNumericParamDef._logger.debug", "min", "max", "parameter_definition.AsymptoticNumericParamDef._logger.debug", "min", "max", "parameter_definition.AsymptoticNumericParamDef._logger.debug", "math.log"], "methods", ["None"], ["", "def", "warp_in", "(", "self", ",", "unwarped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping in %s\"", ",", "unwarped_value", ")", "\n", "if", "not", "min", "(", "self", ".", "asymptotic_border", ",", "self", ".", "border", ")", "<=", "unwarped_value", ":", "\n", "            ", "unwarped_value", "=", "min", "(", "self", ".", "asymptotic_border", ",", "self", ".", "border", ")", "\n", "", "if", "not", "unwarped_value", "<=", "max", "(", "self", ".", "asymptotic_border", ",", "self", ".", "border", ")", ":", "\n", "            ", "unwarped_value", "=", "max", "(", "self", ".", "asymptotic_border", ",", "self", ".", "border", ")", "\n", "", "if", "unwarped_value", "==", "self", ".", "border", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Special case: Is border. Returning [0].\"", ")", "\n", "return", "[", "0", "]", "\n", "", "elif", "unwarped_value", "==", "self", ".", "asymptotic_border", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Special case: Asymptotic border. Returning \"", "\n", "\"[1]\"", ")", "\n", "return", "[", "1", "]", "\n", "", "warped_value", "=", "[", "(", "1", "-", "2", "**", "(", "math", ".", "log", "(", "unwarped_value", ",", "10", ")", ")", ")", "*", "\n", "(", "self", ".", "border", "-", "self", ".", "asymptotic_border", ")", "+", "self", ".", "asymptotic_border", "]", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Normal case. Warped is %s\"", ",", "warped_value", ")", "\n", "return", "warped_value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out": [[740, 760], ["parameter_definition.AsymptoticNumericParamDef._logger.debug", "parameter_definition.AsymptoticNumericParamDef._logger.debug", "parameter_definition.AsymptoticNumericParamDef._logger.debug", "math.log", "parameter_definition.AsymptoticNumericParamDef._logger.debug"], "methods", ["None"], ["", "def", "warp_out", "(", "self", ",", "warped_value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warping out %s\"", ",", "warped_value", ")", "\n", "warped_value_single", "=", "warped_value", "[", "0", "]", "\n", "if", "warped_value_single", "<", "0", ":", "\n", "            ", "warped_value_single", "=", "0", "\n", "", "if", "warped_value_single", ">", "1", ":", "\n", "            ", "warped_value_single", "=", "1", "\n", "", "if", "warped_value_single", "==", "1", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Special case: Value was 1, therefore \"", "\n", "\"asymptotic border.\"", ")", "\n", "return", "self", ".", "asymptotic_border", "\n", "", "elif", "warped_value_single", "==", "0", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "\"Special case: Value was 0, therefore \"", "\n", "\"border.\"", ")", "\n", "return", "self", ".", "border", "\n", "", "unwarped_value", "=", "10", "**", "math", ".", "log", "(", "1", "-", "(", "warped_value_single", "-", "\n", "self", ".", "asymptotic_border", ")", "/", "\n", "(", "self", ".", "border", "-", "self", ".", "asymptotic_border", ")", ",", "2", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"Normal case. Warped out is %s\"", ",", "unwarped_value", ")", "\n", "return", "unwarped_value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size": [[761, 764], ["parameter_definition.AsymptoticNumericParamDef._logger.debug"], "methods", ["None"], ["", "def", "warped_size", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "debug", "(", "\"Warped size is always 1.\"", ")", "\n", "return", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_nominal_param_def": [[11, 24], ["NominalParamDef", "nose.tools.assert_items_equal", "random.choice", "nose.tools.assert_equal", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_raises", "NominalParamDef", "nose.tools.assert_raises", "NominalParamDef", "NominalParamDef.warp_out", "NominalParamDef.is_in_parameter_domain", "NominalParamDef.is_in_parameter_domain", "NominalParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["    ", "def", "test_nominal_param_def", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "NominalParamDef", "(", "False", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "NominalParamDef", "(", "[", "]", ")", "\n", "", "test_values", "=", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", "\n", "pd", "=", "NominalParamDef", "(", "test_values", ")", "\n", "assert_items_equal", "(", "pd", ".", "values", ",", "test_values", ")", "\n", "x", "=", "random", ".", "choice", "(", "test_values", ")", "\n", "assert_equal", "(", "x", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "assert_true", "(", "pd", ".", "is_in_parameter_domain", "(", "\"A\"", ")", ")", "\n", "assert_false", "(", "pd", ".", "is_in_parameter_domain", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_ordinal_param_def": [[25, 54], ["OrdinalParamDef", "nose.tools.assert_items_equal", "random.choice", "nose.tools.assert_equal", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_raises", "OrdinalParamDef", "nose.tools.assert_raises", "OrdinalParamDef", "nose.tools.assert_raises", "OrdinalParamDef.compare_values", "nose.tools.assert_raises", "OrdinalParamDef.compare_values", "nose.tools.assert_raises", "OrdinalParamDef.distance", "nose.tools.assert_raises", "OrdinalParamDef.distance", "OrdinalParamDef.warp_out", "OrdinalParamDef.is_in_parameter_domain", "OrdinalParamDef.is_in_parameter_domain", "OrdinalParamDef.distance", "OrdinalParamDef.distance", "OrdinalParamDef.compare_values", "OrdinalParamDef.compare_values", "OrdinalParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "test_ordinal_param_def", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "OrdinalParamDef", "(", "False", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "OrdinalParamDef", "(", "[", "]", ")", "\n", "\n", "\n", "\n", "", "test_values", "=", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", "\n", "pd", "=", "OrdinalParamDef", "(", "test_values", ")", "\n", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "compare_values", "(", "\"A\"", ",", "\"D\"", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "compare_values", "(", "\"D\"", ",", "\"A\"", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "\"A\"", ",", "\"D\"", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "\"D\"", ",", "\"A\"", ")", "\n", "", "assert_items_equal", "(", "pd", ".", "values", ",", "test_values", ")", "\n", "x", "=", "random", ".", "choice", "(", "test_values", ")", "\n", "assert_equal", "(", "x", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "assert_true", "(", "pd", ".", "is_in_parameter_domain", "(", "\"A\"", ")", ")", "\n", "assert_false", "(", "pd", ".", "is_in_parameter_domain", "(", "1", ")", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "\"A\"", ",", "\"B\"", ")", ",", "1.", "/", "3", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "\"A\"", ",", "\"C\"", ")", ",", "2.", "/", "3", ")", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "\"A\"", ",", "\"B\"", ")", ",", "-", "1", ")", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "\"A\"", ",", "\"A\"", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_min_max_def": [[55, 80], ["MinMaxNumericParamDef", "random.uniform", "nose.tools.assert_almost_equal", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_almost_equal", "nose.tools.assert_almost_equal", "MinMaxNumericParamDef", "random.uniform", "nose.tools.assert_almost_equal", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_false", "nose.tools.assert_false", "nose.tools.assert_raises", "MinMaxNumericParamDef", "nose.tools.assert_raises", "MinMaxNumericParamDef", "MinMaxNumericParamDef.warp_out", "MinMaxNumericParamDef.is_in_parameter_domain", "MinMaxNumericParamDef.is_in_parameter_domain", "MinMaxNumericParamDef.distance", "MinMaxNumericParamDef.distance", "MinMaxNumericParamDef.warp_out", "MinMaxNumericParamDef.is_in_parameter_domain", "MinMaxNumericParamDef.is_in_parameter_domain", "MinMaxNumericParamDef.is_in_parameter_domain", "MinMaxNumericParamDef.is_in_parameter_domain", "MinMaxNumericParamDef.warp_in", "MinMaxNumericParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "test_min_max_def", "(", "self", ")", ":", "\n", "        ", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "MinMaxNumericParamDef", "(", "\"Bla\"", ",", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "MinMaxNumericParamDef", "(", "[", "]", ",", "2", ")", "\n", "", "test", "=", "MinMaxNumericParamDef", "(", "-", "1", ",", "10", ")", "\n", "\n", "x", "=", "random", ".", "uniform", "(", "-", "1", ",", "10", ")", "\n", "assert_almost_equal", "(", "x", ",", "test", ".", "warp_out", "(", "test", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "assert_true", "(", "test", ".", "is_in_parameter_domain", "(", "0.5", ")", ")", "\n", "assert_false", "(", "test", ".", "is_in_parameter_domain", "(", "11", ")", ")", "\n", "assert_almost_equal", "(", "test", ".", "distance", "(", "0", ",", "1", ")", ",", "1.", "/", "11", ")", "\n", "assert_almost_equal", "(", "test", ".", "distance", "(", "-", "1", ",", "10", ")", ",", "1", ")", "\n", "\n", "# test non-inclusive", "\n", "test", "=", "MinMaxNumericParamDef", "(", "-", "1", ",", "10", ",", "False", ",", "False", ")", "\n", "\n", "x", "=", "random", ".", "uniform", "(", "0", ",", "9", ")", "\n", "assert_almost_equal", "(", "x", ",", "test", ".", "warp_out", "(", "test", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "assert_true", "(", "test", ".", "is_in_parameter_domain", "(", "0.5", ")", ")", "\n", "assert_false", "(", "test", ".", "is_in_parameter_domain", "(", "-", "1", ")", ")", "\n", "assert_false", "(", "test", ".", "is_in_parameter_domain", "(", "10", ")", ")", "\n", "assert_false", "(", "test", ".", "is_in_parameter_domain", "(", "11", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_numeric_def": [[83, 112], ["NumericParamDef", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_equal", "nose.tools.assert_equal", "random.uniform", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "NumericParamDef.is_in_parameter_domain", "NumericParamDef.is_in_parameter_domain", "NumericParamDef.distance", "NumericParamDef.distance", "nose.tools.assert_raises", "NumericParamDef.distance", "nose.tools.assert_raises", "NumericParamDef.distance", "NumericParamDef.warp_out", "NumericParamDef.compare_values", "NumericParamDef.compare_values", "NumericParamDef.compare_values", "nose.tools.assert_raises", "NumericParamDef.compare_values", "nose.tools.assert_raises", "NumericParamDef.compare_values", "nose.tools.assert_raises", "NumericParamDef.distance", "nose.tools.assert_raises", "NumericParamDef.distance", "NumericParamDef.warped_size", "float", "float", "NumericParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "test_numeric_def", "(", "self", ")", ":", "\n", "        ", "f_in", "=", "lambda", "x", ":", "float", "(", "x", ")", "/", "10", "\n", "f_out", "=", "lambda", "x", ":", "float", "(", "x", ")", "*", "10", "\n", "pd", "=", "NumericParamDef", "(", "f_in", ",", "f_out", ")", "\n", "\n", "assert_true", "(", "pd", ".", "is_in_parameter_domain", "(", "0.5", ")", ")", "\n", "assert_false", "(", "pd", ".", "is_in_parameter_domain", "(", "11", ")", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "0", ",", "1", ")", ",", "0.1", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "0", ",", "10", ")", ",", "1", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "\"A\"", ",", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "0", ",", "\"B\"", ")", "\n", "\n", "", "x", "=", "random", ".", "uniform", "(", "0", ",", "10", ")", "\n", "assert_equal", "(", "x", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "0", ",", "10", ")", ",", "-", "1", ")", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "1", ",", "0", ")", ",", "1", ")", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "0", ",", "0", ")", ",", "0", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "compare_values", "(", "1", ",", "11", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "compare_values", "(", "11", ",", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "11", ",", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "1", ",", "11", ")", "\n", "", "assert_equal", "(", "pd", ".", "warped_size", "(", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_fixed_def": [[113, 136], ["FixedValueParamDef", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "FixedValueParamDef", "nose.tools.assert_equal", "FixedValueParamDef.is_in_parameter_domain", "FixedValueParamDef.is_in_parameter_domain", "FixedValueParamDef.distance", "FixedValueParamDef.distance", "nose.tools.assert_raises", "FixedValueParamDef.distance", "nose.tools.assert_raises", "FixedValueParamDef.distance", "FixedValueParamDef.warp_out", "FixedValueParamDef.warp_out", "FixedValueParamDef.compare_values", "FixedValueParamDef.compare_values", "FixedValueParamDef.warped_size", "nose.tools.assert_equal", "FixedValueParamDef.warp_out", "FixedValueParamDef.warp_out", "FixedValueParamDef.warp_in", "FixedValueParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "test_fixed_def", "(", "self", ")", ":", "\n", "        ", "pd", "=", "FixedValueParamDef", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "for", "x", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ":", "\n", "            ", "assert_equal", "(", "x", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "", "assert_true", "(", "pd", ".", "is_in_parameter_domain", "(", "1", ")", ")", "\n", "assert_false", "(", "pd", ".", "is_in_parameter_domain", "(", "1.5", ")", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "0", ",", "1", ")", ",", "1", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "0", ",", "3", ")", ",", "3", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "\"A\"", ",", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "0", ",", "4", ")", "\n", "", "assert_equal", "(", "pd", ".", "warp_out", "(", "[", "1.5", "]", ")", ",", "3", ")", "\n", "assert_equal", "(", "pd", ".", "warp_out", "(", "[", "-", "1", "]", ")", ",", "0", ")", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "0", ",", "3", ")", ",", "-", "1", ")", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "1", ",", "0", ")", ",", "1", ")", "\n", "\n", "assert_equal", "(", "pd", ".", "warped_size", "(", ")", ",", "1", ")", "\n", "\n", "pd", "=", "FixedValueParamDef", "(", "[", "1", ",", "2", ",", "3", ",", "5", ",", "25", "]", ")", "\n", "for", "x", "in", "[", "1", ",", "2", ",", "3", ",", "5", ",", "25", "]", ":", "\n", "            ", "assert_equal", "(", "x", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_range": [[138, 159], ["RangeParamDef", "nose.tools.assert_equal", "RangeParamDef", "nose.tools.assert_equal", "RangeParamDef", "nose.tools.assert_equal", "range", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_equal", "range", "range", "range", "nose.tools.assert_equal", "RangeParamDef.is_in_parameter_domain", "RangeParamDef.is_in_parameter_domain", "nose.tools.assert_raises", "RangeParamDef.distance", "nose.tools.assert_raises", "RangeParamDef.distance", "RangeParamDef.warped_size", "RangeParamDef.warp_out", "RangeParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "", "def", "test_range", "(", "self", ")", ":", "\n", "        ", "pd", "=", "RangeParamDef", "(", "10", ")", "\n", "assert_equal", "(", "pd", ".", "values", ",", "range", "(", "10", ")", ")", "\n", "\n", "pd", "=", "RangeParamDef", "(", "2", ",", "10", ")", "\n", "assert_equal", "(", "pd", ".", "values", ",", "range", "(", "2", ",", "10", ")", ")", "\n", "\n", "pd", "=", "RangeParamDef", "(", "2", ",", "10", ",", "3", ")", "\n", "assert_equal", "(", "pd", ".", "values", ",", "range", "(", "2", ",", "10", ",", "3", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ",", "10", ",", "3", ")", ":", "\n", "            ", "assert_equal", "(", "i", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "i", ")", ")", ")", "\n", "\n", "", "assert_true", "(", "pd", ".", "is_in_parameter_domain", "(", "2", ")", ")", "\n", "assert_false", "(", "pd", ".", "is_in_parameter_domain", "(", "3", ")", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "\"A\"", ",", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "0", ",", "4", ")", "\n", "\n", "", "assert_equal", "(", "pd", ".", "warped_size", "(", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_equidistant_def": [[161, 177], ["EquidistantPositionParamDef", "random.choice", "nose.tools.assert_equal", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "EquidistantPositionParamDef.warp_out", "EquidistantPositionParamDef.is_in_parameter_domain", "EquidistantPositionParamDef.is_in_parameter_domain", "EquidistantPositionParamDef.distance", "EquidistantPositionParamDef.distance", "nose.tools.assert_raises", "EquidistantPositionParamDef.distance", "nose.tools.assert_raises", "EquidistantPositionParamDef.distance", "EquidistantPositionParamDef.compare_values", "EquidistantPositionParamDef.compare_values", "EquidistantPositionParamDef.warp_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.MinMaxNumericParamDef.is_in_parameter_domain", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.PositionParamDef.distance", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.NumericParamDef.compare_values", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "test_equidistant_def", "(", "self", ")", ":", "\n", "        ", "pd", "=", "EquidistantPositionParamDef", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "x", "=", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "assert_equal", "(", "x", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "assert_true", "(", "pd", ".", "is_in_parameter_domain", "(", "1", ")", ")", "\n", "assert_false", "(", "pd", ".", "is_in_parameter_domain", "(", "1.5", ")", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "0", ",", "1", ")", ",", "1.", "/", "3", ")", "\n", "assert_equal", "(", "pd", ".", "distance", "(", "0", ",", "3", ")", ",", "1", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "\"A\"", ",", "1", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "pd", ".", "distance", "(", "0", ",", "4", ")", "\n", "", "assert_equal", "(", "pd", ".", "compare_values", "(", "0", ",", "3", ")", ",", "-", "1", ")", "\n", "assert_equal", "(", "pd", ".", "compare_values", "(", "1", ",", "0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_parameter_definition.TestParameterDefinitions.test_asymptotic_def": [[178, 202], ["AsymptoticNumericParamDef", "random.uniform", "nose.tools.assert_almost_equal", "range", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "AsymptoticNumericParamDef.warp_out", "AsymptoticNumericParamDef.warp_in", "AsymptoticNumericParamDef.warp_out", "nose.tools.assert_less_equal", "nose.tools.assert_greater_equal", "nose.tools.assert_almost_equal", "AsymptoticNumericParamDef.warp_in", "AsymptoticNumericParamDef.warp_in", "AsymptoticNumericParamDef.warp_in", "AsymptoticNumericParamDef.warp_in", "AsymptoticNumericParamDef.warp_out", "AsymptoticNumericParamDef.warp_out", "AsymptoticNumericParamDef.warp_in", "min", "max", "float"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warp_in"], ["", "def", "test_asymptotic_def", "(", "self", ")", ":", "\n", "        ", "asymptotic", "=", "0", "\n", "border", "=", "1", "\n", "\n", "pd", "=", "AsymptoticNumericParamDef", "(", "asymptotic", ",", "border", ")", "\n", "\n", "x", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "assert_almost_equal", "(", "x", ",", "pd", ".", "warp_out", "(", "pd", ".", "warp_in", "(", "x", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "100", ")", ":", "\n", "#x = float(i)/100 * asymptotic + (1-float(i)/100)*border", "\n", "            ", "x", "=", "asymptotic", "+", "float", "(", "i", ")", "/", "100", "*", "border", "\n", "w_i", "=", "pd", ".", "warp_in", "(", "x", ")", "\n", "w_o", "=", "pd", ".", "warp_out", "(", "w_i", ")", "\n", "assert_less_equal", "(", "w_i", "[", "0", "]", ",", "1", ")", "\n", "assert_greater_equal", "(", "w_i", "[", "0", "]", ",", "0", ")", "\n", "assert_almost_equal", "(", "w_o", ",", "min", "(", "max", "(", "x", ",", "0", ")", ",", "1", ")", ")", "\n", "\n", "", "assert_equal", "(", "pd", ".", "warp_in", "(", "1", ")", ",", "[", "0", "]", ")", "\n", "assert_equal", "(", "pd", ".", "warp_in", "(", "0", ")", ",", "[", "1", "]", ")", "\n", "assert_equal", "(", "pd", ".", "warp_in", "(", "-", "1", ")", ",", "[", "1", "]", ")", "\n", "assert_equal", "(", "pd", ".", "warp_in", "(", "2", ")", ",", "[", "0", "]", ")", "\n", "assert_equal", "(", "pd", ".", "warp_out", "(", "[", "-", "1", "]", ")", ",", "border", ")", "\n", "assert_equal", "(", "pd", ".", "warp_out", "(", "[", "1.5", "]", ")", ",", "asymptotic", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_experiment.TestExperiment.setup": [[12, 33], ["apsis.models.experiment.Experiment", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "MinMaxNumericParamDef", "NominalParamDef", "MinMaxNumericParamDef", "nose.tools.assert_raises", "apsis.models.experiment.Experiment", "nose.tools.assert_raises", "apsis.models.experiment.Experiment"], "methods", ["None"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "name", "=", "\"test_experiment\"", "\n", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"name\"", ":", "NominalParamDef", "(", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", ")", "\n", "}", "\n", "param_def_wrong", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"name\"", ":", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", "\n", "}", "\n", "minimization", "=", "True", "\n", "self", ".", "exp", "=", "Experiment", "(", "name", ",", "param_def", ",", "minimization", ")", "\n", "\n", "assert_equal", "(", "self", ".", "exp", ".", "name", ",", "name", ")", "\n", "assert_equal", "(", "self", ".", "exp", ".", "parameter_definitions", ",", "param_def", ")", "\n", "assert_equal", "(", "self", ".", "exp", ".", "minimization_problem", ",", "minimization", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "Experiment", "(", "\"fails\"", ",", "False", ")", "\n", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "Experiment", "(", "\"fails too\"", ",", "param_def_wrong", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_experiment.TestExperiment.test_add": [[35, 77], ["apsis.models.candidate.Candidate", "apsis.models.candidate.Candidate", "apsis.models.candidate.Candidate", "test_experiment.TestExperiment.exp.add_pending", "test_experiment.TestExperiment.exp.add_finished", "apsis.models.candidate.Candidate", "test_experiment.TestExperiment.exp.add_working", "test_experiment.TestExperiment.exp.add_pausing", "test_experiment.TestExperiment.exp.add_working", "test_experiment.TestExperiment.exp.add_finished", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_pending", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_pending", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_pending", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_finished", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_working", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_pausing", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_working", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.add_finished"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pending", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pausing", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pending", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pending", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pending", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_pausing", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_working", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished"], ["", "", "def", "test_add", "(", "self", ")", ":", "\n", "        ", "cand", "=", "Candidate", "(", "{", "\"x\"", ":", "1", ",", "\"name\"", ":", "\"A\"", "}", ")", "\n", "\n", "cand_invalid", "=", "Candidate", "(", "{", "\"x\"", ":", "1", "}", ")", "\n", "cand_invalid2", "=", "Candidate", "(", "{", "\"x\"", ":", "2", ",", "\"name\"", ":", "\"A\"", "}", ")", "\n", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_pending", "(", "cand_invalid", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_pending", "(", "cand_invalid2", ")", "\n", "\n", "\n", "", "self", ".", "exp", ".", "add_pending", "(", "cand", ")", "\n", "assert", "cand", "in", "self", ".", "exp", ".", "candidates_pending", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_pending", "(", "False", ")", "\n", "\n", "", "self", ".", "exp", ".", "add_finished", "(", "cand", ")", "\n", "assert", "cand", "in", "self", ".", "exp", ".", "candidates_finished", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_finished", "(", "False", ")", "\n", "\n", "", "cand2", "=", "Candidate", "(", "{", "\"x\"", ":", "0", ",", "\"name\"", ":", "\"B\"", "}", ")", "\n", "self", ".", "exp", ".", "add_working", "(", "cand2", ")", "\n", "assert", "cand2", "in", "self", ".", "exp", ".", "candidates_working", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_working", "(", "False", ")", "\n", "\n", "", "self", ".", "exp", ".", "add_pausing", "(", "cand2", ")", "\n", "assert", "cand2", "in", "self", ".", "exp", ".", "candidates_pending", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_pausing", "(", "False", ")", "\n", "\n", "", "self", ".", "exp", ".", "add_working", "(", "cand2", ")", "\n", "assert", "cand2", "in", "self", ".", "exp", ".", "candidates_working", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_working", "(", "False", ")", "\n", "\n", "", "self", ".", "exp", ".", "add_finished", "(", "cand2", ")", "\n", "assert", "cand2", "in", "self", ".", "exp", ".", "candidates_finished", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "add_finished", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_experiment.TestExperiment.test_better_cand": [[78, 101], ["apsis.models.candidate.Candidate", "apsis.models.candidate.Candidate", "apsis.models.candidate.Candidate", "apsis.models.candidate.Candidate", "nose.tools.assert_true", "nose.tools.assert_true", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_true", "nose.tools.assert_false", "nose.tools.assert_false", "test_experiment.TestExperiment.exp.better_cand", "test_experiment.TestExperiment.exp.better_cand", "test_experiment.TestExperiment.exp.better_cand", "test_experiment.TestExperiment.exp.better_cand", "test_experiment.TestExperiment.exp.better_cand", "test_experiment.TestExperiment.exp.better_cand", "test_experiment.TestExperiment.exp.better_cand", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.better_cand", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.better_cand", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.better_cand", "nose.tools.assert_raises", "test_experiment.TestExperiment.exp.better_cand"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand"], ["", "", "def", "test_better_cand", "(", "self", ")", ":", "\n", "        ", "cand", "=", "Candidate", "(", "{", "\"x\"", ":", "1", ",", "\"name\"", ":", "\"B\"", "}", ")", "\n", "cand2", "=", "Candidate", "(", "{", "\"x\"", ":", "0", ",", "\"name\"", ":", "\"A\"", "}", ")", "\n", "cand_none", "=", "Candidate", "(", "{", "\"x\"", ":", "0.5", ",", "\"name\"", ":", "\"C\"", "}", ")", "\n", "cand_invalid", "=", "Candidate", "(", "{", "\"x\"", ":", "0.5", ",", "\"name\"", ":", "\"D\"", "}", ")", "\n", "cand", ".", "result", "=", "1", "\n", "cand2", ".", "result", "=", "0", "\n", "assert_true", "(", "self", ".", "exp", ".", "better_cand", "(", "cand2", ",", "cand", ")", ")", "\n", "assert_true", "(", "self", ".", "exp", ".", "better_cand", "(", "cand2", ",", "cand_none", ")", ")", "\n", "self", ".", "exp", ".", "minimization_problem", "=", "False", "\n", "assert_true", "(", "self", ".", "exp", ".", "better_cand", "(", "cand", ",", "cand2", ")", ")", "\n", "assert_false", "(", "self", ".", "exp", ".", "better_cand", "(", "cand2", ",", "cand", ")", ")", "\n", "assert_true", "(", "self", ".", "exp", ".", "better_cand", "(", "cand", ",", "None", ")", ")", "\n", "assert_false", "(", "self", ".", "exp", ".", "better_cand", "(", "None", ",", "cand", ")", ")", "\n", "assert_false", "(", "self", ".", "exp", ".", "better_cand", "(", "None", ",", "None", ")", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "better_cand", "(", "cand", ",", "cand_invalid", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "better_cand", "(", "cand_invalid", ",", "cand", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "better_cand", "(", "\"fails\"", ",", "cand", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "exp", ".", "better_cand", "(", "cand", ",", "\"fails\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_experiment.TestExperiment.test_warp": [[102, 106], ["apsis.models.candidate.Candidate", "test_experiment.TestExperiment.exp.warp_pt_out", "nose.tools.assert_dict_equal", "test_experiment.TestExperiment.exp.warp_pt_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.warp_pt_out", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.warp_pt_in"], ["", "", "def", "test_warp", "(", "self", ")", ":", "\n", "        ", "cand", "=", "Candidate", "(", "{", "\"x\"", ":", "1", "}", ")", "\n", "cand_out", "=", "self", ".", "exp", ".", "warp_pt_out", "(", "self", ".", "exp", ".", "warp_pt_in", "(", "cand", ".", "params", ")", ")", "\n", "assert_dict_equal", "(", "cand", ".", "params", ",", "cand_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_experiment.TestExperiment.test_to_dict": [[107, 111], ["apsis.models.candidate.Candidate", "test_experiment.TestExperiment.exp.add_finished", "test_experiment.TestExperiment.exp.to_dict"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "test_to_dict", "(", "self", ")", ":", "\n", "        ", "cand", "=", "Candidate", "(", "{", "\"x\"", ":", "1", ",", "\"name\"", ":", "\"A\"", "}", ")", "\n", "self", ".", "exp", ".", "add_finished", "(", "cand", ")", "\n", "self", ".", "exp", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_experiment.TestExperiment.test_check_param_dict": [[112, 123], ["nose.tools.assert_false", "nose.tools.assert_false", "nose.tools.assert_true", "test_experiment.TestExperiment.exp._check_param_dict", "test_experiment.TestExperiment.exp._check_param_dict", "test_experiment.TestExperiment.exp._check_param_dict"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_param_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_param_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment._check_param_dict"], ["", "def", "test_check_param_dict", "(", "self", ")", ":", "\n", "        ", "param_dict", "=", "{", "\"x\"", ":", "1", "}", "\n", "assert_false", "(", "self", ".", "exp", ".", "_check_param_dict", "(", "param_dict", ")", ")", "\n", "\n", "param_dict", "=", "{", "\"x\"", ":", "1", ",", "\n", "\"name\"", ":", "\"D\"", "}", "\n", "assert_false", "(", "self", ".", "exp", ".", "_check_param_dict", "(", "param_dict", ")", ")", "\n", "\n", "param_dict", "=", "{", "\"x\"", ":", "1", ",", "\n", "\"name\"", ":", "\"A\"", "}", "\n", "assert_true", "(", "self", ".", "exp", ".", "_check_param_dict", "(", "param_dict", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_candidate.TestCandidate.test_init": [[13, 31], ["apsis.models.candidate.Candidate", "nose.tools.assert_dict_equal", "nose.tools.assert_equal", "nose.tools.assert_raises", "apsis.models.candidate.Candidate"], "methods", ["None"], ["def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the initialization.\n            - Raising ValueError when no dict is given\n            - Parameter correctness\n            - worker_information correctness\n        \"\"\"", "\n", "params", "=", "{", "\n", "\"x\"", ":", "1", ",", "\n", "\"name\"", ":", "\"B\"", "\n", "}", "\n", "worker_info", "=", "\"test_worker_info.\"", "\n", "cand1", "=", "Candidate", "(", "params", ",", "worker_information", "=", "worker_info", ")", "\n", "assert_dict_equal", "(", "cand1", ".", "params", ",", "params", ")", "\n", "assert_equal", "(", "cand1", ".", "worker_information", ",", "worker_info", ")", "\n", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "Candidate", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_candidate.TestCandidate.test_eq": [[32, 54], ["apsis.models.candidate.Candidate", "apsis.models.candidate.Candidate", "nose.tools.assert_not_equal", "apsis.models.candidate.Candidate", "nose.tools.assert_true", "nose.tools.assert_false", "apsis.models.candidate.Candidate.__eq__", "apsis.models.candidate.Candidate.__eq__"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate.__eq__", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.candidate.Candidate.__eq__"], ["", "", "def", "test_eq", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the equiality.\n            - Equal works\n            - Equal with a non-Candidate works\n        \"\"\"", "\n", "params", "=", "{", "\n", "\"x\"", ":", "1", ",", "\n", "\"name\"", ":", "\"B\"", "\n", "}", "\n", "params2", "=", "{", "\n", "\"x\"", ":", "2", ",", "\n", "\"name\"", ":", "\"B\"", "\n", "}", "\n", "cand1", "=", "Candidate", "(", "params", ")", "\n", "cand2", "=", "Candidate", "(", "params", ")", "\n", "\n", "assert_not_equal", "(", "cand1", ",", "cand2", ")", "\n", "cand3", "=", "Candidate", "(", "params2", ",", "cand_id", "=", "cand1", ".", "cand_id", ")", "\n", "assert_true", "(", "cand1", ".", "__eq__", "(", "cand3", ")", ")", "\n", "\n", "assert_false", "(", "cand1", ".", "__eq__", "(", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_candidate.TestCandidate.test_str": [[55, 66], ["apsis.models.candidate.Candidate", "str"], "methods", ["None"], ["", "def", "test_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether stringify works.\n        \"\"\"", "\n", "params", "=", "{", "\n", "\"x\"", ":", "1", ",", "\n", "\"name\"", ":", "\"B\"", "\n", "}", "\n", "cand1", "=", "Candidate", "(", "params", ")", "\n", "cand1", ".", "cost", "=", "2", "\n", "str", "(", "cand1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_models.test_candidate.TestCandidate.test_dict": [[67, 89], ["apsis.models.candidate.Candidate", "apsis.models.candidate.Candidate.to_dict", "nose.tools.assert_dict_equal", "apsis.models.candidate.from_dict", "nose.tools.assert_equal"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.from_dict"], ["", "def", "test_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the to-dict and from-dict methods.\n        \"\"\"", "\n", "params", "=", "{", "\n", "\"x\"", ":", "1", ",", "\n", "\"name\"", ":", "\"B\"", "\n", "}", "\n", "cand1", "=", "Candidate", "(", "params", ")", "\n", "entry", "=", "cand1", ".", "to_dict", "(", ")", "\n", "d", "=", "{", "\"params\"", ":", "params", ",", "\n", "\"result\"", ":", "None", ",", "\n", "\"cost\"", ":", "None", ",", "\n", "\"last_update_time\"", ":", "cand1", ".", "last_update_time", ",", "\n", "\"worker_information\"", ":", "None", ",", "\n", "\"failed\"", ":", "False", ",", "\n", "\"generated_time\"", ":", "cand1", ".", "generated_time", ",", "\n", "\"cand_id\"", ":", "cand1", ".", "cand_id", "}", "\n", "assert_dict_equal", "(", "entry", ",", "d", ")", "\n", "\n", "cand2", "=", "from_dict", "(", "entry", ")", "\n", "assert_equal", "(", "cand1", ",", "cand2", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_bayesian_optimization.testBayesianOptimization.test_init": [[14, 44], ["apsis.models.experiment.Experiment", "apsis.optimizers.bayesian_optimization.BayesianOptimizer", "nose.tools.assert_equal", "nose.tools.assert_is_none", "nose.tools.assert_equal", "nose.tools.assert_true", "nose.tools.assert_dict_equal", "nose.tools.assert_equal", "apsis.optimizers.bayesian_optimization.BayesianOptimizer", "nose.tools.assert_equal", "nose.tools.assert_dict_equal", "nose.tools.assert_equal", "nose.tools.assert_true", "nose.tools.assert_dict_equal", "nose.tools.assert_equal", "isinstance", "isinstance", "apsis.models.parameter_definition.MinMaxNumericParamDef"], "methods", ["None"], ["    ", "def", "test_init", "(", "self", ")", ":", "\n", "#test default parameters", "\n", "        ", "exp", "=", "Experiment", "(", "\"test\"", ",", "{", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "}", ")", "\n", "\n", "opt", "=", "BayesianOptimizer", "(", "exp", ")", "\n", "assert_equal", "(", "opt", ".", "initial_random_runs", ",", "10", ")", "\n", "assert_is_none", "(", "opt", ".", "acquisition_hyperparams", ")", "\n", "assert_equal", "(", "opt", ".", "num_gp_restarts", ",", "10", ")", "\n", "assert_true", "(", "isinstance", "(", "opt", ".", "acquisition_function", ",", "ExpectedImprovement", ")", ")", "\n", "assert_dict_equal", "(", "opt", ".", "kernel_params", ",", "{", "}", ")", "\n", "assert_equal", "(", "opt", ".", "kernel", ",", "\"matern52\"", ")", "\n", "\n", "#test correct initialization", "\n", "opt_arguments", "=", "{", "\n", "\"initial_random_runs\"", ":", "5", ",", "\n", "\"acquisition_hyperparams\"", ":", "{", "}", ",", "\n", "\"num_gp_restarts\"", ":", "5", ",", "\n", "\"acquisition\"", ":", "ProbabilityOfImprovement", ",", "\n", "\"kernel_params\"", ":", "{", "}", ",", "\n", "\"kernel\"", ":", "\"matern52\"", ",", "\n", "\"mcmc\"", ":", "True", ",", "\n", "}", "\n", "opt", "=", "BayesianOptimizer", "(", "exp", ",", "opt_arguments", ")", "\n", "\n", "assert_equal", "(", "opt", ".", "initial_random_runs", ",", "5", ")", "\n", "assert_dict_equal", "(", "opt", ".", "acquisition_hyperparams", ",", "{", "}", ")", "\n", "assert_equal", "(", "opt", ".", "num_gp_restarts", ",", "5", ")", "\n", "assert_true", "(", "isinstance", "(", "opt", ".", "acquisition_function", ",", "ProbabilityOfImprovement", ")", ")", "\n", "assert_dict_equal", "(", "opt", ".", "kernel_params", ",", "{", "}", ")", "\n", "assert_equal", "(", "opt", ".", "kernel", ",", "\"matern52\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_bayesian_optimization.testBayesianOptimization.test_get_next_candidate": [[45, 57], ["apsis.models.experiment.Experiment", "apsis.optimizers.bayesian_optimization.BayesianOptimizer", "range", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates", "nose.tools.assert_less_equal", "nose.tools.assert_true", "apsis.models.experiment.Experiment.add_finished", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.update", "len", "apsis.models.parameter_definition.MinMaxNumericParamDef", "apsis.models.parameter_definition.NominalParamDef", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates", "isinstance"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates"], ["", "def", "test_get_next_candidate", "(", "self", ")", ":", "\n", "        ", "exp", "=", "Experiment", "(", "\"test\"", ",", "{", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"y\"", ":", "NominalParamDef", "(", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", ")", "}", ")", "\n", "opt", "=", "BayesianOptimizer", "(", "exp", ",", "{", "\"initial_random_runs\"", ":", "3", "}", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "cand", "=", "opt", ".", "get_next_candidates", "(", ")", "[", "0", "]", "\n", "assert_true", "(", "isinstance", "(", "cand", ",", "Candidate", ")", ")", "\n", "cand", ".", "result", "=", "2", "\n", "exp", ".", "add_finished", "(", "cand", ")", "\n", "opt", ".", "update", "(", "exp", ")", "\n", "", "cands", "=", "opt", ".", "get_next_candidates", "(", "num_candidates", "=", "3", ")", "\n", "assert_less_equal", "(", "len", "(", "cands", ")", ",", "3", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestOptimizer.setup": [[20, 27], ["apsis.models.experiment.Experiment", "test_optimizer.TestOptimizer.OptimizerStub", "MinMaxNumericParamDef"], "methods", ["None"], ["", "", "def", "setup", "(", "self", ")", ":", "\n", "        ", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "\n", "}", "\n", "experiment", "=", "Experiment", "(", "name", "=", "\"test_optimizer_experiment\"", ",", "\n", "parameter_definitions", "=", "param_def", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "OptimizerStub", "(", "experiment", ",", "optimizer_params", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestOptimizer.test_setup": [[28, 30], ["None"], "methods", ["None"], ["", "def", "test_setup", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestOptimizer.test_init_param_support": [[31, 39], ["apsis.models.experiment.Experiment", "nose.tools.assert_raises", "MinMaxNumericParamDef", "OrdinalParamDef"], "methods", ["None"], ["", "def", "test_init_param_support", "(", "self", ")", ":", "\n", "        ", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"not_supported\"", ":", "OrdinalParamDef", "(", "[", "\"A\"", ",", "\"B\"", "]", ")", "\n", "}", "\n", "experiment", "=", "Experiment", "(", "name", "=", "\"test_optimizer_experiment_crash\"", ",", "\n", "parameter_definitions", "=", "param_def", ")", "\n", "assert_raises", "(", "ValueError", ",", "self", ".", "OptimizerStub", ",", "experiment", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestOptimizer.test_update_param_support": [[40, 48], ["apsis.models.experiment.Experiment", "nose.tools.assert_raises", "MinMaxNumericParamDef", "OrdinalParamDef"], "methods", ["None"], ["", "def", "test_update_param_support", "(", "self", ")", ":", "\n", "        ", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"not_supported\"", ":", "OrdinalParamDef", "(", "[", "\"A\"", ",", "\"B\"", "]", ")", "\n", "}", "\n", "experiment", "=", "Experiment", "(", "name", "=", "\"test_optimizer_experiment_crash\"", ",", "\n", "parameter_definitions", "=", "param_def", ")", "\n", "assert_raises", "(", "ValueError", ",", "self", ".", "optimizer", ".", "update", ",", "experiment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueOptimizer.setup": [[52, 60], ["apsis.models.experiment.Experiment", "apsis.optimizers.optimizer.QueueBasedOptimizer", "MinMaxNumericParamDef"], "methods", ["None"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "\n", "}", "\n", "experiment", "=", "Experiment", "(", "name", "=", "\"test_optimizer_experiment\"", ",", "\n", "parameter_definitions", "=", "param_def", ")", "\n", "self", ".", "optimizer", "=", "QueueBasedOptimizer", "(", "RandomSearch", ",", "\n", "experiment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueOptimizer.test_get_next_candidate": [[61, 63], ["test_optimizer.TestQueueOptimizer.optimizer.get_next_candidates"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates"], ["", "def", "test_get_next_candidate", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "get_next_candidates", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueOptimizer.test_update": [[64, 71], ["apsis.models.experiment.Experiment", "test_optimizer.TestQueueOptimizer.optimizer.update", "MinMaxNumericParamDef"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["", "def", "test_update", "(", "self", ")", ":", "\n", "        ", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "\n", "}", "\n", "experiment", "=", "Experiment", "(", "name", "=", "\"test_optimizer_experiment\"", ",", "\n", "parameter_definitions", "=", "param_def", ")", "\n", "self", ".", "optimizer", ".", "update", "(", "experiment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueOptimizer.teardown": [[72, 74], ["test_optimizer.TestQueueOptimizer.optimizer.exit"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.exit"], ["", "def", "teardown", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueBackend.setup": [[80, 90], ["apsis.models.experiment.Experiment", "multiprocessing.Queue", "multiprocessing.Queue", "apsis.optimizers.optimizer.QueueBackend", "MinMaxNumericParamDef"], "methods", ["None"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "\n", "}", "\n", "self", ".", "experiment", "=", "Experiment", "(", "name", "=", "\"test_optimizer_experiment\"", ",", "\n", "parameter_definitions", "=", "param_def", ")", "\n", "out_queue", "=", "Queue", "(", ")", "\n", "in_queue", "=", "Queue", "(", ")", "\n", "self", ".", "backend", "=", "QueueBackend", "(", "RandomSearch", ",", "self", ".", "experiment", ",", "out_queue", ",", "\n", "in_queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueBackend.test_run": [[91, 94], ["test_optimizer.TestQueueBackend.backend._in_queue.put", "test_optimizer.TestQueueBackend.backend.run"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend.run"], ["", "def", "test_run", "(", "self", ")", ":", "\n", "        ", "self", ".", "backend", ".", "_in_queue", ".", "put", "(", "\"exit\"", ")", "\n", "self", ".", "backend", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueBackend.test_check_update": [[95, 106], ["test_optimizer.TestQueueBackend.backend._check_update", "test_optimizer.TestQueueBackend.backend._in_queue.put", "time.sleep", "test_optimizer.TestQueueBackend.backend._check_update", "time.sleep", "test_optimizer.TestQueueBackend.backend._check_update", "test_optimizer.TestQueueBackend.backend._in_queue.put", "time.sleep", "test_optimizer.TestQueueBackend.backend._check_update"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_update"], ["", "def", "test_check_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "backend", ".", "_check_update", "(", ")", "\n", "self", ".", "backend", ".", "_in_queue", ".", "put", "(", "\"exit\"", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "self", ".", "backend", ".", "_check_update", "(", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "self", ".", "backend", ".", "_check_update", "(", ")", "\n", "\n", "self", ".", "backend", ".", "_in_queue", ".", "put", "(", "self", ".", "experiment", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "self", ".", "backend", ".", "_check_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_optimizer.TestQueueBackend.test_check_generation": [[107, 109], ["test_optimizer.TestQueueBackend.backend._check_generation"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBackend._check_generation"], ["", "def", "test_check_generation", "(", "self", ")", ":", "\n", "        ", "self", ".", "backend", ".", "_check_generation", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_random_search.test_RandomSearch.test_init": [[12, 16], ["apsis.models.experiment.Experiment", "apsis.optimizers.random_search.RandomSearch", "apsis.models.parameter_definition.NominalParamDef", "apsis.models.parameter_definition.MinMaxNumericParamDef"], "methods", ["None"], ["    ", "def", "test_init", "(", "self", ")", ":", "\n", "#test initialization", "\n", "        ", "exp", "=", "Experiment", "(", "\"test\"", ",", "{", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "}", ",", "NominalParamDef", "(", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", ")", ")", "\n", "opt", "=", "RandomSearch", "(", "exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_optimizers.test_random_search.test_RandomSearch.test_get_next_candidate": [[17, 28], ["apsis.models.experiment.Experiment", "apsis.optimizers.random_search.RandomSearch", "range", "apsis.optimizers.random_search.RandomSearch.get_next_candidates", "nose.tools.assert_equal", "apsis.models.parameter_definition.NominalParamDef", "nose.tools.assert_true", "apsis.models.experiment.Experiment.add_finished", "len", "apsis.models.parameter_definition.MinMaxNumericParamDef", "apsis.optimizers.random_search.RandomSearch.get_next_candidates", "isinstance"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates"], ["", "def", "test_get_next_candidate", "(", "self", ")", ":", "\n", "        ", "exp", "=", "Experiment", "(", "\"test\"", ",", "{", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "}", ",", "NominalParamDef", "(", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", ")", ")", "\n", "opt", "=", "RandomSearch", "(", "exp", ",", "{", "\"initial_random_runs\"", ":", "3", "}", ")", "\n", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "cand", "=", "opt", ".", "get_next_candidates", "(", ")", "[", "0", "]", "\n", "assert_true", "(", "isinstance", "(", "cand", ",", "Candidate", ")", ")", "\n", "cand", ".", "result", "=", "2", "\n", "exp", ".", "add_finished", "(", "cand", ")", "\n", "", "cands", "=", "opt", ".", "get_next_candidates", "(", "num_candidates", "=", "3", ")", "\n", "assert_equal", "(", "len", "(", "cands", ")", ",", "3", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_bayesian.test_acquisition.testAcquisitionFunction.test_EI": [[13, 35], ["apsis.models.experiment.Experiment", "apsis.optimizers.bayesian_optimization.BayesianOptimizer", "range", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates", "nose.tools.assert_equal", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates", "nose.tools.assert_true", "apsis.models.experiment.Experiment.add_finished", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.update", "nose.tools.assert_true", "apsis.models.experiment.Experiment.add_finished", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.update", "len", "apsis.models.parameter_definition.MinMaxNumericParamDef", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["    ", "def", "test_EI", "(", "self", ")", ":", "\n", "        ", "exp", "=", "Experiment", "(", "\"test\"", ",", "{", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "}", ")", "\n", "opt", "=", "BayesianOptimizer", "(", "exp", ",", "{", "\"initial_random_runs\"", ":", "3", ",", "\n", "\"max_searcher\"", ":", "\"LBFGSB\"", "}", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "cands", "=", "opt", ".", "get_next_candidates", "(", "2", ")", "\n", "cand_one", "=", "cands", "[", "0", "]", "\n", "cand_two", "=", "cands", "[", "1", "]", "\n", "assert_true", "(", "isinstance", "(", "cand_one", ",", "Candidate", ")", ")", "\n", "cand_one", ".", "result", "=", "2", "\n", "exp", ".", "add_finished", "(", "cand_one", ")", "\n", "opt", ".", "update", "(", "exp", ")", "\n", "assert_true", "(", "isinstance", "(", "cand_two", ",", "Candidate", ")", ")", "\n", "cand_two", ".", "result", "=", "2", "\n", "exp", ".", "add_finished", "(", "cand_two", ")", "\n", "opt", ".", "update", "(", "exp", ")", "\n", "", "cands", "=", "opt", ".", "get_next_candidates", "(", "num_candidates", "=", "5", ")", "\n", "assert_equal", "(", "len", "(", "cands", ")", ",", "5", ")", "\n", "\n", "opt", ".", "acquisition_function", ".", "params", "[", "\"multi_searcher\"", "]", "=", "\"random_best\"", "\n", "cands", "=", "opt", ".", "get_next_candidates", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_bayesian.test_acquisition.testAcquisitionFunction.test_PoI": [[36, 55], ["apsis.models.experiment.Experiment", "apsis.optimizers.bayesian_optimization.BayesianOptimizer", "nose.tools.assert_true", "range", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates", "nose.tools.assert_equal", "isinstance", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.get_next_candidates", "nose.tools.assert_true", "apsis.models.experiment.Experiment.add_finished", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.update", "nose.tools.assert_true", "apsis.models.experiment.Experiment.add_finished", "apsis.optimizers.bayesian_optimization.BayesianOptimizer.update", "len", "apsis.models.parameter_definition.MinMaxNumericParamDef", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.get_next_candidates", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.add_finished", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["", "def", "test_PoI", "(", "self", ")", ":", "\n", "        ", "exp", "=", "Experiment", "(", "\"test\"", ",", "{", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "}", ")", "\n", "opt", "=", "BayesianOptimizer", "(", "exp", ",", "{", "\"initial_random_runs\"", ":", "3", ",", "\"acquisition\"", ":", "ProbabilityOfImprovement", "}", ")", "\n", "assert_true", "(", "isinstance", "(", "opt", ".", "acquisition_function", ",", "ProbabilityOfImprovement", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "cands", "=", "opt", ".", "get_next_candidates", "(", "2", ")", "\n", "cand_one", "=", "cands", "[", "0", "]", "\n", "cand_two", "=", "cands", "[", "1", "]", "\n", "assert_true", "(", "isinstance", "(", "cand_one", ",", "Candidate", ")", ")", "\n", "cand_one", ".", "result", "=", "2", "\n", "exp", ".", "add_finished", "(", "cand_one", ")", "\n", "opt", ".", "update", "(", "exp", ")", "\n", "assert_true", "(", "isinstance", "(", "cand_two", ",", "Candidate", ")", ")", "\n", "cand_two", ".", "result", "=", "2", "\n", "exp", ".", "add_finished", "(", "cand_two", ")", "\n", "opt", ".", "update", "(", "exp", ")", "\n", "", "cands", "=", "opt", ".", "get_next_candidates", "(", "num_candidates", "=", "3", ")", "\n", "assert_equal", "(", "len", "(", "cands", ")", ",", "3", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_experiment_assistant.TestExperimentAssistant.setup": [[23, 51], ["apsis.models.experiment.Experiment", "apsis.assistants.experiment_assistant.ExperimentAssistant", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "MinMaxNumericParamDef", "NominalParamDef"], "methods", ["None"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether the initialization works correctly.\n        Tests:\n            - optimizer correct\n            - minimization correct\n            - param_defs correct\n        \"\"\"", "\n", "optimizer", "=", "\"RandomSearch\"", "\n", "name", "=", "\"test_init_experiment\"", "\n", "self", ".", "param_defs", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"name\"", ":", "NominalParamDef", "(", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", ")", "\n", "}", "\n", "minimization", "=", "True", "\n", "\n", "optimizer_params", "=", "{", "\n", "\"multiprocessing\"", ":", "\"none\"", "\n", "}", "\n", "\n", "exp", "=", "experiment", ".", "Experiment", "(", "name", ",", "self", ".", "param_defs", ",", "minimization", ")", "\n", "\n", "self", ".", "EAss", "=", "ExperimentAssistant", "(", "optimizer", ",", "exp", ",", "\n", "optimizer_arguments", "=", "optimizer_params", ")", "\n", "\n", "assert_equal", "(", "self", ".", "EAss", ".", "_optimizer", ".", "__class__", ".", "__name__", ",", "optimizer", ")", "\n", "assert_equal", "(", "self", ".", "EAss", ".", "_optimizer_arguments", ",", "optimizer_params", ")", "\n", "assert_equal", "(", "self", ".", "EAss", ".", "_experiment", ".", "minimization_problem", ",", "minimization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_experiment_assistant.TestExperimentAssistant.teardown": [[52, 54], ["test_experiment_assistant.TestExperimentAssistant.EAss.set_exit"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.set_exit"], ["", "def", "teardown", "(", "self", ")", ":", "\n", "        ", "self", ".", "EAss", ".", "set_exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_experiment_assistant.TestExperimentAssistant.test_get_next_candidate": [[55, 85], ["nose.tools.assert_is_none", "nose.tools.assert_less_equal", "nose.tools.assert_greater_equal", "nose.tools.assert_in", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "time.sleep", "nose.tools.assert_equal", "test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "time.sleep", "Exception", "test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "time.sleep", "Exception"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate"], ["", "def", "test_get_next_candidate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the get next candidate function.\n        Tests:\n            - The candidate's parameters are acceptable\n        \"\"\"", "\n", "\n", "cand", "=", "None", "\n", "counter", "=", "0", "\n", "while", "cand", "is", "None", "and", "counter", "<", "20", ":", "\n", "            ", "cand", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "counter", "+=", "1", "\n", "", "if", "counter", "==", "20", ":", "\n", "            ", "raise", "Exception", "(", "\"Received no result in the first 2 seconds.\"", ")", "\n", "", "assert_is_none", "(", "cand", ".", "result", ")", "\n", "params", "=", "cand", ".", "params", "\n", "assert_less_equal", "(", "params", "[", "\"x\"", "]", ",", "1", ")", "\n", "assert_greater_equal", "(", "params", "[", "\"x\"", "]", ",", "0", ")", "\n", "assert_in", "(", "params", "[", "\"name\"", "]", ",", "self", ".", "param_defs", "[", "\"name\"", "]", ".", "values", ")", "\n", "self", ".", "EAss", ".", "update", "(", "cand", ",", "\"pausing\"", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "new_cand", "=", "None", "\n", "while", "new_cand", "is", "None", "and", "counter", "<", "20", ":", "\n", "            ", "new_cand", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "counter", "+=", "1", "\n", "", "if", "counter", "==", "20", ":", "\n", "            ", "raise", "Exception", "(", "\"Received no result in the first 2 seconds.\"", ")", "\n", "", "assert_equal", "(", "new_cand", ",", "cand", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_experiment_assistant.TestExperimentAssistant.test_update": [[87, 108], ["test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "nose.tools.assert_items_equal", "nose.tools.assert_equal", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "nose.tools.assert_raises", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "nose.tools.assert_raises", "test_experiment_assistant.TestExperimentAssistant.EAss.update"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["", "def", "test_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether update works.\n            - candidate exists in the list\n            - result is equal\n            - the status message incorrect error works\n            - the candidate instance check works\n        \"\"\"", "\n", "cand", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "cand", ".", "result", "=", "1", "\n", "self", ".", "EAss", ".", "update", "(", "cand", ")", "\n", "assert_items_equal", "(", "self", ".", "EAss", ".", "_experiment", ".", "candidates_finished", ",", "[", "cand", "]", ")", "\n", "assert_equal", "(", "self", ".", "EAss", ".", "_experiment", ".", "candidates_finished", "[", "0", "]", ".", "result", ",", "1", ")", "\n", "\n", "self", ".", "EAss", ".", "update", "(", "cand", ",", "\"pausing\"", ")", "\n", "self", ".", "EAss", ".", "update", "(", "cand", ",", "\"working\"", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "EAss", ".", "update", "(", "cand", ",", "status", "=", "\"No status.\"", ")", "\n", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "EAss", ".", "update", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_experiment_assistant.TestExperimentAssistant.test_get_best_candidate": [[109, 123], ["test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "nose.tools.assert_equal", "test_experiment_assistant.TestExperimentAssistant.EAss.get_best_candidate"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_best_candidate"], ["", "", "def", "test_get_best_candidate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether get_best_candidate works.\n            - Whether the best of the two candidates is the one it should be.\n        \"\"\"", "\n", "cand_one", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "cand_one", ".", "result", "=", "1", "\n", "self", ".", "EAss", ".", "update", "(", "cand_one", ")", "\n", "\n", "cand_two", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "cand_two", ".", "result", "=", "0", "\n", "self", ".", "EAss", ".", "update", "(", "cand_two", ")", "\n", "\n", "assert_equal", "(", "cand_two", ",", "self", ".", "EAss", ".", "get_best_candidate", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_experiment_assistant.TestExperimentAssistant.test_all_plots_working": [[124, 138], ["test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "test_experiment_assistant.TestExperimentAssistant.EAss.update", "test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "test_experiment_assistant.TestExperimentAssistant.EAss.get_next_candidate", "test_experiment_assistant.TestExperimentAssistant.EAss.plot_result_per_step"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.plot_result_per_step"], ["", "def", "test_all_plots_working", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether all of the plot functions work. Does not test for correctness.\n        \"\"\"", "\n", "cand", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "cand", ".", "result", "=", "1", "\n", "self", ".", "EAss", ".", "update", "(", "cand", ")", "\n", "\n", "cand", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "cand", ".", "result", "=", "0", "\n", "\n", "cand", "=", "self", ".", "EAss", ".", "get_next_candidate", "(", ")", "\n", "cand", ".", "result", "=", "2", "\n", "self", ".", "EAss", ".", "plot_result_per_step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_experiment_assistant.TestExperimentAssistant.test_get_candidates_dict": [[139, 145], ["test_experiment_assistant.TestExperimentAssistant.EAss.get_candidates", "nose.tools.assert_true", "isinstance", "nose.tools.assert_in", "nose.tools.assert_true", "isinstance"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.assistants.experiment_assistant.ExperimentAssistant.get_candidates"], ["", "def", "test_get_candidates_dict", "(", "self", ")", ":", "\n", "        ", "candidates_dict", "=", "self", ".", "EAss", ".", "get_candidates", "(", ")", "\n", "assert_true", "(", "isinstance", "(", "candidates_dict", ",", "dict", ")", ")", "\n", "for", "l", "in", "[", "\"finished\"", ",", "\"pending\"", ",", "\"working\"", "]", ":", "\n", "            ", "assert_in", "(", "l", ",", "candidates_dict", ")", "\n", "assert_true", "(", "isinstance", "(", "candidates_dict", "[", "l", "]", ",", "list", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.setup": [[19, 21], ["LabAssistant"], "methods", ["None"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "LAss", "=", "LabAssistant", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.teardown": [[22, 24], ["test_lab_assistant.TestLabAssistant.LAss.set_exit"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.webservice.REST_interface.set_exit"], ["", "def", "teardown", "(", "self", ")", ":", "\n", "        ", "self", ".", "LAss", ".", "set_exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_init": [[25, 38], ["nose.tools.assert_items_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "apsis.utilities.logging_utils.get_logger"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger"], ["", "def", "test_init", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether the initialization works correctly.\n        Tests:\n            - Whether the directory for writing is correct\n            - _exp_assistants is empty\n            - logger name is correctly set.\n        \"\"\"", "\n", "if", "os", ".", "name", "==", "\"nt\"", ":", "\n", "            ", "assert_equal", "(", "self", ".", "LAss", ".", "_write_directory_base", ",", "\"/tmp/APSIS_WRITING\"", ")", "\n", "", "assert_items_equal", "(", "self", ".", "LAss", ".", "_exp_assistants", ",", "{", "}", ")", "\n", "assert_equal", "(", "self", ".", "LAss", ".", "_logger", ",", "\n", "get_logger", "(", "\"apsis.assistants.lab_assistant.LabAssistant\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_init_experiment": [[40, 74], ["test_lab_assistant.TestLabAssistant.LAss.init_experiment", "nose.tools.assert_equal", "nose.tools.assert_equal", "nose.tools.assert_equal", "MinMaxNumericParamDef", "NominalParamDef", "nose.tools.assert_raises", "test_lab_assistant.TestLabAssistant.LAss.init_experiment"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.init_experiment", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.init_experiment"], ["", "def", "test_init_experiment", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether the initialization works correctly.\n        Tests:\n            - optimizer correct\n            - minimization correct\n            - param_defs correct\n            - No two experiments with the same name\n        \"\"\"", "\n", "optimizer", "=", "\"RandomSearch\"", "\n", "name", "=", "\"test_init_experiment\"", "\n", "self", ".", "param_defs", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"name\"", ":", "NominalParamDef", "(", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", ")", "\n", "}", "\n", "optimizer_arguments", "=", "{", "\n", "\"multiprocessing\"", ":", "\"none\"", "\n", "}", "\n", "minimization", "=", "True", "\n", "\n", "exp_id", "=", "self", ".", "LAss", ".", "init_experiment", "(", "name", ",", "optimizer", ",", "\n", "optimizer_arguments", "=", "optimizer_arguments", ",", "\n", "param_defs", "=", "self", ".", "param_defs", ",", "minimization", "=", "minimization", ")", "\n", "\n", "exp_ass", "=", "self", ".", "LAss", ".", "_exp_assistants", "[", "exp_id", "]", "\n", "\n", "assert_equal", "(", "exp_ass", ".", "_optimizer", ".", "__class__", ".", "__name__", ",", "optimizer", ")", "\n", "assert_equal", "(", "exp_ass", ".", "_optimizer_arguments", ",", "optimizer_arguments", ")", "\n", "assert_equal", "(", "exp_ass", ".", "_experiment", ".", "minimization_problem", ",", "minimization", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "self", ".", "LAss", ".", "init_experiment", "(", "name", ",", "optimizer", ",", "exp_id", "=", "exp_id", ",", "\n", "optimizer_arguments", "=", "optimizer_arguments", ",", "\n", "param_defs", "=", "self", ".", "param_defs", ",", "minimization", "=", "minimization", ")", "\n", "", "return", "exp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_get_next_candidate": [[77, 90], ["test_lab_assistant.TestLabAssistant.test_init_experiment", "test_lab_assistant.TestLabAssistant.LAss.get_next_candidate", "nose.tools.assert_is_none", "nose.tools.assert_less_equal", "nose.tools.assert_greater_equal", "nose.tools.assert_in"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_init_experiment", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate"], ["", "def", "test_get_next_candidate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests the get next candidate function.\n        Tests:\n            - The candidate's parameters are acceptable\n        \"\"\"", "\n", "exp_id", "=", "self", ".", "test_init_experiment", "(", ")", "\n", "cand", "=", "self", ".", "LAss", ".", "get_next_candidate", "(", "exp_id", ")", "\n", "assert_is_none", "(", "cand", ".", "result", ")", "\n", "params", "=", "cand", ".", "params", "\n", "assert_less_equal", "(", "params", "[", "\"x\"", "]", ",", "1", ")", "\n", "assert_greater_equal", "(", "params", "[", "\"x\"", "]", ",", "0", ")", "\n", "assert_in", "(", "params", "[", "\"name\"", "]", ",", "self", ".", "param_defs", "[", "\"name\"", "]", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_update": [[91, 103], ["test_lab_assistant.TestLabAssistant.test_init_experiment", "test_lab_assistant.TestLabAssistant.LAss.get_next_candidate", "test_lab_assistant.TestLabAssistant.LAss.update", "nose.tools.assert_items_equal", "nose.tools.assert_equal"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_init_experiment", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["", "def", "test_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether update works.\n            - candidate exists in the list\n            - result is equal\n        \"\"\"", "\n", "exp_id", "=", "self", ".", "test_init_experiment", "(", ")", "\n", "cand", "=", "self", ".", "LAss", ".", "get_next_candidate", "(", "exp_id", ")", "\n", "cand", ".", "result", "=", "1", "\n", "self", ".", "LAss", ".", "update", "(", "exp_id", ",", "status", "=", "\"finished\"", ",", "candidate", "=", "cand", ")", "\n", "assert_items_equal", "(", "self", ".", "LAss", ".", "_exp_assistants", "[", "exp_id", "]", ".", "_experiment", ".", "candidates_finished", ",", "[", "cand", "]", ")", "\n", "assert_equal", "(", "self", ".", "LAss", ".", "_exp_assistants", "[", "exp_id", "]", ".", "_experiment", ".", "candidates_finished", "[", "0", "]", ".", "result", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_get_best_candidate": [[104, 119], ["test_lab_assistant.TestLabAssistant.test_init_experiment", "test_lab_assistant.TestLabAssistant.LAss.get_next_candidate", "test_lab_assistant.TestLabAssistant.LAss.update", "test_lab_assistant.TestLabAssistant.LAss.get_next_candidate", "test_lab_assistant.TestLabAssistant.LAss.update", "nose.tools.assert_equal", "test_lab_assistant.TestLabAssistant.LAss.get_best_candidate"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_assistants.test_lab_assistant.TestLabAssistant.test_init_experiment", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_best_candidate"], ["", "def", "test_get_best_candidate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Tests whether get_best_candidate works.\n            - Whether the best of the two candidates is the one it should be.\n        \"\"\"", "\n", "exp_id", "=", "self", ".", "test_init_experiment", "(", ")", "\n", "cand_one", "=", "self", ".", "LAss", ".", "get_next_candidate", "(", "exp_id", ")", "\n", "cand_one", ".", "result", "=", "1", "\n", "self", ".", "LAss", ".", "update", "(", "exp_id", ",", "\"finished\"", ",", "cand_one", ")", "\n", "\n", "cand_two", "=", "self", ".", "LAss", ".", "get_next_candidate", "(", "exp_id", ")", "\n", "cand_two", ".", "result", "=", "0", "\n", "self", ".", "LAss", ".", "update", "(", "exp_id", ",", "\"finished\"", ",", "cand_two", ")", "\n", "\n", "assert_equal", "(", "cand_two", ",", "self", ".", "LAss", ".", "get_best_candidate", "(", "exp_id", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_optimizer_utils.TestOptimizerUtils.test_check_optimizer": [[11, 39], ["apsis.models.experiment.Experiment", "nose.tools.assert_is_instance", "nose.tools.assert_is_instance", "check_optimizer", "nose.tools.assert_is_instance", "nose.tools.assert_equal", "check_optimizer.exit", "nose.tools.assert_is_instance", "time.sleep", "MinMaxNumericParamDef", "check_optimizer", "check_optimizer", "nose.tools.assert_raises", "check_optimizer", "nose.tools.assert_raises", "check_optimizer", "check_optimizer", "check_optimizer", "nose.tools.assert_raises", "check_optimizer"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.optimizers.optimizer.QueueBasedOptimizer.exit", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer"], ["    ", "def", "test_check_optimizer", "(", "self", ")", ":", "\n", "        ", "param_def", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", "\n", "}", "\n", "experiment", "=", "Experiment", "(", "name", "=", "\"test_optimizer_experiment\"", ",", "\n", "parameter_definitions", "=", "param_def", ")", "\n", "assert_is_instance", "(", "check_optimizer", "(", "RandomSearch", ",", "experiment", ",", "{", "\"multiprocessing\"", ":", "\"none\"", "}", ")", ",", "RandomSearch", ")", "\n", "assert_is_instance", "(", "check_optimizer", "(", "\"RandomSearch\"", ",", "experiment", ",", "{", "\"multiprocessing\"", ":", "\"none\"", "}", ")", ",", "RandomSearch", ")", "\n", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "check_optimizer", "(", "\"fails\"", ",", "experiment", ",", "{", "\"multiprocessing\"", ":", "\"none\"", "}", ")", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "check_optimizer", "(", "MinMaxNumericParamDef", ",", "experiment", ")", "\n", "\n", "", "queue_based", "=", "check_optimizer", "(", "RandomSearch", ",", "experiment", ",", "\n", "{", "\"multiprocessing\"", ":", "\"queue\"", "}", ")", "\n", "assert_is_instance", "(", "queue_based", ",", "QueueBasedOptimizer", ")", "\n", "assert_equal", "(", "check_optimizer", "(", "queue_based", ",", "experiment", ",", "\n", "{", "\"multiprocessing\"", ":", "\"queue\"", "}", ")", ",", "queue_based", ")", "\n", "queue_based", ".", "exit", "(", ")", "\n", "assert_is_instance", "(", "check_optimizer", "(", "RandomSearch", ",", "experiment", ",", "\n", "{", "\"multiprocessing\"", ":", "\"none\"", "}", ")", ",", "\n", "RandomSearch", ")", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "            ", "check_optimizer", "(", "RandomSearch", ",", "experiment", ",", "\n", "{", "\"multiprocessing\"", ":", "\"fails\"", "}", ")", ",", "\n", "\n", "", "time", ".", "sleep", "(", "0.1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_benchmark_functions.testBenchmarkFunctions.test_branin_func": [[8, 12], ["random.uniform", "random.uniform", "branin_func"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions.branin_func"], ["    ", "def", "test_branin_func", "(", "self", ")", ":", "\n", "        ", "x", "=", "random", ".", "uniform", "(", "-", "5", ",", "10", ")", "\n", "y", "=", "random", ".", "uniform", "(", "0", ",", "15", ")", "\n", "result", "=", "branin_func", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_benchmark_functions.testBenchmarkFunctions.test_gen_noise": [[13, 19], ["gen_noise", "get_noise_value_at"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions.gen_noise", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions.get_noise_value_at"], ["", "def", "test_gen_noise", "(", "self", ")", ":", "\n", "        ", "dims", "=", "5", "\n", "points", "=", "5", "\n", "noise_gen", "=", "gen_noise", "(", "dims", ",", "points", ")", "\n", "x", "=", "[", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "val", "=", "get_noise_value_at", "(", "x", ",", "0.5", ",", "noise_gen", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_param_def_utils.TestParamDefConverter.test_nominal": [[8, 14], ["NominalParamDef", "apsis.utilities.param_def_utilities._param_def_to_dict", "apsis.utilities.param_def_utilities._dict_to_param_def", "type", "type"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def"], ["    ", "def", "test_nominal", "(", "self", ")", ":", "\n", "        ", "pd", "=", "NominalParamDef", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", "\n", "dict", "=", "_param_def_to_dict", "(", "pd", ")", "\n", "new_pd", "=", "_dict_to_param_def", "(", "dict", ")", "\n", "assert", "type", "(", "pd", ")", "==", "type", "(", "new_pd", ")", "\n", "assert", "pd", ".", "values", "==", "new_pd", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_param_def_utils.TestParamDefConverter.test_ordinal": [[15, 21], ["OrdinalParamDef", "apsis.utilities.param_def_utilities._param_def_to_dict", "apsis.utilities.param_def_utilities._dict_to_param_def", "type", "type"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def"], ["", "def", "test_ordinal", "(", "self", ")", ":", "\n", "        ", "pd", "=", "OrdinalParamDef", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ")", "\n", "dict", "=", "_param_def_to_dict", "(", "pd", ")", "\n", "new_pd", "=", "_dict_to_param_def", "(", "dict", ")", "\n", "assert", "type", "(", "pd", ")", "==", "type", "(", "new_pd", ")", "\n", "assert", "pd", ".", "values", "==", "new_pd", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_param_def_utils.TestParamDefConverter.test_minmax_numeric": [[22, 29], ["MinMaxNumericParamDef", "apsis.utilities.param_def_utilities._param_def_to_dict", "apsis.utilities.param_def_utilities._dict_to_param_def", "type", "type"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def"], ["", "def", "test_minmax_numeric", "(", "self", ")", ":", "\n", "        ", "pd", "=", "MinMaxNumericParamDef", "(", "-", "2", ",", "20", ")", "\n", "dict", "=", "_param_def_to_dict", "(", "pd", ")", "\n", "new_pd", "=", "_dict_to_param_def", "(", "dict", ")", "\n", "assert", "type", "(", "pd", ")", "==", "type", "(", "new_pd", ")", "\n", "assert", "pd", ".", "lower_bound", "==", "new_pd", ".", "lower_bound", "\n", "assert", "pd", ".", "upper_bound", "==", "new_pd", ".", "upper_bound", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_param_def_utils.TestParamDefConverter.test_position": [[30, 37], ["PositionParamDef", "apsis.utilities.param_def_utilities._param_def_to_dict", "apsis.utilities.param_def_utilities._dict_to_param_def", "type", "type"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def"], ["", "def", "test_position", "(", "self", ")", ":", "\n", "        ", "pd", "=", "PositionParamDef", "(", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", ",", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "dict", "=", "_param_def_to_dict", "(", "pd", ")", "\n", "new_pd", "=", "_dict_to_param_def", "(", "dict", ")", "\n", "assert", "type", "(", "pd", ")", "==", "type", "(", "new_pd", ")", "\n", "assert", "pd", ".", "values", "==", "new_pd", ".", "values", "\n", "assert", "pd", ".", "positions", "==", "new_pd", ".", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_param_def_utils.TestParamDefConverter.test_fixed_value": [[39, 46], ["FixedValueParamDef", "apsis.utilities.param_def_utilities._param_def_to_dict", "apsis.utilities.param_def_utilities._dict_to_param_def", "type", "type"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def"], ["", "def", "test_fixed_value", "(", "self", ")", ":", "\n", "        ", "pd", "=", "FixedValueParamDef", "(", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "dict", "=", "_param_def_to_dict", "(", "pd", ")", "\n", "new_pd", "=", "_dict_to_param_def", "(", "dict", ")", "\n", "assert", "type", "(", "pd", ")", "==", "type", "(", "new_pd", ")", "\n", "assert", "pd", ".", "values", "==", "new_pd", ".", "values", "\n", "assert", "pd", ".", "positions", "==", "new_pd", ".", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_param_def_utils.TestParamDefConverter.test_asymptotic": [[48, 55], ["AsymptoticNumericParamDef", "apsis.utilities.param_def_utilities._param_def_to_dict", "apsis.utilities.param_def_utilities._dict_to_param_def", "type", "type"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def"], ["", "def", "test_asymptotic", "(", "self", ")", ":", "\n", "        ", "pd", "=", "AsymptoticNumericParamDef", "(", "2", ",", "10", ")", "\n", "dict", "=", "_param_def_to_dict", "(", "pd", ")", "\n", "new_pd", "=", "_dict_to_param_def", "(", "dict", ")", "\n", "assert", "type", "(", "pd", ")", "==", "type", "(", "new_pd", ")", "\n", "assert", "pd", ".", "asymptotic_border", "==", "new_pd", ".", "asymptotic_border", "\n", "assert", "pd", ".", "border", "==", "new_pd", ".", "border", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.test_utilities.test_param_def_utils.TestParamDefConverter.test_multiple_transform": [[56, 62], ["apsis.utilities.param_def_utilities.dict_to_param_defs", "MinMaxNumericParamDef", "FixedValueParamDef", "apsis.utilities.param_def_utilities.param_defs_to_dict"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities.dict_to_param_defs", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities.param_defs_to_dict"], ["", "def", "test_multiple_transform", "(", "self", ")", ":", "\n", "        ", "pds", "=", "{", "\n", "\"x\"", ":", "MinMaxNumericParamDef", "(", "0", ",", "1", ")", ",", "\n", "\"y\"", ":", "FixedValueParamDef", "(", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "}", "\n", "new_pd", "=", "dict_to_param_defs", "(", "param_defs_to_dict", "(", "pds", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.demos.demo_branin.single_branin_evaluation_step": [[8, 29], ["conn.get_next_candidate", "apsis.utilities.benchmark_functions.branin_func", "conn.update"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions.branin_func", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update"], ["def", "single_branin_evaluation_step", "(", "conn", ",", "exp_id", ")", ":", "\n", "    ", "\"\"\"\n    Do a single evaluation on the branin function an all what is necessary\n    for it\n    1. get the next candidate to evaluate from the assistant.\n    2. evaluate branin at this pint\n    3. tell the assistant about the new result.\n\n    Parameters\n    ----------\n    LAss : LabAssistant\n        The LabAssistant to use.\n    experiment_name : string\n        The name of the experiment for this evaluation\n    \"\"\"", "\n", "to_eval", "=", "conn", ".", "get_next_candidate", "(", "exp_id", ")", "\n", "result", "=", "branin_func", "(", "to_eval", "[", "\"params\"", "]", "[", "\"x\"", "]", ",", "to_eval", "[", "\"params\"", "]", "[", "\"y\"", "]", ")", "\n", "to_eval", "[", "\"result\"", "]", "=", "result", "\n", "conn", ".", "update", "(", "exp_id", ",", "to_eval", ",", "\"finished\"", ")", "\n", "\n", "return", "to_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.demos.demo_branin.demo_branin": [[30, 56], ["apsis_client.apsis_connection.Connection", "enumerate", "print", "range", "apsis_client.apsis_connection.Connection.init_experiment", "exp_ids.append", "print", "demo_branin.single_branin_evaluation_step"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.init_experiment", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.demos.demo_branin.single_branin_evaluation_step"], ["", "def", "demo_branin", "(", "steps", "=", "20", ",", "random_steps", "=", "5", ",", "cv", "=", "5", ",", "disable_auto_plot", "=", "False", ")", ":", "\n", "    ", "conn", "=", "Connection", "(", "server_address", ")", "\n", "\n", "\n", "optimizers", "=", "[", "\"RandomSearch\"", ",", "\"BayOpt\"", "]", "\n", "optimizer_arguments", "=", "[", "{", "}", ",", "{", "\"initial_random_runs\"", ":", "random_steps", "}", "]", "\n", "\n", "\n", "param_defs", "=", "{", "\n", "\"x\"", ":", "{", "\"type\"", ":", "\"MinMaxNumericParamDef\"", ",", "\"lower_bound\"", ":", "-", "5", ",", "\"upper_bound\"", ":", "10", "}", ",", "\n", "\"y\"", ":", "{", "\"type\"", ":", "\"MinMaxNumericParamDef\"", ",", "\"lower_bound\"", ":", "0", ",", "\"upper_bound\"", ":", "15", "}", ",", "\n", "}", "\n", "\n", "exp_ids", "=", "[", "]", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "optimizers", ")", ":", "\n", "        ", "exp_id", "=", "conn", ".", "init_experiment", "(", "o", ",", "o", ",", "param_defs", ",", "\n", "minimization", "=", "True", ",", "optimizer_arguments", "=", "optimizer_arguments", "[", "i", "]", ")", "#{\"multiprocessing\": \"none\"})", "\n", "exp_ids", ".", "append", "(", "exp_id", ")", "\n", "\n", "", "print", "(", "\"Initialized all optimizers.\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "steps", "*", "cv", ")", ":", "\n", "        ", "if", "i", ">", "0", "and", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "\"finished %i\"", "%", "i", ")", "\n", "", "for", "e_id", "in", "exp_ids", ":", "\n", "            ", "single_branin_evaluation_step", "(", "conn", ",", "e_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions.branin_func": [[6, 34], ["math.cos"], "function", ["None"], ["def", "branin_func", "(", "x", ",", "y", ",", "a", "=", "1", ",", "b", "=", "5.1", "/", "(", "4", "*", "math", ".", "pi", "**", "2", ")", ",", "c", "=", "5", "/", "math", ".", "pi", ",", "r", "=", "6", ",", "s", "=", "10", ",", "\n", "t", "=", "1", "/", "(", "8", "*", "math", ".", "pi", ")", ")", ":", "\n", "        ", "\"\"\"\n        Branin hoo function.\n\n        This is the same function as in\n        http://www.sfu.ca/~ssurjano/branin.html. The default parameters are\n        taken from that same site.\n\n        With the default parameters, there are three minima with f(x)=0.397887:\n        (-pi, 12.275), (pi, 2.275) and (9.42478, 2.475).\n\n        Parameters\n        ---------\n        x : float\n            A real valued float\n        y : float\n            A real valued float\n        a, b, c, r, s, t : floats, optional\n            Parameters for the shape of the Branin hoo function. Thier default\n            values are according to the recommendations of the above website.\n        Returns\n        -------\n        result : float\n            A real valued float.\n        \"\"\"", "\n", "result", "=", "a", "*", "(", "y", "-", "b", "*", "x", "**", "2", "+", "c", "*", "x", "-", "r", ")", "**", "2", "+", "s", "*", "(", "1", "-", "t", ")", "*", "math", ".", "cos", "(", "x", ")", "+", "s", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions.gen_noise": [[36, 61], ["apsis.utilities.randomization.check_random_state", "apsis.utilities.randomization.check_random_state.rand"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.randomization.check_random_state"], ["", "def", "gen_noise", "(", "dims", ",", "points", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generates an ndarray representing random noise.\n\n    This array has dims dimensions and points points per dimension. Each\n    element is between 0 and 1.\n\n    Parameters\n    ----------\n    dims : int\n        The dimensionality of the noise.\n    points : int\n        The number of points per dimension.\n    random_state : numpy RandomState\n        The random state to generate the noise.\n\n    Returns\n    -------\n    noise_gen : ndarray\n        The ndarray containing the noise.\n    \"\"\"", "\n", "random_state", "=", "check_random_state", "(", "random_state", ")", "\n", "dimension_tuple", "=", "(", "points", ",", ")", "*", "dims", "\n", "noise_gen", "=", "random_state", ".", "rand", "(", "*", "dimension_tuple", ")", "\n", "return", "noise_gen", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions.get_noise_value_at": [[63, 110], ["scipy.stats.distributions.norm", "len", "len", "benchmark_functions._gen_closest_index", "benchmark_functions._gen_close_indices", "max", "benchmark_functions._calc_distance_grid", "scipy.stats.distributions.norm.pdf", "scipy.stats.distributions.norm.pdf", "int"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._gen_closest_index", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._gen_close_indices", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._calc_distance_grid"], ["", "def", "get_noise_value_at", "(", "x", ",", "variance", ",", "noise_gen", ",", "val_min", "=", "0", ",", "val_max", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Returns the noise value for noise_gen for a given variance at x.\n\n    The noise_gen is assumed to represent a [0, 1] hypercube and is smoothed\n    by a gaussian distribution with variance variance.\n\n    Note that the smoothing is hard-capped at a 3 sigma interval due to\n    performance reasons.\n\n    Parameters\n    ----------\n    x : list of real values\n        The values of x. The ith entry represents the value of x in the ith\n        dimension.\n    variance : float\n        The variance of the normal distribution to smooth the noise.\n    noise_gen : ndarray\n        The array representing the generated noise.\n    val_min, val_max : float\n        This is used to scale the actual maximum and minimum values to represent\n        the same as otherwise values would not be comparable between variances.\n\n    Returns\n    -------\n    x_value : float\n        The value of the function at the point x.\n    \"\"\"", "\n", "x_value", "=", "0", "\n", "prob_sum", "=", "0", "\n", "gaussian", "=", "norm", "(", "scale", "=", "variance", ")", "\n", "dims", "=", "len", "(", "noise_gen", ".", "shape", ")", "\n", "points", "=", "len", "(", "noise_gen", "[", "0", "]", ")", "\n", "\n", "closest_idx", "=", "_gen_closest_index", "(", "x", ",", "points", ")", "\n", "close_indices", "=", "_gen_close_indices", "(", "closest_idx", ",", "max", "(", "1", ",", "int", "(", "variance", "*", "3", "*", "points", ")", ")", ",", "\n", "dims", ",", "points", ")", "\n", "for", "i", "in", "close_indices", ":", "\n", "        ", "dist", "=", "_calc_distance_grid", "(", "x", ",", "i", ",", "points", ")", "\n", "prob", "=", "gaussian", ".", "pdf", "(", "dist", ")", "\n", "prob_sum", "+=", "gaussian", ".", "pdf", "(", "dist", ")", "\n", "x_value", "+=", "prob", "*", "noise_gen", "[", "i", "]", "\n", "", "x_value", "/=", "prob_sum", "\n", "\n", "x_value", "=", "(", "x_value", "-", "val_min", ")", "/", "(", "val_max", "-", "val_min", ")", "\n", "\n", "return", "x_value", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._calc_distance_grid": [[112, 136], ["range", "len", "float", "float"], "function", ["None"], ["", "def", "_calc_distance_grid", "(", "x_coords", ",", "y_indices", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the euclidian distance between two points for a certain grid.\n\n    Parameters\n    ----------\n    x_coords, y_indices : list\n        The points in a list format for which the distance should be\n        calculated. Note that x_coords is in [0, 1] coords, while y_indices is\n        in an index format, that is dependant on the number of points.\n        The entries x and y are indices of the grid, so their\n         final distance is dependant on the number of points.\n    points : int\n        The number of points per dimension on the grid.\n\n    Returns\n    -------\n    distance : float\n        The distance between x and y.\n    \"\"\"", "\n", "distance", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_coords", ")", ")", ":", "\n", "        ", "distance", "+=", "(", "float", "(", "x_coords", "[", "i", "]", ")", "-", "float", "(", "y_indices", "[", "i", "]", ")", "/", "points", ")", "**", "2", "\n", "", "return", "distance", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._gen_closest_index": [[138, 160], ["range", "tuple", "len", "closest_index.append", "int"], "function", ["None"], ["", "def", "_gen_closest_index", "(", "x", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Generates the closes index to the point x.\n\n    Not that this is not a hard index, but may vary up to +/- 1 in each dim.\n\n    Parameters\n    ----------\n    x : list\n        The [0, 1] hypercube coordinates for x.\n    points : int\n        The number of points in each dimension.\n\n    Returns\n    -------\n    closest_index : tuple\n        Indexing tuple for the closest point.\n    \"\"\"", "\n", "closest_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "        ", "closest_index", ".", "append", "(", "int", "(", "x", "[", "i", "]", "*", "points", ")", ")", "\n", "", "return", "tuple", "(", "closest_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._gen_close_indices": [[162, 194], ["benchmark_functions._gen_close_indices_rec", "range", "list_indices.append", "tuple"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._gen_close_indices_rec"], ["", "def", "_gen_close_indices", "(", "x_indices", ",", "max_dist", ",", "dims", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Generates a list of closest indices to consider for the noise smoothing.\n\n    Parameters\n    ----------\n    x_indices : list\n        The list of indices for each dimension around which to consider the\n        indices.\n    max_dist : int\n        The maximum distance (in indices) around x for which to consider items.\n    dims : int\n        The dimensions of x.\n    points : int\n        The number of points per dimension\n\n    Returns\n    -------\n    list_indices : list of tuples\n        A list of tuples as indices which are closest to x.\n    \"\"\"", "\n", "raw_list_indices", "=", "_gen_close_indices_rec", "(", "x_indices", ",", "max_dist", ",", "dims", ",", "points", ")", "\n", "list_indices", "=", "[", "]", "\n", "for", "l", "in", "raw_list_indices", ":", "\n", "        ", "acceptable", "=", "True", "\n", "for", "d", "in", "range", "(", "dims", ")", ":", "\n", "            ", "if", "0", ">", "l", "[", "d", "]", "or", "l", "[", "d", "]", ">=", "points", ":", "\n", "                ", "acceptable", "=", "False", "\n", "break", "\n", "", "", "if", "acceptable", ":", "\n", "            ", "list_indices", ".", "append", "(", "tuple", "(", "l", ")", ")", "\n", "", "", "return", "list_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._gen_close_indices_rec": [[196, 229], ["len", "range", "benchmark_functions._gen_close_indices_rec", "range", "list_indices.append", "len", "range", "list_indices.append", "int", "int"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.benchmark_functions._gen_close_indices_rec"], ["", "def", "_gen_close_indices_rec", "(", "x", ",", "max_dist", ",", "dims", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Recursively generates a list of closest indices to consider for the noise smoothing.\n\n    Parameters\n    ----------\n    x_indices : list\n        The list of indices for each dimension around which to consider the\n        indices.\n    max_dist : int\n        The maximum distance (in indices) around x for which to consider items.\n    dims : int\n        The dimensions of x.\n    points : int\n        The number of points per dimension\n\n    Returns\n    -------\n    list_indices : list of tuples\n        A list of lists as indices which are closest to x.\n    \"\"\"", "\n", "list_indices", "=", "[", "]", "\n", "if", "len", "(", "x", ")", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "-", "max_dist", ",", "max_dist", "+", "1", ")", ":", "\n", "            ", "list_indices", ".", "append", "(", "[", "int", "(", "i", "+", "x", "[", "0", "]", ")", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "list_prev_dim", "=", "_gen_close_indices_rec", "(", "x", "[", "1", ":", "]", ",", "max_dist", ",", "dims", "-", "1", ",", "points", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "list_prev_dim", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "-", "max_dist", ",", "max_dist", "+", "1", ")", ":", "\n", "                ", "to_append", "=", "[", "int", "(", "j", "+", "x", "[", "0", "]", ")", "]", "+", "list_prev_dim", "[", "i", "]", "[", ":", "]", "\n", "#to_append = [int(j + x[0])] + list_prev_dim[i]", "\n", "list_indices", ".", "append", "(", "to_append", ")", "\n", "", "", "", "return", "list_indices", "\n", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.AddInfoClass.process": [[94, 96], ["None"], "methods", ["None"], ["        ", "def", "process", "(", "self", ",", "msg", ",", "kwargs", ")", ":", "\n", "            ", "return", "'[%s] %s'", "%", "(", "self", ".", "extra", "[", "'extra_info'", "]", ",", "msg", ")", ",", "kwargs", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.get_logger": [[14, 85], ["isinstance", "logging.getLogger", "logging.getLogger", "os.path.dirname", "os.path.join", "handlers.keys", "logging.config.dictConfig", "logging.config.dictConfig", "logging_utils.AddInfoClass", "open", "yaml.load", "apsis.utilities.file_utils.ensure_directory_exists", "[].replace().replace", "os.path.dirname", "save_path.endswith", "[].replace"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.file_utils.ensure_directory_exists"], ["def", "get_logger", "(", "module", ",", "extra_info", "=", "None", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Abstraction from logging.getLogging, which also adds initialization.\n\n    This loads the logging config from config/logging.conf.\n\n    Parameters\n    ----------\n    module : object or string\n        The object for which we'd like to get the logger. The name of the\n        logger is then, analogous to logging, set to\n        module.__module__ + \".\" + module.__class__.__name__\n        If the object is a string it will be taken as name directly.\n\n    extra_info : string, optional\n        If None (the default), a usual logger is returned. If not, a\n        logger_adapter is returned, which always prepends the corresponding\n        string.\n\n    save_path : string, optional\n        The path on which to store the logging. If logging has been initialized\n        previously, this is ignored (and a warning is logged). If a path has\n        been specified in the config file, this is also ignored (and a warning\n        is issued). Otherwise, this path replaces all instances of the token\n        <SAVE_PATH> in the file_name of all handlers.\n        If it does not end with \"/\" we'll automatically add it. That means both\n        \"/tmp/APSIS_WRITING\" and \"/tmp/APSIS_WRITING/\" is treated identically,\n        and logging is added in \"/tmp/APSIS_WRITING/logs\".\n\n    Returns\n    -------\n    logger: logging.logger\n        A logging for module.\n    \"\"\"", "\n", "#if logger is already given as a string take directly. otherwise compute.", "\n", "if", "isinstance", "(", "module", ",", "basestring", ")", ":", "\n", "        ", "new_logger_name", "=", "module", "\n", "", "else", ":", "\n", "        ", "new_logger_name", "=", "module", ".", "__module__", "+", "\".\"", "+", "module", ".", "__class__", ".", "__name__", "\n", "\n", "", "global", "testing", "\n", "\n", "global", "logging_intitialized", "\n", "if", "not", "logging_intitialized", "and", "not", "testing", ":", "\n", "        ", "logging_intitialized", "=", "True", "\n", "\n", "# Look for the logging config file.", "\n", "project_dirname", "=", "os", ".", "path", ".", "dirname", "(", "apsis", ".", "__file__", ")", "\n", "log_config_file", "=", "os", ".", "path", ".", "join", "(", "project_dirname", ",", "'config/logging.conf'", ")", "\n", "with", "open", "(", "log_config_file", ",", "\"r\"", ")", "as", "conf_file", ":", "\n", "            ", "conf_dict", "=", "yaml", ".", "load", "(", "conf_file", ")", "\n", "", "handlers", "=", "conf_dict", "[", "\"handlers\"", "]", "\n", "handler_keys", "=", "handlers", ".", "keys", "(", ")", "\n", "for", "h", "in", "handler_keys", ":", "\n", "            ", "if", "\"filename\"", "in", "handlers", "[", "h", "]", ":", "\n", "                ", "if", "\"<SAVE_PATH>\"", "in", "handlers", "[", "h", "]", "[", "\"filename\"", "]", ":", "\n", "                    ", "if", "not", "save_path", ".", "endswith", "(", "\"/\"", ")", ":", "\n", "                        ", "save_path", "+=", "\"/\"", "\n", "", "handlers", "[", "h", "]", "[", "\"filename\"", "]", "=", "handlers", "[", "h", "]", "[", "\"filename\"", "]", ".", "replace", "(", "\n", "\"<SAVE_PATH>/\"", ",", "save_path", ")", ".", "replace", "(", "\"<SAVE_PATH>\"", ",", "\n", "save_path", ")", "\n", "", "ensure_directory_exists", "(", "os", ".", "path", ".", "dirname", "(", "handlers", "[", "h", "]", "[", "\"filename\"", "]", ")", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "conf_dict", ")", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "new_logger_name", ")", "\n", "\n", "if", "extra_info", ":", "\n", "        ", "logger", "=", "AddInfoClass", "(", "logger", ",", "{", "\"extra_info\"", ":", "extra_info", "}", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.logging_utils.logging_tests": [[87, 91], ["print"], "function", ["None"], ["", "def", "logging_tests", "(", ")", ":", "\n", "    ", "global", "testing", "\n", "print", "(", "\"Setting logging to testing.\"", ")", "\n", "testing", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils.plot_lists": [[9, 87], ["plot_utils._plot_lists_ax", "plot_utils._polish_figure", "plot_utils.create_figure", "fig_options.get", "plot_utils._get_y_min_max", "plot_utils._get_y_min_max", "p.get", "p.get"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils._plot_lists_ax", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils._polish_figure", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils.create_figure", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils._get_y_min_max", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils._get_y_min_max"], ["def", "plot_lists", "(", "to_plot_list", ",", "fig_options", "=", "None", ",", "ax", "=", "None", ",", "plot_min", "=", "None", ",", "\n", "plot_max", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Plots several functions.\n\n    Each entry of to_plot_list defines x, y, and format options.\n\n    Parameters\n    ----------\n    to_plot_list : list of dicts\n        Defines the functions to plot.\n        Each entry must contain at least values for \"x\" and\n        \"y\", and can contain values for \"type\", \"label\" and \"color\".\n        x : list\n            A list of x values\n        y : list\n            A list of y values\n        type : string, optional\n            Either \"line\", in which case a line will be plotted, or \"scatter\",\n            in which case a scatter plot will be made. line is default.\n        label : string, optional\n            The label for the function. Default is \"\"\n        color : string, optional\n            Which color the plot should have. If None, a random colour is\n            chosen.\n        minimizing : bool, optional\n            Whether the plot's goal is to minimize or maximize. Default is\n            minimize.\n    ax : Matplotlib.Axes, optional\n        Axes to continue. If None, will return a new Ax and figure.\n    fig_options : dict, optional\n        Options used when creating a new plot.\n        \"legend_loc\" : string, optional\n            Location for the legend. Default is \"upper right\"\n        \"x_label\" : string, optional\n            x label for the figure\n        \"y_label\" : string, optional\n            y label for the figure\n    plot_at_least : 2-float tuple, optional\n        How many percent of the values should be displayed, from above and from\n        below.\n    plot_min : float, optional\n        Plot from this value.\n    plot_max : float, optional\n        Plot up to this value.\n\n    Returns\n    -------\n    fig : plt.figure\n        Only when no ax had been specified.\n    Ax : plt.Axes\n        The plot containing the plotted lists.\n    \"\"\"", "\n", "fig", "=", "None", "\n", "if", "ax", "is", "None", ":", "\n", "        ", "fig", ",", "ax", "=", "create_figure", "(", "fig_options", ")", "\n", "\n", "", "for", "p", "in", "to_plot_list", ":", "\n", "        ", "if", "not", "\"cutoff_percent\"", "in", "p", ":", "\n", "            ", "continue", "\n", "", "if", "fig_options", ".", "get", "(", "\"minimizing\"", ",", "True", ")", ":", "\n", "            ", "plot_min_this", ",", "plot_max_this", "=", "_get_y_min_max", "(", "p", "[", "\"y\"", "]", ",", "(", "\n", "1", ",", "p", ".", "get", "(", "\"cutoff_percent\"", ",", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "plot_min_this", ",", "plot_max_this", "=", "_get_y_min_max", "(", "p", "[", "\"y\"", "]", ",", "(", "\n", "p", ".", "get", "(", "\"cutoff_percent\"", ",", "1", ")", ",", "1", ")", ")", "\n", "", "if", "plot_min", "is", "None", "or", "plot_min", ">", "plot_min_this", ":", "\n", "            ", "plot_min", "=", "plot_min_this", "\n", "", "if", "plot_max", "is", "None", "or", "plot_max", ">", "plot_max_this", ":", "\n", "            ", "plot_max", "=", "plot_max_this", "\n", "\n", "", "", "_plot_lists_ax", "(", "to_plot_list", ",", "ax", ",", "plot_min", "=", "plot_min", ",", "plot_max", "=", "plot_max", ")", "\n", "_polish_figure", "(", "ax", ",", "fig_options", ")", "\n", "\n", "if", "fig", "is", "None", ":", "\n", "        ", "return", "ax", "\n", "", "else", ":", "\n", "        ", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils._plot_lists_ax": [[89, 134], ["plot_utils.plot_single", "plot_single.set_ylim", "plot_single.set_ylim"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils.plot_single"], ["", "", "def", "_plot_lists_ax", "(", "to_plot_list", ",", "ax", ",", "plot_min", "=", "None", ",", "plot_max", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Plots several functions.\n\n    Each entry of to_plot_list defines x, y, and format options.\n\n    Parameters\n    ----------\n    to_plot_list: list of dicts\n        Defines the functions to plot.\n        Each entry must contain at least values for \"x\" and\n        \"y\", and can contain values for \"type\", \"label\" and \"color\".\n        x: list\n            A list of x values\n        y: list\n            A list of y values\n        type=\"line\": string\n            Either \"line\", in which case a line will be plotted, or \"scatter\",\n            in which case a scatter plot will be made.\n        label=\"\": string\n            The label for the function.\n        color=random colour: string\n            Which color the plot should have.\n    ax : Matplotlib.Axes\n        Axes to continue.\n    plot_at_least : 2-float tuple, optional\n        How many percent of the values should be displayed, from above and from\n        below.\n    plot_min : float, optional\n        Plot from this value.\n    plot_max : float, optional\n        Plot up to this value.\n\n    Returns\n    -------\n    Ax : plt.Axes\n        The plot containing the plotted lists.\n    \"\"\"", "\n", "for", "p", "in", "to_plot_list", ":", "\n", "        ", "ax", "=", "plot_single", "(", "p", ",", "ax", ",", "plot_min", "=", "plot_min", ",", "plot_max", "=", "plot_max", ")", "\n", "", "if", "plot_min", "is", "not", "None", ":", "\n", "        ", "ax", ".", "set_ylim", "(", "ymin", "=", "plot_min", ")", "\n", "", "if", "plot_max", "is", "not", "None", ":", "\n", "        ", "ax", ".", "set_ylim", "(", "ymax", "=", "plot_max", ")", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils._get_y_min_max": [[136, 170], ["sorted", "len", "min", "max", "int", "min", "str", "int", "len", "len", "len"], "function", ["None"], ["", "def", "_get_y_min_max", "(", "y", ",", "plot_at_least", ")", ":", "\n", "    ", "\"\"\"\n    Returns the maximum / minimum values which should be plotted according to\n    plot_at_least.\n\n    Parameters\n    ----------\n    y : list of floats\n        The y values in question.\n\n    plot_at_least : 2-tuple of floats\n        The (from_below, from_above) percentage of points to show.\n\n    Returns\n    -------\n    min_y_new : float\n        The new minimum y value.\n    max_y_new : float\n        The new maximum y value.\n    \"\"\"", "\n", "if", "len", "(", "y", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "sorted_y", "=", "sorted", "(", "[", "x", "for", "x", "in", "y", "if", "str", "(", "x", ")", "!=", "'nan'", "]", ")", "\n", "if", "plot_at_least", "[", "0", "]", "==", "1", ":", "\n", "        ", "min_y_new", "=", "min", "(", "y", ")", "\n", "", "else", ":", "\n", "        ", "min_y_new", "=", "sorted_y", "[", "int", "(", "plot_at_least", "[", "0", "]", "*", "(", "-", "len", "(", "sorted_y", ")", ")", ")", "]", "\n", "", "if", "plot_at_least", "[", "1", "]", "==", "1", ":", "\n", "        ", "max_y_new", "=", "max", "(", "y", ")", "\n", "", "else", ":", "\n", "        ", "max_y_new", "=", "sorted_y", "[", "min", "(", "len", "(", "sorted_y", ")", "-", "1", ",", "int", "(", "plot_at_least", "[", "1", "]", "*", "\n", "len", "(", "sorted_y", ")", ")", ")", "]", "\n", "\n", "", "return", "min_y_new", ",", "max_y_new", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils.plot_single": [[174, 265], ["to_plot.get", "to_plot.get", "to_plot.get", "matplotlib.colors.colorConverter.to_rgba", "to_plot.get", "to_plot.get", "to_plot.get", "random.choice", "ax.errorbar", "ax.plot", "ax.scatter", "range", "len", "max", "min", "len", "abs", "abs", "ax.arrow", "ax.arrow", "max", "min", "max", "min", "min", "max"], "function", ["None"], ["def", "plot_single", "(", "to_plot", ",", "ax", "=", "None", ",", "fig_options", "=", "None", ",", "plot_min", "=", "None", ",", "\n", "plot_max", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Plots a single function.\n\n    to_plot defines x, y, and format options.\n\n    Parameters\n    ----------\n    to_plot : dict\n        Defines the function to plot. Must contain at least values for \"x\" and\n        \"y\", and can contain values for \"type\", \"label\" and \"color\".\n        x : list\n            A list of x values\n        y : list\n            A list of y values\n        var : list\n            A list of the variances for each y value. If exists, the resulting\n            plot will have error bars.\n        type : string, optional\n            Either \"line\", in which case a line will be plotted, or \"scatter\",\n            in which case a scatter plot will be made. Default is \"line\".\n        label : string, optional\n            The label for the function.\n        color : string, optional\n            Which color the plot should have.\n\n    ax : pyplot.Axes, optional\n        Axes to continue.\n    fig_options : dict, optional\n        Options used when creating a new plot.\n        \"legend_loc\" : string, optional\n            Location for the legend.\n            Default is \"upper right\"\n        \"x_label\" : string, optional\n            x label for the figure\n        \"y_label\" : string, optional\n            y label for the figure\n\n    Returns\n    -------\n    fig : plt.figure\n        Either a new figure or fig, now containing the plots as specified.\n    \"\"\"", "\n", "if", "plot_max", "is", "not", "None", "and", "plot_max", "==", "plot_min", ":", "\n", "        ", "plot_min", "=", "plot_max", "-", "0.1", "\n", "", "type", "=", "to_plot", ".", "get", "(", "\"type\"", ",", "\"line\"", ")", "\n", "label", "=", "to_plot", ".", "get", "(", "\"label\"", ",", "None", ")", "\n", "color", "=", "to_plot", ".", "get", "(", "\"color\"", ",", "random", ".", "choice", "(", "COLORS", ")", ")", "\n", "color", "=", "colorConverter", ".", "to_rgba", "(", "color", ")", "\n", "x", "=", "to_plot", ".", "get", "(", "\"x\"", ",", "[", "]", ")", "\n", "y", "=", "to_plot", ".", "get", "(", "\"y\"", ",", "[", "]", ")", "\n", "var", "=", "to_plot", ".", "get", "(", "\"var\"", ",", "[", "]", ")", "\n", "#TODO Despite converting hte color to rgba, matplotlib does not want to change", "\n", "#the arrow colors. Cause is unclear.", "\n", "if", "type", "==", "\"line\"", ":", "\n", "        ", "if", "\"var\"", "in", "to_plot", ":", "\n", "            ", "ax", ".", "errorbar", "(", "x", ",", "y", ",", "label", "=", "label", ",", "yerr", "=", "var", ",", "color", "=", "color", ",", "\n", "linewidth", "=", "2.0", ",", "capthick", "=", "4", ",", "capsize", "=", "8.0", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "y", ",", "label", "=", "label", ",", "color", "=", "color", ",", "linewidth", "=", "2.0", ")", "\n", "", "", "elif", "type", "==", "\"scatter\"", ":", "\n", "        ", "ax", ".", "scatter", "(", "x", ",", "y", ",", "label", "=", "label", ",", "color", "=", "color", ")", "\n", "if", "len", "(", "x", ")", ">", "1", "and", "max", "(", "y", ")", "!=", "min", "(", "y", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "                ", "if", "y", "[", "i", "]", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "plot_min", "is", "None", "or", "plot_min", "is", "None", ":", "\n", "                    ", "arrow_len", "=", "0.05", "\n", "", "else", ":", "\n", "                    ", "arrow_len", "=", "(", "plot_max", "-", "plot_min", ")", "*", "0.05", "\n", "", "arrow_factor_min", "=", "abs", "(", "y", "[", "i", "]", "-", "min", "(", "y", ")", ")", "/", "(", "max", "(", "y", ")", "-", "min", "(", "y", ")", ")", "+", "0.1", "\n", "arrow_factor_max", "=", "abs", "(", "max", "(", "y", ")", "-", "y", "[", "i", "]", ")", "/", "(", "max", "(", "y", ")", "-", "min", "(", "y", ")", ")", "+", "0.1", "\n", "arrow_len_min", "=", "arrow_len", "*", "arrow_factor_min", "\n", "arrow_len_max", "=", "arrow_len", "*", "arrow_factor_max", "\n", "head_width", "=", "0.2", "\n", "if", "plot_min", "is", "not", "None", ":", "\n", "                    ", "if", "plot_min", ">", "y", "[", "i", "]", ":", "\n", "                        ", "ax", ".", "arrow", "(", "x", "[", "i", "]", ",", "plot_min", "+", "1.1", "*", "arrow_len_min", ",", "0", ",", "\n", "-", "arrow_len_min", "/", "10", ",", "fc", "=", "\"k\"", ",", "ec", "=", "\"k\"", ",", "\n", "head_width", "=", "head_width", ",", "\n", "head_length", "=", "arrow_len_min", ",", "\n", "color", "=", "color", ")", "\n", "", "", "if", "plot_max", "is", "not", "None", ":", "\n", "                    ", "if", "plot_max", "<", "y", "[", "i", "]", ":", "\n", "                        ", "ax", ".", "arrow", "(", "x", "[", "i", "]", ",", "plot_max", "-", "1.1", "*", "arrow_len_max", ",", "0", ",", "\n", "arrow_len_max", "/", "10", ",", "fc", "=", "\"k\"", ",", "ec", "=", "\"k\"", ",", "\n", "head_width", "=", "head_width", ",", "\n", "head_length", "=", "arrow_len_max", ",", "color", "=", "color", ")", "\n", "", "", "", "", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils.write_plot_to_file": [[267, 290], ["os.path.join", "fig.savefig"], "function", ["None"], ["", "def", "write_plot_to_file", "(", "fig", ",", "filename", ",", "store_path", ",", "file_format", "=", "\"png\"", ",", "\n", "transparent", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Write out plot to the file given in filename. Assumes that all\n    directories already exist.\n\n    Parameters\n    ----------\n    fig : matplotlib.figure\n        The figure object to store.\n    filename : string or os.path\n        A string or path can be given here to specify where\n        the plot is written to. All parent directories have to exist!\n    file_format : string, optional\n        Specifies file format of plot - all supported file formats\n        by matplotlib can be given here. Default is \"png\"\n    transparent : boolean, optional\n        Specifies if a transparent figure is written. Default is False.\n    \"\"\"", "\n", "filename_w_extension", "=", "os", ".", "path", ".", "join", "(", "store_path", ",", "filename", "+", "\".\"", "+", "\n", "file_format", ")", "\n", "fig", ".", "savefig", "(", "filename_w_extension", ",", "format", "=", "file_format", ",", "\n", "transparent", "=", "transparent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils.create_figure": [[292, 319], ["matplotlib.subplots", "ax.set_xlabel", "ax.set_ylabel", "ax.set_title", "fig_options.get", "fig_options.get", "fig_options.get"], "function", ["None"], ["", "def", "create_figure", "(", "fig_options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Creates a new figure with fig_options.\n\n    Parameters\n    ----------\n    fig_options : dict, optional\n        Options used when creating a new plot.\n        \"x_label\" : string, optional\n            x label for the figure\n        \"y_label\" : string, optional\n            y label for the figure\n        \"title\" : string, optional\n            The title for the figure.\n\n    Returns\n    -------\n    fig : plt.figure\n        A new figure with the options as specified in fig_options.\n    \"\"\"", "\n", "if", "fig_options", "is", "None", ":", "\n", "        ", "fig_options", "=", "{", "}", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "set_xlabel", "(", "fig_options", ".", "get", "(", "\"x_label\"", ",", "\"\"", ")", ")", "\n", "ax", ".", "set_ylabel", "(", "fig_options", ".", "get", "(", "\"y_label\"", ",", "\"\"", ")", ")", "\n", "ax", ".", "set_title", "(", "fig_options", ".", "get", "(", "\"title\"", ",", "\"\"", ")", ")", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.plot_utils._polish_figure": [[321, 345], ["fig_options.get", "ax.set_xlim", "ax.legend"], "function", ["None"], ["", "def", "_polish_figure", "(", "ax", ",", "fig_options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Polishes a finished figure.\n\n    Parameters\n    ----------\n    ax : matplotlib.Axes\n        The ax to polish\n    fig_options : dict, optional\n        Options to be applied after the figure has been created. Supported:\n        \"legend_loc\" : string\n            Location for the legend. Default is \"upper right\"\n    \"\"\"", "\n", "if", "fig_options", "is", "None", ":", "\n", "        ", "fig_options", "=", "{", "}", "\n", "\n", "", "legend_loc", "=", "fig_options", ".", "get", "(", "\"legend_loc\"", ",", "\"upper right\"", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "left", "=", "0", ")", "\n", "if", "legend_loc", "==", "\"no\"", ":", "\n", "# do nothing right now, since no legend", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "ax", ".", "legend", "(", "loc", "=", "legend_loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.acquisition_utils.check_acquisition": [[12, 56], ["isinstance", "isinstance", "acquisition", "issubclass", "ValueError", "ValueError", "type", "str", "AVAILABLE_ACQUISITIONS.keys"], "function", ["None"], ["def", "check_acquisition", "(", "acquisition", ",", "acquisition_params", ")", ":", "\n", "    ", "\"\"\"\n    Checks whether optimizer is an acquisition function or builds one.\n\n    Parameters\n    ----------\n    acquisition : string, AcquisitionFunction instance or class\n        The acquisition function to initialize. If instance, the other\n        parameters will be ignored.\n    acquisition_params: dict, optional\n        The parameters governing the behaviour of the acquisition function. If\n        None, default values are used.\n\n    Returns\n    -------\n    acquisition : AcquisitionFunction instance\n        An initialized optimizer instance.\n\n    Raises\n    ------\n    ValueError\n        If the optimizer is a string, and one cannot find it in\n        AVAILABLE_OPTIMIZERS. If not an optimizer subclass. If the\n        multiprocessing argument is not an acceptable value.\n\n    \"\"\"", "\n", "if", "acquisition_params", "is", "None", ":", "\n", "        ", "acquisition_params", "=", "{", "}", "\n", "\n", "", "if", "isinstance", "(", "acquisition", ",", "acquisition_functions", ".", "AcquisitionFunction", ")", ":", "\n", "        ", "return", "acquisition", "\n", "\n", "", "if", "isinstance", "(", "acquisition", ",", "basestring", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "acquisition", "=", "AVAILABLE_ACQUISITIONS", "[", "acquisition", "]", "\n", "", "except", ":", "\n", "            ", "raise", "ValueError", "(", "\"No corresponding acquisition found for %s. \"", "\n", "\"Acquisition must be in %s\"", "%", "(", "\n", "str", "(", "acquisition", ")", ",", "AVAILABLE_ACQUISITIONS", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "", "if", "not", "issubclass", "(", "acquisition", ",", "acquisition_functions", ".", "AcquisitionFunction", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s is of type %s, not AcquisitionFunction type.\"", "\n", "%", "(", "acquisition", ",", "type", "(", "acquisition", ")", ")", ")", "\n", "", "return", "acquisition", "(", "acquisition_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.acquisition_utils.create_cand_matrix_vector": [[59, 110], ["experiment.parameter_definitions.values", "numpy.zeros", "numpy.zeros", "sorted", "enumerate", "p.warped_size", "len", "experiment.parameter_definitions.keys", "experiment.warp_pt_in", "experiment.better_cand", "experiment.better_cand", "ValueError", "param_values.extend"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.AsymptoticNumericParamDef.warped_size", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.warp_pt_in", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand", "home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.experiment.Experiment.better_cand"], ["", "def", "create_cand_matrix_vector", "(", "experiment", ",", "failed_treat", ")", ":", "\n", "    ", "\"\"\"\n    Creates the candidate matrix and result vector.\n    \"\"\"", "\n", "parameter_warped_size", "=", "0", "\n", "for", "p", "in", "experiment", ".", "parameter_definitions", ".", "values", "(", ")", ":", "\n", "        ", "parameter_warped_size", "+=", "p", ".", "warped_size", "(", ")", "\n", "\n", "", "if", "failed_treat", "[", "0", "]", "is", "\"ignore\"", ":", "\n", "        ", "treated_candidates", "=", "0", "\n", "for", "c", "in", "experiment", ".", "candidates_finished", ":", "\n", "            ", "if", "not", "c", ".", "failed", ":", "\n", "                ", "treated_candidates", "+=", "1", "\n", "", "", "", "else", ":", "\n", "        ", "treated_candidates", "=", "len", "(", "experiment", ".", "candidates_finished", ")", "\n", "\n", "", "candidate_matrix", "=", "np", ".", "zeros", "(", "(", "treated_candidates", ",", "\n", "parameter_warped_size", ")", ")", "\n", "results_vector", "=", "np", ".", "zeros", "(", "(", "treated_candidates", ",", "1", ")", ")", "\n", "\n", "param_names", "=", "sorted", "(", "experiment", ".", "parameter_definitions", ".", "keys", "(", ")", ")", "\n", "\n", "best_candidate", "=", "experiment", ".", "candidates_finished", "[", "0", "]", "\n", "worst_candidate", "=", "experiment", ".", "candidates_finished", "[", "0", "]", "\n", "\n", "for", "c", "in", "experiment", ".", "candidates_finished", ":", "\n", "        ", "if", "not", "c", ".", "failed", ":", "\n", "            ", "if", "experiment", ".", "better_cand", "(", "c", ",", "best_candidate", ")", ":", "\n", "                ", "best_candidate", "=", "c", "\n", "", "if", "experiment", ".", "better_cand", "(", "worst_candidate", ",", "c", ")", ":", "\n", "                ", "worst_candidate", "=", "c", "\n", "\n", "", "", "", "if", "failed_treat", "[", "0", "]", "==", "\"fixed_value\"", ":", "\n", "        ", "failed_value", "=", "failed_treat", "[", "1", "]", "\n", "", "elif", "failed_treat", "[", "0", "]", "==", "\"worst_mult\"", ":", "\n", "        ", "failed_value", "=", "(", "worst_candidate", ".", "result", "-", "best_candidate", ".", "result", ")", "*", "failed_treat", "[", "1", "]", "+", "worst_candidate", ".", "result", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"failed_treat %s is not supported.\"", "%", "failed_treat", ")", "\n", "\n", "", "for", "i", ",", "c", "in", "enumerate", "(", "experiment", ".", "candidates_finished", ")", ":", "\n", "        ", "warped_in", "=", "experiment", ".", "warp_pt_in", "(", "c", ".", "params", ")", "\n", "param_values", "=", "[", "]", "\n", "for", "pn", "in", "param_names", ":", "\n", "            ", "param_values", ".", "extend", "(", "warped_in", "[", "pn", "]", ")", "\n", "", "candidate_matrix", "[", "i", ",", ":", "]", "=", "param_values", "\n", "if", "c", ".", "failed", ":", "\n", "            ", "results_vector", "[", "i", "]", "=", "failed_value", "\n", "", "else", ":", "\n", "            ", "results_vector", "[", "i", "]", "=", "c", ".", "result", "\n", "", "", "return", "candidate_matrix", ",", "results_vector", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.file_utils.ensure_directory_exists": [[3, 14], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "ensure_directory_exists", "(", "directory", ")", ":", "\n", "        ", "\"\"\"\n        Creates the given directory if not existed.\n\n        Parameters\n        ----------\n        directory : String\n            The name of the directory that shall be created if not exists.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "directory", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.import_utils.import_if_exists": [[6, 31], ["__import__", "logger.warning", "str"], "function", ["None"], ["def", "import_if_exists", "(", "module_name", ")", ":", "\n", "    ", "\"\"\"\n    Function tries to import a module but will not fail if the module does\n    not exist.\n\n    Parameters\n    ----------\n    module_name : String\n     The name of the module to be imported.\n\n    Returns\n    --------\n    success : True\n        Whether the module was successfully imported.\n    module : module or None\n        Returns the imported module iff successful, otherwise returns None.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "module", "=", "__import__", "(", "module_name", ")", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Module \"", "+", "str", "(", "module_name", ")", "+", "\n", "\" could not be imported as it could not be found.\"", ")", "\n", "return", "False", ",", "None", "\n", "", "else", ":", "\n", "        ", "return", "True", ",", "module", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.randomization.check_random_state": [[6, 25], ["isinstance", "isinstance", "ValueError", "numpy.random.mtrand._rand.seed", "numpy.random.RandomState"], "function", ["None"], ["def", "check_random_state", "(", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Adapted from sklearn.\n    Turn seed into a np.random.RandomState instance\n\n    If seed is None, return the RandomState singleton used by np.random.\n    If seed is an int, return a new RandomState instance seeded with seed.\n    If seed is already a RandomState instance, return it.\n    Otherwise raise ValueError.\n    \"\"\"", "\n", "if", "seed", "is", "None", "or", "seed", "is", "np", ".", "random", ":", "\n", "        ", "np", ".", "random", ".", "mtrand", ".", "_rand", ".", "seed", "(", ")", "\n", "return", "np", ".", "random", ".", "mtrand", ".", "_rand", "\n", "", "if", "isinstance", "(", "seed", ",", "(", "numbers", ".", "Integral", ",", "np", ".", "integer", ")", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "", "if", "isinstance", "(", "seed", ",", "np", ".", "random", ".", "RandomState", ")", ":", "\n", "        ", "return", "seed", "\n", "", "raise", "ValueError", "(", "'%r cannot be used to seed a numpy.random.RandomState'", "\n", "' instance'", "%", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.optimizer_utils.check_optimizer": [[11, 74], ["optimizer_arguments.get", "isinstance", "isinstance", "issubclass", "ValueError", "apsis.optimizers.optimizer.QueueBasedOptimizer", "optimizer", "ValueError", "ValueError", "type", "str", "AVAILABLE_OPTIMIZERS.keys"], "function", ["None"], ["def", "check_optimizer", "(", "optimizer", ",", "experiment", ",", "optimizer_arguments", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Checks whether optimizer is an optimizer or builds one.\n\n    Specifically, it tests whether optimizer is an Optimizer instance. If\n    it is, it is returned unchanged, all other parameters are ignored. If\n    it is a class of optimizer, it will initialize it with experiment and\n    optimizer_arguments. If it is a basestring, it will be translated via\n    optimizer_utils.AVAILABLE_OPTIMIZERS, then initialized.\n\n    Parameters\n    ----------\n    optimizer : string, Optimizer instance, optimizer class\n        The optimizer to initialize. If optimizer instance, the other\n        parameters will be ignored.\n    experiment : Experiment\n        The experiment defining the optimizer.\n    optimizer_arguments : dict, optional\n        The parameters governing the behaviour of the optimizer. If None,\n        default values are used.\n        This class introduces an additional parameter, called multiprocessing.\n        If \"queue\", the default, it will initialize the optimizer abstracted by\n        a QueueBasedOptimizer. If \"none\", it will initialize it directly.\n\n    Returns\n    -------\n    optimizer : Optimizer instance\n        An initialized optimizer instance.\n\n    Raises\n    ------\n    ValueError\n        If the optimizer is a string, and one cannot find it in\n        AVAILABLE_OPTIMIZERS. If not an optimizer subclass. If the\n        multiprocessing argument is not an acceptable value.\n\n    \"\"\"", "\n", "if", "optimizer_arguments", "is", "None", ":", "\n", "        ", "optimizer_arguments", "=", "{", "}", "\n", "", "multi_architecture", "=", "optimizer_arguments", ".", "get", "(", "\"multiprocessing\"", ",", "\"queue\"", ")", "\n", "if", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "        ", "return", "optimizer", "\n", "\n", "", "if", "isinstance", "(", "optimizer", ",", "basestring", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "optimizer", "=", "AVAILABLE_OPTIMIZERS", "[", "optimizer", "]", "\n", "", "except", ":", "\n", "            ", "raise", "ValueError", "(", "\"No corresponding optimizer found for %s. \"", "\n", "\"Optimizer must be in %s\"", "%", "(", "\n", "str", "(", "optimizer", ")", ",", "AVAILABLE_OPTIMIZERS", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "", "if", "not", "issubclass", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s is of type %s, not Optimizer type.\"", "\n", "%", "(", "optimizer", ",", "type", "(", "optimizer", ")", ")", ")", "\n", "\n", "", "if", "multi_architecture", "==", "\"queue\"", ":", "\n", "        ", "return", "QueueBasedOptimizer", "(", "optimizer", ",", "experiment", ",", "optimizer_arguments", ")", "\n", "", "elif", "multi_architecture", "==", "\"none\"", ":", "\n", "        ", "return", "optimizer", "(", "experiment", ",", "optimizer_arguments", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"%s is not supported as a multi-architecture \"", "\n", "\"parameter. Currently supported are %s\"", "%", "(", "\n", "multi_architecture", ",", "[", "\"none\"", ",", "\"queue\"", "]", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities.param_defs_to_dict": [[5, 28], ["param_def_utilities._param_def_to_dict"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict"], ["def", "param_defs_to_dict", "(", "param_defs", ")", ":", "\n", "    ", "\"\"\"\n    Translates paramdefs to a dictionary.\n\n    Parameters\n    ----------\n    param_defs : dict\n        A dictionary with string keys and ParamDef instance values.\n\n    Result\n    ------\n    param_dict : dict\n        Dictionary representing the parameter definitions. Has the\n        following format:\n        For each parameter, one entry whose key is the name of the\n        parameter as a string. The value is a dictionary whose \"type\" field\n        is the name of the ParamDef class, and whose other fields are the\n        kwarg fields of that constructor.\n    \"\"\"", "\n", "param_dict", "=", "{", "}", "\n", "for", "k", "in", "param_defs", ":", "\n", "        ", "param_dict", "[", "k", "]", "=", "_param_def_to_dict", "(", "param_defs", "[", "k", "]", ")", "\n", "", "return", "param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._param_def_to_dict": [[30, 49], ["param_def.to_dict"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.models.parameter_definition.RangeParamDef.to_dict"], ["", "def", "_param_def_to_dict", "(", "param_def", ")", ":", "\n", "    ", "\"\"\"\n    Translates a single parameter definition to a dictionary.\n\n    Parameters\n    ----------\n    param_def : ParamDef\n        A ParamDef subclass instance.\n\n    Result\n    ------\n    param_dict : dict\n        A dictionary whose \"type\" field\n        is the name of the ParamDef class, and whose other fields are the\n        kwarg fields of that constructor.\n    \"\"\"", "\n", "dict", "=", "param_def", ".", "to_dict", "(", ")", "\n", "dict", "[", "\"type\"", "]", "=", "param_def", ".", "__class__", ".", "__name__", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities.dict_to_param_defs": [[51, 74], ["param_def_utilities._dict_to_param_def"], "function", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def"], ["", "def", "dict_to_param_defs", "(", "dict", ")", ":", "\n", "    ", "\"\"\"\n    Translates a dictionary to paramdefs.\n\n    Parameters\n    ----------\n    dict : dict\n        Dictionary representing the parameter definitions. Has the\n        following format:\n        For each parameter, one entry whose key is the name of the\n        parameter as a string. The value is a dictionary whose \"type\" field\n        is the name of the ParamDef class, and whose other fields are the\n        kwarg fields of that constructor.\n\n    Result\n    ------\n    param_defs : dict\n        A dictionary with string keys and ParamDef instance values.\n    \"\"\"", "\n", "param_defs", "=", "{", "}", "\n", "for", "k", "in", "dict", ":", "\n", "        ", "param_defs", "[", "k", "]", "=", "_dict_to_param_def", "(", "dict", "[", "k", "]", ")", "\n", "", "return", "param_defs", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.utilities.param_def_utilities._dict_to_param_def": [[76, 95], ["getattr", "getattr."], "function", ["None"], ["", "def", "_dict_to_param_def", "(", "param_dict", ")", ":", "\n", "    ", "\"\"\"\n    Translates a dictionary to paramdefs.\n\n    Parameters\n    ----------\n    param_dict : dict\n        A dictionary whose \"type\" field\n        is the name of the ParamDef class, and whose other fields are the\n        kwarg fields of that constructor.\n        \n    Result\n    ------\n    param_def : ParamDef\n        A paramDef instance corresponding to the translated param_dict.\n    \"\"\"", "\n", "param_type", "=", "getattr", "(", "pd", ",", "param_dict", "[", "\"type\"", "]", ")", "\n", "del", "param_dict", "[", "\"type\"", "]", "\n", "return", "param_type", "(", "**", "param_dict", ")", "", "", ""]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.__init__": [[44, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "server_address", ",", "repeat_time", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the apsis connection.\n\n        Parameters\n        ----------\n        server_address : string\n        The address (including port) on which the apsis server is reachable.\n\n        repeat_time : float, optional\n            The minimum time in seconds between repeat attempts to retry a failed\n            request. The real time may be slightly longer.\n            Default is 0.1s\n        \"\"\"", "\n", "self", ".", "server_address", "=", "server_address", "\n", "self", ".", "repeat_time", "=", "repeat_time", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection._request": [[61, 103], ["time.time", "request", "request", "request.json", "time.time", "time.sleep", "request.json", "request.json"], "methods", ["None"], ["", "def", "_request", "(", "self", ",", "request", ",", "url", ",", "json", "=", "None", ",", "blocking", "=", "True", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Internal function to handle requests including timeouts and retries.\n\n        In general, the function reattempts a connection as long as the\n        time has not been longer than specified by timeout. If blocking, and\n        the \"result\" field of the returned json is None or \"failed\", both of\n        which indicate a non-successful request, the connection is reattempted.\n        Otherwise, or if the connection was successful, the json \"result\" field\n        is returned.\n\n        Parameters\n        ----------\n        request : requests.request\n            The function to use to contact the server. In general, should be\n            one of get, post, put, delete etc.\n        url : string\n            The url of the server, including port. Will ususally consist of\n            self.url + some string defining the entry point of the function.\n        json : json object, optional\n            The json-converted object for this request. Can be None.\n        blocking : bool, optional\n            If True, retries the query until it receives an acceptable answer, at\n            most timeout seconds.\n            If False, tries the query only once.\n            Default is True.\n        timeout : float, optional\n            The maximum time to retry the connection. If it is <= 0 or None, this\n            is interpreted as a an infinitely long wait.\n             Default is None.\n        \"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "while", "timeout", "is", "None", "or", "timeout", "<=", "0", "or", "time", ".", "time", "(", ")", "-", "start_time", "<", "timeout", ":", "\n", "            ", "if", "json", "is", "None", ":", "\n", "                ", "r", "=", "request", "(", "url", "=", "url", ",", "timeout", "=", "timeout", ")", "\n", "", "else", ":", "\n", "                ", "r", "=", "request", "(", "url", "=", "url", ",", "json", "=", "json", ",", "timeout", "=", "timeout", ")", "\n", "", "if", "blocking", ":", "\n", "                ", "if", "r", ".", "json", "(", ")", "[", "\"result\"", "]", "is", "None", "or", "r", ".", "json", "(", ")", "[", "\"result\"", "]", "==", "\"failed\"", ":", "\n", "                    ", "time", ".", "sleep", "(", "self", ".", "repeat_time", ")", "\n", "continue", "\n", "", "", "return", "r", ".", "json", "(", ")", "[", "\"result\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.init_experiment": [[104, 169], ["apsis_connection.Connection._request"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection._request"], ["", "", "def", "init_experiment", "(", "self", ",", "name", ",", "optimizer", ",", "param_defs", ",", "optimizer_arguments", "=", "None", ",", "\n", "exp_id", "=", "None", ",", "notes", "=", "None", ",", "minimization", "=", "True", ",", "blocking", "=", "False", ",", "\n", "timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initializes an experiment on the apsis server.\n\n        Note that, since failure can regularly happen here if the experiment\n        names have not been checked previously, blocking is by default set to\n        False.\n\n        Parameters\n        ----------\n        name : string\n            name of the experiment.\n        optimizer : string\n            String representation of the optimizer.\n        param_defs : dict of parameter definitions\n            Dictionary representing the parameter definitions. Must have the\n            following format:\n            For each parameter, one entry whose key is the name of the\n            parameter as a string. The value is a dictionary whose \"type\" field\n            is the name of the ParamDef class, and whose other fields are the\n            kwarg fields of that constructor.\n        optimizer_arguments : dict, optional\n            A dictionary defining the operation of the optimizer. See the\n            respective documentation of the optimizers.\n            Default is None, which are default values.\n        exp_id : string or None, optional\n            The id of the experiment, which will be used to reference it.\n            Should be a proper uuid, and especially has to be unique. If it is\n            not, an error may be returned.\n        notes : jsonable object or None, optional\n            Any note that you'd like to put in the experiment. Could be used\n            to provide some details on the experiment, on the start time or the\n            user starting it.\n        minimization : bool, optional\n            Whether the problem is one of minimization. Defaults to True.\n        blocking : bool, optional\n            If True, retries the query until it receives an acceptable answer,\n            at most timeout seconds.\n            If False, tries the query only once.\n            Default is False.\n        timeout : float, optional\n            The maximum time to retry the connection. If it is <= 0 or None,\n            this is interpreted as a an infinitely long wait.\n             Default is None.\n\n        Returns\n        -------\n        id : string\n            String representing the id of the experiment or \"failed\" if failed.\n        \"\"\"", "\n", "msg", "=", "{", "\n", "\"name\"", ":", "name", ",", "\n", "\"exp_id\"", ":", "exp_id", ",", "\n", "\"notes\"", ":", "notes", ",", "\n", "\"optimizer\"", ":", "optimizer", ",", "\n", "\"param_defs\"", ":", "param_defs", ",", "\n", "\"optimizer_arguments\"", ":", "optimizer_arguments", ",", "\n", "\"minimization\"", ":", "minimization", "\n", "}", "\n", "url", "=", "self", ".", "server_address", "+", "\"/c/experiments\"", "\n", "success", "=", "self", ".", "_request", "(", "requests", ".", "post", ",", "url", "=", "url", ",", "json", "=", "msg", ",", "\n", "blocking", "=", "blocking", ",", "timeout", "=", "timeout", ")", "\n", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_all_experiment_ids": [[170, 194], ["apsis_connection.Connection._request"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection._request"], ["", "def", "get_all_experiment_ids", "(", "self", ",", "blocking", "=", "True", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the ids of all experiments.\n\n        Parameters\n        ----------\n        blocking : bool, optional\n            If True, retries the query until it receives an acceptable answer, at\n            most timeout seconds.\n            If False, tries the query only once.\n            Default is True.\n        timeout : float, optional\n            The maximum time to retry the connection. If it is <= 0 or None, this\n            is interpreted as a an infinitely long wait.\n             Default is None.\n\n        Returns\n        -------\n        experiment_ids : list of strings\n            Returns one entry per existing experiment, containing its id.\n            If blocking is False, may return None or \"failed\".\n        \"\"\"", "\n", "url", "=", "self", ".", "server_address", "+", "\"/c/experiments\"", "\n", "return", "self", ".", "_request", "(", "requests", ".", "get", ",", "url", ",", "blocking", "=", "blocking", ",", "timeout", "=", "timeout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_next_candidate": [[195, 244], ["apsis_connection.Connection._request"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection._request"], ["", "def", "get_next_candidate", "(", "self", ",", "exp_id", ",", "blocking", "=", "True", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the next candidate of an experiment.\n\n        Parameters\n        ----------\n        exp_id : string\n            The id of the experiment to return.\n        blocking : bool, optional\n            If True, retries the query until it receives an acceptable answer, at\n            most timeout seconds.\n            If False, tries the query only once.\n            Default is True.\n        timeout : float, optional\n            The maximum time to retry the connection. If it is <= 0 or None, this\n            is interpreted as a an infinitely long wait.\n             Default is None.\n\n        Returns\n        -------\n        next_candidate : dict representing a candidate.\n            The returned dictionary represents a candidate. It consists of the\n            following fields:\n            \"cost\" : float or None\n                The cumulative cost of the evaluations of this candidate.\n                Must be set by the worker. Default is None, representing no\n                cost being set.\n            \"params\" : dict of parameters\n                The parameter values this candidate has. The format is\n                analogous to the parameter defintion of init_experiment,\n                with each entry being an acceptable value according to\n                param_def.\n            \"id\" : string\n                An id uniquely identifying this candidate.\n            \"worker_information\" : arbitrary\n                A field usable for setting worker information, for example a\n                directory in which intermediary results are stored. Any\n                json-able information can be stored in it (though, since\n                it's transferred via network, it is probably better to keep it\n                fairly small), and apsis guarantees never to change it.\n                By default, it's None.\n            \"result\" : float\n                The result of the process we want to optimize.\n                Is None by default\n            May also return \"failed\" or None if blocking is false and\n            timeout > 0, which represents a failed request.\n        \"\"\"", "\n", "url", "=", "self", ".", "server_address", "+", "\"/c/experiments/%s/get_next_candidate\"", "%", "exp_id", "\n", "return", "self", ".", "_request", "(", "requests", ".", "get", ",", "url", "=", "url", ",", "blocking", "=", "blocking", ",", "timeout", "=", "timeout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.update": [[245, 308], ["apsis_connection.Connection._request"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection._request"], ["", "def", "update", "(", "self", ",", "exp_id", ",", "candidate", ",", "status", "=", "\"finished\"", ",", "blocking", "=", "True", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Updates the result of the candidate.\n\n        Parameters\n        ----------\n        exp_id : string\n            The id of the experiment to return.\n        candidate : dict representing a candidate\n            Represents a candidate. Usually a modified candidate received from\n             get_next_candidate.\n            It consists of the following fields:\n            \"cost\" : float or None\n                The cumulative cost of the evaluations of this candidate.\n                Must be set by the worker. Default is None, representing no\n                cost being set.\n            \"params\" : dict of parameters\n                The parameter values this candidate has. The format is\n                analogous to the parameter defintion of init_experiment,\n                with each entry being an acceptable value according to\n                param_def.\n            \"id\" : string\n                An id uniquely identifying this candidate.\n            \"worker_information\" : arbitrary\n                A field usable for setting worker information, for example a\n                directory in which intermediary results are stored. Any\n                json-able information can be stored in it (though, since\n                it's transferred via network, it is probably better to keep it\n                fairly small), and apsis guarantees never to change it.\n                By default, it's None.\n            \"result\" : float\n                The result of the process we want to optimize.\n                Is None by default\n        status : string\n            One of \"finished\", \"working\" and \"pausing\".\n            \"finished\": The evaluation is finished.\n            \"working\": The evaluation is still in progress. Later, it will be\n            used to ensure that the worker is still working, allowing us to\n            reschedule the candidate to other workers if necessary.\n            \"pausing\": Signals that this candidate has paused the execution,\n            meaning that we are allowed to reschedule it to another worker.\n        blocking : bool, optional\n            If True, retries the query until it receives an acceptable answer, at\n            most timeout seconds.\n            If False, tries the query only once.\n            Default is True.\n        timeout : float, optional\n            The maximum time to retry the connection. If it is <= 0 or None, this\n            is interpreted as a an infinitely long wait.\n             Default is None.\n\n        Returns\n        -------\n        result : string\n            Returns \"success\" iff successful, \"failed\" otherwise.\n        \"\"\"", "\n", "url", "=", "self", ".", "server_address", "+", "\"/c/experiments/%s/update\"", "%", "exp_id", "\n", "msg", "=", "{", "\n", "\"status\"", ":", "status", ",", "\n", "\"candidate\"", ":", "candidate", "\n", "}", "\n", "return", "self", ".", "_request", "(", "requests", ".", "post", ",", "url", ",", "json", "=", "msg", ",", "blocking", "=", "blocking", ",", "\n", "timeout", "=", "timeout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_best_candidate": [[309, 337], ["apsis_connection.Connection._request"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection._request"], ["", "def", "get_best_candidate", "(", "self", ",", "exp_id", ",", "blocking", "=", "True", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the best finished candidate for an experiment.\n\n        Parameters\n        ----------\n        exp_id : string\n            The id of the experiment to return.\n        blocking : bool, optional\n            If True, retries the query until it receives an acceptable answer, at\n            most timeout seconds.\n            If False, tries the query only once.\n            Default is True.\n        timeout : float, optional\n            The maximum time to retry the connection. If it is <= 0 or None, this\n            is interpreted as a an infinitely long wait.\n             Default is None.\n\n        Returns\n        -------\n        best_candidate : dict as a candidate representation\n            Dictionary candidate representation (see get_next_candidate for the\n            exact format). May be None if no such candidate exists.\n            If blocking is True and timeout > 0, this may return None or\n            \"Failed\".\n        \"\"\"", "\n", "url", "=", "self", ".", "server_address", "+", "\"/c/experiments/%s/get_best_candidate\"", "%", "exp_id", "\n", "return", "self", ".", "_request", "(", "requests", ".", "get", ",", "url", ",", "blocking", "=", "blocking", ",", "timeout", "=", "timeout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection.get_all_candidates": [[338, 374], ["apsis_connection.Connection._request"], "methods", ["home.repos.pwc.inspect_result.FrederikDiehl_apsis.apsis_client.apsis_connection.Connection._request"], ["", "def", "get_all_candidates", "(", "self", ",", "exp_id", ",", "blocking", "=", "True", ",", "timeout", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the candidates for an experiment.\n\n        Parameters\n        ----------\n        exp_id : string\n            The id of the experiment to return.\n        blocking : bool, optional\n            If True, retries the query until it receives an acceptable answer, at\n            most timeout seconds.\n            If False, tries the query only once.\n            Default is True.\n        timeout : float, optional\n            The maximum time to retry the connection. If it is <= 0 or None, this\n            is interpreted as a an infinitely long wait.\n             Default is None.\n\n        Returns\n        -------\n        candidates : dict of lists\n            Returns a dictionary of three lists of candidates.\n            Each of the lists contains dictionary candidate representation\n            (see get_next_candidate for the exact format). Each list may be\n            empty.\n            The three lists are:\n            \"finished\": The list of finished candidates.\n            \"working\": The list of candidates on which workers are currently\n            working.\n            \"pending\": The list of not-yet finished candidates on which no\n            worker is currently working.\n            If blocking is True and timeout > 0, this may return None or\n            \"Failed\".\n        \"\"\"", "\n", "url", "=", "self", ".", "server_address", "+", "\"/c/experiments/%s/candidates\"", "%", "exp_id", "\n", "return", "self", ".", "_request", "(", "requests", ".", "get", ",", "url", ",", "blocking", "=", "blocking", ",", "timeout", "=", "timeout", ")", "", "", "", ""]]}