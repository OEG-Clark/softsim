{"home.repos.pwc.inspect_result.selimfirat_pysad.utils.array_streamer.ArrayStreamer.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.array_streamer.ArrayStreamer.iter": [[15, 33], ["list", "range", "numpy.random.shuffle", "len", "len", "len"], "methods", ["None"], ["", "def", "iter", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterates array of features and possibly labels.\n\n        Args:\n            X (np.array of shape (num_instances, num_features)): The features array.\n            y (np.array of shape (num_instances, ): The array containing labels (Default=None).\n        \"\"\"", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "X", ")", ")", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "", "if", "y", "is", "None", ":", "\n", "            ", "for", "i", "in", "indices", ":", "\n", "                ", "yield", "X", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "assert", "len", "(", "X", ")", "==", "len", "(", "y", ")", "\n", "for", "i", "in", "indices", ":", "\n", "                ", "yield", "X", "[", "i", "]", ",", "y", "[", "i", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.__init__": [[13, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_base_path", "=", "\"data\"", ")", ":", "\n", "        ", "self", ".", "data_base_path", "=", "data_base_path", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data._get_data_files": [[16, 45], ["None"], "methods", ["None"], ["", "def", "_get_data_files", "(", "self", ")", ":", "\n", "        ", "\"\"\" Helper method to return the names of the data files.\n\n        Returns:\n            file_names (list[str]): List of data file names.\n        \"\"\"", "\n", "return", "[", "\n", "'arrhythmia.mat'", ",", "\n", "'cardio.mat'", ",", "\n", "'glass.mat'", ",", "\n", "'ionosphere.mat'", ",", "\n", "'letter.mat'", ",", "\n", "'lympho.mat'", ",", "\n", "'mnist.mat'", ",", "\n", "'musk.mat'", ",", "\n", "'optdigits.mat'", ",", "\n", "'pendigits.mat'", ",", "\n", "'pima.mat'", ",", "\n", "'satellite.mat'", ",", "\n", "'satimage-2.mat'", ",", "\n", "'shuttle.mat'", ",", "\n", "'vertebral.mat'", ",", "\n", "'vowels.mat'", ",", "\n", "'wbc.mat'", ",", "\n", "\"gisette_sampled.txt\"", ",", "\n", "\"isolet_sampled.txt\"", ",", "\n", "\"madelon_sampled.txt\"", ",", "\n", "\"pima-indians_sampled.txt\"", ",", "\n", "\"magic-telescope_sampled.txt\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data._load_via_txt": [[47, 59], ["numpy.loadtxt"], "methods", ["None"], ["", "def", "_load_via_txt", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Loads the data file from .txt file.\n\n        Args:\n            path (str): The path of data.\n\n        Returns:\n            X (np.float array of shape (num_instances, num_features)): Feature vectors.\n        \"\"\"", "\n", "X", "=", "np", ".", "loadtxt", "(", "path", ",", "delimiter", "=", "\",\"", ")", "\n", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.get_data": [[60, 86], ["os.path.join", "loadmat", "f[].ravel", "data.Data._load_via_txt", "X[].ravel"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data._load_via_txt"], ["", "def", "get_data", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "\"\"\"Loads the data given the path.\n\n        Args:\n            data_file: Path of the data.\n\n        Returns:\n            X (np.array of shape (num_instances, num_features)): Feature vectors.\n            y (np.array of shape (num_instances,)): Labels.\n        \"\"\"", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_base_path", ",", "data_file", ")", "\n", "\n", "if", "\".mat\"", "in", "data_file", ":", "\n", "            ", "from", "scipy", ".", "io", "import", "loadmat", "\n", "\n", "f", "=", "loadmat", "(", "data_path", ")", "\n", "\n", "X", "=", "f", "[", "'X'", "]", "\n", "y", "=", "f", "[", "'y'", "]", ".", "ravel", "(", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "self", ".", "_load_via_txt", "(", "data_path", ")", "\n", "\n", "y", "=", "X", "[", ":", ",", "-", "1", "]", ".", "ravel", "(", ")", "\n", "X", "=", "X", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.get_iterator": [[87, 107], ["pysad.utils.array_streamer.ArrayStreamer", "data.Data.get_data", "pysad.utils.array_streamer.ArrayStreamer.iter", "numpy.random.seed"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.get_data", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter"], ["", "def", "get_iterator", "(", "self", ",", "data_file", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"The iterator function\n\n        Args:\n            data_file (str): Path of data.\n            shuffle (bool): Whether to shuffle (Default=True).\n            seed (int): Random seed (Default=None).\n\n        Returns:\n            iterator (The iterator): pysad.utils.array_streamer.ArrayStreamer.iter method applied with (X, y), where X is the variable containing feature vectors and y is the variable containing labels.\n\n        \"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "iterator", "=", "ArrayStreamer", "(", "shuffle", "=", "shuffle", ")", "\n", "\n", "X", ",", "y", "=", "self", ".", "get_data", "(", "data_file", ")", "\n", "\n", "return", "iterator", ".", "iter", "(", "X", ",", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.window.Window.__init__": [[10, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "        ", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "window", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.window.Window.update": [[14, 23], ["window.Window.window.append", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Adds new item to the window. Removes the tail if size exceeds the self.window_size.\n\n        Args:\n            num (float): item to be added to the window.\n        \"\"\"", "\n", "self", ".", "window", ".", "append", "(", "num", ")", "\n", "if", "len", "(", "self", ".", "window", ")", ">", "self", ".", "window_size", ":", "\n", "            ", "self", ".", "window", "=", "self", ".", "window", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.window.Window.get": [[24, 31], ["None"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Method to obtain the window list.\n\n        Returns:\n            window (list): List containing the items in window\n        \"\"\"", "\n", "return", "self", ".", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.window.UnlimitedWindow.__init__": [[37, 39], ["window.Window.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.window.UnlimitedWindow.update": [[40, 47], ["window.UnlimitedWindow.window.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Adds new item to the window. Removes the tail if size exceeds the self.window_size.\n\n        Args:\n            num (float): item to be added to the window.\n        \"\"\"", "\n", "self", ".", "window", ".", "append", "(", "num", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed": [[14, 22], ["random.seed", "numpy.random.seed"], "function", ["None"], []], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.get_minmax_array": [[24, 37], ["numpy.min", "numpy.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.get_minmax_scalar": [[39, 52], ["numpy.min", "numpy.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate": [[54, 70], ["array_streamer.ArrayStreamer", "array_streamer.ArrayStreamer.iter", "array_streamer.ArrayStreamer.iter"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter"], []], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.pandas_streamer.PandasStreamer.__init__": [[12, 16], ["pysad.core.base_streamer.BaseStreamer.__init__", "pysad.utils.array_streamer.ArrayStreamer"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "shuffle", "=", "shuffle", ")", "\n", "\n", "self", ".", "array_iterator", "=", "ArrayStreamer", "(", "shuffle", "=", "shuffle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.utils.pandas_streamer.PandasStreamer.iter": [[17, 32], ["pandas_streamer.PandasStreamer.array_iterator.iter", "pandas_streamer.PandasStreamer.array_iterator.iter", "X.to_numpy", "len", "len", "X.to_numpy", "y.to_numpy"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter"], ["", "def", "iter", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Iterates pandas dataframes of of features and possibly labels.\n\n        Args:\n            X: Pandas Dataframe for features.\n            y: Pandas dataframe for labels.\n        \"\"\"", "\n", "if", "y", "is", "None", ":", "\n", "            ", "for", "x", "in", "self", ".", "array_iterator", ".", "iter", "(", "X", ".", "to_numpy", "(", ")", ")", ":", "\n", "                ", "yield", "x", "\n", "", "", "else", ":", "\n", "            ", "assert", "len", "(", "X", ")", "==", "len", "(", "y", ")", "\n", "\n", "for", "x", ",", "yr", "in", "self", ".", "array_iterator", ".", "iter", "(", "X", ".", "to_numpy", "(", ")", ",", "y", ".", "to_numpy", "(", ")", ")", ":", "\n", "                ", "yield", "x", ",", "yr", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream.xStream.__init__": [[17, 35], ["pysad.transform.projection.streamhash_projector.StreamhashProjector", "xstream._HSChains", "numpy.ones", "numpy.abs"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_components", "=", "100", ",", "\n", "n_chains", "=", "100", ",", "\n", "depth", "=", "25", ",", "\n", "window_size", "=", "25", ")", ":", "\n", "        ", "self", ".", "streamhash", "=", "StreamhashProjector", "(", "num_components", "=", "num_components", ")", "\n", "deltamax", "=", "np", ".", "ones", "(", "num_components", ")", "*", "0.5", "\n", "deltamax", "[", "np", ".", "abs", "(", "deltamax", ")", "<=", "0.0001", "]", "=", "1.0", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "hs_chains", "=", "_HSChains", "(", "\n", "deltamax", "=", "deltamax", ",", "\n", "n_chains", "=", "n_chains", ",", "\n", "depth", "=", "depth", ")", "\n", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "cur_window", "=", "[", "]", "\n", "self", ".", "ref_window", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream.xStream.fit_partial": [[36, 63], ["xstream.xStream.streamhash.fit_transform_partial", "X.reshape.reshape.reshape", "xstream.xStream.cur_window.append", "xstream.xStream.hs_chains.fit", "xstream.xStream._compute_deltamax", "xstream.xStream.hs_chains.set_deltamax", "xstream.xStream.hs_chains.next_window"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream.xStream._compute_deltamax", "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.set_deltamax", "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.next_window"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "self", ".", "step", "+=", "1", "\n", "\n", "X", "=", "self", ".", "streamhash", ".", "fit_transform_partial", "(", "X", ")", "\n", "\n", "X", "=", "X", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "self", ".", "cur_window", ".", "append", "(", "X", ")", "\n", "\n", "self", ".", "hs_chains", ".", "fit", "(", "X", ")", "\n", "\n", "if", "self", ".", "step", "%", "self", ".", "window_size", "==", "0", ":", "\n", "            ", "self", ".", "ref_window", "=", "self", ".", "cur_window", "\n", "self", ".", "cur_window", "=", "[", "]", "\n", "deltamax", "=", "self", ".", "_compute_deltamax", "(", ")", "\n", "self", ".", "hs_chains", ".", "set_deltamax", "(", "deltamax", ")", "\n", "self", ".", "hs_chains", ".", "next_window", "(", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream.xStream.score_partial": [[64, 78], ["xstream.xStream.streamhash.fit_transform_partial", "X.reshape.reshape.reshape", "xstream.xStream.hs_chains.score().flatten", "xstream.xStream.hs_chains.score"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            score (float): The anomalousness score of the input instance.\n        \"\"\"", "\n", "X", "=", "self", ".", "streamhash", ".", "fit_transform_partial", "(", "X", ")", "\n", "X", "=", "X", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "score", "=", "self", ".", "hs_chains", ".", "score", "(", "X", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream.xStream._compute_deltamax": [[79, 88], ["pysad.utils.get_minmax_array", "numpy.concatenate", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.get_minmax_array"], ["", "def", "_compute_deltamax", "(", "self", ")", ":", "\n", "# mx = np.max(np.concatenate(self.ref_window, axis=0), axis=0)", "\n", "# mn = np.min(np.concatenate(self.ref_window, axis=0), axis=0)", "\n", "        ", "mn", ",", "mx", "=", "get_minmax_array", "(", "np", ".", "concatenate", "(", "self", ".", "ref_window", ",", "axis", "=", "0", ")", ")", "\n", "\n", "deltamax", "=", "(", "mx", "-", "mn", ")", "/", "2.0", "\n", "deltamax", "[", "np", ".", "abs", "(", "deltamax", ")", "<=", "0.0001", "]", "=", "1.0", "\n", "\n", "return", "deltamax", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._Chain.__init__": [[92, 105], ["len", "numpy.random.rand", "numpy.random.randint", "range", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "deltamax", ",", "depth", ")", ":", "\n", "        ", "k", "=", "len", "(", "deltamax", ")", "\n", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "fs", "=", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "k", ")", "for", "d", "in", "range", "(", "depth", ")", "]", "\n", "self", ".", "cmsketches", "=", "[", "{", "}", "for", "i", "in", "range", "(", "depth", ")", "]", "*", "depth", "\n", "self", ".", "cmsketches_cur", "=", "[", "{", "}", "for", "i", "in", "range", "(", "depth", ")", "]", "*", "depth", "\n", "\n", "self", ".", "deltamax", "=", "deltamax", "# feature ranges", "\n", "self", ".", "rand_arr", "=", "np", ".", "random", ".", "rand", "(", "k", ")", "\n", "self", ".", "shift", "=", "self", ".", "rand_arr", "*", "deltamax", "\n", "\n", "self", ".", "is_first_window", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._Chain.fit": [[106, 143], ["numpy.zeros", "numpy.zeros", "range", "len", "tuple", "tuple", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "prebins", "=", "np", ".", "zeros", "(", "X", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "depthcount", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "deltamax", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "depth", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "f", "=", "self", ".", "fs", "[", "depth", "]", "\n", "depthcount", "[", "f", "]", "+=", "1", "\n", "\n", "if", "depthcount", "[", "f", "]", "==", "1", ":", "\n", "                ", "prebins", "[", ":", ",", "f", "]", "=", "(", "X", "[", ":", ",", "f", "]", "+", "self", ".", "shift", "[", "f", "]", ")", "/", "self", ".", "deltamax", "[", "f", "]", "\n", "", "else", ":", "\n", "                ", "prebins", "[", ":", ",", "f", "]", "=", "2.0", "*", "prebins", "[", ":", ",", "f", "]", "-", "self", ".", "shift", "[", "f", "]", "/", "self", ".", "deltamax", "[", "f", "]", "\n", "\n", "", "if", "self", ".", "is_first_window", ":", "\n", "                ", "cmsketch", "=", "self", ".", "cmsketches", "[", "depth", "]", "\n", "for", "prebin", "in", "prebins", ":", "\n", "                    ", "l_index", "=", "tuple", "(", "np", ".", "floor", "(", "prebin", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "if", "l_index", "not", "in", "cmsketch", ":", "\n", "                        ", "cmsketch", "[", "l_index", "]", "=", "0", "\n", "", "cmsketch", "[", "l_index", "]", "+=", "1", "\n", "\n", "", "self", ".", "cmsketches", "[", "depth", "]", "=", "cmsketch", "\n", "\n", "self", ".", "cmsketches_cur", "[", "depth", "]", "=", "cmsketch", "\n", "\n", "", "else", ":", "\n", "                ", "cmsketch", "=", "self", ".", "cmsketches_cur", "[", "depth", "]", "\n", "\n", "for", "prebin", "in", "prebins", ":", "\n", "                    ", "l_index", "=", "tuple", "(", "np", ".", "floor", "(", "prebin", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "if", "l_index", "not", "in", "cmsketch", ":", "\n", "                        ", "cmsketch", "[", "l_index", "]", "=", "0", "\n", "", "cmsketch", "[", "l_index", "]", "+=", "1", "\n", "\n", "", "self", ".", "cmsketches_cur", "[", "depth", "]", "=", "cmsketch", "\n", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._Chain.bincount": [[144, 167], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "enumerate", "tuple", "numpy.floor().astype", "numpy.floor"], "methods", ["None"], ["", "def", "bincount", "(", "self", ",", "X", ")", ":", "\n", "        ", "scores", "=", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "depth", ")", ")", "\n", "prebins", "=", "np", ".", "zeros", "(", "X", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "depthcount", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "deltamax", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "depth", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "f", "=", "self", ".", "fs", "[", "depth", "]", "\n", "depthcount", "[", "f", "]", "+=", "1", "\n", "\n", "if", "depthcount", "[", "f", "]", "==", "1", ":", "\n", "                ", "prebins", "[", ":", ",", "f", "]", "=", "(", "X", "[", ":", ",", "f", "]", "+", "self", ".", "shift", "[", "f", "]", ")", "/", "self", ".", "deltamax", "[", "f", "]", "\n", "", "else", ":", "\n", "                ", "prebins", "[", ":", ",", "f", "]", "=", "2.0", "*", "prebins", "[", ":", ",", "f", "]", "-", "self", ".", "shift", "[", "f", "]", "/", "self", ".", "deltamax", "[", "f", "]", "\n", "\n", "", "cmsketch", "=", "self", ".", "cmsketches", "[", "depth", "]", "\n", "for", "i", ",", "prebin", "in", "enumerate", "(", "prebins", ")", ":", "\n", "                ", "l_index", "=", "tuple", "(", "np", ".", "floor", "(", "prebin", ")", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "if", "l_index", "not", "in", "cmsketch", ":", "\n", "                    ", "scores", "[", "i", ",", "depth", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                    ", "scores", "[", "i", ",", "depth", "]", "=", "cmsketch", "[", "l_index", "]", "\n", "\n", "", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._Chain.score": [[168, 175], ["xstream._Chain.bincount", "numpy.array", "numpy.log2", "numpy.min", "range"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._Chain.bincount"], ["", "def", "score", "(", "self", ",", "X", ")", ":", "\n", "# scale score logarithmically to avoid overflow:", "\n", "#    score = min_d [ log2(bincount x 2^d) = log2(bincount) + d ]", "\n", "        ", "scores", "=", "self", ".", "bincount", "(", "X", ")", "\n", "depths", "=", "np", ".", "array", "(", "[", "d", "for", "d", "in", "range", "(", "1", ",", "self", ".", "depth", "+", "1", ")", "]", ")", "\n", "scores", "=", "np", ".", "log2", "(", "1.0", "+", "scores", ")", "+", "depths", "# add 1 to avoid log(0)", "\n", "return", "-", "np", ".", "min", "(", "scores", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._Chain.next_window": [[176, 180], ["range"], "methods", ["None"], ["", "def", "next_window", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_first_window", "=", "False", "\n", "self", ".", "cmsketches", "=", "self", ".", "cmsketches_cur", "\n", "self", ".", "cmsketches_cur", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "depth", ")", "]", "*", "self", ".", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.__init__": [[183, 192], ["range", "xstream._Chain", "xstream._HSChains.chains.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "deltamax", ",", "n_chains", "=", "100", ",", "depth", "=", "25", ")", ":", "\n", "        ", "self", ".", "nchains", "=", "n_chains", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "chains", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nchains", ")", ":", "\n", "\n", "            ", "c", "=", "_Chain", "(", "deltamax", "=", "deltamax", ",", "depth", "=", "self", ".", "depth", ")", "\n", "self", ".", "chains", ".", "append", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.score": [[193, 200], ["numpy.zeros", "float", "ch.score"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score"], ["", "", "def", "score", "(", "self", ",", "X", ")", ":", "\n", "        ", "scores", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "for", "ch", "in", "self", ".", "chains", ":", "\n", "            ", "scores", "+=", "ch", ".", "score", "(", "X", ")", "\n", "\n", "", "scores", "/=", "float", "(", "self", ".", "nchains", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.fit": [[201, 204], ["ch.fit"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "for", "ch", "in", "self", ".", "chains", ":", "\n", "            ", "ch", ".", "fit", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.next_window": [[205, 208], ["ch.next_window"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.next_window"], ["", "", "def", "next_window", "(", "self", ")", ":", "\n", "        ", "for", "ch", "in", "self", ".", "chains", ":", "\n", "            ", "ch", ".", "next_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.xstream._HSChains.set_deltamax": [[209, 213], ["None"], "methods", ["None"], ["", "", "def", "set_deltamax", "(", "self", ",", "deltamax", ")", ":", "\n", "        ", "for", "ch", "in", "self", ".", "chains", ":", "\n", "            ", "ch", ".", "deltamax", "=", "deltamax", "\n", "ch", ".", "shift", "=", "ch", ".", "rand_arr", "*", "deltamax", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees.__init__": [[18, 47], ["len", "half_space_trees.HalfSpaceTrees._build_single_hs_tree", "half_space_trees.HalfSpaceTrees.fit", "copy.deepcopy", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._build_single_hs_tree", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit"], ["def", "__init__", "(", "\n", "self", ",", "\n", "feature_mins", ",", "\n", "feature_maxes", ",", "\n", "window_size", "=", "100", ",", "\n", "num_trees", "=", "25", ",", "\n", "max_depth", "=", "15", ",", "\n", "initial_window_X", "=", "None", ")", ":", "\n", "        ", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "num_trees", "=", "num_trees", "\n", "self", ".", "feature_maxes", "=", "feature_maxes", "\n", "self", ".", "feature_mins", "=", "feature_mins", "\n", "\n", "self", ".", "num_dimensions", "=", "len", "(", "self", ".", "feature_maxes", ")", "\n", "\n", "self", ".", "roots", "=", "[", "\n", "self", ".", "_build_single_hs_tree", "(", "\n", "copy", ".", "deepcopy", "(", "\n", "self", ".", "feature_mins", ")", ",", "\n", "copy", ".", "deepcopy", "(", "\n", "self", ".", "feature_maxes", ")", ",", "\n", "0", ")", "for", "_", "in", "range", "(", "\n", "self", ".", "num_trees", ")", "]", "\n", "\n", "self", ".", "is_first_window", "=", "True", "\n", "self", ".", "step", "=", "0", "\n", "if", "initial_window_X", ":", "\n", "            ", "self", ".", "fit", "(", "initial_window_X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._build_single_hs_tree": [[48, 83], ["numpy.random.randint", "half_space_trees.HalfSpaceTrees._build_single_hs_tree", "half_space_trees.HalfSpaceTrees._build_single_hs_tree", "half_space_trees.HalfSpaceTrees._Node", "half_space_trees.HalfSpaceTrees._Node", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._build_single_hs_tree", "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._build_single_hs_tree"], ["", "", "def", "_build_single_hs_tree", "(", "self", ",", "mins", ",", "maxes", ",", "current_depth", ")", ":", "\n", "        ", "if", "current_depth", "==", "self", ".", "max_depth", ":", "\n", "            ", "return", "self", ".", "_Node", "(", "\n", "left", "=", "None", ",", "\n", "right", "=", "None", ",", "\n", "r_mass", "=", "0", ",", "\n", "l_mass", "=", "0", ",", "\n", "split_att", "=", "0", ",", "\n", "split_value", "=", "0.0", ",", "\n", "k", "=", "current_depth", ")", "\n", "\n", "", "q", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_dimensions", ")", "\n", "p", "=", "(", "maxes", "[", "q", "]", "+", "mins", "[", "q", "]", ")", "/", "2.0", "\n", "\n", "temp", "=", "maxes", "[", "q", "]", "\n", "maxes", "[", "q", "]", "=", "p", "\n", "left", "=", "self", ".", "_build_single_hs_tree", "(", "\n", "copy", ".", "deepcopy", "(", "mins", ")", ",", "\n", "copy", ".", "deepcopy", "(", "maxes", ")", ",", "\n", "current_depth", "+", "1", ")", "\n", "maxes", "[", "q", "]", "=", "temp", "\n", "mins", "[", "q", "]", "=", "p", "\n", "right", "=", "self", ".", "_build_single_hs_tree", "(", "\n", "copy", ".", "deepcopy", "(", "mins", ")", ",", "\n", "copy", ".", "deepcopy", "(", "maxes", ")", ",", "\n", "current_depth", "+", "1", ")", "\n", "\n", "return", "self", ".", "_Node", "(", "\n", "left", "=", "left", ",", "\n", "right", "=", "right", ",", "\n", "r_mass", "=", "0", ",", "\n", "l_mass", "=", "0", ",", "\n", "split_att", "=", "q", ",", "\n", "split_value", "=", "p", ",", "\n", "k", "=", "current_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._update_mass": [[84, 95], ["half_space_trees.HalfSpaceTrees._update_mass"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._update_mass"], ["", "def", "_update_mass", "(", "self", ",", "x", ",", "node", ",", "ref_window", ")", ":", "\n", "        ", "if", "ref_window", ":", "\n", "            ", "node", ".", "r_mass", "+=", "1", "\n", "node", ".", "l_mass", "+=", "1", "# Does not exist in original since we want it to predict while building the first window", "\n", "", "else", ":", "\n", "            ", "node", ".", "l_mass", "+=", "1", "\n", "\n", "", "if", "node", ".", "k", "<", "self", ".", "max_depth", ":", "\n", "            ", "target_node", "=", "node", ".", "right", "if", "x", "[", "node", ".", "split_att", "]", ">", "node", ".", "split_value", "else", "node", ".", "left", "\n", "\n", "self", ".", "_update_mass", "(", "x", ",", "target_node", ",", "ref_window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._update_model": [[96, 107], ["half_space_trees.HalfSpaceTrees._update_model", "half_space_trees.HalfSpaceTrees._update_model"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._update_model", "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._update_model"], ["", "", "def", "_update_model", "(", "self", ",", "node", ")", ":", "\n", "\n", "        ", "if", "node", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "is_first_window", "=", "False", "\n", "node", ".", "r_mass", "=", "node", ".", "l_mass", "\n", "node", ".", "l_mass", "=", "0", "\n", "\n", "self", ".", "_update_model", "(", "node", ".", "left", ")", "\n", "self", ".", "_update_model", "(", "node", ".", "right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees.fit_partial": [[108, 128], ["half_space_trees.HalfSpaceTrees._update_mass", "half_space_trees.HalfSpaceTrees._update_model"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._update_mass", "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._update_model"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "self", ".", "step", "+=", "1", "\n", "\n", "for", "root", "in", "self", ".", "roots", ":", "\n", "            ", "self", ".", "_update_mass", "(", "X", ",", "root", ",", "self", ".", "is_first_window", ")", "\n", "\n", "", "if", "self", ".", "step", "%", "self", ".", "window_size", "==", "0", ":", "\n", "            ", "for", "root", "in", "self", ".", "roots", ":", "\n", "                ", "self", ".", "_update_model", "(", "root", ")", "\n", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._score_tree": [[129, 136], ["half_space_trees.HalfSpaceTrees._score_tree"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._score_tree"], ["", "def", "_score_tree", "(", "self", ",", "X", ",", "node", ")", ":", "\n", "        ", "if", "node", "is", "None", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "target_node", "=", "node", ".", "right", "if", "X", "[", "node", ".", "split_att", "]", ">", "node", ".", "split_value", "else", "node", ".", "left", "\n", "\n", "return", "node", ".", "r_mass", "*", "(", "2", "**", "node", ".", "k", ")", "+", "self", ".", "_score_tree", "(", "X", ",", "target_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees.score_partial": [[137, 152], ["half_space_trees.HalfSpaceTrees._score_tree"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.half_space_trees.HalfSpaceTrees._score_tree"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "s", "=", "0.0", "\n", "\n", "for", "root", "in", "self", ".", "roots", ":", "\n", "            ", "s", "+=", "self", ".", "_score_tree", "(", "X", ",", "root", ")", "\n", "\n", "", "return", "-", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.median_absolute_deviation.MedianAbsoluteDeviation.__init__": [[13, 18], ["pysad.statistics.median_meter.MedianMeter", "pysad.statistics.median_meter.MedianMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "absolute", "=", "True", ",", "b", "=", "1.4826", ")", ":", "\n", "        ", "self", ".", "b", "=", "b", "\n", "self", ".", "absolute", "=", "absolute", "\n", "self", ".", "median_meter", "=", "MedianMeter", "(", ")", "\n", "self", ".", "mad_meter", "=", "MedianMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.median_absolute_deviation.MedianAbsoluteDeviation.fit_partial": [[19, 35], ["median_absolute_deviation.MedianAbsoluteDeviation.median_meter.update", "median_absolute_deviation.MedianAbsoluteDeviation.mad_meter.update", "len"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (float): The instance to fit. Note that this model is univariate.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "assert", "len", "(", "X", ")", "==", "1", "# Only for time series", "\n", "\n", "self", ".", "median_meter", ".", "update", "(", "X", ")", "\n", "self", ".", "mad_meter", ".", "update", "(", "X", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.median_absolute_deviation.MedianAbsoluteDeviation.score_partial": [[36, 50], ["median_absolute_deviation.MedianAbsoluteDeviation.median_meter.get", "median_absolute_deviation.MedianAbsoluteDeviation.mad_meter.get", "abs"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (float): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances. Note that this model is univariate.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "median", "=", "self", ".", "median_meter", ".", "get", "(", ")", "\n", "mad", "=", "self", ".", "b", "*", "self", ".", "mad_meter", ".", "get", "(", ")", "\n", "score", "=", "(", "X", "-", "median", ")", "/", "(", "mad", "+", "1e-10", ")", "\n", "\n", "return", "abs", "(", "score", ")", "if", "self", ".", "absolute", "else", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.exact_storm.ExactStorm.__init__": [[17, 20], ["pysad.utils.window.Window"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "10000", ",", "max_radius", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "max_radius", "=", "max_radius", "\n", "self", ".", "window", "=", "Window", "(", "window_size", "=", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.exact_storm.ExactStorm.fit_partial": [[21, 34], ["exact_storm.ExactStorm.window.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance. Simply, adds the instance to the window.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "window", ".", "update", "(", "X", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.exact_storm.ExactStorm.score_partial": [[35, 51], ["scipy.spatial.distance.cdist", "numpy.mean", "exact_storm.ExactStorm.window.get", "len"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "window", "=", "self", ".", "window", ".", "get", "(", ")", "[", ":", "-", "1", "]", "\n", "if", "len", "(", "window", ")", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "dists", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "window", ",", "[", "X", "]", ")", "\n", "\n", "return", "np", ".", "mean", "(", "dists", "<", "self", ".", "max_radius", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.robust_random_cut_forest.RobustRandomCutForest.__init__": [[13, 26], ["range", "rrcf.RCTree", "robust_random_cut_forest.RobustRandomCutForest.forest.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_trees", "=", "4", ",", "shingle_size", "=", "4", ",", "tree_size", "=", "256", ")", ":", "\n", "        ", "from", "rrcf", "import", "rrcf", "\n", "\n", "self", ".", "tree_size", "=", "tree_size", "\n", "self", ".", "shingle_size", "=", "shingle_size", "\n", "self", ".", "num_trees", "=", "num_trees", "\n", "\n", "self", ".", "forest", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_trees", ")", ":", "\n", "            ", "tree", "=", "rrcf", ".", "RCTree", "(", ")", "\n", "self", ".", "forest", ".", "append", "(", "tree", ")", "\n", "\n", "", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.robust_random_cut_forest.RobustRandomCutForest.fit_partial": [[27, 46], ["tree.insert_point", "len", "tree.forget_point"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "for", "tree", "in", "self", ".", "forest", ":", "\n", "            ", "if", "len", "(", "tree", ".", "leaves", ")", ">", "self", ".", "tree_size", ":", "\n", "                ", "tree", ".", "forget_point", "(", "self", ".", "index", "-", "self", ".", "tree_size", ")", "\n", "\n", "", "tree", ".", "insert_point", "(", "X", ",", "index", "=", "self", ".", "index", ")", "\n", "\n", "", "self", ".", "index", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.robust_random_cut_forest.RobustRandomCutForest.score_partial": [[47, 68], ["tree.find_duplicate", "tree.insert_point", "tree.forget_point", "tree.codisp", "tree.codisp"], "methods", ["None"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "\n", "score", "=", "0.0", "\n", "for", "tree", "in", "self", ".", "forest", ":", "\n", "            ", "leaf", "=", "tree", ".", "find_duplicate", "(", "X", ")", "\n", "if", "leaf", "is", "None", ":", "\n", "                ", "tree", ".", "insert_point", "(", "X", ",", "index", "=", "\"test_point\"", ")", "\n", "score", "+=", "1.0", "*", "tree", ".", "codisp", "(", "\"test_point\"", ")", "/", "self", ".", "num_trees", "\n", "tree", ".", "forget_point", "(", "\"test_point\"", ")", "\n", "", "else", ":", "\n", "                ", "score", "+=", "1.0", "*", "tree", ".", "codisp", "(", "leaf", ")", "/", "self", ".", "num_trees", "\n", "\n", "", "", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.perfect_model.PerfectModel.__init__": [[8, 10], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.perfect_model.PerfectModel.fit_partial": [[11, 27], ["perfect_model.PerfectModel.labels.append", "ValueError"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fits the model to the ground truth label. Adds the label to the self.label queue.\n\n        Args:\n            X: any (Ignored)\n            y (int): The true label.\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "if", "y", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"y should be the true score\"", ")", "\n", "\n", "", "self", ".", "labels", ".", "append", "(", "y", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.perfect_model.PerfectModel.score_partial": [[28, 41], ["None"], "methods", ["None"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Pops the score from the self.label queue.\n\n        Args:\n            X: any (Ignored)\n\n        Returns:\n            float: The true label.\n        \"\"\"", "\n", "score", "=", "self", ".", "labels", "[", "0", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "1", ":", "]", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.rs_hash.RSHash.__init__": [[17, 51], ["len", "max", "numpy.random.uniform", "range", "rs_hash.RSHash._sample_dims", "rs_hash.RSHash._sample_shifts", "rs_hash.RSHash.cmsketches.append", "numpy.power", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.rs_hash.RSHash._sample_dims", "home.repos.pwc.inspect_result.selimfirat_pysad.models.rs_hash.RSHash._sample_shifts"], ["def", "__init__", "(", "\n", "self", ",", "\n", "feature_mins", ",", "\n", "feature_maxes", ",", "\n", "sampling_points", "=", "1000", ",", "\n", "decay", "=", "0.015", ",", "\n", "num_components", "=", "100", ",", "\n", "num_hash_fns", "=", "1", ")", ":", "\n", "        ", "self", ".", "minimum", "=", "feature_mins", "\n", "self", ".", "maximum", "=", "feature_maxes", "\n", "\n", "self", ".", "m", "=", "num_components", "\n", "self", ".", "w", "=", "num_hash_fns", "\n", "self", ".", "s", "=", "sampling_points", "\n", "self", ".", "dim", "=", "len", "(", "self", ".", "minimum", ")", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "scores", "=", "[", "]", "\n", "self", ".", "num_hash", "=", "num_hash_fns", "\n", "self", ".", "cmsketches", "=", "[", "]", "\n", "self", ".", "effS", "=", "max", "(", "1000", ",", "1.0", "/", "(", "1", "-", "np", ".", "power", "(", "2", ",", "-", "self", ".", "decay", ")", ")", ")", "\n", "\n", "self", ".", "f", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "1.0", "/", "np", ".", "sqrt", "(", "self", ".", "effS", ")", ",", "high", "=", "1", "-", "(", "1.0", "/", "np", ".", "sqrt", "(", "self", ".", "effS", ")", ")", ",", "size", "=", "self", ".", "m", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hash", ")", ":", "\n", "            ", "self", ".", "cmsketches", ".", "append", "(", "{", "}", ")", "\n", "\n", "", "self", ".", "_sample_dims", "(", ")", "\n", "\n", "self", ".", "alpha", "=", "self", ".", "_sample_shifts", "(", ")", "\n", "\n", "self", ".", "index", "=", "0", "+", "1", "-", "self", ".", "s", "\n", "\n", "self", ".", "last_score", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.rs_hash.RSHash.fit_partial": [[52, 97], ["range", "numpy.floor", "numpy.insert", "tuple", "range", "min", "numpy.log", "numpy.ones", "tuple.astype", "len", "numpy.log.append", "len", "range", "float", "numpy.power", "len", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "score_instance", "=", "0", "\n", "for", "r", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "            ", "Y", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "V", "[", "r", "]", ")", ")", "\n", "Y", "[", "range", "(", "len", "(", "self", ".", "V", "[", "r", "]", ")", ")", "]", "=", "np", ".", "floor", "(", "\n", "(", "X", "[", "np", ".", "array", "(", "self", ".", "V", "[", "r", "]", ")", "]", "+", "np", ".", "array", "(", "self", ".", "alpha", "[", "r", "]", ")", ")", "/", "float", "(", "self", ".", "f", "[", "r", "]", ")", ")", "\n", "\n", "mod_entry", "=", "np", ".", "insert", "(", "Y", ",", "0", ",", "r", ")", "\n", "mod_entry", "=", "tuple", "(", "mod_entry", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "\n", "c", "=", "[", "]", "\n", "for", "w", "in", "range", "(", "len", "(", "self", ".", "cmsketches", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "value", "=", "self", ".", "cmsketches", "[", "w", "]", "[", "mod_entry", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "value", "=", "(", "self", ".", "index", ",", "0", ")", "\n", "\n", "# Scoring the Instance", "\n", "", "tstamp", "=", "value", "[", "0", "]", "\n", "wt", "=", "value", "[", "1", "]", "\n", "new_wt", "=", "wt", "*", "np", ".", "power", "(", "2", ",", "-", "self", ".", "decay", "*", "(", "self", ".", "index", "-", "tstamp", ")", ")", "\n", "c", ".", "append", "(", "new_wt", ")", "\n", "\n", "# Update the instance", "\n", "new_tstamp", "=", "self", ".", "index", "\n", "self", ".", "cmsketches", "[", "w", "]", "[", "mod_entry", "]", "=", "(", "new_tstamp", ",", "new_wt", "+", "1", ")", "\n", "\n", "", "min_c", "=", "min", "(", "c", ")", "\n", "c", "=", "np", ".", "log", "(", "1", "+", "min_c", ")", "\n", "score_instance", "=", "score_instance", "+", "c", "\n", "\n", "", "self", ".", "last_score", "=", "score_instance", "/", "self", ".", "m", "\n", "\n", "self", ".", "index", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.rs_hash.RSHash.score_partial": [[98, 107], ["None"], "methods", ["None"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance. Outputs the last score. Note that this method must be called after the fit_partial\n\n        Args:\n            X (any): Ignored.\n        Returns:\n            float: The anomalousness score of the last fitted instance.\n        \"\"\"", "\n", "return", "self", ".", "last_score", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.rs_hash.RSHash._sample_shifts": [[108, 118], ["range", "alpha.append", "numpy.random.uniform", "len"], "methods", ["None"], ["", "def", "_sample_shifts", "(", "self", ")", ":", "\n", "        ", "alpha", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "            ", "alpha", ".", "append", "(", "\n", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "self", ".", "f", "[", "r", "]", ",", "\n", "size", "=", "len", "(", "self", ".", "V", "[", "r", "]", ")", ")", ")", "\n", "\n", "", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.rs_hash.RSHash._sample_dims": [[119, 142], ["numpy.max", "numpy.empty", "range", "numpy.log", "numpy.log", "numpy.array", "numpy.random.choice", "rs_hash.RSHash.V.append", "list", "numpy.floor", "numpy.floor", "min", "list", "numpy.ones", "numpy.random.randint", "range", "numpy.where"], "methods", ["None"], ["", "def", "_sample_dims", "(", "self", ")", ":", "\n", "        ", "max_term", "=", "np", ".", "max", "(", "(", "2", "*", "np", ".", "ones", "(", "self", ".", "f", ".", "size", ")", ",", "list", "(", "1.0", "/", "self", ".", "f", ")", ")", ",", "axis", "=", "0", ")", "\n", "common_term", "=", "np", ".", "log", "(", "self", ".", "effS", ")", "/", "np", ".", "log", "(", "max_term", ")", "\n", "low_value", "=", "1", "+", "0.5", "*", "common_term", "\n", "high_value", "=", "common_term", "\n", "\n", "self", ".", "r", "=", "np", ".", "empty", "(", "[", "self", ".", "m", ",", "]", ",", "dtype", "=", "int", ")", "\n", "self", ".", "V", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "            ", "if", "np", ".", "floor", "(", "low_value", "[", "i", "]", ")", "==", "np", ".", "floor", "(", "high_value", "[", "i", "]", ")", ":", "\n", "                ", "self", ".", "r", "[", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "r", "[", "i", "]", "=", "min", "(", "\n", "np", ".", "random", ".", "randint", "(", "\n", "low", "=", "low_value", "[", "i", "]", ",", "\n", "high", "=", "high_value", "[", "i", "]", ")", ",", "\n", "self", ".", "dim", ")", "\n", "", "all_feats", "=", "np", ".", "array", "(", "list", "(", "range", "(", "self", ".", "dim", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "choice_feats", "=", "all_feats", "[", "np", ".", "where", "(", "self", ".", "minimum", "!=", "self", ".", "maximum", ")", "]", "\n", "sel_V", "=", "np", ".", "random", ".", "choice", "(", "\n", "choice_feats", ",", "size", "=", "self", ".", "r", "[", "i", "]", ",", "replace", "=", "False", ")", "\n", "self", ".", "V", ".", "append", "(", "sel_V", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.loop.LocalOutlierProbability.__init__": [[14, 19], ["loop.LocalOutlierProbability().fit", "loop.LocalOutlierProbability"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit"], ["def", "__init__", "(", "self", ",", "initial_X", ",", "num_neighbors", "=", "10", ",", "extent", "=", "3", ")", ":", "\n", "        ", "from", "PyNomaly", "import", "loop", "\n", "\n", "self", ".", "model", "=", "loop", ".", "LocalOutlierProbability", "(", "\n", "initial_X", ",", "extent", "=", "extent", ",", "n_neighbors", "=", "num_neighbors", ")", ".", "fit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.loop.LocalOutlierProbability.fit_partial": [[20, 31], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.loop.LocalOutlierProbability.score_partial": [[32, 42], ["loop.LocalOutlierProbability.model.stream"], "methods", ["None"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "return", "self", ".", "model", ".", "stream", "(", "X", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.standard_absolute_deviation.StandardAbsoluteDeviation.__init__": [[14, 25], ["pysad.statistics.variance_meter.VarianceMeter", "pysad.statistics.median_meter.MedianMeter", "pysad.statistics.average_meter.AverageMeter", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "substracted_statistic", "=", "\"mean\"", ",", "absolute", "=", "True", ")", ":", "\n", "        ", "self", ".", "absolute", "=", "absolute", "\n", "self", ".", "variance_meter", "=", "VarianceMeter", "(", ")", "\n", "\n", "if", "substracted_statistic", "==", "\"median\"", ":", "\n", "            ", "self", ".", "sub_meter", "=", "MedianMeter", "(", ")", "\n", "", "elif", "substracted_statistic", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "sub_meter", "=", "AverageMeter", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Unknown substracted_statistic value! Please choose median or mean.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.standard_absolute_deviation.StandardAbsoluteDeviation.fit_partial": [[26, 42], ["standard_absolute_deviation.StandardAbsoluteDeviation.variance_meter.update", "standard_absolute_deviation.StandardAbsoluteDeviation.sub_meter.update", "len"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (1,)): The instance to fit. Note that this model is univariate.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "assert", "len", "(", "X", ")", "==", "1", "# Only for time series", "\n", "\n", "self", ".", "variance_meter", ".", "update", "(", "X", ")", "\n", "self", ".", "sub_meter", ".", "update", "(", "X", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.standard_absolute_deviation.StandardAbsoluteDeviation.score_partial": [[43, 58], ["standard_absolute_deviation.StandardAbsoluteDeviation.sub_meter.get", "standard_absolute_deviation.StandardAbsoluteDeviation.variance_meter.get", "abs"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (1,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "sub", "=", "self", ".", "sub_meter", ".", "get", "(", ")", "\n", "dev", "=", "self", ".", "variance_meter", ".", "get", "(", ")", "**", "0.5", "\n", "\n", "score", "=", "(", "X", "-", "sub", ")", "/", "(", "dev", "+", "1e-10", ")", "\n", "\n", "return", "abs", "(", "score", ")", "if", "self", ".", "absolute", "else", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.random_model.RandomModel.fit_partial": [[10, 21], ["None"], "methods", ["None"], ["def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"This method is ignored. Added for convenience.\n\n        Args:\n            X: any\n            y: any\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.random_model.RandomModel.score_partial": [[22, 32], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Randomly outputs a score from the uniform distribution.\n\n        Args:\n            X: any (Ignored)\n\n        Returns:\n            float: Uniform random between [0,1).\n        \"\"\"", "\n", "return", "np", ".", "random", ".", "uniform", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.kitnet.KitNet.__init__": [[17, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "max_size_ae", "=", "10", ",", "\n", "grace_feature_mapping", "=", "None", ",", "\n", "grace_anomaly_detector", "=", "50000", ",", "\n", "learning_rate", "=", "0.1", ",", "\n", "hidden_ratio", "=", "0.75", ")", ":", "\n", "\n", "        ", "self", ".", "grace_feature_mapping", "=", "grace_feature_mapping", "\n", "self", ".", "hidden_ratio", "=", "hidden_ratio", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "max_size_ae", "=", "max_size_ae", "\n", "self", ".", "grace_anomaly_detector", "=", "grace_anomaly_detector", "\n", "self", ".", "to_init", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.kitnet.KitNet.fit_partial": [[32, 55], ["kitnet.KitNet.model.process", "pysad.models.kitnet_model.KitNET.KitNET"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.process"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance. Simply, adds the instance to the window.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "if", "self", ".", "to_init", ":", "\n", "            ", "self", ".", "num_features", "=", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "model", "=", "kit", ".", "KitNET", "(", "\n", "self", ".", "num_features", ",", "\n", "self", ".", "max_size_ae", ",", "\n", "self", ".", "grace_feature_mapping", ",", "\n", "self", ".", "grace_anomaly_detector", ",", "\n", "self", ".", "learning_rate", ",", "\n", "self", ".", "hidden_ratio", ")", "\n", "self", ".", "to_init", "=", "False", "\n", "", "self", ".", "model", ".", "process", "(", "X", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.kitnet.KitNet.score_partial": [[56, 71], ["kitnet.KitNet.model.execute"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.execute"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "if", "self", ".", "model", ".", "v", "is", "None", ":", "\n", "# The feature map is not discovered (i.e., still the grace period),", "\n", "# thus, KitNet gives an error.", "\n", "            ", "return", "0.0", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", ".", "execute", "(", "X", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.null_model.NullModel.__init__": [[8, 10], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.null_model.NullModel.fit_partial": [[11, 22], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"This method is ignored. Added for convenience.\n\n        Args:\n            X: any\n            y: any\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.null_model.NullModel.score_partial": [[23, 33], ["None"], "methods", ["None"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Directly returns 0.5.\n\n        Args:\n            X: any (Ignored)\n\n        Returns:\n            float: Equal to `0.5`.\n        \"\"\"", "\n", "return", "0.5", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.loda.LODA.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_bins", "=", "10", ",", "num_random_cuts", "=", "100", ")", ":", "\n", "        ", "self", ".", "to_init", "=", "True", "\n", "self", ".", "n_bins", "=", "num_bins", "\n", "self", ".", "n_random_cuts", "=", "num_random_cuts", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.loda.LODA.fit_partial": [[18, 57], ["X.reshape.reshape.reshape", "range", "numpy.random.randn", "numpy.zeros", "numpy.zeros", "numpy.sqrt", "loda.LODA.projections_[].dot", "numpy.histogram", "numpy.sum", "numpy.ones", "numpy.int", "numpy.random.permutation"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "if", "self", ".", "to_init", ":", "\n", "            ", "self", ".", "num_features", "=", "X", ".", "shape", "[", "0", "]", "\n", "self", ".", "weights", "=", "np", ".", "ones", "(", "\n", "self", ".", "n_random_cuts", ",", "\n", "dtype", "=", "np", ".", "float", ")", "/", "self", ".", "n_random_cuts", "\n", "self", ".", "projections_", "=", "np", ".", "random", ".", "randn", "(", "\n", "self", ".", "n_random_cuts", ",", "self", ".", "num_features", ")", "\n", "self", ".", "histograms_", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_random_cuts", ",", "self", ".", "n_bins", ")", ")", "\n", "self", ".", "limits_", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_random_cuts", ",", "self", ".", "n_bins", "+", "1", ")", ")", "\n", "\n", "n_nonzero_components", "=", "np", ".", "sqrt", "(", "self", ".", "num_features", ")", "\n", "self", ".", "n_zero_components", "=", "self", ".", "num_features", "-", "np", ".", "int", "(", "n_nonzero_components", ")", "\n", "\n", "self", ".", "to_init", "=", "False", "\n", "\n", "", "X", "=", "X", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_random_cuts", ")", ":", "\n", "            ", "rands", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_features", ")", "[", "\n", ":", "self", ".", "n_zero_components", "]", "\n", "self", ".", "projections_", "[", "i", ",", "rands", "]", "=", "0.", "\n", "projected_data", "=", "self", ".", "projections_", "[", "i", ",", ":", "]", ".", "dot", "(", "X", ".", "T", ")", "\n", "self", ".", "histograms_", "[", "i", ",", ":", "]", ",", "self", ".", "limits_", "[", "i", ",", ":", "]", "=", "np", ".", "histogram", "(", "\n", "projected_data", ",", "bins", "=", "self", ".", "n_bins", ",", "density", "=", "False", ")", "\n", "self", ".", "histograms_", "[", "i", ",", ":", "]", "+=", "1e-12", "\n", "self", ".", "histograms_", "[", "i", ",", ":", "]", "/=", "np", ".", "sum", "(", "self", ".", "histograms_", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.loda.LODA.score_partial": [[58, 79], ["X.reshape.reshape.reshape", "numpy.zeros", "range", "numpy.zeros.ravel", "loda.LODA.projections_[].dot", "numpy.searchsorted", "numpy.log"], "methods", ["None"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "X", "=", "X", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "pred_scores", "=", "np", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_random_cuts", ")", ":", "\n", "            ", "projected_data", "=", "self", ".", "projections_", "[", "i", ",", ":", "]", ".", "dot", "(", "X", ".", "T", ")", "\n", "inds", "=", "np", ".", "searchsorted", "(", "self", ".", "limits_", "[", "i", ",", ":", "self", ".", "n_bins", "-", "1", "]", ",", "\n", "projected_data", ",", "side", "=", "'left'", ")", "\n", "pred_scores", "[", ":", ",", "0", "]", "+=", "-", "self", ".", "weights", "[", "i", "]", "*", "np", ".", "log", "(", "\n", "self", ".", "histograms_", "[", "i", ",", "inds", "]", ")", "\n", "", "pred_scores", "/=", "self", ".", "n_random_cuts", "\n", "\n", "return", "pred_scores", ".", "ravel", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.iforest_asd.IForestASD.__init__": [[13, 15], ["pysad.models.integrations.reference_window_model.ReferenceWindowModel.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ",", "initial_window_X", "=", "None", ",", "window_size", "=", "2048", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "IForest", ",", "window_size", ",", "window_size", ",", "initial_window_X", ")", "\n", "# TODO: implement concept drift method", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.relative_entropy.RelativeEntropy.__init__": [[17, 49], ["scipy.stats.chi2.isf"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "min_val", ",", "max_val", ",", "num_bins", "=", "5", ",", "window_size", "=", "52", ")", ":", "\n", "        ", "self", ".", "min_val", "=", "min_val", "\n", "self", ".", "max_val", "=", "max_val", "\n", "\n", "# Timeseries of the metric on which anomaly needs to be detected", "\n", "self", ".", "util", "=", "[", "]", "\n", "\n", "# Number of bins into which util is to be quantized", "\n", "self", ".", "N_bins", "=", "num_bins", "\n", "\n", "# Window size", "\n", "self", ".", "W", "=", "window_size", "\n", "\n", "# Threshold against which the test statistic is compared. It is set to", "\n", "# the point in the chi-squared cdf with N-bins -1 degrees of freedom that", "\n", "#  corresponds to 0.99.", "\n", "self", ".", "T", "=", "stats", ".", "chi2", ".", "isf", "(", "0.01", ",", "self", ".", "N_bins", "-", "1", ")", "\n", "\n", "# Tracks the current number of null hypothesis", "\n", "self", ".", "m", "=", "0", "\n", "\n", "# Step size in time series quantization", "\n", "self", ".", "stepSize", "=", "(", "max_val", "-", "min_val", ")", "/", "self", ".", "N_bins", "\n", "\n", "# List of lists where P[i] indicates the empirical frequency of the ith", "\n", "# hypothesis.", "\n", "self", ".", "P", "=", "[", "]", "\n", "\n", "# List where c[i] tracks the number of windows that agree with P[i]", "\n", "self", ".", "c", "=", "[", "]", "\n", "\n", "self", ".", "P_hat", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.relative_entropy.RelativeEntropy.fit_partial": [[50, 83], ["relative_entropy.RelativeEntropy.util.append", "len", "math.ceil", "numpy.histogram", "relative_entropy.RelativeEntropy.P.append", "relative_entropy.RelativeEntropy.c.append"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (float): The instance to fit. Note that this model is univariate.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "self", ".", "util", ".", "append", "(", "X", ")", "\n", "if", "len", "(", "self", ".", "util", ")", ">=", "self", ".", "W", ":", "\n", "\n", "# Extracting current window", "\n", "            ", "util_current", "=", "self", ".", "util", "[", "-", "self", ".", "W", ":", "]", "\n", "\n", "# Quantize window data points into discretized bin values", "\n", "B_current", "=", "[", "math", ".", "ceil", "(", "(", "c", "-", "self", ".", "min_val", ")", "/", "self", ".", "stepSize", ")", "for", "c", "in", "\n", "util_current", "]", "\n", "\n", "# Create a histogram of empirical frequencies for the current window", "\n", "# using B_current", "\n", "self", ".", "P_hat", "=", "np", ".", "histogram", "(", "B_current", ",", "\n", "bins", "=", "self", ".", "N_bins", ",", "\n", "range", "=", "(", "0", ",", "self", ".", "N_bins", ")", ",", "\n", "density", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "m", "==", "0", ":", "\n", "                ", "self", ".", "P", ".", "append", "(", "self", ".", "P_hat", ")", "\n", "self", ".", "c", ".", "append", "(", "1", ")", "\n", "self", ".", "m", "=", "1", "\n", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.relative_entropy.RelativeEntropy.score_partial": [[84, 99], ["relative_entropy.RelativeEntropy._get_aggreement_hypothesis", "len"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.relative_entropy.RelativeEntropy._get_aggreement_hypothesis"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance. Note that this method should be called after the fit_partial method.\n\n        Args:\n            X (any): (Ignored) The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "score", "=", "0.0", "\n", "\n", "if", "len", "(", "self", ".", "util", ")", ">=", "self", ".", "W", "and", "self", ".", "m", ">", "0", "and", "self", ".", "P_hat", "is", "not", "None", ":", "\n", "            ", "score", "=", "self", ".", "_get_aggreement_hypothesis", "(", "self", ".", "P_hat", ")", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.relative_entropy.RelativeEntropy._get_aggreement_hypothesis": [[100, 124], ["float", "range", "scipy.stats.entropy"], "methods", ["None"], ["", "def", "_get_aggreement_hypothesis", "(", "self", ",", "P_hat", ")", ":", "\n", "        ", "\"\"\"This function computes multinomial goodness-of-fit test. It calculates\n        the relative entropy test statistic between P_hat and all `m` null\n        hypothesis and compares it against the threshold `T` based on cdf of\n        chi-squared distribution. The test relies on the observation that if the\n        null hypothesis P is true, then as the number of samples grow the relative\n        entropy converges to a chi-squared distribution1 with K-1 degrees of\n        freedom.\n        The function returns the index of hypothesis that agrees with minimum\n        relative entropy. If all hypotheses disagree, the function returns -1.\n        @param P_hat    (list)  Empirical frequencies of the current window.\n        @return index   (int)   Index of the hypothesis with the minimum test\n                                statistic.\n        \"\"\"", "\n", "\n", "index", "=", "-", "1", "\n", "minEntropy", "=", "float", "(", "\"inf\"", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "            ", "entropy", "=", "2", "*", "self", ".", "W", "*", "stats", ".", "entropy", "(", "P_hat", ",", "self", ".", "P", "[", "i", "]", ")", "\n", "if", "entropy", "<", "self", ".", "T", "and", "entropy", "<", "minEntropy", ":", "\n", "                ", "minEntropy", "=", "entropy", "\n", "index", "=", "i", "\n", "\n", "", "", "return", "index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD.__init__": [[12, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probationary_period", ")", ":", "\n", "        ", "self", ".", "buf", "=", "[", "]", "\n", "self", ".", "training", "=", "[", "]", "\n", "self", ".", "calibration", "=", "[", "]", "\n", "self", ".", "scores", "=", "[", "]", "\n", "self", ".", "record_count", "=", "0", "\n", "self", ".", "pred", "=", "-", "1", "\n", "self", ".", "k", "=", "27", "\n", "self", ".", "to_init", "=", "True", "\n", "\n", "self", ".", "probationaryPeriod", "=", "probationary_period", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD._metric": [[24, 28], ["numpy.dot", "numpy.array", "numpy.dot"], "methods", ["None"], ["", "def", "_metric", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "diff", "=", "a", "-", "np", ".", "array", "(", "b", ")", "\n", "\n", "return", "np", ".", "dot", "(", "np", ".", "dot", "(", "diff", ",", "self", ".", "sigma", ")", ",", "diff", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD._ncm": [[29, 33], ["numpy.sum", "knn_cad.KNNCAD._metric", "numpy.partition"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD._metric"], ["", "def", "_ncm", "(", "self", ",", "item", ",", "item_in_array", "=", "False", ")", ":", "\n", "        ", "arr", "=", "[", "self", ".", "_metric", "(", "x", ",", "item", ")", "for", "x", "in", "self", ".", "training", "]", "\n", "\n", "return", "np", ".", "sum", "(", "np", ".", "partition", "(", "arr", ",", "self", ".", "k", "+", "item_in_array", ")", "[", ":", "self", ".", "k", "+", "item_in_array", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD.fit_partial": [[34, 80], ["knn_cad.KNNCAD.buf.append", "numpy.diag", "len", "knn_cad.KNNCAD.training.append", "knn_cad.KNNCAD._ncm", "knn_cad.KNNCAD.scores.pop", "knn_cad.KNNCAD.calibration.append", "knn_cad.KNNCAD.scores.append", "numpy.ones", "len", "knn_cad.KNNCAD.training.pop", "knn_cad.KNNCAD.training.append", "int", "numpy.linalg.inv", "knn_cad.KNNCAD._ncm", "knn_cad.KNNCAD.calibration.pop", "numpy.dot", "print", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD._ncm", "home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD._ncm"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance. Note that this model is univariate.\n\n        Args:\n            X (np.float array of shape (1,)): The instance to fit.\n            y (int): Ignored since the model is unsupervised (Default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "if", "self", ".", "to_init", ":", "\n", "            ", "self", ".", "dim", "=", "19", "# X.shape[0]", "\n", "self", ".", "sigma", "=", "np", ".", "diag", "(", "np", ".", "ones", "(", "self", ".", "dim", ")", ")", "\n", "self", ".", "to_init", "=", "False", "\n", "\n", "", "self", ".", "buf", ".", "append", "(", "X", "[", "0", "]", ")", "\n", "self", ".", "record_count", "+=", "1", "\n", "if", "len", "(", "self", ".", "buf", ")", "<", "self", ".", "dim", ":", "\n", "            ", "return", "self", "\n", "\n", "", "new_item", "=", "self", ".", "buf", "[", "-", "self", ".", "dim", ":", "]", "\n", "\n", "if", "self", ".", "record_count", "<", "self", ".", "probationaryPeriod", ":", "\n", "            ", "self", ".", "training", ".", "append", "(", "new_item", ")", "\n", "", "else", ":", "\n", "            ", "ost", "=", "self", ".", "record_count", "%", "self", ".", "probationaryPeriod", "\n", "if", "ost", "==", "0", "or", "ost", "==", "int", "(", "self", ".", "probationaryPeriod", "/", "2", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "sigma", "=", "np", ".", "linalg", ".", "inv", "(", "\n", "np", ".", "dot", "(", "np", ".", "array", "(", "self", ".", "training", ")", ".", "T", ",", "self", ".", "training", ")", ")", "\n", "", "except", "np", ".", "linalg", ".", "linalg", ".", "LinAlgError", ":", "\n", "                    ", "print", "(", "'Singular Matrix at record'", ",", "self", ".", "record_count", ")", "\n", "", "", "if", "len", "(", "self", ".", "scores", ")", "==", "0", ":", "\n", "                ", "self", ".", "scores", "=", "[", "self", ".", "_ncm", "(", "v", ",", "True", ")", "for", "v", "in", "self", ".", "training", "]", "\n", "\n", "", "new_score", "=", "self", ".", "_ncm", "(", "new_item", ")", "\n", "\n", "if", "self", ".", "record_count", ">=", "2", "*", "self", ".", "probationaryPeriod", ":", "\n", "                ", "self", ".", "training", ".", "pop", "(", "0", ")", "\n", "self", ".", "training", ".", "append", "(", "self", ".", "calibration", ".", "pop", "(", "0", ")", ")", "\n", "\n", "", "self", ".", "scores", ".", "pop", "(", "0", ")", "\n", "self", ".", "calibration", ".", "append", "(", "new_item", ")", "\n", "self", ".", "scores", ".", "append", "(", "new_score", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD.score_partial": [[81, 105], ["knn_cad.KNNCAD._ncm", "len", "len", "len", "int", "numpy.where", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.models.knn_cad.KNNCAD._ncm"], ["", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (1,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "buf", ")", "<", "self", ".", "dim", "or", "self", ".", "record_count", "<", "self", ".", "probationaryPeriod", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "new_item", "=", "self", ".", "buf", "[", "-", "self", ".", "dim", ":", "]", "\n", "\n", "new_score", "=", "self", ".", "_ncm", "(", "new_item", ")", "\n", "result", "=", "1.", "*", "len", "(", "np", ".", "where", "(", "np", ".", "array", "(", "self", ".", "scores", ")", "<", "new_score", ")", "[", "0", "]", ")", "/", "len", "(", "self", ".", "scores", ")", "\n", "\n", "if", "self", ".", "pred", ">", "0", ":", "\n", "            ", "self", ".", "pred", "-=", "1", "\n", "return", "0.5", "\n", "", "elif", "result", ">=", "0.9965", ":", "\n", "            ", "self", ".", "pred", "=", "int", "(", "self", ".", "probationaryPeriod", "/", "5", ")", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_models.test_unsupervised_models": [[3, 49], ["fix_seed", "np.random.rand", "model_classes.items", "type", "test_models.helper_test_model", "type", "test_models.helper_test_model"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_models.helper_test_model", "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_models.helper_test_model"], ["def", "test_unsupervised_models", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "models", "import", "RobustRandomCutForest", "\n", "from", "pysad", ".", "models", "import", "ExactStorm", "\n", "from", "pysad", ".", "models", "import", "HalfSpaceTrees", "\n", "from", "pysad", ".", "models", "import", "IForestASD", "\n", "from", "pysad", ".", "models", "import", "KitNet", "\n", "from", "pysad", ".", "models", "import", "KNNCAD", "\n", "from", "pysad", ".", "models", "import", "LODA", "\n", "from", "pysad", ".", "models", "import", "LocalOutlierProbability", "\n", "from", "pysad", ".", "models", "import", "MedianAbsoluteDeviation", "\n", "from", "pysad", ".", "models", "import", "NullModel", "\n", "from", "pysad", ".", "models", "import", "RandomModel", "\n", "from", "pysad", ".", "models", "import", "RelativeEntropy", "\n", "from", "pysad", ".", "models", "import", "RSHash", "\n", "from", "pysad", ".", "models", "import", "StandardAbsoluteDeviation", "\n", "from", "pysad", ".", "models", "import", "xStream", "\n", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "X", "=", "np", ".", "random", ".", "rand", "(", "150", ",", "1", ")", "\n", "\n", "model_classes", "=", "{", "\n", "ExactStorm", ":", "{", "}", ",", "\n", "HalfSpaceTrees", ":", "{", "\"feature_mins\"", ":", "[", "0.0", "]", ",", "\"feature_maxes\"", ":", "[", "1.0", "]", "}", ",", "\n", "IForestASD", ":", "{", "}", ",", "\n", "KitNet", ":", "{", "}", ",", "\n", "KNNCAD", ":", "{", "\"probationary_period\"", ":", "50", "}", ",", "\n", "LODA", ":", "{", "}", ",", "\n", "LocalOutlierProbability", ":", "{", "\"initial_X\"", ":", "True", "}", ",", "\n", "MedianAbsoluteDeviation", ":", "[", "{", "}", ",", "{", "\"absolute\"", ":", "False", "}", "]", ",", "\n", "NullModel", ":", "{", "}", ",", "\n", "RandomModel", ":", "{", "}", ",", "\n", "RelativeEntropy", ":", "{", "\"min_val\"", ":", "0.0", ",", "\"max_val\"", ":", "1.0", "}", ",", "\n", "RSHash", ":", "{", "\"feature_mins\"", ":", "[", "0.0", "]", ",", "\"feature_maxes\"", ":", "[", "1.0", "]", "}", ",", "\n", "StandardAbsoluteDeviation", ":", "[", "{", "}", ",", "{", "\"absolute\"", ":", "False", "}", "]", ",", "\n", "xStream", ":", "{", "}", ",", "\n", "RobustRandomCutForest", ":", "{", "}", "\n", "}", "\n", "\n", "for", "model_cls", ",", "params_dict", "in", "model_classes", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "params_dict", ")", "is", "dict", ":", "\n", "            ", "helper_test_model", "(", "X", ",", "model_cls", ",", "params_dict", ")", "\n", "", "elif", "type", "(", "params_dict", ")", "is", "list", ":", "\n", "            ", "for", "params", "in", "params_dict", ":", "\n", "                ", "helper_test_model", "(", "X", ",", "model_cls", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_models.helper_test_model": [[51, 63], ["model_cls.fit_score", "model_cls", "model_cls"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_score"], ["", "", "", "", "def", "helper_test_model", "(", "X", ",", "model_cls", ",", "params_dict", ")", ":", "\n", "\n", "    ", "if", "\"initial_X\"", "in", "params_dict", "and", "params_dict", "[", "\"initial_X\"", "]", ":", "\n", "        ", "params_dict", "[", "\"initial_X\"", "]", "=", "X", "[", ":", "25", ",", ":", "]", "\n", "model", "=", "model_cls", "(", "params_dict", "[", "\"initial_X\"", "]", ")", "\n", "train_X", "=", "X", "[", "25", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "train_X", "=", "X", "\n", "model", "=", "model_cls", "(", "**", "params_dict", ")", "\n", "\n", "", "y_pred", "=", "model", ".", "fit_score", "(", "train_X", ")", "\n", "assert", "y_pred", ".", "shape", "==", "(", "train_X", ".", "shape", "[", "0", "]", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_models.test_fit_and_score_separately": [[65, 78], ["fix_seed", "np.random.rand", "xStream", "model.fit.fit", "model.fit.score"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score"], ["", "def", "test_fit_and_score_separately", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "models", "import", "xStream", "\n", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "X", "=", "np", ".", "random", ".", "rand", "(", "150", ",", "1", ")", "\n", "\n", "model", "=", "xStream", "(", ")", "\n", "\n", "model", "=", "model", ".", "fit", "(", "X", ")", "\n", "y_pred", "=", "model", ".", "score", "(", "X", ")", "\n", "assert", "y_pred", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_standard_absolute_deviation.test_standard_absolute_deviation": [[2, 26], ["fix_seed", "np.random.rand", "StandardAbsoluteDeviation", "model.fit.fit", "model.fit.score", "StandardAbsoluteDeviation", "model.fit.fit", "model.fit.score", "assert_raises", "StandardAbsoluteDeviation", "assert_raises", "StandardAbsoluteDeviation"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score"], ["def", "test_standard_absolute_deviation", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "models", "import", "StandardAbsoluteDeviation", "\n", "import", "numpy", "as", "np", "\n", "from", "numpy", ".", "testing", "import", "assert_raises", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "\n", "fix_seed", "(", "61", ")", "\n", "X", "=", "np", ".", "random", ".", "rand", "(", "150", ",", "1", ")", "\n", "\n", "model", "=", "StandardAbsoluteDeviation", "(", "substracted_statistic", "=", "\"mean\"", ")", "\n", "model", "=", "model", ".", "fit", "(", "X", ")", "\n", "y_pred", "=", "model", ".", "score", "(", "X", ")", "\n", "assert", "y_pred", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", ")", "\n", "\n", "model", "=", "StandardAbsoluteDeviation", "(", "substracted_statistic", "=", "\"median\"", ")", "\n", "model", "=", "model", ".", "fit", "(", "X", ")", "\n", "y_pred", "=", "model", ".", "score", "(", "X", ")", "\n", "assert", "y_pred", ".", "shape", "==", "(", "X", ".", "shape", "[", "0", "]", ",", ")", "\n", "\n", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "        ", "StandardAbsoluteDeviation", "(", "substracted_statistic", "=", "\"asd\"", ")", "\n", "\n", "", "with", "assert_raises", "(", "ValueError", ")", ":", "\n", "        ", "StandardAbsoluteDeviation", "(", "substracted_statistic", "=", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_perfect_model.test_perfect_model": [[1, 15], ["fix_seed", "PerfectModel", "np.random.randint", "np.random.randint", "np.random.rand", "PerfectModel.fit_score", "print", "np.all", "np.isclose", "np.all", "np.isclose"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_score"], ["def", "test_perfect_model", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "models", "import", "PerfectModel", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "model", "=", "PerfectModel", "(", ")", "\n", "y1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "100", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "100", ")", "\n", "X", "=", "np", ".", "random", ".", "rand", "(", "100", ")", "\n", "y_pred", "=", "model", ".", "fit_score", "(", "X", ",", "y", ")", "\n", "print", "(", "y_pred", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "y", ",", "y_pred", ")", ")", "\n", "assert", "not", "np", ".", "all", "(", "np", ".", "isclose", "(", "y1", ",", "y_pred", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_pyod_integrations.test_reference_window": [[2, 33], ["Data", "Data.get_data", "shuffle", "ReferenceWindowModel", "ArrayStreamer", "AUROCMetric", "ArrayStreamer.iter", "print", "os.path.join", "ReferenceWindowModel.fit_partial", "ReferenceWindowModel.score_partial", "y_pred.append", "AUROCMetric.update", "AUROCMetric.get"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.get_data", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["def", "test_reference_window", "(", "test_path", ")", ":", "\n", "    ", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "from", "pysad", ".", "models", ".", "integrations", "import", "ReferenceWindowModel", "\n", "from", "pysad", ".", "utils", "import", "Data", "\n", "from", "pysad", ".", "evaluation", "import", "AUROCMetric", "\n", "from", "pysad", ".", "utils", "import", "ArrayStreamer", "\n", "import", "os", "\n", "from", "pyod", ".", "models", ".", "iforest", "import", "IForest", "\n", "\n", "data", "=", "Data", "(", "os", ".", "path", ".", "join", "(", "test_path", ",", "\"../../examples/data\"", ")", ")", "\n", "\n", "X_all", ",", "y_all", "=", "data", ".", "get_data", "(", "\"arrhythmia.mat\"", ")", "\n", "X_all", ",", "y_all", "=", "shuffle", "(", "X_all", ",", "y_all", ")", "\n", "\n", "model", "=", "ReferenceWindowModel", "(", "model_cls", "=", "IForest", ",", "window_size", "=", "240", ",", "sliding_size", "=", "30", ",", "\n", "initial_window_X", "=", "X_all", "[", ":", "100", "]", ")", "\n", "\n", "iterator", "=", "ArrayStreamer", "(", "shuffle", "=", "False", ")", "\n", "\n", "auroc", "=", "AUROCMetric", "(", ")", "\n", "\n", "y_pred", "=", "[", "]", "\n", "for", "X", ",", "y", "in", "iterator", ".", "iter", "(", "X_all", "[", "100", ":", "]", ",", "y_all", "[", "100", ":", "]", ")", ":", "\n", "        ", "model", ".", "fit_partial", "(", "X", ")", "\n", "score", "=", "model", ".", "score_partial", "(", "X", ")", "\n", "\n", "y_pred", ".", "append", "(", "score", ")", "\n", "\n", "auroc", ".", "update", "(", "y", ",", "score", ")", "\n", "\n", "", "print", "(", "\"AUROC: \"", ",", "auroc", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.test_pyod_integrations.test_one_fit": [[35, 66], ["Data", "Data.get_data", "print", "shuffle", "OneFitModel", "ArrayStreamer", "AUROCMetric", "ArrayStreamer.iter", "print", "os.path.join", "OneFitModel.fit_partial", "OneFitModel.score_partial", "y_pred.append", "AUROCMetric.update", "AUROCMetric.get"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.get_data", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "test_one_fit", "(", "test_path", ")", ":", "\n", "    ", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "from", "pysad", ".", "utils", "import", "Data", "\n", "from", "pysad", ".", "evaluation", "import", "AUROCMetric", "\n", "from", "pysad", ".", "utils", "import", "ArrayStreamer", "\n", "import", "os", "\n", "from", "pyod", ".", "models", ".", "iforest", "import", "IForest", "\n", "from", "pysad", ".", "models", ".", "integrations", ".", "one_fit_model", "import", "OneFitModel", "\n", "\n", "data", "=", "Data", "(", "os", ".", "path", ".", "join", "(", "test_path", ",", "\"../../examples/data\"", ")", ")", "\n", "\n", "X_all", ",", "y_all", "=", "data", ".", "get_data", "(", "\"arrhythmia.mat\"", ")", "\n", "print", "(", "X_all", ",", "y_all", ")", "\n", "X_all", ",", "y_all", "=", "shuffle", "(", "X_all", ",", "y_all", ")", "\n", "\n", "model", "=", "OneFitModel", "(", "model_cls", "=", "IForest", ",", "initial_X", "=", "X_all", "[", ":", "100", "]", ")", "\n", "\n", "iterator", "=", "ArrayStreamer", "(", "shuffle", "=", "False", ")", "\n", "\n", "auroc", "=", "AUROCMetric", "(", ")", "\n", "\n", "y_pred", "=", "[", "]", "\n", "for", "X", ",", "y", "in", "iterator", ".", "iter", "(", "X_all", "[", "100", ":", "]", ",", "y_all", "[", "100", ":", "]", ")", ":", "\n", "        ", "model", ".", "fit_partial", "(", "X", ")", "\n", "score", "=", "model", ".", "score_partial", "(", "X", ")", "\n", "\n", "y_pred", ".", "append", "(", "score", ")", "\n", "\n", "auroc", ".", "update", "(", "y", ",", "score", ")", "\n", "\n", "", "print", "(", "\"AUROC: \"", ",", "auroc", ".", "get", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.models.conftest.test_path": [[5, 8], ["os.path.dirname", "os.path.abspath"], "function", ["None"], ["@", "pytest", ".", "fixture", "\n", "def", "test_path", "(", ")", ":", "# adapted from https://github.com/scikit-multiflow/scikit-multiflow/blob/master/tests/anomaly_detection/test_half_space_trees.py", "\n", "    ", "return", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.__init__": [[20, 47], ["corClust.corClust", "print", "KitNET.KitNET.__createAD__", "print"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.__createAD__"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "max_autoencoder_size", "=", "10", ",", "FM_grace_period", "=", "None", ",", "AD_grace_period", "=", "10000", ",", "learning_rate", "=", "0.1", ",", "hidden_ratio", "=", "0.75", ",", "feature_map", "=", "None", ")", ":", "\n", "# Parameters:", "\n", "        ", "self", ".", "AD_grace_period", "=", "AD_grace_period", "\n", "if", "FM_grace_period", "is", "None", ":", "\n", "            ", "self", ".", "FM_grace_period", "=", "AD_grace_period", "\n", "", "else", ":", "\n", "            ", "self", ".", "FM_grace_period", "=", "FM_grace_period", "\n", "", "if", "max_autoencoder_size", "<=", "0", ":", "\n", "            ", "self", ".", "m", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "m", "=", "max_autoencoder_size", "\n", "", "self", ".", "lr", "=", "learning_rate", "\n", "self", ".", "hr", "=", "hidden_ratio", "\n", "self", ".", "n", "=", "n", "\n", "\n", "# Variables", "\n", "self", ".", "n_trained", "=", "0", "# the number of training instances so far", "\n", "self", ".", "n_executed", "=", "0", "# the number of executed instances so far", "\n", "self", ".", "v", "=", "feature_map", "\n", "if", "self", ".", "v", "is", "None", ":", "\n", "            ", "print", "(", "\"Feature-Mapper: train-mode, Anomaly-Detector: off-mode\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__createAD__", "(", ")", "\n", "print", "(", "\"Feature-Mapper: execute-mode, Anomaly-Detector: train-mode\"", ")", "\n", "", "self", ".", "FM", "=", "CC", ".", "corClust", "(", "self", ".", "n", ")", "#incremental feature cluatering for the feature mapping process", "\n", "self", ".", "ensembleLayer", "=", "[", "]", "\n", "self", ".", "outputLayer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.process": [[51, 57], ["KitNET.KitNET.execute", "KitNET.KitNET.train"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.execute", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.train"], ["", "def", "process", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "n_trained", ">", "self", ".", "FM_grace_period", "+", "self", ".", "AD_grace_period", ":", "#If both the FM and AD are in execute-mode", "\n", "            ", "return", "self", ".", "execute", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "(", "x", ")", "\n", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.train": [[60, 81], ["KitNET.KitNET.FM.update", "numpy.zeros", "range", "KitNET.KitNET.outputLayer.train", "KitNET.KitNET.FM.cluster", "KitNET.KitNET.__createAD__", "print", "print", "len", "len", "KitNET.KitNET.ensembleLayer[].train", "print", "str", "len", "str"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.train", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.cluster", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.__createAD__", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.train"], ["", "", "def", "train", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "n_trained", "<=", "self", ".", "FM_grace_period", "and", "self", ".", "v", "is", "None", ":", "#If the FM is in train-mode, and the user has not supplied a feature mapping", "\n", "#update the incremetnal correlation matrix", "\n", "            ", "self", ".", "FM", ".", "update", "(", "x", ")", "\n", "if", "self", ".", "n_trained", "==", "self", ".", "FM_grace_period", ":", "#If the feature mapping should be instantiated", "\n", "                ", "self", ".", "v", "=", "self", ".", "FM", ".", "cluster", "(", "self", ".", "m", ")", "\n", "self", ".", "__createAD__", "(", ")", "\n", "print", "(", "\"The Feature-Mapper found a mapping: \"", "+", "str", "(", "self", ".", "n", ")", "+", "\" features to \"", "+", "str", "(", "len", "(", "self", ".", "v", ")", ")", "+", "\" autoencoders.\"", ")", "\n", "print", "(", "\"Feature-Mapper: execute-mode, Anomaly-Detector: train-mode\"", ")", "\n", "", "", "else", ":", "#train", "\n", "## Ensemble Layer", "\n", "            ", "S_l1", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "ensembleLayer", ")", ")", "\n", "for", "a", "in", "range", "(", "len", "(", "self", ".", "ensembleLayer", ")", ")", ":", "\n", "# make sub instance for autoencoder 'a'", "\n", "                ", "xi", "=", "x", "[", "self", ".", "v", "[", "a", "]", "]", "\n", "S_l1", "[", "a", "]", "=", "self", ".", "ensembleLayer", "[", "a", "]", ".", "train", "(", "xi", ")", "\n", "## OutputLayer", "\n", "", "self", ".", "outputLayer", ".", "train", "(", "S_l1", ")", "\n", "if", "self", ".", "n_trained", "==", "self", ".", "AD_grace_period", "+", "self", ".", "FM_grace_period", ":", "\n", "                ", "print", "(", "\"Feature-Mapper: execute-mode, Anomaly-Detector: exeute-mode\"", ")", "\n", "", "", "self", ".", "n_trained", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.execute": [[83, 96], ["RuntimeError", "numpy.zeros", "range", "KitNET.KitNET.outputLayer.execute", "len", "len", "KitNET.KitNET.ensembleLayer[].execute"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.execute", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.execute"], ["", "def", "execute", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "v", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'KitNET Cannot execute x, because a feature mapping has not yet been learned or provided. Try running process(x) instead.'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_executed", "+=", "1", "\n", "## Ensemble Layer", "\n", "S_l1", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "ensembleLayer", ")", ")", "\n", "for", "a", "in", "range", "(", "len", "(", "self", ".", "ensembleLayer", ")", ")", ":", "\n", "# make sub inst", "\n", "                ", "xi", "=", "x", "[", "self", ".", "v", "[", "a", "]", "]", "\n", "S_l1", "[", "a", "]", "=", "self", ".", "ensembleLayer", "[", "a", "]", ".", "execute", "(", "xi", ")", "\n", "## OutputLayer", "\n", "", "return", "self", ".", "outputLayer", ".", "execute", "(", "S_l1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.KitNET.KitNET.__createAD__": [[97, 106], ["dA.dA_params", "dA.dA", "dA.dA_params", "KitNET.KitNET.ensembleLayer.append", "len", "dA.dA", "len"], "methods", ["None"], ["", "", "def", "__createAD__", "(", "self", ")", ":", "\n", "# construct ensemble layer", "\n", "        ", "for", "map", "in", "self", ".", "v", ":", "\n", "            ", "params", "=", "AE", ".", "dA_params", "(", "n_visible", "=", "len", "(", "map", ")", ",", "n_hidden", "=", "0", ",", "lr", "=", "self", ".", "lr", ",", "corruption_level", "=", "0", ",", "gracePeriod", "=", "0", ",", "hiddenRatio", "=", "self", ".", "hr", ")", "\n", "self", ".", "ensembleLayer", ".", "append", "(", "AE", ".", "dA", "(", "params", ")", ")", "\n", "\n", "# construct output layer", "\n", "", "params", "=", "AE", ".", "dA_params", "(", "len", "(", "self", ".", "v", ")", ",", "n_hidden", "=", "0", ",", "lr", "=", "self", ".", "lr", ",", "corruption_level", "=", "0", ",", "gracePeriod", "=", "0", ",", "hiddenRatio", "=", "self", ".", "hr", ")", "\n", "self", ".", "outputLayer", "=", "AE", ".", "dA", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA_params.__init__": [[32, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_visible", "=", "5", ",", "n_hidden", "=", "3", ",", "lr", "=", "0.001", ",", "corruption_level", "=", "0.0", ",", "gracePeriod", "=", "10000", ",", "hiddenRatio", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_visible", "=", "n_visible", "# num of units in visible (input) layer", "\n", "self", ".", "n_hidden", "=", "n_hidden", "# num of units in hidden layer", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "corruption_level", "=", "corruption_level", "\n", "self", ".", "gracePeriod", "=", "gracePeriod", "\n", "self", ".", "hiddenRatio", "=", "hiddenRatio", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.__init__": [[41, 63], ["numpy.random.RandomState", "numpy.array", "numpy.zeros", "numpy.zeros", "int", "numpy.ones", "numpy.ones", "dA.dA.rng.uniform", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n", "if", "self", ".", "params", ".", "hiddenRatio", "is", "not", "None", ":", "\n", "            ", "self", ".", "params", ".", "n_hidden", "=", "int", "(", "numpy", ".", "ceil", "(", "self", ".", "params", ".", "n_visible", "*", "self", ".", "params", ".", "hiddenRatio", ")", ")", "\n", "\n", "# for 0-1 normlaization", "\n", "", "self", ".", "norm_max", "=", "numpy", ".", "ones", "(", "(", "self", ".", "params", ".", "n_visible", ",", ")", ")", "*", "-", "numpy", ".", "Inf", "\n", "self", ".", "norm_min", "=", "numpy", ".", "ones", "(", "(", "self", ".", "params", ".", "n_visible", ",", ")", ")", "*", "numpy", ".", "Inf", "\n", "self", ".", "n", "=", "0", "\n", "\n", "self", ".", "rng", "=", "numpy", ".", "random", ".", "RandomState", "(", "1234", ")", "\n", "\n", "a", "=", "1.", "/", "self", ".", "params", ".", "n_visible", "\n", "self", ".", "W", "=", "numpy", ".", "array", "(", "self", ".", "rng", ".", "uniform", "(", "# initialize W uniformly", "\n", "low", "=", "-", "a", ",", "\n", "high", "=", "a", ",", "\n", "size", "=", "(", "self", ".", "params", ".", "n_visible", ",", "self", ".", "params", ".", "n_hidden", ")", ")", ")", "\n", "\n", "self", ".", "hbias", "=", "numpy", ".", "zeros", "(", "self", ".", "params", ".", "n_hidden", ")", "# initialize h bias 0", "\n", "self", ".", "vbias", "=", "numpy", ".", "zeros", "(", "self", ".", "params", ".", "n_visible", ")", "# initialize v bias 0", "\n", "self", ".", "W_prime", "=", "self", ".", "W", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_corrupted_input": [[65, 71], ["dA.dA.rng.binomial"], "methods", ["None"], ["", "def", "get_corrupted_input", "(", "self", ",", "input", ",", "corruption_level", ")", ":", "\n", "        ", "assert", "corruption_level", "<", "1", "\n", "\n", "return", "self", ".", "rng", ".", "binomial", "(", "size", "=", "input", ".", "shape", ",", "\n", "n", "=", "1", ",", "\n", "p", "=", "1", "-", "corruption_level", ")", "*", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_hidden_values": [[73, 75], ["utils.sigmoid", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.sigmoid"], ["", "def", "get_hidden_values", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "sigmoid", "(", "numpy", ".", "dot", "(", "input", ",", "self", ".", "W", ")", "+", "self", ".", "hbias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_reconstructed_input": [[77, 79], ["utils.sigmoid", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.sigmoid"], ["", "def", "get_reconstructed_input", "(", "self", ",", "hidden", ")", ":", "\n", "        ", "return", "sigmoid", "(", "numpy", ".", "dot", "(", "hidden", ",", "self", ".", "W_prime", ")", "+", "self", ".", "vbias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.train": [[80, 107], ["dA.dA.get_hidden_values", "dA.dA.get_reconstructed_input", "numpy.sqrt", "dA.dA.get_corrupted_input", "numpy.outer", "numpy.outer", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_hidden_values", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_reconstructed_input", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_corrupted_input"], ["", "def", "train", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "n", "=", "self", ".", "n", "+", "1", "\n", "# update norms", "\n", "self", ".", "norm_max", "[", "x", ">", "self", ".", "norm_max", "]", "=", "x", "[", "x", ">", "self", ".", "norm_max", "]", "\n", "self", ".", "norm_min", "[", "x", "<", "self", ".", "norm_min", "]", "=", "x", "[", "x", "<", "self", ".", "norm_min", "]", "\n", "\n", "# 0-1 normalize", "\n", "x", "=", "(", "x", "-", "self", ".", "norm_min", ")", "/", "(", "self", ".", "norm_max", "-", "self", ".", "norm_min", "+", "0.0000000000000001", ")", "\n", "\n", "if", "self", ".", "params", ".", "corruption_level", ">", "0.0", ":", "\n", "            ", "tilde_x", "=", "self", ".", "get_corrupted_input", "(", "x", ",", "self", ".", "params", ".", "corruption_level", ")", "\n", "", "else", ":", "\n", "            ", "tilde_x", "=", "x", "\n", "", "y", "=", "self", ".", "get_hidden_values", "(", "tilde_x", ")", "\n", "z", "=", "self", ".", "get_reconstructed_input", "(", "y", ")", "\n", "\n", "L_h2", "=", "x", "-", "z", "\n", "L_h1", "=", "numpy", ".", "dot", "(", "L_h2", ",", "self", ".", "W", ")", "*", "y", "*", "(", "1", "-", "y", ")", "\n", "\n", "L_vbias", "=", "L_h2", "\n", "L_hbias", "=", "L_h1", "\n", "L_W", "=", "numpy", ".", "outer", "(", "tilde_x", ".", "T", ",", "L_h1", ")", "+", "numpy", ".", "outer", "(", "L_h2", ".", "T", ",", "y", ")", "\n", "\n", "self", ".", "W", "+=", "self", ".", "params", ".", "lr", "*", "L_W", "\n", "self", ".", "hbias", "+=", "self", ".", "params", ".", "lr", "*", "numpy", ".", "mean", "(", "L_hbias", ",", "axis", "=", "0", ")", "\n", "self", ".", "vbias", "+=", "self", ".", "params", ".", "lr", "*", "numpy", ".", "mean", "(", "L_vbias", ",", "axis", "=", "0", ")", "\n", "return", "numpy", ".", "sqrt", "(", "numpy", ".", "mean", "(", "L_h2", "**", "2", ")", ")", "#the RMSE reconstruction error during training", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.reconstruct": [[109, 113], ["dA.dA.get_hidden_values", "dA.dA.get_reconstructed_input"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_hidden_values", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.get_reconstructed_input"], ["", "def", "reconstruct", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "get_hidden_values", "(", "x", ")", "\n", "z", "=", "self", ".", "get_reconstructed_input", "(", "y", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.execute": [[114, 123], ["dA.dA.reconstruct", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.reconstruct"], ["", "def", "execute", "(", "self", ",", "x", ")", ":", "#returns MSE of the reconstruction of x", "\n", "        ", "if", "self", ".", "n", "<", "self", ".", "params", ".", "gracePeriod", ":", "\n", "            ", "return", "0.0", "\n", "", "else", ":", "\n", "# 0-1 normalize", "\n", "            ", "x", "=", "(", "x", "-", "self", ".", "norm_min", ")", "/", "(", "self", ".", "norm_max", "-", "self", ".", "norm_min", "+", "0.0000000000000001", ")", "\n", "z", "=", "self", ".", "reconstruct", "(", "x", ")", "\n", "rmse", "=", "numpy", ".", "sqrt", "(", "(", "(", "x", "-", "z", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "#MSE", "\n", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.dA.dA.inGrace": [[125, 127], ["None"], "methods", ["None"], ["", "", "def", "inGrace", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "<", "self", ".", "params", ".", "gracePeriod", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.__init__": [[8, 17], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "#parameter:", "\n", "        ", "self", ".", "n", "=", "n", "\n", "#varaibles", "\n", "self", ".", "c", "=", "np", ".", "zeros", "(", "n", ")", "#linear num of features", "\n", "self", ".", "c_r", "=", "np", ".", "zeros", "(", "n", ")", "#linear sum of feature residules", "\n", "self", ".", "c_rs", "=", "np", ".", "zeros", "(", "n", ")", "#linear sum of feature residules", "\n", "self", ".", "C", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "#partial correlation matrix", "\n", "self", ".", "N", "=", "0", "#number of updates performed", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.update": [[19, 26], ["numpy.outer"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "N", "+=", "1", "\n", "self", ".", "c", "+=", "x", "\n", "c_rt", "=", "x", "-", "self", ".", "c", "/", "self", ".", "N", "\n", "self", ".", "c_r", "+=", "c_rt", "\n", "self", ".", "c_rs", "+=", "c_rt", "**", "2", "\n", "self", ".", "C", "+=", "np", ".", "outer", "(", "c_rt", ",", "c_rt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.corrDist": [[28, 35], ["numpy.sqrt", "numpy.outer"], "methods", ["None"], ["", "def", "corrDist", "(", "self", ")", ":", "\n", "        ", "c_rs_sqrt", "=", "np", ".", "sqrt", "(", "self", ".", "c_rs", ")", "\n", "C_rs_sqrt", "=", "np", ".", "outer", "(", "c_rs_sqrt", ",", "c_rs_sqrt", ")", "\n", "C_rs_sqrt", "[", "C_rs_sqrt", "==", "0", "]", "=", "1e-100", "#this protects against dive by zero erros (occurs when a feature is a constant)", "\n", "D", "=", "1", "-", "self", ".", "C", "/", "C_rs_sqrt", "#the correlation distance matrix", "\n", "D", "[", "D", "<", "0", "]", "=", "0", "#small negatives may appear due to the incremental fashion in which we update the mean. Therefore, we 'fix' them", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.cluster": [[37, 46], ["corClust.corClust.corrDist", "scipy.cluster.hierarchy.linkage", "corClust.corClust.__breakClust__", "scipy.cluster.hierarchy.to_tree", "numpy.triu_indices"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.corrDist", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.__breakClust__"], ["", "def", "cluster", "(", "self", ",", "maxClust", ")", ":", "\n", "        ", "D", "=", "self", ".", "corrDist", "(", ")", "\n", "Z", "=", "linkage", "(", "D", "[", "np", ".", "triu_indices", "(", "self", ".", "n", ",", "1", ")", "]", ")", "# create a linkage matrix based on the distance matrix", "\n", "if", "maxClust", "<", "1", ":", "\n", "            ", "maxClust", "=", "1", "\n", "", "if", "maxClust", ">", "self", ".", "n", ":", "\n", "            ", "maxClust", "=", "self", ".", "n", "\n", "", "map", "=", "self", ".", "__breakClust__", "(", "to_tree", "(", "Z", ")", ",", "maxClust", ")", "\n", "return", "map", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.__breakClust__": [[48, 52], ["corClust.corClust.__breakClust__", "corClust.corClust.__breakClust__", "dendro.pre_order", "dendro.get_left", "dendro.get_right"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.__breakClust__", "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.corClust.corClust.__breakClust__"], ["", "def", "__breakClust__", "(", "self", ",", "dendro", ",", "maxClust", ")", ":", "\n", "        ", "if", "dendro", ".", "count", "<=", "maxClust", ":", "#base case: we found a minimal cluster, so mark it", "\n", "            ", "return", "[", "dendro", ".", "pre_order", "(", ")", "]", "#return the origional ids of the features in this cluster", "\n", "", "return", "self", ".", "__breakClust__", "(", "dendro", ".", "get_left", "(", ")", ",", "maxClust", ")", "+", "self", ".", "__breakClust__", "(", "dendro", ".", "get_right", "(", ")", ",", "maxClust", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.rollmean.__init__": [[41, 45], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "winsize", "=", "k", "\n", "self", ".", "window", "=", "numpy", ".", "zeros", "(", "self", ".", "winsize", ")", "\n", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.rollmean.apply": [[46, 50], ["numpy.mean"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "newval", ")", ":", "\n", "        ", "self", ".", "window", "[", "self", ".", "pointer", "]", "=", "newval", "\n", "self", ".", "pointer", "=", "(", "self", ".", "pointer", "+", "1", ")", "%", "self", ".", "winsize", "\n", "return", "numpy", ".", "mean", "(", "self", ".", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.pdf": [[5, 8], ["numpy.exp", "numpy.sqrt"], "function", ["None"], ["def", "pdf", "(", "x", ",", "mu", ",", "sigma", ")", ":", "#normal distribution pdf", "\n", "    ", "x", "=", "(", "x", "-", "mu", ")", "/", "sigma", "\n", "return", "numpy", ".", "exp", "(", "-", "x", "**", "2", "/", "2", ")", "/", "(", "numpy", ".", "sqrt", "(", "2", "*", "numpy", ".", "pi", ")", "*", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.invLogCDF": [[9, 12], ["scipy.stats.norm.logcdf"], "function", ["None"], ["", "def", "invLogCDF", "(", "x", ",", "mu", ",", "sigma", ")", ":", "#normal distribution cdf", "\n", "    ", "x", "=", "(", "x", "-", "mu", ")", "/", "sigma", "\n", "return", "norm", ".", "logcdf", "(", "-", "x", ")", "#note: we mutiple by -1 after normalization to better get the 1-cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.sigmoid": [[13, 15], ["numpy.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1.", "/", "(", "1", "+", "numpy", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.dsigmoid": [[17, 19], ["None"], "function", ["None"], ["", "def", "dsigmoid", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "(", "1.", "-", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.tanh": [[20, 22], ["numpy.tanh"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.tanh"], ["", "def", "tanh", "(", "x", ")", ":", "\n", "    ", "return", "numpy", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.dtanh": [[23, 25], ["None"], "function", ["None"], ["", "def", "dtanh", "(", "x", ")", ":", "\n", "    ", "return", "1.", "-", "x", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.softmax": [[26, 32], ["numpy.exp", "numpy.max", "numpy.sum", "numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "e", "=", "numpy", ".", "exp", "(", "x", "-", "numpy", ".", "max", "(", "x", ")", ")", "# prevent overflow", "\n", "if", "e", ".", "ndim", "==", "1", ":", "\n", "        ", "return", "e", "/", "numpy", ".", "sum", "(", "e", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "e", "/", "numpy", ".", "array", "(", "[", "numpy", ".", "sum", "(", "e", ",", "axis", "=", "1", ")", "]", ")", ".", "T", "# ndim = 2", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.ReLU": [[34, 36], ["None"], "function", ["None"], ["", "", "def", "ReLU", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "(", "x", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.kitnet_model.utils.dReLU": [[37, 39], ["None"], "function", ["None"], ["", "def", "dReLU", "(", "x", ")", ":", "\n", "    ", "return", "1.", "*", "(", "x", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.reference_window_model.ReferenceWindowModel.__init__": [[17, 50], ["pyod_model.PYODModel.__init__", "reference_window_model.ReferenceWindowModel._fit_model"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__", "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel._fit_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model_cls", ",", "\n", "window_size", ",", "\n", "sliding_size", ",", "\n", "initial_window_X", "=", "None", ",", "\n", "initial_window_y", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            model_cls:\n            window_size:\n            sliding_size:\n            initial_window_X:\n            initial_window_y:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "model_cls", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "sliding_size", "=", "sliding_size", "\n", "\n", "self", ".", "cur_window_X", "=", "[", "]", "\n", "self", ".", "cur_window_y", "=", "[", "]", "\n", "\n", "self", ".", "reference_window_X", "=", "initial_window_X", "\n", "self", ".", "reference_window_y", "=", "initial_window_y", "\n", "\n", "if", "self", ".", "reference_window_X", "is", "not", "None", ":", "\n", "            ", "self", ".", "_fit_model", "(", ")", "\n", "self", ".", "initial_ref_window", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "initial_ref_window", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.reference_window_model.ReferenceWindowModel.fit_partial": [[51, 87], ["reference_window_model.ReferenceWindowModel.cur_window_X.append", "reference_window_model.ReferenceWindowModel.cur_window_y.append", "reference_window_model.ReferenceWindowModel._fit_model", "len", "numpy.concatenate", "reference_window_model.ReferenceWindowModel._fit_model", "len", "numpy.concatenate", "max", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel._fit_model", "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel._fit_model"], ["", "", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): The label of the instance (Optional for unsupervised models, default=None).\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "cur_window_X", ".", "append", "(", "X", ")", "\n", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "self", ".", "cur_window_y", ".", "append", "(", "y", ")", "\n", "\n", "", "if", "not", "self", ".", "initial_ref_window", "and", "len", "(", "\n", "self", ".", "cur_window_X", ")", "<", "self", ".", "window_size", ":", "\n", "            ", "self", ".", "reference_window_X", "=", "self", ".", "cur_window_X", "\n", "self", ".", "reference_window_y", "=", "self", ".", "cur_window_y", "if", "y", "is", "not", "None", "else", "None", "\n", "self", ".", "_fit_model", "(", ")", "\n", "", "elif", "len", "(", "self", ".", "cur_window_X", ")", "%", "self", ".", "sliding_size", "==", "0", ":", "\n", "            ", "self", ".", "reference_window_X", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "reference_window_X", ",", "self", ".", "cur_window_X", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "reference_window_X", "=", "self", ".", "reference_window_X", "[", "max", "(", "\n", "0", ",", "len", "(", "self", ".", "reference_window_X", ")", "-", "self", ".", "window_size", ")", ":", "]", "\n", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "self", ".", "reference_window_y", "=", "self", ".", "reference_window_y", "[", "max", "(", "\n", "0", ",", "len", "(", "self", ".", "reference_window_y", ")", "-", "self", ".", "window_size", ")", ":", "]", "\n", "self", ".", "reference_window_y", "=", "np", ".", "concatenate", "(", "\n", "[", "self", ".", "reference_window_y", ",", "self", ".", "cur_window_y", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "cur_window", "=", "[", "]", "\n", "self", ".", "_fit_model", "(", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.reference_window_model.ReferenceWindowModel._fit_model": [[88, 95], ["reference_window_model.ReferenceWindowModel.reset_model", "reference_window_model.ReferenceWindowModel.model.fit", "reference_window_model.ReferenceWindowModel.model.fit"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.integrations.pyod_model.PYODModel.reset_model", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit"], ["", "def", "_fit_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_model", "(", ")", "\n", "\n", "if", "self", ".", "reference_window_y", "is", "None", ":", "\n", "            ", "self", ".", "model", ".", "fit", "(", "self", ".", "reference_window_X", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "fit", "(", "self", ".", "reference_window_X", ",", "self", ".", "reference_window_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.reference_window_model.ReferenceWindowModel.score_partial": [[96, 108], ["reference_window_model.ReferenceWindowModel.model.decision_function"], "methods", ["None"], ["", "", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "score", "=", "self", ".", "model", ".", "decision_function", "(", "[", "X", "]", ")", "[", "0", "]", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.pyod_model.PYODModel.__init__": [[6, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_cls", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Abstract base class for PYOD models.\n\n        Args:\n            model_cls (class): The model class to be instantiated.\n            **kwargs (Keyword arguments): Keyword arguments that is passed to the `model_cls`.\n        \"\"\"", "\n", "self", ".", "model_cls", "=", "model_cls", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.pyod_model.PYODModel.reset_model": [[17, 21], ["pyod_model.PYODModel.model_cls"], "methods", ["None"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Removes the old model from the memory and instantiates a new one.\n        \"\"\"", "\n", "self", ".", "model", "=", "self", ".", "model_cls", "(", "**", "self", ".", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel.__init__": [[14, 20], ["pyod_model.PYODModel.__init__", "one_fit_model.OneFitModel._fit_model"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__", "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel._fit_model"], ["def", "__init__", "(", "self", ",", "model_cls", ",", "initial_X", ",", "initial_y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_cls", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "initial_y", "=", "initial_y", "\n", "self", ".", "initial_X", "=", "initial_X", "\n", "self", ".", "_fit_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel.fit_partial": [[21, 32], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"This method is ignored. Added for convenience.\n\n        Args:\n            X: any\n            y: any\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel._fit_model": [[33, 41], ["one_fit_model.OneFitModel.reset_model", "one_fit_model.OneFitModel.model.fit", "one_fit_model.OneFitModel.model.fit"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.integrations.pyod_model.PYODModel.reset_model", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit"], ["", "def", "_fit_model", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "reset_model", "(", ")", "\n", "\n", "if", "self", ".", "initial_y", "is", "None", ":", "\n", "            ", "self", ".", "model", ".", "fit", "(", "self", ".", "initial_X", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "fit", "(", "self", ".", "initial_X", ",", "self", ".", "initial_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.integrations.one_fit_model.OneFitModel.score_partial": [[42, 54], ["one_fit_model.OneFitModel.model.decision_function"], "methods", ["None"], ["", "", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "score", "=", "self", ".", "model", ".", "decision_function", "(", "[", "X", "]", ")", "[", "0", "]", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.median_meter.MedianMeter.__init__": [[13, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "lst", "=", "[", "]", "\n", "self", ".", "num_items", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.median_meter.MedianMeter.update": [[17, 30], ["heapq.heappush"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "heappush", "(", "self", ".", "lst", ",", "num", ")", "\n", "self", ".", "num_items", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.median_meter.MedianMeter.remove": [[31, 44], ["median_meter.MedianMeter.lst.remove"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "lst", ".", "remove", "(", "num", ")", "\n", "self", ".", "num_items", "-=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.median_meter.MedianMeter.get": [[45, 56], ["sorted"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "self", ".", "lst", "=", "sorted", "(", "self", ".", "lst", ")", "\n", "if", "self", ".", "num_items", "%", "2", "==", "0", ":", "\n", "            ", "return", "(", "self", ".", "lst", "[", "self", ".", "num_items", "//", "2", "]", "+", "self", ".", "lst", "[", "self", ".", "num_items", "//", "2", "-", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lst", "[", "self", ".", "num_items", "//", "2", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_squares_meter.SumSquaresMeter.__init__": [[12, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum_squares", "=", "0.0", "\n", "self", ".", "num_items", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_squares_meter.SumSquaresMeter.update": [[16, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "sum_squares", "+=", "num", "**", "2", "\n", "self", ".", "num_items", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_squares_meter.SumSquaresMeter.remove": [[30, 43], ["None"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "sum_squares", "-=", "num", "**", "2", "\n", "self", ".", "num_items", "-=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_squares_meter.SumSquaresMeter.get": [[44, 51], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "self", ".", "sum_squares", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.variance_meter.VarianceMeter.__init__": [[16, 20], ["pysad.statistics.sum_meter.SumMeter", "pysad.statistics.sum_squares_meter.SumSquaresMeter", "pysad.statistics.count_meter.CountMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum_meter", "=", "SumMeter", "(", ")", "\n", "self", ".", "sum_squares_meter", "=", "SumSquaresMeter", "(", ")", "\n", "self", ".", "count_meter", "=", "CountMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.variance_meter.VarianceMeter.update": [[21, 36], ["variance_meter.VarianceMeter.sum_squares_meter.update", "variance_meter.VarianceMeter.count_meter.update", "variance_meter.VarianceMeter.sum_meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n\n        \"\"\"", "\n", "self", ".", "sum_squares_meter", ".", "update", "(", "num", ")", "\n", "self", ".", "count_meter", ".", "update", "(", "num", ")", "\n", "self", ".", "sum_meter", ".", "update", "(", "num", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.variance_meter.VarianceMeter.remove": [[37, 52], ["variance_meter.VarianceMeter.sum_squares_meter.remove", "variance_meter.VarianceMeter.sum_meter.remove", "variance_meter.VarianceMeter.count_meter.remove"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value.\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n\n        \"\"\"", "\n", "self", ".", "sum_squares_meter", ".", "remove", "(", "num", ")", "\n", "self", ".", "sum_meter", ".", "remove", "(", "num", ")", "\n", "self", ".", "count_meter", ".", "remove", "(", "num", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.variance_meter.VarianceMeter.get": [[53, 66], ["variance_meter.VarianceMeter.sum_squares_meter.get", "variance_meter.VarianceMeter.sum_meter.get", "variance_meter.VarianceMeter.count_meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "sum_squares", "=", "self", ".", "sum_squares_meter", ".", "get", "(", ")", "\n", "sum", "=", "self", ".", "sum_meter", ".", "get", "(", ")", "\n", "count", "=", "self", ".", "count_meter", ".", "get", "(", ")", "\n", "\n", "var", "=", "(", "sum_squares", "-", "(", "sum", "**", "2", ")", "/", "count", ")", "/", "count", "\n", "\n", "return", "var", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.max_meter.MaxMeter.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "max", "=", "-", "math", ".", "inf", "\n", "\n", "self", ".", "lst", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.max_meter.MaxMeter.update": [[20, 36], ["heapq.heappush"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n\n        \"\"\"", "\n", "if", "num", ">", "self", ".", "max", ":", "\n", "            ", "self", ".", "max", "=", "num", "\n", "\n", "", "heappush", "(", "self", ".", "lst", ",", "num", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.max_meter.MaxMeter.remove": [[37, 55], ["max_meter.MaxMeter.lst.remove", "len", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n\n        \"\"\"", "\n", "self", ".", "lst", ".", "remove", "(", "num", ")", "\n", "\n", "if", "len", "(", "self", ".", "lst", ")", ">", "0", ":", "\n", "            ", "self", ".", "max", "=", "np", ".", "max", "(", "self", ".", "lst", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "max", "=", "-", "math", ".", "inf", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.max_meter.MaxMeter.get": [[56, 63], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "self", ".", "max", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.average_meter.AverageMeter.__init__": [[12, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "num_items", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.average_meter.AverageMeter.update": [[16, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "sum", "+=", "num", "\n", "self", ".", "num_items", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.average_meter.AverageMeter.remove": [[30, 43], ["None"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "sum", "-=", "num", "\n", "self", ".", "num_items", "-=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.average_meter.AverageMeter.get": [[44, 51], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "self", ".", "sum", "/", "self", ".", "num_items", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.min_meter.MinMeter.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "min", "=", "math", ".", "inf", "\n", "\n", "self", ".", "lst", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.min_meter.MinMeter.update": [[20, 35], ["heapq.heappush"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "if", "num", "<", "self", ".", "min", ":", "\n", "            ", "self", ".", "min", "=", "num", "\n", "\n", "", "heappush", "(", "self", ".", "lst", ",", "num", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.min_meter.MinMeter.remove": [[36, 53], ["min_meter.MinMeter.lst.remove", "len", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "lst", ".", "remove", "(", "num", ")", "\n", "\n", "if", "len", "(", "self", ".", "lst", ")", ">", "0", ":", "\n", "            ", "self", ".", "min", "=", "np", ".", "min", "(", "self", ".", "lst", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "min", "=", "math", ".", "inf", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.min_meter.MinMeter.get": [[54, 61], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "self", ".", "min", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_meter.SumMeter.__init__": [[12, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "num_items", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_meter.SumMeter.update": [[16, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "sum", "+=", "num", "\n", "self", ".", "num_items", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_meter.SumMeter.remove": [[30, 43], ["None"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "sum", "-=", "num", "\n", "self", ".", "num_items", "-=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.sum_meter.SumMeter.get": [[44, 51], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "self", ".", "sum", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.abs_statistic.AbsStatistic.__init__": [[12, 16], ["abs_statistic.AbsStatistic.statistic_cls"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "statistic_cls", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "statistic_cls", "=", "statistic_cls", "\n", "\n", "self", ".", "statistic", "=", "self", ".", "statistic_cls", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.abs_statistic.AbsStatistic.update": [[17, 30], ["abs_statistic.AbsStatistic.statistic.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float):  The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n\n        \"\"\"", "\n", "self", ".", "statistic", ".", "update", "(", "num", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.abs_statistic.AbsStatistic.remove": [[31, 44], ["abs_statistic.AbsStatistic.statistic.remove"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove"], ["", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float):  The value to be removed.\n\n        Returns:\n            object: self.\n\n        \"\"\"", "\n", "self", ".", "statistic", ".", "remove", "(", "num", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.abs_statistic.AbsStatistic.get": [[45, 52], ["abs", "abs_statistic.AbsStatistic.statistic.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "abs", "(", "self", ".", "statistic", ".", "get", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.count_meter.CountMeter.__init__": [[11, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.count_meter.CountMeter.update": [[14, 26], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "count", "+=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.count_meter.CountMeter.remove": [[27, 39], ["None"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "num", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "count", "-=", "1", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.count_meter.CountMeter.get": [[40, 47], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.running_statistic.RunningStatistic.__init__": [[13, 20], ["pysad.core.base_statistic.BaseStatistic.__init__", "running_statistic.RunningStatistic.statistic_cls"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ",", "statistic_cls", ",", "window_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "statistic_cls", "=", "statistic_cls", "\n", "self", ".", "statistic", "=", "self", ".", "statistic_cls", "(", ")", "\n", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "window", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.running_statistic.RunningStatistic.update": [[21, 39], ["running_statistic.RunningStatistic.window.append", "running_statistic.RunningStatistic.statistic.update", "len", "running_statistic.RunningStatistic.statistic.remove"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove"], ["", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float): The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "window", ".", "append", "(", "num", ")", "\n", "\n", "self", ".", "statistic", ".", "update", "(", "num", ")", "\n", "\n", "if", "len", "(", "self", ".", "window", ")", ">", "self", ".", "window_size", ":", "\n", "            ", "self", ".", "statistic", ".", "remove", "(", "self", ".", "window", "[", "0", "]", ")", "\n", "self", ".", "window", "=", "self", ".", "window", "[", "1", ":", "]", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.statistics.running_statistic.RunningStatistic.get": [[40, 47], ["running_statistic.RunningStatistic.statistic.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "return", "self", ".", "statistic", ".", "get", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.instance_standard_scaler.InstanceStandardScaler.__init__": [[9, 11], ["pysad.core.base_transformer.BaseTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.instance_standard_scaler.InstanceStandardScaler.fit_partial": [[12, 21], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's features to train the scaler.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n        Returns:\n            object: self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.instance_standard_scaler.InstanceStandardScaler.transform_partial": [[22, 36], ["X.mean", "X.std"], "methods", ["None"], ["", "def", "transform_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scales particular (next) timestep's vector.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            scaled_X (np.float array of shape (features,)): Scaled feature vector.\n        \"\"\"", "\n", "\n", "X_mean", "=", "X", ".", "mean", "(", ")", "\n", "X_std", "=", "X", ".", "std", "(", ")", "\n", "\n", "return", "(", "X", "-", "X_mean", ")", "/", "X_std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.identity_scaler.IdentityScaler.__init__": [[8, 10], ["pysad.core.base_transformer.BaseTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.identity_scaler.IdentityScaler.fit_partial": [[11, 21], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Convenience method that does not modify the input or the scaler.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            object: The scaler.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.identity_scaler.IdentityScaler.transform_partial": [[22, 32], ["None"], "methods", ["None"], ["", "def", "transform_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Convenience method that does not modify the input.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            X (np.float array of shape (features,)): The exact same input feature vector.\n        \"\"\"", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.instance_unit_norm_scaler.InstanceUnitNormScaler.__init__": [[12, 15], ["pysad.core.base_transformer.BaseTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ",", "pow", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "-", "1", ")", "\n", "self", ".", "pow", "=", "pow", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.instance_unit_norm_scaler.InstanceUnitNormScaler.fit_partial": [[16, 26], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's features to train the scaler.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.instance_unit_norm_scaler.InstanceUnitNormScaler.transform_partial": [[27, 39], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "transform_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scales particular (next) timestep's vector.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            scaled_X (np.float array of shape (features,)): Scaled feature vector.\n        \"\"\"", "\n", "X_norm", "=", "np", ".", "linalg", ".", "norm", "(", "X", ",", "ord", "=", "self", ".", "pow", ")", "\n", "\n", "return", "X", "/", "X_norm", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.test_instance_unit_norm_scaler.test_instance_unit_norm_scaler": [[3, 16], ["np.random.rand", "InstanceUnitNormScaler", "scaler.fit.fit_transform", "np.all", "scaler.fit.fit", "scaler.fit.transform", "np.all", "np.isclose", "np.isclose", "np.linalg.norm", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform"], ["def", "test_instance_unit_norm_scaler", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "transform", ".", "preprocessing", "import", "InstanceUnitNormScaler", "\n", "\n", "X", "=", "np", ".", "random", ".", "rand", "(", "100", ",", "25", ")", "\n", "scaler", "=", "InstanceUnitNormScaler", "(", ")", "\n", "\n", "scaled_X", "=", "scaler", ".", "fit_transform", "(", "X", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "np", ".", "linalg", ".", "norm", "(", "scaled_X", ",", "axis", "=", "1", ")", ",", "1.0", ")", ")", "\n", "\n", "scaler", "=", "scaler", ".", "fit", "(", "X", ")", "\n", "scaled_X", "=", "scaler", ".", "transform", "(", "X", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "np", ".", "linalg", ".", "norm", "(", "scaled_X", ",", "axis", "=", "1", ")", ",", "1.0", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.test_instance_standard_scaler.test_instance_standard_scaler": [[3, 16], ["np.random.rand", "InstanceStandardScaler", "scaler.fit.fit_transform", "np.all", "scaler.fit.fit", "scaler.fit.transform", "np.all", "np.isclose", "np.isclose", "np.random.rand.std", "np.random.rand.std", "np.random.rand.mean", "np.random.rand.mean"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform"], ["def", "test_instance_standard_scaler", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "transform", ".", "preprocessing", "import", "InstanceStandardScaler", "\n", "\n", "X", "=", "np", ".", "random", ".", "rand", "(", "100", ",", "25", ")", "\n", "scaler", "=", "InstanceStandardScaler", "(", ")", "\n", "\n", "scaled_X", "=", "scaler", ".", "fit_transform", "(", "X", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "scaled_X", ",", "(", "X", "-", "X", ".", "mean", "(", "1", ",", "keepdims", "=", "True", ")", ")", "/", "X", ".", "std", "(", "1", ",", "keepdims", "=", "True", ")", ")", ")", "\n", "\n", "scaler", "=", "scaler", ".", "fit", "(", "X", ")", "\n", "scaled_X", "=", "scaler", ".", "transform", "(", "X", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "scaled_X", ",", "(", "X", "-", "X", ".", "mean", "(", "1", ",", "keepdims", "=", "True", ")", ")", "/", "X", ".", "std", "(", "1", ",", "keepdims", "=", "True", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.preprocessing.test_identity_scaler.test_identity_scaler": [[3, 16], ["np.random.rand", "IdentityScaler", "scaler.fit.fit_transform", "np.all", "scaler.fit.fit", "scaler.fit.transform", "np.all", "np.isclose", "np.isclose"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform"], ["def", "test_identity_scaler", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "transform", ".", "preprocessing", "import", "IdentityScaler", "\n", "\n", "X", "=", "np", ".", "random", ".", "rand", "(", "100", ",", "25", ")", "\n", "scaler", "=", "IdentityScaler", "(", ")", "\n", "\n", "scaled_X", "=", "scaler", ".", "fit_transform", "(", "X", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "scaled_X", ",", "X", ")", ")", "\n", "\n", "scaler", "=", "scaler", ".", "fit", "(", "X", ")", "\n", "scaled_X", "=", "scaler", ".", "transform", "(", "X", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "isclose", "(", "scaled_X", ",", "X", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.AveragePostprocessor.__init__": [[13, 15], ["pysad.statistics.average_meter.AverageMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "meter", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.AveragePostprocessor.fit_partial": [[16, 29], ["postprocessors.AveragePostprocessor.meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "\n", "self", ".", "meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.AveragePostprocessor.transform_partial": [[30, 40], ["postprocessors.AveragePostprocessor.meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", "=", "None", ")", ":", "\n", "        ", "\"\"\"Gets the current average. This method should be used immediately after the fit_partial method with same score.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "return", "self", ".", "meter", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.MaxPostprocessor.__init__": [[46, 48], ["pysad.statistics.max_meter.MaxMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "meter", "=", "MaxMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.MaxPostprocessor.fit_partial": [[49, 61], ["postprocessors.MaxPostprocessor.meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.MaxPostprocessor.transform_partial": [[62, 72], ["postprocessors.MaxPostprocessor.meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies postprocessing to the score. This method should be used immediately after the fit_partial method with same score.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "return", "self", ".", "meter", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.MedianPostprocessor.__init__": [[78, 80], ["pysad.statistics.median_meter.MedianMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "meter", "=", "MedianMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.MedianPostprocessor.fit_partial": [[81, 93], ["postprocessors.MedianPostprocessor.meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.MedianPostprocessor.transform_partial": [[94, 104], ["postprocessors.MedianPostprocessor.meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies postprocessing to the score.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "return", "self", ".", "meter", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.ZScorePostprocessor.__init__": [[110, 113], ["pysad.statistics.variance_meter.VarianceMeter", "pysad.statistics.average_meter.AverageMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "variance_meter", "=", "VarianceMeter", "(", ")", "\n", "self", ".", "average_meter", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.ZScorePostprocessor.fit_partial": [[114, 127], ["postprocessors.ZScorePostprocessor.variance_meter.update", "postprocessors.ZScorePostprocessor.average_meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "variance_meter", ".", "update", "(", "score", ")", "\n", "self", ".", "average_meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.postprocessors.ZScorePostprocessor.transform_partial": [[128, 141], ["numpy.sqrt", "postprocessors.ZScorePostprocessor.average_meter.get", "postprocessors.ZScorePostprocessor.variance_meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Applies postprocessing to the score.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "zscore", "=", "(", "score", "-", "self", ".", "average_meter", ".", "get", "(", ")", ")", "/", "np", ".", "sqrt", "(", "self", ".", "variance_meter", ".", "get", "(", ")", ")", "\n", "\n", "return", "zscore", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningAveragePostprocessor.__init__": [[17, 22], ["pysad.statistics.running_statistic.RunningStatistic"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "\n", "        ", "self", ".", "meter", "=", "RunningStatistic", "(", "\n", "statistic_cls", "=", "AverageMeter", ",", "\n", "window_size", "=", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningAveragePostprocessor.fit_partial": [[23, 35], ["running_postprocessors.RunningAveragePostprocessor.meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the windowed postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningAveragePostprocessor.transform_partial": [[36, 46], ["running_postprocessors.RunningAveragePostprocessor.meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies postprocessing to the score using the window.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "return", "self", ".", "meter", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningMaxPostprocessor.__init__": [[54, 59], ["pysad.statistics.running_statistic.RunningStatistic"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "\n", "        ", "self", ".", "meter", "=", "RunningStatistic", "(", "\n", "statistic_cls", "=", "MaxMeter", ",", "\n", "window_size", "=", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningMaxPostprocessor.fit_partial": [[60, 72], ["running_postprocessors.RunningMaxPostprocessor.meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the windowed postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningMaxPostprocessor.transform_partial": [[73, 83], ["running_postprocessors.RunningMaxPostprocessor.meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies postprocessing to the score using the window.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "return", "self", ".", "meter", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningMedianPostprocessor.__init__": [[91, 96], ["pysad.statistics.running_statistic.RunningStatistic"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "\n", "        ", "self", ".", "meter", "=", "RunningStatistic", "(", "\n", "statistic_cls", "=", "MedianMeter", ",", "\n", "window_size", "=", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningMedianPostprocessor.fit_partial": [[97, 109], ["running_postprocessors.RunningMedianPostprocessor.meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the windowed postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningMedianPostprocessor.transform_partial": [[110, 120], ["running_postprocessors.RunningMedianPostprocessor.meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies postprocessing to the score using the window.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "return", "self", ".", "meter", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningZScorePostprocessor.__init__": [[129, 135], ["pysad.statistics.running_statistic.RunningStatistic", "pysad.statistics.running_statistic.RunningStatistic"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "\n", "        ", "self", ".", "variance_meter", "=", "RunningStatistic", "(", "\n", "statistic_cls", "=", "VarianceMeter", ",", "window_size", "=", "window_size", ")", "\n", "self", ".", "average_meter", "=", "RunningStatistic", "(", "\n", "statistic_cls", "=", "AverageMeter", ",", "window_size", "=", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningZScorePostprocessor.fit_partial": [[136, 149], ["running_postprocessors.RunningZScorePostprocessor.variance_meter.update", "running_postprocessors.RunningZScorePostprocessor.average_meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits the windowed postprocessor to the (next) timestep's score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "variance_meter", ".", "update", "(", "score", ")", "\n", "self", ".", "average_meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.running_postprocessors.RunningZScorePostprocessor.transform_partial": [[150, 163], ["numpy.sqrt", "running_postprocessors.RunningZScorePostprocessor.average_meter.get", "running_postprocessors.RunningZScorePostprocessor.variance_meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Applies postprocessing to the score using the window.\n\n        Args:\n            score (float): The input score.\n\n        Returns:\n            float: Transformed score.\n        \"\"\"", "\n", "zscore", "=", "(", "score", "-", "self", ".", "average_meter", ".", "get", "(", ")", ")", "/", "np", ".", "sqrt", "(", "self", ".", "variance_meter", ".", "get", "(", ")", ")", "\n", "\n", "return", "zscore", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.test_postprocessors.helper_get_scores": [[7, 12], ["np.random.rand"], "function", ["None"], ["def", "helper_get_scores", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "scores", "=", "np", ".", "random", ".", "rand", "(", "100", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.test_postprocessors.test_postprocessors_shape": [[14, 32], ["test_postprocessors.helper_get_scores", "postprocessors.items", "postprocessor_cls", "postprocessor_cls.fit_transform"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.postprocessing.test_postprocessors.helper_get_scores", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform"], ["", "def", "test_postprocessors_shape", "(", ")", ":", "\n", "    ", "scores", "=", "helper_get_scores", "(", ")", "\n", "\n", "postprocessors", "=", "{", "\n", "AveragePostprocessor", ":", "{", "}", ",", "\n", "MaxPostprocessor", ":", "{", "}", ",", "\n", "MedianPostprocessor", ":", "{", "}", ",", "\n", "ZScorePostprocessor", ":", "{", "}", ",", "\n", "RunningAveragePostprocessor", ":", "{", "\"window_size\"", ":", "30", "}", ",", "\n", "RunningMaxPostprocessor", ":", "{", "\"window_size\"", ":", "30", "}", ",", "\n", "RunningMedianPostprocessor", ":", "{", "\"window_size\"", ":", "30", "}", ",", "\n", "RunningZScorePostprocessor", ":", "{", "\"window_size\"", ":", "30", "}", ",", "\n", "}", "\n", "\n", "for", "postprocessor_cls", ",", "params_dict", "in", "postprocessors", ".", "items", "(", ")", ":", "\n", "        ", "postprocessor", "=", "postprocessor_cls", "(", "**", "params_dict", ")", "\n", "postprocessed_scores", "=", "postprocessor", ".", "fit_transform", "(", "scores", ")", "\n", "assert", "scores", ".", "shape", "==", "postprocessed_scores", ".", "shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.conformal_prediction.ConformalProbabilityCalibrator.__init__": [[16, 20], ["pysad.utils.window.Window", "pysad.utils.window.UnlimitedWindow"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "windowed", "=", "True", ",", "window_size", "=", "300", ")", ":", "\n", "        ", "self", ".", "windowed", "=", "windowed", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "window", "=", "Window", "(", "window_size", "=", "self", ".", "window_size", ")", "if", "self", ".", "windowed", "else", "UnlimitedWindow", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.conformal_prediction.ConformalProbabilityCalibrator.fit_partial": [[21, 32], ["conformal_prediction.ConformalProbabilityCalibrator.window.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's score to train the postprocessor.\n\n        Args:\n            score (float): Input score.\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "window", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.conformal_prediction.ConformalProbabilityCalibrator.transform_partial": [[33, 43], ["numpy.sum", "len", "conformal_prediction.ConformalProbabilityCalibrator.window.get", "numpy.array", "conformal_prediction.ConformalProbabilityCalibrator.window.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "transform_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Transforms given score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            float: Processed score.\n        \"\"\"", "\n", "return", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "window", ".", "get", "(", ")", ")", ">", "score", ")", ")", "/", "(", "len", "(", "self", ".", "window", ".", "get", "(", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.gaussian_tail.GaussianTailProbabilityCalibrator.__init__": [[17, 27], ["pysad.statistics.running_statistic.RunningStatistic", "pysad.statistics.running_statistic.RunningStatistic", "pysad.statistics.average_meter.AverageMeter", "pysad.statistics.running_statistic.RunningStatistic"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "running_statistics", "=", "True", ",", "window_size", "=", "6400", ")", ":", "\n", "        ", "self", ".", "running_statistics", "=", "running_statistics", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "if", "self", ".", "running_statistics", ":", "\n", "            ", "self", ".", "avg_meter", "=", "RunningStatistic", "(", "AverageMeter", ",", "self", ".", "window_size", ")", "\n", "self", ".", "var_meter", "=", "RunningStatistic", "(", "VarianceMeter", ",", "self", ".", "window_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg_meter", "=", "AverageMeter", "(", ")", "\n", "self", ".", "var_meter", "=", "RunningStatistic", "(", "VarianceMeter", ",", "self", ".", "window_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.gaussian_tail.GaussianTailProbabilityCalibrator.fit_partial": [[28, 40], ["gaussian_tail.GaussianTailProbabilityCalibrator.avg_meter.update", "gaussian_tail.GaussianTailProbabilityCalibrator.var_meter.update"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update"], ["", "", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's score to train the postprocessor.\n\n        Args:\n            score (float): Input score.\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "avg_meter", ".", "update", "(", "score", ")", "\n", "self", ".", "var_meter", ".", "update", "(", "score", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.gaussian_tail.GaussianTailProbabilityCalibrator.transform_partial": [[41, 58], ["gaussian_tail.GaussianTailProbabilityCalibrator.avg_meter.get", "gaussian_tail.GaussianTailProbabilityCalibrator.var_meter.get", "numpy.sqrt", "gaussian_tail.GaussianTailProbabilityCalibrator._qfunction"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.gaussian_tail.GaussianTailProbabilityCalibrator._qfunction"], ["", "def", "transform_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Transforms given score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            float: Processed score.\n        \"\"\"", "\n", "mean", "=", "self", ".", "avg_meter", ".", "get", "(", ")", "\n", "var", "=", "self", ".", "var_meter", ".", "get", "(", ")", "\n", "if", "var", ">", "0", ":", "\n", "            ", "std", "=", "np", ".", "sqrt", "(", "var", ")", "\n", "", "else", ":", "\n", "            ", "std", "=", "1.0", "\n", "\n", "", "return", "1", "-", "self", ".", "_qfunction", "(", "score", ",", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.probability_calibration.gaussian_tail.GaussianTailProbabilityCalibrator._qfunction": [[59, 70], ["math.erfc", "math.sqrt"], "methods", ["None"], ["", "def", "_qfunction", "(", "self", ",", "x", ",", "mean", ",", "std", ")", ":", "\n", "        ", "\"\"\"\n        Given the normal distribution specified by the mean and standard deviation args, return the probability of getting samples > x. Implementation is adapted from the https://github.com/ish-vlad/Conformal-Anomaly-Detection/blob/22769b8d3cede7fabd978a36cdd2853255e450ac/scripts/nab_module/nab/detectors/gaussian/windowedGaussian_detector.py This is the\n        Q-function: the tail probability of the normal distribution.\n        \"\"\"", "\n", "\n", "# Calculate the Q function with the complementary error function, explained", "\n", "# here:", "\n", "# http://www.gaussianwaves.com/2012/07/q-function-and-error-functions", "\n", "z", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "return", "0.5", "*", "math", ".", "erfc", "(", "z", "/", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.PYODScoreEnsembler._combine": [[10, 22], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "_combine", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Abstract method that directly uses  of our framework to be filled.\n\n        Args:\n            scores: np.float array of shape (1, num_scores)\n                List of scores from multiple anomaly detectors.\n\n        Returns:\n            float: Resulting anomaly score.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.PYODScoreEnsembler.fit_partial": [[23, 34], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's score to train the ensembler. For PYOD based ensemblers, this method does not affect anything and returns self directly.\n\n        Args:\n            scores: np.float array of shape (num_anomaly_detectors, )\n                List of scores from multiple anomaly detectors.\n\n        Returns:\n            object: The fitted ensembler.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.PYODScoreEnsembler.transform_partial": [[35, 48], ["scores.reshape.reshape.reshape", "ensemblers.PYODScoreEnsembler._combine"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.MaximumOfAverageScoreEnsembler._combine"], ["", "def", "transform_partial", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Combines anomaly scores from multiple anomaly detectors for a particular timestep.\n\n        Args:\n            scores: np.float array of shape (num_anomaly_detectors, )\n                List of scores from multiple anomaly detectors.\n\n        Returns:\n            float: Resulting anomaly score.\n        \"\"\"", "\n", "scores", "=", "scores", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "_combine", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.AverageScoreEnsembler.__init__": [[58, 61], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "estimator_weights", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "estimator_weights", "=", "estimator_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.AverageScoreEnsembler._combine": [[62, 72], ["pyod.models.combination.average"], "methods", ["None"], ["", "def", "_combine", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Wrapping for PyOD the ensembler.\n\n        Args:\n            scores (np.float array of shape (num_anomaly_detectors, )): List of scores from multiple anomaly detectors.\n\n        Returns:\n            float: Resulting anomaly score.\n        \"\"\"", "\n", "return", "average", "(", "scores", ",", "estimator_weights", "=", "self", ".", "estimator_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.MaximumScoreEnsembler._combine": [[78, 88], ["pyod.models.combination.maximization"], "methods", ["None"], ["def", "_combine", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"\n        Wrapping for PyOD the ensembler.\n        Args:\n            scores (np.float array of shape (num_anomaly_detectors, )) List of scores from multiple anomaly detectors.\n\n        Returns:\n            float: Resulting anomaly score.\n        \"\"\"", "\n", "return", "maximization", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.MedianScoreEnsembler._combine": [[94, 104], ["pyod.models.combination.median"], "methods", ["None"], ["def", "_combine", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"\n        Helper method to wrap the PyOD ensembler.\n        Args:\n            scores (np.float array of shape (num_anomaly_detectors, )) : List of scores from multiple anomaly detectors.\n\n        Returns:\n            float: Resulting anomaly score.\n        \"\"\"", "\n", "return", "median", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.AverageOfMaximumScoreEnsembler.__init__": [[115, 123], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_buckets", "=", "5", ",", "\n", "method", "=", "'static'", ",", "\n", "bootstrap_estimators", "=", "False", ")", ":", "\n", "        ", "self", ".", "method", "=", "method", "\n", "self", ".", "n_buckets", "=", "n_buckets", "\n", "self", ".", "bootstrap_estimators", "=", "bootstrap_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.AverageOfMaximumScoreEnsembler._combine": [[124, 138], ["pyod.models.combination.aom"], "methods", ["None"], ["", "def", "_combine", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Wrapping for PyOD the ensembler.\n\n        Args:\n            scores (np.float array of shape (num_anomaly_detectors, )): List of scores from multiple anomaly detectors.\n\n        Returns:\n            float: Resulting anomaly score.\n        \"\"\"", "\n", "return", "aom", "(", "\n", "scores", ",", "\n", "n_buckets", "=", "self", ".", "n_buckets", ",", "\n", "method", "=", "self", ".", "method", ",", "\n", "bootstrap_estimators", "=", "self", ".", "bootstrap_estimators", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.MaximumOfAverageScoreEnsembler.__init__": [[150, 158], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "n_buckets", "=", "5", ",", "\n", "method", "=", "'static'", ",", "\n", "bootstrap_estimators", "=", "False", ")", ":", "\n", "        ", "self", ".", "method", "=", "method", "\n", "self", ".", "n_buckets", "=", "n_buckets", "\n", "self", ".", "bootstrap_estimators", "=", "bootstrap_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.ensemblers.MaximumOfAverageScoreEnsembler._combine": [[159, 174], ["pyod.models.combination.moa"], "methods", ["None"], ["", "def", "_combine", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"\n        Wrapping for PyOD the ensembler.\n        Args:\n            scores: np.float array of shape (num_anomaly_detectors, )\n                List of scores from multiple anomaly detectors.\n\n        Returns:\n            float: Resulting anomaly score.\n        \"\"\"", "\n", "return", "moa", "(", "\n", "scores", ",", "\n", "n_buckets", "=", "self", ".", "n_buckets", ",", "\n", "method", "=", "self", ".", "method", ",", "\n", "bootstrap_estimators", "=", "self", ".", "bootstrap_estimators", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.ensemble.test_ensemblers.test_ensemblers": [[2, 27], ["np.random.rand", "ensemblers.items", "ensembler_cls", "ensembler_cls().fit.fit_transform", "ensembler_cls().fit", "ensembler_cls().fit.transform", "ensembler_cls"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform"], ["def", "test_ensemblers", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "transform", ".", "ensemble", "import", "AverageScoreEnsembler", ",", "MaximumScoreEnsembler", ",", "MedianScoreEnsembler", ",", "AverageOfMaximumScoreEnsembler", ",", "MaximumOfAverageScoreEnsembler", "\n", "\n", "scores", "=", "np", ".", "random", ".", "rand", "(", "100", ",", "10", ")", "\n", "\n", "ensemblers", "=", "{", "\n", "AverageScoreEnsembler", ":", "{", "}", ",", "\n", "MaximumScoreEnsembler", ":", "{", "}", ",", "\n", "MedianScoreEnsembler", ":", "{", "}", ",", "\n", "AverageOfMaximumScoreEnsembler", ":", "{", "}", ",", "\n", "MaximumOfAverageScoreEnsembler", ":", "{", "}", "\n", "}", "\n", "\n", "for", "ensembler_cls", ",", "params_dict", "in", "ensemblers", ".", "items", "(", ")", ":", "\n", "        ", "ensembler", "=", "ensembler_cls", "(", "**", "params_dict", ")", "\n", "ensembled_scores", "=", "ensembler", ".", "fit_transform", "(", "scores", ")", "\n", "\n", "assert", "ensembled_scores", ".", "shape", "==", "(", "scores", ".", "shape", "[", "0", "]", ",", ")", "\n", "\n", "ensembler", "=", "ensembler_cls", "(", "**", "params_dict", ")", ".", "fit", "(", "scores", ")", "\n", "ensembled_scores", "=", "ensembler", ".", "transform", "(", "scores", ")", "\n", "\n", "assert", "ensembled_scores", ".", "shape", "==", "(", "scores", ".", "shape", "[", "0", "]", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.BaseSKLearnProjector.__init__": [[8, 15], ["pysad.core.base_transformer.BaseTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_components", ")", ":", "\n", "        ", "\"\"\"Abstract base projector class to wrap the random sklearn projectors.\n\n        Args:\n            num_components (int): The number of dimensions that the target will be projected into.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.BaseSKLearnProjector._projector": [[16, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "_projector", "(", "self", ")", ":", "\n", "        ", "\"\"\" Helper property to wrap sklearn projectors.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.BaseSKLearnProjector.fit_partial": [[24, 33], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's features to train the projector.\n\n        Args:\n            X (np.float array of shape (num_components,)): Input feature vector.\n        Returns:\n            object: self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.BaseSKLearnProjector.transform_partial": [[34, 47], ["X.reshape", "random_projector.BaseSKLearnProjector._projector().fit_transform().reshape", "random_projector.BaseSKLearnProjector._projector().fit_transform", "random_projector.BaseSKLearnProjector._projector"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform", "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.SparseRandomProjector._projector"], ["", "def", "transform_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Projects particular (next) timestep's vector to (possibly) lower dimensional space.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            projected_X: np.float array of shape (num_components,)\n                Projected feature vector.\n        \"\"\"", "\n", "x", "=", "X", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "_projector", "(", ")", ".", "fit_transform", "(", "x", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.GaussianRandomProjector.__init__": [[74, 78], ["random_projector.BaseSKLearnProjector.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ",", "num_components", "=", "'auto'", ",", "*", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_components", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "num_components", "=", "num_components", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.GaussianRandomProjector._projector": [[79, 82], ["sklearn.random_projection.GaussianRandomProjection"], "methods", ["None"], ["", "def", "_projector", "(", "self", ")", ":", "\n", "        ", "return", "GaussianRandomProjection", "(", "\n", "n_components", "=", "self", ".", "num_components", ",", "eps", "=", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.SparseRandomProjector.__init__": [[110, 115], ["random_projector.BaseSKLearnProjector.__init__"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ",", "num_components", "=", "'auto'", ",", "density", "=", "\"auto\"", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_components", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "density", "=", "density", "\n", "self", ".", "num_components", "=", "num_components", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.random_projector.SparseRandomProjector._projector": [[116, 122], ["sklearn.random_projection.SparseRandomProjection"], "methods", ["None"], ["", "def", "_projector", "(", "self", ")", ":", "\n", "        ", "return", "SparseRandomProjection", "(", "\n", "n_components", "=", "self", ".", "num_components", ",", "\n", "density", "=", "self", ".", "density", ",", "\n", "eps", "=", "self", ".", "eps", ",", "\n", "dense_output", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.streamhash_projector.StreamhashProjector.__init__": [[13, 19], ["pysad.core.base_transformer.BaseTransformer.__init__", "numpy.arange", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__"], ["def", "__init__", "(", "self", ",", "num_components", ",", "density", "=", "1", "/", "3.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_components", ")", "\n", "self", ".", "keys", "=", "np", ".", "arange", "(", "0", ",", "num_components", ",", "1", ")", "\n", "self", ".", "constant", "=", "np", ".", "sqrt", "(", "1.", "/", "density", ")", "/", "np", ".", "sqrt", "(", "num_components", ")", "\n", "self", ".", "density", "=", "density", "\n", "self", ".", "n_components", "=", "num_components", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.streamhash_projector.StreamhashProjector.fit_partial": [[20, 30], ["None"], "methods", ["None"], ["", "def", "fit_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's features to train the projector.\n\n        Args:\n            X (np.float array of shape (n_components,)): Input feature vector.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.streamhash_projector.StreamhashProjector.transform_partial": [[31, 53], ["X.reshape.reshape.reshape", "numpy.array", "numpy.dot().squeeze", "str", "range", "numpy.dot", "streamhash_projector.StreamhashProjector._hash_string"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.projection.streamhash_projector.StreamhashProjector._hash_string"], ["", "def", "transform_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Projects particular (next) timestep's vector to (possibly) lower dimensional space.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            projected_X (np.float array of shape (num_components,)): Projected feature vector.\n        \"\"\"", "\n", "X", "=", "X", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "ndim", "=", "X", ".", "shape", "[", "1", "]", "\n", "\n", "feature_names", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "ndim", ")", "]", "\n", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "self", ".", "_hash_string", "(", "k", ",", "f", ")", "\n", "for", "f", "in", "feature_names", "]", "\n", "for", "k", "in", "self", ".", "keys", "]", ")", "\n", "\n", "Y", "=", "np", ".", "dot", "(", "X", ",", "R", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.streamhash_projector.StreamhashProjector._hash_string": [[54, 64], ["int", "mmh3.hash"], "methods", ["None"], ["", "def", "_hash_string", "(", "self", ",", "k", ",", "s", ")", ":", "\n", "        ", "import", "mmh3", "\n", "hash_value", "=", "int", "(", "mmh3", ".", "hash", "(", "s", ",", "signed", "=", "False", ",", "seed", "=", "k", ")", ")", "/", "(", "2.0", "**", "32", "-", "1", ")", "\n", "s", "=", "self", ".", "density", "\n", "if", "hash_value", "<=", "s", "/", "2.0", ":", "\n", "            ", "return", "-", "1", "*", "self", ".", "constant", "\n", "", "elif", "hash_value", "<=", "s", ":", "\n", "            ", "return", "self", ".", "constant", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.test_sklearn_projectors.test_gaussian_random_projector": [[3, 11], ["GaussianRandomProjector", "test_sklearn_projectors.helper_test_projector"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.projection.test_sklearn_projectors.helper_test_projector"], ["def", "test_gaussian_random_projector", "(", "test_path", ")", ":", "\n", "    ", "from", "pysad", ".", "transform", ".", "projection", "import", "GaussianRandomProjector", "\n", "\n", "for", "num_components", "in", "[", "2", ",", "50", ",", "250", "]", ":", "\n", "\n", "        ", "projector", "=", "GaussianRandomProjector", "(", "num_components", "=", "num_components", ")", "\n", "\n", "helper_test_projector", "(", "test_path", ",", "projector", ",", "num_components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.test_sklearn_projectors.test_sparse_random_projector": [[13, 21], ["SparseRandomProjector", "test_sklearn_projectors.helper_test_projector"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.projection.test_sklearn_projectors.helper_test_projector"], ["", "", "def", "test_sparse_random_projector", "(", "test_path", ")", ":", "\n", "    ", "from", "pysad", ".", "transform", ".", "projection", "import", "SparseRandomProjector", "\n", "\n", "for", "num_components", "in", "[", "2", ",", "50", ",", "250", "]", ":", "\n", "\n", "        ", "projector", "=", "SparseRandomProjector", "(", "num_components", "=", "num_components", ")", "\n", "\n", "helper_test_projector", "(", "test_path", ",", "projector", ",", "num_components", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.test_sklearn_projectors.helper_test_projector": [[23, 35], ["Data", "Data.get_data", "shuffle", "projector.fit_transform", "os.path.join"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.get_data", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform"], ["", "", "def", "helper_test_projector", "(", "test_path", ",", "projector", ",", "num_components", ")", ":", "\n", "    ", "import", "os", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "from", "pysad", ".", "utils", "import", "Data", "\n", "\n", "data", "=", "Data", "(", "os", ".", "path", ".", "join", "(", "test_path", ",", "\"../../../examples/data\"", ")", ")", "\n", "\n", "X_all", ",", "y_all", "=", "data", ".", "get_data", "(", "\"arrhythmia.mat\"", ")", "\n", "X_all", ",", "y_all", "=", "shuffle", "(", "X_all", ",", "y_all", ")", "\n", "projected_X", "=", "projector", ".", "fit_transform", "(", "X_all", ")", "\n", "\n", "assert", "projected_X", ".", "shape", "==", "(", "X_all", ".", "shape", "[", "0", "]", ",", "num_components", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.test_streamhash_projector.test_streamhash_projector": [[3, 20], ["Data", "Data.get_data", "shuffle", "StreamhashProjector", "StreamhashProjector.fit_transform", "os.path.join"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.data.Data.get_data", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform"], ["def", "test_streamhash_projector", "(", "test_path", ")", ":", "\n", "    ", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "from", "pysad", ".", "utils", "import", "Data", "\n", "import", "os", "\n", "from", "pysad", ".", "transform", ".", "projection", "import", "StreamhashProjector", "\n", "\n", "for", "num_components", "in", "[", "2", ",", "50", ",", "250", "]", ":", "\n", "        ", "data", "=", "Data", "(", "os", ".", "path", ".", "join", "(", "test_path", ",", "\"../../../examples/data\"", ")", ")", "\n", "\n", "X_all", ",", "y_all", "=", "data", ".", "get_data", "(", "\"arrhythmia.mat\"", ")", "\n", "X_all", ",", "y_all", "=", "shuffle", "(", "X_all", ",", "y_all", ")", "\n", "\n", "projector", "=", "StreamhashProjector", "(", "num_components", "=", "num_components", ")", "\n", "\n", "projected_X", "=", "projector", ".", "fit_transform", "(", "X_all", ")", "\n", "\n", "assert", "projected_X", ".", "shape", "==", "(", "X_all", ".", "shape", "[", "0", "]", ",", "num_components", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.projection.conftest.test_path": [[5, 8], ["os.path.dirname", "os.path.abspath"], "function", ["None"], ["@", "pytest", ".", "fixture", "\n", "def", "test_path", "(", ")", ":", "# adapted from https://github.com/scikit-multiflow/scikit-multiflow/blob/master/tests/anomaly_detection/test_half_space_trees.py", "\n", "    ", "return", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.windowed_metric.WindowedMetric.__init__": [[14, 30], ["pysad.core.base_metric.BaseMetric.__init__", "windowed_metric.WindowedMetric._init_metric", "pysad.statistics.average_meter.AverageMeter"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__", "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.windowed_metric.WindowedMetric._init_metric"], ["def", "__init__", "(", "\n", "self", ",", "\n", "metric_cls", ",", "\n", "window_size", ",", "\n", "ignore_nonempty_last", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_nonempty_last", "=", "ignore_nonempty_last", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "metric_cls", "=", "metric_cls", "\n", "\n", "self", ".", "metric", "=", "self", ".", "_init_metric", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "score_meter", "=", "AverageMeter", "(", ")", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "num_windows", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.windowed_metric.WindowedMetric._init_metric": [[31, 34], ["windowed_metric.WindowedMetric.metric_cls"], "methods", ["None"], ["", "def", "_init_metric", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "return", "self", ".", "metric_cls", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.windowed_metric.WindowedMetric.update": [[35, 57], ["windowed_metric.WindowedMetric.metric.update", "windowed_metric.WindowedMetric.metric.get", "windowed_metric.WindowedMetric.score_meter.update", "windowed_metric.WindowedMetric._init_metric"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.windowed_metric.WindowedMetric._init_metric"], ["", "def", "update", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"Updates the score with new true label and predicted score/label.\n\n        Args:\n            y_true : float\n                The ground truth score for the incoming instance.\n            y_pred : float\n                The predicted score for the incoming instance.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "self", ".", "step", "+=", "1", "\n", "self", ".", "metric", ".", "update", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "if", "self", ".", "step", "%", "self", ".", "window_size", "==", "0", ":", "\n", "            ", "self", ".", "num_windows", "+=", "1", "\n", "score", "=", "self", ".", "metric", ".", "get", "(", ")", "\n", "self", ".", "score_meter", ".", "update", "(", "score", ")", "\n", "self", ".", "metric", "=", "self", ".", "_init_metric", "(", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.windowed_metric.WindowedMetric.get": [[58, 70], ["windowed_metric.WindowedMetric.metric.get", "windowed_metric.WindowedMetric.score_meter.get", "windowed_metric.WindowedMetric.metric.get", "windowed_metric.WindowedMetric.score_meter.get"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Obtains the averaged score.\n\n        Returns:\n            float: The average score of the windows.\n        \"\"\"", "\n", "if", "self", ".", "num_windows", "==", "1", ":", "\n", "            ", "return", "self", ".", "metric", ".", "get", "(", ")", "\n", "", "elif", "not", "self", ".", "ignore_nonempty_last", "and", "self", ".", "step", "%", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "return", "(", "self", ".", "metric", ".", "get", "(", ")", "+", "self", ".", "score_meter", ".", "get", "(", ")", "*", "(", "self", ".", "num_windows", "-", "1", ")", ")", "/", "self", ".", "num_windows", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "score_meter", ".", "get", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.BaseSKLearnMetric.__init__": [[10, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "y_true", "=", "[", "]", "\n", "self", ".", "y_pred", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.BaseSKLearnMetric.update": [[14, 23], ["metrics.BaseSKLearnMetric.y_true.append", "metrics.BaseSKLearnMetric.y_pred.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"Updates the metric with given true and predicted value for a timestep.\n\n        Args:\n            y_true (int): Ground truth class. Either 1 or 0.\n            y_pred (float): Predicted class or anomaly score. Higher values correspond to more anomalousness and lower values correspond to more normalness.\n        \"\"\"", "\n", "self", ".", "y_true", ".", "append", "(", "y_true", ")", "\n", "self", ".", "y_pred", ".", "append", "(", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.BaseSKLearnMetric.get": [[24, 33], ["metrics.BaseSKLearnMetric._evaluate"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.AUPRMetric._evaluate"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the current value of the score.\n\n        Returns:\n            float: The current score.\n        \"\"\"", "\n", "score", "=", "self", ".", "_evaluate", "(", "self", ".", "y_true", ",", "self", ".", "y_pred", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.BaseSKLearnMetric._evaluate": [[34, 43], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_evaluate", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"Abstract method to be filled with the sklearn metric.\n\n        Args:\n            y_true (list[int]): Ground truth classes.\n            y_pred (list[float]): Predicted classes or scores.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.PrecisionMetric._evaluate": [[49, 51], ["sklearn.metrics.precision_score"], "methods", ["None"], ["def", "_evaluate", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.RecallMetric._evaluate": [[57, 59], ["sklearn.metrics.recall_score"], "methods", ["None"], ["def", "_evaluate", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "recall_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.AUROCMetric._evaluate": [[65, 67], ["sklearn.metrics.roc_auc_score"], "methods", ["None"], ["def", "_evaluate", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.metrics.AUPRMetric._evaluate": [[73, 75], ["sklearn.metrics.average_precision_score"], "methods", ["None"], ["def", "_evaluate", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "average_precision_score", "(", "y_true", ",", "y_pred", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_windowed_metrics.helper_test_all_metrics": [[2, 13], ["metric_classes.items", "WindowedMetric", "enumerate", "zip", "WindowedMetric.update", "np.isclose", "WindowedMetric.get"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["def", "helper_test_all_metrics", "(", "metric_classes", ",", "y_true", ",", "y_pred", ",", "ignore_nonempty_last", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "evaluation", "import", "WindowedMetric", "\n", "\n", "for", "metric_cls", ",", "val", "in", "metric_classes", ".", "items", "(", ")", ":", "\n", "        ", "metric", "=", "WindowedMetric", "(", "metric_cls", ",", "25", ",", "ignore_nonempty_last", ")", "\n", "\n", "for", "i", ",", "(", "yt", ",", "yp", ")", "in", "enumerate", "(", "zip", "(", "y_true", ",", "y_pred", ")", ")", ":", "\n", "            ", "metric", ".", "update", "(", "yt", ",", "yp", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "assert", "np", ".", "isclose", "(", "metric", ".", "get", "(", ")", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_windowed_metrics.test_all_correct": [[15, 32], ["np.random.randint", "np.random.randint.copy", "test_windowed_metrics.helper_test_all_metrics"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_metrics.helper_test_all_metrics"], ["", "", "", "", "def", "test_all_correct", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "evaluation", "import", "PrecisionMetric", ",", "AUPRMetric", ",", "AUROCMetric", ",", "RecallMetric", "\n", "import", "numpy", "as", "np", "\n", "metric_classes", "=", "[", "\n", "PrecisionMetric", ",", "\n", "RecallMetric", ",", "\n", "AUPRMetric", ",", "\n", "AUROCMetric", "\n", "]", "\n", "metric_classes", "=", "{", "metric_cls", ":", "1.0", "for", "metric_cls", "in", "metric_classes", "}", "\n", "y_true", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "(", "25", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "y_true", "[", "0", "]", "=", "1", "\n", "y_true", "[", "1", "]", "=", "0", "\n", "y_pred", "=", "y_true", ".", "copy", "(", ")", "\n", "\n", "for", "ignore_nonempty_last", "in", "[", "True", ",", "False", "]", ":", "\n", "        ", "helper_test_all_metrics", "(", "metric_classes", ",", "y_true", ",", "y_pred", ",", "ignore_nonempty_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_windowed_metrics.test_none_correct": [[34, 51], ["np.random.randint", "np.random.randint.copy", "test_windowed_metrics.helper_test_all_metrics"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_metrics.helper_test_all_metrics"], ["", "", "def", "test_none_correct", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "evaluation", "import", "PrecisionMetric", ",", "AUPRMetric", ",", "AUROCMetric", ",", "RecallMetric", "\n", "import", "numpy", "as", "np", "\n", "\n", "metric_classes", "=", "{", "\n", "PrecisionMetric", ":", "0.0", ",", "\n", "#AUPRMetric: 0.5", "\n", "AUROCMetric", ":", "0.0", ",", "\n", "RecallMetric", ":", "0.0", "\n", "}", "\n", "y_true", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "(", "25", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "y_true", "[", "0", "]", "=", "1", "\n", "y_true", "[", "1", "]", "=", "0", "\n", "y_pred", "=", "1", "-", "y_true", ".", "copy", "(", ")", "\n", "\n", "for", "ignore_nonempty_last", "in", "[", "True", ",", "False", "]", ":", "\n", "        ", "helper_test_all_metrics", "(", "metric_classes", ",", "y_true", ",", "y_pred", ",", "ignore_nonempty_last", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_metrics.helper_test_all_metrics": [[2, 12], ["metric_classes.items", "metric_cls", "enumerate", "zip", "metric_cls.update", "np.isclose", "metric_cls.get"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["def", "helper_test_all_metrics", "(", "metric_classes", ",", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "\n", "for", "metric_cls", ",", "val", "in", "metric_classes", ".", "items", "(", ")", ":", "\n", "        ", "metric", "=", "metric_cls", "(", ")", "\n", "\n", "for", "i", ",", "(", "yt", ",", "yp", ")", "in", "enumerate", "(", "zip", "(", "y_true", ",", "y_pred", ")", ")", ":", "\n", "            ", "metric", ".", "update", "(", "yt", ",", "yp", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "assert", "np", ".", "isclose", "(", "metric", ".", "get", "(", ")", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_metrics.test_all_correct": [[14, 33], ["fix_seed", "np.random.randint", "np.random.randint.copy", "test_metrics.helper_test_all_metrics"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_metrics.helper_test_all_metrics"], ["", "", "", "", "def", "test_all_correct", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "evaluation", "import", "PrecisionMetric", ",", "AUPRMetric", ",", "AUROCMetric", ",", "RecallMetric", "\n", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "metric_classes", "=", "[", "\n", "PrecisionMetric", ",", "\n", "RecallMetric", ",", "\n", "AUPRMetric", ",", "\n", "AUROCMetric", "\n", "]", "\n", "metric_classes", "=", "{", "metric_cls", ":", "1.0", "for", "metric_cls", "in", "metric_classes", "}", "\n", "y_true", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "(", "25", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "y_true", "[", "0", "]", "=", "1", "\n", "y_true", "[", "1", "]", "=", "0", "\n", "y_pred", "=", "y_true", ".", "copy", "(", ")", "\n", "\n", "helper_test_all_metrics", "(", "metric_classes", ",", "y_true", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_metrics.test_none_correct": [[35, 53], ["fix_seed", "np.random.randint", "test_metrics.helper_test_all_metrics", "np.random.randint.copy"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.evaluation.test_metrics.helper_test_all_metrics"], ["", "def", "test_none_correct", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "evaluation", "import", "PrecisionMetric", ",", "AUPRMetric", ",", "AUROCMetric", ",", "RecallMetric", "\n", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "metric_classes", "=", "{", "\n", "PrecisionMetric", ":", "0.0", ",", "\n", "#AUPRMetric: 0.5", "\n", "AUROCMetric", ":", "0.0", ",", "\n", "RecallMetric", ":", "0.0", "\n", "}", "\n", "y_true", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "(", "25", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "y_true", "[", "0", "]", "=", "1", "\n", "y_true", "[", "1", "]", "=", "0", "\n", "y_pred", "=", "1", "-", "y_true", ".", "copy", "(", ")", "\n", "\n", "helper_test_all_metrics", "(", "metric_classes", ",", "y_true", ",", "y_pred", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_metric.BaseMetric.__init__": [[8, 10], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "score", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_metric.BaseMetric.update": [[11, 20], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"Updates the metric with given true and predicted value for a timestep.\n\n        Args:\n            y_true (int): Ground truth class. Either 1 or 0.\n            y_pred (float): Predicted class or anomaly score. Higher values correspond to more anomalousness and lower values correspond to more normalness.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_metric.BaseMetric.get": [[21, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets the current value of the score. Note that some methods such as AUPR and AUROC gives exception when used with only one class exist in the list of previous y_trues.\n\n        Returns:\n            float: The current score.\n        \"\"\"", "\n", "return", "self", ".", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_transformer.BaseTransformer.__init__": [[10, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_dims", ")", ":", "\n", "        ", "self", ".", "output_dims", "=", "output_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_transformer.BaseTransformer.fit_partial": [[13, 23], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's features to train the transformer.\n\n        Args:\n            X (np.float array of shape (num_components,)): Input feature vector.\n        Returns:\n            object: self.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_transformer.BaseTransformer.transform_partial": [[24, 35], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "transform_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Transforms particular (next) timestep's vector.\n\n        Args:\n            X (np.float array of shape (num_features,)): Input feature vector.\n\n        Returns:\n            transformed_X (np.float array of shape (num_components,)): Projected feature vector.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_transformer.BaseTransformer.fit_transform_partial": [[36, 46], ["base_transformer.BaseTransformer.fit_partial().transform_partial", "base_transformer.BaseTransformer.fit_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial"], ["", "def", "fit_transform_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies fit_partial and transform_partial, respectively.\n\n        Args:\n            X (np.float array of shape (num_components,)): Input feature vector.\n\n        Returns:\n            transformed_X (np.float array of shape (num_components,)): Projected feature vector.\n        \"\"\"", "\n", "return", "self", ".", "fit_partial", "(", "X", ")", ".", "transform_partial", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_transformer.BaseTransformer.transform": [[47, 62], ["numpy.empty", "enumerate", "pysad.utils._iterate", "base_transformer.BaseTransformer.transform_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform_partial"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies transform_partial to all instances in order.\n\n        Args:\n            X (np.float array of shape (num_instances, num_features)): Input feature vectors.\n\n        Returns:\n            np.float array of shape (num_instances, num_components): Projected feature vectors.\n        \"\"\"", "\n", "output_dims", "=", "self", ".", "output_dims", "if", "self", ".", "output_dims", ">", "0", "else", "X", ".", "shape", "[", "1", "]", "\n", "transformed_X", "=", "np", ".", "empty", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "output_dims", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "(", "xi", ",", "_", ")", "in", "enumerate", "(", "_iterate", "(", "X", ")", ")", ":", "\n", "            ", "transformed_X", "[", "i", "]", "=", "self", ".", "transform_partial", "(", "xi", ")", "\n", "\n", "", "return", "transformed_X", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_transformer.BaseTransformer.fit": [[63, 76], ["pysad.utils._iterate", "base_transformer.BaseTransformer.fit_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies fit_partial to all instances in order.\n\n        Args:\n            X (np.float array of shape (num_instances, num_features)): Input feature vectors.\n\n        Returns:\n            object: The fitted transformer\n        \"\"\"", "\n", "for", "xi", "in", "_iterate", "(", "X", ")", ":", "\n", "            ", "self", ".", "fit_partial", "(", "xi", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_transformer.BaseTransformer.fit_transform": [[77, 92], ["numpy.empty", "enumerate", "pysad.utils._iterate", "base_transformer.BaseTransformer.fit_transform_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform_partial"], ["", "def", "fit_transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies fit_transform_partial to all instances in order.\n\n        Args:\n            X (np.float array of shape (num_instances, num_components)): Input feature vectors.\n\n        Returns:\n            np.float array of shape (num_instances, num_components): Projected feature vectors.\n        \"\"\"", "\n", "output_dims", "=", "self", ".", "output_dims", "if", "self", ".", "output_dims", ">", "0", "else", "X", ".", "shape", "[", "1", "]", "\n", "transformed_X", "=", "np", ".", "empty", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "output_dims", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "(", "xi", ",", "_", ")", "in", "enumerate", "(", "_iterate", "(", "X", ")", ")", ":", "\n", "            ", "transformed_X", "[", "i", "]", "=", "self", ".", "fit_transform_partial", "(", "xi", ")", "\n", "\n", "", "return", "transformed_X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_partial": [[10, 21], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "fit_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Fits particular (next) timestep's score to train the postprocessor.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform_partial": [[22, 33], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "transform_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Transforms given score.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            float: Processed score.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform_partial": [[34, 44], ["base_postprocessor.BasePostprocessor.fit_partial().transform_partial", "base_postprocessor.BasePostprocessor.fit_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial"], ["", "def", "fit_transform_partial", "(", "self", ",", "score", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies fit_partial and transform_partial, respectively.\n\n        Args:\n            score (float): Input score.\n\n        Returns:\n            float: Processed score.\n        \"\"\"", "\n", "return", "self", ".", "fit_partial", "(", "score", ")", ".", "transform_partial", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform": [[45, 59], ["numpy.empty", "enumerate", "pysad.utils._iterate", "base_postprocessor.BasePostprocessor.transform_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.transform_partial"], ["", "def", "transform", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies transform_partial to all instances in order.\n\n        Args:\n            np.float array of shape (num_instances,): Input scores.\n\n        Returns:\n            np.float array of shape (num_instances,): Processed scores.\n        \"\"\"", "\n", "processed_scores", "=", "np", ".", "empty", "(", "scores", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "(", "score", ",", "_", ")", "in", "enumerate", "(", "_iterate", "(", "scores", ")", ")", ":", "\n", "            ", "processed_scores", "[", "i", "]", "=", "self", ".", "transform_partial", "(", "score", ")", "\n", "\n", "", "return", "processed_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit": [[60, 73], ["enumerate", "pysad.utils._iterate", "base_postprocessor.BasePostprocessor.fit_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial"], ["", "def", "fit", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies fit_partial to all instances in order.\n\n        Args:\n            np.float array of shape (num_instances,): Input scores.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "for", "i", ",", "(", "score", ",", "_", ")", "in", "enumerate", "(", "_iterate", "(", "scores", ")", ")", ":", "\n", "            ", "self", ".", "fit_partial", "(", "score", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform": [[74, 88], ["numpy.empty", "enumerate", "pysad.utils._iterate", "base_postprocessor.BasePostprocessor.fit_transform_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform_partial"], ["", "def", "fit_transform", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Shortcut method that iteratively applies fit_transform_partial to all instances in order.\n\n        Args:\n            np.float array of shape (num_instances,): Input scores.\n\n        Returns:\n            np.float array of shape (num_instances,): Processed scores.\n        \"\"\"", "\n", "processed_scores", "=", "np", ".", "empty", "(", "scores", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "(", "score", ",", "_", ")", "in", "enumerate", "(", "_iterate", "(", "scores", ")", ")", ":", "\n", "            ", "processed_scores", "[", "i", "]", "=", "self", ".", "fit_transform_partial", "(", "score", ")", "\n", "\n", "", "return", "processed_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update": [[14, 25], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "update", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic with the value for a timestep.\n\n        Args:\n            num (float):  The incoming value, for which the statistic is used.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get": [[26, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Method to obtain the tracked statistic.\n\n        Returns:\n            float: The statistic.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove": [[35, 46], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "remove", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"Updates the statistic by removing particular value. This method\n\n        Args:\n            num (float): The value to be removed.\n\n        Returns:\n            object: self.\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial": [[10, 22], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "fit_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit.\n            y (int): The label of the instance (Optional for unsupervised models, default=None).\n\n        Returns:\n            object: Returns the self.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score_partial": [[23, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "score_partial", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores the anomalousness of the next instance.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to score. Higher scores represent more anomalous instances whereas lower scores correspond to more normal instances.\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_score_partial": [[35, 46], ["base_model.BaseModel.fit_partial().score_partial", "base_model.BaseModel.fit_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score_partial", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial"], ["", "def", "fit_score_partial", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Applies fit_partial and score_partial to the next instance, respectively.\n\n        Args:\n            X (np.float array of shape (num_features,)): The instance to fit and score.\n            y (int): The label of the instance (Optional for unsupervised models, default=None).\n\n        Returns:\n            float: The anomalousness score of the input instance.\n        \"\"\"", "\n", "return", "self", ".", "fit_partial", "(", "X", ",", "y", ")", ".", "score_partial", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit": [[47, 61], ["pysad.utils._iterate", "base_model.BaseModel.fit_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_partial"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fits the model to all instances in order.\n\n        Args:\n            X (np.float array of shape (num_instances, num_features)): The instances in order to fit.\n            y (int): The labels of the instances in order to fit (Optional for unsupervised models, default=None).\n\n        Returns:\n            object: Fitted model.\n        \"\"\"", "\n", "for", "xi", ",", "yi", "in", "_iterate", "(", "X", ",", "y", ")", ":", "\n", "            ", "self", ".", "fit_partial", "(", "xi", ",", "yi", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score": [[62, 76], ["numpy.empty", "enumerate", "pysad.utils._iterate", "base_model.BaseModel.score_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.score_partial"], ["", "def", "score", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Scores all instaces via score_partial iteratively.\n\n        Args:\n            X (np.float array of shape (num_instances, num_features)): The instances in order to score.\n\n        Returns:\n            np.float array of shape (num_instances,): The anomalousness scores of the instances in order.\n        \"\"\"", "\n", "y_pred", "=", "np", ".", "empty", "(", "X", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "(", "xi", ",", "_", ")", "in", "enumerate", "(", "_iterate", "(", "X", ")", ")", ":", "\n", "            ", "y_pred", "[", "i", "]", "=", "self", ".", "score_partial", "(", "xi", ")", "\n", "\n", "", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_score": [[77, 92], ["numpy.zeros", "enumerate", "pysad.utils._iterate", "base_model.BaseModel.fit_score_partial"], "methods", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__._iterate", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit_score_partial"], ["", "def", "fit_score", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"This helper method applies fit_score_partial to all instances in order.\n\n        Args:\n            X (np.float array of shape (num_instances, num_features)): The instances in order to fit.\n            y (np.int array of shape (num_instances, )): The labels of the instances in order to fit (Optional for unsupervised models, default=None).\n\n        Returns:\n            np.float array of shape (num_instances,): The anomalousness scores of the instances in order.\n        \"\"\"", "\n", "y_pred", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "(", "xi", ",", "yi", ")", "in", "enumerate", "(", "_iterate", "(", "X", ",", "y", ")", ")", ":", "\n", "            ", "y_pred", "[", "i", "]", "=", "self", ".", "fit_score_partial", "(", "xi", ",", "yi", ")", "\n", "\n", "", "return", "y_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_streamer.BaseStreamer.iter": [[15, 24], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "iter", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"Method that iterates array of data and (optionally) labels.\n\n        Args:\n            X (np.array of shape (num_instances, num_features)): The features of instances to iterate.\n            y: (Optional, default=None) If not None, iterates labels with the same order.\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.stats.test_statistics.test_all_zero_stats": [[5, 57], ["fix_seed", "stat_classes.items", "stat_cls", "pysad.statistics.abs_statistic.AbsStatistic", "pysad.statistics.running_statistic.RunningStatistic", "np.zeros", "range", "stat_cls.update", "pysad.statistics.abs_statistic.AbsStatistic.update", "pysad.statistics.running_statistic.RunningStatistic.update", "stat_cls.get", "np.isclose", "np.isclose", "np.isclose", "stat_cls.remove", "pysad.statistics.abs_statistic.AbsStatistic.remove", "np.isclose", "np.isclose", "stat_cls.update", "pysad.statistics.abs_statistic.AbsStatistic.update", "stat_cls.get", "pysad.statistics.abs_statistic.AbsStatistic.get", "pysad.statistics.running_statistic.RunningStatistic.get", "stat_cls.get", "pysad.statistics.abs_statistic.AbsStatistic.get", "abs", "min"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["def", "test_all_zero_stats", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "statistics", "import", "AbsStatistic", "\n", "from", "pysad", ".", "statistics", "import", "RunningStatistic", "\n", "from", "pysad", ".", "statistics", "import", "AverageMeter", "\n", "from", "pysad", ".", "statistics", "import", "CountMeter", "\n", "from", "pysad", ".", "statistics", "import", "MaxMeter", "\n", "from", "pysad", ".", "statistics", "import", "MedianMeter", "\n", "from", "pysad", ".", "statistics", "import", "MinMeter", "\n", "from", "pysad", ".", "statistics", "import", "SumMeter", "\n", "from", "pysad", ".", "statistics", "import", "SumSquaresMeter", "\n", "from", "pysad", ".", "statistics", "import", "VarianceMeter", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "num_items", "=", "100", "\n", "stat_classes", "=", "{", "\n", "AverageMeter", ":", "0.0", ",", "\n", "CountMeter", ":", "\"count\"", ",", "\n", "MaxMeter", ":", "0.0", ",", "\n", "MedianMeter", ":", "0.0", ",", "\n", "MinMeter", ":", "0.0", ",", "\n", "SumMeter", ":", "0.0", ",", "\n", "SumSquaresMeter", ":", "0.0", ",", "\n", "VarianceMeter", ":", "0.0", "\n", "}", "\n", "\n", "for", "stat_cls", ",", "val", "in", "stat_classes", ".", "items", "(", ")", ":", "\n", "        ", "stat", "=", "stat_cls", "(", ")", "\n", "abs_stat", "=", "AbsStatistic", "(", "stat_cls", ")", "\n", "window_size", "=", "25", "\n", "running_stat", "=", "RunningStatistic", "(", "stat_cls", ",", "window_size", "=", "window_size", ")", "\n", "arr", "=", "np", ".", "zeros", "(", "num_items", ",", "dtype", "=", "np", ".", "float", ")", "\n", "prev_value", "=", "0.0", "\n", "for", "i", "in", "range", "(", "arr", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "num", "=", "arr", "[", "i", "]", "\n", "stat", ".", "update", "(", "num", ")", "\n", "abs_stat", ".", "update", "(", "num", ")", "\n", "running_stat", ".", "update", "(", "num", ")", "\n", "if", "i", ">", "1", ":", "# for variance meter.", "\n", "                ", "assert", "np", ".", "isclose", "(", "stat", ".", "get", "(", ")", ",", "val", "if", "val", "!=", "\"count\"", "else", "i", "+", "1", ")", "\n", "assert", "np", ".", "isclose", "(", "abs_stat", ".", "get", "(", ")", ",", "val", "if", "val", "!=", "\"count\"", "else", "i", "+", "1", ")", "\n", "assert", "np", ".", "isclose", "(", "running_stat", ".", "get", "(", ")", ",", "val", "if", "val", "!=", "\"count\"", "else", "min", "(", "i", "+", "1", ",", "window_size", ")", ")", "\n", "\n", "stat", ".", "remove", "(", "num", ")", "\n", "abs_stat", ".", "remove", "(", "num", ")", "\n", "assert", "np", ".", "isclose", "(", "stat", ".", "get", "(", ")", ",", "prev_value", ")", "\n", "assert", "np", ".", "isclose", "(", "abs_stat", ".", "get", "(", ")", ",", "abs", "(", "prev_value", ")", ")", "\n", "stat", ".", "update", "(", "num", ")", "\n", "abs_stat", ".", "update", "(", "num", ")", "\n", "\n", "", "prev_value", "=", "stat", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.selimfirat_pysad.stats.test_statistics.test_stats_with_batch_numpy": [[59, 115], ["fix_seed", "stat_classes.items", "stat_cls", "pysad.statistics.abs_statistic.AbsStatistic", "pysad.statistics.running_statistic.RunningStatistic", "np.random.rand", "range", "np.sum", "stat_cls.update", "pysad.statistics.abs_statistic.AbsStatistic.update", "pysad.statistics.running_statistic.RunningStatistic.update", "stat_cls.remove", "pysad.statistics.abs_statistic.AbsStatistic.remove", "stat_cls.update", "pysad.statistics.abs_statistic.AbsStatistic.update", "stat_cls.get", "np.isclose", "np.isclose", "np.isclose", "np.isclose", "np.isclose", "stat_cls.get", "val", "pysad.statistics.running_statistic.RunningStatistic.get", "val", "abs", "pysad.statistics.abs_statistic.AbsStatistic.get", "stat_cls.get", "pysad.statistics.abs_statistic.AbsStatistic.get", "abs", "stat_cls.get", "max"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.remove", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.update", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_statistic.UnivariateStatistic.get"], ["", "", "", "def", "test_stats_with_batch_numpy", "(", ")", ":", "\n", "\n", "    ", "from", "pysad", ".", "statistics", "import", "AverageMeter", "\n", "from", "pysad", ".", "statistics", "import", "CountMeter", "\n", "from", "pysad", ".", "statistics", "import", "MaxMeter", "\n", "from", "pysad", ".", "statistics", "import", "MedianMeter", "\n", "from", "pysad", ".", "statistics", "import", "MinMeter", "\n", "from", "pysad", ".", "statistics", "import", "SumMeter", "\n", "from", "pysad", ".", "statistics", "import", "SumSquaresMeter", "\n", "from", "pysad", ".", "statistics", "import", "VarianceMeter", "\n", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "num_items", "=", "100", "\n", "stat_classes", "=", "{", "\n", "AverageMeter", ":", "np", ".", "mean", ",", "\n", "CountMeter", ":", "len", ",", "\n", "MaxMeter", ":", "np", ".", "max", ",", "\n", "MedianMeter", ":", "np", ".", "median", ",", "\n", "MinMeter", ":", "np", ".", "min", ",", "\n", "SumMeter", ":", "np", ".", "sum", ",", "\n", "SumSquaresMeter", ":", "lambda", "x", ":", "np", ".", "sum", "(", "x", "**", "2", ")", ",", "\n", "VarianceMeter", ":", "np", ".", "var", "\n", "}", "\n", "\n", "for", "stat_cls", ",", "val", "in", "stat_classes", ".", "items", "(", ")", ":", "\n", "        ", "stat", "=", "stat_cls", "(", ")", "\n", "abs_stat", "=", "AbsStatistic", "(", "stat_cls", ")", "\n", "window_size", "=", "25", "\n", "running_stat", "=", "RunningStatistic", "(", "stat_cls", ",", "window_size", "=", "window_size", ")", "\n", "\n", "arr", "=", "np", ".", "random", ".", "rand", "(", "num_items", ")", "\n", "prev_value", "=", "0.0", "\n", "for", "i", "in", "range", "(", "arr", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "num", "=", "arr", "[", "i", "]", "\n", "stat", ".", "update", "(", "num", ")", "\n", "abs_stat", ".", "update", "(", "num", ")", "\n", "running_stat", ".", "update", "(", "num", ")", "\n", "\n", "if", "i", ">", "1", ":", "# for variance meter.", "\n", "                ", "assert", "np", ".", "isclose", "(", "stat", ".", "get", "(", ")", ",", "val", "(", "arr", "[", ":", "i", "+", "1", "]", ")", ")", "\n", "assert", "np", ".", "isclose", "(", "running_stat", ".", "get", "(", ")", ",", "val", "(", "arr", "[", "max", "(", "0", ",", "i", "-", "window_size", "+", "1", ")", ":", "i", "+", "1", "]", ")", ")", "\n", "assert", "np", ".", "isclose", "(", "abs", "(", "stat", ".", "get", "(", ")", ")", ",", "abs_stat", ".", "get", "(", ")", ")", "\n", "\n", "", "stat", ".", "remove", "(", "num", ")", "\n", "abs_stat", ".", "remove", "(", "num", ")", "\n", "\n", "if", "i", ">", "1", ":", "\n", "                ", "assert", "np", ".", "isclose", "(", "stat", ".", "get", "(", ")", ",", "prev_value", ")", "\n", "assert", "np", ".", "isclose", "(", "abs_stat", ".", "get", "(", ")", ",", "abs", "(", "prev_value", ")", ")", "\n", "\n", "", "stat", ".", "update", "(", "num", ")", "\n", "abs_stat", ".", "update", "(", "num", ")", "\n", "\n", "prev_value", "=", "stat", ".", "get", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.selimfirat_pysad.calibration.test_calibrators.test_calibrators": [[2, 29], ["fix_seed", "np.random.rand", "calibrators.items", "calibrator_cls", "calibrator_cls().fit.fit_transform", "calibrator_cls().fit", "calibrator_cls().fit.fit_transform", "np.isnan().any", "type", "np.isnan().any", "calibrator_cls", "np.isnan", "np.isnan"], "function", ["home.repos.pwc.inspect_result.selimfirat_pysad.utils.__init__.fix_seed", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_model.BaseModel.fit", "home.repos.pwc.inspect_result.selimfirat_pysad.core.base_postprocessor.BasePostprocessor.fit_transform"], ["def", "test_calibrators", "(", ")", ":", "\n", "    ", "from", "pysad", ".", "transform", ".", "probability_calibration", "import", "GaussianTailProbabilityCalibrator", "\n", "import", "numpy", "as", "np", "\n", "from", "pysad", ".", "transform", ".", "probability_calibration", "import", "ConformalProbabilityCalibrator", "\n", "from", "pysad", ".", "utils", "import", "fix_seed", "\n", "fix_seed", "(", "61", ")", "\n", "\n", "scores", "=", "np", ".", "random", ".", "rand", "(", "100", ")", "\n", "\n", "calibrators", "=", "{", "\n", "GaussianTailProbabilityCalibrator", ":", "{", "}", ",", "\n", "ConformalProbabilityCalibrator", ":", "{", "}", "\n", "}", "\n", "\n", "for", "calibrator_cls", ",", "args", "in", "calibrators", ".", "items", "(", ")", ":", "\n", "        ", "calibrator", "=", "calibrator_cls", "(", "**", "args", ")", "\n", "calibrated_scores", "=", "calibrator", ".", "fit_transform", "(", "scores", ")", "\n", "\n", "assert", "calibrated_scores", ".", "shape", "==", "scores", ".", "shape", "\n", "assert", "not", "np", ".", "isnan", "(", "calibrated_scores", ")", ".", "any", "(", ")", "\n", "\n", "calibrator", "=", "calibrator_cls", "(", "**", "args", ")", ".", "fit", "(", "scores", ")", "\n", "assert", "type", "(", "calibrator", ")", "is", "calibrator_cls", "\n", "calibrated_scores", "=", "calibrator", ".", "fit_transform", "(", "scores", ")", "\n", "\n", "assert", "calibrated_scores", ".", "shape", "==", "scores", ".", "shape", "\n", "assert", "not", "np", ".", "isnan", "(", "calibrated_scores", ")", ".", "any", "(", ")", "\n", "", "", ""]]}