{"home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.__init__": [[231, 292], ["main.Processor.save_arg", "main.Processor.load_model", "main.Processor.load_param_groups", "main.Processor.load_optimizer", "main.Processor.load_lr_scheduler", "main.Processor.load_data", "os.path.join", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "apex.amp.initialize", "type", "os.path.isdir", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "main.Processor.print_log", "len", "main.Processor.print_log", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "print", "os.path.join", "os.path.join", "os.path.join", "input", "input.lower", "shutil.rmtree", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_arg", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_model", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_param_groups", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_optimizer", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_lr_scheduler", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.load_data", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log"], ["def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "self", ".", "arg", "=", "arg", "\n", "self", ".", "save_arg", "(", ")", "\n", "if", "arg", ".", "phase", "==", "'train'", ":", "\n", "# Added control through the command line", "\n", "            ", "arg", ".", "train_feeder_args", "[", "'debug'", "]", "=", "arg", ".", "train_feeder_args", "[", "'debug'", "]", "or", "self", ".", "arg", ".", "debug", "\n", "logdir", "=", "os", ".", "path", ".", "join", "(", "arg", ".", "work_dir", ",", "'trainlogs'", ")", "\n", "if", "not", "arg", ".", "train_feeder_args", "[", "'debug'", "]", ":", "\n", "# logdir = arg.model_saved_name", "\n", "                ", "if", "os", ".", "path", ".", "isdir", "(", "logdir", ")", ":", "\n", "                    ", "print", "(", "f'log_dir {logdir} already exists'", ")", "\n", "if", "arg", ".", "assume_yes", ":", "\n", "                        ", "answer", "=", "'y'", "\n", "", "else", ":", "\n", "                        ", "answer", "=", "input", "(", "'delete it? [y]/n:'", ")", "\n", "", "if", "answer", ".", "lower", "(", ")", "in", "(", "'y'", ",", "''", ")", ":", "\n", "                        ", "shutil", ".", "rmtree", "(", "logdir", ")", "\n", "print", "(", "'Dir removed:'", ",", "logdir", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'Dir not removed:'", ",", "logdir", ")", "\n", "\n", "", "", "self", ".", "train_writer", "=", "SummaryWriter", "(", "\n", "os", ".", "path", ".", "join", "(", "logdir", ",", "'train'", ")", ",", "'train'", ")", "\n", "self", ".", "val_writer", "=", "SummaryWriter", "(", "\n", "os", ".", "path", ".", "join", "(", "logdir", ",", "'val'", ")", ",", "'val'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_writer", "=", "SummaryWriter", "(", "\n", "os", ".", "path", ".", "join", "(", "logdir", ",", "'debug'", ")", ",", "'debug'", ")", "\n", "\n", "", "", "self", ".", "load_model", "(", ")", "\n", "self", ".", "load_param_groups", "(", ")", "\n", "self", ".", "load_optimizer", "(", ")", "\n", "self", ".", "load_lr_scheduler", "(", ")", "\n", "self", ".", "load_data", "(", ")", "\n", "\n", "self", ".", "global_step", "=", "0", "\n", "self", ".", "lr", "=", "self", ".", "arg", ".", "base_lr", "\n", "self", ".", "best_acc", "=", "0", "\n", "self", ".", "best_acc_epoch", "=", "0", "\n", "\n", "if", "self", ".", "arg", ".", "half", ":", "\n", "            ", "self", ".", "print_log", "(", "'*************************************'", ")", "\n", "self", ".", "print_log", "(", "'*** Using Half Precision Training ***'", ")", "\n", "self", ".", "print_log", "(", "'*************************************'", ")", "\n", "self", ".", "model", ",", "self", ".", "optimizer", "=", "apex", ".", "amp", ".", "initialize", "(", "\n", "self", ".", "model", ",", "\n", "self", ".", "optimizer", ",", "\n", "opt_level", "=", "f'O{self.arg.amp_opt_level}'", "\n", ")", "\n", "if", "self", ".", "arg", ".", "amp_opt_level", "!=", "1", ":", "\n", "                ", "self", ".", "print_log", "(", "\n", "'[WARN] nn.DataParallel is not yet supported by amp_opt_level != \"O1\"'", ")", "\n", "\n", "", "", "if", "type", "(", "self", ".", "arg", ".", "device", ")", "is", "list", ":", "\n", "            ", "if", "len", "(", "self", ".", "arg", ".", "device", ")", ">", "1", ":", "\n", "                ", "self", ".", "print_log", "(", "\n", "f'{len(self.arg.device)} GPUs available, using DataParallel'", ")", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "\n", "self", ".", "model", ",", "\n", "device_ids", "=", "self", ".", "arg", ".", "device", ",", "\n", "output_device", "=", "self", ".", "output_device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_model": [[294, 343], ["utils.import_class", "shutil.copy2", "shutil.copy2", "utils.import_class.cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "main.Processor.print_log", "inspect.getfile", "os.path.join", "main.Processor.print_log", "collections.OrderedDict", "type", "utils.import_class.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "int", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "main.Processor.model.load_state_dict", "utils.count_params", "print", "open", "pickle.load", "pickle.load.pop", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.model.state_dict", "list", "main.Processor.print_log", "main.Processor.update", "main.Processor.model.load_state_dict", "arg.weights[].split", "v.cuda", "pickle.load.items", "set().difference", "main.Processor.print_log", "k.split", "set", "set", "pickle.load.keys", "main.Processor.keys"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.import_class", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.utils.count_params", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log"], ["", "", "", "def", "load_model", "(", "self", ")", ":", "\n", "        ", "output_device", "=", "self", ".", "arg", ".", "device", "[", "0", "]", "if", "type", "(", "\n", "self", ".", "arg", ".", "device", ")", "is", "list", "else", "self", ".", "arg", ".", "device", "\n", "self", ".", "output_device", "=", "output_device", "\n", "Model", "=", "import_class", "(", "self", ".", "arg", ".", "model", ")", "\n", "\n", "# Copy model file and main", "\n", "shutil", ".", "copy2", "(", "inspect", ".", "getfile", "(", "Model", ")", ",", "self", ".", "arg", ".", "work_dir", ")", "\n", "shutil", ".", "copy2", "(", "os", ".", "path", ".", "join", "(", "'.'", ",", "__file__", ")", ",", "self", ".", "arg", ".", "work_dir", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "**", "self", ".", "arg", ".", "model_args", ")", ".", "cuda", "(", "output_device", ")", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "output_device", ")", "\n", "self", ".", "print_log", "(", "\n", "f'Model total number of params: {count_params(self.model)}'", ")", "\n", "\n", "if", "self", ".", "arg", ".", "weights", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "global_step", "=", "int", "(", "arg", ".", "weights", "[", ":", "-", "3", "]", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Cannot parse global_step from model weights filename'", ")", "\n", "self", ".", "global_step", "=", "0", "\n", "\n", "", "self", ".", "print_log", "(", "f'Loading weights from {self.arg.weights}'", ")", "\n", "if", "'.pkl'", "in", "self", ".", "arg", ".", "weights", ":", "\n", "                ", "with", "open", "(", "self", ".", "arg", ".", "weights", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "weights", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "                ", "weights", "=", "torch", ".", "load", "(", "self", ".", "arg", ".", "weights", ")", "\n", "\n", "", "weights", "=", "OrderedDict", "(", "\n", "[", "[", "k", ".", "split", "(", "'module.'", ")", "[", "-", "1", "]", ",", "\n", "v", ".", "cuda", "(", "output_device", ")", "]", "for", "k", ",", "v", "in", "weights", ".", "items", "(", ")", "]", ")", "\n", "\n", "for", "w", "in", "self", ".", "arg", ".", "ignore_weights", ":", "\n", "                ", "if", "weights", ".", "pop", "(", "w", ",", "None", ")", "is", "not", "None", ":", "\n", "                    ", "self", ".", "print_log", "(", "f'Sucessfully Remove Weights: {w}'", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "print_log", "(", "f'Can Not Remove Weights: {w}'", ")", "\n", "\n", "", "", "try", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "", "except", ":", "\n", "                ", "state", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "diff", "=", "list", "(", "set", "(", "state", ".", "keys", "(", ")", ")", ".", "difference", "(", "set", "(", "weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "self", ".", "print_log", "(", "'Can not find these weights:'", ")", "\n", "for", "d", "in", "diff", ":", "\n", "                    ", "self", ".", "print_log", "(", "'  '", "+", "d", ")", "\n", "", "state", ".", "update", "(", "weights", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_param_groups": [[344, 356], ["collections.defaultdict", "main.Processor.model.named_parameters", "main.Processor.param_groups[].append"], "methods", ["None"], ["", "", "", "def", "load_param_groups", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Template function for setting different learning behaviour\n        (e.g. LR, weight decay) of different groups of parameters\n        \"\"\"", "\n", "self", ".", "param_groups", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "name", ",", "params", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "param_groups", "[", "'other'", "]", ".", "append", "(", "params", ")", "\n", "\n", "", "self", ".", "optim_param_groups", "=", "{", "\n", "'other'", ":", "{", "'params'", ":", "self", ".", "param_groups", "[", "'other'", "]", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_optimizer": [[358, 389], ["list", "main.Processor.optim_param_groups.values", "torch.SGD", "torch.SGD", "torch.SGD", "main.Processor.print_log", "main.Processor.optimizer.load_state_dict", "main.Processor.print_log", "main.Processor.print_log", "torch.Adam", "torch.Adam", "torch.Adam", "ValueError", "len", "main.Processor.print_log", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "self", ".", "optim_param_groups", ".", "values", "(", ")", ")", "\n", "if", "self", ".", "arg", ".", "optimizer", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "arg", ".", "base_lr", ",", "\n", "momentum", "=", "0.9", ",", "\n", "nesterov", "=", "self", ".", "arg", ".", "nesterov", ",", "\n", "weight_decay", "=", "self", ".", "arg", ".", "weight_decay", ")", "\n", "", "elif", "self", ".", "arg", ".", "optimizer", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "arg", ".", "base_lr", ",", "\n", "weight_decay", "=", "self", ".", "arg", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Unsupported optimizer: {}'", ".", "format", "(", "self", ".", "arg", ".", "optimizer", ")", ")", "\n", "\n", "# Load optimizer states if any", "\n", "", "if", "self", ".", "arg", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "print_log", "(", "\n", "f'Loading optimizer states from: {self.arg.checkpoint}'", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\n", "self", ".", "arg", ".", "checkpoint", ")", "[", "'optimizer_states'", "]", ")", "\n", "current_lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "self", ".", "print_log", "(", "f'Starting LR: {current_lr}'", ")", "\n", "self", ".", "print_log", "(", "\n", "f'Starting WD1: {self.optimizer.param_groups[0][\"weight_decay\"]}'", ")", "\n", "if", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", ">=", "2", ":", "\n", "                ", "self", ".", "print_log", "(", "\n", "f'Starting WD2: {self.optimizer.param_groups[1][\"weight_decay\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_lr_scheduler": [[390, 403], ["torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "main.Processor.print_log", "main.Processor.lr_scheduler.load_state_dict", "main.Processor.print_log", "main.Processor.print_log", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log"], ["", "", "", "def", "load_lr_scheduler", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr_scheduler", "=", "MultiStepLR", "(", "\n", "self", ".", "optimizer", ",", "milestones", "=", "self", ".", "arg", ".", "step", ",", "gamma", "=", "0.1", ")", "\n", "if", "self", ".", "arg", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "scheduler_states", "=", "torch", ".", "load", "(", "self", ".", "arg", ".", "checkpoint", ")", "[", "\n", "'lr_scheduler_states'", "]", "\n", "self", ".", "print_log", "(", "\n", "f'Loading LR scheduler states from: {self.arg.checkpoint}'", ")", "\n", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "scheduler_states", ")", "\n", "self", ".", "print_log", "(", "\n", "f'Starting last epoch: {scheduler_states[\"last_epoch\"]}'", ")", "\n", "self", ".", "print_log", "(", "\n", "f'Loaded milestones: {scheduler_states[\"last_epoch\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.load_data": [[404, 428], ["utils.import_class", "dict", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "main.init_seed", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.import_class.", "utils.import_class."], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.import_class", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.init_seed"], ["", "", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "Feeder", "=", "import_class", "(", "self", ".", "arg", ".", "feeder", ")", "\n", "self", ".", "data_loader", "=", "dict", "(", ")", "\n", "\n", "def", "worker_seed_fn", "(", "worker_id", ")", ":", "\n", "# give workers different seeds", "\n", "            ", "return", "init_seed", "(", "self", ".", "arg", ".", "seed", "+", "worker_id", "+", "1", ")", "\n", "\n", "", "if", "self", ".", "arg", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "data_loader", "[", "'train'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "Feeder", "(", "**", "self", ".", "arg", ".", "train_feeder_args", ")", ",", "\n", "batch_size", "=", "self", ".", "arg", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "arg", ".", "num_worker", ",", "\n", "drop_last", "=", "True", ",", "\n", "worker_init_fn", "=", "worker_seed_fn", ")", "\n", "\n", "", "self", ".", "data_loader", "[", "'test'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "Feeder", "(", "**", "self", ".", "arg", ".", "test_feeder_args", ")", ",", "\n", "batch_size", "=", "self", ".", "arg", ".", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "arg", ".", "num_worker", ",", "\n", "drop_last", "=", "False", ",", "\n", "worker_init_fn", "=", "worker_seed_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_arg": [[429, 436], ["vars", "os.path.exists", "os.makedirs", "open", "yaml.dump", "os.path.join"], "methods", ["None"], ["", "def", "save_arg", "(", "self", ")", ":", "\n", "# save arg", "\n", "        ", "arg_dict", "=", "vars", "(", "self", ".", "arg", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "arg", ".", "work_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "arg", ".", "work_dir", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "arg", ".", "work_dir", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "arg_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_time": [[437, 440], ["time.asctime", "main.Processor.print_log", "time.localtime", "time.time"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log"], ["", "", "def", "print_time", "(", "self", ")", ":", "\n", "        ", "localtime", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "self", ".", "print_log", "(", "f'Local current time: {localtime}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log": [[441, 449], ["print", "time.asctime", "time.localtime", "open", "print", "time.time", "os.path.join"], "methods", ["None"], ["", "def", "print_log", "(", "self", ",", "s", ",", "print_time", "=", "True", ")", ":", "\n", "        ", "if", "print_time", ":", "\n", "            ", "localtime", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "s", "=", "f'[ {localtime} ] {s}'", "\n", "", "print", "(", "s", ")", "\n", "if", "self", ".", "arg", ".", "print_log", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "arg", ".", "work_dir", ",", "'log.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "print", "(", "s", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.record_time": [[450, 453], ["time.time"], "methods", ["None"], ["", "", "", "def", "record_time", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", ".", "cur_time", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.split_time": [[454, 458], ["main.Processor.record_time", "time.time"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.record_time"], ["", "def", "split_time", "(", "self", ")", ":", "\n", "        ", "split_time", "=", "time", ".", "time", "(", ")", "-", "self", ".", "cur_time", "\n", "self", ".", "record_time", "(", ")", "\n", "return", "split_time", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_states": [[459, 464], ["os.path.join", "os.path.join", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_states", "(", "self", ",", "epoch", ",", "states", ",", "out_folder", ",", "out_name", ")", ":", "\n", "        ", "out_folder_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "arg", ".", "work_dir", ",", "out_folder", ")", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_folder_path", ",", "out_name", ")", "\n", "os", ".", "makedirs", "(", "out_folder_path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "states", ",", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_checkpoint": [[465, 474], ["main.Processor.save_states", "main.Processor.optimizer.state_dict", "main.Processor.lr_scheduler.state_dict", "int"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_states"], ["", "def", "save_checkpoint", "(", "self", ",", "epoch", ",", "out_folder", "=", "'checkpoints'", ")", ":", "\n", "        ", "state_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer_states'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler_states'", ":", "self", ".", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "\n", "checkpoint_name", "=", "f'checkpoint-{epoch}-fwbz{self.arg.forward_batch_size}-{int(self.global_step)}.pt'", "\n", "self", ".", "save_states", "(", "epoch", ",", "state_dict", ",", "out_folder", ",", "checkpoint_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_weights": [[475, 484], ["main.Processor.model.state_dict", "collections.OrderedDict", "main.Processor.save_states", "int", "v.cpu", "main.Processor.items", "k.split"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_states"], ["", "def", "save_weights", "(", "self", ",", "epoch", ",", "out_folder", "=", "'weights'", ")", ":", "\n", "        ", "state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "weights", "=", "OrderedDict", "(", "[", "\n", "[", "k", ".", "split", "(", "'module.'", ")", "[", "-", "1", "]", ",", "v", ".", "cpu", "(", ")", "]", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "\n", "]", ")", "\n", "\n", "weights_name", "=", "f'weights-{epoch}-{int(self.global_step)}.pt'", "\n", "self", ".", "save_states", "(", "epoch", ",", "weights", ",", "out_folder", ",", "weights_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.train": [[485, 588], ["main.Processor.model.train", "main.Processor.train_writer.add_scalar", "main.Processor.record_time", "dict", "main.Processor.print_log", "tqdm.tqdm.tqdm", "enumerate", "numpy.mean", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.lr_scheduler.step", "main.interpolate", "main.Processor.split_time", "main.Processor.optimizer.zero_grad", "range", "main.Processor.optimizer.step", "main.Processor.train_writer.add_scalar", "main.Processor.split_time", "main.Processor.save_weights", "main.Processor.save_checkpoint", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "data.float().cuda.float().cuda.float().cuda", "label.long().cuda.long().cuda.long().cuda", "length.long().cuda.long().cuda.long().cuda", "len", "main.Processor.model", "isinstance", "loss_values.append", "main.Processor.split_time", "tqdm.tqdm.tqdm.set_description", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "main.Processor.train_writer.add_scalar", "main.Processor.train_writer.add_scalar", "main.Processor.train_writer.add_scalar", "dict.items", "len", "l1.mean.mean.mean", "main.Processor.loss", "loss.backward", "loss.item", "int", "data.float().cuda.float().cuda.float", "label.long().cuda.long().cuda.long", "length.long().cuda.long().cuda.long", "apex.amp.scale_loss", "scaled_loss.backward", "loss.item", "round", "loss.item", "sum", "dict.values"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.train", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.record_time", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.interpolate", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.split_time", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.split_time", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_weights", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.save_checkpoint", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.split_time"], ["", "def", "train", "(", "self", ",", "epoch", ",", "save_model", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "loader", "=", "self", ".", "data_loader", "[", "'train'", "]", "\n", "loss_values", "=", "[", "]", "\n", "self", ".", "train_writer", ".", "add_scalar", "(", "'epoch'", ",", "epoch", "+", "1", ",", "self", ".", "global_step", ")", "\n", "self", ".", "record_time", "(", ")", "\n", "timer", "=", "dict", "(", "dataloader", "=", "0.001", ",", "model", "=", "0.001", ",", "statistics", "=", "0.001", ")", "\n", "\n", "current_lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "self", ".", "print_log", "(", "f'Training epoch: {epoch + 1}, LR: {current_lr:.4f}'", ")", "\n", "\n", "process", "=", "tqdm", "(", "loader", ",", "dynamic_ncols", "=", "True", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ",", "length", ",", "index", ")", "in", "enumerate", "(", "process", ")", ":", "\n", "            ", "self", ".", "global_step", "+=", "1", "\n", "# get data", "\n", "data", "=", "interpolate", "(", "data", ",", "length", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "data", "=", "data", ".", "float", "(", ")", ".", "cuda", "(", "self", ".", "output_device", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "cuda", "(", "self", ".", "output_device", ")", "\n", "length", "=", "length", ".", "long", "(", ")", ".", "cuda", "(", "self", ".", "output_device", ")", "\n", "", "timer", "[", "'dataloader'", "]", "+=", "self", ".", "split_time", "(", ")", "\n", "\n", "# backward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "############## Gradient Accumulation for Smaller Batches ##############", "\n", "real_batch_size", "=", "self", ".", "arg", ".", "forward_batch_size", "\n", "splits", "=", "len", "(", "data", ")", "//", "real_batch_size", "\n", "assert", "len", "(", "data", ")", "%", "real_batch_size", "==", "0", ",", "'Real batch size should be a factor of arg.batch_size!'", "\n", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "                ", "left", "=", "i", "*", "real_batch_size", "\n", "right", "=", "left", "+", "real_batch_size", "\n", "batch_data", ",", "batch_label", ",", "batch_length", "=", "data", "[", "left", ":", "\n", "right", "]", ",", "label", "[", "left", ":", "right", "]", ",", "length", "[", "left", ":", "right", "]", "\n", "# forward", "\n", "output", "=", "self", ".", "model", "(", "batch_data", ")", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", ",", "l1", "=", "output", "\n", "l1", "=", "l1", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "l1", "=", "0", "\n", "\n", "", "loss", "=", "self", ".", "loss", "(", "output", ",", "batch_label", ")", "/", "splits", "\n", "\n", "if", "self", ".", "arg", ".", "half", ":", "\n", "                    ", "with", "apex", ".", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                        ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "loss_values", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "timer", "[", "'model'", "]", "+=", "self", ".", "split_time", "(", ")", "\n", "\n", "# Display loss", "\n", "process", ".", "set_description", "(", "\n", "f'(BS {real_batch_size}) loss: {loss.item():.4f}'", ")", "\n", "\n", "value", ",", "predict_label", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "acc", "=", "torch", ".", "mean", "(", "(", "predict_label", "==", "batch_label", ")", ".", "float", "(", ")", ")", "\n", "\n", "self", ".", "train_writer", ".", "add_scalar", "(", "'acc'", ",", "acc", ",", "self", ".", "global_step", ")", "\n", "self", ".", "train_writer", ".", "add_scalar", "(", "\n", "'loss'", ",", "loss", ".", "item", "(", ")", "*", "splits", ",", "self", ".", "global_step", ")", "\n", "self", ".", "train_writer", ".", "add_scalar", "(", "'loss_l1'", ",", "l1", ",", "self", ".", "global_step", ")", "\n", "\n", "#####################################", "\n", "\n", "# torch.nn.utils.clip_grad_norm_(self.model.parameters(), 2)", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# statistics", "\n", "self", ".", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "self", ".", "train_writer", ".", "add_scalar", "(", "'lr'", ",", "self", ".", "lr", ",", "self", ".", "global_step", ")", "\n", "timer", "[", "'statistics'", "]", "+=", "self", ".", "split_time", "(", ")", "\n", "\n", "# Delete output/loss after each batch since it may introduce extra mem during scoping", "\n", "# https://discuss.pytorch.org/t/gpu-memory-consumption-increases-while-training/2770/3", "\n", "del", "output", "\n", "del", "loss", "\n", "\n", "# statistics of time consumption and loss", "\n", "", "proportion", "=", "{", "\n", "k", ":", "f'{int(round(v * 100 / sum(timer.values()))):02d}%'", "\n", "for", "k", ",", "v", "in", "timer", ".", "items", "(", ")", "\n", "}", "\n", "\n", "mean_loss", "=", "np", ".", "mean", "(", "loss_values", ")", "\n", "num_splits", "=", "self", ".", "arg", ".", "batch_size", "//", "self", ".", "arg", ".", "forward_batch_size", "\n", "self", ".", "print_log", "(", "\n", "f'\\tMean training loss: {mean_loss:.4f} (BS {self.arg.batch_size}: {mean_loss * num_splits:.4f}).'", ")", "\n", "self", ".", "print_log", "(", "\n", "'\\tTime consumption: [Data]{dataloader}, [Network]{model}'", ".", "format", "(", "**", "proportion", ")", ")", "\n", "\n", "# PyTorch > 1.2.0: update LR scheduler here with `.step()`", "\n", "# and make sure to save the `lr_scheduler.state_dict()` as part of checkpoint", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "if", "save_model", ":", "\n", "# save training checkpoint & weights", "\n", "            ", "self", ".", "save_weights", "(", "epoch", "+", "1", ")", "\n", "self", ".", "save_checkpoint", "(", "epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.eval": [[589, 679], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "open", "open", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "main.Processor.model.cuda", "main.Processor.model.eval", "main.Processor.print_log", "numpy.concatenate", "numpy.mean", "main.Processor.data_loader[].dataset.top_k", "range", "pandas.DataFrame", "numpy.save", "seaborn.heatmap", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "print", "dict", "main.Processor.print_log", "tqdm.tqdm.tqdm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.zeros.cpu().detach().numpy", "torch.zeros.cpu().detach().numpy", "torch.zeros.cpu().detach().numpy", "range", "range", "torch.zeros.cpu().detach().numpy", "torch.zeros.cpu().detach().numpy", "torch.zeros.cpu().detach().numpy", "main.Processor.val_writer.add_scalar", "main.Processor.val_writer.add_scalar", "main.Processor.val_writer.add_scalar", "zip", "main.Processor.print_log", "main.interpolate", "data.float().cuda.float().cuda.float().cuda", "label.long().cuda.long().cuda.long().cuda", "length.long().cuda.long().cuda.long().cuda", "main.Processor.model", "isinstance", "main.Processor.loss", "score_batches.append", "loss_values.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "zip", "open", "pickle.dump", "l1.mean.mean.mean", "main.Processor.data.cpu().numpy", "main.Processor.item", "label.long().cuda.long().cuda.view", "predict_label.view", "list", "list", "enumerate", "torch.zeros.sum", "torch.zeros.sum", "torch.zeros.sum", "torch.zeros.cpu().detach", "torch.zeros.cpu().detach", "torch.zeros.cpu().detach", "torch.zeros.cpu().detach", "torch.zeros.cpu().detach", "torch.zeros.cpu().detach", "len", "numpy.mean", "data.float().cuda.float().cuda.float", "label.long().cuda.long().cuda.long", "length.long().cuda.long().cuda.long", "predict_label.cpu().numpy", "label.long().cuda.long().cuda.data.cpu().numpy", "main.Processor.data.cpu", "open.write", "open.write", "torch.zeros.cpu", "torch.zeros.cpu", "torch.zeros.cpu", "torch.zeros.cpu", "torch.zeros.cpu", "torch.zeros.cpu", "main.Processor.data_loader[].dataset.top_k", "t.long", "p.long", "predict_label.cpu", "label.long().cuda.long().cuda.data.cpu", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.eval", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.top_k", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.interpolate", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.top_k"], ["", "", "def", "eval", "(", "self", ",", "epoch", ",", "save_score", "=", "False", ",", "loader_name", "=", "[", "'test'", "]", ",", "wrong_file", "=", "None", ",", "result_file", "=", "None", ")", ":", "\n", "# Skip evaluation if too early", "\n", "        ", "if", "epoch", "+", "1", "<", "self", ".", "arg", ".", "eval_start", ":", "\n", "            ", "return", "\n", "\n", "", "if", "wrong_file", "is", "not", "None", ":", "\n", "            ", "f_w", "=", "open", "(", "wrong_file", ",", "'w'", ")", "\n", "", "if", "result_file", "is", "not", "None", ":", "\n", "            ", "f_r", "=", "open", "(", "result_file", ",", "'w'", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", "self", ".", "output_device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "print_log", "(", "f'Eval epoch: {epoch + 1}'", ")", "\n", "for", "ln", "in", "loader_name", ":", "\n", "                ", "loss_values", "=", "[", "]", "\n", "score_batches", "=", "[", "]", "\n", "step", "=", "0", "\n", "process", "=", "tqdm", "(", "self", ".", "data_loader", "[", "ln", "]", ",", "dynamic_ncols", "=", "True", ")", "\n", "nb_classes", "=", "self", ".", "arg", ".", "model_args", "[", "'num_class'", "]", "\n", "confusion_matrix", "=", "torch", ".", "zeros", "(", "nb_classes", ",", "nb_classes", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ",", "length", ",", "index", ")", "in", "enumerate", "(", "process", ")", ":", "\n", "                    ", "data", "=", "interpolate", "(", "data", ",", "length", ")", "\n", "data", "=", "data", ".", "float", "(", ")", ".", "cuda", "(", "self", ".", "output_device", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "cuda", "(", "self", ".", "output_device", ")", "\n", "length", "=", "length", ".", "long", "(", ")", ".", "cuda", "(", "self", ".", "output_device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                        ", "output", ",", "l1", "=", "output", "\n", "l1", "=", "l1", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                        ", "l1", "=", "0", "\n", "", "loss", "=", "self", ".", "loss", "(", "output", ",", "label", ")", "\n", "score_batches", ".", "append", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "loss_values", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "_", ",", "predict_label", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "\n", "step", "+=", "1", "\n", "for", "t", ",", "p", "in", "zip", "(", "label", ".", "view", "(", "-", "1", ")", ",", "predict_label", ".", "view", "(", "-", "1", ")", ")", ":", "\n", "                        ", "confusion_matrix", "[", "t", ".", "long", "(", ")", ",", "p", ".", "long", "(", ")", "]", "+=", "1", "\n", "\n", "", "if", "wrong_file", "is", "not", "None", "or", "result_file", "is", "not", "None", ":", "\n", "                        ", "predict", "=", "list", "(", "predict_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "true", "=", "list", "(", "label", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "predict", ")", ":", "\n", "                            ", "if", "result_file", "is", "not", "None", ":", "\n", "                                ", "f_r", ".", "write", "(", "str", "(", "x", ")", "+", "','", "+", "str", "(", "true", "[", "i", "]", ")", "+", "'\\n'", ")", "\n", "", "if", "x", "!=", "true", "[", "i", "]", "and", "wrong_file", "is", "not", "None", ":", "\n", "                                ", "f_w", ".", "write", "(", "\n", "str", "(", "index", "[", "i", "]", ")", "+", "','", "+", "str", "(", "x", ")", "+", "','", "+", "str", "(", "true", "[", "i", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "", "", "", "score", "=", "np", ".", "concatenate", "(", "score_batches", ")", "\n", "loss", "=", "np", ".", "mean", "(", "loss_values", ")", "\n", "accuracy", "=", "self", ".", "data_loader", "[", "ln", "]", ".", "dataset", ".", "top_k", "(", "score", ",", "1", ")", "\n", "if", "accuracy", ">", "self", ".", "best_acc", ":", "\n", "                ", "self", ".", "best_acc", "=", "accuracy", "\n", "self", ".", "best_acc_epoch", "=", "epoch", "+", "1", "\n", "\n", "# Plot confusion matrix", "\n", "", "for", "i", "in", "range", "(", "nb_classes", ")", ":", "\n", "                ", "confusion_matrix", "[", "i", ",", ":", "]", "=", "confusion_matrix", "[", "i", ",", ":", "]", "/", "confusion_matrix", ".", "sum", "(", "1", ")", "[", "i", "]", "\n", "", "df_cm", "=", "pd", ".", "DataFrame", "(", "confusion_matrix", ".", "cpu", "(", "\n", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "range", "(", "nb_classes", ")", ",", "range", "(", "nb_classes", ")", ")", "\n", "\n", "np", ".", "save", "(", "self", ".", "arg", ".", "work_dir", "+", "'cm.npy'", ",", "confusion_matrix", ".", "cpu", "(", "\n", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "sns", ".", "heatmap", "(", "df_cm", ",", "cmap", "=", "\"Blues\"", ")", "\n", "plt", ".", "savefig", "(", "self", ".", "arg", ".", "work_dir", "+", "'confusion_matrix.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "print", "(", "'Accuracy: '", ",", "accuracy", ",", "' model: '", ",", "self", ".", "arg", ".", "work_dir", ")", "\n", "if", "self", ".", "arg", ".", "phase", "==", "'train'", "and", "not", "self", ".", "arg", ".", "debug", ":", "\n", "                ", "self", ".", "val_writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ",", "self", ".", "global_step", ")", "\n", "self", ".", "val_writer", ".", "add_scalar", "(", "'loss_l1'", ",", "l1", ",", "self", ".", "global_step", ")", "\n", "self", ".", "val_writer", ".", "add_scalar", "(", "'acc'", ",", "accuracy", ",", "self", ".", "global_step", ")", "\n", "\n", "", "score_dict", "=", "dict", "(", "\n", "zip", "(", "self", ".", "data_loader", "[", "ln", "]", ".", "dataset", ".", "sample_name", ",", "score", ")", ")", "\n", "self", ".", "print_log", "(", "\n", "f'\\tMean {ln} loss of {len(self.data_loader[ln])} batches: {np.mean(loss_values)}.'", ")", "\n", "for", "k", "in", "self", ".", "arg", ".", "show_topk", ":", "\n", "                ", "self", ".", "print_log", "(", "\n", "f'\\tTop {k}: {100 * self.data_loader[ln].dataset.top_k(score, k):.2f}%'", ")", "\n", "\n", "", "if", "save_score", ":", "\n", "                ", "with", "open", "(", "'{}/epoch{}_{}_score.pkl'", ".", "format", "(", "self", ".", "arg", ".", "work_dir", ",", "epoch", "+", "1", ",", "ln", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "score_dict", ",", "f", ")", "\n", "\n", "# Empty cache after evaluation", "\n", "", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.start": [[680, 728], ["main.Processor.print_log", "main.Processor.print_log", "range", "sum", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.train", "main.Processor.eval", "main.Processor.print_log", "main.Processor.print_log", "main.Processor.eval", "main.Processor.print_log", "len", "p.numel", "os.path.join", "os.path.join", "ValueError", "pprint.pformat", "utils.count_params", "main.Processor.model.parameters", "vars"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.train", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.eval", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.eval", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.print_log", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.utils.count_params"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "arg", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "print_log", "(", "f'Parameters:\\n{pprint.pformat(vars(self.arg))}\\n'", ")", "\n", "self", ".", "print_log", "(", "\n", "f'Model total number of params: {count_params(self.model)}'", ")", "\n", "self", ".", "global_step", "=", "self", ".", "arg", ".", "start_epoch", "*", "len", "(", "self", ".", "data_loader", "[", "'train'", "]", ")", "/", "self", ".", "arg", ".", "batch_size", "\n", "for", "epoch", "in", "range", "(", "self", ".", "arg", ".", "start_epoch", ",", "self", ".", "arg", ".", "num_epoch", ")", ":", "\n", "                ", "save_model", "=", "(", "(", "epoch", "+", "1", ")", "%", "self", ".", "arg", ".", "save_interval", "==", "\n", "0", ")", "or", "(", "epoch", "+", "1", "==", "self", ".", "arg", ".", "num_epoch", ")", "\n", "self", ".", "train", "(", "epoch", ",", "save_model", "=", "save_model", ")", "\n", "self", ".", "eval", "(", "epoch", ",", "save_score", "=", "self", ".", "arg", ".", "save_score", ",", "\n", "loader_name", "=", "[", "'test'", "]", ")", "\n", "\n", "", "num_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "\n", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "self", ".", "print_log", "(", "f'Best accuracy: {self.best_acc}'", ")", "\n", "self", ".", "print_log", "(", "f'Epoch number: {self.best_acc_epoch}'", ")", "\n", "self", ".", "print_log", "(", "f'Model name: {self.arg.work_dir}'", ")", "\n", "self", ".", "print_log", "(", "f'Model total number of params: {num_params}'", ")", "\n", "self", ".", "print_log", "(", "f'Weight decay: {self.arg.weight_decay}'", ")", "\n", "self", ".", "print_log", "(", "f'Base LR: {self.arg.base_lr}'", ")", "\n", "self", ".", "print_log", "(", "f'Batch Size: {self.arg.batch_size}'", ")", "\n", "self", ".", "print_log", "(", "\n", "f'Forward Batch Size: {self.arg.forward_batch_size}'", ")", "\n", "self", ".", "print_log", "(", "f'Test Batch Size: {self.arg.test_batch_size}'", ")", "\n", "\n", "", "elif", "self", ".", "arg", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "not", "self", ".", "arg", ".", "test_feeder_args", "[", "'debug'", "]", ":", "\n", "                ", "wf", "=", "os", ".", "path", ".", "join", "(", "self", ".", "arg", ".", "work_dir", ",", "'wrong-samples.txt'", ")", "\n", "rf", "=", "os", ".", "path", ".", "join", "(", "self", ".", "arg", ".", "work_dir", ",", "'right-samples.txt'", ")", "\n", "", "else", ":", "\n", "                ", "wf", "=", "rf", "=", "None", "\n", "", "if", "self", ".", "arg", ".", "weights", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Please appoint --weights.'", ")", "\n", "\n", "", "self", ".", "print_log", "(", "f'Model:   {self.arg.model}'", ")", "\n", "self", ".", "print_log", "(", "f'Weights: {self.arg.weights}'", ")", "\n", "\n", "self", ".", "eval", "(", "\n", "epoch", "=", "0", ",", "\n", "save_score", "=", "self", ".", "arg", ".", "save_score", ",", "\n", "loader_name", "=", "[", "'test'", "]", ",", "\n", "wrong_file", "=", "wf", ",", "\n", "result_file", "=", "rf", "\n", ")", "\n", "\n", "self", ".", "print_log", "(", "'Done.\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.init_seed": [[32, 37], ["torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "init_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.get_parser": [[39, 226], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "random.randrange", "os.cpu_count", "dict", "dict", "dict"], "function", ["None"], ["", "def", "get_parser", "(", ")", ":", "\n", "# parameter priority: command line > config file > default", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MS-G3D'", ")", "\n", "parser", ".", "add_argument", "(", "'-w'", ",", "'--work_dir'", ",", "default", "=", "'./work_dir/tmp'", ",", "\n", "help", "=", "'the work folder for storing results'", ")", "\n", "\"\"\"\n    parser.add_argument(\n        '--work-dir',\n        type=str,\n        required=True,\n        help='the work folder for storing results')\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--model_saved_name'", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--config'", ",", "\n", "default", "=", "'./config/nturgbd-cross-view/test_bone.yaml'", ",", "\n", "help", "=", "'path to the configuration file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--assume-yes'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Say yes to every prompt'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--phase'", ",", "\n", "default", "=", "'train'", ",", "\n", "help", "=", "'must be train or test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-score'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'if ture, the classification score will be stored'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "random", ".", "randrange", "(", "200", ")", ",", "\n", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'the interval for printing messages (#iteration)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'the interval for storing models (#iteration)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'the interval for evaluating models (#iteration)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-start'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'The epoch number to start evaluating models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--print-log'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "'print logging or not'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-topk'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "[", "1", ",", "5", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'which Top K accuracy will be shown'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--feeder'", ",", "\n", "default", "=", "'feeder.feeder'", ",", "\n", "help", "=", "'data loader will be used'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-worker'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "os", ".", "cpu_count", "(", ")", ",", "\n", "help", "=", "'the number of worker for data loader'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--train-feeder-args'", ",", "\n", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'the arguments of data loader for training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-feeder-args'", ",", "\n", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'the arguments of data loader for test'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--model'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the model will be used'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model-args'", ",", "\n", "type", "=", "dict", ",", "\n", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'the arguments of model'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--weights'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'the weights for network initialization'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ignore-weights'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "[", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'the name of weights which will be ignored in the initialization'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--half'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use half-precision (FP16) training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--amp-opt-level'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'NVIDIA Apex AMP optimization level'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--base-lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--step'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "[", "20", ",", "40", ",", "60", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'the epoch where optimizer reduce the learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--device'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'the indexes of GPUs for training or testing'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--optimizer'", ",", "\n", "default", "=", "'SGD'", ",", "\n", "help", "=", "'type of optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--nesterov'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'use nesterov or not'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "'training batch size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-batch-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "256", ",", "\n", "help", "=", "'test batch size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--forward-batch-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "16", ",", "\n", "help", "=", "'Batch size during forward pass, must be factor of --batch-size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--start-epoch'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'start training from which epoch'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-epoch'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "80", ",", "\n", "help", "=", "'stop training in which epoch'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--weight-decay'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0005", ",", "\n", "help", "=", "'weight decay for optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--optimizer-states'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path of previously saved optimizer states'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path of previously saved training checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--debug'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Debug mode; default false'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.str2bool": [[730, 737], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.interpolate": [[739, 756], ["int", "range", "max().item", "data[].permute().reshape", "[].repeat().permute", "[].repeat().permute.reshape().permute", "max", "data[].permute", "[].repeat", "[].repeat().permute.reshape", "int", "int", "length[].item", "length[].item"], "function", ["None"], ["", "", "def", "interpolate", "(", "data", ",", "length", ")", ":", "\n", "# data: N, C, T, V, M", "\n", "# reshape to N*M*V, T, C", "\n", "# interpolate the steams", "\n", "    ", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "data", ".", "shape", "\n", "max_length", "=", "int", "(", "max", "(", "length", ")", ".", "item", "(", ")", ")", "\n", "if", "max_length", "<", "100", ":", "\n", "        ", "max_length", "=", "100", "\n", "", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "data_i", "=", "data", "[", "i", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "C", "*", "V", "*", "M", ",", "T", ")", "\n", "\n", "tmp_data", "=", "data_i", "[", ":", ",", ":", "max_length", "]", "[", ":", ",", "-", "1", "]", ".", "repeat", "(", "max_length", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "tmp_data", "[", ":", ",", ":", "int", "(", "length", "[", "i", "]", ".", "item", "(", ")", ")", "]", "=", "data_i", "[", ":", ",", ":", "int", "(", "length", "[", "i", "]", ".", "item", "(", ")", ")", "]", "\n", "\n", "data", "[", "i", ",", ":", ",", ":", "max_length", "]", "=", "tmp_data", ".", "reshape", "(", "C", ",", "V", ",", "M", ",", "max_length", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "return", "data", "[", ":", ",", ":", ",", ":", "max_length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.main": [[758, 777], ["main.get_parser", "get_parser.parse_args", "get_parser.parse_args", "main.init_seed", "main.Processor", "main.Processor.start", "vars().keys", "yaml.load.keys", "get_parser.set_defaults", "open", "yaml.load", "vars", "print"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.get_parser", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.init_seed", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.main.Processor.start"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "\n", "# load arg form config file", "\n", "p", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "p", ".", "config", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "p", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "default_arg", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "key", "=", "vars", "(", "p", ")", ".", "keys", "(", ")", "\n", "for", "k", "in", "default_arg", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "key", ":", "\n", "                ", "print", "(", "'WRONG ARG:'", ",", "k", ")", "\n", "assert", "(", "k", "in", "key", ")", "\n", "", "", "parser", ".", "set_defaults", "(", "**", "default_arg", ")", "\n", "\n", "", "arg", "=", "parser", ".", "parse_args", "(", ")", "\n", "init_seed", "(", "arg", ".", "seed", ")", "\n", "processor", "=", "Processor", "(", "arg", ")", "\n", "processor", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.utils.import_class": [[2, 8], ["name.split", "__import__", "getattr"], "function", ["None"], ["def", "import_class", "(", "name", ")", ":", "\n", "    ", "components", "=", "name", ".", "split", "(", "'.'", ")", "\n", "mod", "=", "__import__", "(", "components", "[", "0", "]", ")", "\n", "for", "comp", "in", "components", "[", "1", ":", "]", ":", "\n", "        ", "mod", "=", "getattr", "(", "mod", ",", "comp", ")", "\n", "", "return", "mod", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.None.utils.count_params": [[10, 12], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_params", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "", "", ""]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.ntu_rgb_d.AdjMatrixGraph.__init__": [[21, 28], ["graph.tools.get_adjacency_matrix", "graph.tools.get_adjacency_matrix", "graph.tools.normalize_adjacency_matrix", "range"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.get_adjacency_matrix", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.get_adjacency_matrix", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.normalize_adjacency_matrix"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "edges", "=", "neighbor", "\n", "self", ".", "num_nodes", "=", "num_node", "\n", "self", ".", "self_loops", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "A_binary", "=", "tools", ".", "get_adjacency_matrix", "(", "self", ".", "edges", ",", "self", ".", "num_nodes", ")", "\n", "self", ".", "A_binary_with_I", "=", "tools", ".", "get_adjacency_matrix", "(", "self", ".", "edges", "+", "self", ".", "self_loops", ",", "self", ".", "num_nodes", ")", "\n", "self", ".", "A", "=", "tools", ".", "normalize_adjacency_matrix", "(", "self", ".", "A_binary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.chalearn.AdjMatrixGraph.__init__": [[21, 29], ["graph.tools.get_adjacency_matrix", "graph.tools.get_adjacency_matrix", "graph.tools.normalize_adjacency_matrix", "range"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.get_adjacency_matrix", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.get_adjacency_matrix", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.normalize_adjacency_matrix"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "edges", "=", "neighbor", "\n", "self", ".", "num_nodes", "=", "num_node", "\n", "self", ".", "self_loops", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "A_binary", "=", "tools", ".", "get_adjacency_matrix", "(", "self", ".", "edges", ",", "self", ".", "num_nodes", ")", "\n", "self", ".", "A_binary_with_I", "=", "tools", ".", "get_adjacency_matrix", "(", "\n", "self", ".", "edges", "+", "self", ".", "self_loops", ",", "self", ".", "num_nodes", ")", "\n", "self", ".", "A", "=", "tools", ".", "normalize_adjacency_matrix", "(", "self", ".", "A_binary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.edge2mat": [[4, 9], ["numpy.zeros"], "function", ["None"], ["def", "edge2mat", "(", "link", ",", "num_node", ")", ":", "\n", "    ", "A", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "\n", "for", "i", ",", "j", "in", "link", ":", "\n", "        ", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.normalize_digraph": [[11, 20], ["numpy.sum", "numpy.zeros", "range", "numpy.dot"], "function", ["None"], ["", "def", "normalize_digraph", "(", "A", ")", ":", "\n", "    ", "Dl", "=", "np", ".", "sum", "(", "A", ",", "0", ")", "\n", "h", ",", "w", "=", "A", ".", "shape", "\n", "Dn", "=", "np", ".", "zeros", "(", "(", "w", ",", "w", ")", ")", "\n", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "        ", "if", "Dl", "[", "i", "]", ">", "0", ":", "\n", "            ", "Dn", "[", "i", ",", "i", "]", "=", "Dl", "[", "i", "]", "**", "(", "-", "1", ")", "\n", "", "", "AD", "=", "np", ".", "dot", "(", "A", ",", "Dn", ")", "\n", "return", "AD", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.get_spatial_graph": [[22, 28], ["tools.edge2mat", "tools.normalize_digraph", "tools.normalize_digraph", "numpy.stack", "tools.edge2mat", "tools.edge2mat"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.edge2mat", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.normalize_digraph", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.normalize_digraph", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.edge2mat", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.edge2mat"], ["", "def", "get_spatial_graph", "(", "num_node", ",", "self_link", ",", "inward", ",", "outward", ")", ":", "\n", "    ", "I", "=", "edge2mat", "(", "self_link", ",", "num_node", ")", "\n", "In", "=", "normalize_digraph", "(", "edge2mat", "(", "inward", ",", "num_node", ")", ")", "\n", "Out", "=", "normalize_digraph", "(", "edge2mat", "(", "outward", ",", "num_node", ")", ")", "\n", "A", "=", "np", ".", "stack", "(", "(", "I", ",", "In", ",", "Out", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.k_adjacency": [[30, 40], ["isinstance", "numpy.eye", "len", "numpy.minimum", "numpy.minimum", "numpy.linalg.matrix_power", "numpy.linalg.matrix_power"], "function", ["None"], ["", "def", "k_adjacency", "(", "A", ",", "k", ",", "with_self", "=", "False", ",", "self_factor", "=", "1", ")", ":", "\n", "    ", "assert", "isinstance", "(", "A", ",", "np", ".", "ndarray", ")", "\n", "I", "=", "np", ".", "eye", "(", "len", "(", "A", ")", ",", "dtype", "=", "A", ".", "dtype", ")", "\n", "if", "k", "==", "0", ":", "\n", "        ", "return", "I", "\n", "", "Ak", "=", "np", ".", "minimum", "(", "np", ".", "linalg", ".", "matrix_power", "(", "A", "+", "I", ",", "k", ")", ",", "1", ")", "-", "np", ".", "minimum", "(", "np", ".", "linalg", ".", "matrix_power", "(", "A", "+", "I", ",", "k", "-", "1", ")", ",", "1", ")", "\n", "if", "with_self", ":", "\n", "        ", "Ak", "+=", "(", "self_factor", "*", "I", ")", "\n", "", "return", "Ak", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.normalize_adjacency_matrix": [[42, 47], ["A.sum", "numpy.power", "numpy.eye", "len"], "function", ["None"], ["", "def", "normalize_adjacency_matrix", "(", "A", ")", ":", "\n", "    ", "node_degrees", "=", "A", ".", "sum", "(", "-", "1", ")", "\n", "degs_inv_sqrt", "=", "np", ".", "power", "(", "node_degrees", ",", "-", "0.5", ")", "\n", "norm_degs_matrix", "=", "np", ".", "eye", "(", "len", "(", "node_degrees", ")", ")", "*", "degs_inv_sqrt", "\n", "return", "(", "norm_degs_matrix", "@", "A", "@", "norm_degs_matrix", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.get_adjacency_matrix": [[49, 54], ["numpy.zeros"], "function", ["None"], ["", "def", "get_adjacency_matrix", "(", "edges", ",", "num_nodes", ")", ":", "\n", "    ", "A", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "        ", "A", "[", "edge", "]", "=", "1.", "\n", "", "return", "A", "", "", ""]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.ntu120_gendata.read_skeleton_filter": [[30, 69], ["open", "int", "range", "f.readline", "int", "range", "skeleton_sequence[].append", "f.readline", "int", "range", "frame_info[].append", "float", "f.readline", "body_info[].append", "zip", "float", "f.readline().split", "zip", "f.readline().split", "f.readline", "f.readline"], "function", ["None"], ["def", "read_skeleton_filter", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "skeleton_sequence", "=", "{", "}", "\n", "skeleton_sequence", "[", "'numFrame'", "]", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "skeleton_sequence", "[", "'frameInfo'", "]", "=", "[", "]", "\n", "# num_body = 0", "\n", "for", "t", "in", "range", "(", "skeleton_sequence", "[", "'numFrame'", "]", ")", ":", "\n", "            ", "frame_info", "=", "{", "}", "\n", "frame_info", "[", "'numBody'", "]", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "frame_info", "[", "'bodyInfo'", "]", "=", "[", "]", "\n", "\n", "for", "m", "in", "range", "(", "frame_info", "[", "'numBody'", "]", ")", ":", "\n", "                ", "body_info", "=", "{", "}", "\n", "body_info_key", "=", "[", "\n", "'bodyID'", ",", "'clipedEdges'", ",", "'handLeftConfidence'", ",", "\n", "'handLeftState'", ",", "'handRightConfidence'", ",", "'handRightState'", ",", "\n", "'isResticted'", ",", "'leanX'", ",", "'leanY'", ",", "'trackingState'", "\n", "]", "\n", "body_info", "=", "{", "\n", "k", ":", "float", "(", "v", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "body_info_key", ",", "f", ".", "readline", "(", ")", ".", "split", "(", ")", ")", "\n", "}", "\n", "body_info", "[", "'numJoint'", "]", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "body_info", "[", "'jointInfo'", "]", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "body_info", "[", "'numJoint'", "]", ")", ":", "\n", "                    ", "joint_info_key", "=", "[", "\n", "'x'", ",", "'y'", ",", "'z'", ",", "'depthX'", ",", "'depthY'", ",", "'colorX'", ",", "'colorY'", ",", "\n", "'orientationW'", ",", "'orientationX'", ",", "'orientationY'", ",", "\n", "'orientationZ'", ",", "'trackingState'", "\n", "]", "\n", "joint_info", "=", "{", "\n", "k", ":", "float", "(", "v", ")", "\n", "for", "k", ",", "v", "in", "zip", "(", "joint_info_key", ",", "f", ".", "readline", "(", ")", ".", "split", "(", ")", ")", "\n", "}", "\n", "body_info", "[", "'jointInfo'", "]", ".", "append", "(", "joint_info", ")", "\n", "", "frame_info", "[", "'bodyInfo'", "]", ".", "append", "(", "body_info", ")", "\n", "", "skeleton_sequence", "[", "'frameInfo'", "]", ".", "append", "(", "frame_info", ")", "\n", "\n", "", "", "return", "skeleton_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.ntu120_gendata.get_nonzero_std": [[71, 80], ["s.sum().sum", "len", "s[].std", "s.sum", "s[].std", "s[].std"], "function", ["None"], ["", "def", "get_nonzero_std", "(", "s", ")", ":", "# tvc", "\n", "    ", "index", "=", "s", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "!=", "0", "# select valid frames", "\n", "s", "=", "s", "[", "index", "]", "\n", "if", "len", "(", "s", ")", "!=", "0", ":", "\n", "        ", "s", "=", "s", "[", ":", ",", ":", ",", "0", "]", ".", "std", "(", ")", "+", "s", "[", ":", ",", ":", ",", "1", "]", ".", "std", "(", ")", "+", "s", "[", ":", ",", ":", ",", "2", "]", ".", "std", "(", ")", "# three channels", "\n", "", "else", ":", "\n", "        ", "s", "=", "0", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.ntu120_gendata.read_xyz": [[82, 99], ["ntu120_gendata.read_skeleton_filter", "numpy.zeros", "enumerate", "numpy.array", "data.transpose.transpose", "enumerate", "enumerate", "ntu120_gendata.get_nonzero_std", "np.array.argsort"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.ntu120_gendata.read_skeleton_filter", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.ntu120_gendata.get_nonzero_std"], ["", "def", "read_xyz", "(", "path", ",", "max_body", "=", "4", ",", "num_joint", "=", "25", ")", ":", "\n", "    ", "seq_info", "=", "read_skeleton_filter", "(", "path", ")", "\n", "# Create single skeleton tensor: (M, T, V, C)", "\n", "data", "=", "np", ".", "zeros", "(", "(", "max_body", ",", "seq_info", "[", "'numFrame'", "]", ",", "num_joint", ",", "3", ")", ")", "\n", "for", "n", ",", "f", "in", "enumerate", "(", "seq_info", "[", "'frameInfo'", "]", ")", ":", "\n", "        ", "for", "m", ",", "b", "in", "enumerate", "(", "f", "[", "'bodyInfo'", "]", ")", ":", "\n", "            ", "for", "j", ",", "v", "in", "enumerate", "(", "b", "[", "'jointInfo'", "]", ")", ":", "\n", "                ", "if", "m", "<", "max_body", "and", "j", "<", "num_joint", ":", "\n", "                    ", "data", "[", "m", ",", "n", ",", "j", ",", ":", "]", "=", "[", "v", "[", "'x'", "]", ",", "v", "[", "'y'", "]", ",", "v", "[", "'z'", "]", "]", "\n", "\n", "# select two max energy body", "\n", "", "", "", "", "energy", "=", "np", ".", "array", "(", "[", "get_nonzero_std", "(", "x", ")", "for", "x", "in", "data", "]", ")", "\n", "index", "=", "energy", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", "0", ":", "max_body_true", "]", "\n", "data", "=", "data", "[", "index", "]", "\n", "# To (C,T,V,M)", "\n", "data", "=", "data", ".", "transpose", "(", "3", ",", "1", ",", "2", ",", "0", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.ntu120_gendata.gendata": [[101, 160], ["sorted", "numpy.zeros", "enumerate", "data_gen.preprocess.pre_normalization", "numpy.save", "numpy.save", "os.path.join", "filename.find", "filename.find", "filename.find", "int", "int", "int", "open", "pickle.dump", "tqdm.tqdm", "ntu120_gendata.read_xyz", "open", "sample_paths.append", "sample_label.append", "len", "ValueError", "ValueError", "list", "line.strip", "f.readlines"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.preprocess.pre_normalization", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.ntu120_gendata.read_xyz"], ["", "def", "gendata", "(", "file_list", ",", "out_path", ",", "ignored_sample_path", ",", "benchmark", ",", "part", ")", ":", "\n", "    ", "ignored_samples", "=", "[", "]", "\n", "if", "ignored_sample_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "ignored_sample_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "ignored_samples", "=", "[", "\n", "line", ".", "strip", "(", ")", "+", "'.skeleton'", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n", "", "", "sample_name", "=", "[", "]", "\n", "sample_label", "=", "[", "]", "\n", "sample_paths", "=", "[", "]", "\n", "for", "folder", ",", "filename", "in", "sorted", "(", "file_list", ")", ":", "\n", "        ", "if", "filename", "in", "ignored_samples", ":", "\n", "            ", "continue", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "setup_loc", "=", "filename", ".", "find", "(", "'S'", ")", "\n", "subject_loc", "=", "filename", ".", "find", "(", "'P'", ")", "\n", "action_loc", "=", "filename", ".", "find", "(", "'A'", ")", "\n", "setup_id", "=", "int", "(", "filename", "[", "(", "setup_loc", "+", "1", ")", ":", "(", "setup_loc", "+", "4", ")", "]", ")", "\n", "subject_id", "=", "int", "(", "filename", "[", "(", "subject_loc", "+", "1", ")", ":", "(", "subject_loc", "+", "4", ")", "]", ")", "\n", "action_class", "=", "int", "(", "filename", "[", "(", "action_loc", "+", "1", ")", ":", "(", "action_loc", "+", "4", ")", "]", ")", "\n", "\n", "if", "benchmark", "==", "'xsub'", ":", "\n", "            ", "istraining", "=", "(", "subject_id", "in", "training_subjects", ")", "\n", "", "elif", "benchmark", "==", "'xset'", ":", "\n", "            ", "istraining", "=", "(", "setup_id", "in", "training_setups", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported benchmark: {benchmark}'", ")", "\n", "\n", "", "if", "part", "==", "'train'", ":", "\n", "            ", "issample", "=", "istraining", "\n", "", "elif", "part", "==", "'val'", ":", "\n", "            ", "issample", "=", "not", "(", "istraining", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported dataset part: {part}'", ")", "\n", "\n", "", "if", "issample", ":", "\n", "            ", "sample_paths", ".", "append", "(", "path", ")", "\n", "sample_label", ".", "append", "(", "action_class", "-", "1", ")", "# to 0-indexed", "\n", "\n", "# Save labels", "\n", "", "", "with", "open", "(", "f'{out_path}/{part}_label.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "       ", "pickle", ".", "dump", "(", "(", "sample_paths", ",", "list", "(", "sample_label", ")", ")", ",", "f", ")", "\n", "\n", "# Create data tensor (N,C,T,V,M)", "\n", "", "fp", "=", "np", ".", "zeros", "(", "(", "len", "(", "sample_label", ")", ",", "3", ",", "max_frame", ",", "\n", "num_joint", ",", "max_body_true", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Fill in the data tensor `fp` one training example a time", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "tqdm", "(", "sample_paths", ",", "dynamic_ncols", "=", "True", ")", ")", ":", "\n", "        ", "data", "=", "read_xyz", "(", "s", ",", "max_body", "=", "max_body_kinect", ",", "num_joint", "=", "num_joint", ")", "\n", "# Fill (C,T,V,M) to data tensor (N,C,T,V,M)", "\n", "fp", "[", "i", ",", ":", ",", "0", ":", "data", ".", "shape", "[", "1", "]", ",", ":", ",", ":", "]", "=", "data", "\n", "\n", "# Perform preprocessing on data tensor", "\n", "", "fp", ",", "length", "=", "pre_normalization", "(", "fp", ")", "\n", "# Save input data (train/val)", "\n", "np", ".", "save", "(", "'{}/{}_data_joint.npy'", ".", "format", "(", "out_path", ",", "part", ")", ",", "fp", ")", "\n", "np", ".", "save", "(", "'{}/{}_data_len.npy'", ".", "format", "(", "out_path", ",", "part", ")", ",", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.rotation_matrix": [[5, 21], ["numpy.asarray", "math.cos", "numpy.array", "numpy.eye", "math.sqrt", "math.sin", "numpy.abs().sum", "numpy.abs", "numpy.dot", "numpy.abs"], "function", ["None"], ["def", "rotation_matrix", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "\"\"\"\n    Return the rotation matrix associated with counterclockwise rotation about\n    the given axis by theta radians.\n    \"\"\"", "\n", "if", "np", ".", "abs", "(", "axis", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "theta", ")", "<", "1e-6", ":", "\n", "        ", "return", "np", ".", "eye", "(", "3", ")", "\n", "", "axis", "=", "np", ".", "asarray", "(", "axis", ")", "\n", "axis", "=", "axis", "/", "math", ".", "sqrt", "(", "np", ".", "dot", "(", "axis", ",", "axis", ")", ")", "\n", "a", "=", "math", ".", "cos", "(", "theta", "/", "2.0", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "math", ".", "sin", "(", "theta", "/", "2.0", ")", "\n", "aa", ",", "bb", ",", "cc", ",", "dd", "=", "a", "*", "a", ",", "b", "*", "b", ",", "c", "*", "c", ",", "d", "*", "d", "\n", "bc", ",", "ad", ",", "ac", ",", "ab", ",", "bd", ",", "cd", "=", "b", "*", "c", ",", "a", "*", "d", ",", "a", "*", "c", ",", "a", "*", "b", ",", "b", "*", "d", ",", "c", "*", "d", "\n", "return", "np", ".", "array", "(", "[", "[", "aa", "+", "bb", "-", "cc", "-", "dd", ",", "2", "*", "(", "bc", "+", "ad", ")", ",", "2", "*", "(", "bd", "-", "ac", ")", "]", ",", "\n", "[", "2", "*", "(", "bc", "-", "ad", ")", ",", "aa", "+", "cc", "-", "bb", "-", "dd", ",", "2", "*", "(", "cd", "+", "ab", ")", "]", ",", "\n", "[", "2", "*", "(", "bd", "+", "ac", ")", ",", "2", "*", "(", "cd", "-", "ab", ")", ",", "aa", "+", "dd", "-", "bb", "-", "cc", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.unit_vector": [[23, 26], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "unit_vector", "(", "vector", ")", ":", "\n", "    ", "\"\"\" Returns the unit vector of the vector.  \"\"\"", "\n", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.angle_between": [[28, 43], ["rotation.unit_vector", "rotation.unit_vector", "numpy.arccos", "numpy.clip", "numpy.abs().sum", "numpy.abs().sum", "numpy.dot", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.unit_vector", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.unit_vector"], ["", "def", "angle_between", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "\"\"\" Returns the angle in radians between vectors 'v1' and 'v2'::\n\n            >>> angle_between((1, 0, 0), (0, 1, 0))\n            1.5707963267948966\n            >>> angle_between((1, 0, 0), (1, 0, 0))\n            0.0\n            >>> angle_between((1, 0, 0), (-1, 0, 0))\n            3.141592653589793\n    \"\"\"", "\n", "if", "np", ".", "abs", "(", "v1", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "v2", ")", ".", "sum", "(", ")", "<", "1e-6", ":", "\n", "        ", "return", "0", "\n", "", "v1_u", "=", "unit_vector", "(", "v1", ")", "\n", "v2_u", "=", "unit_vector", "(", "v2", ")", "\n", "return", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.x_rotation": [[45, 49], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "x_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around x-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", "]", ",", "[", "0", ",", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.y_rotation": [[51, 55], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "y_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around y-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "0", ",", "np", ".", "sin", "(", "theta", ")", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", ",", "np", ".", "cos", "(", "theta", ")", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.z_rotation": [[57, 61], ["numpy.array", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "z_rotation", "(", "vector", ",", "theta", ")", ":", "\n", "    ", "\"\"\"Rotates 3-D vector around z-axis\"\"\"", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "0", "]", ",", "[", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "return", "np", ".", "dot", "(", "R", ",", "vector", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.preprocess.pre_normalization": [[9, 86], ["np.transpose", "print", "enumerate", "print", "enumerate", "print", "enumerate", "print", "enumerate", "np.transpose", "np.ones", "tqdm.tqdm", "enumerate", "tqdm.tqdm", "[].copy", "enumerate", "tqdm.tqdm", "np.cross", "angle_between", "rotation_matrix", "enumerate", "tqdm.tqdm", "np.cross", "angle_between", "rotation_matrix", "enumerate", "skeleton.sum", "print", "enumerate", "skeleton.sum", "skeleton.sum", "enumerate", "skeleton.sum", "enumerate", "person.sum", "person[].sum", "person[].copy", "person.sum", "person.sum", "enumerate", "person.sum", "enumerate", "person.sum().sum", "frame.sum", "frame.sum", "np.dot", "frame.sum", "np.dot", "len", "person[].sum", "person.sum", "person.sum"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.angle_between", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.rotation_matrix", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.angle_between", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.data_gen.rotation.rotation_matrix"], ["def", "pre_normalization", "(", "data", ",", "zaxis", "=", "[", "0", ",", "1", "]", ",", "xaxis", "=", "[", "8", ",", "4", "]", ")", ":", "\n", "    ", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "data", ".", "shape", "\n", "s", "=", "np", ".", "transpose", "(", "data", ",", "[", "0", ",", "4", ",", "2", ",", "3", ",", "1", "]", ")", "# N, C, T, V, M  to  N, M, T, V, C", "\n", "length", "=", "300", "*", "np", ".", "ones", "(", "N", ")", "# length of samples", "\n", "\n", "print", "(", "'save length of each sample'", ")", "\n", "for", "i_s", ",", "skeleton", "in", "enumerate", "(", "tqdm", "(", "s", ")", ")", ":", "# pad", "\n", "        ", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "i_s", ",", "' has no skeleton'", ")", "\n", "", "for", "i_p", ",", "person", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "            ", "if", "person", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "person", "[", "0", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "index", "=", "(", "person", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", "\n", "tmp", "=", "person", "[", "index", "]", ".", "copy", "(", ")", "\n", "person", "*=", "0", "\n", "person", "[", ":", "len", "(", "tmp", ")", "]", "=", "tmp", "\n", "", "for", "i_f", ",", "frame", "in", "enumerate", "(", "person", ")", ":", "\n", "                ", "if", "frame", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "if", "person", "[", "i_f", ":", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                        ", "length", "[", "i_s", "]", "=", "i_f", "\n", "# rest = len(person) - i_f", "\n", "# num = int(np.ceil(rest / i_f))", "\n", "# pad = np.concatenate([person[0:i_f]", "\n", "#                       for _ in range(num)], 0)[:rest]", "\n", "# s[i_s, i_p, i_f:] = pad", "\n", "break", "\n", "\n", "", "", "", "", "", "print", "(", "'sub the center joint #1 (spine joint in ntu and neck joint in kinetics)'", ")", "\n", "for", "i_s", ",", "skeleton", "in", "enumerate", "(", "tqdm", "(", "s", ")", ")", ":", "\n", "        ", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "main_body_center", "=", "skeleton", "[", "0", "]", "[", ":", ",", "1", ":", "2", ",", ":", "]", ".", "copy", "(", ")", "\n", "for", "i_p", ",", "person", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "            ", "if", "person", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "mask", "=", "(", "person", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", ".", "reshape", "(", "T", ",", "V", ",", "1", ")", "\n", "s", "[", "i_s", ",", "i_p", "]", "=", "(", "s", "[", "i_s", ",", "i_p", "]", "-", "main_body_center", ")", "*", "mask", "\n", "\n", "", "", "print", "(", "'parallel the bone between hip(jpt 0) and spine(jpt 1) of the first person to the z axis'", ")", "\n", "for", "i_s", ",", "skeleton", "in", "enumerate", "(", "tqdm", "(", "s", ")", ")", ":", "\n", "        ", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "joint_bottom", "=", "skeleton", "[", "0", ",", "0", ",", "zaxis", "[", "0", "]", "]", "\n", "joint_top", "=", "skeleton", "[", "0", ",", "0", ",", "zaxis", "[", "1", "]", "]", "\n", "axis", "=", "np", ".", "cross", "(", "joint_top", "-", "joint_bottom", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "angle", "=", "angle_between", "(", "joint_top", "-", "joint_bottom", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "matrix_z", "=", "rotation_matrix", "(", "axis", ",", "angle", ")", "\n", "for", "i_p", ",", "person", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "            ", "if", "person", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "i_f", ",", "frame", "in", "enumerate", "(", "person", ")", ":", "\n", "                ", "if", "frame", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "for", "i_j", ",", "joint", "in", "enumerate", "(", "frame", ")", ":", "\n", "                    ", "s", "[", "i_s", ",", "i_p", ",", "i_f", ",", "i_j", "]", "=", "np", ".", "dot", "(", "matrix_z", ",", "joint", ")", "\n", "\n", "", "", "", "", "print", "(", "'parallel the bone between right shoulder(jpt 8) and left shoulder(jpt 4) of the first person to the x axis'", ")", "\n", "for", "i_s", ",", "skeleton", "in", "enumerate", "(", "tqdm", "(", "s", ")", ")", ":", "\n", "        ", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "joint_rshoulder", "=", "skeleton", "[", "0", ",", "0", ",", "xaxis", "[", "0", "]", "]", "\n", "joint_lshoulder", "=", "skeleton", "[", "0", ",", "0", ",", "xaxis", "[", "1", "]", "]", "\n", "axis", "=", "np", ".", "cross", "(", "joint_rshoulder", "-", "joint_lshoulder", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "angle", "=", "angle_between", "(", "joint_rshoulder", "-", "joint_lshoulder", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "matrix_x", "=", "rotation_matrix", "(", "axis", ",", "angle", ")", "\n", "for", "i_p", ",", "person", "in", "enumerate", "(", "skeleton", ")", ":", "\n", "            ", "if", "person", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "i_f", ",", "frame", "in", "enumerate", "(", "person", ")", ":", "\n", "                ", "if", "frame", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "for", "i_j", ",", "joint", "in", "enumerate", "(", "frame", ")", ":", "\n", "                    ", "s", "[", "i_s", ",", "i_p", ",", "i_f", ",", "i_j", "]", "=", "np", ".", "dot", "(", "matrix_x", ",", "joint", ")", "\n", "\n", "", "", "", "", "data", "=", "np", ".", "transpose", "(", "s", ",", "[", "0", ",", "4", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "return", "data", ",", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.activation.activation_factory": [[6, 17], ["torch.ReLU", "torch.LeakyReLU", "torch.Tanh", "torch.Identity", "ValueError"], "function", ["None"], ["def", "activation_factory", "(", "name", ",", "inplace", "=", "True", ")", ":", "\n", "    ", "if", "name", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "", "elif", "name", "==", "'leakyrelu'", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "inplace", ")", "\n", "", "elif", "name", "==", "'tanh'", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "name", "==", "'linear'", "or", "name", "is", "None", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Not supported activation:'", ",", "name", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.gcn_logsigRNN.Model.__init__": [[16, 73], ["torch.Module.__init__", "utils.import_class", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model.gcn.GraphConv", "signatory.logsignature_channels", "LogSig", "sp", "torch.LSTM", "torch.LSTM", "torch.LSTM", "model.gcn.GraphConv", "signatory.logsignature_channels", "LogSig", "sp", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "utils.import_class."], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__init__", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.import_class"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_class", ",", "\n", "num_point", ",", "\n", "num_person", ",", "\n", "num_gcn_scales", ",", "\n", "graph", ",", "\n", "in_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "Graph", "=", "import_class", "(", "graph", ")", "\n", "A_binary", "=", "Graph", "(", ")", ".", "A_binary", "\n", "\n", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "num_person", "*", "in_channels", "*", "num_point", ")", "\n", "\n", "# channels", "\n", "c1", "=", "90", "\n", "c2", "=", "180", "\n", "self", ".", "c1", "=", "c1", "\n", "self", ".", "c2", "=", "c2", "\n", "\n", "self", ".", "gcn1", "=", "GCN", "(", "num_gcn_scales", ",", "3", ",", "c1", ",", "\n", "A_binary", ")", "\n", "\n", "self", ".", "n_segments1", "=", "50", "\n", "self", ".", "logsig_channels1", "=", "signatory", ".", "logsignature_channels", "(", "in_channels", "=", "c1", ",", "\n", "depth", "=", "2", ")", "\n", "self", ".", "logsig1", "=", "LogSig", "(", "c1", ",", "n_segments", "=", "self", ".", "n_segments1", ",", "logsig_depth", "=", "2", ",", "\n", "logsig_channels", "=", "self", ".", "logsig_channels1", ")", "\n", "self", ".", "start_position1", "=", "sp", "(", "n_segments", "=", "self", ".", "n_segments1", ")", "\n", "\n", "self", ".", "lstm1", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "c1", "+", "self", ".", "logsig_channels1", ",", "\n", "hidden_size", "=", "c1", ",", "\n", "num_layers", "=", "1", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", "\n", ")", "\n", "\n", "self", ".", "gcn2", "=", "GCN", "(", "num_gcn_scales", ",", "c1", ",", "c2", ",", "\n", "A_binary", ")", "\n", "\n", "self", ".", "n_segments2", "=", "30", "\n", "self", ".", "logsig_channels2", "=", "signatory", ".", "logsignature_channels", "(", "in_channels", "=", "c2", ",", "\n", "depth", "=", "2", ")", "\n", "self", ".", "logsig2", "=", "LogSig", "(", "c2", ",", "n_segments", "=", "self", ".", "n_segments2", ",", "logsig_depth", "=", "2", ",", "\n", "logsig_channels", "=", "self", ".", "logsig_channels2", ")", "\n", "self", ".", "start_position2", "=", "sp", "(", "n_segments", "=", "self", ".", "n_segments2", ")", "\n", "\n", "self", ".", "lstm2", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "c2", "+", "self", ".", "logsig_channels2", ",", "\n", "hidden_size", "=", "c2", ",", "\n", "num_layers", "=", "1", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "c2", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.gcn_logsigRNN.Model.forward": [[74, 114], ["x.view().permute().contiguous.view().permute().contiguous.permute().contiguous().view", "gcn_logsigRNN.Model.data_bn", "x.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "torch.relu", "torch.relu", "torch.relu", "x.view().permute().contiguous.view().permute().contiguous.permute().contiguous().view().contiguous", "gcn_logsigRNN.Model.start_position1().type_as", "gcn_logsigRNN.Model.logsig1().type_as", "gcn_logsigRNN.Model.lstm1.flatten_parameters", "gcn_logsigRNN.Model.lstm1", "x.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "torch.relu", "torch.relu", "torch.relu", "x.view().permute().contiguous.view().permute().contiguous.permute().contiguous().view().contiguous", "gcn_logsigRNN.Model.start_position2().type_as", "gcn_logsigRNN.Model.logsig2().type_as", "gcn_logsigRNN.Model.lstm2.flatten_parameters", "gcn_logsigRNN.Model.lstm2", "x.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "gcn_logsigRNN.Model.size", "gcn_logsigRNN.Model.view", "gcn_logsigRNN.Model.mean", "gcn_logsigRNN.Model.mean", "gcn_logsigRNN.Model.fc", "gcn_logsigRNN.Model.gcn1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "gcn_logsigRNN.Model.gcn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "torch.BatchNorm1d().to", "x.view().permute().contiguous.view().permute().contiguous.permute().contiguous", "x.view().permute().contiguous.view().permute().contiguous.view().permute", "x.view().permute().contiguous.view().permute().contiguous.permute().contiguous().view", "gcn_logsigRNN.Model.start_position1", "gcn_logsigRNN.Model.logsig1", "x.view().permute().contiguous.view().permute().contiguous.view().permute", "x.view().permute().contiguous.view().permute().contiguous.permute().contiguous().view", "gcn_logsigRNN.Model.start_position2", "gcn_logsigRNN.Model.logsig2", "x.view().permute().contiguous.view().permute().contiguous.view().permute", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "x.view().permute().contiguous.view().permute().contiguous.permute", "x.view().permute().contiguous.view().permute().contiguous.view", "x.view().permute().contiguous.view().permute().contiguous.permute().contiguous", "x.view().permute().contiguous.view().permute().contiguous.view", "x.view().permute().contiguous.view().permute().contiguous.permute().contiguous", "x.view().permute().contiguous.view().permute().contiguous.view", "x.view().permute().contiguous.view().permute().contiguous.permute", "x.view().permute().contiguous.view().permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "M", "*", "V", "*", "C", ",", "T", ")", "\n", "x", "=", "self", ".", "data_bn", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "N", "*", "M", ",", "V", ",", "C", ",", "T", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# N,C,T,V", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gcn1", "(", "x", ")", ",", "inplace", "=", "False", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "N", "*", "M", "*", "V", ",", "T", ",", "self", ".", "c1", ")", ".", "contiguous", "(", ")", "\n", "\n", "x_sp", "=", "self", ".", "start_position1", "(", "x", ")", ".", "type_as", "(", "x", ")", "\n", "x_logsig", "=", "self", ".", "logsig1", "(", "x", ")", ".", "type_as", "(", "x", ")", "\n", "self", ".", "lstm1", ".", "flatten_parameters", "(", ")", "\n", "x", ",", "_", "=", "self", ".", "lstm1", "(", "torch", ".", "cat", "(", "[", "x_logsig", ",", "x_sp", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "n_segments1", ")", ".", "to", "(", "x", ".", "device", ")", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "\n", "N", "*", "M", ",", "V", ",", "self", ".", "n_segments1", ",", "self", ".", "c1", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "gcn2", "(", "x", ")", ",", "inplace", "=", "False", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "N", "*", "M", "*", "V", ",", "self", ".", "n_segments1", ",", "self", ".", "c2", ")", ".", "contiguous", "(", ")", "\n", "\n", "x_sp", "=", "self", ".", "start_position2", "(", "x", ")", ".", "type_as", "(", "x", ")", "\n", "x_logsig", "=", "self", ".", "logsig2", "(", "x", ")", ".", "type_as", "(", "x", ")", "\n", "self", ".", "lstm2", ".", "flatten_parameters", "(", ")", "\n", "x", ",", "_", "=", "self", ".", "lstm2", "(", "torch", ".", "cat", "(", "[", "x_logsig", ",", "x_sp", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "n_segments2", ")", ".", "to", "(", "x", ".", "device", ")", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "\n", "N", "*", "M", ",", "V", ",", "self", ".", "n_segments2", ",", "self", ".", "c2", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "out", "=", "x", "\n", "out_channels", "=", "out", ".", "size", "(", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "N", ",", "M", ",", "out_channels", ",", "-", "1", ")", "\n", "out", "=", "out", ".", "mean", "(", "3", ")", "\n", "out", "=", "out", ".", "mean", "(", "1", ")", "\n", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.gcn.GraphConv.__init__": [[14, 30], ["torch.Module.__init__", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "gcn.MLP", "graph.tools.k_adjacency", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "graph.tools.normalize_adjacency_matrix", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__init__", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.k_adjacency", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.graph.tools.normalize_adjacency_matrix"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_scales", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A_binary", ",", "\n", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_scales", "=", "num_scales", "\n", "\n", "A_powers", "=", "[", "k_adjacency", "(", "A_binary", ",", "k", ",", "with_self", "=", "True", ")", "for", "k", "in", "range", "(", "num_scales", ")", "]", "\n", "A_powers", "=", "np", ".", "concatenate", "(", "[", "normalize_adjacency_matrix", "(", "g", ")", "for", "g", "in", "A_powers", "]", ")", "\n", "\n", "self", ".", "A_powers", "=", "torch", ".", "Tensor", "(", "A_powers", ")", "\n", "self", ".", "A_res", "=", "nn", ".", "init", ".", "uniform_", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "A_powers", ".", "shape", ")", ")", ",", "-", "1e-6", ",", "1e-6", ")", "\n", "\n", "self", ".", "mlp", "=", "MLP", "(", "in_channels", "*", "num_scales", ",", "[", "out_channels", "]", ",", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.gcn.GraphConv.forward": [[31, 41], ["gcn.GraphConv.A_powers.to", "gcn.GraphConv.A_powers.to", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "support.permute().contiguous().view.permute().contiguous().view.view", "support.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "gcn.GraphConv.mlp", "gcn.GraphConv.A_res.to", "support.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "support.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "shape", "\n", "self", ".", "A_powers", "=", "self", ".", "A_powers", ".", "to", "(", "x", ".", "device", ")", "\n", "A", "=", "self", ".", "A_powers", ".", "to", "(", "x", ".", "dtype", ")", "\n", "A", "=", "A", "+", "self", ".", "A_res", ".", "to", "(", "x", ".", "dtype", ")", "\n", "support", "=", "torch", ".", "einsum", "(", "'vu,nctu->nctv'", ",", "A", ",", "x", ")", "\n", "support", "=", "support", ".", "view", "(", "N", ",", "C", ",", "T", ",", "self", ".", "num_scales", ",", "V", ")", "\n", "support", "=", "support", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "self", ".", "num_scales", "*", "C", ",", "T", ",", "V", ")", "\n", "out", "=", "self", ".", "mlp", "(", "support", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.gcn.MLP.__init__": [[43, 51], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "gcn.MLP.layers.append", "gcn.MLP.layers.append", "gcn.MLP.layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.activation.activation_factory"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__init__", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.activation.activation_factory"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "channels", "=", "[", "in_channels", "]", "+", "out_channels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "channels", "[", "i", "-", "1", "]", ",", "channels", "[", "i", "]", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "channels", "[", "i", "]", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "activation_factory", "(", "activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.gcn.MLP.forward": [[52, 57], ["layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Input shape: (N,C,T,V)", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.logsignature.LogSig.__init__": [[10, 19], ["super().__init__", "signatory.LogSignature"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_segments", ",", "logsig_depth", ",", "logsig_channels", ")", ":", "\n", "        ", "super", "(", "LogSig", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "n_segments", "=", "n_segments", "\n", "self", ".", "logsig_depth", "=", "logsig_depth", "\n", "\n", "self", ".", "logsignature", "=", "signatory", ".", "LogSignature", "(", "depth", "=", "logsig_depth", ")", "\n", "\n", "self", ".", "logsig_channels", "=", "logsig_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.logsignature.LogSig.forward": [[20, 34], ["inp.size", "inp.size", "numpy.linspace", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "MultiLevelLogSig.append", "round", "logsignature.LogSig.logsignature().unsqueeze", "logsignature.LogSig.logsignature", "inp[].clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "# inp is a three dimensional tensor of shape (batch, stream, in_channels)", "\n", "        ", "nT", "=", "inp", ".", "size", "(", "1", ")", "\n", "dim_path", "=", "inp", ".", "size", "(", "-", "1", ")", "\n", "t_vec", "=", "np", ".", "linspace", "(", "1", ",", "nT", ",", "self", ".", "n_segments", "+", "1", ")", "\n", "t_vec", "=", "[", "int", "(", "round", "(", "x", ")", ")", "for", "x", "in", "t_vec", "]", "\n", "\n", "MultiLevelLogSig", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_segments", ")", ":", "\n", "            ", "MultiLevelLogSig", ".", "append", "(", "self", ".", "logsignature", "(", "\n", "inp", "[", ":", ",", "t_vec", "[", "i", "]", "-", "1", ":", "t_vec", "[", "i", "+", "1", "]", ",", ":", "]", ".", "clone", "(", ")", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "#         print(MultiLevelLogSig.type())", "\n", "", "out", "=", "torch", ".", "cat", "(", "MultiLevelLogSig", ",", "axis", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.logsignature.sp.__init__": [[39, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_segments", ")", ":", "\n", "        ", "super", "(", "sp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_segments", "=", "n_segments", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.logsignature.sp.forward": [[44, 49], ["inp.size", "numpy.linspace", "inp[].clone", "int", "round"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "nT", "=", "inp", ".", "size", "(", "1", ")", "\n", "t_vec", "=", "np", ".", "linspace", "(", "1", ",", "nT", ",", "self", ".", "n_segments", "+", "1", ")", "\n", "t_vec", "=", "[", "int", "(", "round", "(", "x", ")", ")", "-", "1", "for", "x", "in", "t_vec", "]", "\n", "return", "inp", "[", ":", ",", "t_vec", "[", ":", "-", "1", "]", "]", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.logsignature.get_time_vector": [[51, 53], ["torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape().repeat", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace().reshape", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "", "def", "get_time_vector", "(", "size", ",", "length", ")", ":", "\n", "    ", "return", "torch", ".", "linspace", "(", "0", ",", "1", ",", "length", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", ".", "repeat", "(", "size", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.logsignature.add_time": [[55, 58], ["get_time_vector().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "logsignature.get_time_vector"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.model.logsignature.get_time_vector"], ["", "def", "add_time", "(", "x", ",", "device", ")", ":", "\n", "    ", "t", "=", "get_time_vector", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "t", "]", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__init__": [[14, 47], ["feeder.Feeder.load_data", "feeder.Feeder.get_mean_map"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.load_data", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.get_mean_map"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "label_path", ",", "length_path", ",", "\n", "random_choose", "=", "False", ",", "random_shift", "=", "False", ",", "random_move", "=", "False", ",", "\n", "window_size", "=", "-", "1", ",", "normalization", "=", "False", ",", "debug", "=", "False", ",", "use_mmap", "=", "True", ",", "\n", "robust_add", "=", "False", ",", "robust_drop", "=", "False", ",", "add_rate", "=", "0.0", ",", "drop_rate", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        :param data_path:\n        :param label_path:\n        :param random_choose: If true, randomly choose a portion of the input sequence\n        :param random_shift: If true, randomly pad zeros at the begining or end of sequence\n        :param random_move:\n        :param window_size: The length of the output sequence\n        :param normalization: If true, normalize input sequence\n        :param debug: If true, only use the first 100 samples\n        :param use_mmap: If true, use mmap mode to load data, which can save the running memory\n        \"\"\"", "\n", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "label_path", "=", "label_path", "\n", "self", ".", "length_path", "=", "length_path", "\n", "self", ".", "random_choose", "=", "random_choose", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "random_move", "=", "random_move", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "use_mmap", "=", "use_mmap", "\n", "self", ".", "robust_add", "=", "robust_add", "\n", "self", ".", "robust_drop", "=", "robust_drop", "\n", "self", ".", "add_rate", "=", "add_rate", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "load_data", "(", ")", "\n", "if", "normalization", ":", "\n", "            ", "self", ".", "get_mean_map", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.load_data": [[48, 120], ["numpy.load", "numpy.load", "numpy.load", "ValueError", "open", "pickle.load", "numpy.zeros", "print", "numpy.zeros", "range", "open", "pickle.load", "len", "int", "[].transpose", "numpy.zeros", "range", "numpy.zeros.transpose", "int", "int", "print", "range", "int", "cv2.resize", "int", "numpy.ceil", "numpy.concatenate", "len", "numpy.random.choice", "int", "feeder.Feeder.length[].item", "range", "numpy.delete", "int", "feeder.Feeder.length[].item", "int", "int", "int", "numpy.ceil", "numpy.concatenate", "range", "feeder.Feeder.length[].item", "int", "int", "int", "feeder.Feeder.length[].item", "feeder.Feeder.length[].item", "feeder.Feeder.length[].item", "range"], "methods", ["None"], ["", "", "def", "load_data", "(", "self", ")", ":", "\n", "# data: N C V T M", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "self", ".", "label_path", ")", "as", "f", ":", "\n", "                ", "self", ".", "sample_name", ",", "self", ".", "label", "=", "pickle", ".", "load", "(", "f", ")", "\n", "#self.label = self.label[0:10000]", "\n", "", "", "except", ":", "\n", "# for pickle file from python2", "\n", "            ", "with", "open", "(", "self", ".", "label_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "sample_name", ",", "self", ".", "label", "=", "pickle", ".", "load", "(", "\n", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "#self.label = self.label[0:10000]", "\n", "", "", "try", ":", "\n", "            ", "self", ".", "length", "=", "np", ".", "load", "(", "self", ".", "length_path", ")", "\n", "", "except", ":", "\n", "            ", "self", ".", "length", "=", "np", ".", "zeros", "(", "(", "self", ".", "label", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "# load data", "\n", "", "if", "self", ".", "use_mmap", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "data_path", ",", "mmap_mode", "=", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "data_path", ")", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "label", "=", "self", ".", "label", "[", "0", ":", "100", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "0", ":", "100", "]", "\n", "self", ".", "length", "=", "self", ".", "length", "[", "0", ":", "100", "]", "\n", "self", ".", "sample_name", "=", "self", ".", "sample_name", "[", "0", ":", "100", "]", "\n", "\n", "", "if", "self", ".", "robust_add", "==", "True", "and", "self", ".", "robust_drop", "==", "True", ":", "\n", "            ", "raise", "ValueError", "(", "'Test either add or drop!'", ")", "\n", "", "elif", "self", ".", "robust_add", "==", "True", ":", "\n", "            ", "print", "(", "'start adding'", ")", "\n", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "self", ".", "data", ".", "shape", "\n", "add_data", "=", "np", ".", "zeros", "(", "(", "N", ",", "C", ",", "int", "(", "T", "*", "(", "1", "+", "self", ".", "add_rate", ")", ")", ",", "V", ",", "M", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "                ", "insert_len", "=", "int", "(", "(", "1", "+", "self", ".", "add_rate", ")", "*", "int", "(", "self", ".", "length", "[", "i", "]", ".", "item", "(", ")", ")", ")", "\n", "data_numpy", "=", "self", ".", "data", "[", "i", "]", "[", ":", ",", ":", "int", "(", "self", ".", "length", "[", "i", "]", ".", "item", "(", ")", ")", "]", ".", "transpose", "(", "3", ",", "1", ",", "2", ",", "0", ")", "\n", "\n", "data_rescaled", "=", "np", ".", "zeros", "(", "\n", "(", "data_numpy", ".", "shape", "[", "0", "]", ",", "insert_len", ",", "data_numpy", ".", "shape", "[", "2", "]", ",", "data_numpy", ".", "shape", "[", "3", "]", ")", ")", "\n", "for", "person_id", "in", "range", "(", "data_numpy", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "data_rescaled", "[", "person_id", "]", "=", "cv2", ".", "resize", "(", "data_numpy", "[", "person_id", "]", ",", "\n", "(", "data_numpy", ".", "shape", "[", "2", "]", ",", "\n", "insert_len", ")", ",", "\n", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "", "tmp_add", "=", "data_rescaled", ".", "transpose", "(", "3", ",", "1", ",", "2", ",", "0", ")", "\n", "rest", "=", "int", "(", "T", "*", "(", "1", "+", "self", ".", "add_rate", ")", ")", "-", "tmp_add", ".", "shape", "[", "1", "]", "\n", "num", "=", "int", "(", "np", ".", "ceil", "(", "rest", "/", "tmp_add", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "pad", "=", "np", ".", "concatenate", "(", "[", "tmp_add", "\n", "for", "_", "in", "range", "(", "num", "+", "1", ")", "]", ",", "1", ")", "[", ":", ",", ":", "int", "(", "T", "*", "(", "1", "+", "self", ".", "add_rate", ")", ")", "]", "\n", "add_data", "[", "i", "]", "=", "pad", "\n", "self", ".", "length", "[", "i", "]", "=", "int", "(", "self", ".", "length", "[", "i", "]", ".", "item", "(", ")", "*", "(", "1", "+", "self", ".", "add_rate", ")", ")", "\n", "", "self", ".", "data", "=", "add_data", "\n", "\n", "", "elif", "self", ".", "robust_drop", "==", "True", ":", "\n", "            ", "print", "(", "'start dropping'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "label", ")", ")", ":", "\n", "                ", "drop_index", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "1", ",", "int", "(", "self", ".", "length", "[", "i", "]", ".", "item", "(", ")", ")", ")", ",", "size", "=", "int", "(", "\n", "self", ".", "drop_rate", "*", "int", "(", "self", ".", "length", "[", "i", "]", ".", "item", "(", ")", ")", ")", ",", "replace", "=", "False", ")", "\n", "# self.data[i, :, drop_index] = self.data[i, :, drop_index-1]", "\n", "tmp_deleted", "=", "np", ".", "delete", "(", "self", ".", "data", "[", "i", "]", ",", "drop_index", ",", "1", ")", "[", "\n", ":", ",", ":", "int", "(", "self", ".", "length", "[", "i", "]", ".", "item", "(", ")", "*", "(", "1", "-", "self", ".", "drop_rate", ")", ")", "]", "\n", "try", ":", "\n", "                    ", "rest", "=", "self", ".", "data", ".", "shape", "[", "2", "]", "-", "tmp_deleted", ".", "shape", "[", "1", "]", "\n", "num", "=", "int", "(", "np", ".", "ceil", "(", "rest", "/", "tmp_deleted", ".", "shape", "[", "1", "]", ")", ")", "\n", "pad", "=", "np", ".", "concatenate", "(", "[", "tmp_deleted", "\n", "for", "_", "in", "range", "(", "num", "+", "1", ")", "]", ",", "1", ")", "[", ":", ",", ":", "self", ".", "data", ".", "shape", "[", "2", "]", "]", "\n", "self", ".", "data", "[", "i", "]", "=", "pad", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.get_mean_map": [[121, 128], ["data.mean().mean().mean", "data.transpose().reshape().std().reshape", "data.mean().mean", "data.transpose().reshape().std", "data.mean", "data.transpose().reshape", "data.transpose"], "methods", ["None"], ["", "", "", "", "def", "get_mean_map", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", "\n", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "data", ".", "shape", "\n", "self", ".", "mean_map", "=", "data", ".", "mean", "(", "axis", "=", "2", ",", "keepdims", "=", "True", ")", ".", "mean", "(", "\n", "axis", "=", "4", ",", "keepdims", "=", "True", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "self", ".", "std_map", "=", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "4", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "\n", "(", "N", "*", "T", "*", "M", ",", "C", "*", "V", ")", ")", ".", "std", "(", "axis", "=", "0", ")", ".", "reshape", "(", "(", "C", ",", "1", ",", "V", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__len__": [[129, 131], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__iter__": [[132, 134], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.__getitem__": [[135, 153], ["numpy.array", "feeders.tools.random_shift", "feeders.tools.random_choose", "feeders.tools.random_move", "feeders.tools.auto_pading"], "methods", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.random_shift", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.random_choose", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.random_move", "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.auto_pading"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_numpy", "=", "self", ".", "data", "[", "index", "]", "\n", "label", "=", "self", ".", "label", "[", "index", "]", "\n", "length", "=", "self", ".", "length", "[", "index", "]", "\n", "data_numpy", "=", "np", ".", "array", "(", "data_numpy", ")", "\n", "\n", "if", "self", ".", "normalization", ":", "\n", "            ", "data_numpy", "=", "(", "data_numpy", "-", "self", ".", "mean_map", ")", "/", "self", ".", "std_map", "\n", "", "if", "self", ".", "random_shift", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "random_shift", "(", "data_numpy", ")", "\n", "", "if", "self", ".", "random_choose", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "random_choose", "(", "data_numpy", ",", "self", ".", "window_size", ")", "\n", "", "elif", "self", ".", "window_size", ">", "0", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "auto_pading", "(", "data_numpy", ",", "self", ".", "window_size", ")", "\n", "", "if", "self", ".", "random_move", ":", "\n", "            ", "data_numpy", "=", "tools", ".", "random_move", "(", "data_numpy", ")", "\n", "\n", "", "return", "data_numpy", ",", "label", ",", "length", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.Feeder.top_k": [[154, 158], ["score.argsort", "len", "enumerate", "sum"], "methods", ["None"], ["", "def", "top_k", "(", "self", ",", "score", ",", "top_k", ")", ":", "\n", "        ", "rank", "=", "score", ".", "argsort", "(", ")", "\n", "hit_top_k", "=", "[", "l", "in", "rank", "[", "i", ",", "-", "top_k", ":", "]", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "label", ")", "]", "\n", "return", "sum", "(", "hit_top_k", ")", "*", "1.0", "/", "len", "(", "hit_top_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.feeder.import_class": [[160, 166], ["name.split", "__import__", "getattr"], "function", ["None"], ["", "", "def", "import_class", "(", "name", ")", ":", "\n", "    ", "components", "=", "name", ".", "split", "(", "'.'", ")", "\n", "mod", "=", "__import__", "(", "components", "[", "0", "]", ")", "\n", "for", "comp", "in", "components", "[", "1", ":", "]", ":", "\n", "        ", "mod", "=", "getattr", "(", "mod", ",", "comp", ")", "\n", "", "return", "mod", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.downsample": [[6, 10], ["numpy.random.randint"], "function", ["None"], ["for", "i", ",", "j", "in", "link", ":", "\n", "        ", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "", "return", "A", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.temporal_slice": [[12, 17], ["data_numpy.reshape().transpose().reshape", "data_numpy.reshape().transpose", "data_numpy.reshape"], "function", ["None"], ["    ", "Dl", "=", "np", ".", "sum", "(", "A", ",", "0", ")", "\n", "h", ",", "w", "=", "A", ".", "shape", "\n", "Dn", "=", "np", ".", "zeros", "(", "(", "w", ",", "w", ")", ")", "\n", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "        ", "if", "Dl", "[", "i", "]", ">", "0", ":", "\n", "            ", "Dn", "[", "i", ",", "i", "]", "=", "Dl", "[", "i", "]", "**", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.mean_subtractor": [[19, 30], ["valid_frame.argmax", "len", "valid_frame[].argmax"], "function", ["None"], ["return", "AD", "\n", "\n", "\n", "", "def", "get_spatial_graph", "(", "num_node", ",", "self_link", ",", "inward", ",", "outward", ")", ":", "\n", "    ", "I", "=", "edge2mat", "(", "self_link", ",", "num_node", ")", "\n", "In", "=", "normalize_digraph", "(", "edge2mat", "(", "inward", ",", "num_node", ")", ")", "\n", "Out", "=", "normalize_digraph", "(", "edge2mat", "(", "outward", ",", "num_node", ")", ")", "\n", "A", "=", "np", ".", "stack", "(", "(", "I", ",", "In", ",", "Out", ")", ")", "\n", "return", "A", "\n", "\n", "\n", "", "def", "k_adjacency", "(", "A", ",", "k", ",", "with_self", "=", "False", ",", "self_factor", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.auto_pading": [[32, 41], ["numpy.zeros", "random.randint"], "function", ["None"], ["I", "=", "np", ".", "eye", "(", "len", "(", "A", ")", ",", "dtype", "=", "A", ".", "dtype", ")", "\n", "if", "k", "==", "0", ":", "\n", "        ", "return", "I", "\n", "", "Ak", "=", "np", ".", "minimum", "(", "np", ".", "linalg", ".", "matrix_power", "(", "A", "+", "I", ",", "k", ")", ",", "1", ")", "-", "np", ".", "minimum", "(", "np", ".", "linalg", ".", "matrix_power", "(", "A", "+", "I", ",", "k", "-", "1", ")", ",", "1", ")", "\n", "if", "with_self", ":", "\n", "        ", "Ak", "+=", "(", "self_factor", "*", "I", ")", "\n", "", "return", "Ak", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.random_choose": [[43, 55], ["random.randint", "tools.auto_pading"], "function", ["home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.auto_pading"], ["    ", "node_degrees", "=", "A", ".", "sum", "(", "-", "1", ")", "\n", "degs_inv_sqrt", "=", "np", ".", "power", "(", "node_degrees", ",", "-", "0.5", ")", "\n", "norm_degs_matrix", "=", "np", ".", "eye", "(", "len", "(", "node_degrees", ")", ")", "*", "degs_inv_sqrt", "\n", "return", "(", "norm_degs_matrix", "@", "A", "@", "norm_degs_matrix", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "", "def", "get_adjacency_matrix", "(", "edges", ",", "num_nodes", ")", ":", "\n", "    ", "A", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "edge", "in", "edges", ":", "\n", "        ", "A", "[", "edge", "]", "=", "1.", "\n", "", "return", "A", "", "", ""]], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.random_move": [[57, 102], ["random.choice", "numpy.arange().round().astype", "numpy.append", "len", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.array", "range", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.dot", "np.dot.reshape", "numpy.arange().round", "xy.reshape", "numpy.linspace", "numpy.arange", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.random_shift": [[104, 116], ["numpy.zeros", "valid_frame.argmax", "random.randint", "len", "valid_frame[].argmax"], "function", ["None"], []], "home.repos.pwc.inspect_result.steveliao93_gcn_logsigrnn.feeders.tools.openpose_match": [[118, 160], ["data_numpy[].sum", "data_numpy[].reshape", "data_numpy[].reshape", "range", "range", "numpy.all", "range", "numpy.zeros", "range", "data_numpy[].sum().sum", "numpy.zeros", "distance[].argmin", "range", "data_numpy[].transpose", "data_numpy[].sum"], "function", ["None"], []]}