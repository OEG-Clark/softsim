{"home.repos.pwc.inspect_result.hamedn_SliceNDice.None.driver.preprocess_advertiser_data": [[7, 32], ["utils.process_stopwords_dict_from_file", "logging.info", "logging.info", "entity_df[].apply", "entity_df[].apply", "set", "set", "set", "set", "pd.isnull", "pd.isnull", "blob.split", "blob.split", "utils.is_stopword"], "function", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.process_stopwords_dict_from_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.is_stopword"], ["def", "preprocess_advertiser_data", "(", "entity_df", ",", "view_set", ",", "entity_id_field", ",", "min_attribute_length", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param entity_df: original, unprocessed dataframe with advertiser data (CSV string per cell \"a,b,c\")\n    :param view_set: list of view identifiers\n    :param entity_id_field: field identifier for the entity id\n    :param min_attribute_length: a minimum length for all values, anything lower is automatically considered a\n                                 stopword (int) (default=0)\n    :return: dataframe with shape (n_entities, n_views + 1) with each cell a set of values\n    \"\"\"", "\n", "\n", "# build stopwords dict.", "\n", "stopword_dict", "=", "process_stopwords_dict_from_file", "(", "file", "=", "'stopwords/stopwords.txt'", ",", "all_views", "=", "view_set", ")", "\n", "\n", "# prune stopword attribute values and convert to sets", "\n", "for", "view", "in", "view_set", ":", "\n", "        ", "if", "view", "not", "in", "stopword_dict", ":", "\n", "            ", "entity_df", "[", "view", "]", "=", "entity_df", "[", "view", "]", ".", "apply", "(", "\n", "lambda", "blob", ":", "set", "(", ")", "if", "(", "pd", ".", "isnull", "(", "blob", ")", "or", "blob", "==", "''", ")", "else", "set", "(", "[", "w", "for", "w", "in", "blob", ".", "split", "(", "','", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "entity_df", "[", "view", "]", "=", "entity_df", "[", "view", "]", ".", "apply", "(", "lambda", "blob", ":", "set", "(", ")", "if", "(", "pd", ".", "isnull", "(", "blob", ")", "or", "blob", "==", "''", ")", "else", "set", "(", "\n", "[", "w", "for", "w", "in", "blob", ".", "split", "(", "','", ")", "if", "not", "is_stopword", "(", "w", ",", "stopword_dict", "[", "view", "]", ",", "min_attribute_length", ")", "]", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'Removed stopword values and preprocessed successfully.'", ")", "\n", "logging", ".", "info", "(", "'New dataframe shape: {}'", ".", "format", "(", "entity_df", ".", "shape", ")", ")", "\n", "return", "entity_df", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDiceJobParams.__init__": [[24, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "entity_id_field", ",", "\n", "all_views", ",", "max_entities", ",", "view_limit", ",", "local_entity_whitelist_enabled", ",", "log_dir_path", ")", ":", "\n", "        ", "self", ".", "ENTITY_ID_FIELD", "=", "entity_id_field", "\n", "self", ".", "ALL_VIEWS", "=", "all_views", "\n", "self", ".", "MAX_ENTITIES", "=", "max_entities", "\n", "self", ".", "VIEW_LIMIT", "=", "view_limit", "\n", "self", ".", "LOCAL_ENTITY_WHITELIST_ENABLED", "=", "local_entity_whitelist_enabled", "\n", "self", ".", "LOG_DIR_PATH", "=", "log_dir_path", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.log_block_review_metadata": [[47, 173], ["str", "ranked_views.sort", "dict", "networkx.MultiGraph", "networkx.MultiGraph.add_nodes_from", "enumerate", "plt.figure", "list", "list.sort", "networkx.circular_layout", "networkx.draw", "utils.build_edge_label_dict", "networkx.draw_networkx_edge_labels", "zip", "plt.xlim", "plt.xlim", "plt.ylim", "enumerate", "plt.figure.legend", "plt.figure.show", "plt.figure.savefig", "plt.close", "logging.debug", "open", "open.write", "open.close", "logging.debug", "slicendice.SliceNDice.get_interpretable_susp_score", "len", "str", "logging.info", "uuid.uuid4", "plt.get_cmap", "numpy.linspace", "numpy.linspace().tolist", "list.items", "networkx.MultiGraph.edges", "edge_colors.append", "edge_weight.append", "networkx.get_edge_attributes", "min", "max", "min", "max", "patches.append", "open.write", "open.write", "open.write", "list", "list.sort", "slicendice.SliceNDice.calculate_susp_of_block", "datetime.datetime.now", "slicendice.SliceNDice.data_dict.values", "slicendice.SliceNDice.calculate_susp_for_single_view", "ranked_views.append", "len", "itertools.combinations", "dict", "networkx.circular_layout.values", "matplotlib.Patch", "matplotlib.Patch", "len", "open.write", "len", "numpy.linspace", "len", "len", "edges[].add", "len", "networkx.MultiGraph.add_edge", "counts[].add", "open.write", "len", "set", "set", "len", "list.items", "len"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.build_edge_label_dict", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.get_interpretable_susp_score", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_of_block", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_for_single_view"], ["def", "log_block_review_metadata", "(", "self", ",", "chosen_entities", ",", "chosen_views", ",", "block_metadata", ")", ":", "\n", "        ", "\"\"\"\n        Log relevant assets.\n        :param chosen_entities: set of chosen entities in the block to log\n        :param chosen_views: list of chosen views found in the block\n        :param block_metadata: dictionary describing block metadata, key is view identifier, and value is tuple of\n            (view mass, view volume, view density, view value counts)\n        :return:\n        \"\"\"", "\n", "\n", "image_directory", "=", "'images/'", "\n", "value_directory", "=", "'values/'", "\n", "\n", "# set block identifier", "\n", "block_uuid", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "\n", "# get relevant block rows", "\n", "chosen_entities", "=", "chosen_entities", "\n", "chosen_views", "=", "chosen_views", "\n", "chosen_entity_rows", "=", "[", "row", "for", "row", "in", "self", ".", "data_dict", ".", "values", "(", ")", "if", "\n", "row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "in", "chosen_entities", "]", "\n", "\n", "# rank views by most to least promising", "\n", "ranked_views", "=", "[", "]", "\n", "for", "view", "in", "self", ".", "job_params", ".", "ALL_VIEWS", ":", "\n", "            ", "if", "block_metadata", "[", "view", "]", "[", "2", "]", ">", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ":", "\n", "                ", "view_susp", "=", "self", ".", "calculate_susp_for_single_view", "(", "len", "(", "chosen_entities", ")", ",", "block_metadata", "[", "view", "]", "[", "0", "]", ",", "\n", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ")", "\n", "ranked_views", ".", "append", "(", "(", "view", ",", "view_susp", ")", ")", "\n", "\n", "", "", "ranked_views", ".", "sort", "(", "key", "=", "lambda", "change", ":", "change", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "view_to_score_map", "=", "dict", "(", "ranked_views", ")", "\n", "ranked_view_colors", "=", "plt", ".", "get_cmap", "(", "'gist_rainbow'", ")", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "self", ".", "job_params", ".", "ALL_VIEWS", ")", ")", ")", "\n", "ranked_view_weights", "=", "np", ".", "linspace", "(", "5", ",", "3", ",", "len", "(", "chosen_views", ")", ")", ".", "tolist", "(", ")", "+", "[", "0.1", "]", "*", "(", "\n", "len", "(", "self", ".", "job_params", ".", "ALL_VIEWS", ")", "-", "len", "(", "chosen_views", ")", ")", "\n", "\n", "# create graph", "\n", "G", "=", "nx", ".", "MultiGraph", "(", ")", "\n", "G", ".", "add_nodes_from", "(", "chosen_entities", ")", "\n", "for", "rank_id", ",", "(", "view", ",", "view_susp", ")", "in", "enumerate", "(", "ranked_views", ")", ":", "\n", "            ", "edges", "=", "{", "}", "\n", "color", "=", "ranked_view_colors", "[", "rank_id", "]", "\n", "weight", "=", "ranked_view_weights", "[", "rank_id", "]", "\n", "\n", "for", "row", "in", "chosen_entity_rows", ":", "\n", "                ", "attribute_set", "=", "row", "[", "view", "]", "\n", "entity_id", "=", "row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "\n", "for", "val", "in", "attribute_set", ":", "\n", "                    ", "if", "val", "not", "in", "edges", ":", "\n", "                        ", "edges", "[", "val", "]", "=", "set", "(", ")", "\n", "", "edges", "[", "val", "]", ".", "add", "(", "entity_id", ")", "\n", "\n", "", "", "for", "val", ",", "entity_set", "in", "edges", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "entity_set", ")", "<", "2", ":", "\n", "                    ", "continue", "\n", "", "for", "pair", "in", "combinations", "(", "entity_set", ",", "2", ")", ":", "\n", "                    ", "G", ".", "add_edge", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ",", "weight", "=", "weight", ",", "color", "=", "color", ",", "shared", "=", "(", "view", ",", "val", ")", ")", "\n", "\n", "# visualize graph and save to file", "\n", "", "", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "15", ")", ")", "\n", "edges", "=", "list", "(", "G", ".", "edges", "(", "data", "=", "True", ")", ")", "\n", "edges", ".", "sort", "(", "key", "=", "lambda", "edge", ":", "edge", "[", "2", "]", "[", "'weight'", "]", ")", "\n", "edge_colors", "=", "[", "]", "\n", "edge_weight", "=", "[", "]", "\n", "for", "(", "u", ",", "v", ",", "attr_dict", ")", "in", "edges", ":", "\n", "            ", "edge_colors", ".", "append", "(", "attr_dict", "[", "'color'", "]", ")", "\n", "edge_weight", ".", "append", "(", "attr_dict", "[", "'weight'", "]", ")", "\n", "\n", "", "pos", "=", "nx", ".", "circular_layout", "(", "G", ")", "\n", "nx", ".", "draw", "(", "G", ",", "pos", ",", "edgelist", "=", "edges", ",", "edge_color", "=", "edge_colors", ",", "width", "=", "edge_weight", ",", "with_labels", "=", "True", ",", "font_size", "=", "9", ",", "\n", "node_size", "=", "100", ")", "\n", "edge_label_dict", "=", "build_edge_label_dict", "(", "nx", ".", "get_edge_attributes", "(", "G", ",", "'shared'", ")", ")", "\n", "nx", ".", "draw_networkx_edge_labels", "(", "G", ",", "pos", ",", "edge_labels", "=", "edge_label_dict", ",", "font_size", "=", "6", ",", "bbox", "=", "dict", "(", "alpha", "=", "0", ")", ")", "\n", "x_values", ",", "y_values", "=", "zip", "(", "*", "pos", ".", "values", "(", ")", ")", "\n", "x_min", ",", "x_max", "=", "min", "(", "x_values", ")", ",", "max", "(", "x_values", ")", "\n", "x_margin", "=", "(", "x_max", "-", "x_min", ")", "*", "0.25", "\n", "plt", ".", "xlim", "(", "x_min", "-", "x_margin", ",", "x_max", "+", "x_margin", ")", "\n", "y_min", ",", "y_max", "=", "min", "(", "y_values", ")", ",", "max", "(", "y_values", ")", "\n", "y_margin", "=", "(", "y_max", "-", "y_min", ")", "*", "0.25", "\n", "plt", ".", "xlim", "(", "x_min", "-", "x_margin", ",", "x_max", "+", "x_margin", ")", "\n", "plt", ".", "ylim", "(", "y_min", "-", "y_margin", ",", "y_max", "+", "y_margin", ")", "\n", "patches", "=", "[", "]", "\n", "for", "rank_id", ",", "(", "view", ",", "view_susp", ")", "in", "enumerate", "(", "ranked_views", ")", ":", "\n", "            ", "color", "=", "ranked_view_colors", "[", "rank_id", "]", "\n", "patches", ".", "append", "(", "mpatches", ".", "Patch", "(", "color", "=", "color", ",", "label", "=", "'{} ({})'", ".", "format", "(", "view", ",", "view_to_score_map", "[", "view", "]", ")", ")", ")", "\n", "", "fig", ".", "legend", "(", "handles", "=", "patches", ",", "ncol", "=", "2", ")", "\n", "fig", ".", "show", "(", ")", "\n", "\n", "graph_out_path", "=", "image_directory", "+", "block_uuid", "+", "'.pdf'", "\n", "fig", ".", "savefig", "(", "graph_out_path", ",", "format", "=", "'pdf'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "logging", ".", "debug", "(", "'Wrote graph for block {}'", ".", "format", "(", "block_uuid", ")", ")", "\n", "\n", "# generate values asset file", "\n", "value_out_path", "=", "value_directory", "+", "block_uuid", "+", "'.txt'", "\n", "value_buf", "=", "open", "(", "value_out_path", ",", "'w'", ")", "\n", "value_buf", ".", "write", "(", "'Number of entities: {}'", ".", "format", "(", "len", "(", "chosen_entity_rows", ")", ")", ")", "\n", "\n", "for", "(", "view", ",", "_", ")", "in", "ranked_views", ":", "\n", "            ", "value_buf", ".", "write", "(", "'\\n\\n\\n----------------------------\\n'", ")", "\n", "value_buf", ".", "write", "(", "view", "+", "'\\n'", ")", "\n", "value_buf", ".", "write", "(", "'----------------------------\\n\\n\\n'", ")", "\n", "counts", "=", "{", "}", "\n", "for", "row", "in", "chosen_entity_rows", ":", "\n", "                ", "for", "val", "in", "row", "[", "view", "]", ":", "\n", "                    ", "if", "val", "not", "in", "counts", ":", "\n", "                        ", "counts", "[", "val", "]", "=", "set", "(", ")", "\n", "", "counts", "[", "val", "]", ".", "add", "(", "row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", ")", "\n", "", "", "counts", "=", "list", "(", "(", "val", ",", "len", "(", "entities", ")", ",", "entities", ")", "for", "val", ",", "entities", "in", "counts", ".", "items", "(", ")", "if", "len", "(", "entities", ")", ">", "1", ")", "\n", "counts", ".", "sort", "(", "key", "=", "lambda", "val_tup", ":", "val_tup", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "for", "tup", "in", "counts", ":", "\n", "                ", "value_buf", ".", "write", "(", "\"\\t{}, {}\\n\"", ".", "format", "(", "tup", "[", "0", "]", ",", "tup", "[", "1", "]", ")", ")", "\n", "for", "entity", "in", "tup", "[", "2", "]", ":", "\n", "                    ", "value_buf", ".", "write", "(", "\"\\t\\t{}\\n\"", ".", "format", "(", "entity", ")", ")", "\n", "\n", "", "", "", "value_buf", ".", "close", "(", ")", "\n", "logging", ".", "debug", "(", "'Wrote values for block {}'", ".", "format", "(", "block_uuid", ")", ")", "\n", "\n", "# log results to BQ", "\n", "block_susp", "=", "self", ".", "get_interpretable_susp_score", "(", "self", ".", "calculate_susp_of_block", "(", "chosen_views", ",", "block_metadata", ")", ")", "\n", "block_size", "=", "len", "(", "chosen_entities", ")", "\n", "found_at", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "\n", "result_row", "=", "(", "block_uuid", ",", "block_size", ",", "block_susp", ",", "chosen_entities", ",", "chosen_views", ",", "\n", "graph_out_path", ",", "value_out_path", ",", "found_at", ")", "\n", "logging", ".", "info", "(", "'Row for block {}: {}'", ".", "format", "(", "block_uuid", ",", "result_row", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.seed_views": [[174, 203], ["views_to_sort.sort", "pd.DataFrame", "pd.DataFrame.sample", "list", "views_to_sort.append", "len", "logging.debug", "scores.append", "numpy.percentile"], "methods", ["None"], ["", "def", "seed_views", "(", "self", ",", "percentile", "=", "99.5", ")", ":", "\n", "        ", "\"\"\"\n        Sample views inversely proportional to a percentile of their empirical value frequency distributions.\n        De-prioritizes \"low-signal\" views in which sharing frequency is very high, in favor of \"high-signal\" views.\n\n        :param percentile: the percentile to use to evaluate the value frequency distribution (99.5 by default)\n        :return: list of chosen views\n        \"\"\"", "\n", "\n", "views_to_sort", "=", "[", "]", "\n", "for", "view", "in", "self", ".", "job_params", ".", "ALL_VIEWS", ":", "\n", "            ", "scores", "=", "[", "]", "\n", "if", "self", ".", "remaining_tensor_stats", "[", "view", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "logging", ".", "debug", "(", "'View {} fully exhausted (0 mass left).  Removing from seeding.'", ".", "format", "(", "view", ")", ")", "\n", "continue", "# view is fully sparse... avoid using it for seeding (it can never be satisfied)", "\n", "", "for", "key", "in", "self", ".", "tensor_stats_noidf", "[", "view", "]", "[", "3", "]", ":", "\n", "                ", "scores", ".", "append", "(", "self", ".", "tensor_stats_noidf", "[", "view", "]", "[", "3", "]", "[", "key", "]", ")", "\n", "", "views_to_sort", ".", "append", "(", "{", "\"view\"", ":", "view", ",", "\"weight\"", ":", "1.0", "/", "np", ".", "percentile", "(", "scores", ",", "percentile", ")", "}", ")", "\n", "\n", "", "if", "len", "(", "views_to_sort", ")", "<", "self", ".", "job_params", ".", "VIEW_LIMIT", ":", "\n", "            ", "return", "UNABLE_TO_FIND_BLOCK", "# not enough dense views to find something according to specification", "\n", "\n", "", "views_to_sort", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "tup", "[", "\"weight\"", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "selection", "=", "pd", ".", "DataFrame", "(", "views_to_sort", ")", "\n", "selected", "=", "selection", ".", "sample", "(", "n", "=", "self", ".", "job_params", ".", "VIEW_LIMIT", ",", "weights", "=", "selection", "[", "\"weight\"", "]", ")", "\n", "\n", "return_list", "=", "list", "(", "selected", "[", "\"view\"", "]", ")", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.seed_entities": [[204, 314], ["set", "logging.debug", "set", "set", "slicendice.SliceNDice.compute_block_metadata", "logging.debug", "shuffle", "logging.debug", "choice", "logging.debug", "list", "set", "set", "logging.debug", "len", "logging.debug", "logging.debug", "list", "shuffle", "list", "shuffle", "logging.debug", "logging.debug", "logging.debug", "[].values", "choice", "len", "logging.debug", "sample", "unsatisfied_views.append", "[].values", "logging.debug", "len", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "len", "len", "choice", "set.add", "slicendice.SliceNDice.compute_block_metadata", "logging.debug", "logging.debug"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_block_metadata", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_block_metadata"], ["", "def", "seed_entities", "(", "self", ",", "chosen_views", ",", "local_entity_whitelist", "=", "set", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Select entities in seed using a stochastic algorithm, given a list of views.\n\n        :param local_entity_whitelist: set of entities to avoid\n        :param chosen_views: list of chosen views over which density constraints should be satisfied.\n        :return: set of chosen entities which satisfy density constraints over the list of views provided.\n        \"\"\"", "\n", "\n", "num_iters", "=", "0", "\n", "seed_found", "=", "False", "\n", "while", "not", "seed_found", ":", "\n", "            ", "if", "num_iters", ">", "1000", ":", "\n", "                ", "logging", ".", "debug", "(", "'Unable to grow a suitable seed on these views.'", ")", "\n", "return", "UNABLE_TO_FIND_BLOCK", "\n", "", "num_iters", "+=", "1", "\n", "\n", "chosen_entities", "=", "set", "(", ")", "\n", "\n", "# get the initial two entities that match on some view", "\n", "num_attempts_to_initialize_seed", "=", "0", "\n", "while", "True", ":", "\n", "                ", "if", "num_attempts_to_initialize_seed", ">", "1000", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Unable to initialize a seed on these views.'", ")", "\n", "return", "UNABLE_TO_FIND_BLOCK", "# cannot initialize the seed", "\n", "", "initial_view", "=", "choice", "(", "chosen_views", ")", "\n", "logging", ".", "debug", "(", "'Chose initial view {}'", ".", "format", "(", "initial_view", ")", ")", "\n", "all_lists_of_connected_entities", "=", "list", "(", "self", ".", "tensor_stats_noidf", "[", "initial_view", "]", "[", "5", "]", ".", "values", "(", ")", ")", "\n", "chosen_list_of_connected_entities", "=", "set", "(", "choice", "(", "all_lists_of_connected_entities", ")", ")", "\n", "connected_entity_candidates", "=", "chosen_list_of_connected_entities", "-", "local_entity_whitelist", "\n", "if", "len", "(", "connected_entity_candidates", ")", "<", "2", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Chosen value list not long enough, trying again...'", ".", "format", "(", "initial_view", ")", ")", "\n", "num_attempts_to_initialize_seed", "+=", "1", "\n", "continue", "\n", "", "chosen_entities", "=", "set", "(", "sample", "(", "connected_entity_candidates", ",", "2", ")", ")", "\n", "logging", ".", "debug", "(", "'Chose entities: {}'", ".", "format", "(", "chosen_entities", ")", ")", "\n", "break", "\n", "\n", "# get block stats", "\n", "", "block_stats", "=", "self", ".", "compute_block_metadata", "(", "chosen_entities", ")", "\n", "\n", "# check constraints", "\n", "unsatisfied_views", "=", "[", "]", "\n", "for", "view", "in", "chosen_views", ":", "\n", "                ", "if", "block_stats", "[", "view", "]", "[", "2", "]", "<", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ":", "\n", "                    ", "unsatisfied_views", ".", "append", "(", "view", ")", "\n", "\n", "", "", "logging", ".", "debug", "(", "'Unsatisfied views: {}'", ".", "format", "(", "unsatisfied_views", ")", ")", "\n", "\n", "if", "not", "len", "(", "unsatisfied_views", ")", ":", "\n", "                ", "logging", ".", "debug", "(", "'No unsatisfied views! Breaking.'", ".", "format", "(", "unsatisfied_views", ")", ")", "\n", "seed_found", "=", "True", "\n", "break", "\n", "\n", "# grow and try to satisfy constraints", "\n", "", "shuffle", "(", "unsatisfied_views", ")", "\n", "seed_satisfiable", "=", "True", "\n", "\n", "for", "view_to_satisfy", "in", "unsatisfied_views", ":", "\n", "                ", "logging", ".", "debug", "(", "'Trying to satisfy constraint for view {}'", ".", "format", "(", "view_to_satisfy", ")", ")", "\n", "view_constraint_satisfied", "=", "False", "\n", "all_lists_of_connected_entities", "=", "list", "(", "self", ".", "tensor_stats_noidf", "[", "view_to_satisfy", "]", "[", "5", "]", ".", "values", "(", ")", ")", "\n", "shuffle", "(", "all_lists_of_connected_entities", ")", "\n", "shuffled_chosen_entities", "=", "list", "(", "chosen_entities", ")", "\n", "shuffle", "(", "shuffled_chosen_entities", ")", "\n", "for", "entity", "in", "shuffled_chosen_entities", ":", "\n", "                    ", "for", "list_of_connected_entities", "in", "all_lists_of_connected_entities", ":", "\n", "                        ", "if", "entity", "in", "list_of_connected_entities", ":", "\n", "                            ", "candidate_additions", "=", "[", "cand_entity", "for", "cand_entity", "in", "list_of_connected_entities", "if", "\n", "cand_entity", "!=", "entity", "and", "cand_entity", "not", "in", "local_entity_whitelist", "]", "\n", "if", "len", "(", "candidate_additions", ")", ":", "\n", "                                ", "entity_to_add", "=", "choice", "(", "candidate_additions", ")", "\n", "chosen_entities", ".", "add", "(", "entity_to_add", ")", "\n", "block_stats", "=", "self", ".", "compute_block_metadata", "(", "chosen_entities", ")", "\n", "if", "block_stats", "[", "view_to_satisfy", "]", "[", "2", "]", ">", "self", ".", "tensor_stats", "[", "view_to_satisfy", "]", "[", "2", "]", ":", "\n", "                                    ", "logging", ".", "debug", "(", "'View constraint satisfied by adding {}'", ".", "format", "(", "entity_to_add", ")", ")", "\n", "view_constraint_satisfied", "=", "True", "\n", "break", "\n", "", "else", ":", "\n", "                                    ", "logging", ".", "debug", "(", "\n", "'View constraint still not satisfied by adding {}'", ".", "format", "(", "entity_to_add", ")", ")", "\n", "\n", "", "", "", "", "if", "view_constraint_satisfied", ":", "\n", "                        ", "logging", ".", "debug", "(", "'View constraint satisfied so moving on to next view'", ")", "\n", "break", "\n", "\n", "", "", "if", "not", "view_constraint_satisfied", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Tried everything but cant satisfy this view!  Seed is dead'", ")", "\n", "seed_satisfiable", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "not", "seed_satisfiable", ":", "\n", "                ", "logging", ".", "debug", "(", "'Trying next seed iter: {}'", ".", "format", "(", "num_iters", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "seed_found", "=", "True", "\n", "logging", ".", "debug", "(", "'Found a seed.  Validating...'", ")", "\n", "for", "view", "in", "chosen_views", ":", "\n", "                    ", "if", "block_stats", "[", "view", "]", "[", "2", "]", "<", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ":", "\n", "                        ", "seed_found", "=", "False", "\n", "logging", ".", "debug", "(", "'Seed did not meet density constraints'", ")", "\n", "", "", "if", "len", "(", "chosen_entities", ")", ">", "self", ".", "job_params", ".", "MAX_ENTITIES", ":", "\n", "                    ", "seed_found", "=", "False", "\n", "logging", ".", "debug", "(", "'Seed size {} too large given max group capacity of {}'", ".", "format", "(", "len", "(", "chosen_entities", ")", ",", "\n", "self", ".", "job_params", ".", "MAX_ENTITIES", ")", ")", "\n", "", "if", "seed_found", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Seed validated!  On iter: {}'", ".", "format", "(", "num_iters", ")", ")", "\n", "\n", "", "", "", "logging", ".", "debug", "(", "'Final chosen entities: {}'", ".", "format", "(", "chosen_entities", ")", ")", "\n", "return", "set", "(", "chosen_entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_for_single_view": [[315, 332], ["numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "calculate_susp_for_single_view", "(", "self", ",", "num_nodes_in_block", ",", "mass_in_block", ",", "background_view_density", ")", ":", "\n", "        ", "\"\"\"\n        Calculates suspiciousness score given block size, mass and background view density.\n\n        :param num_nodes_in_block: n from the paper; number of nodes in the block being considered\n        :param mass_in_block: m from the paper; total mass (sum of edge values) in the block being considered\n        :param background_view_density: P from the paper; background density of the view being considered\n        :return: suspiciousness score of a single view, defined as per Defn. 2 (MVSG scoring metric) from the paper;\n        negative log-likelihood under MVERE model\n        \"\"\"", "\n", "volume", "=", "(", "num_nodes_in_block", "*", "(", "num_nodes_in_block", "-", "1", ")", ")", "/", "2.0", "\n", "susp", "=", "(", "volume", "*", "np", ".", "log", "(", "background_view_density", ")", ")", "+", "(", "volume", "*", "np", ".", "log", "(", "volume", ")", ")", "-", "volume", "-", "np", ".", "log", "(", "volume", ")", "-", "(", "\n", "volume", "*", "np", ".", "log", "(", "mass_in_block", ")", ")", "+", "np", ".", "log", "(", "mass_in_block", ")", "+", "(", "\n", "mass_in_block", "*", "(", "1.0", "/", "background_view_density", ")", ")", "\n", "\n", "#return np.log2(susp)", "\n", "return", "susp", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_block_metadata": [[333, 389], ["float", "slicendice.SliceNDice.data_dict.values", "sum", "sum", "len", "utils.is_valid_attr_value", "attr_to_entity_map[].add", "int", "counts.values", "counts.items", "set", "int"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.is_valid_attr_value"], ["", "def", "compute_block_metadata", "(", "self", ",", "chosen_entities", ",", "disable_idf", "=", "False", ",", "return_attr_to_entity_map", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Compute block metadata over chosen entities and all views.\n\n        :param chosen_entities: set of chosen entities\n        :param disable_idf: whether to use IDF for scoring mass.  if True, only use counts; if False, use IDF\n        :param return_attr_to_entity_map: whether to return a mapping of attribute values to associated entities; if\n        True, it's returned, and if False, it is not\n        :return: dictionary describing block metadata; key is view identifier, and value is tuple of\n        (view mass, view volume, view density, view value counts) + (optional attribute to entity map)\n        \"\"\"", "\n", "\n", "chosen_entity_rows", "=", "[", "entity_row", "for", "entity_row", "in", "self", ".", "data_dict", ".", "values", "(", ")", "if", "\n", "entity_row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "in", "chosen_entities", "]", "\n", "block_metadata", "=", "{", "}", "\n", "\n", "# for each view", "\n", "for", "view", "in", "self", ".", "job_params", ".", "ALL_VIEWS", ":", "\n", "            ", "counts", "=", "{", "}", "# count number of recurring values across every single org in entity_data", "\n", "attr_to_entity_map", "=", "{", "}", "# mapping from attribute values to all entities which have that value", "\n", "\n", "for", "row", "in", "chosen_entity_rows", ":", "\n", "                ", "attribute_set", "=", "row", "[", "view", "]", "\n", "entity_id", "=", "row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "\n", "\n", "for", "element", "in", "attribute_set", ":", "\n", "                    ", "if", "is_valid_attr_value", "(", "element", ")", ":", "\n", "                        ", "if", "element", "not", "in", "counts", ":", "\n", "                            ", "counts", "[", "element", "]", "=", "0", "\n", "if", "return_attr_to_entity_map", ":", "\n", "                                ", "attr_to_entity_map", "[", "element", "]", "=", "set", "(", ")", "\n", "", "", "counts", "[", "element", "]", "+=", "1", "\n", "\n", "if", "return_attr_to_entity_map", ":", "\n", "                            ", "attr_to_entity_map", "[", "element", "]", ".", "add", "(", "entity_id", ")", "\n", "\n", "# compute mass, size, density, etc.", "\n", "", "", "", "", "if", "disable_idf", ":", "\n", "                ", "mass", "=", "sum", "(", "int", "(", "value_count", ")", "**", "2", "-", "int", "(", "value_count", ")", "for", "value_count", "in", "counts", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "mass", "=", "sum", "(", "\n", "self", ".", "term_idf", "[", "view", "]", "[", "term", "]", "*", "(", "(", "value_count", "**", "2", ")", "-", "value_count", ")", "for", "term", ",", "value_count", "in", "\n", "counts", ".", "items", "(", ")", ")", "\n", "", "size", "=", "float", "(", "len", "(", "chosen_entities", ")", ")", "\n", "\n", "mass", "/=", "2.0", "# divide by half because we are concerned with edge sums, not the adjacency matrix sum", "\n", "volume", "=", "(", "(", "size", "*", "(", "size", "-", "1", ")", ")", "/", "2.0", ")", "\n", "density", "=", "mass", "/", "volume", "\n", "\n", "# store these inside of a dict, indexed by view id", "\n", "block_metadata", "[", "view", "]", "=", "(", "mass", ",", "size", ",", "density", ",", "counts", ")", "\n", "\n", "if", "return_attr_to_entity_map", ":", "\n", "                ", "block_metadata", "[", "view", "]", "=", "(", "mass", ",", "size", ",", "density", ",", "counts", ",", "attr_to_entity_map", ")", "\n", "\n", "", "", "return", "block_metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_of_block": [[390, 406], ["float", "slicendice.SliceNDice.calculate_susp_for_single_view", "len"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_for_single_view"], ["", "def", "calculate_susp_of_block", "(", "self", ",", "chosen_views", ",", "block_metadata", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the suspiciousness of a block across chosen views.\n\n        :param chosen_views: list of currently chosen views.\n        :param block_metadata: dictionary describing block metadata, key is view identifier, and value is tuple of\n        (view mass, view volume, view density, view value counts)\n        :return: suspiciousness score of the block\n        \"\"\"", "\n", "susp", "=", "0", "\n", "for", "view", "in", "chosen_views", ":", "\n", "            ", "susp", "+=", "self", ".", "calculate_susp_for_single_view", "(", "block_metadata", "[", "view", "]", "[", "1", "]", ",", "block_metadata", "[", "view", "]", "[", "0", "]", ",", "\n", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ")", "\n", "\n", "", "susp", "/=", "float", "(", "len", "(", "chosen_views", ")", ")", "\n", "return", "susp", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_mass_delta": [[407, 443], ["utils.is_valid_attr_value"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.is_valid_attr_value"], ["", "def", "compute_mass_delta", "(", "self", ",", "entity", ",", "chosen_views", ",", "chosen_entities", ",", "block_metadata", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the hypothetical change in mass by removing or adding an entity, across chosen views.\n\n        :param entity: Pandas Series (or dictionary) for the entity in question.\n        :param chosen_views: list of currently chosen views.\n        :param chosen_entities: set of currently chosen entities.\n        :param block_metadata: dictionary describing block metadata, key is view identifier, and value is tuple of\n        (view mass, view volume, view density, view value counts)\n        :return: dictionary of hypothetical change in mass, keyed by view\n        \"\"\"", "\n", "\n", "deltas", "=", "{", "}", "\n", "entity_id", "=", "entity", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "\n", "\n", "for", "view", "in", "chosen_views", ":", "\n", "            ", "counts", ",", "mass", "=", "block_metadata", "[", "view", "]", "[", "3", "]", ",", "block_metadata", "[", "view", "]", "[", "0", "]", "\n", "delta_mass", "=", "0", "\n", "# delta from removing an entity", "\n", "if", "entity_id", "in", "chosen_entities", ":", "\n", "                ", "for", "value", "in", "entity", "[", "view", "]", ":", "\n", "                    ", "if", "is_valid_attr_value", "(", "value", ")", ":", "\n", "                        ", "current_contribution", "=", "(", "counts", "[", "value", "]", "**", "2", ")", "-", "counts", "[", "value", "]", "\n", "new_contribution", "=", "(", "counts", "[", "value", "]", "-", "1", ")", "**", "2", "-", "(", "counts", "[", "value", "]", "-", "1", ")", "\n", "delta_mass", "+=", "self", ".", "term_idf", "[", "view", "]", "[", "value", "]", "*", "(", "new_contribution", "-", "current_contribution", ")", "\n", "# delta from adding an entity", "\n", "", "", "", "else", ":", "\n", "                ", "for", "value", "in", "entity", "[", "view", "]", ":", "\n", "                    ", "if", "value", "in", "counts", ":", "\n", "                        ", "current_contribution", "=", "counts", "[", "value", "]", "**", "2", "-", "counts", "[", "value", "]", "\n", "new_contribution", "=", "(", "counts", "[", "value", "]", "+", "1", ")", "**", "2", "-", "(", "counts", "[", "value", "]", "+", "1", ")", "\n", "delta_mass", "+=", "self", ".", "term_idf", "[", "view", "]", "[", "value", "]", "*", "(", "new_contribution", "-", "current_contribution", ")", "\n", "\n", "# Divide by half because we are concerned with edge sums, not the adjacency matrix sum", "\n", "", "", "", "deltas", "[", "view", "]", "=", "delta_mass", "/", "2.0", "\n", "", "return", "deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_susp_delta": [[444, 485], ["slicendice.SliceNDice.compute_mass_delta", "len", "float", "float", "slicendice.SliceNDice.calculate_susp_for_single_view", "slicendice.SliceNDice.calculate_susp_for_single_view", "len"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_mass_delta", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_for_single_view", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_for_single_view"], ["", "def", "compute_susp_delta", "(", "self", ",", "entity", ",", "chosen_views", ",", "chosen_entities", ",", "block_metadata", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the hypothetical change in suspiciousness by removing or adding an entity, across chosen views.\n\n        :param entity: Pandas Series (or dictionary) for the entity in question.\n        :param chosen_views: list of currently chosen views.\n        :param chosen_entities: set of currently chosen entities.\n        :param block_metadata: dictionary describing block metadata, key is view identifier, and value is tuple of\n        (view mass, view volume, view density, view value counts)\n        :return: hypothetical change in suspiciousness\n        \"\"\"", "\n", "\n", "delta_susp", "=", "0", "\n", "entity_id", "=", "entity", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "\n", "mass_deltas", "=", "self", ".", "compute_mass_delta", "(", "entity", ",", "chosen_views", ",", "chosen_entities", ",", "block_metadata", ")", "\n", "\n", "num_chosen_entities", "=", "len", "(", "chosen_entities", ")", "\n", "\n", "for", "view", "in", "chosen_views", ":", "\n", "            ", "delta_mass", "=", "mass_deltas", "[", "view", "]", "\n", "delta_size", "=", "1", "if", "entity_id", "not", "in", "chosen_entities", "else", "-", "1", "\n", "\n", "projected_size", "=", "num_chosen_entities", "+", "delta_size", "\n", "projected_mass", "=", "block_metadata", "[", "view", "]", "[", "0", "]", "+", "delta_mass", "\n", "projected_vol", "=", "float", "(", "(", "projected_size", "*", "(", "projected_size", "-", "1", ")", ")", "/", "2.0", ")", "\n", "projected_density", "=", "projected_mass", "/", "projected_vol", "\n", "\n", "# if this change would violate a constraint, it cannot be beneficial", "\n", "if", "projected_density", "<", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ":", "\n", "                ", "return", "-", "np", ".", "inf", "\n", "\n", "", "new_susp", "=", "self", ".", "calculate_susp_for_single_view", "(", "num_chosen_entities", "+", "delta_size", ",", "\n", "block_metadata", "[", "view", "]", "[", "0", "]", "+", "delta_mass", ",", "\n", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ")", "\n", "old_susp", "=", "self", ".", "calculate_susp_for_single_view", "(", "num_chosen_entities", ",", "block_metadata", "[", "view", "]", "[", "0", "]", ",", "\n", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ")", "\n", "delta_susp", "+=", "new_susp", "-", "old_susp", "\n", "\n", "# take the mean susp. over the views", "\n", "", "delta_susp", "/=", "float", "(", "len", "(", "chosen_views", ")", ")", "\n", "return", "delta_susp", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.add_or_del_entity": [[486, 529], ["slicendice.SliceNDice.compute_mass_delta", "chosen_entities.add", "chosen_entities.remove", "utils.is_valid_attr_value", "utils.is_valid_attr_value"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_mass_delta", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.is_valid_attr_value", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.is_valid_attr_value"], ["", "def", "add_or_del_entity", "(", "self", ",", "entity", ",", "chosen_entities", ",", "block_metadata", ")", ":", "\n", "        ", "\"\"\"\n        Add or delete an entity to/from the current chosen_entities (inplace) and update block metadata (inplace).\n        Note that this *modifies the original* chosen_entities and block_metadata*!\n\n        :param entity: Pandas Series (or dictionary) for the entity in question.\n        :param chosen_entities: set of currently chosen entities (will be updated inplace).\n        :param block_metadata: dictionary describing block metadata, key is view identifier, and value is tuple of\n        (view mass, view volume, view density, view value counts)\n        :return: metadata of the newly updated block\n        \"\"\"", "\n", "\n", "mass_deltas", "=", "self", ".", "compute_mass_delta", "(", "entity", ",", "self", ".", "job_params", ".", "ALL_VIEWS", ",", "chosen_entities", ",", "block_metadata", ")", "\n", "entity_id", "=", "entity", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "\n", "\n", "new_block_metadata", "=", "{", "}", "\n", "\n", "# update the entities list", "\n", "should_add_org", "=", "not", "(", "entity_id", "in", "chosen_entities", ")", "\n", "chosen_entities", ".", "add", "(", "entity_id", ")", "if", "should_add_org", "else", "chosen_entities", ".", "remove", "(", "entity_id", ")", "\n", "\n", "# update the value counts in all the views", "\n", "for", "view", "in", "self", ".", "job_params", ".", "ALL_VIEWS", ":", "\n", "            ", "entity_attr_values_for_view", "=", "entity", "[", "view", "]", "\n", "counts", ",", "mass", ",", "size", "=", "block_metadata", "[", "view", "]", "[", "3", "]", ",", "block_metadata", "[", "view", "]", "[", "0", "]", ",", "block_metadata", "[", "view", "]", "[", "1", "]", "# references", "\n", "if", "should_add_org", ":", "\n", "                ", "for", "attr_value", "in", "entity_attr_values_for_view", ":", "\n", "                    ", "if", "is_valid_attr_value", "(", "attr_value", ")", ":", "\n", "                        ", "if", "attr_value", "not", "in", "counts", ":", "\n", "                            ", "counts", "[", "attr_value", "]", "=", "0", "\n", "", "counts", "[", "attr_value", "]", "+=", "1", "\n", "", "", "", "else", ":", "\n", "                ", "for", "attr_value", "in", "entity_attr_values_for_view", ":", "\n", "                    ", "if", "is_valid_attr_value", "(", "attr_value", ")", ":", "\n", "                        ", "counts", "[", "attr_value", "]", "-=", "1", "\n", "\n", "# update the properties", "\n", "", "", "", "mass", "+=", "mass_deltas", "[", "view", "]", "\n", "size", "=", "(", "size", "+", "1", ")", "if", "should_add_org", "else", "(", "size", "-", "1", ")", "\n", "volume", "=", "(", "(", "size", "*", "(", "size", "-", "1", ")", ")", "/", "2.0", ")", "\n", "density", "=", "mass", "/", "volume", "\n", "new_block_metadata", "[", "view", "]", "=", "(", "mass", ",", "size", ",", "density", ",", "counts", ")", "\n", "", "return", "new_block_metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.get_interpretable_susp_score": [[530, 538], ["None"], "methods", ["None"], ["", "def", "get_interpretable_susp_score", "(", "self", ",", "susp", ")", ":", "\n", "        ", "\"\"\"\n        This is used to transform original suspiciousness score to something more interpretable.\n\n        :param susp: original (untransformed) suspiciousness score\n        :return: more interpretable (transformed) suspiciousness score\n        \"\"\"", "\n", "return", "susp", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.optimize_block_susp": [[539, 666], ["set", "slicendice.SliceNDice.compute_block_metadata", "slicendice.SliceNDice.calculate_susp_of_block", "utils.print_line_to_log_file", "list", "utils.print_line_to_log_file", "ranked_changes.sort", "utils.print_line_to_log_file", "utils.print_line_to_log_file", "utils.print_line_to_log_file", "slicendice.SliceNDice.get_interpretable_susp_score", "utils.print_line_to_log_file", "slicendice.SliceNDice.data_dict.values", "utils.print_line_to_log_file", "utils.print_line_to_log_file", "utils.print_line_to_log_file", "ranked_changes.pop", "slicendice.SliceNDice.compute_susp_delta", "history.append", "utils.print_line_to_log_file", "utils.print_line_to_log_file", "numpy.mean", "utils.print_line_to_log_file", "AssertionError", "slicendice.SliceNDice.get_interpretable_susp_score", "len", "utils.print_line_to_log_file", "ranked_changes.append", "len", "len", "utils.print_line_to_log_file", "slicendice.SliceNDice.add_or_del_entity", "utils.print_line_to_log_file", "slicendice.SliceNDice.calculate_susp_of_block", "len", "len", "numpy.isclose", "slicendice.SliceNDice.get_interpretable_susp_score", "len", "ranked_changes.append", "math.isnan", "ranked_changes.pop", "slicendice.SliceNDice.compute_susp_delta", "slicendice.SliceNDice.calculate_susp_for_single_view", "len"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_block_metadata", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_of_block", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.get_interpretable_susp_score", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_susp_delta", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.get_interpretable_susp_score", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.add_or_del_entity", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_of_block", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.get_interpretable_susp_score", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_susp_delta", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.calculate_susp_for_single_view"], ["", "def", "optimize_block_susp", "(", "self", ",", "chosen_entities", ",", "chosen_views", ",", "random_seed", ",", "local_entity_whitelist", "=", "set", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Given a seed, run alternating maximization on entities and views to produce a block which is locally optimal in\n        terms of suspiciousness score.\n\n        :param chosen_entities: set of chosen entities in the seed\n        :param chosen_views: list of chosen views in the seed\n        :param random_seed: random seed identifier used to designate the block (and enable re-discovery for testing).\n        :param local_entity_whitelist: set of entities to exclude from consideration for this block discovery process.\n        :return: tuple with (set of chosen entities, set of chosen views, history of entity changes, and final\n        suspiciousness score)\n        \"\"\"", "\n", "\n", "iteration", "=", "ENTITY_ITERATION", "\n", "block_metadata", "=", "self", ".", "compute_block_metadata", "(", "chosen_entities", ")", "\n", "history", "=", "[", "list", "(", "chosen_entities", ")", "]", "\n", "current_susp", "=", "self", ".", "calculate_susp_of_block", "(", "chosen_views", ",", "block_metadata", ")", "\n", "print_line_to_log_file", "(", "'Starting with seed susp. {}'", ".", "format", "(", "self", ".", "get_interpretable_susp_score", "(", "current_susp", ")", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "print_line_to_log_file", "(", "\"Starting {} iteration with susp. {}\"", ".", "format", "(", "iteration", ",", "\n", "self", ".", "get_interpretable_susp_score", "(", "\n", "current_susp", ")", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "\n", "# Ranking step (for both entity and view iteration)", "\n", "ranked_changes", "=", "[", "]", "\n", "if", "iteration", "==", "ENTITY_ITERATION", ":", "\n", "                ", "print_line_to_log_file", "(", "'Starting with {} chosen entities'", ".", "format", "(", "len", "(", "chosen_entities", ")", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "\n", "# Stop iterating if we've reached max capacity", "\n", "if", "len", "(", "chosen_entities", ")", ">=", "self", ".", "job_params", ".", "MAX_ENTITIES", ":", "\n", "                    ", "print_line_to_log_file", "(", "'Maximum group capacity of {} entities reached'", ".", "format", "(", "self", ".", "job_params", ".", "MAX_ENTITIES", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "break", "\n", "\n", "# For entities already selected compute benefit of de-selecting them", "\n", "# For entities not selected, compute benefit of selecting them", "\n", "", "for", "row", "in", "self", ".", "data_dict", ".", "values", "(", ")", ":", "\n", "                    ", "entity_id", "=", "row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "\n", "\n", "if", "entity_id", "in", "local_entity_whitelist", ":", "\n", "                        ", "continue", "\n", "", "ranked_changes", ".", "append", "(", "\n", "(", "row", ",", "self", ".", "compute_susp_delta", "(", "row", ",", "chosen_views", ",", "chosen_entities", ",", "block_metadata", ")", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "print_line_to_log_file", "(", "\"Starting with chosen views: {}\"", ".", "format", "(", "chosen_views", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "for", "view", "in", "self", ".", "job_params", ".", "ALL_VIEWS", ":", "\n", "                    ", "if", "block_metadata", "[", "view", "]", "[", "2", "]", ">", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ":", "\n", "                        ", "ranked_changes", ".", "append", "(", "\n", "(", "view", ",", "self", ".", "calculate_susp_for_single_view", "(", "len", "(", "chosen_entities", ")", ",", "block_metadata", "[", "view", "]", "[", "0", "]", ",", "\n", "self", ".", "tensor_stats", "[", "view", "]", "[", "2", "]", ")", ")", ")", "\n", "\n", "# rank changes by most to least promising", "\n", "", "", "", "ranked_changes", ".", "sort", "(", "key", "=", "lambda", "change", ":", "change", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# Filtering step (only for entity iteration)", "\n", "if", "iteration", "==", "ENTITY_ITERATION", ":", "\n", "                ", "print_line_to_log_file", "(", "\"Filtering bad entity candidates.\"", ".", "format", "(", "iteration", ")", ",", "random_seed", ",", "\n", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "while", "len", "(", "ranked_changes", ")", ">", "0", ":", "\n", "                    ", "next_change", "=", "ranked_changes", "[", "0", "]", "\n", "benefit", "=", "next_change", "[", "1", "]", "\n", "\n", "# remove no-benefit changes from list", "\n", "if", "benefit", "<=", "0", "or", "math", ".", "isnan", "(", "benefit", ")", ":", "\n", "                        ", "ranked_changes", ".", "pop", "(", "0", ")", "\n", "continue", "\n", "\n", "# if we got here, we found a suitable candidate", "\n", "", "break", "\n", "\n", "# if there is nothing to change about the entities, terminate the optimization", "\n", "", "if", "len", "(", "ranked_changes", ")", "==", "0", ":", "\n", "                    ", "print_line_to_log_file", "(", "'No entities left after filtering.'", ",", "random_seed", ",", "\n", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "break", "\n", "\n", "#  Revision step (for both entity and view iteration)", "\n", "", "", "if", "iteration", "==", "ENTITY_ITERATION", ":", "\n", "                ", "print_line_to_log_file", "(", "'Starting entity revision step.'", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "next_change", "=", "ranked_changes", ".", "pop", "(", "0", ")", "\n", "benefit", "=", "self", ".", "compute_susp_delta", "(", "next_change", "[", "0", "]", ",", "chosen_views", ",", "chosen_entities", ",", "block_metadata", ")", "\n", "history", ".", "append", "(", "next_change", "[", "0", "]", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", ")", "\n", "\n", "if", "benefit", ">", "0", ":", "\n", "                    ", "block_metadata", "=", "self", ".", "add_or_del_entity", "(", "next_change", "[", "0", "]", ",", "chosen_entities", ",", "block_metadata", ")", "\n", "print_line_to_log_file", "(", "'Top entity: {}'", ".", "format", "(", "next_change", "[", "0", "]", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "new_susp", "=", "self", ".", "calculate_susp_of_block", "(", "chosen_views", ",", "block_metadata", ")", "\n", "", "else", ":", "\n", "                    ", "break", "# the revision would be unfruitful", "\n", "", "", "else", ":", "\n", "                ", "print_line_to_log_file", "(", "\"Starting view revision step.\"", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "chosen_views", "=", "[", "x", "[", "0", "]", "for", "x", "in", "ranked_changes", "]", "[", ":", "self", ".", "job_params", ".", "VIEW_LIMIT", "]", "\n", "print_line_to_log_file", "(", "'Top views: {}'", ".", "format", "(", "chosen_views", ")", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "new_susp", "=", "np", ".", "mean", "(", "[", "x", "[", "1", "]", "for", "x", "in", "ranked_changes", "]", "[", ":", "self", ".", "job_params", ".", "VIEW_LIMIT", "]", ")", "\n", "\n", "", "print_line_to_log_file", "(", "\n", "'{} chosen views and {} chosen entities.'", ".", "format", "(", "len", "(", "chosen_views", ")", ",", "len", "(", "chosen_entities", ")", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "\n", "# throw exception if susp (meaningfully, barring precision issues) decreases -- this should never happen.", "\n", "if", "new_susp", "<=", "current_susp", "and", "(", "not", "np", ".", "isclose", "(", "new_susp", ",", "current_susp", ")", ")", ":", "\n", "                ", "print_line_to_log_file", "(", "'{}: {} iteration decreased susp to {}'", ".", "format", "(", "random_seed", ",", "iteration", ",", "new_susp", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "raise", "AssertionError", "(", "'{}: {} iteration decreased susp'", ".", "format", "(", "random_seed", ",", "iteration", ")", ")", "\n", "\n", "# update suspiciousness score", "\n", "", "current_susp", "=", "new_susp", "\n", "print_line_to_log_file", "(", "\"Completing {} iteration with susp. {}\"", ".", "format", "(", "iteration", ",", "\n", "self", ".", "get_interpretable_susp_score", "(", "\n", "current_susp", ")", ")", ",", "\n", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "\n", "if", "iteration", "==", "ENTITY_ITERATION", ":", "\n", "                ", "iteration", "=", "VIEW_ITERATION", "\n", "", "else", ":", "\n", "                ", "iteration", "=", "ENTITY_ITERATION", "\n", "\n", "", "print_line_to_log_file", "(", "'\\n'", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "\n", "", "return", "chosen_entities", ",", "chosen_views", ",", "history", ",", "current_susp", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.find_one_block": [[667, 704], ["set", "seed", "numpy.random.seed", "logging.debug", "slicendice.SliceNDice.seed_views", "utils.print_line_to_log_file", "utils.print_line_to_log_file", "slicendice.SliceNDice.seed_entities", "utils.print_line_to_log_file", "utils.print_line_to_log_file", "slicendice.SliceNDice.optimize_block_susp", "utils.print_object_to_log_file", "slicendice.SliceNDice.log_block_review_metadata", "slicendice.SliceNDice.compute_block_metadata", "str", "int"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.seed_views", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.seed_entities", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.optimize_block_susp", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_object_to_log_file", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.log_block_review_metadata", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_block_metadata"], ["", "def", "find_one_block", "(", "self", ",", "random_seed", ",", "local_entity_whitelist", "=", "set", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Randomly select seed entities, views, and run local optimization algorithm.\n\n        :param random_seed: random seed identifier used to designate the block (and enable re-discovery for testing).\n        :param local_entity_whitelist: set of entities to exclude from consideration for this block discovery process.\n        :return: tuple with (set of chosen entities, set of chosen views, history of entity changes, and final\n        suspiciousness score)\n        \"\"\"", "\n", "\n", "seed", "(", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "'Logging block generation steps to {}'", ".", "format", "(", "self", ".", "job_params", ".", "LOG_DIR_PATH", "+", "str", "(", "int", "(", "random_seed", ")", ")", ")", ")", "\n", "\n", "# choose views", "\n", "chosen_views", "=", "self", ".", "seed_views", "(", ")", "\n", "print_line_to_log_file", "(", "'Seed views:'", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "print_line_to_log_file", "(", "chosen_views", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "if", "chosen_views", "==", "UNABLE_TO_FIND_BLOCK", ":", "\n", "            ", "return", "UNABLE_TO_FIND_BLOCK", "\n", "\n", "# choose entities", "\n", "", "chosen_entities", "=", "self", ".", "seed_entities", "(", "chosen_views", ",", "local_entity_whitelist", ")", "\n", "print_line_to_log_file", "(", "'Seed entities:'", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "print_line_to_log_file", "(", "chosen_entities", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "if", "chosen_entities", "==", "UNABLE_TO_FIND_BLOCK", ":", "\n", "            ", "return", "UNABLE_TO_FIND_BLOCK", "\n", "\n", "# grow seed", "\n", "", "result", "=", "self", ".", "optimize_block_susp", "(", "chosen_entities", ",", "chosen_views", ",", "random_seed", ",", "local_entity_whitelist", ")", "\n", "\n", "# write resulting block metadata to logfile", "\n", "print_object_to_log_file", "(", "result", ",", "random_seed", ",", "self", ".", "job_params", ".", "LOG_DIR_PATH", ")", "\n", "self", ".", "log_block_review_metadata", "(", "result", "[", "0", "]", ",", "result", "[", "1", "]", ",", "self", ".", "compute_block_metadata", "(", "result", "[", "0", "]", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.find_multiple_blocks": [[705, 742], ["set", "set", "range", "logging.debug", "slicendice.SliceNDice.find_one_block", "found_blocks.append", "list", "logging.debug", "set.update", "slicendice.SliceNDice.add_or_del_entity", "logging.debug", "slicendice.SliceNDice.data_dict.values", "len"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.find_one_block", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.add_or_del_entity"], ["", "def", "find_multiple_blocks", "(", "self", ",", "random_seed", ",", "n_blocks", ")", ":", "\n", "        ", "\"\"\"\n        This is run on each thread, and aims to find multiple blocks, given constraints.  This is achieved by calling\n        \"find_one_block\" multiple times, sequentially.\n\n        :param random_seed: Random seed identifier used to designate the block (and enable re-discovery for testing).\n        :param n_blocks: how many blocks this thread should try to produce.\n        this will prevent future blocks on this thread from overlapping with previous ones.\n        :return:\n        \"\"\"", "\n", "\n", "found_blocks", "=", "[", "]", "\n", "local_entity_whitelist", "=", "set", "(", ")", "\n", "remaining_entities", "=", "set", "(", "self", ".", "all_entities", ")", "\n", "\n", "for", "block_id", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "logging", ".", "debug", "(", "'Finding block_id {}, using localized whitelist: {}'", ".", "format", "(", "block_id", ",", "\n", "list", "(", "local_entity_whitelist", ")", ")", ")", "\n", "result", "=", "self", ".", "find_one_block", "(", "random_seed", "+", "block_id", ",", "local_entity_whitelist", ")", "\n", "if", "result", "!=", "UNABLE_TO_FIND_BLOCK", ":", "\n", "                ", "found_blocks", ".", "append", "(", "result", ")", "\n", "if", "self", ".", "job_params", ".", "LOCAL_ENTITY_WHITELIST_ENABLED", ":", "\n", "                    ", "entities_in_block", "=", "result", "[", "0", "]", "\n", "logging", ".", "debug", "(", "'Found block with entities {}'", ".", "format", "(", "entities_in_block", ")", ")", "\n", "local_entity_whitelist", ".", "update", "(", "entities_in_block", ")", "# add found entities to whitelist for next block", "\n", "entities_in_block_rows", "=", "[", "row", "for", "row", "in", "self", ".", "data_dict", ".", "values", "(", ")", "if", "\n", "row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", "in", "entities_in_block", "]", "\n", "for", "entity_row", "in", "entities_in_block_rows", ":", "\n", "#  delete entity from remaining entities and update remaining_tensor_stats", "\n", "                        ", "self", ".", "remaining_tensor_stats", "=", "self", ".", "add_or_del_entity", "(", "entity_row", ",", "\n", "remaining_entities", ",", "\n", "self", ".", "remaining_tensor_stats", ")", "\n", "logging", ".", "debug", "(", "'Deleted entity {}, with {} remaining entities.'", ".", "format", "(", "\n", "entity_row", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", ",", "\n", "len", "(", "remaining_entities", ")", ")", ")", "\n", "\n", "", "", "", "", "return", "found_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.parallelize_block_discovery": [[743, 765], ["range", "multiprocessing.Process", "processes.append", "multiprocessing.Process.start", "proc.join", "randint"], "methods", ["None"], ["", "def", "parallelize_block_discovery", "(", "self", ",", "n_blocks_per_thread", "=", "10", ",", "n_threads", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Starts multiple threads which are tasked to find blocks in parallel, given some constraints.  This is achieved\n        by calling \"find_multiple_blocks\" on each thread.\n\n        :param n_blocks_per_thread: how many blocks each thread should try to produce.\n        that were seen previously.\n        :param n_threads: number of threads to use\n        :return: list of Process objects\n        \"\"\"", "\n", "\n", "processes", "=", "[", "]", "\n", "for", "thread_id", "in", "range", "(", "n_threads", ")", ":", "\n", "            ", "p", "=", "Process", "(", "target", "=", "self", ".", "find_multiple_blocks", ",", "\n", "args", "=", "(", "randint", "(", "0", ",", "10000000", ")", ",", "n_blocks_per_thread", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "proc", "in", "processes", ":", "\n", "            ", "proc", ".", "join", "(", ")", "\n", "\n", "", "return", "processes", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_term_idf_scores": [[766, 776], ["[].copy", "[].copy.items", "numpy.log", "float"], "methods", ["None"], ["", "def", "compute_term_idf_scores", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Computes IDF scores for each term (attribute value) in each view; very frequent terms have low IDF.\n        \"\"\"", "\n", "for", "view", "in", "self", ".", "tensor_stats_noidf", ":", "\n", "            ", "term_frequencies", "=", "self", ".", "tensor_stats_noidf", "[", "view", "]", "[", "3", "]", ".", "copy", "(", ")", "\n", "term_idf_score_map", "=", "{", "}", "\n", "for", "term", ",", "term_freq", "in", "term_frequencies", ".", "items", "(", ")", ":", "\n", "                ", "term_idf_score_map", "[", "term", "]", "=", "np", ".", "log", "(", "1", "+", "(", "1.0", "/", "float", "(", "term_freq", ")", ")", ")", "**", "2", "\n", "", "self", ".", "term_idf", "[", "view", "]", "=", "term_idf_score_map", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.cull_attr_to_entity_map": [[777, 787], ["dict", "[].items", "len"], "methods", ["None"], ["", "", "def", "cull_attr_to_entity_map", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Used to cull the attribute to entity mapping by excluding unshared attribute values, and values which have\n        0 idf (cannot contribute mass to a block, and are thus useless).\n        \"\"\"", "\n", "\n", "for", "view", "in", "self", ".", "tensor_stats_noidf", ":", "\n", "            ", "culled_map", "=", "dict", "(", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "self", ".", "tensor_stats_noidf", "[", "view", "]", "[", "4", "]", ".", "items", "(", ")", "if", "\n", "len", "(", "value", ")", ">", "1", "and", "self", ".", "term_idf", "[", "view", "]", "[", "key", "]", ">", "0", ")", "\n", "self", ".", "tensor_stats_noidf", "[", "view", "]", "+=", "(", "culled_map", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.__init__": [[788, 820], ["logging.info", "entity_data.to_dict", "set", "slicendice.SliceNDice.compute_block_metadata", "slicendice.SliceNDice.compute_term_idf_scores", "slicendice.SliceNDice.compute_block_metadata", "copy.deepcopy", "slicendice.SliceNDice.cull_attr_to_entity_map", "logging.info"], "methods", ["home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_block_metadata", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_term_idf_scores", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.compute_block_metadata", "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.slicendice.SliceNDice.cull_attr_to_entity_map"], ["", "", "def", "__init__", "(", "self", ",", "entity_data", ",", "job_params", ")", ":", "\n", "        ", "\"\"\"\n        Instantiates SliceNDice instance, given data and job parameters.\n\n        :param entity_data: Pandas dataframe where rows are entities, and columns are attributes (pandas dataframe)\n        :param job_params:  SliceNDiceJobParams instance containing job metadata\n        \"\"\"", "\n", "\n", "self", ".", "job_params", "=", "job_params", "\n", "logging", ".", "info", "(", "'Initializing SliceNDice instance with job params {}'", ".", "format", "(", "job_params", ")", ")", "\n", "\n", "# compute dictified version of all dataframe rows", "\n", "self", ".", "data_dict", "=", "entity_data", ".", "to_dict", "(", "'index'", ")", "\n", "self", ".", "all_entities", "=", "set", "(", "entity_data", "[", "self", ".", "job_params", ".", "ENTITY_ID_FIELD", "]", ")", "\n", "\n", "# compute background metadata, without IDF", "\n", "self", ".", "tensor_stats_noidf", "=", "self", ".", "compute_block_metadata", "(", "self", ".", "all_entities", ",", "disable_idf", "=", "True", ",", "\n", "return_attr_to_entity_map", "=", "True", ")", "\n", "\n", "self", ".", "term_idf", "=", "{", "}", "\n", "self", ".", "compute_term_idf_scores", "(", ")", "\n", "\n", "# compute background metadata, with IDF", "\n", "self", ".", "tensor_stats", "=", "self", ".", "compute_block_metadata", "(", "self", ".", "all_entities", ",", "disable_idf", "=", "False", ")", "\n", "\n", "# background metadata of *remaining tensor* which respects local whitelisting.", "\n", "self", ".", "remaining_tensor_stats", "=", "deepcopy", "(", "self", ".", "tensor_stats", ")", "\n", "\n", "# compute culled attr_to_entity_maps for efficient seed selection", "\n", "self", ".", "cull_attr_to_entity_map", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'Computed all background block metadata'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.create_directory": [[13, 19], ["os.makedirs", "logging.info", "logging.info"], "function", ["None"], ["def", "create_directory", "(", "dir_path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "logging", ".", "info", "(", "'Created directory {}'", ".", "format", "(", "dir_path", ")", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "logging", ".", "info", "(", "'Failed to create directory {}'", ".", "format", "(", "dir_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.delete_dir_files": [[21, 30], ["glob.glob", "logging.info", "os.remove"], "function", ["None"], ["", "", "def", "delete_dir_files", "(", "dir_path", ")", ":", "\n", "    ", "\"\"\"\n    Deletes files under dir_path/*\n    \"\"\"", "\n", "\n", "files", "=", "glob", ".", "glob", "(", "dir_path", "+", "'*'", ")", "\n", "for", "f", "in", "files", ":", "\n", "        ", "os", ".", "remove", "(", "f", ")", "\n", "", "logging", ".", "info", "(", "'Deleted files under {}'", ".", "format", "(", "dir_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_line_to_log_file": [[32, 43], ["open", "f.write", "str", "str"], "function", ["None"], ["", "def", "print_line_to_log_file", "(", "txt", ",", "random_seed", ",", "log_dir_path", ")", ":", "\n", "    ", "\"\"\"\n    Prints a line to a specific log file.\n\n    Keyword arguments:\n    txt -- The string to print to a text file\n    random_seed -- The specific log file to print to (str)\n    \"\"\"", "\n", "\n", "with", "open", "(", "log_dir_path", "+", "str", "(", "random_seed", ")", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "txt", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.print_object_to_log_file": [[45, 56], ["open", "pickle.dump", "str"], "function", ["None"], ["", "", "def", "print_object_to_log_file", "(", "obj", ",", "random_seed", ",", "log_dir_path", ")", ":", "\n", "    ", "\"\"\"\n            Prints a line to a specific log file.\n\n            Keyword arguments:\n            obj -- The object to write to a pickle file (object)\n            random_seed -- The specific log file to print to (str)\n    \"\"\"", "\n", "\n", "with", "open", "(", "log_dir_path", "+", "str", "(", "random_seed", ")", "+", "'.p'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.is_stopword": [[58, 73], ["str().strip().lower", "str().strip", "len", "str"], "function", ["None"], ["", "", "def", "is_stopword", "(", "word", ",", "stopword_list", ",", "min_attribute_length", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Checks if a word is a stopword.\n\n    Keyword arguments:\n    word -- The input word (string)\n    min_attribute_length -- If the word is <= this many characters, automatically consider it a stopword (int) (default=1)\n    stopword_list -- The list of stopwords to compare against (list)\n\n    Returns:\n    True if is stop word, False if not a stop word\n    \"\"\"", "\n", "compare", "=", "str", "(", "word", ")", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "stopword_condition", "=", "len", "(", "compare", ")", "<=", "min_attribute_length", "or", "compare", "in", "stopword_list", "\n", "return", "stopword_condition", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.process_stopwords_dict_from_file": [[75, 90], ["set", "open", "logging.info", "set.add", "line.strip().lower", "len", "line.strip"], "function", ["None"], ["", "def", "process_stopwords_dict_from_file", "(", "file", ",", "all_views", ")", ":", "\n", "    ", "\"\"\"\n    Given a file with stopwords on each line, assign these stopwords to all views.\n    :param file: file with stopwords\n    :param all_views: set of view identifiers\n    :return: dictionary keyed by view identifiers, with value (set of stopwords)\n    \"\"\"", "\n", "sws", "=", "set", "(", ")", "\n", "for", "line", "in", "open", "(", "file", ",", "'r'", ")", ":", "\n", "        ", "sws", ".", "add", "(", "line", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "stopword_dict", "=", "{", "}", "\n", "for", "view", "in", "all_views", ":", "\n", "        ", "stopword_dict", "[", "view", "]", "=", "sws", "\n", "", "logging", ".", "info", "(", "'Read {} stopwords from file {}'", ".", "format", "(", "len", "(", "sws", ")", ",", "file", ")", ")", "\n", "return", "stopword_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.is_valid_attr_value": [[92, 99], ["pandas.isnull", "isinstance", "math.isnan"], "function", ["None"], ["", "def", "is_valid_attr_value", "(", "val", ")", ":", "\n", "    ", "\"\"\"\n    Check validity of an attribute value (not null, and type str)\n    :param val: val to check validity of\n    :return: True if valid, False if not\n    \"\"\"", "\n", "return", "(", "not", "pd", ".", "isnull", "(", "val", ")", ")", "and", "(", "isinstance", "(", "val", ",", "str", ")", "or", "not", "math", ".", "isnan", "(", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hamedn_SliceNDice.None.utils.build_edge_label_dict": [[101, 117], ["nx_edge_attr.items", "interm_dict.items", "[].append", "attr_dict.items", "str"], "function", ["None"], ["", "def", "build_edge_label_dict", "(", "nx_edge_attr", ")", ":", "\n", "    ", "interm_dict", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "nx_edge_attr", ".", "items", "(", ")", ":", "\n", "        ", "u_v", "=", "(", "key", "[", "0", "]", ",", "key", "[", "1", "]", ")", "\n", "if", "u_v", "not", "in", "interm_dict", ":", "\n", "            ", "interm_dict", "[", "u_v", "]", "=", "{", "}", "\n", "", "if", "val", "[", "0", "]", "not", "in", "interm_dict", "[", "u_v", "]", ":", "\n", "            ", "interm_dict", "[", "u_v", "]", "[", "val", "[", "0", "]", "]", "=", "[", "]", "\n", "", "interm_dict", "[", "u_v", "]", "[", "val", "[", "0", "]", "]", ".", "append", "(", "str", "(", "val", "[", "1", "]", ")", ")", "\n", "", "return_dict", "=", "{", "}", "\n", "for", "node_pair", ",", "attr_dict", "in", "interm_dict", ".", "items", "(", ")", ":", "\n", "        ", "edge_str", "=", "''", "\n", "for", "view", ",", "attrs", "in", "attr_dict", ".", "items", "(", ")", ":", "\n", "            ", "edge_str", "+=", "'{}: {}'", ".", "format", "(", "view", ",", "', '", ".", "join", "(", "[", "attr", "[", ":", "15", "]", "for", "attr", "in", "attrs", "[", ":", "1", "]", "]", ")", ")", "+", "'\\n'", "\n", "", "return_dict", "[", "node_pair", "]", "=", "edge_str", "\n", "", "return", "return_dict", "\n", "\n"]]}