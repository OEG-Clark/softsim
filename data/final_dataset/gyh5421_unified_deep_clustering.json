{"home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU": [[45, 47], ["tensorflow.maximum"], "function", ["None"], ["def", "LeakyReLU", "(", "x", ",", "alpha", "=", "0.2", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "alpha", "*", "x", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.ReLULayer": [[48, 57], ["tflib.ops.linear.Linear", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.Linear"], ["", "def", "ReLULayer", "(", "name", ",", "n_in", ",", "n_out", ",", "inputs", ")", ":", "\n", "    ", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "\n", "name", "+", "'.Linear'", ",", "\n", "n_in", ",", "\n", "n_out", ",", "\n", "inputs", ",", "\n", "initialization", "=", "'he'", "\n", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLULayer": [[58, 67], ["tflib.ops.linear.Linear", "gan_mnist.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.Linear", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU"], ["", "def", "LeakyReLULayer", "(", "name", ",", "n_in", ",", "n_out", ",", "inputs", ")", ":", "\n", "    ", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "\n", "name", "+", "'.Linear'", ",", "\n", "n_in", ",", "\n", "n_out", ",", "\n", "inputs", ",", "\n", "initialization", "=", "'he'", "\n", ")", "\n", "return", "LeakyReLU", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.Generator": [[68, 96], ["tensorflow.concat", "tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.reshape", "tflib.ops.deconv2d.Deconv2D", "tensorflow.nn.relu", "tflib.ops.deconv2d.Deconv2D", "tensorflow.nn.relu", "tflib.ops.deconv2d.Deconv2D", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.random_normal", "tflib.ops.batchnorm.Batchnorm", "tflib.ops.batchnorm.Batchnorm", "tflib.ops.batchnorm.Batchnorm"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.Linear", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm"], ["", "def", "Generator", "(", "n_samples", ",", "noise", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "    ", "if", "noise", "is", "None", ":", "\n", "        ", "noise", "=", "tf", ".", "random_normal", "(", "[", "n_samples", ",", "128", "]", ")", "\n", "", "assert", "labels", "is", "not", "None", ",", "'labels is not provided for generator'", "\n", "\n", "noise", "=", "tf", ".", "concat", "(", "[", "noise", ",", "labels", "]", ",", "1", ")", "\n", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Generator.Input'", ",", "138", ",", "4", "*", "4", "*", "4", "*", "DIM", ",", "noise", ")", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "        ", "output", "=", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "'Generator.BN1'", ",", "[", "0", "]", ",", "output", ")", "\n", "", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "4", "*", "DIM", ",", "4", ",", "4", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.2'", ",", "4", "*", "DIM", ",", "2", "*", "DIM", ",", "5", ",", "output", ")", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "        ", "output", "=", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "'Generator.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "output", "[", ":", ",", ":", ",", ":", "7", ",", ":", "7", "]", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.3'", ",", "2", "*", "DIM", ",", "DIM", ",", "5", ",", "output", ")", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "        ", "output", "=", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "'Generator.BN3'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.5'", ",", "DIM", ",", "1", ",", "5", ",", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "sigmoid", "(", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "OUTPUT_DIM", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.Discriminator": [[97, 117], ["tensorflow.reshape", "tflib.ops.conv2d.Conv2D", "gan_mnist.LeakyReLU", "tflib.ops.conv2d.Conv2D", "gan_mnist.LeakyReLU", "tflib.ops.conv2d.Conv2D", "gan_mnist.LeakyReLU", "tensorflow.reshape", "tflib.ops.linear.Linear", "tensorflow.reshape", "tflib.ops.batchnorm.Batchnorm", "tflib.ops.batchnorm.Batchnorm"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.Linear", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm"], ["", "def", "Discriminator", "(", "inputs", ")", ":", "\n", "    ", "output", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "1", ",", "28", ",", "28", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.1'", ",", "1", ",", "DIM", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "output", "=", "LeakyReLU", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.2'", ",", "DIM", ",", "2", "*", "DIM", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "        ", "output", "=", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "'Discriminator.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "LeakyReLU", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.3'", ",", "2", "*", "DIM", ",", "4", "*", "DIM", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "        ", "output", "=", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "'Discriminator.BN3'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "LeakyReLU", "(", "output", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "4", "*", "4", "*", "4", "*", "DIM", "]", ")", "\n", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.Output'", ",", "4", "*", "4", "*", "4", "*", "DIM", ",", "10", ",", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.Classifier": [[118, 138], ["tensorflow.reshape", "tflib.ops.conv2d.Conv2D", "gan_mnist.LeakyReLU", "tflib.ops.conv2d.Conv2D", "gan_mnist.LeakyReLU", "tflib.ops.conv2d.Conv2D", "gan_mnist.LeakyReLU", "tensorflow.reshape", "tflib.ops.linear.Linear", "tensorflow.reshape", "tflib.ops.batchnorm.Batchnorm", "tflib.ops.batchnorm.Batchnorm"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.LeakyReLU", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.Linear", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm"], ["", "def", "Classifier", "(", "inputs", ")", ":", "\n", "    ", "output", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "1", ",", "28", ",", "28", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Classifier.1'", ",", "1", ",", "DIM", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "output", "=", "LeakyReLU", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Classifier.2'", ",", "DIM", ",", "2", "*", "DIM", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "        ", "output", "=", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "'Classifier.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "LeakyReLU", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Classifier.3'", ",", "2", "*", "DIM", ",", "4", "*", "DIM", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "        ", "output", "=", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "'Classifier.BN3'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "LeakyReLU", "(", "output", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "4", "*", "4", "*", "4", "*", "DIM", "]", ")", "\n", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Classifier.Output'", ",", "4", "*", "4", "*", "4", "*", "DIM", ",", "NUM_CLASSES", ",", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "NUM_CLASSES", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.generate_image": [[260, 265], ["session.run", "tflib.save_images.save_images", "session.run.reshape"], "function", ["None"], ["def", "generate_image", "(", "frame", ",", "true_dist", ")", ":", "\n", "    ", "samples", "=", "session", ".", "run", "(", "fixed_noise_samples", ")", "\n", "lib", ".", "save_images", ".", "save_images", "(", "\n", "samples", ".", "reshape", "(", "(", "50", ",", "28", ",", "28", ")", ")", ",", "\n", "'samples_{}.png'", ".", "format", "(", "frame", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.accuracy": [[269, 285], ["session.run", "numpy.zeros", "session.run", "numpy.argmax", "enumerate", "sklearn.metrics.normalized_mutual_info_score", "sklearn.metrics.adjusted_rand_score", "numpy.sum", "len", "numpy.max"], "function", ["None"], ["", "def", "accuracy", "(", "images", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "    ", "if", "images", "is", "None", ":", "\n", "        ", "acc_", "=", "session", ".", "run", "(", "acc", ")", "\n", "return", "acc_", "\n", "", "else", ":", "\n", "        ", "counts", "=", "np", ".", "zeros", "(", "(", "10", ",", "10", ")", ")", "\n", "logits_", "=", "session", ".", "run", "(", "real_logits", ",", "feed_dict", "=", "{", "real_data", ":", "images", "}", ")", "\n", "pre_label", "=", "np", ".", "argmax", "(", "logits_", ",", "1", ")", "\n", "\n", "for", "idx", ",", "pre", "in", "enumerate", "(", "pre_label", ")", ":", "\n", "            ", "counts", "[", "pre", "]", "[", "labels", "[", "idx", "]", "]", "+=", "1", "\n", "", "acc_", "=", "np", ".", "sum", "(", "np", ".", "max", "(", "counts", ",", "1", ")", ")", "/", "len", "(", "pre_label", ")", "\n", "nmi", "=", "metrics", ".", "normalized_mutual_info_score", "(", "labels", ",", "pre_label", ")", "\n", "ari", "=", "metrics", ".", "adjusted_rand_score", "(", "labels", ",", "pre_label", ")", "\n", "return", "acc_", ",", "nmi", ",", "ari", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.None.gan_mnist.inf_train_gen": [[290, 294], ["train_gen"], "function", ["None"], ["def", "inf_train_gen", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "images", ",", "targets", "in", "train_gen", "(", ")", ":", "\n", "            ", "yield", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.inception_score.get_inception_score": [[25, 54], ["type", "type", "len", "numpy.max", "numpy.min", "img.astype.astype", "inps.append", "tensorflow.Session", "int", "range", "numpy.concatenate", "range", "numpy.expand_dims", "math.ceil", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "float", "float", "min", "numpy.log", "numpy.log", "len", "len", "numpy.expand_dims", "numpy.mean"], "function", ["None"], ["def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "  ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "100", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "# sys.stdout.write(\".\")", "\n", "# sys.stdout.flush()", "\n", "        ", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", "=", "sess", ".", "run", "(", "softmax", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "      ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.inception_score._init_inception": [[56, 95], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "tarfile.open", "os.path.join", "f.read", "tensorflow.squeeze", "o.get_shape", "enumerate", "tensorflow.TensorShape", "sess.graph.get_operation_by_name", "new_shape.append", "new_shape.append", "float", "float"], "function", ["None"], ["", "", "def", "_init_inception", "(", ")", ":", "\n", "  ", "global", "softmax", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "    ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                    ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.mnist.mnist_generator": [[8, 48], ["numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "print", "numpy.zeros", "numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "images.reshape", "targets.reshape", "images.astype", "targets.astype", "len", "numpy.random.set_state", "numpy.random.shuffle", "numpy.zeros.reshape", "range", "range", "len", "len", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["None"], ["def", "mnist_generator", "(", "data", ",", "batch_size", ",", "n_labelled", ",", "limit", "=", "None", ")", ":", "\n", "    ", "images", ",", "targets", "=", "data", "\n", "\n", "rng_state", "=", "numpy", ".", "random", ".", "get_state", "(", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "images", ")", "\n", "numpy", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "targets", ")", "\n", "if", "limit", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"WARNING ONLY FIRST {} MNIST DIGITS\"", ".", "format", "(", "limit", ")", ")", "\n", "images", "=", "images", ".", "astype", "(", "'float32'", ")", "[", ":", "limit", "]", "\n", "targets", "=", "targets", ".", "astype", "(", "'int32'", ")", "[", ":", "limit", "]", "\n", "", "if", "n_labelled", "is", "not", "None", ":", "\n", "        ", "labelled", "=", "numpy", ".", "zeros", "(", "len", "(", "images", ")", ",", "dtype", "=", "'int32'", ")", "\n", "labelled", "[", ":", "n_labelled", "]", "=", "1", "\n", "\n", "", "def", "get_epoch", "(", ")", ":", "\n", "        ", "rng_state", "=", "numpy", ".", "random", ".", "get_state", "(", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "images", ")", "\n", "numpy", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "targets", ")", "\n", "\n", "if", "n_labelled", "is", "not", "None", ":", "\n", "            ", "numpy", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "labelled", ")", "\n", "\n", "", "image_batches", "=", "images", ".", "reshape", "(", "-", "1", ",", "batch_size", ",", "784", ")", "\n", "target_batches", "=", "targets", ".", "reshape", "(", "-", "1", ",", "batch_size", ")", "\n", "\n", "if", "n_labelled", "is", "not", "None", ":", "\n", "            ", "labelled_batches", "=", "labelled", ".", "reshape", "(", "-", "1", ",", "batch_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "image_batches", ")", ")", ":", "\n", "                ", "yield", "(", "numpy", ".", "copy", "(", "image_batches", "[", "i", "]", ")", ",", "numpy", ".", "copy", "(", "target_batches", "[", "i", "]", ")", ",", "numpy", ".", "copy", "(", "labelled", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "image_batches", ")", ")", ":", "\n", "                ", "yield", "(", "numpy", ".", "copy", "(", "image_batches", "[", "i", "]", ")", ",", "numpy", ".", "copy", "(", "target_batches", "[", "i", "]", ")", ")", "\n", "\n", "", "", "", "return", "get_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.mnist.load": [[49, 64], ["os.path.isfile", "print", "urllib.request.urlretrieve", "gzip.open", "pickle.load", "mnist.mnist_generator", "mnist.mnist_generator", "mnist.mnist_generator"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.load", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.mnist.mnist_generator", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.mnist.mnist_generator", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.mnist.mnist_generator"], ["", "def", "load", "(", "batch_size", ",", "test_batch_size", ",", "n_labelled", "=", "None", ")", ":", "\n", "    ", "filepath", "=", "'/tmp/mnist.pkl.gz'", "\n", "url", "=", "'http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "        ", "print", "(", "\"Couldn't find MNIST dataset in /tmp, downloading...\"", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "filepath", ")", "\n", "\n", "", "with", "gzip", ".", "open", "(", "'/tmp/mnist.pkl.gz'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "train_data", ",", "dev_data", ",", "test_data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "\n", "", "return", "(", "\n", "mnist_generator", "(", "train_data", ",", "batch_size", ",", "n_labelled", ")", ",", "\n", "mnist_generator", "(", "dev_data", ",", "test_batch_size", ",", "n_labelled", ")", ",", "\n", "mnist_generator", "(", "test_data", ",", "test_batch_size", ",", "n_labelled", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.unpickle": [[8, 13], ["open", "cPickle.load", "open.close"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.load"], ["def", "unpickle", "(", "file", ")", ":", "\n", "    ", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "dict", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "fo", ".", "close", "(", ")", "\n", "return", "dict", "[", "'data'", "]", ",", "dict", "[", "'labels'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.cifar_generator": [[14, 35], ["numpy.concatenate", "numpy.concatenate", "cifar10.unpickle", "all_data.append", "all_labels.append", "numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "xrange", "len"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.unpickle"], ["", "def", "cifar_generator", "(", "filenames", ",", "batch_size", ",", "data_dir", ")", ":", "\n", "    ", "all_data", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "data", ",", "labels", "=", "unpickle", "(", "data_dir", "+", "'/'", "+", "filename", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "images", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "all_labels", ",", "axis", "=", "0", ")", "\n", "\n", "def", "get_epoch", "(", ")", ":", "\n", "        ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "images", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "labels", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "len", "(", "images", ")", "/", "batch_size", ")", ":", "\n", "            ", "yield", "(", "images", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "labels", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "\n", "", "", "return", "get_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.load": [[37, 41], ["cifar10.cifar_generator", "cifar10.cifar_generator"], "function", ["home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.cifar_generator", "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.tflib.cifar10.cifar_generator"], ["", "def", "load", "(", "batch_size", ",", "data_dir", ")", ":", "\n", "    ", "return", "(", "\n", "cifar_generator", "(", "[", "'data_batch_1'", ",", "'data_batch_2'", ",", "'data_batch_3'", ",", "'data_batch_4'", ",", "'data_batch_5'", "]", ",", "batch_size", ",", "data_dir", ")", ",", "\n", "cifar_generator", "(", "[", "'test_batch'", "]", ",", "batch_size", ",", "data_dir", ")", "\n", ")", ""]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv1d.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv1d.Conv1D": [[11, 109], ["tensorflow.name_scope", "conv1d.Conv1D.uniform"], "function", ["None"], ["", "def", "Conv1D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "mask_type", "=", "None", ",", "stride", "=", "1", ",", "weightnorm", "=", "None", ",", "biases", "=", "True", ",", "gain", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, num channels, width)\n    mask_type: one of None, 'a', 'b'\n\n    returns: tensor of shape (batch size, num channels, width)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "mask_type", ",", "mask_n_channels", "=", "mask_type", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "\n", "(", "filter_size", ",", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "center", "=", "filter_size", "//", "2", "\n", "\n", "# Mask out future locations", "\n", "# filter shape is (width, input channels, output channels)", "\n", "mask", "[", "center", "+", "1", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "\n", "# Mask out future channels", "\n", "for", "i", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                ", "for", "j", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                    ", "if", "(", "mask_type", "==", "'a'", "and", "i", ">=", "j", ")", "or", "(", "mask_type", "==", "'b'", "and", "i", ">", "j", ")", ":", "\n", "                        ", "mask", "[", "\n", "center", ",", "\n", "i", ":", ":", "mask_n_channels", ",", "\n", "j", ":", ":", "mask_n_channels", "\n", "]", "=", "0.", "\n", "\n", "\n", "", "", "", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "fan_in", "=", "input_dim", "*", "filter_size", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "/", "stride", "\n", "\n", "if", "mask_type", "is", "not", "None", ":", "# only approximately correct", "\n", "            ", "fan_in", "/=", "2.", "\n", "fan_out", "/=", "2.", "\n", "\n", "", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "# print \"WARNING IGNORING GAIN\"", "\n", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "name", "+", "'.Filters'", ",", "filter_values", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", "]", ")", ")", "\n", "filters", "=", "filters", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "", "", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'filter_mask'", ")", ":", "\n", "                ", "filters", "=", "filters", "*", "mask", "\n", "\n", "", "", "result", "=", "tf", ".", "nn", ".", "conv1d", "(", "\n", "value", "=", "inputs", ",", "\n", "filters", "=", "filters", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NCHW'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "[", "output_dim", "]", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "\n", "# result = result + _biases", "\n", "\n", "result", "=", "tf", ".", "expand_dims", "(", "result", ",", "3", ")", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ",", "data_format", "=", "'NCHW'", ")", "\n", "result", "=", "tf", ".", "squeeze", "(", "result", ")", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.layernorm.Layernorm": [[6, 22], ["tensorflow.nn.moments", "tflib.param", "tflib.param", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.batch_normalization", "inputs.get_shape().as_list", "numpy.zeros", "numpy.ones", "inputs.get_shape", "xrange", "xrange", "len", "len"], "function", ["None"], ["def", "Layernorm", "(", "name", ",", "norm_axes", ",", "inputs", ")", ":", "\n", "    ", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "norm_axes", ",", "keep_dims", "=", "True", ")", "\n", "\n", "# Assume the 'neurons' axis is the first of norm_axes. This is the case for fully-connected and BCHW conv layers.", "\n", "n_neurons", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "norm_axes", "[", "0", "]", "]", "\n", "\n", "offset", "=", "lib", ".", "param", "(", "name", "+", "'.offset'", ",", "np", ".", "zeros", "(", "n_neurons", ",", "dtype", "=", "'float32'", ")", ")", "\n", "scale", "=", "lib", ".", "param", "(", "name", "+", "'.scale'", ",", "np", ".", "ones", "(", "n_neurons", ",", "dtype", "=", "'float32'", ")", ")", "\n", "\n", "# Add broadcasting dims to offset and scale (e.g. BCHW conv data)", "\n", "offset", "=", "tf", ".", "reshape", "(", "offset", ",", "[", "-", "1", "]", "+", "[", "1", "for", "i", "in", "xrange", "(", "len", "(", "norm_axes", ")", "-", "1", ")", "]", ")", "\n", "scale", "=", "tf", ".", "reshape", "(", "scale", ",", "[", "-", "1", "]", "+", "[", "1", "for", "i", "in", "xrange", "(", "len", "(", "norm_axes", ")", "-", "1", ")", "]", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "offset", ",", "scale", ",", "1e-5", ")", "\n", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.set_weights_stdev": [[12, 15], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.unset_weights_stdev": [[16, 19], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.conv2d.Conv2D": [[20, 124], ["tensorflow.name_scope", "tflib.param", "tensorflow.nn.conv2d", "numpy.ones", "xrange", "numpy.random.uniform().astype", "numpy.sqrt", "numpy.sqrt", "conv2d.Conv2D.uniform"], "function", ["None"], ["", "def", "Conv2D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "mask_type", "=", "None", ",", "stride", "=", "1", ",", "weightnorm", "=", "None", ",", "biases", "=", "True", ",", "gain", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, num channels, height, width)\n    mask_type: one of None, 'a', 'b'\n\n    returns: tensor of shape (batch size, num channels, height, width)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "mask_type", ",", "mask_n_channels", "=", "mask_type", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "center", "=", "filter_size", "//", "2", "\n", "\n", "# Mask out future locations", "\n", "# filter shape is (height, width, input channels, output channels)", "\n", "mask", "[", "center", "+", "1", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "mask", "[", "center", ",", "center", "+", "1", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "\n", "# Mask out future channels", "\n", "for", "i", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                ", "for", "j", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                    ", "if", "(", "mask_type", "==", "'a'", "and", "i", ">=", "j", ")", "or", "(", "mask_type", "==", "'b'", "and", "i", ">", "j", ")", ":", "\n", "                        ", "mask", "[", "\n", "center", ",", "\n", "center", ",", "\n", "i", ":", ":", "mask_n_channels", ",", "\n", "j", ":", ":", "mask_n_channels", "\n", "]", "=", "0.", "\n", "\n", "\n", "", "", "", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "fan_in", "=", "input_dim", "*", "filter_size", "**", "2", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "**", "2", "/", "(", "stride", "**", "2", ")", "\n", "\n", "if", "mask_type", "is", "not", "None", ":", "# only approximately correct", "\n", "            ", "fan_in", "/=", "2.", "\n", "fan_out", "/=", "2.", "\n", "\n", "", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "_weights_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "# print \"WARNING IGNORING GAIN\"", "\n", "", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "name", "+", "'.Filters'", ",", "filter_values", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", ",", "2", "]", ")", ")", "\n", "filters", "=", "filters", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "", "", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'filter_mask'", ")", ":", "\n", "                ", "filters", "=", "filters", "*", "mask", "\n", "\n", "", "", "result", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "input", "=", "inputs", ",", "\n", "filter", "=", "filters", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NCHW'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "output_dim", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.cond_batchnorm.Batchnorm": [[6, 18], ["tensorflow.nn.moments", "mean.get_shape().as_list", "tflib.param", "tflib.param", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.batch_normalization", "Exception", "numpy.zeros", "numpy.ones", "mean.get_shape"], "function", ["None"], ["def", "Batchnorm", "(", "name", ",", "axes", ",", "inputs", ",", "is_training", "=", "None", ",", "stats_iter", "=", "None", ",", "update_moving_stats", "=", "True", ",", "fused", "=", "True", ",", "labels", "=", "None", ",", "n_labels", "=", "None", ")", ":", "\n", "    ", "\"\"\"conditional batchnorm (dumoulin et al 2016) for BCHW conv filtermaps\"\"\"", "\n", "if", "axes", "!=", "[", "0", ",", "2", ",", "3", "]", ":", "\n", "        ", "raise", "Exception", "(", "'unsupported'", ")", "\n", "", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "axes", ",", "keep_dims", "=", "True", ")", "\n", "shape", "=", "mean", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "# shape is [1,n,1,1]", "\n", "offset_m", "=", "lib", ".", "param", "(", "name", "+", "'.offset'", ",", "np", ".", "zeros", "(", "[", "n_labels", ",", "shape", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", ")", "\n", "scale_m", "=", "lib", ".", "param", "(", "name", "+", "'.scale'", ",", "np", ".", "ones", "(", "[", "n_labels", ",", "shape", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", ")", "\n", "offset", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "offset_m", ",", "labels", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "scale_m", ",", "labels", ")", "\n", "result", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "offset", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "scale", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "1e-5", ")", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.deconv2d.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.deconv2d.set_weights_stdev": [[12, 15], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.deconv2d.unset_weights_stdev": [[16, 19], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.deconv2d.Deconv2D": [[20, 116], ["tensorflow.name_scope", "tflib.param", "tensorflow.transpose", "tensorflow.shape", "tensorflow.nn.conv2d_transpose", "tensorflow.transpose", "Exception", "numpy.random.uniform().astype", "numpy.sqrt", "numpy.sqrt", "deconv2d.Deconv2D.uniform"], "function", ["None"], ["", "def", "Deconv2D", "(", "\n", "name", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "filter_size", ",", "\n", "inputs", ",", "\n", "he_init", "=", "True", ",", "\n", "weightnorm", "=", "None", ",", "\n", "biases", "=", "True", ",", "\n", "gain", "=", "1.", ",", "\n", "mask_type", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, height, width, input_dim)\n    returns: tensor of shape (batch size, 2*height, 2*width, output_dim)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "!=", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported configuration'", ")", "\n", "\n", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "stride", "=", "2", "\n", "fan_in", "=", "input_dim", "*", "filter_size", "**", "2", "/", "(", "stride", "**", "2", ")", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "**", "2", "\n", "\n", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "\n", "", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "_weights_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "output_dim", ",", "input_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "output_dim", ",", "input_dim", ")", "\n", ")", "\n", "\n", "", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Filters'", ",", "\n", "filter_values", "\n", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", ",", "3", "]", ")", ")", "\n", "filters", "=", "filters", "*", "tf", ".", "expand_dims", "(", "target_norms", "/", "norms", ",", "1", ")", "\n", "\n", "\n", "", "", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ",", "name", "=", "'NCHW_to_NHWC'", ")", "\n", "\n", "input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "try", ":", "# tf pre-1.0 (top) vs 1.0 (bottom)", "\n", "            ", "output_shape", "=", "tf", ".", "pack", "(", "[", "input_shape", "[", "0", "]", ",", "2", "*", "input_shape", "[", "1", "]", ",", "2", "*", "input_shape", "[", "2", "]", ",", "output_dim", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "output_shape", "=", "tf", ".", "stack", "(", "[", "input_shape", "[", "0", "]", ",", "2", "*", "input_shape", "[", "1", "]", ",", "2", "*", "input_shape", "[", "2", "]", ",", "output_dim", "]", ")", "\n", "\n", "", "result", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "\n", "value", "=", "inputs", ",", "\n", "filter", "=", "filters", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "output_dim", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ")", "\n", "\n", "", "result", "=", "tf", ".", "transpose", "(", "result", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ",", "name", "=", "'NHWC_to_NCHW'", ")", "\n", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.batchnorm.Batchnorm": [[6, 88], ["tflib.param", "tflib.param", "tflib.param", "tflib.param", "tensorflow.nn.moments", "mean.get_shape().as_list", "tflib.param", "tflib.param", "tensorflow.nn.batch_normalization", "tensorflow.expand_dims", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.ones", "tensorflow.nn.fused_batch_norm", "tensorflow.cast", "tensorflow.nn.moments", "batchnorm.Batchnorm._fused_batch_norm_training"], "function", ["None"], ["def", "Batchnorm", "(", "name", ",", "axes", ",", "inputs", ",", "is_training", "=", "None", ",", "stats_iter", "=", "None", ",", "update_moving_stats", "=", "True", ",", "fused", "=", "True", ")", ":", "\n", "    ", "if", "(", "(", "axes", "==", "[", "0", ",", "2", ",", "3", "]", ")", "or", "(", "axes", "==", "[", "0", ",", "2", "]", ")", ")", "and", "fused", "==", "True", ":", "\n", "        ", "if", "axes", "==", "[", "0", ",", "2", "]", ":", "\n", "            ", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "3", ")", "\n", "# Old (working but pretty slow) implementation:", "\n", "##########", "\n", "\n", "# inputs = tf.transpose(inputs, [0,2,3,1])", "\n", "\n", "# mean, var = tf.nn.moments(inputs, [0,1,2], keep_dims=False)", "\n", "# offset = lib.param(name+'.offset', np.zeros(mean.get_shape()[-1], dtype='float32'))", "\n", "# scale = lib.param(name+'.scale', np.ones(var.get_shape()[-1], dtype='float32'))", "\n", "# result = tf.nn.batch_normalization(inputs, mean, var, offset, scale, 1e-4)", "\n", "\n", "# return tf.transpose(result, [0,3,1,2])", "\n", "\n", "# New (super fast but untested) implementation:", "\n", "", "offset", "=", "lib", ".", "param", "(", "name", "+", "'.offset'", ",", "np", ".", "zeros", "(", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", ")", "\n", "scale", "=", "lib", ".", "param", "(", "name", "+", "'.scale'", ",", "np", ".", "ones", "(", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", ")", "\n", "\n", "moving_mean", "=", "lib", ".", "param", "(", "name", "+", "'.moving_mean'", ",", "np", ".", "zeros", "(", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", ",", "trainable", "=", "False", ")", "\n", "moving_variance", "=", "lib", ".", "param", "(", "name", "+", "'.moving_variance'", ",", "np", ".", "ones", "(", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "def", "_fused_batch_norm_training", "(", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "fused_batch_norm", "(", "inputs", ",", "scale", ",", "offset", ",", "epsilon", "=", "1e-5", ",", "data_format", "=", "'NCHW'", ")", "\n", "", "def", "_fused_batch_norm_inference", "(", ")", ":", "\n", "# Version which blends in the current item's statistics", "\n", "            ", "batch_size", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "'float32'", ")", "\n", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "[", "2", ",", "3", "]", ",", "keep_dims", "=", "True", ")", "\n", "mean", "=", "(", "(", "1.", "/", "batch_size", ")", "*", "mean", ")", "+", "(", "(", "(", "batch_size", "-", "1.", ")", "/", "batch_size", ")", "*", "moving_mean", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "var", "=", "(", "(", "1.", "/", "batch_size", ")", "*", "var", ")", "+", "(", "(", "(", "batch_size", "-", "1.", ")", "/", "batch_size", ")", "*", "moving_variance", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "return", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "offset", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "scale", "[", "None", ",", ":", ",", "None", ",", "None", "]", ",", "1e-5", ")", ",", "mean", ",", "var", "\n", "\n", "# Standard version", "\n", "# return tf.nn.fused_batch_norm(", "\n", "#     inputs,", "\n", "#     scale,", "\n", "#     offset,", "\n", "#     epsilon=1e-2, ", "\n", "#     mean=moving_mean,", "\n", "#     variance=moving_variance,", "\n", "#     is_training=False,", "\n", "#     data_format='NCHW'", "\n", "# )", "\n", "\n", "", "if", "is_training", "is", "None", ":", "\n", "            ", "outputs", ",", "batch_mean", ",", "batch_var", "=", "_fused_batch_norm_training", "(", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "batch_mean", ",", "batch_var", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "_fused_batch_norm_training", ",", "\n", "_fused_batch_norm_inference", ")", "\n", "if", "update_moving_stats", ":", "\n", "                ", "no_updates", "=", "lambda", ":", "outputs", "\n", "def", "_force_updates", "(", ")", ":", "\n", "                    ", "\"\"\"Internal function forces updates moving_vars if is_training.\"\"\"", "\n", "float_stats_iter", "=", "tf", ".", "cast", "(", "stats_iter", ",", "tf", ".", "float32", ")", "\n", "\n", "update_moving_mean", "=", "tf", ".", "assign", "(", "moving_mean", ",", "(", "(", "float_stats_iter", "/", "(", "float_stats_iter", "+", "1", ")", ")", "*", "moving_mean", ")", "+", "(", "(", "1", "/", "(", "float_stats_iter", "+", "1", ")", ")", "*", "batch_mean", ")", ")", "\n", "update_moving_variance", "=", "tf", ".", "assign", "(", "moving_variance", ",", "(", "(", "float_stats_iter", "/", "(", "float_stats_iter", "+", "1", ")", ")", "*", "moving_variance", ")", "+", "(", "(", "1", "/", "(", "float_stats_iter", "+", "1", ")", ")", "*", "batch_var", ")", ")", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_moving_mean", ",", "update_moving_variance", "]", ")", ":", "\n", "                        ", "return", "tf", ".", "identity", "(", "outputs", ")", "\n", "", "", "outputs", "=", "tf", ".", "cond", "(", "is_training", ",", "_force_updates", ",", "no_updates", ")", "\n", "\n", "", "", "if", "axes", "==", "[", "0", ",", "2", "]", ":", "\n", "            ", "return", "outputs", "[", ":", ",", ":", ",", ":", ",", "0", "]", "# collapse last dim", "\n", "", "else", ":", "\n", "            ", "return", "outputs", "\n", "", "", "else", ":", "\n", "# raise Exception('old BN')", "\n", "# TODO we can probably use nn.fused_batch_norm here too for speedup", "\n", "        ", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "axes", ",", "keep_dims", "=", "True", ")", "\n", "shape", "=", "mean", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "0", "not", "in", "axes", ":", "\n", "            ", "print", "(", "\"WARNING ({}): didn't find 0 in axes, but not using separate BN params for each item in batch\"", ".", "format", "(", "name", ")", ")", "\n", "shape", "[", "0", "]", "=", "1", "\n", "", "offset", "=", "lib", ".", "param", "(", "name", "+", "'.offset'", ",", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "'float32'", ")", ")", "\n", "scale", "=", "lib", ".", "param", "(", "name", "+", "'.scale'", ",", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "'float32'", ")", ")", "\n", "result", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "offset", ",", "scale", ",", "1e-5", ")", "\n", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.disable_default_weightnorm": [[11, 14], ["None"], "function", ["None"], ["", "def", "disable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.set_weights_stdev": [[16, 19], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.unset_weights_stdev": [[20, 23], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gyh5421_unified_deep_clustering.ops.linear.Linear": [[24, 149], ["tensorflow.name_scope", "tflib.param", "numpy.random.uniform().astype", "linear.Linear.uniform"], "function", ["None"], ["", "def", "Linear", "(", "\n", "name", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "inputs", ",", "\n", "biases", "=", "True", ",", "\n", "initialization", "=", "None", ",", "\n", "weightnorm", "=", "None", ",", "\n", "gain", "=", "1.", "\n", ")", ":", "\n", "    ", "\"\"\"\n    initialization: None, `lecun`, 'glorot', `he`, 'glorot_he', `orthogonal`, `(\"uniform\", range)`\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "                ", "stdev", "=", "_weights_stdev", "\n", "", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "if", "initialization", "==", "'lecun'", ":", "# and input_dim != output_dim):", "\n", "# disabling orth. init for now because it's too slow", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "1.", "/", "input_dim", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'glorot'", "or", "(", "initialization", "==", "None", ")", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "2.", "/", "(", "input_dim", "+", "output_dim", ")", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'he'", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "2.", "/", "input_dim", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'glorot_he'", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "4.", "/", "(", "input_dim", "+", "output_dim", ")", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'orthogonal'", "or", "(", "initialization", "==", "None", "and", "input_dim", "==", "output_dim", ")", ":", "\n", "\n", "# From lasagne", "\n", "            ", "def", "sample", "(", "shape", ")", ":", "\n", "                ", "if", "len", "(", "shape", ")", "<", "2", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Only shapes of length 2 or more are \"", "\n", "\"supported.\"", ")", "\n", "", "flat_shape", "=", "(", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ")", "\n", "# TODO: why normal and not uniform?", "\n", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "# pick the one with the correct shape", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "q", ".", "astype", "(", "'float32'", ")", "\n", "", "weight_values", "=", "sample", "(", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "\n", "", "elif", "initialization", "[", "0", "]", "==", "'uniform'", ":", "\n", "\n", "            ", "weight_values", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "initialization", "[", "1", "]", ",", "\n", "high", "=", "initialization", "[", "1", "]", ",", "\n", "size", "=", "(", "input_dim", ",", "output_dim", ")", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "raise", "Exception", "(", "'Invalid initialization!'", ")", "\n", "\n", "", "weight_values", "*=", "gain", "\n", "\n", "weight", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.W'", ",", "\n", "weight_values", "\n", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "weight_values", ")", ",", "axis", "=", "0", ")", ")", "\n", "# norm_values = np.linalg.norm(weight_values, axis=0)", "\n", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "weight", ")", ",", "reduction_indices", "=", "[", "0", "]", ")", ")", "\n", "weight", "=", "weight", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "# if 'Discriminator' in name:", "\n", "#     print \"WARNING weight constraint on {}\".format(name)", "\n", "#     weight = tf.nn.softsign(10.*weight)*.1", "\n", "\n", "", "", "if", "inputs", ".", "get_shape", "(", ")", ".", "ndims", "==", "2", ":", "\n", "            ", "result", "=", "tf", ".", "matmul", "(", "inputs", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "reshaped_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "input_dim", "]", ")", "\n", "result", "=", "tf", ".", "matmul", "(", "reshaped_inputs", ",", "weight", ")", "\n", "result", "=", "tf", ".", "reshape", "(", "result", ",", "tf", ".", "pack", "(", "tf", ".", "unpack", "(", "tf", ".", "shape", "(", "inputs", ")", ")", "[", ":", "-", "1", "]", "+", "[", "output_dim", "]", ")", ")", "\n", "\n", "", "if", "biases", ":", "\n", "            ", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "\n", "result", ",", "\n", "lib", ".", "param", "(", "\n", "name", "+", "'.b'", ",", "\n", "np", ".", "zeros", "(", "(", "output_dim", ",", ")", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", ")", "\n", "\n", "", "return", "result", "", "", "", ""]]}