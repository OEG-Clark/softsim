{"home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_fusion.sub_processor": [[61, 246], ["torch.cuda.set_device", "torch.cuda.set_device", "AFSD.anet.BDNet.BDNet", "AFSD.anet.BDNet.BDNet", "AFSD.anet.BDNet.BDNet.load_state_dict", "AFSD.anet.BDNet.BDNet.load_state_dict", "AFSD.anet.BDNet.BDNet.eval().cuda", "AFSD.anet.BDNet.BDNet.eval().cuda", "tqdm.tqdm", "torch.load", "torch.load", "torch.load", "torch.load", "max", "numpy.load", "numpy.transpose", "centor_crop", "torch.from_numpy", "torch.from_numpy", "numpy.load", "numpy.transpose", "centor_crop", "torch.from_numpy", "torch.from_numpy", "range", "torch.zeros", "torch.zeros", "range", "torch.zeros.contiguous().view", "flt.view.view", "range", "tqdm.tqdm.close", "AFSD.anet.BDNet.BDNet.eval", "AFSD.anet.BDNet.BDNet.eval", "os.path.join", "torch.from_numpy.copy", "os.path.join", "torch.from_numpy.copy", "output.append", "torch.cat.float", "torch.cat.float", "torch.cat.unsqueeze().cuda", "torch.cat.unsqueeze().cuda", "torch.cat", "torch.cat", "torch.sqrt.clamp_", "torch.cat", "torch.cat", "torch.sqrt.clamp_", "torch.sqrt", "torch.sqrt", "score_func", "score_func", "center.sigmoid.sigmoid", "conf.view().transpose.view().transpose", "conf.view().transpose.clone", "range", "torch.cat", "torch.cat", "AFSD.common.segment_utils.softnms_v2", "flt[].contiguous", "tmp[].view", "tmp.detach().cpu().numpy.detach().cpu().numpy", "range", "tqdm.tqdm.update", "len", "numpy.argmax", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "AFSD.anet.BDNet.BDNet.", "AFSD.anet.BDNet.BDNet.", "c_mask.unsqueeze().expand_as", "decoded_segments[].view", "torch.cat", "torch.cat", "output[].append", "len", "torch.zeros.contiguous", "tmp.detach().cpu().numpy.size", "max", "min", "proposal_list.append", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "conf.view().transpose.view", "scores.size", "tmp.detach().cpu().numpy.detach().cpu", "float", "float", "float", "c_mask.unsqueeze", "scores.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "tmp.detach().cpu().numpy.detach", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2"], ["def", "sub_processor", "(", "lock", ",", "pid", ",", "video_list", ")", ":", "\n", "    ", "text", "=", "'processor %d'", "%", "pid", "\n", "with", "lock", ":", "\n", "        ", "progress", "=", "tqdm", ".", "tqdm", "(", "\n", "total", "=", "len", "(", "video_list", ")", ",", "\n", "position", "=", "pid", ",", "\n", "desc", "=", "text", ",", "\n", "ncols", "=", "0", "\n", ")", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "pid", ")", "\n", "rgb_net", "=", "BDNet", "(", "in_channels", "=", "3", ",", "training", "=", "False", ")", "\n", "flow_net", "=", "BDNet", "(", "in_channels", "=", "2", ",", "training", "=", "False", ")", "\n", "rgb_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "rgb_checkpoint_path", ")", ")", "\n", "flow_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "flow_checkpoint_path", ")", ")", "\n", "rgb_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "flow_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "video_name", "in", "video_list", ":", "\n", "        ", "cuhk_score", "=", "cuhk_data_score", "[", "video_name", "[", "2", ":", "]", "]", "\n", "cuhk_class_1", "=", "cuhk_data_action", "[", "np", ".", "argmax", "(", "cuhk_score", ")", "]", "\n", "cuhk_score_1", "=", "max", "(", "cuhk_score", ")", "\n", "\n", "sample_count", "=", "video_infos", "[", "video_name", "]", "[", "'frame_num'", "]", "\n", "sample_fps", "=", "video_infos", "[", "video_name", "]", "[", "'fps'", "]", "\n", "duration", "=", "video_infos", "[", "video_name", "]", "[", "'duration'", "]", "\n", "\n", "offsetlist", "=", "[", "0", "]", "\n", "\n", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "rgb_mp4_data_path", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "frames", "=", "data", "\n", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data", "=", "centor_crop", "(", "frames", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ".", "copy", "(", ")", ")", "\n", "rgb_data", "=", "data", "\n", "\n", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "flow_mp4_data_path", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "frames", "=", "data", "\n", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data", "=", "centor_crop", "(", "frames", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ".", "copy", "(", ")", ")", "\n", "flow_data", "=", "data", "\n", "\n", "output", "=", "[", "]", "\n", "for", "cl", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "res", "=", "torch", ".", "zeros", "(", "num_classes", ",", "top_k", ",", "3", ")", "\n", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "            ", "rgb_clip", "=", "rgb_data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "rgb_clip", "=", "rgb_clip", ".", "float", "(", ")", "\n", "\n", "flow_clip", "=", "flow_data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "flow_clip", "=", "flow_clip", ".", "float", "(", ")", "\n", "\n", "if", "rgb_clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "                ", "rgb_tmp", "=", "torch", ".", "ones", "(", "\n", "[", "rgb_clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "rgb_clip", ".", "size", "(", "1", ")", ",", "crop_size", ",", "crop_size", "]", ")", ".", "float", "(", ")", "*", "127.5", "\n", "flow_tmp", "=", "torch", ".", "ones", "(", "\n", "[", "flow_clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "flow_clip", ".", "size", "(", "1", ")", ",", "crop_size", ",", "crop_size", "]", ")", ".", "float", "(", ")", "*", "127.5", "\n", "rgb_clip", "=", "torch", ".", "cat", "(", "[", "rgb_clip", ",", "rgb_tmp", "]", ",", "dim", "=", "1", ")", "\n", "flow_clip", "=", "torch", ".", "cat", "(", "[", "flow_clip", ",", "flow_tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "rgb_clip", "=", "rgb_clip", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "flow_clip", "=", "flow_clip", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "rgb_clip", "=", "(", "rgb_clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "flow_clip", "=", "(", "flow_clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "rgb_output_dict", "=", "rgb_net", "(", "rgb_clip", ")", "\n", "flow_output_dict", "=", "flow_net", "(", "flow_clip", ")", "\n", "\n", "", "loc", ",", "conf", ",", "priors", "=", "rgb_output_dict", "[", "'loc'", "]", ",", "rgb_output_dict", "[", "'conf'", "]", ",", "rgb_output_dict", "[", "'priors'", "]", "\n", "prop_loc", ",", "prop_conf", "=", "rgb_output_dict", "[", "'prop_loc'", "]", ",", "rgb_output_dict", "[", "'prop_conf'", "]", "\n", "center", "=", "rgb_output_dict", "[", "'center'", "]", "\n", "\n", "loc", "=", "loc", "[", "0", "]", "\n", "conf", "=", "conf", "[", "0", "]", "\n", "prop_loc", "=", "prop_loc", "[", "0", "]", "\n", "prop_conf", "=", "prop_conf", "[", "0", "]", "\n", "center", "=", "center", "[", "0", "]", "\n", "\n", "pre_loc_w", "=", "loc", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", "1", ":", "]", "\n", "loc", "=", "0.5", "*", "pre_loc_w", "*", "prop_loc", "+", "loc", "\n", "decoded_segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", "1", "]", "*", "clip_length", "-", "loc", "[", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", "1", "]", "*", "clip_length", "+", "loc", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "decoded_segments", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "clip_length", ")", "\n", "rgb_segments", "=", "decoded_segments", "\n", "\n", "rgb_loc", "=", "loc", "\n", "rgb_prop_conf", "=", "prop_conf", "\n", "rgb_prop_loc", "=", "prop_loc", "\n", "rgb_conf", "=", "conf", "\n", "rgb_center", "=", "center", "\n", "\n", "loc", ",", "conf", ",", "priors", "=", "flow_output_dict", "[", "'loc'", "]", ",", "flow_output_dict", "[", "'conf'", "]", ",", "flow_output_dict", "[", "'priors'", "]", "\n", "prop_loc", ",", "prop_conf", "=", "flow_output_dict", "[", "'prop_loc'", "]", ",", "flow_output_dict", "[", "'prop_conf'", "]", "\n", "center", "=", "flow_output_dict", "[", "'center'", "]", "\n", "\n", "loc", "=", "loc", "[", "0", "]", "\n", "conf", "=", "conf", "[", "0", "]", "\n", "prop_loc", "=", "prop_loc", "[", "0", "]", "\n", "prop_conf", "=", "prop_conf", "[", "0", "]", "\n", "center", "=", "center", "[", "0", "]", "\n", "\n", "pre_loc_w", "=", "loc", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", "1", ":", "]", "\n", "loc", "=", "0.5", "*", "pre_loc_w", "*", "prop_loc", "+", "loc", "\n", "decoded_segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", "1", "]", "*", "clip_length", "-", "loc", "[", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", "1", "]", "*", "clip_length", "+", "loc", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "decoded_segments", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "clip_length", ")", "\n", "flow_segments", "=", "decoded_segments", "\n", "\n", "flow_loc", "=", "loc", "\n", "flow_prop_loc", "=", "prop_loc", "\n", "flow_prop_conf", "=", "prop_conf", "\n", "flow_conf", "=", "conf", "\n", "flow_center", "=", "center", "\n", "\n", "loc", "=", "(", "rgb_loc", "+", "flow_loc", ")", "/", "2.0", "\n", "prop_loc", "=", "(", "rgb_prop_loc", "+", "flow_prop_loc", ")", "/", "2.0", "\n", "conf", "=", "(", "rgb_conf", "+", "flow_conf", ")", "/", "2.0", "\n", "prop_conf", "=", "(", "rgb_prop_conf", "+", "flow_prop_conf", ")", "/", "2.0", "\n", "center", "=", "(", "rgb_center", "+", "flow_center", ")", "/", "2.0", "\n", "\n", "decoded_segments", "=", "torch", ".", "sqrt", "(", "rgb_segments", "*", "flow_segments", ")", "\n", "\n", "conf", "=", "score_func", "(", "conf", ")", "\n", "prop_conf", "=", "score_func", "(", "prop_conf", ")", "\n", "conf", "=", "(", "conf", "+", "prop_conf", ")", "/", "2.0", "\n", "center", "=", "center", ".", "sigmoid", "(", ")", "\n", "conf", "=", "conf", "*", "center", "\n", "\n", "conf", "=", "conf", ".", "view", "(", "-", "1", ",", "num_classes", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "conf_scores", "=", "conf", ".", "clone", "(", ")", "\n", "\n", "for", "cl", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "                ", "c_mask", "=", "conf_scores", "[", "cl", "]", ">", "0", "\n", "scores", "=", "conf_scores", "[", "cl", "]", "[", "c_mask", "]", "\n", "if", "scores", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "l_mask", "=", "c_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "decoded_segments", ")", "\n", "segments", "=", "decoded_segments", "[", "l_mask", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "segments", "=", "(", "segments", "+", "offset", ")", "/", "sample_fps", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "\n", "\n", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "\n", "", "", "sum_count", "=", "0", "\n", "for", "cl", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "            ", "if", "len", "(", "output", "[", "cl", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "tmp", "=", "torch", ".", "cat", "(", "output", "[", "cl", "]", ",", "0", ")", "\n", "tmp", ",", "count", "=", "softnms_v2", "(", "tmp", ",", "sigma", "=", "nms_sigma", ",", "top_k", "=", "top_k", ",", "score_threshold", "=", "1e-18", ")", "\n", "res", "[", "cl", ",", ":", "count", "]", "=", "tmp", "\n", "sum_count", "+=", "count", "\n", "\n", "", "flt", "=", "res", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "flt", "=", "flt", ".", "view", "(", "num_classes", ",", "-", "1", ",", "3", ")", "\n", "proposal_list", "=", "[", "]", "\n", "for", "cl", "in", "range", "(", "1", ",", "num_classes", ")", ":", "\n", "            ", "class_name", "=", "cuhk_class_1", "\n", "tmp", "=", "flt", "[", "cl", "]", ".", "contiguous", "(", ")", "\n", "tmp", "=", "tmp", "[", "(", "tmp", "[", ":", ",", "2", "]", ">", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp", ")", "]", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "if", "tmp", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "tmp", "=", "tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "tmp", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "tmp_proposal", "=", "{", "}", "\n", "start_time", "=", "max", "(", "0", ",", "float", "(", "tmp", "[", "i", ",", "0", "]", ")", ")", "\n", "end_time", "=", "min", "(", "duration", ",", "float", "(", "tmp", "[", "i", ",", "1", "]", ")", ")", "\n", "if", "end_time", "<=", "start_time", ":", "\n", "                    ", "continue", "\n", "\n", "", "tmp_proposal", "[", "'label'", "]", "=", "class_name", "\n", "tmp_proposal", "[", "'score'", "]", "=", "float", "(", "tmp", "[", "i", ",", "2", "]", ")", "*", "cuhk_score_1", "\n", "tmp_proposal", "[", "'segment'", "]", "=", "[", "start_time", ",", "end_time", "]", "\n", "proposal_list", ".", "append", "(", "tmp_proposal", ")", "\n", "\n", "", "", "result_dict", "[", "video_name", "[", "2", ":", "]", "]", "=", "proposal_list", "\n", "with", "lock", ":", "\n", "            ", "progress", ".", "update", "(", "1", ")", "\n", "", "", "with", "lock", ":", "\n", "        ", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.I3D_BackBone.__init__": [[25, 34], ["torch.Module.__init__", "AFSD.common.i3d_backbone.InceptionI3d", "BDNet.I3D_BackBone._model.build"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.build"], ["    ", "def", "__init__", "(", "self", ",", "final_endpoint", "=", "'Mixed_5c'", ",", "name", "=", "'inception_i3d'", ",", "in_channels", "=", "3", ",", "\n", "freeze_bn", "=", "freeze_bn", ",", "freeze_bn_affine", "=", "freeze_bn_affine", ")", ":", "\n", "        ", "super", "(", "I3D_BackBone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_model", "=", "InceptionI3d", "(", "final_endpoint", "=", "final_endpoint", ",", "\n", "name", "=", "name", ",", "\n", "in_channels", "=", "in_channels", ")", "\n", "self", ".", "_model", ".", "build", "(", ")", "\n", "self", ".", "_freeze_bn", "=", "freeze_bn", "\n", "self", ".", "_freeze_bn_affine", "=", "freeze_bn_affine", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.I3D_BackBone.load_pretrained_weight": [[35, 37], ["BDNet.I3D_BackBone._model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_pretrained_weight", "(", "self", ",", "model_path", "=", "config", "[", "'model'", "]", "[", "'backbone_model'", "]", ")", ":", "\n", "        ", "self", ".", "_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.I3D_BackBone.train": [[38, 49], ["super().train", "BDNet.I3D_BackBone._model.named_modules", "isinstance", "m.eval", "m.weight.requires_grad_", "m.bias.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "I3D_BackBone", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "_freeze_bn", "and", "mode", ":", "\n", "# print('freeze all BatchNorm3d in I3D backbone.')", "\n", "            ", "for", "name", ",", "m", "in", "self", ".", "_model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "# print('freeze {}.'.format(name))", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "if", "self", ".", "_freeze_bn_affine", ":", "\n", "                        ", "m", ".", "weight", ".", "requires_grad_", "(", "False", ")", "\n", "m", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.I3D_BackBone.forward": [[50, 52], ["BDNet.I3D_BackBone._model.extract_features"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.extract_features"], ["", "", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_model", ".", "extract_features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.ScaleExp.__init__": [[55, 58], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_value", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ScaleExp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "init_value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.ScaleExp.forward": [[59, 61], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "input", "*", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.ProposalBranch.__init__": [[64, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AFSD.prop_pooling.boundary_pooling_op.BoundaryMaxPooling", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "proposal_channels", ")", ":", "\n", "        ", "super", "(", "ProposalBranch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cur_point_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "in_channels", "=", "in_channels", ",", "\n", "output_channels", "=", "proposal_channels", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", ")", ",", "\n", "# nn.InstanceNorm1d(proposal_channels),", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "proposal_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "lr_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "in_channels", "=", "in_channels", ",", "\n", "output_channels", "=", "proposal_channels", "*", "2", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", ")", ",", "\n", "# nn.InstanceNorm1d(proposal_channels * 2),", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "proposal_channels", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "boundary_max_pooling", "=", "BoundaryMaxPooling", "(", ")", "\n", "\n", "self", ".", "roi_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "in_channels", "=", "proposal_channels", ",", "\n", "output_channels", "=", "proposal_channels", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", ")", ",", "\n", "# nn.InstanceNorm1d(proposal_channels * 2),", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "proposal_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "proposal_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "proposal_channels", "*", "4", ",", "\n", "output_channels", "=", "in_channels", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.ProposalBranch.forward": [[108, 118], ["BDNet.ProposalBranch.cur_point_conv", "BDNet.ProposalBranch.lr_conv", "BDNet.ProposalBranch.boundary_max_pooling", "BDNet.ProposalBranch.boundary_max_pooling", "BDNet.ProposalBranch.roi_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BDNet.ProposalBranch.proposal_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature", ",", "frame_level_feature", ",", "segments", ",", "frame_segments", ")", ":", "\n", "        ", "fm_short", "=", "self", ".", "cur_point_conv", "(", "feature", ")", "\n", "feature", "=", "self", ".", "lr_conv", "(", "feature", ")", "\n", "# prop_feature = feature", "\n", "prop_feature", "=", "self", ".", "boundary_max_pooling", "(", "feature", ",", "segments", ")", "\n", "prop_roi_feature", "=", "self", ".", "boundary_max_pooling", "(", "frame_level_feature", ",", "frame_segments", ")", "\n", "prop_roi_feature", "=", "self", ".", "roi_conv", "(", "prop_roi_feature", ")", "\n", "prop_feature", "=", "torch", ".", "cat", "(", "[", "prop_roi_feature", ",", "prop_feature", ",", "fm_short", "]", ",", "dim", "=", "1", ")", "\n", "prop_feature", "=", "self", ".", "proposal_conv", "(", "prop_feature", ")", "\n", "return", "prop_feature", ",", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.CoarsePyramid.__init__": [[121, 270], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "BDNet.CoarsePyramid.pyramids.append", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "BDNet.ProposalBranch", "BDNet.ProposalBranch", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "BDNet.CoarsePyramid.pyramids.append", "loc_towers.append", "conf_towers.append", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "BDNet.CoarsePyramid.loc_heads.append", "BDNet.CoarsePyramid.priors.append", "AFSD.common.layers.Unit3D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "BDNet.ScaleExp", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feat_channels", "=", "(", "832", ",", "1024", ")", ",", "num_cls", "=", "2", ",", "frame_num", "=", "768", ")", ":", "\n", "        ", "super", "(", "CoarsePyramid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "conv_channels", "\n", "self", ".", "pyramids", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "loc_heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "frame_num", "=", "frame_num", "\n", "self", ".", "layer_num", "=", "layer_num", "\n", "self", ".", "num_classes", "=", "num_cls", "\n", "self", ".", "os_head", "=", "os_head", "\n", "self", ".", "pyramids", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "Unit3D", "(", "\n", "in_channels", "=", "feat_channels", "[", "1", "]", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "[", "1", ",", "3", ",", "3", "]", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "padding", "=", "'spatial_valid'", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "layer_num", ")", ":", "\n", "            ", "self", ".", "pyramids", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "\n", "", "loc_towers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "loc_towers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "loc_tower", "=", "nn", ".", "Sequential", "(", "*", "loc_towers", ")", "\n", "conf_towers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "conf_towers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "conf_tower", "=", "nn", ".", "Sequential", "(", "*", "conf_towers", ")", "\n", "\n", "self", ".", "loc_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "2", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "self", ".", "conf_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "self", ".", "num_classes", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "self", ".", "actionness_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "1", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "\n", "", "self", ".", "loc_proposal_branch", "=", "ProposalBranch", "(", "out_channels", ",", "512", ")", "\n", "self", ".", "conf_proposal_branch", "=", "ProposalBranch", "(", "out_channels", ",", "512", ")", "\n", "\n", "self", ".", "prop_loc_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "2", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "self", ".", "prop_conf_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "self", ".", "num_classes", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "self", ".", "prop_actionness_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "1", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "\n", "", "self", ".", "center_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "1", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "\n", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "out_channels", ",", "out_channels", ",", "3", ",", "activation_fn", "=", "None", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Unit1D", "(", "out_channels", ",", "out_channels", ",", "3", ",", "activation_fn", "=", "None", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Unit1D", "(", "out_channels", ",", "out_channels", ",", "1", ",", "activation_fn", "=", "None", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "priors", "=", "[", "]", "\n", "t", "=", "feat_t", "\n", "for", "i", "in", "range", "(", "layer_num", ")", ":", "\n", "            ", "self", ".", "loc_heads", ".", "append", "(", "ScaleExp", "(", ")", ")", "\n", "self", ".", "priors", ".", "append", "(", "\n", "torch", ".", "Tensor", "(", "[", "[", "(", "c", "+", "0.5", ")", "/", "t", ",", "i", "]", "for", "c", "in", "range", "(", "t", ")", "]", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", ")", "\n", "t", "=", "t", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.CoarsePyramid.forward": [[271, 392], ["x1.size", "enumerate", "pyramid_feats[].unsqueeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "BDNet.CoarsePyramid.deconv", "trip.append", "start_feat.permute().contiguous", "end_feat.permute().contiguous", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "pyramid_feats.append", "BDNet.CoarsePyramid.clone", "BDNet.CoarsePyramid.loc_tower", "BDNet.CoarsePyramid.conf_tower", "locs.append", "confs.append", "feat.size", "BDNet.CoarsePyramid.loc_proposal_branch", "BDNet.CoarsePyramid.conf_proposal_branch", "prop_locs.append", "prop_confs.append", "centers.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv", "conv.squeeze().squeeze", "conv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "start_feat.permute", "end_feat.permute", "BDNet.CoarsePyramid.conf_head().view().permute().contiguous", "acts.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].expand().to", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trip.extend", "loc_prop_feat_[].permute().contiguous", "loc_prop_feat_[].permute().contiguous", "conf_prop_feat_[].permute().contiguous", "conf_prop_feat_[].permute().contiguous", "BDNet.CoarsePyramid.prop_loc_head().view().permute().contiguous", "BDNet.CoarsePyramid.prop_conf_head().view().permute().contiguous", "prop_acts.append", "BDNet.CoarsePyramid.center_head().view().permute().contiguous", "o.view", "o.view", "o.view", "o.view", "o.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BDNet.CoarsePyramid.actionness_head().view().permute().contiguous", "loc_prop_feat_.size", "BDNet.CoarsePyramid.prop_actionness_head().view().permute().contiguous", "o.view", "o.view", "conv.squeeze", "BDNet.CoarsePyramid.conf_head().view().permute", "[].expand", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "loc_prop_feat_.clone", "conf_prop_feat_.clone", "loc_prop_feat_[].permute", "loc_prop_feat_[].permute", "conf_prop_feat_[].permute", "conf_prop_feat_[].permute", "BDNet.CoarsePyramid.prop_loc_head().view().permute", "BDNet.CoarsePyramid.prop_conf_head().view().permute", "BDNet.CoarsePyramid.center_head().view().permute", "BDNet.CoarsePyramid.actionness_head().view().permute", "BDNet.CoarsePyramid.prop_actionness_head().view().permute", "BDNet.CoarsePyramid.conf_head().view", "BDNet.CoarsePyramid.prop_loc_head().view", "BDNet.CoarsePyramid.prop_conf_head().view", "BDNet.CoarsePyramid.center_head().view", "BDNet.CoarsePyramid.actionness_head().view", "BDNet.CoarsePyramid.prop_actionness_head().view", "BDNet.CoarsePyramid.conf_head", "BDNet.CoarsePyramid.prop_loc_head", "BDNet.CoarsePyramid.prop_conf_head", "BDNet.CoarsePyramid.center_head", "BDNet.CoarsePyramid.actionness_head", "BDNet.CoarsePyramid.prop_actionness_head", "BDNet.CoarsePyramid.loc_head"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "feat_dict", ",", "ssl", "=", "False", ")", ":", "\n", "        ", "pyramid_feats", "=", "[", "]", "\n", "locs", "=", "[", "]", "\n", "confs", "=", "[", "]", "\n", "acts", "=", "[", "]", "\n", "centers", "=", "[", "]", "\n", "prop_locs", "=", "[", "]", "\n", "prop_confs", "=", "[", "]", "\n", "prop_acts", "=", "[", "]", "\n", "trip", "=", "[", "]", "\n", "x1", "=", "feat_dict", "[", "'Mixed_5c'", "]", "\n", "# x1 = feat_dict['Mixed_4f']", "\n", "batch_num", "=", "x1", ".", "size", "(", "0", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "pyramids", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "x", "=", "conv", "(", "x1", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "", "pyramid_feats", ".", "append", "(", "x", ")", "\n", "\n", "", "frame_level_feat", "=", "pyramid_feats", "[", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "frame_level_feat", "=", "F", ".", "interpolate", "(", "frame_level_feat", ",", "[", "self", ".", "frame_num", ",", "1", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "frame_level_feat", "=", "self", ".", "deconv", "(", "frame_level_feat", ")", "\n", "trip", ".", "append", "(", "frame_level_feat", ".", "clone", "(", ")", ")", "\n", "start_feat", "=", "frame_level_feat", "[", ":", ",", ":", "256", "]", "\n", "end_feat", "=", "frame_level_feat", "[", ":", ",", "256", ":", "]", "\n", "start", "=", "start_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "end", "=", "end_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "for", "i", ",", "feat", "in", "enumerate", "(", "pyramid_feats", ")", ":", "\n", "# prior = torch.Tensor([[(c + 0.5) / t] for c in range(t)]).view(-1, 1).to(feat.device)", "\n", "# priors.append(prior)", "\n", "            ", "loc_feat", "=", "self", ".", "loc_tower", "(", "feat", ")", "\n", "conf_feat", "=", "self", ".", "conf_tower", "(", "feat", ")", "\n", "\n", "locs", ".", "append", "(", "\n", "self", ".", "loc_heads", "[", "i", "]", "(", "self", ".", "loc_head", "(", "loc_feat", ")", ")", "\n", ".", "view", "(", "batch_num", ",", "2", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "*", "fpn_strides", "[", "i", "]", "\n", ")", "\n", "confs", ".", "append", "(", "\n", "self", ".", "conf_head", "(", "conf_feat", ")", ".", "view", "(", "batch_num", ",", "self", ".", "num_classes", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "                ", "acts", ".", "append", "(", "\n", "self", ".", "actionness_head", "(", "conf_feat", ")", ".", "view", "(", "batch_num", ",", "1", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (1, D, 1)", "\n", ")", "\n", "", "t", "=", "feat", ".", "size", "(", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "segments", "=", "locs", "[", "-", "1", "]", "/", "self", ".", "frame_num", "*", "t", "\n", "priors", "=", "self", ".", "priors", "[", "i", "]", "[", ":", ",", ":", "1", "]", ".", "expand", "(", "batch_num", ",", "t", ",", "1", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "new_priors", "=", "torch", ".", "round", "(", "priors", "*", "t", "-", "0.5", ")", "\n", "plen", "=", "segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "segments", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "in_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "4.0", ",", "min", "=", "1.0", ")", "\n", "out_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "10.0", ",", "min", "=", "1.0", ")", "\n", "\n", "l_segment", "=", "new_priors", "-", "segments", "[", ":", ",", ":", ",", ":", "1", "]", "\n", "r_segment", "=", "new_priors", "+", "segments", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "round", "(", "l_segment", "-", "out_plen", ")", ",", "\n", "torch", ".", "round", "(", "l_segment", "+", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "r_segment", "-", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "r_segment", "+", "out_plen", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "decoded_segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", ",", ":", "1", "]", "*", "self", ".", "frame_num", "-", "locs", "[", "-", "1", "]", "[", ":", ",", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", ",", ":", "1", "]", "*", "self", ".", "frame_num", "+", "locs", "[", "-", "1", "]", "[", ":", ",", ":", ",", "1", ":", "]", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "plen", "=", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "1.0", "\n", "in_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "4.0", ",", "min", "=", "1.0", ")", "\n", "out_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "10.0", ",", "min", "=", "1.0", ")", "\n", "frame_segments", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "-", "out_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "+", "out_plen", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "loc_prop_feat", ",", "loc_prop_feat_", "=", "self", ".", "loc_proposal_branch", "(", "loc_feat", ",", "frame_level_feat", ",", "\n", "segments", ",", "frame_segments", ")", "\n", "conf_prop_feat", ",", "conf_prop_feat_", "=", "self", ".", "conf_proposal_branch", "(", "conf_feat", ",", "frame_level_feat", ",", "\n", "segments", ",", "frame_segments", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "trip", ".", "extend", "(", "[", "loc_prop_feat_", ".", "clone", "(", ")", ",", "conf_prop_feat_", ".", "clone", "(", ")", "]", ")", "\n", "ndim", "=", "loc_prop_feat_", ".", "size", "(", "1", ")", "//", "2", "\n", "start_loc_prop", "=", "loc_prop_feat_", "[", ":", ",", ":", "ndim", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "end_loc_prop", "=", "loc_prop_feat_", "[", ":", ",", "ndim", ":", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "start_conf_prop", "=", "conf_prop_feat_", "[", ":", ",", ":", "ndim", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "end_conf_prop", "=", "conf_prop_feat_", "[", ":", ",", "ndim", ":", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "if", "ssl", ":", "\n", "                    ", "return", "trip", "\n", "", "", "prop_locs", ".", "append", "(", "self", ".", "prop_loc_head", "(", "loc_prop_feat", ")", ".", "view", "(", "batch_num", ",", "2", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "prop_confs", ".", "append", "(", "self", ".", "prop_conf_head", "(", "conf_prop_feat", ")", ".", "view", "(", "batch_num", ",", "self", ".", "num_classes", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "                ", "prop_acts", ".", "append", "(", "self", ".", "prop_actionness_head", "(", "conf_prop_feat", ")", ".", "view", "(", "batch_num", ",", "1", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "# (1, D, 1)", "\n", "", "centers", ".", "append", "(", "\n", "self", ".", "center_head", "(", "loc_prop_feat", ")", ".", "view", "(", "batch_num", ",", "1", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", ")", "\n", "\n", "", "loc", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "2", ")", "for", "o", "in", "locs", "]", ",", "1", ")", "\n", "conf", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "self", ".", "num_classes", ")", "for", "o", "in", "confs", "]", ",", "1", ")", "\n", "prop_loc", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "2", ")", "for", "o", "in", "prop_locs", "]", ",", "1", ")", "\n", "prop_conf", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "self", ".", "num_classes", ")", "for", "o", "in", "prop_confs", "]", ",", "1", ")", "\n", "center", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "1", ")", "for", "o", "in", "centers", "]", ",", "1", ")", "\n", "priors", "=", "torch", ".", "cat", "(", "self", ".", "priors", ",", "0", ")", ".", "to", "(", "loc", ".", "device", ")", "\n", "outs", "=", "(", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "start", ",", "end", ",", "start_loc_prop", ",", "end_loc_prop", ",", "start_conf_prop", ",", "end_conf_prop", ")", "\n", "act", ",", "prop_act", "=", "None", ",", "None", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "act", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "1", ")", "for", "o", "in", "acts", "]", ",", "1", ")", "# (1, 126, 1)", "\n", "prop_act", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "1", ")", "for", "o", "in", "prop_acts", "]", ",", "1", ")", "# (1, 126, 1)", "\n", "", "outs", "+=", "(", "act", ",", "prop_act", ")", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.BDNet.__init__": [[395, 416], ["torch.Module.__init__", "BDNet.CoarsePyramid", "BDNet.BDNet.reset_params", "AFSD.prop_pooling.boundary_pooling_op.BoundaryMaxPooling", "BDNet.I3D_BackBone", "BDNet.DirichletLayer", "BDNet.BDNet.backbone.load_pretrained_weight", "BDNet.BDNet.backbone.load_pretrained_weight"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.reset_params", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.load_pretrained_weight", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.load_pretrained_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "backbone_model", "=", "None", ",", "training", "=", "True", ",", "\n", "frame_num", "=", "768", ",", "use_edl", "=", "False", ")", ":", "\n", "        ", "super", "(", "BDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "os_head", "=", "os_head", "\n", "self", ".", "num_classes", "=", "num_classes", "-", "1", "if", "self", ".", "os_head", "else", "num_classes", "\n", "self", ".", "coarse_pyramid_detection", "=", "CoarsePyramid", "(", "frame_num", "=", "frame_num", ",", "num_cls", "=", "self", ".", "num_classes", ")", "\n", "self", ".", "reset_params", "(", ")", "\n", "self", ".", "boundary_max_pooling", "=", "BoundaryMaxPooling", "(", ")", "\n", "self", ".", "backbone", "=", "I3D_BackBone", "(", "in_channels", "=", "in_channels", ")", "\n", "self", ".", "_training", "=", "training", "\n", "if", "self", ".", "_training", ":", "\n", "            ", "if", "backbone_model", "is", "None", ":", "\n", "                ", "self", ".", "backbone", ".", "load_pretrained_weight", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "backbone", ".", "load_pretrained_weight", "(", "backbone_model", ")", "\n", "", "", "self", ".", "scales", "=", "[", "1", ",", "4", ",", "4", "]", "\n", "self", ".", "use_edl", "=", "use_edl", "\n", "self", ".", "evidence", "=", "evidence", "\n", "if", "self", ".", "use_edl", ":", "\n", "            ", "self", ".", "out_layer", "=", "DirichletLayer", "(", "self", ".", "evidence", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.BDNet.weight_init": [[417, 434], ["isinstance", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "max", "numpy.sqrt", "torch.init._no_grad_uniform_", "torch.init._no_grad_uniform_", "torch.init._no_grad_uniform_", "isinstance", "isinstance", "isinstance", "isinstance", "BDNet.BDNet.weight_init.glorot_uniform_"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "weight_init", "(", "m", ")", ":", "\n", "        ", "def", "glorot_uniform_", "(", "tensor", ")", ":", "\n", "            ", "fan_in", ",", "fan_out", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "tensor", ")", "\n", "scale", "=", "1.0", "\n", "scale", "/=", "max", "(", "1.", ",", "(", "fan_in", "+", "fan_out", ")", "/", "2.", ")", "\n", "limit", "=", "np", ".", "sqrt", "(", "3.0", "*", "scale", ")", "\n", "return", "nn", ".", "init", ".", "_no_grad_uniform_", "(", "tensor", ",", "-", "limit", ",", "limit", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "            ", "glorot_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.BDNet.reset_params": [[435, 452], ["enumerate", "BDNet.BDNet.modules", "BDNet.BDNet.weight_init", "modules.modules", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.weight_init"], ["", "", "def", "reset_params", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "self", ".", "weight_init", "(", "m", ")", "\n", "# Initialization", "\n", "", "for", "modules", "in", "[", "\n", "self", ".", "coarse_pyramid_detection", ".", "loc_tower", ",", "self", ".", "coarse_pyramid_detection", ".", "conf_tower", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "loc_head", ",", "self", ".", "coarse_pyramid_detection", ".", "conf_head", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "loc_proposal_branch", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "conf_proposal_branch", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "prop_loc_head", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "prop_conf_head", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "center_head", "\n", "]", ":", "\n", "            ", "for", "layer", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.BDNet.forward": [[453, 502], ["BDNet.BDNet.backbone", "BDNet.BDNet.coarse_pyramid_detection", "proposals[].unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "BDNet.BDNet.coarse_pyramid_detection", "BDNet.BDNet.boundary_max_pooling", "anchor.append", "positive.append", "negative.append", "BDNet.BDNet.out_layer.compute_uncertainty", "BDNet.BDNet.out_layer.compute_uncertainty", "out_dict.update", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "BDNet.BDNet.size"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.compute_uncertainty", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.compute_uncertainty"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "proposals", "=", "None", ",", "ssl", "=", "False", ")", ":", "\n", "        ", "feat_dict", "=", "self", ".", "backbone", "(", "x", ")", "\n", "if", "ssl", ":", "\n", "            ", "top_feat", "=", "self", ".", "coarse_pyramid_detection", "(", "feat_dict", ",", "ssl", ")", "\n", "decoded_segments", "=", "proposals", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "\n", "plen", "=", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "1.0", "\n", "in_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "4.0", ",", "min", "=", "1.0", ")", "\n", "out_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "10.0", ",", "min", "=", "1.0", ")", "\n", "frame_segments", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "-", "out_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "+", "out_plen", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "anchor", ",", "positive", ",", "negative", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "bound_feat", "=", "self", ".", "boundary_max_pooling", "(", "top_feat", "[", "i", "]", ",", "frame_segments", "/", "self", ".", "scales", "[", "i", "]", ")", "\n", "# for triplet loss", "\n", "ndim", "=", "bound_feat", ".", "size", "(", "1", ")", "//", "2", "\n", "anchor", ".", "append", "(", "bound_feat", "[", ":", ",", "ndim", ":", ",", "0", "]", ")", "\n", "positive", ".", "append", "(", "bound_feat", "[", ":", ",", ":", "ndim", ",", "1", "]", ")", "\n", "negative", ".", "append", "(", "bound_feat", "[", ":", ",", ":", "ndim", ",", "2", "]", ")", "\n", "\n", "", "return", "anchor", ",", "positive", ",", "negative", "\n", "", "else", ":", "\n", "            ", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "start", ",", "end", ",", "start_loc_prop", ",", "end_loc_prop", ",", "start_conf_prop", ",", "end_conf_prop", ",", "act", ",", "prop_act", "=", "self", ".", "coarse_pyramid_detection", "(", "feat_dict", ")", "\n", "out_dict", "=", "{", "\n", "'loc'", ":", "loc", ",", "\n", "'conf'", ":", "conf", ",", "\n", "'priors'", ":", "priors", ",", "\n", "'prop_loc'", ":", "prop_loc", ",", "\n", "'prop_conf'", ":", "prop_conf", ",", "\n", "'center'", ":", "center", ",", "\n", "'start'", ":", "start", ",", "\n", "'end'", ":", "end", ",", "\n", "'start_loc_prop'", ":", "start_loc_prop", ",", "\n", "'end_loc_prop'", ":", "end_loc_prop", ",", "\n", "'start_conf_prop'", ":", "start_conf_prop", ",", "\n", "'end_conf_prop'", ":", "end_conf_prop", ",", "\n", "'act'", ":", "act", ",", "\n", "'prop_act'", ":", "prop_act", "\n", "}", "\n", "if", "self", ".", "use_edl", ":", "\n", "                ", "unct", "=", "self", ".", "out_layer", ".", "compute_uncertainty", "(", "conf", ")", "\n", "prop_unct", "=", "self", ".", "out_layer", ".", "compute_uncertainty", "(", "prop_conf", ")", "\n", "out_dict", ".", "update", "(", "{", "'unct'", ":", "unct", ",", "'prop_unct'", ":", "prop_unct", "}", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.DirichletLayer.__init__": [[505, 509], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "evidence", "=", "'exp'", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "DirichletLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "evidence", "=", "evidence", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.DirichletLayer.evidence_func": [[510, 517], ["torch.relu", "torch.relu", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.softplus", "torch.softplus", "torch.softplus", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "evidence_func", "(", "self", ",", "logit", ")", ":", "\n", "        ", "if", "self", ".", "evidence", "==", "'relu'", ":", "\n", "            ", "return", "F", ".", "relu", "(", "logit", ")", "\n", "", "if", "self", ".", "evidence", "==", "'exp'", ":", "\n", "            ", "return", "torch", ".", "exp", "(", "torch", ".", "clamp", "(", "logit", ",", "-", "10", ",", "10", ")", ")", "\n", "", "if", "self", ".", "evidence", "==", "'softplus'", ":", "\n", "            ", "return", "F", ".", "softplus", "(", "logit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.DirichletLayer.compute_uncertainty": [[518, 523], ["logit.size", "BDNet.DirichletLayer.evidence_func", "alpha.sum"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], ["", "", "def", "compute_uncertainty", "(", "self", ",", "logit", ")", ":", "\n", "        ", "num_classes", "=", "logit", ".", "size", "(", "-", "1", ")", "\n", "alpha", "=", "self", ".", "evidence_func", "(", "logit", ")", "+", "1", "# alpha = e + 1", "\n", "uncertainty", "=", "num_classes", "/", "alpha", ".", "sum", "(", "-", "1", ")", "# u = K / S", "\n", "return", "uncertainty", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.BDNet.DirichletLayer.forward": [[524, 528], ["BDNet.DirichletLayer.evidence_func", "alpha.sum"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], ["", "def", "forward", "(", "self", ",", "logit", ")", ":", "\n", "        ", "alpha", "=", "self", ".", "evidence_func", "(", "logit", ")", "+", "1", "\n", "conf", "=", "alpha", "/", "alpha", ".", "sum", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "return", "conf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.print_training_info": [[39, 52], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["def", "print_training_info", "(", ")", ":", "\n", "    ", "print", "(", "'batch size: '", ",", "batch_size", ")", "\n", "print", "(", "'learning rate: '", ",", "learning_rate", ")", "\n", "print", "(", "'weight decay: '", ",", "weight_decay", ")", "\n", "print", "(", "'max epoch: '", ",", "max_epoch", ")", "\n", "print", "(", "'checkpoint path: '", ",", "checkpoint_path", ")", "\n", "print", "(", "'loc weight: '", ",", "config", "[", "'training'", "]", "[", "'lw'", "]", ")", "\n", "print", "(", "'cls weight: '", ",", "config", "[", "'training'", "]", "[", "'cw'", "]", ")", "\n", "print", "(", "'ctr weight: '", ",", "config", "[", "'training'", "]", "[", "'ctw'", "]", ")", "\n", "print", "(", "'iou weight: '", ",", "config", "[", "'training'", "]", "[", "'piou'", "]", ")", "\n", "print", "(", "'ssl weight: '", ",", "config", "[", "'training'", "]", "[", "'ssl'", "]", ")", "\n", "print", "(", "'piou:'", ",", "config", "[", "'training'", "]", "[", "'piou'", "]", ")", "\n", "print", "(", "'resume: '", ",", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.set_seed": [[54, 62], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.worker_init_fn": [[67, 69], ["train.set_seed"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_seed"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "set_seed", "(", "GLOBAL_SEED", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.get_rng_states": [[71, 79], ["states.append", "states.append", "states.append", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "random.getstate", "numpy.random.get_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "states.append", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state"], "function", ["None"], ["", "def", "get_rng_states", "(", ")", ":", "\n", "    ", "states", "=", "[", "]", "\n", "states", ".", "append", "(", "random", ".", "getstate", "(", ")", ")", "\n", "states", ".", "append", "(", "np", ".", "random", ".", "get_state", "(", ")", ")", "\n", "states", ".", "append", "(", "torch", ".", "get_rng_state", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "states", ".", "append", "(", "torch", ".", "cuda", ".", "get_rng_state", "(", ")", ")", "\n", "", "return", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.set_rng_state": [[81, 87], ["random.setstate", "numpy.random.set_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state"], ["", "def", "set_rng_state", "(", "states", ")", ":", "\n", "    ", "random", ".", "setstate", "(", "states", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "set_state", "(", "states", "[", "1", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "states", "[", "2", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_rng_state", "(", "states", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.update_the_latest": [[89, 96], ["os.path.exists", "os.path.lexists", "os.symlink", "os.remove"], "function", ["None"], ["", "", "def", "update_the_latest", "(", "src_file", ",", "dest_file", ")", ":", "\n", "# source file must exist", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "src_file", ")", ",", "\"src file does not exist!\"", "\n", "# destinate file should be removed first if exists", "\n", "if", "os", ".", "path", ".", "lexists", "(", "dest_file", ")", ":", "\n", "        ", "os", ".", "remove", "(", "dest_file", ")", "\n", "", "os", ".", "symlink", "(", "src_file", ",", "dest_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.save_model": [[98, 111], ["os.path.join", "torch.save", "torch.save", "torch.save", "train.update_the_latest", "os.path.join", "torch.save", "torch.save", "torch.save", "train.update_the_latest", "model.module.state_dict", "os.path.join", "os.path.join", "optimizer.state_dict", "train.get_rng_states"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.update_the_latest", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.update_the_latest", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.get_rng_states"], ["", "def", "save_model", "(", "epoch", ",", "model", ",", "optimizer", ")", ":", "\n", "# save the model weights", "\n", "    ", "model_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint-{}.ckpt'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "model_file", ")", "\n", "update_the_latest", "(", "model_file", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint-latest.ckpt'", ")", ")", "\n", "# save the training status", "\n", "state_file", "=", "os", ".", "path", ".", "join", "(", "train_state_path", ",", "'checkpoint_{}.ckpt'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'state'", ":", "get_rng_states", "(", ")", "}", ",", "\n", "state_file", ")", "\n", "update_the_latest", "(", "state_file", ",", "\n", "os", ".", "path", ".", "join", "(", "train_state_path", ",", "'checkpoint_latest.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.resume_training": [[113, 124], ["os.path.join", "model.module.load_state_dict", "os.path.join", "torch.load", "torch.load", "torch.load", "optimizer.load_state_dict", "train.set_rng_state", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state"], ["", "def", "resume_training", "(", "resume", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "start_epoch", "=", "1", "\n", "if", "resume", ">", "0", ":", "\n", "        ", "start_epoch", "+=", "resume", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint-{}.ckpt'", ".", "format", "(", "resume", ")", ")", "\n", "model", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "train_path", "=", "os", ".", "path", ".", "join", "(", "train_state_path", ",", "'checkpoint_{}.ckpt'", ".", "format", "(", "resume", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "train_path", ")", "\n", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "'optimizer'", "]", ")", "\n", "set_rng_state", "(", "state_dict", "[", "'state'", "]", ")", "\n", "", "return", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.get_grad_norm": [[126, 134], ["model.parameters", "p.grad.detach().data.norm", "p.grad.detach"], "function", ["None"], ["", "def", "get_grad_norm", "(", "model", ")", ":", "\n", "    ", "total_norm", "=", "0.0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", "and", "p", ".", "requires_grad", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "detach", "(", ")", ".", "data", ".", "norm", "(", "2", ")", "\n", "total_norm", "+=", "param_norm", "**", "2", "\n", "", "", "total_norm", "=", "total_norm", "**", "0.5", "\n", "return", "total_norm", "\n", "", "def", "calc_bce_loss", "(", "start", ",", "end", ",", "scores", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.calc_bce_loss": [[134, 144], ["torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.tanh().mean.view", "scores[].contiguous().view().cuda", "torch.tanh().mean.view", "scores[].contiguous().view().cuda", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "scores[].contiguous().view", "scores[].contiguous().view", "scores[].contiguous", "scores[].contiguous"], "function", ["None"], ["", "def", "calc_bce_loss", "(", "start", ",", "end", ",", "scores", ")", ":", "\n", "    ", "start", "=", "torch", ".", "tanh", "(", "start", ")", ".", "mean", "(", "-", "1", ")", "\n", "end", "=", "torch", ".", "tanh", "(", "end", ")", ".", "mean", "(", "-", "1", ")", "\n", "loss_start", "=", "F", ".", "binary_cross_entropy", "(", "start", ".", "view", "(", "-", "1", ")", ",", "\n", "scores", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cuda", "(", ")", ",", "\n", "reduction", "=", "'mean'", ")", "\n", "loss_end", "=", "F", ".", "binary_cross_entropy", "(", "end", ".", "view", "(", "-", "1", ")", ",", "\n", "scores", "[", ":", ",", "2", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cuda", "(", ")", ",", "\n", "reduction", "=", "'mean'", ")", "\n", "return", "loss_start", ",", "loss_end", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.forward_one_epoch": [[146, 188], ["clips.cuda.cuda", "t.cuda", "range", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "CPD_Loss", "train.calc_bce_loss", "torch.__version__.split", "torch.__version__.split", "torch.__version__.split", "train.calc_bce_loss", "train.calc_bce_loss", "net", "net", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "loss_.append", "torch.interpolate", "torch.interpolate", "torch.stack", "torch.stack", "torch.stack", "int", "int", "torch.TripletMarginLoss"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.calc_bce_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.calc_bce_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.calc_bce_loss"], ["", "def", "forward_one_epoch", "(", "net", ",", "clips", ",", "targets", ",", "scores", "=", "None", ",", "training", "=", "True", ",", "ssl", "=", "True", ")", ":", "\n", "    ", "clips", "=", "clips", ".", "cuda", "(", ")", "\n", "targets", "=", "[", "t", ".", "cuda", "(", ")", "for", "t", "in", "targets", "]", "\n", "\n", "if", "training", ":", "\n", "        ", "if", "ssl", ":", "\n", "            ", "output_dict", "=", "net", "(", "clips", ",", "proposals", "=", "targets", ",", "ssl", "=", "ssl", ")", "\n", "", "else", ":", "\n", "            ", "output_dict", "=", "net", "(", "clips", ",", "ssl", "=", "False", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_dict", "=", "net", "(", "clips", ")", "\n", "\n", "", "", "if", "ssl", ":", "\n", "        ", "anchor", ",", "positive", ",", "negative", "=", "output_dict", "\n", "loss_", "=", "[", "]", "\n", "weights", "=", "[", "1", ",", "0.1", ",", "0.1", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "loss_", ".", "append", "(", "nn", ".", "TripletMarginLoss", "(", ")", "(", "anchor", "[", "i", "]", ",", "positive", "[", "i", "]", ",", "negative", "[", "i", "]", ")", "*", "weights", "[", "i", "]", ")", "\n", "", "trip_loss", "=", "torch", ".", "stack", "(", "loss_", ")", ".", "sum", "(", "0", ")", "\n", "return", "trip_loss", "\n", "", "else", ":", "\n", "        ", "loss_l", ",", "loss_c", ",", "loss_prop_l", ",", "loss_prop_c", ",", "loss_ct", ",", "loss_act", ",", "loss_prop_act", "=", "CPD_Loss", "(", "\n", "[", "output_dict", "[", "'loc'", "]", ",", "output_dict", "[", "'conf'", "]", ",", "\n", "output_dict", "[", "'prop_loc'", "]", ",", "output_dict", "[", "'prop_conf'", "]", ",", "\n", "output_dict", "[", "'center'", "]", ",", "output_dict", "[", "'priors'", "]", ",", "output_dict", "[", "'act'", "]", ",", "output_dict", "[", "'prop_act'", "]", "]", ",", "\n", "targets", ")", "\n", "loss_start", ",", "loss_end", "=", "calc_bce_loss", "(", "output_dict", "[", "'start'", "]", ",", "output_dict", "[", "'end'", "]", ",", "scores", ")", "\n", "versions", "=", "torch", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "if", "int", "(", "versions", "[", "0", "]", ")", "==", "1", "and", "int", "(", "versions", "[", "1", "]", ")", ">=", "6", ":", "# version later than torch 1.6.0", "\n", "            ", "scores_", "=", "F", ".", "interpolate", "(", "scores", ",", "scale_factor", "=", "1.0", "/", "8", ",", "recompute_scale_factor", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "scores_", "=", "F", ".", "interpolate", "(", "scores", ",", "scale_factor", "=", "1.0", "/", "8", ")", "\n", "", "loss_start_loc_prop", ",", "loss_end_loc_prop", "=", "calc_bce_loss", "(", "output_dict", "[", "'start_loc_prop'", "]", ",", "\n", "output_dict", "[", "'end_loc_prop'", "]", ",", "\n", "scores_", ")", "\n", "loss_start_conf_prop", ",", "loss_end_conf_prop", "=", "calc_bce_loss", "(", "output_dict", "[", "'start_conf_prop'", "]", ",", "\n", "output_dict", "[", "'end_conf_prop'", "]", ",", "\n", "scores_", ")", "\n", "loss_start", "=", "loss_start", "+", "0.1", "*", "(", "loss_start_loc_prop", "+", "loss_start_conf_prop", ")", "\n", "loss_end", "=", "loss_end", "+", "0.1", "*", "(", "loss_end_loc_prop", "+", "loss_end_conf_prop", ")", "\n", "return", "loss_l", ",", "loss_c", ",", "loss_prop_l", ",", "loss_prop_c", ",", "loss_ct", ",", "loss_start", ",", "loss_end", ",", "loss_act", ",", "loss_prop_act", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.train.run_one_epoch": [[190, 288], ["print", "net.train", "net.eval", "tqdm.tqdm", "enumerate", "train.save_model", "train.forward_one_epoch", "loss_l.cpu().detach().numpy", "loss_c.cpu().detach().numpy", "loss_prop_l.cpu().detach().numpy", "loss_prop_c.cpu().detach().numpy", "loss_ct.cpu().detach().numpy", "loss_start.cpu().detach().numpy", "loss_end.cpu().detach().numpy", "cost.cpu().detach().numpy", "pbar.set_postfix", "train.forward_one_epoch", "forward_one_epoch.cpu().detach().numpy", "optimizer.zero_grad", "cost.backward", "train.get_grad_norm", "optimizer.step", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "loss_l.cpu().detach", "loss_c.cpu().detach", "loss_prop_l.cpu().detach", "loss_prop_c.cpu().detach", "loss_ct.cpu().detach", "loss_start.cpu().detach", "loss_end.cpu().detach", "cost.cpu().detach", "forward_one_epoch.cpu().detach", "loss_l.mean().item", "loss_c.mean().item", "loss_prop_l.mean().item", "loss_prop_c.mean().item", "loss_ct.mean().item", "loss_start.mean().item", "loss_end.mean().item", "cost.mean().item", "float", "get_grad_norm.mean().item", "forward_one_epoch.mean().item", "loss_act.mean().item", "loss_act_prop.mean().item", "loss_l.cpu", "loss_c.cpu", "loss_prop_l.cpu", "loss_prop_c.cpu", "loss_ct.cpu", "loss_start.cpu", "loss_end.cpu", "cost.cpu", "cost.cpu().detach().numpy", "forward_one_epoch.cpu", "loss_l.mean", "loss_c.mean", "loss_prop_l.mean", "loss_prop_c.mean", "loss_ct.mean", "loss_start.mean", "loss_end.mean", "cost.mean", "get_grad_norm.mean", "forward_one_epoch.mean", "loss_act.mean", "loss_act_prop.mean", "cost.cpu().detach", "cost.cpu"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.train", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.save_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.forward_one_epoch", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.forward_one_epoch", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.prop_pooling.boundary_pooling_op.BoundaryMaxPoolingFunction.backward", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.get_grad_norm"], ["", "", "def", "run_one_epoch", "(", "epoch", ",", "net", ",", "optimizer", ",", "data_loader", ",", "epoch_step_num", ",", "training", "=", "True", ")", ":", "\n", "    ", "if", "training", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "\n", "", "loss_loc_val", "=", "0", "\n", "loss_conf_val", "=", "0", "\n", "loss_prop_l_val", "=", "0", "\n", "loss_prop_c_val", "=", "0", "\n", "loss_ct_val", "=", "0", "\n", "loss_start_val", "=", "0", "\n", "loss_end_val", "=", "0", "\n", "loss_trip_val", "=", "0", "\n", "loss_contras_val", "=", "0", "\n", "cost_val", "=", "0", "\n", "with", "tqdm", ".", "tqdm", "(", "data_loader", ",", "total", "=", "epoch_step_num", ",", "ncols", "=", "0", ")", "as", "pbar", ":", "\n", "        ", "for", "n_iter", ",", "(", "clips", ",", "targets", ",", "scores", ",", "ssl_clips", ",", "ssl_targets", ",", "flags", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "loss_l", ",", "loss_c", ",", "loss_prop_l", ",", "loss_prop_c", ",", "loss_ct", ",", "loss_start", ",", "loss_end", ",", "loss_act", ",", "loss_act_prop", "=", "forward_one_epoch", "(", "\n", "net", ",", "clips", ",", "targets", ",", "scores", ",", "training", "=", "training", ",", "ssl", "=", "False", ")", "\n", "\n", "loss_l", "=", "loss_l", "*", "config", "[", "'training'", "]", "[", "'lw'", "]", "\n", "loss_c", "=", "loss_c", "*", "config", "[", "'training'", "]", "[", "'cw'", "]", "\n", "loss_prop_l", "=", "loss_prop_l", "*", "config", "[", "'training'", "]", "[", "'lw'", "]", "\n", "loss_prop_c", "=", "loss_prop_c", "*", "config", "[", "'training'", "]", "[", "'cw'", "]", "\n", "loss_ct", "=", "loss_ct", "*", "config", "[", "'training'", "]", "[", "'ctw'", "]", "\n", "cost", "=", "loss_l", "+", "loss_c", "+", "loss_prop_l", "+", "loss_prop_c", "+", "loss_ct", "+", "loss_start", "+", "loss_end", "\n", "if", "os_head", ":", "\n", "                ", "loss_act", "=", "loss_act", "*", "config", "[", "'training'", "]", "[", "'actw'", "]", "\n", "loss_act_prop", "=", "loss_act_prop", "*", "config", "[", "'training'", "]", "[", "'actw'", "]", "\n", "cost", "=", "cost", "+", "loss_act", "+", "loss_act_prop", "\n", "\n", "", "if", "flags", "[", "0", "]", ":", "\n", "                ", "loss_trip", "=", "forward_one_epoch", "(", "net", ",", "ssl_clips", ",", "ssl_targets", ",", "training", "=", "training", ",", "\n", "ssl", "=", "True", ")", "\n", "loss_trip", "*=", "config", "[", "'training'", "]", "[", "'ssl'", "]", "\n", "cost", "=", "cost", "+", "loss_trip", "\n", "loss_trip_val", "+=", "loss_trip", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "cur_iter", "=", "i", "*", "epoch_step_num", "+", "n_iter", "\n", "if", "training", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "cost", ".", "backward", "(", ")", "\n", "grad_norm", "=", "get_grad_norm", "(", "net", ")", "\n", "if", "config", "[", "'testing'", "]", "[", "'split'", "]", "==", "0", ":", "\n", "                    ", "tb_writer", ".", "add_scalars", "(", "f'stats/grad_norm'", ",", "{", "'grad_norm'", ":", "grad_norm", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# record the loss in tensorboards", "\n", "", "if", "config", "[", "'testing'", "]", "[", "'split'", "]", "==", "0", ":", "\n", "                ", "tb_writer", ".", "add_scalars", "(", "f'train_loss/coarse/loss_loc'", ",", "{", "'loss_loc'", ":", "loss_l", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/coarse/loss_cls'", ",", "{", "'loss_cls'", ":", "loss_c", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/refined/loss_loc'", ",", "{", "'loss_loc'", ":", "loss_prop_l", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/refined/loss_cls'", ",", "{", "'loss_cls'", ":", "loss_prop_c", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_quality'", ",", "{", "'loss_q'", ":", "loss_ct", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_start'", ",", "{", "'loss_start'", ":", "loss_start", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_end'", ",", "{", "'loss_end'", ":", "loss_end", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "if", "flags", "[", "0", "]", ":", "\n", "                    ", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_trip'", ",", "{", "'loss_trip'", ":", "loss_trip", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "", "tb_writer", ".", "add_scalars", "(", "f'train_loss/loss_total'", ",", "{", "'loss_total'", ":", "cost", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "if", "os_head", ":", "\n", "                    ", "tb_writer", ".", "add_scalars", "(", "f'train_loss/coarse/loss_act'", ",", "{", "'loss_act'", ":", "loss_act", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/refined/loss_act_prop'", ",", "{", "'loss_act'", ":", "loss_act_prop", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "\n", "", "", "loss_loc_val", "+=", "loss_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_conf_val", "+=", "loss_c", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_prop_l_val", "+=", "loss_prop_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_prop_c_val", "+=", "loss_prop_c", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_ct_val", "+=", "loss_ct", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_start_val", "+=", "loss_start", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_end_val", "+=", "loss_end", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "cost_val", "+=", "cost", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pbar", ".", "set_postfix", "(", "loss", "=", "'{:.5f}'", ".", "format", "(", "float", "(", "cost", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "\n", "", "", "loss_loc_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_conf_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_prop_l_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_prop_c_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_ct_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_start_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_end_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_trip_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "cost_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "\n", "if", "training", "and", "epoch", ">", "10", ":", "\n", "        ", "prefix", "=", "'Train'", "\n", "save_model", "(", "epoch", ",", "net", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "        ", "prefix", "=", "'Val'", "\n", "\n", "", "plog", "=", "'Epoch-{} {} Loss: Total - {:.5f}, loc - {:.5f}, conf - {:.5f}, prop_loc - {:.5f}, '", "'prop_conf - {:.5f}, IoU - {:.5f}, start - {:.5f}, end - {:.5f}'", ".", "format", "(", "\n", "i", ",", "prefix", ",", "cost_val", ",", "loss_loc_val", ",", "loss_conf_val", ",", "loss_prop_l_val", ",", "loss_prop_c_val", ",", "\n", "loss_ct_val", ",", "loss_start_val", ",", "loss_end_val", "\n", ")", "\n", "plog", "=", "plog", "+", "', Triplet - {:.5f}'", ".", "format", "(", "loss_trip_val", ")", "\n", "print", "(", "plog", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.get_basic_config": [[18, 51], ["AFSD.common.anet_dataset.get_video_info", "os.path.exists", "os.makedirs", "AFSD.common.config.config"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info"], ["def", "get_basic_config", "(", "config", ",", "dataset", "=", "'testing'", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "2", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", "\n", "cfg", ".", "input_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", "\n", "cfg", ".", "checkpoint_path", "=", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "cfg", ".", "evidence", "=", "config", "[", "'model'", "]", "[", "'evidence'", "]", "\n", "", "cfg", ".", "scoring", "=", "config", "[", "'testing'", "]", "[", "'ood_scoring'", "]", "\n", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "-", "1", "\n", "\n", "", "cfg", ".", "json_name", "=", "config", "[", "'testing'", "]", "[", "'output_json'", "]", "\n", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "config", "[", "'testing'", "]", "[", "'fusion'", "]", "\n", "cfg", ".", "ngpu", "=", "config", "[", "'ngpu'", "]", "\n", "cfg", ".", "thread_num", "=", "config", "[", "'ngpu'", "]", "\n", "\n", "subset", "=", "'validation'", "if", "dataset", "==", "'testing'", "else", "'training'", "\n", "cfg", ".", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "dataset", "]", "[", "'video_info_path'", "]", ",", "subset", "=", "subset", ")", "\n", "cfg", ".", "mp4_data_path", "=", "config", "[", "'dataset'", "]", "[", "dataset", "]", "[", "'video_mp4_path'", "]", "# train_val_npy_112/", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.get_path": [[53, 61], ["os.path.lexists", "os.path.join", "os.path.islink", "os.path.realpath", "fullpath.split", "os.path.dirname"], "function", ["None"], ["", "def", "get_path", "(", "input_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "input_path", ")", ":", "\n", "        ", "fullpath", "=", "os", ".", "path", ".", "realpath", "(", "input_path", ")", "if", "os", ".", "path", ".", "islink", "(", "input_path", ")", "else", "input_path", "\n", "real_name", "=", "fullpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "real_full_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "input_path", ")", ",", "real_name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "", "return", "real_full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.prepare_data": [[64, 75], ["numpy.load", "numpy.transpose", "center_crop", "torch.from_numpy", "torch.from_numpy", "os.path.join", "torch.from_numpy.copy"], "function", ["None"], ["", "def", "prepare_data", "(", "video_name", ",", "center_crop", ",", "cfg", ")", ":", "\n", "    ", "sample_fps", "=", "cfg", ".", "video_infos", "[", "video_name", "]", "[", "'fps'", "]", "\n", "duration", "=", "cfg", ".", "video_infos", "[", "video_name", "]", "[", "'duration'", "]", "\n", "offsetlist", "=", "[", "0", "]", "\n", "# get video data", "\n", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "mp4_data_path", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "frames", "=", "data", "\n", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data", "=", "center_crop", "(", "frames", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ".", "copy", "(", ")", ")", "\n", "return", "data", ",", "offsetlist", ",", "sample_fps", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.prepare_clip": [[77, 87], ["torch.cat.float", "torch.cat.unsqueeze().cuda", "torch.cat.size", "torch.cat", "torch.cat", "torch.ones().float", "torch.ones().float", "torch.cat.unsqueeze", "torch.ones", "torch.ones", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "prepare_clip", "(", "data", ",", "offset", ",", "clip_length", ",", "crop_size", ")", ":", "\n", "    ", "clip", "=", "data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "clip", "=", "clip", ".", "float", "(", ")", "\n", "if", "clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "        ", "tmp", "=", "torch", ".", "ones", "(", "\n", "[", "clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "clip", ".", "size", "(", "1", ")", ",", "crop_size", ",", "crop_size", "]", ")", ".", "float", "(", ")", "*", "127.5", "\n", "clip", "=", "torch", ".", "cat", "(", "[", "clip", ",", "tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "clip", "=", "(", "clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.decode_prediction": [[89, 123], ["torch.Softmax", "torch.cat", "torch.cat", "torch.cat.clamp_", "score_func", "score_func", "center.sigmoid.sigmoid", "conf.view().transpose.view().transpose", "conf.view().transpose.clone", "[].squeeze", "[].squeeze", "actionness.unsqueeze", "conf.view().transpose.view", "act.sigmoid", "prop_act.sigmoid"], "function", ["None"], ["", "def", "decode_prediction", "(", "output_dict", ",", "cfg", ",", "score_func", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ")", ":", "\n", "# batchsize should be 1!", "\n", "    ", "loc", ",", "conf", ",", "priors", "=", "output_dict", "[", "'loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'conf'", "]", "[", "0", "]", ",", "output_dict", "[", "'priors'", "]", "\n", "prop_loc", ",", "prop_conf", "=", "output_dict", "[", "'prop_loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'prop_conf'", "]", "[", "0", "]", "\n", "center", "=", "output_dict", "[", "'center'", "]", "[", "0", "]", "\n", "# conditional outputs", "\n", "act", "=", "output_dict", "[", "'act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "None", "\n", "prop_act", "=", "output_dict", "[", "'prop_act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "None", "\n", "unct", "=", "output_dict", "[", "'unct'", "]", "[", "0", "]", "if", "cfg", ".", "use_edl", "else", "None", "\n", "prop_unct", "=", "output_dict", "[", "'prop_unct'", "]", "[", "0", "]", "if", "cfg", ".", "use_edl", "else", "None", "\n", "\n", "# decode the locations of segments", "\n", "pre_loc_w", "=", "loc", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", "1", ":", "]", "\n", "loc", "=", "0.5", "*", "pre_loc_w", "*", "prop_loc", "+", "loc", "\n", "decoded_segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "-", "loc", "[", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "+", "loc", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "decoded_segments", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "cfg", ".", "clip_length", ")", "\n", "\n", "# compute uncertainty and actionness", "\n", "uncertainty", "=", "(", "unct", "+", "prop_unct", ")", "/", "2.0", "if", "cfg", ".", "use_edl", "else", "None", "\n", "actionness", "=", "(", "act", ".", "sigmoid", "(", ")", "+", "prop_act", ".", "sigmoid", "(", ")", ")", "/", "2.0", "if", "cfg", ".", "os_head", "else", "None", "\n", "\n", "# compute classification confidence", "\n", "conf", "=", "score_func", "(", "conf", ")", "\n", "prop_conf", "=", "score_func", "(", "prop_conf", ")", "\n", "center", "=", "center", ".", "sigmoid", "(", ")", "\n", "\n", "conf", "=", "(", "conf", "+", "prop_conf", ")", "/", "2.0", "\n", "conf", "=", "conf", "*", "center", "*", "actionness", ".", "unsqueeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "conf", "*", "center", "\n", "conf", "=", "conf", ".", "view", "(", "-", "1", ",", "cfg", ".", "num_classes", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "conf_scores", "=", "conf", ".", "clone", "(", ")", "\n", "\n", "return", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.filtering": [[125, 143], ["c_mask.unsqueeze().expand_as", "decoded_segments[].view", "torch.cat", "torch.cat", "scores.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "c_mask.unsqueeze", "scores.unsqueeze", "uncertain_scores.unsqueeze", "act_scores.unsqueeze"], "function", ["None"], ["", "def", "filtering", "(", "decoded_segments", ",", "conf_score_cls", ",", "uncertainty", ",", "actionness", ",", "offset", ",", "sample_fps", ",", "cfg", ",", "conf_thresh", "=", "1e-9", ")", ":", "\n", "    ", "c_mask", "=", "conf_score_cls", ">", "conf_thresh", "\n", "scores", "=", "conf_score_cls", "[", "c_mask", "]", "\n", "if", "scores", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "l_mask", "=", "c_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "decoded_segments", ")", "\n", "segments", "=", "decoded_segments", "[", "l_mask", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "segments", "=", "(", "segments", "+", "offset", ")", "/", "sample_fps", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 3)", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "# masking uncertainties", "\n", "        ", "uncertain_scores", "=", "uncertainty", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "uncertain_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4)", "\n", "", "if", "cfg", ".", "os_head", ":", "\n", "# masking actionness", "\n", "        ", "act_scores", "=", "actionness", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "act_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4) or (N, 5)", "\n", "", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.get_video_prediction": [[145, 182], ["torch.zeros", "torch.zeros", "torch.zeros.contiguous().view", "flt.view.view", "torch.cat", "torch.cat", "AFSD.common.segment_utils.softnms_v2", "flt[].contiguous", "tmp[].view", "tmp.detach().cpu().numpy.detach().cpu().numpy", "range", "len", "torch.zeros.contiguous", "tmp.detach().cpu().numpy.size", "max", "min", "proposal_list.append", "tmp.detach().cpu().numpy.detach().cpu", "float", "float", "float", "float", "float", "tmp.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2"], ["", "def", "get_video_prediction", "(", "output", ",", "pred_class", ",", "pred_conf", ",", "duration", ",", "cfg", ",", "cls_rng", "=", "None", ")", ":", "\n", "    ", "res_dim", "=", "3", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "cfg", ".", "use_edl", "else", "res_dim", "# 3 or 4", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "cfg", ".", "os_head", "else", "res_dim", "# 3 or 4 or 5", "\n", "res", "=", "torch", ".", "zeros", "(", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "res_dim", ")", "\n", "# NMS for each class", "\n", "for", "cl", "in", "cls_rng", ":", "\n", "        ", "if", "len", "(", "output", "[", "cl", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "torch", ".", "cat", "(", "output", "[", "cl", "]", ",", "0", ")", "\n", "tmp", ",", "count", "=", "softnms_v2", "(", "tmp", ",", "sigma", "=", "cfg", ".", "nms_sigma", ",", "top_k", "=", "cfg", ".", "top_k", ",", "score_threshold", "=", "1e-9", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "res", "[", "cl", ",", ":", "count", "]", "=", "tmp", "\n", "\n", "", "flt", "=", "res", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "flt", "=", "flt", ".", "view", "(", "cfg", ".", "num_classes", ",", "-", "1", ",", "res_dim", ")", "\n", "proposal_list", "=", "[", "]", "\n", "for", "cl", "in", "cls_rng", ":", "\n", "        ", "cl_idx", "=", "cl", "+", "1", "if", "cfg", ".", "os_head", "else", "cl", "\n", "class_name", "=", "pred_class", "# assume the current video contains only one class", "\n", "tmp", "=", "flt", "[", "cl", "]", ".", "contiguous", "(", ")", "\n", "tmp", "=", "tmp", "[", "(", "tmp", "[", ":", ",", "2", "]", ">", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp", ")", "]", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "if", "tmp", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "tmp", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tmp_proposal", "=", "{", "}", "\n", "start_time", "=", "max", "(", "0", ",", "float", "(", "tmp", "[", "i", ",", "0", "]", ")", ")", "\n", "end_time", "=", "min", "(", "duration", ",", "float", "(", "tmp", "[", "i", ",", "1", "]", ")", ")", "\n", "if", "end_time", "<=", "start_time", ":", "\n", "                ", "continue", "\n", "", "tmp_proposal", "[", "'label'", "]", "=", "class_name", "\n", "tmp_proposal", "[", "'score'", "]", "=", "float", "(", "tmp", "[", "i", ",", "2", "]", ")", "*", "pred_conf", "\n", "tmp_proposal", "[", "'segment'", "]", "=", "[", "start_time", ",", "end_time", "]", "\n", "tmp_proposal", "[", "'uncertainty'", "]", "=", "float", "(", "tmp", "[", "i", ",", "3", "]", ")", "if", "cfg", ".", "use_edl", "else", "0.0", "\n", "tmp_proposal", "[", "'actionness'", "]", "=", "float", "(", "tmp", "[", "i", ",", "4", "]", ")", "if", "cfg", ".", "os_head", "else", "0.0", "\n", "proposal_list", ".", "append", "(", "tmp_proposal", ")", "\n", "", "", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.inference_thread": [[184, 242], ["torch.cuda.set_device", "torch.cuda.set_device", "AFSD.anet.BDNet.BDNet", "AFSD.anet.BDNet.BDNet.load_state_dict", "AFSD.anet.BDNet.BDNet.eval().cuda", "AFSD.common.videotransforms.CenterCrop", "torch.load", "torch.load", "AFSD.anet.BDNet.DirichletLayer", "torch.Softmax", "range", "range", "tqdm.tqdm", "max", "test_binary.prepare_data", "test_binary.get_video_prediction", "tqdm.tqdm.close", "test_binary.get_path", "AFSD.anet.BDNet.BDNet.eval", "test_binary.prepare_clip", "test_binary.decode_prediction", "tqdm.tqdm.update", "len", "numpy.argmax", "range", "torch.no_grad", "torch.no_grad", "AFSD.anet.BDNet.BDNet.", "test_binary.filtering", "output[].append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.get_video_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.decode_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "inference_thread", "(", "lock", ",", "pid", ",", "video_list", ",", "cls_data", ",", "cfg", ",", "result_dict", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "pid", ")", "\n", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "get_path", "(", "cfg", ".", "checkpoint_path", ")", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "\n", "cls_scores", "=", "cls_data", "[", "\"results\"", "]", "# (N, 200)", "\n", "cls_actions", "=", "cls_data", "[", "\"class\"", "]", "# idx_to_class (200)", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "\n", "text", "=", "'processor %d'", "%", "pid", "\n", "with", "lock", ":", "\n", "        ", "progress", "=", "tqdm", ".", "tqdm", "(", "\n", "total", "=", "len", "(", "video_list", ")", ",", "\n", "position", "=", "pid", ",", "\n", "desc", "=", "text", ",", "\n", "ncols", "=", "0", "\n", ")", "\n", "", "for", "video_name", "in", "video_list", ":", "\n", "# get the pre-loaded multi-class classification results", "\n", "        ", "scores", "=", "cls_scores", "[", "video_name", "[", "2", ":", "]", "]", "\n", "pred_class", "=", "cls_actions", "[", "np", ".", "argmax", "(", "scores", ")", "]", "\n", "pred_conf", "=", "max", "(", "scores", ")", "\n", "# get video information", "\n", "data", ",", "offsetlist", ",", "sample_fps", ",", "duration", "=", "prepare_data", "(", "video_name", ",", "center_crop", ",", "cfg", ")", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "crop_size", ")", "\n", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "\n", "# decode results", "\n", "", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_prediction", "(", "output_dict", ",", "cfg", ",", "out_layer", ")", "\n", "# filtering", "\n", "for", "cl", "in", "class_range", ":", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "offset", ",", "sample_fps", ",", "cfg", ")", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "# finish offset loop", "\n", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "[", "2", ":", "]", "]", "=", "get_video_prediction", "(", "output", ",", "pred_class", ",", "pred_conf", ",", "duration", ",", "cfg", ",", "cls_rng", "=", "class_range", ")", "\n", "with", "lock", ":", "\n", "            ", "progress", ".", "update", "(", "1", ")", "\n", "# finish video loop", "\n", "\n", "", "", "with", "lock", ":", "\n", "        ", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.testing": [[244, 274], ["threading.Lock", "AFSD.common.anet_dataset.load_json", "list", "list", "len", "multiprocessing.Manager().dict", "range", "cfg.video_infos.keys", "multiprocessing.Process", "mp.Process.start", "processes.append", "mp.Process.join", "dict", "open", "json.dump", "list", "set", "set", "multiprocessing.Manager", "test_cls_data[].keys"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.load_json"], ["", "", "def", "testing", "(", "cfg", ",", "output_file", ",", "thread_num", "=", "1", ")", ":", "\n", "    ", "processes", "=", "[", "]", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "test_cls_data", "=", "load_json", "(", "'datasets/activitynet/result_tsn_val.json'", ")", "\n", "videos_in_clsdata", "=", "[", "'v_'", "+", "name", "for", "name", "in", "list", "(", "test_cls_data", "[", "'results'", "]", ".", "keys", "(", ")", ")", "]", "\n", "videos_in_annodata", "=", "list", "(", "cfg", ".", "video_infos", ".", "keys", "(", ")", ")", "\n", "video_list", "=", "list", "(", "set", "(", "videos_in_clsdata", ")", "&", "set", "(", "videos_in_annodata", ")", ")", "\n", "\n", "video_num", "=", "len", "(", "video_list", ")", "\n", "per_thread_video_num", "=", "video_num", "//", "thread_num", "\n", "result_dict", "=", "mp", ".", "Manager", "(", ")", ".", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "thread_num", ")", ":", "\n", "        ", "if", "i", "==", "thread_num", "-", "1", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "]", "\n", "", "else", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "(", "i", "+", "1", ")", "*", "per_thread_video_num", "]", "\n", "# inference_thread(lock, i, sub_video_list, test_cls_data, cfg)", "\n", "", "p", "=", "mp", ".", "Process", "(", "target", "=", "inference_thread", ",", "args", "=", "(", "lock", ",", "i", ",", "sub_video_list", ",", "test_cls_data", ",", "cfg", ",", "result_dict", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "# save results", "\n", "", "output_dict", "=", "{", "\"version\"", ":", "\"ActivityNet-v1.3\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test_binary.main": [[276, 281], ["test_binary.get_basic_config", "os.path.join", "test_binary.testing"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_basic_config", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.testing"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "cfg", "=", "get_basic_config", "(", "config", ",", "dataset", "=", "'testing'", ")", "\n", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output_path", ",", "cfg", ".", "json_name", ")", "\n", "testing", "(", "cfg", ",", "output_file", ",", "thread_num", "=", "cfg", ".", "thread_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.threshold.compute_threshold": [[13, 29], ["result_dict.items", "numpy.sort", "len", "int", "all_scores.append"], "function", ["None"], ["def", "compute_threshold", "(", "result_dict", ",", "scoring", "=", "'confidence'", ")", ":", "\n", "    ", "all_scores", "=", "[", "]", "\n", "for", "vid", ",", "proposal_list", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "prop", "in", "proposal_list", ":", "\n", "            ", "if", "scoring", "==", "'uncertainty'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "\n", "", "elif", "scoring", "==", "'confidence'", ":", "\n", "                ", "ood_score", "=", "prop", "[", "'score'", "]", "\n", "", "elif", "scoring", "==", "'uncertainty_actionness'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "*", "prop", "[", "'actionness'", "]", "\n", "", "all_scores", ".", "append", "(", "ood_score", ")", "\n", "", "", "score_sorted", "=", "np", ".", "sort", "(", "all_scores", ")", "# sort the confidence score in an increasing order", "\n", "N", "=", "len", "(", "all_scores", ")", "\n", "topK", "=", "N", "-", "int", "(", "N", "*", "0.95", ")", "\n", "threshold", "=", "score_sorted", "[", "topK", "-", "1", "]", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.threshold.thresholding": [[31, 64], ["threading.Lock", "AFSD.common.anet_dataset.load_json", "list", "list", "len", "multiprocessing.Manager().dict", "range", "threshold.compute_threshold", "cfg.video_infos.keys", "multiprocessing.Process", "mp.Process.start", "processes.append", "mp.Process.join", "dict", "open", "json.dump", "list", "set", "set", "multiprocessing.Manager", "train_cls_data[].keys"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.load_json", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.compute_threshold"], ["", "def", "thresholding", "(", "cfg", ",", "output_file", ",", "thread_num", "=", "1", ")", ":", "\n", "    ", "processes", "=", "[", "]", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "train_cls_data", "=", "load_json", "(", "'datasets/activitynet/result_tsn_train.json'", ")", "\n", "videos_in_clsdata", "=", "[", "'v_'", "+", "name", "for", "name", "in", "list", "(", "train_cls_data", "[", "'results'", "]", ".", "keys", "(", ")", ")", "]", "\n", "videos_in_annodata", "=", "list", "(", "cfg", ".", "video_infos", ".", "keys", "(", ")", ")", "\n", "video_list", "=", "list", "(", "set", "(", "videos_in_clsdata", ")", "&", "set", "(", "videos_in_annodata", ")", ")", "\n", "\n", "video_num", "=", "len", "(", "video_list", ")", "\n", "per_thread_video_num", "=", "video_num", "//", "thread_num", "\n", "result_dict", "=", "mp", ".", "Manager", "(", ")", ".", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "thread_num", ")", ":", "\n", "        ", "if", "i", "==", "thread_num", "-", "1", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "]", "\n", "", "else", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "(", "i", "+", "1", ")", "*", "per_thread_video_num", "]", "\n", "# inference_thread(lock, i, sub_video_list, train_cls_data, cfg)", "\n", "", "p", "=", "mp", ".", "Process", "(", "target", "=", "inference_thread", ",", "args", "=", "(", "lock", ",", "i", ",", "sub_video_list", ",", "train_cls_data", ",", "cfg", ",", "result_dict", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "# compute threshold value", "\n", "", "threshold", "=", "compute_threshold", "(", "result_dict", ",", "scoring", "=", "cfg", ".", "scoring", ")", "\n", "\n", "output_dict", "=", "{", "\"version\"", ":", "\"ActivityNet-v1.3\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "'threshold'", ":", "threshold", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.threshold.main": [[66, 79], ["test.get_basic_config", "os.path.join", "print", "os.path.exists", "threshold.thresholding", "print", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_basic_config", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.threshold.thresholding"], ["", "def", "main", "(", ")", ":", "\n", "    ", "cfg", "=", "get_basic_config", "(", "config", ",", "dataset", "=", "'training'", ")", "\n", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output_path", ",", "cfg", ".", "json_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_file", ")", ":", "\n", "        ", "threshold", "=", "thresholding", "(", "cfg", ",", "output_file", ",", "thread_num", "=", "cfg", ".", "thread_num", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "output_file", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "threshold", "=", "data", "[", "'external_data'", "]", "[", "'threshold'", "]", "\n", "", "print", "(", "f'Thresholding result file already exist at {output_file}!'", ")", "\n", "\n", "", "print", "(", "f'The threshold is: {threshold:.12f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.get_basic_config": [[18, 52], ["test.get_class_names", "AFSD.common.anet_dataset.get_video_info", "os.path.exists", "os.makedirs", "AFSD.common.config.config"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_class_names", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info"], ["def", "get_basic_config", "(", "config", ",", "dataset", "=", "'testing'", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", "\n", "cfg", ".", "input_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", "\n", "cfg", ".", "checkpoint_path", "=", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "cfg", ".", "evidence", "=", "config", "[", "'model'", "]", "[", "'evidence'", "]", "\n", "", "cfg", ".", "scoring", "=", "config", "[", "'testing'", "]", "[", "'ood_scoring'", "]", "\n", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "-", "1", "\n", "\n", "", "cfg", ".", "json_name", "=", "config", "[", "'testing'", "]", "[", "'output_json'", "]", "\n", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "config", "[", "'testing'", "]", "[", "'fusion'", "]", "\n", "cfg", ".", "ngpu", "=", "config", "[", "'ngpu'", "]", "\n", "cfg", ".", "thread_num", "=", "config", "[", "'ngpu'", "]", "\n", "\n", "subset", "=", "'validation'", "if", "dataset", "==", "'testing'", "else", "'training'", "\n", "cfg", ".", "idx_to_class", "=", "get_class_names", "(", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "cfg", ".", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "dataset", "]", "[", "'video_info_path'", "]", ",", "subset", "=", "subset", ")", "\n", "cfg", ".", "mp4_data_path", "=", "config", "[", "'dataset'", "]", "[", "dataset", "]", "[", "'video_mp4_path'", "]", "# train_val_npy_112/", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.get_class_names": [[54, 60], ["open", "enumerate", "f.readlines", "line.strip"], "function", ["None"], ["", "def", "get_class_names", "(", "class_info_path", ")", ":", "\n", "    ", "idx_to_class", "=", "{", "}", "\n", "with", "open", "(", "class_info_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "idx_to_class", "[", "idx", "+", "1", "]", "=", "line", ".", "strip", "(", ")", "# starting from 1 to K (K=150 for activitynet)", "\n", "", "", "return", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.get_path": [[62, 70], ["os.path.lexists", "os.path.join", "os.path.islink", "os.path.realpath", "fullpath.split", "os.path.dirname"], "function", ["None"], ["", "def", "get_path", "(", "input_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "input_path", ")", ":", "\n", "        ", "fullpath", "=", "os", ".", "path", ".", "realpath", "(", "input_path", ")", "if", "os", ".", "path", ".", "islink", "(", "input_path", ")", "else", "input_path", "\n", "real_name", "=", "fullpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "real_full_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "input_path", ")", ",", "real_name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "", "return", "real_full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.prepare_data": [[73, 84], ["numpy.load", "numpy.transpose", "center_crop", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.copy"], "function", ["None"], ["", "def", "prepare_data", "(", "video_name", ",", "center_crop", ",", "cfg", ")", ":", "\n", "    ", "sample_fps", "=", "cfg", ".", "video_infos", "[", "video_name", "]", "[", "'fps'", "]", "\n", "duration", "=", "cfg", ".", "video_infos", "[", "video_name", "]", "[", "'duration'", "]", "\n", "offsetlist", "=", "[", "0", "]", "\n", "# get video data", "\n", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "mp4_data_path", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "frames", "=", "data", "\n", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data", "=", "center_crop", "(", "frames", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "return", "data", ",", "offsetlist", ",", "sample_fps", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.prepare_clip": [[86, 96], ["torch.cat.float", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat", "torch.cat", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float", "torch.ones().float", "torch.ones", "torch.ones", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "prepare_clip", "(", "data", ",", "offset", ",", "clip_length", ",", "crop_size", ")", ":", "\n", "    ", "clip", "=", "data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "clip", "=", "clip", ".", "float", "(", ")", "\n", "if", "clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "        ", "tmp", "=", "torch", ".", "ones", "(", "\n", "[", "clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "clip", ".", "size", "(", "1", ")", ",", "crop_size", ",", "crop_size", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "*", "127.5", "\n", "clip", "=", "torch", ".", "cat", "(", "[", "clip", ",", "tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", "\n", "clip", "=", "(", "clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.decode_prediction": [[98, 132], ["torch.Softmax", "torch.cat", "torch.cat", "torch.cat.clamp_", "score_func", "score_func", "center.sigmoid.sigmoid", "conf.view().transpose.view().transpose", "conf.view().transpose.clone", "[].squeeze", "[].squeeze", "actionness.unsqueeze", "conf.view().transpose.view", "act.sigmoid", "prop_act.sigmoid"], "function", ["None"], ["", "def", "decode_prediction", "(", "output_dict", ",", "cfg", ",", "score_func", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ")", ":", "\n", "# batchsize should be 1!", "\n", "    ", "loc", ",", "conf", ",", "priors", "=", "output_dict", "[", "'loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'conf'", "]", "[", "0", "]", ",", "output_dict", "[", "'priors'", "]", "\n", "prop_loc", ",", "prop_conf", "=", "output_dict", "[", "'prop_loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'prop_conf'", "]", "[", "0", "]", "\n", "center", "=", "output_dict", "[", "'center'", "]", "[", "0", "]", "\n", "# conditional outputs", "\n", "act", "=", "output_dict", "[", "'act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "None", "\n", "prop_act", "=", "output_dict", "[", "'prop_act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "None", "\n", "unct", "=", "output_dict", "[", "'unct'", "]", "[", "0", "]", "if", "cfg", ".", "use_edl", "else", "None", "\n", "prop_unct", "=", "output_dict", "[", "'prop_unct'", "]", "[", "0", "]", "if", "cfg", ".", "use_edl", "else", "None", "\n", "\n", "# decode the locations of segments", "\n", "pre_loc_w", "=", "loc", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", "1", ":", "]", "\n", "loc", "=", "0.5", "*", "pre_loc_w", "*", "prop_loc", "+", "loc", "\n", "decoded_segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "-", "loc", "[", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "+", "loc", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "decoded_segments", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "cfg", ".", "clip_length", ")", "\n", "\n", "# compute uncertainty and actionness", "\n", "uncertainty", "=", "(", "unct", "+", "prop_unct", ")", "/", "2.0", "if", "cfg", ".", "use_edl", "else", "None", "\n", "actionness", "=", "(", "act", ".", "sigmoid", "(", ")", "+", "prop_act", ".", "sigmoid", "(", ")", ")", "/", "2.0", "if", "cfg", ".", "os_head", "else", "None", "\n", "\n", "# compute classification confidence", "\n", "conf", "=", "score_func", "(", "conf", ")", "\n", "prop_conf", "=", "score_func", "(", "prop_conf", ")", "\n", "center", "=", "center", ".", "sigmoid", "(", ")", "\n", "\n", "conf", "=", "(", "conf", "+", "prop_conf", ")", "/", "2.0", "\n", "conf", "=", "conf", "*", "center", "*", "actionness", ".", "unsqueeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "conf", "*", "center", "\n", "conf", "=", "conf", ".", "view", "(", "-", "1", ",", "cfg", ".", "num_classes", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "conf_scores", "=", "conf", ".", "clone", "(", ")", "\n", "\n", "return", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.filtering": [[134, 154], ["c_mask.unsqueeze().expand_as", "decoded_segments[].view", "torch.cat", "torch.cat", "scores.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "c_mask.unsqueeze", "scores.unsqueeze", "uncertain_scores.unsqueeze", "act_scores.unsqueeze"], "function", ["None"], ["", "def", "filtering", "(", "decoded_segments", ",", "conf_score_cls", ",", "uncertainty", ",", "actionness", ",", "offset", ",", "sample_fps", ",", "cfg", ",", "conf_thresh", "=", "0.001", ")", ":", "\n", "    ", "c_mask", "=", "conf_score_cls", ">", "conf_thresh", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "c_mask", "=", "c_mask", "&", "(", "actionness", ">", "0.5", ")", "\n", "", "scores", "=", "conf_score_cls", "[", "c_mask", "]", "\n", "if", "scores", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "l_mask", "=", "c_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "decoded_segments", ")", "\n", "segments", "=", "decoded_segments", "[", "l_mask", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "segments", "=", "(", "segments", "+", "offset", ")", "/", "sample_fps", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 3)", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "# masking uncertainties", "\n", "        ", "uncertain_scores", "=", "uncertainty", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "uncertain_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4)", "\n", "", "if", "cfg", ".", "os_head", ":", "\n", "# masking actionness", "\n", "        ", "act_scores", "=", "actionness", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "act_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4) or (N, 5)", "\n", "", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.get_video_prediction": [[156, 193], ["torch.zeros", "torch.zeros", "torch.zeros.contiguous().view", "flt.view.view", "torch.cat", "torch.cat", "AFSD.common.segment_utils.softnms_v2", "flt[].contiguous", "tmp[].view", "tmp.detach().cpu().numpy.detach().cpu().numpy", "range", "len", "torch.zeros.contiguous", "tmp.detach().cpu().numpy.size", "max", "min", "float", "proposal_list.append", "tmp.detach().cpu().numpy.detach().cpu", "float", "float", "float", "float", "tmp.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2"], ["", "def", "get_video_prediction", "(", "output", ",", "duration", ",", "cfg", ",", "cls_rng", "=", "None", ")", ":", "\n", "    ", "res_dim", "=", "3", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "cfg", ".", "use_edl", "else", "res_dim", "# 3 or 4", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "cfg", ".", "os_head", "else", "res_dim", "# 3 or 4 or 5", "\n", "res", "=", "torch", ".", "zeros", "(", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "res_dim", ")", "\n", "# NMS for each class", "\n", "for", "cl", "in", "cls_rng", ":", "\n", "        ", "if", "len", "(", "output", "[", "cl", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "torch", ".", "cat", "(", "output", "[", "cl", "]", ",", "0", ")", "\n", "tmp", ",", "count", "=", "softnms_v2", "(", "tmp", ",", "sigma", "=", "cfg", ".", "nms_sigma", ",", "top_k", "=", "cfg", ".", "top_k", ",", "score_threshold", "=", "0.001", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "res", "[", "cl", ",", ":", "count", "]", "=", "tmp", "\n", "\n", "", "flt", "=", "res", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "flt", "=", "flt", ".", "view", "(", "cfg", ".", "num_classes", ",", "-", "1", ",", "res_dim", ")", "\n", "proposal_list", "=", "[", "]", "\n", "for", "cl", "in", "cls_rng", ":", "\n", "        ", "cl_idx", "=", "cl", "+", "1", "if", "cfg", ".", "os_head", "else", "cl", "\n", "class_name", "=", "cfg", ".", "idx_to_class", "[", "cl_idx", "]", "# assume the current video contains only one class", "\n", "tmp", "=", "flt", "[", "cl", "]", ".", "contiguous", "(", ")", "\n", "tmp", "=", "tmp", "[", "(", "tmp", "[", ":", ",", "2", "]", ">", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp", ")", "]", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "if", "tmp", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "tmp", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tmp_proposal", "=", "{", "}", "\n", "start_time", "=", "max", "(", "0", ",", "float", "(", "tmp", "[", "i", ",", "0", "]", ")", ")", "\n", "end_time", "=", "min", "(", "duration", ",", "float", "(", "tmp", "[", "i", ",", "1", "]", ")", ")", "\n", "if", "end_time", "<=", "start_time", ":", "\n", "                ", "continue", "\n", "", "tmp_proposal", "[", "'label'", "]", "=", "class_name", "\n", "tmp_proposal", "[", "'score'", "]", "=", "float", "(", "tmp", "[", "i", ",", "2", "]", ")", "\n", "tmp_proposal", "[", "'segment'", "]", "=", "[", "start_time", ",", "end_time", "]", "\n", "tmp_proposal", "[", "'uncertainty'", "]", "=", "float", "(", "tmp", "[", "i", ",", "3", "]", ")", "if", "cfg", ".", "use_edl", "else", "0.0", "\n", "tmp_proposal", "[", "'actionness'", "]", "=", "float", "(", "tmp", "[", "i", ",", "4", "]", ")", "if", "cfg", ".", "os_head", "else", "0.0", "\n", "proposal_list", ".", "append", "(", "tmp_proposal", ")", "\n", "", "", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.inference_thread": [[195, 246], ["torch.cuda.set_device", "torch.cuda.set_device", "AFSD.anet.BDNet.BDNet", "AFSD.anet.BDNet.BDNet.load_state_dict", "AFSD.anet.BDNet.BDNet.eval().cuda", "AFSD.common.videotransforms.CenterCrop", "torch.load", "torch.load", "AFSD.anet.BDNet.DirichletLayer", "torch.Softmax", "range", "range", "tqdm.tqdm", "test.prepare_data", "test.get_video_prediction", "tqdm.tqdm.close", "test.get_path", "AFSD.anet.BDNet.BDNet.eval", "test.prepare_clip", "test.decode_prediction", "tqdm.tqdm.update", "len", "range", "torch.no_grad", "torch.no_grad", "AFSD.anet.BDNet.BDNet.", "test.filtering", "output[].append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.get_video_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.decode_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "inference_thread", "(", "lock", ",", "pid", ",", "video_list", ",", "cfg", ",", "result_dict", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "pid", ")", "\n", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "get_path", "(", "cfg", ".", "checkpoint_path", ")", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "\n", "text", "=", "'processor %d'", "%", "pid", "\n", "with", "lock", ":", "\n", "        ", "progress", "=", "tqdm", ".", "tqdm", "(", "\n", "total", "=", "len", "(", "video_list", ")", ",", "\n", "position", "=", "pid", ",", "\n", "desc", "=", "text", ",", "\n", "ncols", "=", "0", "\n", ")", "\n", "", "for", "video_name", "in", "video_list", ":", "\n", "# get video information", "\n", "        ", "data", ",", "offsetlist", ",", "sample_fps", ",", "duration", "=", "prepare_data", "(", "video_name", ",", "center_crop", ",", "cfg", ")", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "crop_size", ")", "\n", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "\n", "# decode results", "\n", "", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_prediction", "(", "output_dict", ",", "cfg", ",", "out_layer", ")", "\n", "# filtering", "\n", "for", "cl", "in", "class_range", ":", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "offset", ",", "sample_fps", ",", "cfg", ")", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "# finish offset loop", "\n", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "[", "2", ":", "]", "]", "=", "get_video_prediction", "(", "output", ",", "duration", ",", "cfg", ",", "cls_rng", "=", "class_range", ")", "\n", "with", "lock", ":", "\n", "            ", "progress", ".", "update", "(", "1", ")", "\n", "# finish video loop", "\n", "\n", "", "", "with", "lock", ":", "\n", "        ", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.testing_multithread": [[248, 274], ["threading.Lock", "len", "multiprocessing.Manager().dict", "range", "multiprocessing.Process", "mp.Process.start", "processes.append", "mp.Process.join", "len", "dict", "open", "json.dump", "multiprocessing.Manager"], "function", ["None"], ["", "", "def", "testing_multithread", "(", "cfg", ",", "video_list", ",", "output_file", ",", "thread_num", "=", "1", ")", ":", "\n", "    ", "processes", "=", "[", "]", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "video_num", "=", "len", "(", "video_list", ")", "\n", "per_thread_video_num", "=", "video_num", "//", "thread_num", "\n", "result_dict", "=", "mp", ".", "Manager", "(", ")", ".", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "thread_num", ")", ":", "\n", "        ", "if", "i", "==", "thread_num", "-", "1", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "]", "\n", "", "else", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "(", "i", "+", "1", ")", "*", "per_thread_video_num", "]", "\n", "# inference_thread(lock, i, sub_video_list, test_cls_data, cfg)", "\n", "", "p", "=", "mp", ".", "Process", "(", "target", "=", "inference_thread", ",", "args", "=", "(", "lock", ",", "i", ",", "sub_video_list", ",", "cfg", ",", "result_dict", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "# save results", "\n", "", "assert", "len", "(", "result_dict", ")", "==", "video_num", ",", "\"Incomplete testing results!\"", "\n", "output_dict", "=", "{", "\"version\"", ":", "\"ActivityNet-v1.3\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.testing": [[276, 323], ["AFSD.anet.BDNet.BDNet", "AFSD.anet.BDNet.BDNet.load_state_dict", "AFSD.anet.BDNet.BDNet.eval().cuda", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "torch.load", "torch.load", "AFSD.anet.BDNet.DirichletLayer", "torch.Softmax", "range", "range", "test.prepare_data", "test.get_video_prediction", "tqdm.tqdm.update", "len", "len", "dict", "open", "json.dump", "test.get_path", "AFSD.anet.BDNet.BDNet.eval", "len", "test.prepare_clip", "test.decode_prediction", "range", "torch.no_grad", "torch.no_grad", "AFSD.anet.BDNet.BDNet.", "test.filtering", "output[].append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.get_video_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.decode_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "", "def", "testing", "(", "cfg", ",", "video_list", ",", "output_file", ")", ":", "\n", "\n", "    ", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "get_path", "(", "cfg", ".", "checkpoint_path", ")", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "progress", "=", "tqdm", ".", "tqdm", "(", "\n", "total", "=", "len", "(", "video_list", ")", ",", "\n", "position", "=", "0", ",", "\n", "desc", "=", "'ANet Inference'", ",", "\n", "ncols", "=", "0", "\n", ")", "\n", "for", "video_name", "in", "video_list", ":", "\n", "# get video information", "\n", "        ", "data", ",", "offsetlist", ",", "sample_fps", ",", "duration", "=", "prepare_data", "(", "video_name", ",", "center_crop", ",", "cfg", ")", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "crop_size", ")", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "\n", "# decode results", "\n", "", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_prediction", "(", "output_dict", ",", "cfg", ",", "out_layer", ")", "\n", "# filtering", "\n", "for", "cl", "in", "class_range", ":", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "offset", ",", "sample_fps", ",", "cfg", ")", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "[", "2", ":", "]", "]", "=", "get_video_prediction", "(", "output", ",", "duration", ",", "cfg", ",", "cls_rng", "=", "class_range", ")", "\n", "progress", ".", "update", "(", "1", ")", "\n", "\n", "# save results", "\n", "", "assert", "len", "(", "result_dict", ")", "==", "len", "(", "video_list", ")", ",", "\"Incomplete testing results!\"", "\n", "output_dict", "=", "{", "\"version\"", ":", "\"ActivityNet-v1.3\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.main": [[325, 345], ["test.get_basic_config", "list", "list", "os.path.join", "os.path.exists", "get_basic_config.video_infos.keys", "test.testing", "print", "os.listdir", "set", "set", "open", "json.load", "len", "len"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_basic_config", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.test.testing"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "cfg", "=", "get_basic_config", "(", "config", ",", "dataset", "=", "'testing'", ")", "\n", "\n", "video_list", "=", "list", "(", "cfg", ".", "video_infos", ".", "keys", "(", ")", ")", "\n", "videos_in_disk", "=", "[", "filename", "[", ":", "-", "4", "]", "for", "filename", "in", "os", ".", "listdir", "(", "cfg", ".", "mp4_data_path", ")", "]", "\n", "video_list", "=", "list", "(", "set", "(", "video_list", ")", "&", "set", "(", "videos_in_disk", ")", ")", "\n", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output_path", ",", "cfg", ".", "json_name", ")", "\n", "# testing_multithread(cfg, video_list, output_file, thread_num=cfg.thread_num)", "\n", "\n", "rerun", "=", "True", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_file", ")", ":", "\n", "        ", "with", "open", "(", "output_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "output_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "len", "(", "output_dict", "[", "'results'", "]", ")", "==", "len", "(", "video_list", ")", ":", "\n", "            ", "rerun", "=", "False", "\n", "", "", "if", "rerun", ":", "\n", "        ", "testing", "(", "cfg", ",", "video_list", ",", "output_file", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Result file exist and it is complete! \\n{output_file}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.eval_open.write_eval_open": [[19, 24], ["open", "zip", "f.writelines", "f.writelines", "auc_ROC.mean", "auc_PR.mean", "OSDR.mean"], "function", ["None"], ["def", "write_eval_open", "(", "eval_file", ",", "tious", ",", "auc_ROC", ",", "auc_PR", ",", "OSDR", ")", ":", "\n", "    ", "with", "open", "(", "eval_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "(", "tiou", ",", "auc_roc", ",", "auc_pr", ",", "osdr", ")", "in", "zip", "(", "tious", ",", "auc_ROC", ",", "auc_PR", ",", "OSDR", ")", ":", "\n", "            ", "f", ".", "writelines", "(", "f\"tIoU={tiou}: auc_roc={auc_roc:.5f}, auc_pr={auc_pr:.5f}, osdr={osdr:.5f}\\n\"", ")", "\n", "", "f", ".", "writelines", "(", "f\"Average AUC_ROC: {auc_ROC.mean():.5f}, Average AUC_PR: {auc_PR.mean():.5f}, Average OSDR: {OSDR.mean():.5f}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.eval_open.write_eval_closed": [[26, 31], ["open", "zip", "f.writelines", "f.writelines"], "function", ["None"], ["", "", "def", "write_eval_closed", "(", "eval_file", ",", "tious", ",", "mAPs", ")", ":", "\n", "    ", "with", "open", "(", "eval_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "(", "tiou", ",", "mAP", ")", "in", "zip", "(", "tious", ",", "mAPs", ")", ":", "\n", "            ", "f", ".", "writelines", "(", "f\"tIoU={tiou}: mAP={mAP:.5f}\\n\"", ")", "\n", "", "f", ".", "writelines", "(", "f\"Average mAP: {average_mAP:.5f}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.eval_open.get_mean_std": [[85, 90], ["numpy.array().mean", "numpy.array", "numpy.array().std", "numpy.sqrt", "len", "numpy.array"], "function", ["None"], ["", "", "def", "get_mean_std", "(", "data", ",", "axis", "=", "0", ")", ":", "\n", "    ", "mean", "=", "np", ".", "array", "(", "data", ")", ".", "mean", "(", "axis", "=", "axis", ")", "\n", "# see the Confidence Intervals: http://www.stat.yale.edu/Courses/1997-98/101/confint.htm", "\n", "std", "=", "np", ".", "array", "(", "data", ")", ".", "std", "(", "axis", "=", "axis", ")", "/", "np", ".", "sqrt", "(", "len", "(", "data", ")", ")", "*", "1.96", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.multisegment_loss.MultiSegmentLoss.__init__": [[87, 105], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "cls_loss.FocalLoss_Ori", "cls_loss.ActionnessLoss", "cls_loss.EvidenceLoss"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "overlap_thresh", ",", "negpos_ratio", ",", "use_gpu", "=", "True", ",", "\n", "cls_loss_type", "=", "'focal'", ",", "edl_config", "=", "None", ",", "os_head", "=", "False", ",", "size_average", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiSegmentLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "overlap_thresh", "=", "overlap_thresh", "\n", "self", ".", "negpos_ratio", "=", "negpos_ratio", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "cls_loss_type", "=", "cls_loss_type", "\n", "if", "self", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "            ", "self", ".", "cls_loss", "=", "FocalLoss_Ori", "(", "num_classes", ",", "balance_index", "=", "0", ",", "size_average", "=", "size_average", ",", "alpha", "=", "0.25", ")", "\n", "", "elif", "self", ".", "cls_loss_type", "==", "'edl'", ":", "\n", "            ", "self", ".", "cls_loss", "=", "EvidenceLoss", "(", "num_classes", ",", "edl_config", ",", "size_average", "=", "size_average", ")", "\n", "", "self", ".", "iou_aware", "=", "True", "if", "self", ".", "cls_loss_type", "==", "'edl'", "and", "self", ".", "cls_loss", ".", "iou_aware", "else", "False", "\n", "self", ".", "os_head", "=", "os_head", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "self", ".", "act_loss", "=", "ActionnessLoss", "(", "size_average", "=", "size_average", ",", "weight", "=", "0.1", ")", "\n", "", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "center_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.multisegment_loss.MultiSegmentLoss.forward": [[106, 302], ["loc_data.size", "priors.size", "range", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "pos.unsqueeze().expand_as", "torch.Tensor().to.clone", "torch.Tensor().to.clone", "torch.Tensor().to.clone", "loc_p[].view", "loc_t[].view", "prop_pos.unsqueeze().expand_as", "prop_loc_p[].view", "prop_loc_t[].view", "gt_loc_t[].view", "prop_loc_p[].view", "center_p[].view", "logit_p.view", "torch.LongTensor().to.view", "torch.LongTensor().to.view", "torch.LongTensor().to.view", "prop_logit_p.view", "prop_conf_t.view.view.view", "max", "max", "loss_l_list.append", "loss_c_list.append", "loss_prop_l_list.append", "loss_prop_c_list.append", "loss_ct_list.append", "sum", "sum", "sum", "sum", "sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "priors.size", "truths.size", "priors[].unsqueeze().expand", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "prior_lb.expand", "prior_rb.expand", "area.min", "multisegment_loss.iou_loss", "conf.clone", "loc_p[].view.numel", "multisegment_loss.iou_loss", "loc_p[].view.sum", "prop_loc_p[].view.numel", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "prop_loc_p[].view.sum", "prop_pre_loc.numel", "iou_loss().clamp_", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "prop_pre_loc.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.LongTensor().to.view.numel", "multisegment_loss.MultiSegmentLoss.cls_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "act_p.view", "inds_keep.to", "multisegment_loss.MultiSegmentLoss.act_loss", "torch.softmax", "torch.softmax", "torch.softmax", "prop_conf_t.view.view.numel", "multisegment_loss.MultiSegmentLoss.cls_loss", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "prop_conf_data[].view", "multisegment_loss.MultiSegmentLoss.cls_loss.iou_calib", "prop_act_p.view", "inds_keep.to", "multisegment_loss.MultiSegmentLoss.act_loss", "pos.sum", "prop_pos.sum", "loss_act_list.append", "loss_prop_act_list.append", "sum", "sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "multisegment_loss.gen_bounds", "iou[].max", "pos.unsqueeze", "prop_pos.unsqueeze", "targets_conf[].unsqueeze", "prop_conf_t[].unsqueeze", "iou_pred[].view", "priors[].unsqueeze", "truths[].unsqueeze().expand", "truths[].unsqueeze().expand", "multisegment_loss.iou_loss", "inds_keep.squeeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inds_keep.squeeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "min", "pos.unsqueeze", "truths[].unsqueeze", "truths[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.iou_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.iou_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.iou_calib", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.multisegment_loss.gen_bounds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.iou_loss"], ["", "def", "forward", "(", "self", ",", "predictions", ",", "targets", ",", "pre_locs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param predictions: a tuple containing loc, conf and priors\n        :param targets: ground truth segments and labels\n        :return: loc loss and conf loss\n        \"\"\"", "\n", "loc_data", ",", "conf_data", ",", "prop_loc_data", ",", "prop_conf_data", ",", "center_data", ",", "priors", ",", "act_data", ",", "prop_act_data", "=", "predictions", "\n", "# priors = priors[0]", "\n", "num_batch", "=", "loc_data", ".", "size", "(", "0", ")", "\n", "num_priors", "=", "priors", ".", "size", "(", "0", ")", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_length'", "]", "\n", "\n", "loss_l_list", "=", "[", "]", "\n", "loss_c_list", "=", "[", "]", "\n", "loss_ct_list", "=", "[", "]", "\n", "loss_prop_l_list", "=", "[", "]", "\n", "loss_prop_c_list", "=", "[", "]", "\n", "loss_act_list", "=", "[", "]", "\n", "loss_prop_act_list", "=", "[", "]", "\n", "\n", "iou_pred", "=", "torch", ".", "Tensor", "(", "num_priors", ",", "num_batch", ")", ".", "to", "(", "loc_data", ".", "device", ")", "if", "self", ".", "iou_aware", "else", "None", "\n", "for", "idx", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "loc_t", "=", "torch", ".", "Tensor", "(", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "conf_t", "=", "torch", ".", "LongTensor", "(", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_loc_t", "=", "torch", ".", "Tensor", "(", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_conf_t", "=", "torch", ".", "LongTensor", "(", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "\n", "loc_p", "=", "loc_data", "[", "idx", "]", "\n", "logit_p", "=", "conf_data", "[", "idx", "]", "\n", "prop_loc_p", "=", "prop_loc_data", "[", "idx", "]", "\n", "prop_logit_p", "=", "prop_conf_data", "[", "idx", "]", "\n", "center_p", "=", "center_data", "[", "idx", "]", "\n", "if", "self", ".", "os_head", ":", "\n", "                ", "act_p", "=", "act_data", "[", "idx", "]", "\n", "prop_act_p", "=", "prop_act_data", "[", "idx", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# match priors and ground truth segments", "\n", "                ", "truths", "=", "targets", "[", "idx", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "labels", "=", "targets", "[", "idx", "]", "[", ":", ",", "-", "1", "]", "\n", "\"\"\"\n                match gt\n                \"\"\"", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "N", "=", "truths", ".", "size", "(", "0", ")", "\n", "center", "=", "priors", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "K", ",", "N", ")", "\n", "left", "=", "(", "center", "-", "truths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", ")", "*", "clip_length", "\n", "right", "=", "(", "truths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", "-", "center", ")", "*", "clip_length", "\n", "max_dis", "=", "torch", ".", "max", "(", "left", ",", "right", ")", "\n", "if", "prior_lb", "is", "None", "or", "prior_rb", "is", "None", ":", "\n", "                    ", "gen_bounds", "(", "priors", ")", "\n", "", "l_bound", "=", "prior_lb", ".", "expand", "(", "K", ",", "N", ")", "\n", "r_bound", "=", "prior_rb", ".", "expand", "(", "K", ",", "N", ")", "\n", "area", "=", "left", "+", "right", "\n", "maxn", "=", "clip_length", "*", "2", "\n", "area", "[", "left", "<", "0", "]", "=", "maxn", "\n", "area", "[", "right", "<", "0", "]", "=", "maxn", "\n", "area", "[", "max_dis", "<=", "l_bound", "]", "=", "maxn", "\n", "area", "[", "max_dis", ">", "r_bound", "]", "=", "maxn", "\n", "best_truth_area", ",", "best_truth_idx", "=", "area", ".", "min", "(", "1", ")", "\n", "\n", "loc_t", "[", ":", ",", "0", "]", "=", "(", "priors", "[", ":", ",", "0", "]", "-", "truths", "[", "best_truth_idx", ",", "0", "]", ")", "*", "clip_length", "\n", "loc_t", "[", ":", ",", "1", "]", "=", "(", "truths", "[", "best_truth_idx", ",", "1", "]", "-", "priors", "[", ":", ",", "0", "]", ")", "*", "clip_length", "\n", "conf", "=", "labels", "[", "best_truth_idx", "]", "\n", "conf", "[", "best_truth_area", ">=", "maxn", "]", "=", "0", "\n", "conf_t", "[", ":", "]", "=", "conf", "\n", "\n", "iou", "=", "iou_loss", "(", "loc_p", ",", "loc_t", ",", "loss_type", "=", "'calc iou'", ")", "# [num_priors]", "\n", "if", "self", ".", "iou_aware", ":", "\n", "                    ", "iou_pred", "[", ":", ",", "idx", "]", "=", "iou", "\n", "", "if", "(", "conf", ">", "0", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "max_iou", ",", "max_iou_idx", "=", "iou", "[", "conf", ">", "0", "]", ".", "max", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "max_iou", "=", "2.0", "\n", "# print(max_iou)", "\n", "", "prop_conf", "=", "conf", ".", "clone", "(", ")", "\n", "prop_conf", "[", "iou", "<", "min", "(", "self", ".", "overlap_thresh", ",", "max_iou", ")", "]", "=", "0", "\n", "prop_conf_t", "[", ":", "]", "=", "prop_conf", "\n", "prop_w", "=", "loc_p", "[", ":", ",", "0", "]", "+", "loc_p", "[", ":", ",", "1", "]", "\n", "prop_loc_t", "[", ":", ",", "0", "]", "=", "(", "loc_t", "[", ":", ",", "0", "]", "-", "loc_p", "[", ":", ",", "0", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "prop_loc_t", "[", ":", ",", "1", "]", "=", "(", "loc_t", "[", ":", ",", "1", "]", "-", "loc_p", "[", ":", ",", "1", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "\n", "", "pos", "=", "conf_t", ">", "0", "# [num_priors]", "\n", "pos_idx", "=", "pos", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "loc_p", ")", "# [num_priors, 2]", "\n", "gt_loc_t", "=", "loc_t", ".", "clone", "(", ")", "\n", "loc_p", "=", "loc_p", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "loc_target", "=", "loc_t", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "if", "loc_p", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_l", "=", "iou_loss", "(", "loc_p", ",", "loc_target", ",", "loss_type", "=", "'giou'", ",", "reduction", "=", "'sum'", ")", "\n", "", "else", ":", "\n", "                ", "loss_l", "=", "loc_p", ".", "sum", "(", ")", "\n", "\n", "", "prop_pos", "=", "prop_conf_t", ">", "0", "\n", "prop_pos_idx", "=", "prop_pos", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "prop_loc_p", ")", "# [num_priors, 2]", "\n", "target_prop_loc_p", "=", "prop_loc_p", "[", "prop_pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "prop_loc_t", "=", "prop_loc_t", "[", "prop_pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n", "if", "prop_loc_p", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_prop_l", "=", "F", ".", "smooth_l1_loss", "(", "target_prop_loc_p", ",", "prop_loc_t", ",", "reduction", "=", "'sum'", ")", "\n", "", "else", ":", "\n", "                ", "loss_prop_l", "=", "target_prop_loc_p", ".", "sum", "(", ")", "\n", "\n", "", "prop_pre_loc", "=", "loc_p", "\n", "cur_loc_t", "=", "gt_loc_t", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "prop_loc_p", "=", "prop_loc_p", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "center_p", "=", "center_p", "[", "pos", ".", "unsqueeze", "(", "-", "1", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "prop_pre_loc", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "prop_pre_w", "=", "(", "prop_pre_loc", "[", ":", ",", "0", "]", "+", "prop_pre_loc", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "cur_loc_p", "=", "0.5", "*", "prop_pre_w", "*", "prop_loc_p", "+", "prop_pre_loc", "\n", "ious", "=", "iou_loss", "(", "cur_loc_p", ",", "cur_loc_t", ",", "loss_type", "=", "'calc iou'", ")", ".", "clamp_", "(", "min", "=", "0", ")", "\n", "loss_ct", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "center_p", ",", "\n", "ious", ",", "\n", "reduction", "=", "'sum'", "\n", ")", "\n", "", "else", ":", "\n", "                ", "loss_ct", "=", "prop_pre_loc", ".", "sum", "(", ")", "\n", "\n", "# classification loss in the coarse stage", "\n", "", "conf_p", "=", "logit_p", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "targets_conf", "=", "conf_t", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "self", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "                ", "conf_p", "=", "F", ".", "softmax", "(", "conf_p", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "os_head", ":", "\n", "                ", "inds_keep", "=", "targets_conf", ">", "0", "# (N,1)", "\n", "targets_conf", "=", "targets_conf", "[", "inds_keep", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "1", "# (M,1), starting from 0", "\n", "conf_p", "=", "conf_p", "[", "inds_keep", ".", "squeeze", "(", ")", "]", "# (M,15)", "\n", "", "if", "targets_conf", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_c", "=", "self", ".", "cls_loss", "(", "conf_p", ",", "targets_conf", ")", "\n", "", "else", ":", "# empty, do not need to compute loss", "\n", "                ", "loss_c", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "conf_p", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "os_head", ":", "\n", "                ", "act_scores", "=", "act_p", ".", "view", "(", "-", "1", ",", "1", ")", "# [N, 1]", "\n", "act_targets", "=", "inds_keep", ".", "to", "(", "torch", ".", "float32", ")", "# [N, 1]", "\n", "loss_act", ",", "AN", "=", "self", ".", "act_loss", "(", "act_scores", ",", "act_targets", ")", "\n", "\n", "# classification loss in the refined stage", "\n", "", "prop_conf_p", "=", "prop_logit_p", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "prop_conf_t", "=", "prop_conf_t", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "self", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "                ", "prop_conf_p", "=", "F", ".", "softmax", "(", "prop_conf_p", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "os_head", ":", "\n", "                ", "inds_keep", "=", "prop_conf_t", ">", "0", "# (N,1)", "\n", "prop_conf_t", "=", "prop_conf_t", "[", "inds_keep", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "1", "# (M,1), starting from 0", "\n", "prop_conf_p", "=", "prop_conf_p", "[", "inds_keep", ".", "squeeze", "(", ")", "]", "# (M,15)", "\n", "", "if", "prop_conf_t", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_prop_c", "=", "self", ".", "cls_loss", "(", "prop_conf_p", ",", "prop_conf_t", ")", "\n", "", "else", ":", "# empty, do not need to compute loss", "\n", "                ", "loss_prop_c", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "prop_conf_p", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "iou_aware", ":", "\n", "                ", "logit_pred", "=", "prop_conf_data", "[", "idx", "]", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "loss_iouc", "=", "self", ".", "cls_loss", ".", "iou_calib", "(", "logit_pred", ",", "iou_pred", "[", ":", ",", "idx", "]", ".", "view", "(", "-", "1", ")", ",", "mean", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "os_head", ":", "\n", "                ", "prop_act_scores", "=", "prop_act_p", ".", "view", "(", "-", "1", ",", "1", ")", "# [N, 1]", "\n", "prop_act_targets", "=", "inds_keep", ".", "to", "(", "torch", ".", "float32", ")", "# [N, 1]", "\n", "loss_prop_act", ",", "PAN", "=", "self", ".", "act_loss", "(", "prop_act_scores", ",", "prop_act_targets", ")", "\n", "\n", "", "N", "=", "max", "(", "pos", ".", "sum", "(", ")", ",", "1", ")", "\n", "PN", "=", "max", "(", "prop_pos", ".", "sum", "(", ")", ",", "1", ")", "\n", "loss_l", "/=", "N", "if", "not", "self", ".", "size_average", "else", "loss_l", "\n", "loss_c", "/=", "N", "if", "not", "self", ".", "size_average", "else", "loss_c", "\n", "loss_prop_l", "/=", "PN", "if", "not", "self", ".", "size_average", "else", "loss_prop_l", "\n", "loss_prop_c", "/=", "PN", "if", "not", "self", ".", "size_average", "else", "loss_prop_c", "\n", "if", "self", ".", "iou_aware", ":", "\n", "                ", "loss_prop_c", "+=", "loss_iouc", "\n", "", "loss_ct", "/=", "N", "if", "not", "self", ".", "size_average", "else", "loss_ct", "\n", "if", "self", ".", "os_head", ":", "\n", "                ", "loss_act", "=", "loss_act", "/", "AN", "if", "not", "self", ".", "size_average", "else", "loss_act", "\n", "loss_prop_act", "=", "loss_prop_act", "/", "PAN", "if", "not", "self", ".", "size_average", "else", "loss_prop_act", "\n", "loss_act_list", ".", "append", "(", "loss_act", ")", "\n", "loss_prop_act_list", ".", "append", "(", "loss_prop_act", ")", "\n", "\n", "", "loss_l_list", ".", "append", "(", "loss_l", ")", "\n", "loss_c_list", ".", "append", "(", "loss_c", ")", "\n", "loss_prop_l_list", ".", "append", "(", "loss_prop_l", ")", "\n", "loss_prop_c_list", ".", "append", "(", "loss_prop_c", ")", "\n", "loss_ct_list", ".", "append", "(", "loss_ct", ")", "\n", "\n", "# print(N, num_neg.sum())", "\n", "", "loss_l", "=", "sum", "(", "loss_l_list", ")", "/", "num_batch", "\n", "loss_c", "=", "sum", "(", "loss_c_list", ")", "/", "num_batch", "\n", "loss_ct", "=", "sum", "(", "loss_ct_list", ")", "/", "num_batch", "\n", "loss_prop_l", "=", "sum", "(", "loss_prop_l_list", ")", "/", "num_batch", "\n", "loss_prop_c", "=", "sum", "(", "loss_prop_c_list", ")", "/", "num_batch", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "loss_act", "=", "sum", "(", "loss_act_list", ")", "/", "num_batch", "\n", "loss_prop_act", "=", "sum", "(", "loss_prop_act_list", ")", "/", "num_batch", "\n", "", "else", ":", "\n", "            ", "loss_act", ",", "loss_prop_act", "=", "None", ",", "None", "\n", "\n", "", "return", "loss_l", ",", "loss_c", ",", "loss_prop_l", ",", "loss_prop_c", ",", "loss_ct", ",", "loss_act", ",", "loss_prop_act", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.multisegment_loss.log_sum_exp": [[8, 17], ["x.data.max", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["def", "log_sum_exp", "(", "x", ")", ":", "\n", "    ", "\"\"\"Utility function for computing log_sum_exp while determining\n    This will be used to determine unaveraged confidence loss across\n    all examples in a batch.\n    Args:\n        x (Variable(tensor)): conf_preds from conf layers\n    \"\"\"", "\n", "x_max", "=", "x", ".", "data", ".", "max", "(", ")", "\n", "return", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "x", "-", "x_max", ")", ",", "1", ",", "keepdim", "=", "True", ")", ")", "+", "x_max", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.multisegment_loss.iou_loss": [[19, 53], ["torch.finfo", "torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "area_union.clamp", "loss.mean.sum", "weight.view", "loss.mean.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "loss.mean.size", "ac_uion.clamp"], "function", ["None"], ["", "def", "iou_loss", "(", "pred", ",", "target", ",", "weight", "=", "None", ",", "loss_type", "=", "'giou'", ",", "reduction", "=", "'none'", ")", ":", "\n", "    ", "\"\"\"\n    jaccard: A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\n    \"\"\"", "\n", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "target_area", "=", "target_left", "+", "target_right", "\n", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "area_union", "=", "target_area", "+", "pred_area", "-", "inter", "\n", "ious", "=", "inter", "/", "area_union", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "\n", "if", "loss_type", "==", "'linear_iou'", ":", "\n", "        ", "loss", "=", "1.0", "-", "ious", "\n", "", "elif", "loss_type", "==", "'giou'", ":", "\n", "        ", "ac_uion", "=", "torch", ".", "max", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "max", "(", "pred_right", ",", "target_right", ")", "\n", "gious", "=", "ious", "-", "(", "ac_uion", "-", "area_union", ")", "/", "ac_uion", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "loss", "=", "1.0", "-", "gious", "\n", "", "else", ":", "\n", "        ", "loss", "=", "ious", "\n", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "loss", "=", "loss", "*", "weight", ".", "view", "(", "loss", ".", "size", "(", ")", ")", "\n", "", "if", "reduction", "==", "'sum'", ":", "\n", "        ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "elif", "reduction", "==", "'mean'", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.multisegment_loss.calc_ioa": [[55, 67], ["torch.finfo", "torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "pred_area.clamp"], "function", ["None"], ["", "def", "calc_ioa", "(", "pred", ",", "target", ")", ":", "\n", "    ", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "ioa", "=", "inter", "/", "pred_area", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "return", "ioa", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.multisegment_loss.gen_bounds": [[74, 84], ["priors.size", "priors[].clone", "priors[].clone", "range", "prior_lb.unsqueeze.unsqueeze", "prior_rb.unsqueeze.unsqueeze", "int", "int"], "function", ["None"], ["def", "gen_bounds", "(", "priors", ")", ":", "\n", "    ", "global", "prior_lb", ",", "prior_rb", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "prior_lb", "=", "priors", "[", ":", ",", "1", "]", ".", "clone", "(", ")", "\n", "prior_rb", "=", "priors", "[", ":", ",", "1", "]", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "prior_lb", "[", "i", "]", "=", "bounds", "[", "int", "(", "prior_lb", "[", "i", "]", ")", "]", "[", "0", "]", "\n", "prior_rb", "[", "i", "]", "=", "bounds", "[", "int", "(", "prior_rb", "[", "i", "]", ")", "]", "[", "1", "]", "\n", "", "prior_lb", "=", "prior_lb", ".", "unsqueeze", "(", "1", ")", "\n", "prior_rb", "=", "prior_rb", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.FocalLoss_Ori.__init__": [[19, 41], ["torch.Module.__init__", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "isinstance", "len", "list", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "alpha", "=", "[", "0.25", ",", "0.75", "]", ",", "gamma", "=", "2", ",", "balance_index", "=", "-", "1", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss_Ori", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n", "if", "isinstance", "(", "self", ".", "alpha", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "alpha", ")", "==", "self", ".", "num_class", "\n", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "list", "(", "self", ".", "alpha", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "alpha", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "assert", "0", "<", "self", ".", "alpha", "<", "1.0", ",", "'alpha should be in `(0,1)`)'", "\n", "assert", "balance_index", ">", "-", "1", "\n", "alpha", "=", "torch", ".", "ones", "(", "(", "self", ".", "num_class", ")", ")", "\n", "alpha", "*=", "1", "-", "self", ".", "alpha", "\n", "alpha", "[", "balance_index", "]", "=", "self", ".", "alpha", "\n", "self", ".", "alpha", "=", "alpha", "\n", "", "elif", "isinstance", "(", "self", ".", "alpha", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "alpha", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Not support alpha type, expect `int|float|list|tuple|torch.Tensor`'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.FocalLoss_Ori.forward": [[42, 77], ["target.view.view.view", "pt.log", "cls_loss.FocalLoss_Ori.alpha.gather", "logit.view.view.dim", "logit.view.view.view", "logit.view.view.transpose().contiguous", "logit.view.view.view", "logit.view.view.gather().view", "cls_loss.FocalLoss_Ori.alpha.to", "target.view.view.view", "loss.sum.sum.mean", "loss.sum.sum.sum", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "logit.view.view.transpose", "logit.view.view.gather", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "\"\"\" logit: softmax scores (N, K+1)\n            target: integeral labels (N, 1) \\in [0,...,K]\n        \"\"\"", "\n", "if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "            ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# [N,C,d1*d2..] -> [N,d1*d2..,C]", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "# [N,d1*d2..,C]-> [N*d1*d2..,C]", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "# [N,d1,d2,...]->[N*d1*d2*...,1]", "\n", "\n", "# -----------legacy way------------", "\n", "#  idx = target.cpu().long()", "\n", "# one_hot_key = torch.FloatTensor(target.size(0), self.num_class).zero_()", "\n", "# one_hot_key = one_hot_key.scatter_(1, idx, 1)", "\n", "# if one_hot_key.device != logit.device:", "\n", "#     one_hot_key = one_hot_key.to(logit.device)", "\n", "# pt = (one_hot_key * logit).sum(1) + epsilon", "\n", "\n", "# ----------memory saving way--------", "\n", "pt", "=", "logit", ".", "gather", "(", "1", ",", "target", ")", ".", "view", "(", "-", "1", ")", "+", "self", ".", "eps", "# avoid apply", "\n", "logpt", "=", "pt", ".", "log", "(", ")", "\n", "\n", "if", "self", ".", "alpha", ".", "device", "!=", "logpt", ".", "device", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "to", "(", "logpt", ".", "device", ")", "\n", "\n", "", "alpha_class", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "alpha_class", "*", "logpt", "\n", "loss", "=", "-", "1", "*", "torch", ".", "pow", "(", "torch", ".", "sub", "(", "1.0", ",", "pt", ")", ",", "self", ".", "gamma", ")", "*", "logpt", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.__init__": [[80, 102], ["torch.Module.__init__", "float", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_cls", ",", "cfg", ",", "size_average", "=", "False", ")", ":", "\n", "        ", "super", "(", "EvidenceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "loss_type", "=", "cfg", "[", "'loss_type'", "]", "\n", "self", ".", "evidence", "=", "cfg", "[", "'evidence'", "]", "\n", "self", ".", "iou_aware", "=", "cfg", "[", "'iou_aware'", "]", "if", "'iou_aware'", "in", "cfg", "else", "False", "\n", "self", ".", "with_ghm", "=", "cfg", "[", "'with_ghm'", "]", "if", "'with_ghm'", "in", "cfg", "else", "False", "\n", "self", ".", "with_ibm", "=", "cfg", "[", "'with_ibm'", "]", "if", "'with_ibm'", "in", "cfg", "else", "False", "\n", "self", ".", "eps", "=", "1e-10", "\n", "if", "self", ".", "with_ghm", ":", "\n", "            ", "self", ".", "num_bins", "=", "cfg", "[", "'num_bins'", "]", "\n", "self", ".", "momentum", "=", "cfg", "[", "'momentum'", "]", "\n", "self", ".", "ghm_start", "=", "cfg", "[", "'ghm_start'", "]", "if", "'ghm_start'", "in", "cfg", "else", "0", "\n", "self", ".", "edges", "=", "[", "float", "(", "x", ")", "/", "self", ".", "num_bins", "for", "x", "in", "range", "(", "self", ".", "num_bins", "+", "1", ")", "]", "\n", "self", ".", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "self", ".", "momentum", ">", "0", ":", "\n", "                ", "self", ".", "acc_sum", "=", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "num_bins", ")", "]", "\n", "", "", "if", "self", ".", "with_ibm", ":", "\n", "            ", "self", ".", "ibm_start", "=", "cfg", "[", "'ibm_start'", "]", "if", "'ibm_start'", "in", "cfg", "else", "0", "\n", "self", ".", "coeff", "=", "cfg", "[", "'ibm_coeff'", "]", "if", "'ibm_coeff'", "in", "cfg", "else", "10", "\n", "", "self", ".", "epoch", ",", "self", ".", "total_epoch", "=", "0", ",", "25", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.iou_calib": [[104, 114], ["cls_loss.EvidenceLoss.evidence_func", "pred_alpha.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], ["", "def", "iou_calib", "(", "self", ",", "logits", ",", "ious", ",", "mean", "=", "False", ")", ":", "\n", "        ", "\"\"\" logit, shape=(N, K)\n            ious, shape=(N)\n        \"\"\"", "\n", "ious", "[", "ious", "<", "0", "]", "=", "1e-3", "\n", "pred_alpha", "=", "self", ".", "evidence_func", "(", "logits", ")", "+", "1", "# (alpha = e + 1)", "\n", "uncertainty", "=", "self", ".", "num_cls", "/", "pred_alpha", ".", "sum", "(", "dim", "=", "-", "1", ")", "# (N,)", "\n", "iou_reg", "=", "-", "ious", "*", "torch", ".", "log", "(", "1", "-", "uncertainty", ")", "-", "(", "1", "-", "ious", ")", "*", "torch", ".", "log", "(", "uncertainty", ")", "\n", "iou_reg", "=", "torch", ".", "mean", "(", "iou_reg", ")", "if", "mean", "else", "torch", ".", "sum", "(", "iou_reg", ")", "\n", "return", "iou_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.forward": [[116, 151], ["target.view.view.view", "dict", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "cls_loss.EvidenceLoss.get_loss_func", "loss", "dict.update", "loss.items", "dict.update", "logit.view.view.dim", "logit.view.view.view", "logit.view.view.transpose().contiguous", "logit.view.view.view", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "cls_loss.EvidenceLoss.evidence_func", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "logit.view.view.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.get_loss_func", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], ["", "def", "forward", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "\"\"\" logit, shape=(N, K+1)\n            target, shape=(N, 1)\n        \"\"\"", "\n", "if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "            ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# [N,C,d1*d2..] -> [N,d1*d2..,C]", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "# [N,d1*d2..,C]-> [N*d1*d2..,C]", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ")", "# [N,d1,d2,...]->[N*d1*d2*...,]", "\n", "\n", "out_dict", "=", "dict", "(", ")", "\n", "\n", "# one-hot embedding for the target", "\n", "y", "=", "torch", ".", "eye", "(", "self", ".", "num_cls", ")", ".", "to", "(", "logit", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "y", "=", "y", "[", "target", "]", "# (N, K+1)", "\n", "\n", "# get loss func", "\n", "loss", ",", "func", "=", "self", ".", "get_loss_func", "(", ")", "\n", "\n", "# L_1 norm of feature", "\n", "feat_norm", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "logit", ")", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "if", "self", ".", "with_ibm", "else", "None", "\n", "\n", "# compute losses", "\n", "pred_alpha", "=", "self", ".", "evidence_func", "(", "logit", ")", "+", "1", "# (alpha = e + 1)", "\n", "loss_out", "=", "loss", "(", "y", ",", "pred_alpha", ",", "func", "=", "func", ",", "target", "=", "target", ",", "feat_norm", "=", "feat_norm", ")", "\n", "out_dict", ".", "update", "(", "loss_out", ")", "\n", "\n", "# accumulate total loss", "\n", "total_loss", "=", "0", "\n", "for", "k", ",", "v", "in", "loss_out", ".", "items", "(", ")", ":", "\n", "            ", "if", "'loss'", "in", "k", ":", "\n", "                ", "total_loss", "+=", "v", "\n", "", "", "out_dict", ".", "update", "(", "{", "'total_loss'", ":", "total_loss", "}", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.get_loss_func": [[153, 162], ["None"], "methods", ["None"], ["", "def", "get_loss_func", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "return", "self", ".", "mse_loss", ",", "None", "\n", "", "elif", "self", ".", "loss_type", "==", "'log'", ":", "\n", "            ", "return", "self", ".", "edl_loss", ",", "torch", ".", "log", "\n", "", "elif", "self", ".", "loss_type", "==", "'digamma'", ":", "\n", "            ", "return", "self", ".", "edl_loss", ",", "torch", ".", "digamma", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.evidence_func": [[164, 173], ["torch.relu", "torch.relu", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.softplus", "torch.softplus", "torch.softplus", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "", "def", "evidence_func", "(", "self", ",", "logit", ")", ":", "\n", "        ", "if", "self", ".", "evidence", "==", "'relu'", ":", "\n", "            ", "return", "F", ".", "relu", "(", "logit", ")", "\n", "\n", "", "if", "self", ".", "evidence", "==", "'exp'", ":", "\n", "            ", "return", "torch", ".", "exp", "(", "torch", ".", "clamp", "(", "logit", ",", "-", "10", ",", "10", ")", ")", "\n", "\n", "", "if", "self", ".", "evidence", "==", "'softplus'", ":", "\n", "            ", "return", "F", ".", "softplus", "(", "logit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.mse_loss": [[175, 192], ["cls_loss.EvidenceLoss.loglikelihood_loss", "losses.update", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.loglikelihood_loss"], ["", "", "def", "mse_loss", "(", "self", ",", "y", ",", "alpha", ",", "func", "=", "None", ",", "target", "=", "None", ",", "feat_norm", "=", "None", ")", ":", "\n", "        ", "\"\"\"Used only for loss_type == 'mse'\n        y: the one-hot labels (batchsize, num_classes)\n        alpha: the predictions (batchsize, num_classes)\n        annealing_coef: dependent on training epoch\n        \"\"\"", "\n", "losses", "=", "{", "}", "\n", "# compute loss by considering the temporal penalty", "\n", "loglikelihood_err", ",", "loglikelihood_var", "=", "self", ".", "loglikelihood_loss", "(", "y", ",", "alpha", ")", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loglikelihood_err", "=", "torch", ".", "mean", "(", "loglikelihood_err", ")", "\n", "loglikelihood_var", "=", "torch", ".", "mean", "(", "loglikelihood_var", ")", "\n", "", "else", ":", "\n", "            ", "loglikelihood_err", "=", "torch", ".", "sum", "(", "loglikelihood_err", ")", "\n", "loglikelihood_var", "=", "torch", ".", "sum", "(", "loglikelihood_var", ")", "\n", "", "losses", ".", "update", "(", "{", "'cls_loss'", ":", "loglikelihood_err", ",", "'var_loss'", ":", "loglikelihood_var", "}", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.edl_loss": [[194, 240], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.update", "alpha.detach().clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "alpha.detach().clone.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "inds.sum().item", "alpha.detach().clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "alpha.detach", "alpha.detach().clone.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "inds.sum", "func", "func", "alpha.detach", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "func", "func", "func", "func"], "methods", ["None"], ["", "def", "edl_loss", "(", "self", ",", "y", ",", "alpha", ",", "func", "=", "torch", ".", "log", ",", "target", "=", "None", ",", "feat_norm", "=", "None", ")", ":", "\n", "        ", "\"\"\"Used for both loss_type == 'log' and loss_type == 'digamma'\n        y: the one-hot labels (batchsize, num_classes)\n        alpha: the predictions (batchsize, num_classes)\n        annealing_coef: dependent on training epoch\n        func: function handler (torch.log, or torch.digamma)\n        \"\"\"", "\n", "losses", "=", "{", "}", "\n", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# (B, 1)", "\n", "if", "self", ".", "with_ghm", "and", "self", ".", "epoch", ">=", "self", ".", "ghm_start", ":", "\n", "            ", "alpha_pred", "=", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "# (N, K)", "\n", "uncertainty", "=", "self", ".", "num_cls", "/", "alpha_pred", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# (N, 1)", "\n", "# gradient length", "\n", "grad_norm", "=", "torch", ".", "abs", "(", "1", "/", "alpha_pred", "-", "uncertainty", ")", "*", "y", "# y_ij * (1/alpha_ij - u_i)", "\n", "n", "=", "0", "# n valid bins", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "alpha", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_bins", ")", ":", "\n", "                ", "inds", "=", "(", "grad_norm", ">=", "self", ".", "edges", "[", "i", "]", ")", "&", "(", "grad_norm", "<", "self", ".", "edges", "[", "i", "+", "1", "]", ")", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                    ", "if", "self", ".", "momentum", ">", "0", ":", "\n", "                        ", "self", ".", "acc_sum", "[", "i", "]", "=", "self", ".", "momentum", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "1.0", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                        ", "weights", "[", "inds", "]", "=", "1.0", "/", "num_in_bin", "\n", "", "n", "+=", "1", "\n", "", "", "if", "n", ">", "0", ":", "\n", "                ", "weights", "=", "weights", "/", "n", "\n", "# compute the weighted EDL loss", "\n", "", "cls_loss", "=", "torch", ".", "sum", "(", "y", "*", "weights", "*", "(", "func", "(", "S", ")", "-", "func", "(", "alpha", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "with_ibm", "and", "self", ".", "epoch", ">=", "self", ".", "ibm_start", ":", "\n", "            ", "alpha_pred", "=", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "# (N, K)", "\n", "uncertainty", "=", "self", ".", "num_cls", "/", "alpha_pred", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# (N, 1)", "\n", "grad_norm", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "1", "/", "alpha_pred", "-", "uncertainty", ")", "*", "y", ",", "dim", "=", "1", ")", "# sum_j|y_ij * (1/alpha_ij - u_i)|, (N)", "\n", "weights", "=", "1.0", "/", "(", "feat_norm", "*", "torch", ".", "exp", "(", "self", ".", "coeff", "*", "grad_norm", ")", "+", "self", ".", "eps", ")", "# influence-balanced weight", "\n", "# compute the weighted EDL loss", "\n", "cls_loss", "=", "weights", "*", "torch", ".", "sum", "(", "y", "*", "(", "func", "(", "S", ")", "-", "func", "(", "alpha", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "cls_loss", "=", "torch", ".", "sum", "(", "y", "*", "(", "func", "(", "S", ")", "-", "func", "(", "alpha", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "size_average", ":", "\n", "            ", "cls_loss", "=", "torch", ".", "mean", "(", "cls_loss", ")", "\n", "", "else", ":", "\n", "            ", "cls_loss", "=", "torch", ".", "sum", "(", "cls_loss", ")", "\n", "", "losses", ".", "update", "(", "{", "'cls_loss'", ":", "cls_loss", "}", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.EvidenceLoss.loglikelihood_loss": [[242, 247], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "loglikelihood_loss", "(", "self", ",", "y", ",", "alpha", ")", ":", "\n", "        ", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "loglikelihood_err", "=", "torch", ".", "sum", "(", "(", "y", "-", "(", "alpha", "/", "S", ")", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "loglikelihood_var", "=", "torch", ".", "sum", "(", "alpha", "*", "(", "S", "-", "alpha", ")", "/", "(", "S", "*", "S", "*", "(", "S", "+", "1", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "loglikelihood_err", ",", "loglikelihood_var", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.ActionnessLoss.__init__": [[250, 255], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "False", ",", "weight", "=", "0.1", ",", "margin", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ActionnessLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet.cls_loss.ActionnessLoss.forward": [[256, 297], ["target.view", "pos_pred.numel", "neg_pred.numel", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "logit.view.view.dim", "logit.view.view.view", "logit.view.view.transpose().contiguous", "logit.view.view.view", "logit.view.view.view", "min", "neg_pred.sort", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "logit.view.view.transpose", "pos_clean_pred.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "\"\"\" logit, shape=(N, 1), unbounded logits\n            target, shape=(N, 1) bianry values\n        \"\"\"", "\n", "if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "            ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# [N,C,d1*d2..] -> [N,d1*d2..,C]", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "# [N,d1*d2..,C]-> [N*d1*d2..,C]", "\n", "", "label", "=", "target", ".", "view", "(", "-", "1", ")", "# [N,d1,d2,...]->[N*d1*d2*...,]", "\n", "pred", "=", "logit", ".", "view", "(", "-", "1", ")", "if", "logit", ".", "size", "(", "-", "1", ")", "==", "1", "else", "logit", "\n", "\n", "# split the predictions into positive and negative setss", "\n", "pos_pred", ",", "pos_label", "=", "pred", "[", "label", ">", "0", "]", ",", "label", "[", "label", ">", "0", "]", "\n", "neg_pred", ",", "neg_label", "=", "pred", "[", "label", "==", "0", "]", ",", "label", "[", "label", "==", "0", "]", "\n", "\n", "num_pos", "=", "pos_pred", ".", "numel", "(", ")", "\n", "num_neg", "=", "neg_pred", ".", "numel", "(", ")", "\n", "topM", "=", "min", "(", "num_pos", ",", "num_neg", ")", "-", "1", "# reserve one for rank loss", "\n", "if", "topM", ">", "0", ":", "# both pos and neg sets have at least 2 samples", "\n", "            ", "_", ",", "inds", "=", "neg_pred", ".", "sort", "(", ")", "# by default, it is ascending sort", "\n", "# select the top-M negatives", "\n", "neg_clean_pred", "=", "neg_pred", "[", "inds", "[", ":", "topM", "]", "]", "\n", "neg_clean_label", "=", "neg_label", "[", "inds", "[", ":", "topM", "]", "]", "\n", "pred", "=", "torch", ".", "cat", "(", "(", "pos_pred", ",", "neg_clean_pred", ")", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "cat", "(", "(", "pos_label", ",", "neg_clean_label", ")", ",", "dim", "=", "0", ")", "\n", "num_neg", "=", "topM", "\n", "\n", "# compute BCE loss", "\n", "", "reduction", "=", "'mean'", "if", "self", ".", "size_average", "else", "'sum'", "\n", "loss_bce", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pred", ",", "label", ",", "reduction", "=", "reduction", ")", "\n", "\n", "# compute rank loss", "\n", "loss_rank", "=", "0", "\n", "if", "topM", ">", "0", ":", "\n", "            ", "neg_noisy_pred", ",", "_", "=", "torch", ".", "max", "(", "neg_pred", ",", "dim", "=", "0", ")", "\n", "pos_clean_pred", ",", "_", "=", "torch", ".", "max", "(", "pos_pred", ",", "dim", "=", "0", ")", "\n", "loss_rank", "=", "torch", ".", "maximum", "(", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "pred", ".", "device", ")", ",", "self", ".", "margin", "-", "neg_noisy_pred", "+", "pos_clean_pred", ".", "detach", "(", ")", ")", "\n", "\n", "", "loss_total", "=", "loss_bce", "+", "self", ".", "weight", "*", "loss_rank", "\n", "return", "loss_total", ",", "num_pos", "+", "num_neg", "", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet_data.video2npy.sub_processor": [[24, 47], ["open", "open.close", "os.path.join", "os.path.join", "cv2.VideoCapture", "cv2.VideoCapture.get", "numpy.stack", "print", "numpy.save", "os.path.dirname", "os.path.splitext", "os.path.join", "cv2.VideoCapture.read", "np.stack.append", "len", "print", "open.writelines"], "function", ["None"], ["def", "sub_processor", "(", "pid", ",", "files", ")", ":", "\n", "    ", "fid", "=", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "video_dir", ")", ",", "'problematic_videos.txt'", ")", ",", "'w'", ")", "\n", "for", "file", "in", "files", "[", ":", "]", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "0", "]", "\n", "target_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file_name", "+", "'.npy'", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "os", ".", "path", ".", "join", "(", "video_dir", ",", "file", ")", ")", "\n", "count", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", "\n", "imgs", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "if", "not", "ret", ":", "\n", "                ", "break", "\n", "", "imgs", ".", "append", "(", "frame", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "if", "count", "!=", "len", "(", "imgs", ")", ":", "\n", "            ", "print", "(", "'{} frame num is less'", ".", "format", "(", "file_name", ")", ")", "\n", "fid", ".", "writelines", "(", "file", "+", "'\\n'", ")", "\n", "continue", "\n", "", "imgs", "=", "np", ".", "stack", "(", "imgs", ")", "\n", "print", "(", "imgs", ".", "shape", ")", "\n", "if", "max_frame_num", "is", "not", "None", ":", "\n", "            ", "imgs", "=", "imgs", "[", ":", "max_frame_num", "]", "\n", "", "np", ".", "save", "(", "target_file", ",", "imgs", ")", "\n", "", "fid", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet_data.flow2npy.load_json": [[27, 35], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "file", ")", ":", "\n", "    ", "\"\"\"\n    :param file: json file path\n    :return: data of json\n    \"\"\"", "\n", "with", "open", "(", "file", ")", "as", "json_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet_data.flow2npy.sub_processor": [[45, 72], ["print", "sorted", "sorted", "os.path.join", "zip", "numpy.stack", "numpy.save", "glob.glob", "glob.glob", "len", "len", "len", "len", "sorted.append", "sorted.append", "numpy.stack", "np.stack.append", "os.path.join", "os.path.join", "cv2.imread", "cv2.imread"], "function", ["None"], ["def", "sub_processor", "(", "pid", ",", "video_list", ")", ":", "\n", "    ", "for", "video_name", "in", "video_list", ":", "\n", "        ", "tmp", "=", "[", "]", "\n", "print", "(", "video_name", ")", "\n", "flow_x_files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "flow_frame_path", ",", "video_name", ",", "'flow_x_*.jpg'", ")", ")", ")", "\n", "flow_y_files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "flow_frame_path", ",", "video_name", ",", "'flow_y_*.jpg'", ")", ")", ")", "\n", "assert", "len", "(", "flow_x_files", ")", ">", "0", "\n", "assert", "len", "(", "flow_x_files", ")", "==", "len", "(", "flow_y_files", ")", "\n", "\n", "frame_num", "=", "json_data", "[", "video_name", "]", "[", "'frame_num'", "]", "\n", "fps", "=", "json_data", "[", "video_name", "]", "[", "'fps'", "]", "\n", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "flow_npy_path", ",", "video_name", "+", "'.npy'", ")", "\n", "\n", "while", "len", "(", "flow_x_files", ")", "<", "frame_num", ":", "\n", "            ", "flow_x_files", ".", "append", "(", "flow_x_files", "[", "-", "1", "]", ")", "\n", "flow_y_files", ".", "append", "(", "flow_y_files", "[", "-", "1", "]", ")", "\n", "", "for", "flow_x", ",", "flow_y", "in", "zip", "(", "flow_x_files", ",", "flow_y_files", ")", ":", "\n", "            ", "flow_x", "=", "cv2", ".", "imread", "(", "flow_x", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "flow_y", "=", "cv2", ".", "imread", "(", "flow_y", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "img", "=", "np", ".", "stack", "(", "[", "flow_x", ",", "flow_y", "]", ",", "-", "1", ")", "\n", "tmp", ".", "append", "(", "img", ")", "\n", "\n", "", "tmp", "=", "np", ".", "stack", "(", "tmp", ",", "0", ")", "\n", "if", "max_frame_num", "is", "not", "None", ":", "\n", "            ", "tmp", "=", "tmp", "[", ":", "max_frame_num", "]", "\n", "", "np", ".", "save", "(", "output_file", ",", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet_data.gen_video_info.load_json": [[10, 18], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "file", ")", ":", "\n", "    ", "\"\"\"\n    :param file: json file path\n    :return: data of json\n    \"\"\"", "\n", "with", "open", "(", "file", ")", "as", "json_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.anet_data.transform_videos.sub_processor": [[26, 45], ["os.path.join", "os.path.exists", "cv2.VideoCapture", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "min", "os.system", "os.path.splitext", "print", "os.path.join", "os.path.join"], "function", ["None"], ["def", "sub_processor", "(", "pid", ",", "files", ")", ":", "\n", "    ", "for", "file", "in", "files", "[", ":", "]", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "0", "]", "\n", "target_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file_name", "+", "'.mp4'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "target_file", ")", ":", "\n", "            ", "print", "(", "'{} exists, skip.'", ".", "format", "(", "target_file", ")", ")", "\n", "continue", "\n", "", "cap", "=", "cv2", ".", "VideoCapture", "(", "os", ".", "path", ".", "join", "(", "video_dir", ",", "file", ")", ")", "\n", "max_fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "frame_num", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", "\n", "ratio", "=", "min", "(", "max_frame", "*", "1.0", "/", "frame_num", ",", "1.0", ")", "\n", "target_fps", "=", "max_fps", "*", "ratio", "\n", "cmd", "=", "'ffmpeg -v quiet -i {} -qscale 0 -r {} -s {} -y {}'", ".", "format", "(", "\n", "os", ".", "path", ".", "join", "(", "video_dir", ",", "file", ")", ",", "\n", "target_fps", ",", "\n", "resolution", ",", "\n", "target_file", "\n", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.prop_pooling.boundary_pooling_op.BoundaryMaxPoolingFunction.forward": [[8, 13], ["boundary_max_pooling_cuda.forward", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.RPLHead.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "segments", ")", ":", "\n", "        ", "output", "=", "boundary_max_pooling_cuda", ".", "forward", "(", "input", ",", "segments", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "segments", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.prop_pooling.boundary_pooling_op.BoundaryMaxPoolingFunction.backward": [[14, 25], ["boundary_max_pooling_cuda.backward", "grad_output.contiguous.contiguous.is_contiguous", "grad_output.contiguous.contiguous.contiguous"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.prop_pooling.boundary_pooling_op.BoundaryMaxPoolingFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_contiguous", "(", ")", ":", "\n", "            ", "grad_output", "=", "grad_output", ".", "contiguous", "(", ")", "\n", "", "input", ",", "segments", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "boundary_max_pooling_cuda", ".", "backward", "(", "\n", "grad_output", ",", "\n", "input", ",", "\n", "segments", "\n", ")", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.prop_pooling.boundary_pooling_op.BoundaryMaxPooling.__init__": [[28, 30], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BoundaryMaxPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.prop_pooling.boundary_pooling_op.BoundaryMaxPooling.forward": [[31, 33], ["BoundaryMaxPoolingFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "segments", ")", ":", "\n", "        ", "return", "BoundaryMaxPoolingFunction", ".", "apply", "(", "input", ",", "segments", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.get_blocked_videos": [[13, 18], ["urllib.request.Request", "urllib.request.urlopen", "json.loads", "urllib.request.urlopen.read().decode", "urllib.request.urlopen.read"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.decode"], ["def", "get_blocked_videos", "(", "api", "=", "API", ")", ":", "\n", "    ", "api_url", "=", "'{}?action=get_blocked'", ".", "format", "(", "api", ")", "\n", "req", "=", "urllib", ".", "request", ".", "Request", "(", "api_url", ")", "\n", "response", "=", "urllib", ".", "request", ".", "urlopen", "(", "req", ")", "\n", "return", "json", ".", "loads", "(", "response", ".", "read", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.interpolated_prec_rec": [[20, 30], ["numpy.hstack", "numpy.hstack", "numpy.sum", "range", "max", "numpy.where", "len"], "function", ["None"], ["", "def", "interpolated_prec_rec", "(", "prec", ",", "rec", ")", ":", "\n", "    ", "\"\"\"Interpolated AP - VOCdevkit from VOC 2011.\n    \"\"\"", "\n", "mprec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "prec", ",", "[", "0", "]", "]", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "rec", ",", "[", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mprec", ")", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "mprec", "[", "i", "]", "=", "max", "(", "mprec", "[", "i", "]", ",", "mprec", "[", "i", "+", "1", "]", ")", "\n", "", "idx", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "idx", "]", "-", "mrec", "[", "idx", "-", "1", "]", ")", "*", "mprec", "[", "idx", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.segment_iou": [[32, 59], ["numpy.maximum", "numpy.minimum", "segments_intersection.astype"], "function", ["None"], ["", "def", "segment_iou", "(", "target_segment", ",", "candidate_segments", ")", ":", "\n", "    ", "\"\"\"Compute the temporal intersection over union between a\n    target segment and all the test segments.\n\n    Parameters\n    ----------\n    target_segment : 1d array\n        Temporal target segment containing [starting, ending] times.\n    candidate_segments : 2d array\n        Temporal candidate segments containing N x [starting, ending] times.\n\n    Outputs\n    -------\n    tiou : 1d array\n        Temporal intersection over union score of the N's candidate segments.\n    \"\"\"", "\n", "tt1", "=", "np", ".", "maximum", "(", "target_segment", "[", "0", "]", ",", "candidate_segments", "[", ":", ",", "0", "]", ")", "\n", "tt2", "=", "np", ".", "minimum", "(", "target_segment", "[", "1", "]", ",", "candidate_segments", "[", ":", ",", "1", "]", ")", "\n", "# Intersection including Non-negative overlap score.", "\n", "segments_intersection", "=", "(", "tt2", "-", "tt1", ")", ".", "clip", "(", "0", ")", "\n", "# Segment union.", "\n", "segments_union", "=", "(", "candidate_segments", "[", ":", ",", "1", "]", "-", "candidate_segments", "[", ":", ",", "0", "]", ")", "+", "(", "target_segment", "[", "1", "]", "-", "target_segment", "[", "0", "]", ")", "-", "segments_intersection", "\n", "# Compute overlap as the ratio of the intersection", "\n", "# over union of two segments.", "\n", "tIoU", "=", "segments_intersection", ".", "astype", "(", "float", ")", "/", "segments_union", "\n", "return", "tIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.wrapper_segment_iou": [[61, 84], ["numpy.empty", "xrange", "ValueError", "utils_eval.segment_iou"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.segment_iou"], ["", "def", "wrapper_segment_iou", "(", "target_segments", ",", "candidate_segments", ")", ":", "\n", "    ", "\"\"\"Compute intersection over union btw segments\n    Parameters\n    ----------\n    target_segments : ndarray\n        2-dim array in format [m x 2:=[init, end]]\n    candidate_segments : ndarray\n        2-dim array in format [n x 2:=[init, end]]\n    Outputs\n    -------\n    tiou : ndarray\n        2-dim array [n x m] with IOU ratio.\n    Note: It assumes that candidate-segments are more scarce that target-segments\n    \"\"\"", "\n", "if", "candidate_segments", ".", "ndim", "!=", "2", "or", "target_segments", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'Dimension of arguments is incorrect'", ")", "\n", "\n", "", "n", ",", "m", "=", "candidate_segments", ".", "shape", "[", "0", "]", ",", "target_segments", ".", "shape", "[", "0", "]", "\n", "tiou", "=", "np", ".", "empty", "(", "(", "n", ",", "m", ")", ")", "\n", "for", "i", "in", "xrange", "(", "m", ")", ":", "\n", "        ", "tiou", "[", ":", ",", "i", "]", "=", "segment_iou", "(", "target_segments", "[", "i", ",", ":", "]", ",", "candidate_segments", ")", "\n", "\n", "", "return", "tiou", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.open_set_detection_rate": [[86, 134], ["numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "np.concatenate.argsort", "range", "sorted", "range", "len", "s_k_target[].sum", "s_u_target[].sum", "zip", "numpy.zeros", "numpy.zeros", "numpy.ones", "range", "range", "len", "len", "len", "len", "float", "float", "len", "float", "float", "len", "len"], "function", ["None"], ["", "def", "open_set_detection_rate", "(", "preds", ",", "pred_cls", ",", "gt_cls", ")", ":", "\n", "    ", "\"\"\" preds: ndarray, (N,), [0, 1]\n        pred_cls: ndarray, (N,), >0: known\n        gt_cls: ndarray, (N,), 0: unknown, >0: known\n    \"\"\"", "\n", "\n", "x1", ",", "x2", "=", "preds", "[", "gt_cls", ">", "0", "]", ",", "preds", "[", "gt_cls", "==", "0", "]", "# known preds & unknown preds", "\n", "m_x1", "=", "np", ".", "zeros", "(", "len", "(", "x1", ")", ")", "\n", "m_x1", "[", "pred_cls", "[", "gt_cls", ">", "0", "]", "==", "gt_cls", "[", "gt_cls", ">", "0", "]", "]", "=", "1", "# for known preds, fraction of correct cls", "\n", "k_target", "=", "np", ".", "concatenate", "(", "(", "m_x1", ",", "np", ".", "zeros", "(", "len", "(", "x2", ")", ")", ")", ",", "axis", "=", "0", ")", "# target of correct known (in all preds)", "\n", "u_target", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "x1", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "x2", ")", ")", ")", ",", "axis", "=", "0", ")", "# target of all unknown (in all preds)", "\n", "predict", "=", "np", ".", "concatenate", "(", "(", "x1", ",", "x2", ")", ",", "axis", "=", "0", ")", "# re-organize pred score", "\n", "n", "=", "len", "(", "preds", ")", "\n", "\n", "# Cutoffs are of prediction values", "\n", "CCR", "=", "[", "0", "for", "x", "in", "range", "(", "n", "+", "2", ")", "]", "\n", "FPR", "=", "[", "0", "for", "x", "in", "range", "(", "n", "+", "2", ")", "]", "\n", "\n", "# sort the targets by ascending order of predictions", "\n", "idx", "=", "predict", ".", "argsort", "(", ")", "\n", "s_k_target", "=", "k_target", "[", "idx", "]", "\n", "s_u_target", "=", "u_target", "[", "idx", "]", "\n", "\n", "# for each cut-off score", "\n", "for", "k", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "# accumulated sum", "\n", "        ", "CC", "=", "s_k_target", "[", "k", "+", "1", ":", "]", ".", "sum", "(", ")", "\n", "FP", "=", "s_u_target", "[", "k", ":", "]", ".", "sum", "(", ")", "\n", "# True\tPositive Rate", "\n", "CCR", "[", "k", "]", "=", "float", "(", "CC", ")", "/", "float", "(", "len", "(", "x1", ")", ")", "if", "len", "(", "x1", ")", ">", "0", "else", "1.0", "# fraction of correct classification in known preds", "\n", "# False Positive Rate", "\n", "FPR", "[", "k", "]", "=", "float", "(", "FP", ")", "/", "float", "(", "len", "(", "x2", ")", ")", "if", "len", "(", "x2", ")", ">", "0", "else", "0.0", "# fraction of unknown preds that are classified as any known", "\n", "\n", "# extreme cases", "\n", "", "CCR", "[", "n", "]", "=", "0.0", "\n", "FPR", "[", "n", "]", "=", "0.0", "\n", "CCR", "[", "n", "+", "1", "]", "=", "1.0", "\n", "FPR", "[", "n", "+", "1", "]", "=", "1.0", "\n", "\n", "# Positions of ROC curve (FPR, TPR)", "\n", "ROC", "=", "sorted", "(", "zip", "(", "FPR", ",", "CCR", ")", ",", "reverse", "=", "True", ")", "# descending order by FPR", "\n", "OSCR", "=", "0", "\n", "# Compute AUROC Using Trapezoidal Rule", "\n", "for", "j", "in", "range", "(", "n", "+", "1", ")", ":", "\n", "        ", "w", "=", "ROC", "[", "j", "]", "[", "0", "]", "-", "ROC", "[", "j", "+", "1", "]", "[", "0", "]", "# delta_FPR", "\n", "h", "=", "(", "ROC", "[", "j", "]", "[", "1", "]", "+", "ROC", "[", "j", "+", "1", "]", "[", "1", "]", ")", "/", "2.0", "# mean_CCR", "\n", "OSCR", "=", "OSCR", "+", "h", "*", "w", "# area under the curve", "\n", "", "return", "OSCR", ",", "FPR", ",", "CCR", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.save_curve_data": [[136, 171], ["os.makedirs", "open", "pickle.dump", "open", "pickle.dump", "matplotlib.figure", "enumerate", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "enumerate", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "os.path.join", "os.path.join", "zip", "matplotlib.plot", "os.path.join", "zip", "matplotlib.plot", "os.path.join"], "function", ["None"], ["", "def", "save_curve_data", "(", "roc_data", ",", "pr_data", ",", "save_path", ",", "vis", "=", "False", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "# save roc data", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'roc_data.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "roc_data", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "# save pr data", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'pr_data.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "pr_data", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "# draw curves", "\n", "", "if", "vis", ":", "\n", "        ", "line_styles", "=", "[", "'r-'", ",", "'c-'", ",", "'g-'", ",", "'b-'", ",", "'k'", "]", "\n", "# plot roc curve", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "for", "tidx", ",", "(", "fpr", ",", "tpr", ",", "auc", ",", "tiou", ")", "in", "enumerate", "(", "zip", "(", "roc_data", "[", "'fpr'", "]", ",", "roc_data", "[", "'tpr'", "]", ",", "roc_data", "[", "'auc'", "]", ",", "roc_data", "[", "'tiou'", "]", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "line_styles", "[", "tidx", "]", ",", "label", "=", "f'tIoU={tiou}, auc={auc*100:.2f}%'", ")", "\n", "", "plt", ".", "xlabel", "(", "'False Positive Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "'True Positive Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'AUC_ROC.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# plot pr curve", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "for", "tidx", ",", "(", "precision", ",", "recall", ",", "auc", ",", "tiou", ")", "in", "enumerate", "(", "zip", "(", "pr_data", "[", "'precision'", "]", ",", "pr_data", "[", "'recall'", "]", ",", "pr_data", "[", "'auc'", "]", ",", "pr_data", "[", "'tiou'", "]", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "recall", ",", "precision", ",", "line_styles", "[", "tidx", "]", ",", "label", "=", "f'tIoU={tiou}, auc={auc*100:.2f}%'", ")", "\n", "", "plt", ".", "xlabel", "(", "'Recall'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'AUC_PR.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.save_curve_osdr_data": [[173, 193], ["os.makedirs", "open", "pickle.dump", "matplotlib.figure", "enumerate", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "os.path.join", "zip", "matplotlib.plot", "os.path.join"], "function", ["None"], ["", "", "def", "save_curve_osdr_data", "(", "osdr_data", ",", "save_path", ",", "vis", "=", "False", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "# save roc data", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'osdr_data.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "osdr_data", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "# draw curves", "\n", "", "if", "vis", ":", "\n", "        ", "line_styles", "=", "[", "'r-'", ",", "'c-'", ",", "'g-'", ",", "'b-'", ",", "'k'", "]", "\n", "# plot roc curve", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "for", "tidx", ",", "(", "fpr", ",", "cdr", ",", "osdr", ",", "tiou", ")", "in", "enumerate", "(", "zip", "(", "osdr_data", "[", "'fpr'", "]", ",", "osdr_data", "[", "'cdr'", "]", ",", "osdr_data", "[", "'osdr'", "]", ",", "osdr_data", "[", "'tiou'", "]", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "fpr", "[", ":", "-", "2", "]", ",", "cdr", "[", ":", "-", "2", "]", ",", "line_styles", "[", "tidx", "]", ",", "label", "=", "f'tIoU={tiou}, auc={osdr*100:.2f}%'", ")", "\n", "", "plt", ".", "xlabel", "(", "'False Positive Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "'Correct Detection Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'AUC_OSDR.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.__init__": [[31, 86], ["numpy.linspace", "eval_detection.ANETdetection.get_activity_index", "eval_detection.ANETdetection._import_ground_truth", "eval_detection.ANETdetection._import_prediction", "IOError", "IOError", "utils_eval.get_blocked_videos", "list", "print", "len", "print", "len", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.get_activity_index", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection._import_ground_truth", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection._import_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.get_blocked_videos"], ["def", "__init__", "(", "self", ",", "ground_truth_filename", "=", "None", ",", "prediction_filename", "=", "None", ",", "cls_idx_detection", "=", "None", ",", "\n", "ground_truth_fields", "=", "GROUND_TRUTH_FIELDS", ",", "\n", "prediction_fields", "=", "PREDICTION_FIELDS", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ",", "\n", "ood_threshold", "=", "None", ",", "\n", "ood_scoring", "=", "'confidence'", ",", "\n", "subset", "=", "[", "'validation'", "]", ",", "\n", "openset", "=", "False", ",", "\n", "draw_auc", "=", "False", ",", "\n", "curve_data_path", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "check_status", "=", "False", ",", "\n", "dataset", "=", "'thumos14'", ")", ":", "\n", "        ", "if", "not", "ground_truth_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "", "if", "not", "prediction_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid prediction file.'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "self", ".", "tiou_thresholds", "=", "tiou_thresholds", "\n", "self", ".", "ood_threshold", "=", "ood_threshold", "\n", "self", ".", "ood_scoring", "=", "ood_scoring", "\n", "self", ".", "openset", "=", "openset", "\n", "self", ".", "draw_auc", "=", "draw_auc", "\n", "self", ".", "curve_data_path", "=", "curve_data_path", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "gt_fields", "=", "ground_truth_fields", "\n", "self", ".", "pred_fields", "=", "prediction_fields", "\n", "self", ".", "ap", "=", "None", "\n", "self", ".", "check_status", "=", "check_status", "\n", "assert", "dataset", "in", "[", "'thumos14'", ",", "'anet'", ",", "'thumos_anet'", "]", "\n", "self", ".", "dataset", "=", "dataset", "\n", "# Retrieve blocked videos from server.", "\n", "\n", "if", "self", ".", "check_status", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "get_blocked_videos", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "list", "(", ")", "\n", "\n", "# read the known classes info", "\n", "", "self", ".", "activity_index", "=", "self", ".", "get_activity_index", "(", "cls_idx_detection", ")", "\n", "\n", "# Import ground truth and predictions.", "\n", "self", ".", "ground_truth", ",", "self", ".", "video_lst", "=", "self", ".", "_import_ground_truth", "(", "\n", "ground_truth_filename", ")", "\n", "self", ".", "prediction", "=", "self", ".", "_import_prediction", "(", "prediction_filename", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[INIT] Loaded annotations from {} subset.'", ".", "format", "(", "subset", "[", "0", "]", ")", ")", "\n", "nr_gt", "=", "len", "(", "self", ".", "ground_truth", ")", "\n", "print", "(", "'\\tNumber of ground truth instances: {}'", ".", "format", "(", "nr_gt", ")", ")", "\n", "nr_pred", "=", "len", "(", "self", ".", "prediction", ")", "\n", "print", "(", "'\\tNumber of predictions: {}'", ".", "format", "(", "nr_pred", ")", ")", "\n", "print", "(", "'\\tFixed threshold for tiou score: {}'", ".", "format", "(", "self", ".", "tiou_thresholds", ")", ")", "\n", "", "if", "self", ".", "openset", ":", "\n", "            ", "self", ".", "stats", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.get_activity_index": [[87, 100], ["numpy.loadtxt", "enumerate", "open", "enumerate", "f.readlines", "line.strip"], "methods", ["None"], ["", "", "def", "get_activity_index", "(", "self", ",", "class_info_path", ")", ":", "\n", "        ", "class_to_idx", "=", "{", "}", "\n", "if", "self", ".", "openset", ":", "\n", "            ", "class_to_idx", "[", "'__unknown__'", "]", "=", "0", "# 0 is reserved for unknown in open set", "\n", "", "if", "self", ".", "dataset", "in", "[", "'thumos14'", ",", "'thumos_anet'", "]", ":", "\n", "            ", "txt", "=", "np", ".", "loadtxt", "(", "class_info_path", ",", "dtype", "=", "str", ")", "\n", "for", "idx", ",", "l", "in", "enumerate", "(", "txt", ")", ":", "\n", "                ", "class_to_idx", "[", "l", "[", "1", "]", "]", "=", "idx", "+", "1", "# starting from 1 to K (K=15 for thumos14)", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "class_info_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "                    ", "class_to_idx", "[", "line", ".", "strip", "(", ")", "]", "=", "idx", "+", "1", "# starting from 1 to K (K=150 for activitynet)", "\n", "", "", "", "return", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection._import_ground_truth": [[101, 148], ["data[].items", "pandas.DataFrame", "open", "json.load", "all", "IOError", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "float", "float", "label_lst.append", "json.load.keys", "label_lst.append", "label_lst.append"], "methods", ["None"], ["", "def", "_import_ground_truth", "(", "self", ",", "ground_truth_filename", ")", ":", "\n", "        ", "\"\"\"Reads ground truth file, checks if it is well formatted, and returns\n           the ground truth instances and the activity classes.\n\n        Parameters\n        ----------\n        ground_truth_filename : str\n            Full path to the ground truth json file.\n\n        Outputs\n        -------\n        ground_truth : df\n            Data frame containing the ground truth instances.\n        \"\"\"", "\n", "with", "open", "(", "ground_truth_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format", "\n", "", "if", "not", "all", "(", "[", "field", "in", "data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "gt_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "\n", "# Read ground truth data.", "\n", "", "video_lst", ",", "t_start_lst", ",", "t_end_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "# print(v)", "\n", "            ", "if", "v", "[", "'subset'", "]", "not", "in", "self", ".", "subset", ":", "\n", "                ", "continue", "\n", "", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "ann", "in", "v", "[", "'annotations'", "]", ":", "\n", "                ", "video_lst", ".", "append", "(", "videoid", ")", "\n", "t_start_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "t_end_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "openset", ":", "\n", "                    ", "if", "ann", "[", "'label'", "]", "in", "self", ".", "activity_index", ":", "\n", "                        ", "label_lst", ".", "append", "(", "self", ".", "activity_index", "[", "ann", "[", "'label'", "]", "]", ")", "\n", "", "else", ":", "\n", "                        ", "label_lst", ".", "append", "(", "0", ")", "# the unknown", "\n", "", "", "else", ":", "# closed set", "\n", "                    ", "assert", "ann", "[", "'label'", "]", "in", "self", ".", "activity_index", ",", "'Ground truth json contains invalid class: %s'", "%", "(", "ann", "[", "'label'", "]", ")", "\n", "label_lst", ".", "append", "(", "self", ".", "activity_index", "[", "ann", "[", "'label'", "]", "]", ")", "\n", "\n", "", "", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "return", "ground_truth", ",", "video_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection._import_prediction": [[149, 224], ["data[].items", "pandas.DataFrame", "open", "json.load", "all", "IOError", "pred_dict.update", "pred_dict.update", "ood_score_lst.append", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "label_lst.append", "score_lst.append", "uncertainty_lst.append", "float", "float", "json.load.keys", "uncertainty_lst.append", "actness_lst.append", "uncertainty_lst.append", "actness_lst.append", "uncertainty_lst.append", "actness_lst.append", "uncertainty_lst.append", "actness_lst.append"], "methods", ["None"], ["", "def", "_import_prediction", "(", "self", ",", "prediction_filename", ")", ":", "\n", "        ", "\"\"\"Reads prediction file, checks if it is well formatted, and returns\n           the prediction instances.\n\n        Parameters\n        ----------\n        prediction_filename : str\n            Full path to the prediction json file.\n\n        Outputs\n        -------\n        prediction : df\n            Data frame containing the prediction instances.\n        \"\"\"", "\n", "with", "open", "(", "prediction_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format...", "\n", "", "if", "not", "all", "(", "[", "field", "in", "data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "pred_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid prediction file.'", ")", "\n", "\n", "# Read predictions.", "\n", "", "video_lst", ",", "t_start_lst", ",", "t_end_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "label_lst", ",", "score_lst", ",", "uncertainty_lst", ",", "actness_lst", ",", "ood_score_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "if", "videoid", "not", "in", "self", ".", "video_lst", ":", "\n", "                ", "continue", "\n", "", "for", "result", "in", "v", ":", "\n", "                ", "if", "result", "[", "'label'", "]", "not", "in", "self", ".", "activity_index", ":", "\n", "                    ", "continue", "\n", "# known/unknown classification", "\n", "", "if", "self", ".", "ood_scoring", "==", "'uncertainty'", ":", "\n", "                    ", "res_score", "=", "result", "[", "'uncertainty'", "]", "\n", "uncertainty_lst", ".", "append", "(", "result", "[", "'uncertainty'", "]", ")", "\n", "", "elif", "self", ".", "ood_scoring", "==", "'confidence'", ":", "\n", "                    ", "res_score", "=", "1", "-", "result", "[", "'score'", "]", "\n", "", "elif", "self", ".", "ood_scoring", "==", "'uncertainty_actionness'", ":", "\n", "                    ", "res_score", "=", "result", "[", "'uncertainty'", "]", "*", "result", "[", "'actionness'", "]", "\n", "uncertainty_lst", ".", "append", "(", "result", "[", "'uncertainty'", "]", ")", "\n", "actness_lst", ".", "append", "(", "result", "[", "'actionness'", "]", ")", "\n", "", "elif", "self", ".", "ood_scoring", "==", "'a_by_inv_u'", ":", "\n", "                    ", "res_score", "=", "result", "[", "'actionness'", "]", "/", "(", "1", "-", "result", "[", "'uncertainty'", "]", "+", "1e-6", ")", "\n", "uncertainty_lst", ".", "append", "(", "result", "[", "'uncertainty'", "]", ")", "\n", "actness_lst", ".", "append", "(", "result", "[", "'actionness'", "]", ")", "\n", "", "elif", "self", ".", "ood_scoring", "==", "'u_by_inv_a'", ":", "\n", "                    ", "res_score", "=", "result", "[", "'uncertainty'", "]", "/", "(", "1", "-", "result", "[", "'actionness'", "]", "+", "1e-6", ")", "\n", "uncertainty_lst", ".", "append", "(", "result", "[", "'uncertainty'", "]", ")", "\n", "actness_lst", ".", "append", "(", "result", "[", "'actionness'", "]", ")", "\n", "", "elif", "self", ".", "ood_scoring", "==", "'half_au'", ":", "\n", "                    ", "res_score", "=", "0.5", "*", "(", "result", "[", "'actionness'", "]", "+", "1", ")", "*", "result", "[", "'uncertainty'", "]", "\n", "uncertainty_lst", ".", "append", "(", "result", "[", "'uncertainty'", "]", ")", "\n", "actness_lst", ".", "append", "(", "result", "[", "'actionness'", "]", ")", "\n", "", "ood_score_lst", ".", "append", "(", "res_score", ")", "\n", "if", "self", ".", "openset", "and", "self", ".", "ood_threshold", "is", "not", "None", "and", "res_score", "<", "self", ".", "ood_threshold", ":", "\n", "                    ", "label", "=", "self", ".", "activity_index", "[", "'__unknown__'", "]", "# reject the unknown", "\n", "", "else", ":", "\n", "                    ", "label", "=", "self", ".", "activity_index", "[", "result", "[", "'label'", "]", "]", "\n", "", "video_lst", ".", "append", "(", "videoid", ")", "\n", "t_start_lst", ".", "append", "(", "float", "(", "result", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "t_end_lst", ".", "append", "(", "float", "(", "result", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "label_lst", ".", "append", "(", "label", ")", "\n", "score_lst", ".", "append", "(", "result", "[", "'score'", "]", ")", "\n", "", "", "pred_dict", "=", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", ",", "\n", "'score'", ":", "score_lst", ",", "\n", "'ood_score'", ":", "ood_score_lst", "}", "\n", "if", "self", ".", "ood_scoring", "in", "[", "'uncertainty'", ",", "'uncertainty_actionness'", "]", ":", "\n", "            ", "pred_dict", ".", "update", "(", "{", "'uncertainty'", ":", "uncertainty_lst", "}", ")", "\n", "", "if", "self", ".", "ood_scoring", "==", "'uncertainty_actionness'", ":", "\n", "            ", "pred_dict", ".", "update", "(", "{", "'actionness'", ":", "actness_lst", "}", ")", "\n", "", "prediction", "=", "pd", ".", "DataFrame", "(", "pred_dict", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection._get_predictions_with_label": [[225, 235], ["prediction_by_label.get_group().reset_index", "pandas.DataFrame", "prediction_by_label.get_group", "print"], "methods", ["None"], ["", "def", "_get_predictions_with_label", "(", "self", ",", "prediction_by_label", ",", "label_name", ",", "cidx", ")", ":", "\n", "        ", "\"\"\"Get all predicitons of the given label. Return empty DataFrame if there\n        is no predcitions with the given label.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "prediction_by_label", ".", "get_group", "(", "cidx", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'Warning: No predictions of label \\'%s\\' were provdied.'", "%", "label_name", ")", "\n", "", "return", "pd", ".", "DataFrame", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_average_precision": [[236, 262], ["numpy.zeros", "eval_detection.ANETdetection.ground_truth.groupby", "eval_detection.ANETdetection.prediction.groupby", "enumerate", "joblib.Parallel", "eval_detection.ANETdetection.activity_index.values", "len", "len", "len", "joblib.delayed", "eval_detection.ANETdetection.activity_index.items", "eval_detection.ANETdetection.get_group().reset_index", "eval_detection.ANETdetection._get_predictions_with_label", "eval_detection.ANETdetection.get_group"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection._get_predictions_with_label"], ["", "", "def", "wrapper_compute_average_precision", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes average precision for each class in the subset.\n        \"\"\"", "\n", "ap", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "tiou_thresholds", ")", ",", "len", "(", "self", ".", "activity_index", ")", ")", ")", "\n", "\n", "# Adaptation to query faster", "\n", "ground_truth_by_label", "=", "self", ".", "ground_truth", ".", "groupby", "(", "'label'", ")", "\n", "prediction_by_label", "=", "self", ".", "prediction", ".", "groupby", "(", "'label'", ")", "\n", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "len", "(", "self", ".", "activity_index", ")", ")", "(", "\n", "delayed", "(", "compute_average_precision_detection", ")", "(", "\n", "ground_truth", "=", "ground_truth_by_label", ".", "get_group", "(", "cidx", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ",", "\n", "prediction", "=", "self", ".", "_get_predictions_with_label", "(", "prediction_by_label", ",", "label_name", ",", "cidx", ")", ",", "\n", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", ",", "\n", ")", "for", "label_name", ",", "cidx", "in", "self", ".", "activity_index", ".", "items", "(", ")", ")", "\n", "\n", "for", "i", ",", "cidx", "in", "enumerate", "(", "self", ".", "activity_index", ".", "values", "(", ")", ")", ":", "# activity_index starting from 1", "\n", "            ", "ap", "[", ":", ",", "cidx", "-", "1", "]", "=", "results", "[", "i", "]", "\n", "\n", "# fp = np.zeros((len(self.tiou_thresholds)))", "\n", "# tp = np.zeros((len(self.tiou_thresholds)))", "\n", "# for i, cidx in enumerate(self.activity_index.values()):", "\n", "#     fp += results[i][1]", "\n", "#     tp += results[i][2]", "\n", "# print(fp, tp)", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_auc_scores": [[263, 269], ["eval_detection.compute_auc_scores", "utils_eval.save_curve_data"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_auc_scores", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.save_curve_data"], ["", "def", "wrapper_compute_auc_scores", "(", "self", ")", ":", "\n", "        ", "pred_scores", ",", "pred_labels", ",", "gt_labels", "=", "self", ".", "eval_data", "\n", "au_roc", ",", "au_pr", ",", "far_95", ",", "roc_data", ",", "pr_data", "=", "compute_auc_scores", "(", "pred_scores", ",", "gt_labels", ",", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", ",", "vis", "=", "self", ".", "draw_auc", ")", "\n", "if", "self", ".", "draw_auc", ":", "\n", "            ", "save_curve_data", "(", "roc_data", ",", "pr_data", ",", "self", ".", "curve_data_path", ",", "vis", "=", "True", ")", "\n", "", "return", "au_roc", ",", "au_pr", ",", "far_95", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_osdr_scores": [[271, 277], ["eval_detection.compute_osdr_scores", "utils_eval.save_curve_osdr_data"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_osdr_scores", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.save_curve_osdr_data"], ["", "def", "wrapper_compute_osdr_scores", "(", "self", ")", ":", "\n", "        ", "pred_scores", ",", "pred_labels", ",", "gt_labels", "=", "self", ".", "eval_data", "\n", "osdr", ",", "osdr_data", "=", "compute_osdr_scores", "(", "pred_scores", ",", "pred_labels", ",", "gt_labels", ",", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", ",", "vis", "=", "self", ".", "draw_auc", ")", "\n", "if", "self", ".", "draw_auc", ":", "\n", "            ", "save_curve_osdr_data", "(", "osdr_data", ",", "self", ".", "curve_data_path", ",", "vis", "=", "True", ")", "\n", "", "return", "osdr", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_wilderness_impact": [[279, 290], ["copy.deepcopy", "list", "eval_detection.compute_wilderness_impact", "set"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_wilderness_impact"], ["", "def", "wrapper_compute_wilderness_impact", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes wilderness impact for each class in the subset.\n        \"\"\"", "\n", "assert", "'__unknown__'", "in", "self", ".", "activity_index", "\n", "activity_index_known", "=", "copy", ".", "deepcopy", "(", "self", ".", "activity_index", ")", "\n", "del", "activity_index_known", "[", "'__unknown__'", "]", "\n", "\n", "unique_videos", "=", "list", "(", "set", "(", "self", ".", "video_lst", ")", ")", "\n", "wi", ",", "self", ".", "stats", "=", "compute_wilderness_impact", "(", "self", ".", "ground_truth", ",", "self", ".", "prediction", ",", "unique_videos", ",", "activity_index_known", ",", "\n", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", ")", "\n", "return", "wi", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.pre_evaluate": [[292, 295], ["list", "eval_detection.split_results_by_gt", "set"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.split_results_by_gt"], ["", "def", "pre_evaluate", "(", "self", ")", ":", "\n", "        ", "unique_videos", "=", "list", "(", "set", "(", "self", ".", "video_lst", ")", ")", "\n", "self", ".", "eval_data", "=", "split_results_by_gt", "(", "self", ".", "prediction", ",", "self", ".", "ground_truth", ",", "unique_videos", ",", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.evaluate": [[297, 321], ["eval_detection.ANETdetection.wrapper_compute_average_precision", "eval_detection.ANETdetection.ap.mean", "eval_detection.ANETdetection.mAP.mean", "eval_detection.ANETdetection.wrapper_compute_auc_scores", "eval_detection.ANETdetection.wrapper_compute_osdr_scores", "eval_detection.ANETdetection.wrapper_compute_wilderness_impact", "eval_detection.ANETdetection.wi.mean", "eval_detection.ANETdetection.mWI.mean"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_average_precision", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_auc_scores", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_osdr_scores", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.wrapper_compute_wilderness_impact"], ["", "def", "evaluate", "(", "self", ",", "type", "=", "'AP'", ")", ":", "\n", "        ", "\"\"\"Evaluates a prediction file. For the detection task we measure the\n        interpolated mean average precision to measure the performance of a\n        method.\n        \"\"\"", "\n", "if", "type", "==", "'AP'", ":", "\n", "            ", "self", ".", "ap", "=", "self", ".", "wrapper_compute_average_precision", "(", ")", "\n", "self", ".", "mAP", "=", "self", ".", "ap", ".", "mean", "(", "axis", "=", "1", ")", "\n", "self", ".", "average_mAP", "=", "self", ".", "mAP", ".", "mean", "(", ")", "\n", "return", "self", ".", "mAP", ",", "self", ".", "average_mAP", ",", "self", ".", "ap", "\n", "", "elif", "type", "==", "'AUC'", ":", "\n", "            ", "self", ".", "au_roc", ",", "self", ".", "au_pr", ",", "self", ".", "far_95", "=", "self", ".", "wrapper_compute_auc_scores", "(", ")", "\n", "return", "self", ".", "au_roc", ",", "self", ".", "au_pr", ",", "self", ".", "far_95", "\n", "", "elif", "type", "==", "'OSDR'", ":", "\n", "            ", "self", ".", "osdr", "=", "self", ".", "wrapper_compute_osdr_scores", "(", ")", "\n", "return", "self", ".", "osdr", "\n", "", "elif", "type", "==", "'WI'", ":", "\n", "            ", "assert", "self", ".", "openset", ",", "'Wilderness Impact Cannot be Evaluated for Closed Set!'", "\n", "self", ".", "wi", "=", "self", ".", "wrapper_compute_wilderness_impact", "(", ")", "\n", "self", ".", "mWI", "=", "self", ".", "wi", ".", "mean", "(", "axis", "=", "1", ")", "\n", "self", ".", "average_mWI", "=", "self", ".", "mWI", ".", "mean", "(", ")", "\n", "return", "self", ".", "mWI", ",", "self", ".", "average_mWI", ",", "self", ".", "wi", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_average_precision_detection": [[323, 403], ["numpy.linspace", "numpy.zeros", "float", "prediction.loc[].reset_index.loc[].reset_index", "numpy.zeros", "numpy.zeros", "ground_truth.groupby", "prediction.loc[].reset_index.iterrows", "numpy.cumsum().astype", "numpy.cumsum().astype", "range", "len", "len", "numpy.ones", "prediction[].values.argsort", "ground_truth_gbvn.get_group.reset_index", "utils_eval.segment_iou", "enumerate", "len", "utils_eval.interpolated_prec_rec", "len", "len", "len", "len", "ground_truth.groupby.get_group", "utils_eval.segment_iou.argsort", "numpy.cumsum", "numpy.cumsum", "len", "len"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.segment_iou", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.interpolated_prec_rec"], ["", "", "", "def", "compute_average_precision_detection", "(", "ground_truth", ",", "prediction", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\"Compute average precision (detection task) between ground truth and\n    predictions data frames. If multiple predictions occurs for the same\n    predicted segment, only the one with highest score is matches as\n    true positive. This code is greatly inspired by Pascal VOC devkit.\n\n    Parameters\n    ----------\n    ground_truth : df\n        Data frame containing the ground truth instances.\n        Required fields: ['video-id', 't-start', 't-end']\n    prediction : df\n        Data frame containing the prediction instances.\n        Required fields: ['video-id, 't-start', 't-end', 'score']\n    tiou_thresholds : 1darray, optional\n        Temporal intersection over union threshold.\n\n    Outputs\n    -------\n    ap : float\n        Average precision score.\n    \"\"\"", "\n", "ap", "=", "np", ".", "zeros", "(", "len", "(", "tiou_thresholds", ")", ")", "\n", "if", "prediction", ".", "empty", ":", "\n", "        ", "return", "ap", "\n", "\n", "", "npos", "=", "float", "(", "len", "(", "ground_truth", ")", ")", "\n", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "ground_truth", ")", ")", ")", "*", "-", "1", "\n", "# Sort predictions by decreasing score order.", "\n", "sort_idx", "=", "prediction", "[", "'score'", "]", ".", "values", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "prediction", "=", "prediction", ".", "loc", "[", "sort_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "# Initialize true positive and false positive vectors.", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction", ")", ")", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction", ")", ")", ")", "\n", "\n", "# Adaptation to query faster", "\n", "ground_truth_gbvn", "=", "ground_truth", ".", "groupby", "(", "'video-id'", ")", "\n", "\n", "# Assigning true positive to truly grount truth instances.", "\n", "for", "idx", ",", "this_pred", "in", "prediction", ".", "iterrows", "(", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "# Check if there is at least one ground truth in the video associated.", "\n", "            ", "ground_truth_videoid", "=", "ground_truth_gbvn", ".", "get_group", "(", "this_pred", "[", "'video-id'", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "fp", "[", ":", ",", "idx", "]", "=", "1", "\n", "continue", "\n", "\n", "", "this_gt", "=", "ground_truth_videoid", ".", "reset_index", "(", ")", "\n", "tiou_arr", "=", "segment_iou", "(", "this_pred", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ",", "\n", "this_gt", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "# We would like to retrieve the predictions with highest tiou score.", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "tidx", ",", "tiou_thr", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "            ", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "                ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_thr", ":", "\n", "                    ", "fp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "break", "\n", "", "if", "lock_gt", "[", "tidx", ",", "this_gt", ".", "loc", "[", "jdx", "]", "[", "'index'", "]", "]", ">=", "0", ":", "\n", "                    ", "continue", "\n", "# Assign as true positive after the filters above.", "\n", "", "tp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "lock_gt", "[", "tidx", ",", "this_gt", ".", "loc", "[", "jdx", "]", "[", "'index'", "]", "]", "=", "idx", "\n", "break", "\n", "\n", "", "if", "fp", "[", "tidx", ",", "idx", "]", "==", "0", "and", "tp", "[", "tidx", ",", "idx", "]", "==", "0", ":", "\n", "                ", "fp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "\n", "", "", "", "tp_cumsum", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "fp_cumsum", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "recall_cumsum", "=", "tp_cumsum", "/", "npos", "\n", "\n", "precision_cumsum", "=", "tp_cumsum", "/", "(", "tp_cumsum", "+", "fp_cumsum", ")", "\n", "\n", "for", "tidx", "in", "range", "(", "len", "(", "tiou_thresholds", ")", ")", ":", "\n", "        ", "ap", "[", "tidx", "]", "=", "interpolated_prec_rec", "(", "precision_cumsum", "[", "tidx", ",", ":", "]", ",", "recall_cumsum", "[", "tidx", ",", ":", "]", ")", "\n", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.split_results_by_gt": [[405, 457], ["numpy.linspace", "ground_truth_all.groupby", "prediction_all.groupby", "tqdm.tqdm", "ground_truth_all.groupby.get_group().reset_index", "eval_detection.split_results_by_gt._get_predictions_with_vid"], "function", ["None"], ["", "def", "split_results_by_gt", "(", "prediction_all", ",", "ground_truth_all", ",", "video_list", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\" Split predictions into background, known, and unknown actions by ground-truth\n    \"\"\"", "\n", "ground_truth_by_vid", "=", "ground_truth_all", ".", "groupby", "(", "'video-id'", ")", "\n", "prediction_by_vid", "=", "prediction_all", ".", "groupby", "(", "'video-id'", ")", "\n", "\n", "def", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", ":", "\n", "        ", "\"\"\"Get all predicitons of the given video. Return empty DataFrame if there\n        is no predcitions with the given video.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "prediction_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "            ", "return", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "# for each pred label, find the ground truth label", "\n", "", "", "pred_scores", "=", "[", "{", "'bg'", ":", "[", "]", ",", "'known'", ":", "[", "]", ",", "'unknown'", ":", "[", "]", "}", "for", "_", "in", "tiou_thresholds", "]", "\n", "pred_labels", "=", "[", "{", "'bg'", ":", "[", "]", ",", "'known'", ":", "[", "]", ",", "'unknown'", ":", "[", "]", "}", "for", "_", "in", "tiou_thresholds", "]", "\n", "gt_labels", "=", "[", "{", "'bg'", ":", "[", "]", ",", "'known'", ":", "[", "]", ",", "'unknown'", ":", "[", "]", "}", "for", "_", "in", "tiou_thresholds", "]", "\n", "for", "video_name", "in", "tqdm", "(", "video_list", ",", "total", "=", "len", "(", "video_list", ")", ",", "desc", "=", "'Parsing results'", ",", "position", "=", "0", ",", "leave", "=", "True", ")", ":", "\n", "        ", "ground_truth", "=", "ground_truth_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", ")", "\n", "prediction", "=", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", "\n", "if", "prediction", ".", "empty", ":", "\n", "            ", "continue", "\n", "", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "ground_truth", ")", ")", ")", "*", "-", "1", "\n", "for", "idx", ",", "this_pred", "in", "prediction", ".", "iterrows", "(", ")", ":", "\n", "            ", "ood_score", "=", "this_pred", "[", "'ood_score'", "]", "# high value indicates unknown class", "\n", "label_pred", "=", "this_pred", "[", "'label'", "]", "# all predicted classes are known classes without using threshold here!", "\n", "tiou_arr", "=", "segment_iou", "(", "this_pred", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ",", "\n", "ground_truth", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# tIoU in a decreasing order", "\n", "for", "tidx", ",", "tiou_thr", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "                ", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "                    ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_thr", ":", "# background segment", "\n", "                        ", "pred_scores", "[", "tidx", "]", "[", "'bg'", "]", ".", "append", "(", "ood_score", ")", "\n", "pred_labels", "[", "tidx", "]", "[", "'bg'", "]", ".", "append", "(", "label_pred", ")", "\n", "gt_labels", "[", "tidx", "]", "[", "'bg'", "]", ".", "append", "(", "-", "1.0", ")", "# -1: bg", "\n", "break", "\n", "", "if", "lock_gt", "[", "tidx", ",", "jdx", "]", ">=", "0", ":", "\n", "                        ", "continue", "# this gt was matched before, continue to select the second largest tIoU match", "\n", "", "label_gt", "=", "int", "(", "ground_truth", ".", "loc", "[", "jdx", "]", "[", "'label'", "]", ")", "\n", "if", "label_gt", "==", "0", ":", "# unknown foreground", "\n", "                        ", "pred_scores", "[", "tidx", "]", "[", "'unknown'", "]", ".", "append", "(", "ood_score", ")", "\n", "pred_labels", "[", "tidx", "]", "[", "'unknown'", "]", ".", "append", "(", "label_pred", ")", "\n", "gt_labels", "[", "tidx", "]", "[", "'unknown'", "]", ".", "append", "(", "label_gt", ")", "# 0: unknown", "\n", "", "else", ":", "# known foreground", "\n", "                        ", "pred_scores", "[", "tidx", "]", "[", "'known'", "]", ".", "append", "(", "ood_score", ")", "\n", "pred_labels", "[", "tidx", "]", "[", "'known'", "]", ".", "append", "(", "label_pred", ")", "\n", "gt_labels", "[", "tidx", "]", "[", "'known'", "]", ".", "append", "(", "label_gt", ")", "# >0: known", "\n", "", "lock_gt", "[", "tidx", ",", "jdx", "]", "=", "idx", "\n", "break", "\n", "", "", "", "", "return", "pred_scores", ",", "pred_labels", ",", "gt_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_auc_scores": [[459, 491], ["numpy.linspace", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "len", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_curve", "numpy.abs().argmin", "len", "len", "sklearn.metrics.roc_auc_score", "roc_data[].append", "roc_data[].append", "roc_data[].append", "roc_data[].append", "sklearn.metrics.precision_recall_curve", "pr_data[].append", "pr_data[].append", "pr_data[].append", "pr_data[].append", "numpy.array().astype().astype", "len", "numpy.abs", "list", "numpy.array().astype", "set", "numpy.array"], "function", ["None"], ["", "def", "compute_auc_scores", "(", "pred_scores", ",", "gt_labels", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ",", "vis", "=", "False", ")", ":", "\n", "    ", "\"\"\" Compute the Area Under the Curves (ROC and PR)\n    \"\"\"", "\n", "# compute the AUC of PR and ROC curves between known and unknown", "\n", "auc_pr", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "auc_roc", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "far_95", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "roc_data", "=", "{", "'fpr'", ":", "[", "]", ",", "'tpr'", ":", "[", "]", ",", "'auc'", ":", "[", "]", ",", "'tiou'", ":", "[", "]", "}", "if", "vis", "else", "None", "\n", "pr_data", "=", "{", "'recall'", ":", "[", "]", ",", "'precision'", ":", "[", "]", ",", "'auc'", ":", "[", "]", ",", "'tiou'", ":", "[", "]", "}", "if", "vis", "else", "None", "\n", "for", "tidx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "        ", "preds", "=", "pred_scores", "[", "tidx", "]", "[", "'known'", "]", "+", "pred_scores", "[", "tidx", "]", "[", "'unknown'", "]", "\n", "labels_cls", "=", "gt_labels", "[", "tidx", "]", "[", "'known'", "]", "+", "gt_labels", "[", "tidx", "]", "[", "'unknown'", "]", "\n", "labels", "=", "(", "1", "-", "np", ".", "array", "(", "labels_cls", ")", ".", "astype", "(", "bool", ")", ".", "astype", "(", "int", ")", ")", ".", "tolist", "(", ")", "# known: 0, unknown: 1", "\n", "if", "len", "(", "preds", ")", ">", "0", "and", "len", "(", "labels", ")", ">", "0", ":", "\n", "            ", "auc_pr", "[", "tidx", "]", "=", "average_precision_score", "(", "labels", ",", "preds", ")", "# note that this is interpolated approximation of precision_recall_curve() + auc()", "\n", "auc_roc", "[", "tidx", "]", "=", "roc_auc_score", "(", "labels", ",", "preds", ")", "if", "len", "(", "list", "(", "set", "(", "labels", ")", ")", ")", ">", "1", "else", "0", "# at least there should be two classes", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "labels", ",", "preds", ",", "pos_label", "=", "1", ")", "\n", "operation_idx", "=", "np", ".", "abs", "(", "tpr", "-", "0.95", ")", ".", "argmin", "(", ")", "\n", "far_95", "[", "tidx", "]", "=", "fpr", "[", "operation_idx", "]", "\n", "if", "vis", ":", "\n", "# draw AUC_ROC curves", "\n", "                ", "roc_data", "[", "'fpr'", "]", ".", "append", "(", "fpr", ")", "\n", "roc_data", "[", "'tpr'", "]", ".", "append", "(", "tpr", ")", "\n", "roc_data", "[", "'auc'", "]", ".", "append", "(", "auc_roc", "[", "tidx", "]", ")", "\n", "roc_data", "[", "'tiou'", "]", ".", "append", "(", "tiou", ")", "\n", "# draw AUC_PR curves", "\n", "precision", ",", "recall", ",", "_", "=", "precision_recall_curve", "(", "labels", ",", "preds", ",", "pos_label", "=", "1", ")", "\n", "pr_data", "[", "'precision'", "]", ".", "append", "(", "precision", ")", "\n", "pr_data", "[", "'recall'", "]", ".", "append", "(", "recall", ")", "\n", "pr_data", "[", "'auc'", "]", ".", "append", "(", "auc_pr", "[", "tidx", "]", ")", "\n", "pr_data", "[", "'tiou'", "]", ".", "append", "(", "tiou", ")", "\n", "", "", "", "return", "auc_roc", ",", "auc_pr", ",", "far_95", ",", "roc_data", ",", "pr_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_osdr_scores": [[494, 511], ["numpy.linspace", "numpy.zeros", "enumerate", "numpy.array", "numpy.array", "len", "numpy.array", "len", "utils_eval.open_set_detection_rate", "osdr_data[].append", "osdr_data[].append", "osdr_data[].append", "osdr_data[].append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.open_set_detection_rate"], ["", "def", "compute_osdr_scores", "(", "pred_scores", ",", "pred_labels", ",", "gt_labels", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ",", "vis", "=", "False", ")", ":", "\n", "    ", "\"\"\" Compute the Area Under the CDR-FPR Curve\n    \"\"\"", "\n", "osdr", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "osdr_data", "=", "{", "'fpr'", ":", "[", "]", ",", "'cdr'", ":", "[", "]", ",", "'osdr'", ":", "[", "]", ",", "'tiou'", ":", "[", "]", "}", "if", "vis", "else", "None", "\n", "for", "tidx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "        ", "preds", "=", "1", "-", "np", ".", "array", "(", "pred_scores", "[", "tidx", "]", "[", "'known'", "]", "+", "pred_scores", "[", "tidx", "]", "[", "'unknown'", "]", ")", "# confidence. 0: unknown, 1: known", "\n", "pred_cls", "=", "np", ".", "array", "(", "pred_labels", "[", "tidx", "]", "[", "'known'", "]", "+", "pred_labels", "[", "tidx", "]", "[", "'unknown'", "]", ")", "# integer values ranging from 1-K", "\n", "gt_cls", "=", "np", ".", "array", "(", "gt_labels", "[", "tidx", "]", "[", "'known'", "]", "+", "gt_labels", "[", "tidx", "]", "[", "'unknown'", "]", ")", "# integer values ranging from 0-K", "\n", "if", "len", "(", "preds", ")", ">", "0", ":", "\n", "            ", "osdr", "[", "tidx", "]", ",", "fpr", ",", "cdr", "=", "open_set_detection_rate", "(", "preds", ",", "pred_cls", ",", "gt_cls", ")", "\n", "if", "vis", ":", "\n", "                ", "osdr_data", "[", "'fpr'", "]", ".", "append", "(", "fpr", ")", "\n", "osdr_data", "[", "'cdr'", "]", ".", "append", "(", "cdr", ")", "\n", "osdr_data", "[", "'osdr'", "]", ".", "append", "(", "osdr", "[", "tidx", "]", ")", "\n", "osdr_data", "[", "'tiou'", "]", ".", "append", "(", "tiou", ")", "\n", "", "", "", "return", "osdr", ",", "osdr_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_wilderness_impact1": [[513, 602], ["numpy.linspace", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "ground_truth_all.groupby", "prediction_all.groupby", "tqdm.tqdm", "numpy.sum().astype", "numpy.sum().astype", "numpy.sum().astype", "ground_truth_all.groupby.get_group().reset_index", "eval_detection.split_results_by_gt._get_predictions_with_vid"], "function", ["None"], ["", "def", "compute_wilderness_impact1", "(", "ground_truth_all", ",", "prediction_all", ",", "video_list", ",", "known_classes", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\" Compute wilderness impact for each video (WI=Po/Pc < 1)\n    \"\"\"", "\n", "wi", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ")", ")", "\n", "\n", "# # Initialize true positive and false positive vectors.", "\n", "tp_u2u", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "tp_k2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "# TPc in WACV paper", "\n", "fp_u2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "# FPo in WACV paper", "\n", "fp_k2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "# FPc in WACV paper", "\n", "fp_k2u", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "fp_bg2u", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "fp_bg2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "\n", "ground_truth_by_vid", "=", "ground_truth_all", ".", "groupby", "(", "'video-id'", ")", "\n", "prediction_by_vid", "=", "prediction_all", ".", "groupby", "(", "'video-id'", ")", "\n", "\n", "def", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", ":", "\n", "        ", "\"\"\"Get all predicitons of the given video. Return empty DataFrame if there\n        is no predcitions with the given video.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "prediction_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "            ", "return", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "# compute the TP, FPo and FPc for each predicted segment.", "\n", "", "", "vidx_offset", "=", "0", "\n", "all_scores", ",", "all_max_tious", "=", "[", "]", ",", "[", "]", "\n", "for", "video_name", "in", "tqdm", "(", "video_list", ",", "total", "=", "len", "(", "video_list", ")", ",", "desc", "=", "'Compute WI'", ")", ":", "\n", "        ", "ground_truth", "=", "ground_truth_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", ")", "\n", "prediction", "=", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", "\n", "\n", "if", "prediction", ".", "empty", ":", "\n", "            ", "vidx_offset", "+=", "len", "(", "prediction", ")", "\n", "all_scores", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "prediction", ")", ")", "# only for confidence score", "\n", "all_max_tious", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "prediction", ")", ")", "\n", "continue", "# no predictions for this video", "\n", "\n", "", "all_scores", ".", "extend", "(", "prediction", "[", "'score'", "]", ".", "values", ".", "tolist", "(", ")", ")", "\n", "lock_gt", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "ground_truth", ")", ")", ")", "\n", "\n", "for", "idx", ",", "this_pred", "in", "prediction", ".", "iterrows", "(", ")", ":", "\n", "            ", "tiou_arr", "=", "segment_iou", "(", "this_pred", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ",", "\n", "ground_truth", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "# attach each prediction with the gt that has maximum tIoU", "\n", "max_iou", "=", "tiou_arr", ".", "max", "(", ")", "\n", "max_jdx", "=", "tiou_arr", ".", "argmax", "(", ")", "\n", "all_max_tious", ".", "append", "(", "max_iou", ")", "\n", "\n", "label_pred", "=", "this_pred", "[", "'label'", "]", "\n", "label_gt", "=", "int", "(", "ground_truth", ".", "loc", "[", "max_jdx", "]", "[", "'label'", "]", ")", "\n", "for", "tidx", ",", "tiou_thr", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "                ", "if", "max_iou", ">", "tiou_thr", ":", "\n", "                    ", "if", "label_pred", "==", "label_gt", "and", "lock_gt", "[", "tidx", ",", "max_jdx", "]", "==", "0", ":", "\n", "                        ", "if", "label_gt", "==", "0", ":", "\n", "                            ", "tp_u2u", "[", "tidx", ",", "vidx_offset", "+", "idx", "]", "=", "1", "# true positive (u2u), not used by WI by default", "\n", "", "else", ":", "\n", "                            ", "tp_k2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "# true positive (k2k)", "\n", "", "lock_gt", "[", "tidx", ",", "max_jdx", "]", "=", "1", "# lock this ground truth", "\n", "", "else", ":", "\n", "                        ", "if", "label_gt", "==", "0", ":", "# false positive (u2k)", "\n", "                            ", "fp_u2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "else", ":", "# false positive (k2k, k2u)", "\n", "                            ", "if", "label_pred", "==", "0", ":", "\n", "                                ", "fp_k2u", "[", "tidx", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                                ", "fp_k2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "", "", "", "else", ":", "# GT is defined to be background (known), must be FP", "\n", "                    ", "if", "label_pred", "==", "0", ":", "\n", "                        ", "fp_bg2u", "[", "tidx", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp_bg2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "# move the offset ", "\n", "", "", "", "", "vidx_offset", "+=", "len", "(", "prediction", ")", "\n", "\n", "", "stats", "=", "{", "'tp_k2k'", ":", "tp_k2k", ",", "'tp_u2u'", ":", "tp_u2u", ",", "'fp_k2k'", ":", "fp_k2k", ",", "'fp_k2u'", ":", "fp_k2u", ",", "'fp_u2k'", ":", "fp_u2k", ",", "'fp_bg2k'", ":", "fp_bg2k", ",", "'fp_bg2u'", ":", "fp_bg2u", ",", "\n", "'scores'", ":", "all_scores", ",", "'max_tious'", ":", "all_max_tious", "}", "\n", "\n", "# Here we assume the background detections (small tIoU) are from the background class, which is a known class", "\n", "fp_k2u", "+=", "fp_bg2u", "\n", "fp_k2k", "+=", "fp_bg2k", "\n", "\n", "tp_k2k_sum", "=", "np", ".", "sum", "(", "tp_k2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "fp_u2k_sum", "=", "np", ".", "sum", "(", "fp_u2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "fp_k2k_sum", "=", "np", ".", "sum", "(", "fp_k2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "wi", "=", "fp_u2k_sum", "/", "(", "tp_k2k_sum", "+", "fp_k2k_sum", "+", "1e-6", ")", "\n", "\n", "return", "wi", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.compute_wilderness_impact": [[604, 729], ["numpy.linspace", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "ground_truth_all.groupby", "prediction_all.groupby", "numpy.zeros", "tqdm.tqdm", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "range", "ground_truth_all.groupby.get_group().reset_index", "eval_detection.split_results_by_gt._get_predictions_with_vid"], "function", ["None"], ["", "def", "compute_wilderness_impact", "(", "ground_truth_all", ",", "prediction_all", ",", "video_list", ",", "known_classes", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\" Compute wilderness impact for each video (WI=Po/Pc < 1)\n    \"\"\"", "\n", "wi", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ")", ")", "\n", "\n", "# # Initialize true positive and false positive vectors.", "\n", "tp_u2u", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "tp_k2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "# TPc in WACV paper", "\n", "fp_u2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "# FPo in WACV paper", "\n", "fp_k2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "# FPc in WACV paper", "\n", "fp_k2u", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "fp_bg2u", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "fp_bg2k", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "known_classes", ")", ",", "len", "(", "prediction_all", ")", ")", ")", "\n", "\n", "ground_truth_by_vid", "=", "ground_truth_all", ".", "groupby", "(", "'video-id'", ")", "\n", "prediction_by_vid", "=", "prediction_all", ".", "groupby", "(", "'video-id'", ")", "\n", "\n", "def", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", ":", "\n", "        ", "\"\"\"Get all predicitons of the given video. Return empty DataFrame if there\n        is no predcitions with the given video.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "prediction_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "            ", "return", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "# compute the TP, FPo and FPc for each predicted segment.", "\n", "", "", "vidx_offset", "=", "0", "\n", "all_ood_scores", ",", "all_scores", ",", "all_max_tious", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "num_gt", "=", "np", ".", "zeros", "(", "(", "len", "(", "known_classes", ")", "+", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "video_name", "in", "tqdm", "(", "video_list", ",", "total", "=", "len", "(", "video_list", ")", ",", "desc", "=", "'Compute WI'", ")", ":", "\n", "        ", "ground_truth", "=", "ground_truth_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", ")", "\n", "prediction", "=", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", "\n", "\n", "for", "_", ",", "gt", "in", "ground_truth", ".", "iterrows", "(", ")", ":", "\n", "            ", "num_gt", "[", "gt", "[", "'label'", "]", "]", "+=", "1", "# keep track of the number of GTs", "\n", "\n", "", "if", "prediction", ".", "empty", ":", "\n", "            ", "vidx_offset", "+=", "len", "(", "prediction", ")", "\n", "all_ood_scores", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "prediction", ")", ")", "\n", "all_scores", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "prediction", ")", ")", "# only for confidence score", "\n", "all_max_tious", ".", "extend", "(", "[", "0", "]", "*", "len", "(", "prediction", ")", ")", "\n", "continue", "# no predictions for this video", "\n", "\n", "", "all_scores", ".", "extend", "(", "prediction", "[", "'score'", "]", ".", "values", ".", "tolist", "(", ")", ")", "\n", "all_ood_scores", ".", "extend", "(", "prediction", "[", "'ood_score'", "]", ".", "values", ".", "tolist", "(", ")", ")", "\n", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "ground_truth", ")", ")", ")", "*", "-", "1", "\n", "\n", "for", "idx", ",", "this_pred", "in", "prediction", ".", "iterrows", "(", ")", ":", "\n", "            ", "tiou_arr", "=", "segment_iou", "(", "this_pred", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ",", "\n", "ground_truth", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# tIoU in a decreasing order", "\n", "all_max_tious", ".", "append", "(", "tiou_arr", "[", "tiou_sorted_idx", "[", "0", "]", "]", ")", "\n", "\n", "label_pred", "=", "this_pred", "[", "'label'", "]", "\n", "for", "tidx", ",", "tiou_thr", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "                ", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "# If tIoU is too small, we assume the prediction is background (assign to bg2u/bg2k)", "\n", "                    ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_thr", ":", "\n", "                        ", "if", "label_pred", "==", "0", ":", "\n", "                            ", "fp_bg2u", "[", "tidx", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "fp_bg2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "break", "\n", "\n", "# Otherwise, consider if this GT (jdx) is already used by previous prediction", "\n", "", "if", "lock_gt", "[", "tidx", ",", "jdx", "]", ">=", "0", ":", "\n", "                        ", "continue", "# continue to select the second largest tIoU match", "\n", "\n", "# After the filters above, the GT is not used AND tIoU is large enough.", "\n", "# Further consider 5 classification cases (TP_u2u, TP_k2k, FP_u2k, FP_k2k, FP_k2u)", "\n", "", "label_gt", "=", "int", "(", "ground_truth", ".", "loc", "[", "jdx", "]", "[", "'label'", "]", ")", "\n", "if", "label_pred", "==", "label_gt", ":", "# TP cases", "\n", "                        ", "if", "label_gt", "==", "0", ":", "\n", "                            ", "tp_u2u", "[", "tidx", ",", "vidx_offset", "+", "idx", "]", "=", "1", "# true positive (u2u), not used by WI by default", "\n", "", "else", ":", "\n", "                            ", "tp_k2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "# true positive (k2k)", "\n", "", "lock_gt", "[", "tidx", ",", "jdx", "]", "=", "idx", "# lock this ground truth after TP assignment", "\n", "", "else", ":", "\n", "                        ", "if", "label_gt", "==", "0", ":", "# false positive (u2k)", "\n", "                            ", "fp_u2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "else", ":", "# false positive (k2k, k2u)", "\n", "                            ", "if", "label_pred", "==", "0", ":", "\n", "                                ", "fp_k2u", "[", "tidx", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                                ", "fp_k2k", "[", "tidx", ",", "label_pred", "-", "1", ",", "vidx_offset", "+", "idx", "]", "=", "1", "\n", "", "", "", "break", "\n", "# move the offset ", "\n", "", "", "", "vidx_offset", "+=", "len", "(", "prediction", ")", "\n", "\n", "", "stats", "=", "{", "'tp_k2k'", ":", "tp_k2k", ",", "'tp_u2u'", ":", "tp_u2u", ",", "'fp_k2k'", ":", "fp_k2k", ",", "'fp_k2u'", ":", "fp_k2u", ",", "'fp_u2k'", ":", "fp_u2k", ",", "'fp_bg2k'", ":", "fp_bg2k", ",", "'fp_bg2u'", ":", "fp_bg2u", ",", "\n", "'ood_scores'", ":", "all_ood_scores", ",", "'scores'", ":", "all_scores", ",", "'max_tious'", ":", "all_max_tious", ",", "'num_gt'", ":", "num_gt", "}", "\n", "\n", "# # report the AP for known classes", "\n", "# ap = np.zeros((len(known_classes), len(tiou_thresholds)), dtype=np.float32)  # K classes", "\n", "# for name, cidx in known_classes.items():", "\n", "#     # precision", "\n", "#     tp_cumsum = np.cumsum(tp_k2k[:, cidx-1, :], axis=1).astype(np.float)", "\n", "#     fp_cumsum = np.cumsum(fp_k2k[:, cidx-1, :], axis=1).astype(np.float)", "\n", "#     recall_cumsum = tp_cumsum / num_gt[cidx]", "\n", "#     # recall", "\n", "#     precision_cumsum = tp_cumsum / (tp_cumsum + fp_cumsum)", "\n", "#     for tidx in range(len(tiou_thresholds)):", "\n", "#         ap[cidx-1, tidx] = interpolated_prec_rec(precision_cumsum[tidx,:], recall_cumsum[tidx,:])", "\n", "# for tidx, tiou in enumerate(tiou_thresholds):", "\n", "#     print(f'tiou={tiou}, AP={ap[:, tidx].mean()}')", "\n", "\n", "# Here we assume the background detections (small tIoU) are from the background class, which is a known class", "\n", "fp_k2u", "+=", "fp_bg2u", "\n", "fp_k2k", "+=", "fp_bg2k", "\n", "\n", "# impact on recall ratio", "\n", "tp_u2u_cumsum", "=", "np", ".", "cumsum", "(", "tp_u2u", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "# T x N", "\n", "recall_ratio_cumsum", "=", "num_gt", "[", "1", ":", "]", ".", "sum", "(", ")", "/", "(", "num_gt", "[", "1", ":", "]", ".", "sum", "(", ")", "+", "num_gt", "[", "0", "]", "-", "tp_u2u_cumsum", ")", "# T x N", "\n", "# impact on precision ratio", "\n", "tp_k2k_cumsum", "=", "np", ".", "cumsum", "(", "tp_k2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "# T x K x N", "\n", "fp_u2k_cumsum", "=", "np", ".", "cumsum", "(", "fp_u2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "# T x K x N", "\n", "fp_k2k_cumsum", "=", "np", ".", "cumsum", "(", "fp_k2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "# T x K x N", "\n", "precision_ratio_cumsum", "=", "(", "tp_k2k_cumsum", "+", "fp_k2k_cumsum", ")", "/", "(", "tp_k2k_cumsum", "+", "fp_k2k_cumsum", "+", "fp_u2k_cumsum", "+", "1e-6", ")", "\n", "\n", "for", "tidx", "in", "range", "(", "len", "(", "tiou_thresholds", ")", ")", ":", "\n", "        ", "for", "cidx", "in", "range", "(", "len", "(", "known_classes", ")", ")", ":", "\n", "            ", "wi", "[", "tidx", ",", "cidx", "]", "=", "interpolated_prec_rec", "(", "precision_ratio_cumsum", "[", "tidx", ",", "cidx", ",", ":", "]", ",", "recall_ratio_cumsum", "[", "tidx", ",", ":", "]", ")", "\n", "\n", "", "", "return", "wi", ",", "stats", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.get_path": [[16, 24], ["os.path.lexists", "os.path.join", "os.path.islink", "os.path.realpath", "fullpath.split", "os.path.dirname"], "function", ["None"], ["def", "get_path", "(", "input_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "input_path", ")", ":", "\n", "        ", "fullpath", "=", "os", ".", "path", ".", "realpath", "(", "input_path", ")", "if", "os", ".", "path", ".", "islink", "(", "input_path", ")", "else", "input_path", "\n", "real_name", "=", "fullpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "real_full_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "input_path", ")", ",", "real_name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "", "return", "real_full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.build_model": [[26, 47], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet", "test_cross_data.get_path", "test_cross_data.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet", "test_cross_data.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "config[].get", "config[].get", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path"], ["", "def", "build_model", "(", "fusion", "=", "False", ",", "use_edl", "=", "False", ",", "use_rpl", "=", "False", ")", ":", "\n", "    ", "net", ",", "flow_net", "=", "None", ",", "None", "\n", "if", "fusion", ":", "\n", "        ", "rgb_net", "=", "BDNet", "(", "in_channels", "=", "3", ",", "training", "=", "False", ",", "use_edl", "=", "use_edl", ",", "use_rpl", "=", "use_rpl", ")", "\n", "flow_net", "=", "BDNet", "(", "in_channels", "=", "2", ",", "training", "=", "False", ",", "use_edl", "=", "use_edl", ",", "use_rpl", "=", "use_rpl", ")", "\n", "rgb_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_checkpoint_path'", ",", "\n", "'./models/thumos14/checkpoint-15.ckpt'", ")", ")", "\n", "flow_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_checkpoint_path'", ",", "\n", "'./models/thumos14_flow/checkpoint-16.ckpt'", ")", ")", "\n", "rgb_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "rgb_checkpoint_path", ")", ")", "\n", "flow_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "flow_checkpoint_path", ")", ")", "\n", "rgb_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "flow_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "net", "=", "rgb_net", "\n", "", "else", ":", "\n", "        ", "net", "=", "BDNet", "(", "in_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "use_edl", ",", "use_rpl", "=", "use_rpl", ")", "\n", "checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "", "return", "net", ",", "flow_net", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.get_offsets": [[49, 57], ["list", "range"], "function", ["None"], ["", "def", "get_offsets", "(", "sample_count", ",", "clip_length", ",", "stride", ")", ":", "\n", "    ", "if", "sample_count", "<", "clip_length", ":", "\n", "        ", "offsetlist", "=", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "offsetlist", "=", "list", "(", "range", "(", "0", ",", "sample_count", "-", "clip_length", "+", "1", ",", "stride", ")", ")", "\n", "if", "(", "sample_count", "-", "clip_length", ")", "%", "stride", ":", "\n", "            ", "offsetlist", "+=", "[", "sample_count", "-", "clip_length", "]", "\n", "", "", "return", "offsetlist", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.prepare_data": [[59, 65], ["numpy.load", "numpy.transpose", "centor_crop", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "prepare_data", "(", "data_path", ",", "video_name", ",", "centor_crop", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "data", "=", "np", ".", "transpose", "(", "data", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data", "=", "centor_crop", "(", "data", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ")", ".", "cuda", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.prepare_clip": [[67, 77], ["torch.cat.float", "torch.cat.unsqueeze", "torch.cat.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "prepare_clip", "(", "data", ",", "offset", ",", "clip_length", ")", ":", "\n", "    ", "clip", "=", "data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "clip", "=", "clip", ".", "float", "(", ")", "\n", "clip", "=", "(", "clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "if", "clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "        ", "tmp", "=", "torch", ".", "zeros", "(", "[", "clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "clip", ".", "size", "(", "1", ")", ",", "\n", "96", ",", "96", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "clip", "=", "torch", ".", "cat", "(", "[", "clip", ",", "tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", "\n", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.prepare_anet_clip": [[80, 90], ["torch.cat.float", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones", "torch.ones", "torch.ones", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "prepare_anet_clip", "(", "data", ",", "offset", ",", "clip_length", ",", "crop_size", ")", ":", "\n", "    ", "clip", "=", "data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "clip", "=", "clip", ".", "float", "(", ")", "\n", "if", "clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "        ", "tmp", "=", "torch", ".", "ones", "(", "\n", "[", "clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "clip", ".", "size", "(", "1", ")", ",", "crop_size", ",", "crop_size", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "*", "127.5", "\n", "clip", "=", "torch", ".", "cat", "(", "[", "clip", ",", "tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", "\n", "clip", "=", "(", "clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.parse_output": [[92, 123], ["[].squeeze", "[].squeeze"], "function", ["None"], ["", "def", "parse_output", "(", "output_dict", ",", "flow_output_dict", "=", "None", ",", "fusion", "=", "False", ",", "use_edl", "=", "False", ",", "os_head", "=", "False", ",", "use_gcpl", "=", "False", ")", ":", "\n", "    ", "act", ",", "prop_act", ",", "unct", ",", "prop_unct", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "loc", ",", "conf", ",", "priors", "=", "output_dict", "[", "'loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'conf'", "]", "[", "0", "]", ",", "output_dict", "[", "'priors'", "]", "\n", "prop_loc", ",", "prop_conf", "=", "output_dict", "[", "'prop_loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'prop_conf'", "]", "[", "0", "]", "\n", "if", "os_head", ":", "\n", "        ", "act", ",", "prop_act", "=", "output_dict", "[", "'act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", ",", "output_dict", "[", "'prop_act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "", "unct", "=", "output_dict", "[", "'unct'", "]", "[", "0", "]", "if", "use_edl", "else", "None", "\n", "prop_unct", "=", "output_dict", "[", "'prop_unct'", "]", "[", "0", "]", "if", "use_edl", "else", "None", "\n", "center", "=", "output_dict", "[", "'center'", "]", "[", "0", "]", "\n", "if", "use_gcpl", ":", "\n", "        ", "conf", "=", "-", "conf", "\n", "prop_conf", "=", "-", "prop_conf", "\n", "", "if", "fusion", ":", "\n", "        ", "flow_loc", ",", "flow_conf", ",", "priors", "=", "flow_output_dict", "[", "'loc'", "]", "[", "0", "]", ",", "flow_output_dict", "[", "'conf'", "]", "[", "0", "]", ",", "flow_output_dict", "[", "'priors'", "]", "\n", "flow_prop_loc", ",", "flow_prop_conf", "=", "flow_output_dict", "[", "'prop_loc'", "]", "[", "0", "]", ",", "flow_output_dict", "[", "'prop_conf'", "]", "[", "0", "]", "\n", "flow_center", "=", "flow_output_dict", "[", "'center'", "]", "[", "0", "]", "\n", "# fusion by average", "\n", "loc", "=", "(", "loc", "+", "flow_loc", ")", "/", "2.0", "\n", "prop_loc", "=", "(", "prop_loc", "+", "flow_prop_loc", ")", "/", "2.0", "\n", "conf", "=", "(", "conf", "+", "flow_conf", ")", "/", "2.0", "\n", "prop_conf", "=", "(", "prop_conf", "+", "flow_prop_conf", ")", "/", "2.0", "\n", "center", "=", "(", "center", "+", "flow_center", ")", "/", "2.0", "\n", "if", "os_head", ":", "\n", "            ", "flow_act", ",", "flow_prop_act", "=", "flow_output_dict", "[", "'act'", "]", "[", "0", "]", ",", "flow_output_dict", "[", "'prop_act'", "]", "[", "0", "]", "\n", "act", "=", "(", "act", "+", "flow_act", ")", "/", "2.0", "\n", "prop_act", "=", "(", "prop_act", "+", "flow_prop_act", ")", "/", "2.0", "\n", "", "if", "use_edl", ":", "\n", "            ", "flow_prop_unct", ",", "flow_unct", "=", "flow_output_dict", "[", "'prop_unct'", "]", "[", "0", "]", ",", "flow_output_dict", "[", "'unct'", "]", "[", "0", "]", "\n", "unct", "=", "(", "unct", "+", "flow_unct", ")", "/", "2.0", "\n", "prop_unct", "=", "(", "prop_unct", "+", "flow_prop_unct", ")", "/", "2.0", "\n", "", "", "return", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.decode_predictions": [[125, 154], ["torch.Softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat.clamp_", "score_func", "score_func", "center.sigmoid.sigmoid", "conf.view().transpose.view().transpose", "conf.view().transpose.clone", "act.sigmoid", "prop_act.sigmoid", "actionness.unsqueeze", "conf.view().transpose.view"], "function", ["None"], ["", "def", "decode_predictions", "(", "loc", ",", "prop_loc", ",", "priors", ",", "conf", ",", "prop_conf", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", ",", "center", ",", "offset", ",", "sample_fps", ",", "clip_length", ",", "num_classes", ",", "score_func", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ",", "use_edl", "=", "False", ",", "os_head", "=", "False", ")", ":", "\n", "    ", "pre_loc_w", "=", "loc", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", "1", ":", "]", "\n", "loc", "=", "0.5", "*", "pre_loc_w", "*", "prop_loc", "+", "loc", "\n", "segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", "1", "]", "*", "clip_length", "-", "loc", "[", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", "1", "]", "*", "clip_length", "+", "loc", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "segments", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "clip_length", ")", "\n", "decoded_segments", "=", "(", "segments", "+", "offset", ")", "/", "sample_fps", "\n", "\n", "# compute uncertainty", "\n", "uncertainty", "=", "(", "unct", "+", "prop_unct", ")", "/", "2.0", "if", "use_edl", "else", "None", "\n", "\n", "actionness", "=", "None", "\n", "if", "os_head", ":", "\n", "# compute actionness", "\n", "        ", "act_score", "=", "act", ".", "sigmoid", "(", ")", "\n", "prop_act_score", "=", "prop_act", ".", "sigmoid", "(", ")", "\n", "actionness", "=", "(", "act_score", "+", "prop_act_score", ")", "/", "2.0", "\n", "\n", "", "conf", "=", "score_func", "(", "conf", ")", "\n", "prop_conf", "=", "score_func", "(", "prop_conf", ")", "\n", "center", "=", "center", ".", "sigmoid", "(", ")", "\n", "\n", "conf", "=", "(", "conf", "+", "prop_conf", ")", "/", "2.0", "\n", "conf", "=", "conf", "*", "center", "*", "actionness", ".", "unsqueeze", "(", "-", "1", ")", "if", "os_head", "else", "conf", "*", "center", "\n", "conf", "=", "conf", ".", "view", "(", "-", "1", ",", "num_classes", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "conf_scores", "=", "conf", ".", "clone", "(", ")", "\n", "return", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.filtering": [[156, 176], ["c_mask.unsqueeze().expand_as", "decoded_segments[].view", "torch.cat", "torch.cat", "torch.cat", "scores.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "c_mask.unsqueeze", "scores.unsqueeze", "uncertain_scores.unsqueeze", "act_scores.unsqueeze"], "function", ["None"], ["", "def", "filtering", "(", "decoded_segments", ",", "conf_score_cls", ",", "uncertainty", ",", "actionness", ",", "conf_thresh", ",", "use_edl", "=", "False", ",", "os_head", "=", "False", ")", ":", "\n", "    ", "c_mask", "=", "conf_score_cls", ">", "conf_thresh", "\n", "if", "os_head", ":", "\n", "        ", "c_mask", "=", "c_mask", "&", "(", "actionness", ">", "0.5", ")", "\n", "", "scores", "=", "conf_score_cls", "[", "c_mask", "]", "\n", "if", "scores", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "# masking segments", "\n", "", "l_mask", "=", "c_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "decoded_segments", ")", "\n", "segments", "=", "decoded_segments", "[", "l_mask", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 3)", "\n", "if", "use_edl", ":", "\n", "# masking uncertainties", "\n", "        ", "uncertain_scores", "=", "uncertainty", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "uncertain_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4)", "\n", "", "if", "os_head", ":", "\n", "# masking actionness", "\n", "        ", "act_scores", "=", "actionness", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "act_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4) or (N, 5)", "\n", "", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.get_video_detections": [[178, 217], ["torch.zeros", "torch.zeros", "torch.zeros", "min", "torch.zeros.contiguous().view", "flt.view.view", "torch.cat", "torch.cat", "torch.cat", "AFSD.common.segment_utils.softnms_v2", "flt[].contiguous", "tmp[].view", "tmp.detach().cpu().numpy.detach().cpu().numpy", "range", "len", "torch.zeros.contiguous", "tmp.detach().cpu().numpy.size", "max", "float", "proposal_list.append", "tmp.detach().cpu().numpy.detach().cpu", "float", "min", "float", "float", "float", "float", "tmp.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2"], ["", "def", "get_video_detections", "(", "output", ",", "idx_to_class", ",", "num_classes", ",", "top_k", ",", "nms_sigma", ",", "duration", "=", "None", ",", "use_edl", "=", "False", ",", "os_head", "=", "False", ",", "cls_rng", "=", "None", ")", ":", "\n", "    ", "res_dim", "=", "3", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "use_edl", "else", "res_dim", "# 3 or 4", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "os_head", "else", "res_dim", "# 3 or 4 or 5", "\n", "res", "=", "torch", ".", "zeros", "(", "num_classes", ",", "top_k", ",", "res_dim", ")", "\n", "sum_count", "=", "0", "\n", "for", "cl", "in", "cls_rng", ":", "# from 1 to K+1 by default, or 0 to K for os_head", "\n", "        ", "if", "len", "(", "output", "[", "cl", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "torch", ".", "cat", "(", "output", "[", "cl", "]", ",", "0", ")", "\n", "tmp", ",", "count", "=", "softnms_v2", "(", "tmp", ",", "sigma", "=", "nms_sigma", ",", "top_k", "=", "top_k", ",", "score_threshold", "=", "0.001", ",", "use_edl", "=", "use_edl", ",", "os_head", "=", "os_head", ")", "\n", "res", "[", "cl", ",", ":", "count", "]", "=", "tmp", "\n", "sum_count", "+=", "count", "\n", "\n", "", "sum_count", "=", "min", "(", "sum_count", ",", "top_k", ")", "\n", "flt", "=", "res", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "flt", "=", "flt", ".", "view", "(", "num_classes", ",", "-", "1", ",", "res_dim", ")", "\n", "proposal_list", "=", "[", "]", "\n", "for", "cl", "in", "cls_rng", ":", "# from 1 to K+1 by default, or 0 to K for os_head", "\n", "        ", "cl_idx", "=", "cl", "+", "1", "if", "os_head", "else", "cl", "\n", "class_name", "=", "idx_to_class", "[", "cl_idx", "]", "# 1 to K", "\n", "tmp", "=", "flt", "[", "cl", "]", ".", "contiguous", "(", ")", "\n", "tmp", "=", "tmp", "[", "(", "tmp", "[", ":", ",", "2", "]", ">", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp", ")", "]", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "if", "tmp", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "tmp", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tmp_proposal", "=", "{", "}", "\n", "start_time", "=", "max", "(", "0", ",", "float", "(", "tmp", "[", "i", ",", "0", "]", ")", ")", "\n", "end_time", "=", "min", "(", "duration", ",", "float", "(", "tmp", "[", "i", ",", "1", "]", ")", ")", "if", "duration", "is", "not", "None", "else", "float", "(", "tmp", "[", "i", ",", "1", "]", ")", "\n", "if", "end_time", "<=", "start_time", ":", "\n", "                ", "continue", "\n", "", "tmp_proposal", "[", "'label'", "]", "=", "class_name", "\n", "tmp_proposal", "[", "'score'", "]", "=", "float", "(", "tmp", "[", "i", ",", "2", "]", ")", "\n", "tmp_proposal", "[", "'segment'", "]", "=", "[", "start_time", ",", "end_time", "]", "\n", "tmp_proposal", "[", "'uncertainty'", "]", "=", "float", "(", "tmp", "[", "i", ",", "3", "]", ")", "if", "use_edl", "else", "0.0", "\n", "tmp_proposal", "[", "'actionness'", "]", "=", "float", "(", "tmp", "[", "i", ",", "4", "]", ")", "if", "os_head", "else", "0.0", "\n", "proposal_list", ".", "append", "(", "tmp_proposal", ")", "\n", "", "", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.test": [[219, 276], ["AFSD.common.thumos_dataset.get_video_info", "AFSD.common.thumos_dataset.get_class_index_map", "test_cross_data.build_model", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "range", "range", "AFSD.thumos14.BDNet.DirichletLayer", "torch.Softmax", "list", "test_cross_data.get_offsets", "test_cross_data.prepare_data", "test_cross_data.get_video_detections", "dict", "open", "json.dump", "AFSD.common.thumos_dataset.get_video_info.keys", "test_cross_data.prepare_data", "test_cross_data.prepare_clip", "output_dict_all.append", "test_cross_data.parse_output", "test_cross_data.decode_predictions", "range", "test_cross_data.prepare_clip", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "test_cross_data.filtering", "output[].append", "flow_net"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.parse_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.decode_predictions", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "test", "(", "cfg", ",", "output_file", ")", ":", "\n", "# get data", "\n", "    ", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_info_path'", "]", ")", "\n", "_", ",", "idx_to_class", "=", "get_class_index_map", "(", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "npy_data_path", "=", "cfg", ".", "rgb_data_path", "if", "cfg", ".", "fusion", "else", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_data_path'", "]", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "\n", "# prepare model", "\n", "net", ",", "flow_net", "=", "build_model", "(", "fusion", "=", "cfg", ".", "fusion", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "use_rpl", "=", "cfg", ".", "use_rpl", ")", "\n", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "centor_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "result_dict", "=", "{", "}", "\n", "for", "video_name", "in", "tqdm", "(", "list", "(", "video_infos", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ",", "desc", "=", "'THUMOS Inference'", ")", ":", "\n", "# get the clip offsets", "\n", "        ", "sample_fps", "=", "video_infos", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "frame_count", "=", "video_infos", "[", "video_name", "]", "[", "'sample_count'", "]", "\n", "offsetlist", "=", "get_offsets", "(", "frame_count", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "stride", ")", "\n", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "npy_data_path", ",", "video_name", ",", "centor_crop", ")", "\n", "flow_data", "=", "prepare_data", "(", "cfg", ".", "flow_data_path", ",", "video_name", ",", "centor_crop", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "output_dict_all", "=", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "\n", "flow_clip", "=", "prepare_clip", "(", "flow_data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "flow_output_dict", "=", "flow_net", "(", "flow_clip", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "", "output_dict_all", ".", "append", "(", "(", "output_dict", ",", "flow_output_dict", ",", "offset", ")", ")", "\n", "\n", "# post-processing", "\n", "", "for", "(", "output_dict", ",", "flow_output_dict", ",", "offset", ")", "in", "output_dict_all", ":", "\n", "            ", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", "=", "parse_output", "(", "output_dict", ",", "flow_output_dict", ",", "fusion", "=", "cfg", ".", "fusion", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ",", "use_gcpl", "=", "cfg", ".", "use_gcpl", ")", "\n", "\n", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_predictions", "(", "loc", ",", "prop_loc", ",", "priors", ",", "conf", ",", "prop_conf", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", ",", "center", ",", "offset", ",", "sample_fps", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "num_classes", ",", "score_func", "=", "out_layer", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "# filtering out clip-level predictions with low confidence", "\n", "for", "cl", "in", "class_range", ":", "# from 1 to K+1 by default, or 0 to K for os_head", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "cfg", ".", "conf_thresh", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "# (N,5)", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "]", "=", "get_video_detections", "(", "output", ",", "idx_to_class", ",", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "cfg", ".", "nms_sigma", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ",", "cls_rng", "=", "class_range", ")", "\n", "\n", "", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.test_anet": [[278, 331], ["list", "list", "test_cross_data.build_model", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "anet_cfg.video_infos.keys", "AFSD.thumos14.BDNet.DirichletLayer", "torch.Softmax", "range", "range", "enumerate", "test_cross_data.get_offsets", "test_cross_data.prepare_data", "test_cross_data.get_video_detections", "dict", "open", "json.dump", "os.listdir", "set", "set", "len", "test_cross_data.prepare_anet_clip", "output_dict_all.append", "test_cross_data.parse_output", "test_cross_data.decode_predictions", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "test_cross_data.filtering", "output[].append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_anet_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.parse_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.decode_predictions", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "test_anet", "(", "thumos_cfg", ",", "anet_cfg", ",", "anet_resfile", ")", ":", "\n", "\n", "    ", "video_list", "=", "list", "(", "anet_cfg", ".", "video_infos", ".", "keys", "(", ")", ")", "\n", "videos_in_disk", "=", "[", "filename", "[", ":", "-", "4", "]", "for", "filename", "in", "os", ".", "listdir", "(", "anet_cfg", ".", "mp4_data_path", ")", "]", "\n", "video_list", "=", "list", "(", "set", "(", "video_list", ")", "&", "set", "(", "videos_in_disk", ")", ")", "\n", "\n", "# prepare model", "\n", "net", ",", "flow_net", "=", "build_model", "(", "fusion", "=", "thumos_cfg", ".", "fusion", ",", "use_edl", "=", "thumos_cfg", ".", "use_edl", ",", "use_rpl", "=", "thumos_cfg", ".", "use_rpl", ")", "\n", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "thumos_cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "thumos_cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "thumos_cfg", ".", "crop_size", ")", "\n", "class_range", "=", "range", "(", "1", ",", "thumos_cfg", ".", "num_classes", ")", "if", "not", "thumos_cfg", ".", "os_head", "else", "range", "(", "0", ",", "thumos_cfg", ".", "num_classes", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "for", "vid", ",", "video_name", "in", "tqdm", "(", "enumerate", "(", "video_list", ")", ",", "total", "=", "len", "(", "video_list", ")", ",", "desc", "=", "'ANet Inference'", ")", ":", "\n", "# setup clip offsets", "\n", "        ", "sample_fps", "=", "anet_cfg", ".", "video_infos", "[", "video_name", "]", "[", "'fps'", "]", "\n", "duration", "=", "anet_cfg", ".", "video_infos", "[", "video_name", "]", "[", "'duration'", "]", "\n", "frame_count", "=", "anet_cfg", ".", "video_infos", "[", "video_name", "]", "[", "'frame_num'", "]", "\n", "offsetlist", "=", "get_offsets", "(", "frame_count", ",", "thumos_cfg", ".", "clip_length", ",", "thumos_cfg", ".", "stride", ")", "\n", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "anet_cfg", ".", "mp4_data_path", ",", "video_name", ",", "center_crop", ")", "# (3, 768, 96, 96)", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "thumos_cfg", ".", "num_classes", ")", "]", "\n", "output_dict_all", "=", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_anet_clip", "(", "data", ",", "offset", ",", "thumos_cfg", ".", "clip_length", ",", "thumos_cfg", ".", "crop_size", ")", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "", "output_dict_all", ".", "append", "(", "(", "output_dict", ",", "offset", ")", ")", "\n", "\n", "# post-processing", "\n", "", "for", "(", "output_dict", ",", "offset", ")", "in", "output_dict_all", ":", "\n", "            ", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", "=", "parse_output", "(", "output_dict", ",", "use_edl", "=", "thumos_cfg", ".", "use_edl", ",", "os_head", "=", "thumos_cfg", ".", "os_head", ")", "\n", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_predictions", "(", "loc", ",", "prop_loc", ",", "priors", ",", "conf", ",", "prop_conf", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", ",", "center", ",", "offset", ",", "sample_fps", ",", "thumos_cfg", ".", "clip_length", ",", "thumos_cfg", ".", "num_classes", ",", "score_func", "=", "out_layer", ",", "use_edl", "=", "thumos_cfg", ".", "use_edl", ",", "os_head", "=", "thumos_cfg", ".", "os_head", ")", "\n", "# filtering out clip-level predictions with low confidence", "\n", "for", "cl", "in", "class_range", ":", "# from 1 to K+1 by default, or 0 to K for os_head", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "thumos_cfg", ".", "conf_thresh", ",", "use_edl", "=", "thumos_cfg", ".", "use_edl", ",", "os_head", "=", "thumos_cfg", ".", "os_head", ")", "# (N,5)", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "[", "2", ":", "]", "]", "=", "get_video_detections", "(", "output", ",", "thumos_cfg", ".", "idx_to_class", ",", "thumos_cfg", ".", "num_classes", ",", "thumos_cfg", ".", "top_k", ",", "thumos_cfg", ".", "nms_sigma", ",", "duration", "=", "duration", ",", "use_edl", "=", "thumos_cfg", ".", "use_edl", ",", "os_head", "=", "thumos_cfg", ".", "os_head", ",", "cls_rng", "=", "class_range", ")", "\n", "\n", "", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "anet_resfile", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.exclude_overlapping": [[333, 352], ["anet_out[].items", "open", "enumerate", "dict", "f.readlines", "excluded_classes.append", "line.strip"], "function", ["None"], ["", "def", "exclude_overlapping", "(", "anet_out", ",", "overlapping_class_file", ")", ":", "\n", "# read the overlapping class names", "\n", "    ", "excluded_classes", "=", "[", "]", "\n", "with", "open", "(", "overlapping_class_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "excluded_classes", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "# filtering out the videos that contain excluded classes", "\n", "", "", "result_dict", "=", "{", "}", "\n", "for", "video_name", ",", "preds", "in", "anet_out", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "        ", "video_info", "=", "anet_cfg", ".", "video_infos", "[", "'v_'", "+", "video_name", "]", "\n", "exclude", "=", "False", "\n", "for", "ann", "in", "video_info", "[", "'annotations'", "]", ":", "\n", "            ", "if", "ann", "[", "'label'", "]", "in", "excluded_classes", ":", "\n", "                ", "exclude", "=", "True", "\n", "break", "\n", "", "", "if", "not", "exclude", ":", "\n", "            ", "result_dict", "[", "video_name", "]", "=", "preds", "\n", "", "", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.get_basic_config": [[354, 388], ["AFSD.common.thumos_dataset.get_class_index_map", "os.path.join", "config[].get", "config[].get", "outpath.split", "os.path.dirname", "os.path.exists", "os.makedirs", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map"], ["", "def", "get_basic_config", "(", "config", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", "\n", "cfg", ".", "use_rpl", "=", "config", "[", "'model'", "]", "[", "'use_rpl'", "]", "if", "'use_rpl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "cfg", ".", "use_gcpl", "=", "config", "[", "'training'", "]", "[", "'rpl_config'", "]", "[", "'gcpl'", "]", "if", "cfg", ".", "use_rpl", "and", "'gcpl'", "in", "config", "[", "'training'", "]", "[", "'rpl_config'", "]", "else", "False", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "cfg", ".", "evidence", "=", "config", "[", "'model'", "]", "[", "'evidence'", "]", "\n", "", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "-", "1", "\n", "", "_", ",", "cfg", ".", "idx_to_class", "=", "get_class_index_map", "(", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "\n", "cfg", ".", "json_name", "=", "config", "[", "'testing'", "]", "[", "'output_json'", "]", "\n", "outpath", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "split_folder", "=", "outpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "cfg", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "outpath", ")", ")", ",", "config", "[", "'testing'", "]", "[", "'exp_tag'", "]", ",", "split_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "config", "[", "'testing'", "]", "[", "'fusion'", "]", "\n", "\n", "# getting path for fusion", "\n", "cfg", ".", "rgb_data_path", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_data_path'", ",", "\n", "'./datasets/thumos14/test_npy/'", ")", "\n", "cfg", ".", "flow_data_path", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_data_path'", ",", "\n", "'./datasets/thumos14/test_flow_npy/'", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_cross_data.get_anet_cfg": [[390, 410], ["test_cross_data.get_anet_cfg.get_anet_video_info"], "function", ["None"], ["", "def", "get_anet_cfg", "(", ")", ":", "\n", "    ", "def", "get_anet_video_info", "(", "video_info_path", ",", "subset", "=", "'training'", ")", ":", "\n", "        ", "with", "open", "(", "video_info_path", ")", "as", "json_file", ":", "\n", "            ", "json_data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "video_info", "=", "{", "}", "\n", "video_list", "=", "list", "(", "json_data", ".", "keys", "(", ")", ")", "\n", "for", "video_name", "in", "video_list", ":", "\n", "            ", "tmp", "=", "json_data", "[", "video_name", "]", "\n", "if", "tmp", "[", "'subset'", "]", "==", "subset", ":", "\n", "                ", "video_info", "[", "video_name", "]", "=", "tmp", "\n", "", "", "return", "video_info", "\n", "\n", "", "class", "cfg", ":", "pass", "\n", "cfg", ".", "clip_length", "=", "768", "\n", "cfg", ".", "stride", "=", "768", "\n", "cfg", ".", "crop_size", "=", "96", "\n", "cfg", ".", "video_infos", "=", "get_anet_video_info", "(", "'datasets/activitynet/annotations/video_info_train_val.json'", ",", "subset", "=", "'validation'", ")", "\n", "cfg", ".", "mp4_data_path", "=", "'datasets/activitynet/train_val_npy_112'", "\n", "cfg", ".", "overlapping_class_file", "=", "'datasets/activitynet/overlapping_classes_in_thumos.txt'", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.__init__": [[26, 35], ["torch.Module.__init__", "AFSD.common.i3d_backbone.InceptionI3d", "BDNet.I3D_BackBone._model.build"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.build"], ["freeze_bn", "=", "freeze_bn", ",", "freeze_bn_affine", "=", "freeze_bn_affine", ")", ":", "\n", "        ", "super", "(", "I3D_BackBone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_model", "=", "InceptionI3d", "(", "final_endpoint", "=", "final_endpoint", ",", "\n", "name", "=", "name", ",", "\n", "in_channels", "=", "in_channels", ")", "\n", "self", ".", "_model", ".", "build", "(", ")", "\n", "self", ".", "_freeze_bn", "=", "freeze_bn", "\n", "self", ".", "_freeze_bn_affine", "=", "freeze_bn_affine", "\n", "\n", "", "def", "load_pretrained_weight", "(", "self", ",", "model_path", "=", "config", "[", "'model'", "]", "[", "'backbone_model'", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.load_pretrained_weight": [[36, 38], ["BDNet.I3D_BackBone._model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["        ", "self", ".", "_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.train": [[39, 50], ["super().train", "BDNet.I3D_BackBone._model.named_modules", "isinstance", "m.eval", "m.weight.requires_grad_", "m.bias.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.train"], ["        ", "super", "(", "I3D_BackBone", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "_freeze_bn", "and", "mode", ":", "\n", "# print('freeze all BatchNorm3d in I3D backbone.')", "\n", "            ", "for", "name", ",", "m", "in", "self", ".", "_model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "# print('freeze {}.'.format(name))", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "if", "self", ".", "_freeze_bn_affine", ":", "\n", "                        ", "m", ".", "weight", ".", "requires_grad_", "(", "False", ")", "\n", "m", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.forward": [[51, 53], ["BDNet.I3D_BackBone._model.extract_features"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.extract_features"], ["        ", "return", "self", ".", "_model", ".", "extract_features", "(", "x", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.ScaleExp.__init__": [[56, 59], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["        ", "super", "(", "ScaleExp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "init_value", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.ScaleExp.forward": [[60, 62], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["        ", "return", "torch", ".", "exp", "(", "input", "*", "self", ".", "scale", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.ProposalBranch.__init__": [[65, 103], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AFSD.prop_pooling.boundary_pooling_op.BoundaryMaxPooling", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["        ", "super", "(", "ProposalBranch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cur_point_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "in_channels", "=", "in_channels", ",", "\n", "output_channels", "=", "proposal_channels", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", ")", ",", "\n", "# nn.InstanceNorm1d(proposal_channels),", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "proposal_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "lr_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "in_channels", "=", "in_channels", ",", "\n", "output_channels", "=", "proposal_channels", "*", "2", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", ")", ",", "\n", "# nn.InstanceNorm1d(proposal_channels * 2),", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "proposal_channels", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "boundary_max_pooling", "=", "BoundaryMaxPooling", "(", ")", "\n", "\n", "self", ".", "roi_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "in_channels", "=", "proposal_channels", ",", "\n", "output_channels", "=", "proposal_channels", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", ")", ",", "\n", "# nn.InstanceNorm1d(proposal_channels * 2),", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "proposal_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "proposal_conv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "proposal_channels", "*", "4", ",", "\n", "output_channels", "=", "in_channels", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.ProposalBranch.forward": [[105, 114], ["BDNet.ProposalBranch.cur_point_conv", "BDNet.ProposalBranch.lr_conv", "BDNet.ProposalBranch.boundary_max_pooling", "BDNet.ProposalBranch.boundary_max_pooling", "BDNet.ProposalBranch.roi_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BDNet.ProposalBranch.proposal_conv"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "feature", ",", "frame_level_feature", ",", "segments", ",", "frame_segments", ")", ":", "\n", "        ", "fm_short", "=", "self", ".", "cur_point_conv", "(", "feature", ")", "\n", "feature", "=", "self", ".", "lr_conv", "(", "feature", ")", "\n", "# prop_feature = feature", "\n", "prop_feature", "=", "self", ".", "boundary_max_pooling", "(", "feature", ",", "segments", ")", "\n", "prop_roi_feature", "=", "self", ".", "boundary_max_pooling", "(", "frame_level_feature", ",", "frame_segments", ")", "\n", "prop_roi_feature", "=", "self", ".", "roi_conv", "(", "prop_roi_feature", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.CoarsePyramid.__init__": [[117, 294], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "BDNet.CoarsePyramid.pyramids.append", "BDNet.CoarsePyramid.pyramids.append", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AFSD.common.layers.Unit1D", "BDNet.ProposalBranch", "BDNet.ProposalBranch", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "BDNet.CoarsePyramid.pyramids.append", "loc_towers.append", "conf_towers.append", "AFSD.common.layers.TransformerHead", "AFSD.common.layers.Unit1D", "AFSD.common.layers.RPLHead", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "BDNet.CoarsePyramid.loc_heads.append", "BDNet.CoarsePyramid.priors.append", "AFSD.common.layers.Unit3D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit3D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "AFSD.common.layers.RPLHead", "AFSD.common.layers.Unit1D", "BDNet.ScaleExp", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "AFSD.common.layers.Unit1D", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["return", "prop_feature", ",", "feature", "\n", "\n", "\n", "", "", "class", "CoarsePyramid", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "feat_channels", "=", "(", "832", ",", "1024", ")", ",", "num_cls", "=", "2", ",", "frame_num", "=", "768", ")", ":", "\n", "        ", "super", "(", "CoarsePyramid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "conv_channels", "\n", "self", ".", "pyramids", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "loc_heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "frame_num", "=", "frame_num", "\n", "self", ".", "layer_num", "=", "layer_num", "\n", "self", ".", "num_classes", "=", "num_cls", "\n", "self", ".", "os_head", "=", "os_head", "\n", "self", ".", "pyramids", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "Unit3D", "(", "\n", "in_channels", "=", "feat_channels", "[", "1", "]", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "[", "1", ",", "3", ",", "3", "]", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "padding", "=", "'spatial_valid'", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "layer_num", ")", ":", "\n", "            ", "self", ".", "pyramids", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "\n", "", "loc_towers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "loc_towers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "loc_tower", "=", "nn", ".", "Sequential", "(", "*", "loc_towers", ")", "\n", "conf_towers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "conf_towers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "out_channels", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "", "self", ".", "conf_tower", "=", "nn", ".", "Sequential", "(", "*", "conf_towers", ")", "\n", "\n", "self", ".", "loc_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "2", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "self", ".", "conf_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "self", ".", "num_classes", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "self", ".", "actionness_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "1", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "\n", "", "self", ".", "loc_proposal_branch", "=", "ProposalBranch", "(", "out_channels", ",", "512", ")", "\n", "self", ".", "conf_proposal_branch", "=", "ProposalBranch", "(", "out_channels", ",", "512", ")", "\n", "\n", "self", ".", "prop_loc_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "2", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "self", ".", "prop_conf_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "self", ".", "num_classes", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "self", ".", "prop_actionness_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "1", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "\n", "", "self", ".", "center_head", "=", "Unit1D", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "output_channels", "=", "1", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation_fn", "=", "None", "\n", ")", "\n", "\n", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "Unit1D", "(", "out_channels", ",", "out_channels", ",", "3", ",", "activation_fn", "=", "None", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Unit1D", "(", "out_channels", ",", "out_channels", ",", "3", ",", "activation_fn", "=", "None", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Unit1D", "(", "out_channels", ",", "out_channels", ",", "1", ",", "activation_fn", "=", "None", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "priors", "=", "[", "]", "\n", "t", "=", "feat_t", "\n", "for", "i", "in", "range", "(", "layer_num", ")", ":", "\n", "            ", "self", ".", "loc_heads", ".", "append", "(", "ScaleExp", "(", ")", ")", "\n", "self", ".", "priors", ".", "append", "(", "\n", "torch", ".", "Tensor", "(", "[", "[", "(", "c", "+", "0.5", ")", "/", "t", ",", "i", "]", "for", "c", "in", "range", "(", "t", ")", "]", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", ")", "\n", "t", "=", "t", "//", "2", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "feat_dict", ",", "ssl", "=", "False", ")", ":", "\n", "        ", "pyramid_feats", "=", "[", "]", "\n", "locs", "=", "[", "]", "\n", "confs", "=", "[", "]", "\n", "acts", "=", "[", "]", "\n", "centers", "=", "[", "]", "\n", "prop_locs", "=", "[", "]", "\n", "prop_confs", "=", "[", "]", "\n", "prop_acts", "=", "[", "]", "\n", "trip", "=", "[", "]", "\n", "x1", "=", "feat_dict", "[", "'Mixed_5c'", "]", "\n", "# x1 = feat_dict['Mixed_4f']", "\n", "batch_num", "=", "x1", ".", "size", "(", "0", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "pyramids", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "x", "=", "conv", "(", "x1", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "", "pyramid_feats", ".", "append", "(", "x", ")", "\n", "\n", "", "frame_level_feat", "=", "pyramid_feats", "[", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "frame_level_feat", "=", "F", ".", "interpolate", "(", "frame_level_feat", ",", "[", "self", ".", "frame_num", ",", "1", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "frame_level_feat", "=", "self", ".", "deconv", "(", "frame_level_feat", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.CoarsePyramid.forward": [[295, 433], ["x1.size", "enumerate", "pyramid_feats[].unsqueeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "BDNet.CoarsePyramid.deconv", "trip.append", "start_feat.permute().contiguous", "end_feat.permute().contiguous", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "pyramid_feats.append", "BDNet.CoarsePyramid.clone", "BDNet.CoarsePyramid.loc_tower", "BDNet.CoarsePyramid.conf_tower", "locs.append", "confs.append", "feat.size", "BDNet.CoarsePyramid.loc_proposal_branch", "BDNet.CoarsePyramid.conf_proposal_branch", "prop_locs.append", "prop_confs.append", "centers.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv", "conv.squeeze().squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "start_feat.permute", "end_feat.permute", "torch.dropout", "torch.dropout", "torch.dropout", "ctr_feats.append", "BDNet.CoarsePyramid.conf_head().view().permute().contiguous", "acts.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "BDNet.CoarsePyramid.priors[].expand().to", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trip.extend", "loc_prop_feat_[].permute().contiguous", "loc_prop_feat_[].permute().contiguous", "conf_prop_feat_[].permute().contiguous", "conf_prop_feat_[].permute().contiguous", "BDNet.CoarsePyramid.prop_loc_head().view().permute().contiguous", "torch.dropout", "torch.dropout", "torch.dropout", "prop_ctr_feats.append", "BDNet.CoarsePyramid.prop_conf_head().view().permute().contiguous", "prop_acts.append", "BDNet.CoarsePyramid.center_head().view().permute().contiguous", "o.view", "o.view", "o.view", "o.view", "o.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv", "conv.squeeze().squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "conv", "BDNet.CoarsePyramid.actionness_head().view().permute().contiguous", "loc_prop_feat_.size", "BDNet.CoarsePyramid.prop_actionness_head().view().permute().contiguous", "o.view", "o.view", "o.permute().contiguous().view", "o.permute().contiguous().view", "conv.squeeze", "BDNet.CoarsePyramid.conf_head().view().permute", "BDNet.CoarsePyramid.priors[].expand", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "loc_prop_feat_.clone", "conf_prop_feat_.clone", "loc_prop_feat_[].permute", "loc_prop_feat_[].permute", "conf_prop_feat_[].permute", "conf_prop_feat_[].permute", "BDNet.CoarsePyramid.prop_loc_head().view().permute", "BDNet.CoarsePyramid.prop_conf_head().view().permute", "BDNet.CoarsePyramid.center_head().view().permute", "conv.squeeze", "x0.size", "BDNet.CoarsePyramid.actionness_head().view().permute", "BDNet.CoarsePyramid.prop_actionness_head().view().permute", "o.permute().contiguous", "o.permute().contiguous", "BDNet.CoarsePyramid.conf_head().view", "BDNet.CoarsePyramid.prop_loc_head().view", "BDNet.CoarsePyramid.prop_conf_head().view", "BDNet.CoarsePyramid.center_head().view", "BDNet.CoarsePyramid.actionness_head().view", "BDNet.CoarsePyramid.prop_actionness_head().view", "o.permute", "o.permute", "BDNet.CoarsePyramid.conf_head", "BDNet.CoarsePyramid.prop_loc_head", "BDNet.CoarsePyramid.prop_conf_head", "BDNet.CoarsePyramid.center_head", "BDNet.CoarsePyramid.loc_head", "BDNet.CoarsePyramid.actionness_head", "BDNet.CoarsePyramid.prop_actionness_head"], "methods", ["None"], ["trip", ".", "append", "(", "frame_level_feat", ".", "clone", "(", ")", ")", "\n", "start_feat", "=", "frame_level_feat", "[", ":", ",", ":", "256", "]", "\n", "end_feat", "=", "frame_level_feat", "[", ":", ",", "256", ":", "]", "\n", "start", "=", "start_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "end", "=", "end_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "for", "i", ",", "feat", "in", "enumerate", "(", "pyramid_feats", ")", ":", "\n", "# prior = torch.Tensor([[(c + 0.5) / t] for c in range(t)]).view(-1, 1).to(feat.device)", "\n", "# priors.append(prior)", "\n", "            ", "loc_feat", "=", "self", ".", "loc_tower", "(", "feat", ")", "\n", "conf_feat", "=", "self", ".", "conf_tower", "(", "feat", ")", "\n", "\n", "locs", ".", "append", "(", "\n", "self", ".", "loc_heads", "[", "i", "]", "(", "self", ".", "loc_head", "(", "loc_feat", ")", ")", "\n", ".", "view", "(", "batch_num", ",", "2", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "*", "fpn_strides", "[", "i", "]", "\n", ")", "\n", "confs", ".", "append", "(", "\n", "self", ".", "conf_head", "(", "conf_feat", ")", ".", "view", "(", "batch_num", ",", "self", ".", "num_classes", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "                ", "acts", ".", "append", "(", "\n", "self", ".", "actionness_head", "(", "conf_feat", ")", ".", "view", "(", "batch_num", ",", "1", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (1, D, 1)", "\n", ")", "\n", "", "t", "=", "feat", ".", "size", "(", "2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "segments", "=", "locs", "[", "-", "1", "]", "/", "self", ".", "frame_num", "*", "t", "\n", "priors", "=", "self", ".", "priors", "[", "i", "]", "[", ":", ",", ":", "1", "]", ".", "expand", "(", "batch_num", ",", "t", ",", "1", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "new_priors", "=", "torch", ".", "round", "(", "priors", "*", "t", "-", "0.5", ")", "\n", "plen", "=", "segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "segments", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "in_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "4.0", ",", "min", "=", "1.0", ")", "\n", "out_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "10.0", ",", "min", "=", "1.0", ")", "\n", "\n", "l_segment", "=", "new_priors", "-", "segments", "[", ":", ",", ":", ",", ":", "1", "]", "\n", "r_segment", "=", "new_priors", "+", "segments", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "round", "(", "l_segment", "-", "out_plen", ")", ",", "\n", "torch", ".", "round", "(", "l_segment", "+", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "r_segment", "-", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "r_segment", "+", "out_plen", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "decoded_segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", ",", ":", "1", "]", "*", "self", ".", "frame_num", "-", "locs", "[", "-", "1", "]", "[", ":", ",", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", ",", ":", "1", "]", "*", "self", ".", "frame_num", "+", "locs", "[", "-", "1", "]", "[", ":", ",", ":", ",", "1", ":", "]", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "plen", "=", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "1.0", "\n", "in_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "4.0", ",", "min", "=", "1.0", ")", "\n", "out_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "10.0", ",", "min", "=", "1.0", ")", "\n", "frame_segments", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "-", "out_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "+", "out_plen", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "loc_prop_feat", ",", "loc_prop_feat_", "=", "self", ".", "loc_proposal_branch", "(", "loc_feat", ",", "frame_level_feat", ",", "\n", "segments", ",", "frame_segments", ")", "\n", "conf_prop_feat", ",", "conf_prop_feat_", "=", "self", ".", "conf_proposal_branch", "(", "conf_feat", ",", "frame_level_feat", ",", "\n", "segments", ",", "frame_segments", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "trip", ".", "extend", "(", "[", "loc_prop_feat_", ".", "clone", "(", ")", ",", "conf_prop_feat_", ".", "clone", "(", ")", "]", ")", "\n", "ndim", "=", "loc_prop_feat_", ".", "size", "(", "1", ")", "//", "2", "\n", "start_loc_prop", "=", "loc_prop_feat_", "[", ":", ",", ":", "ndim", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "end_loc_prop", "=", "loc_prop_feat_", "[", ":", ",", "ndim", ":", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "start_conf_prop", "=", "conf_prop_feat_", "[", ":", ",", ":", "ndim", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "end_conf_prop", "=", "conf_prop_feat_", "[", ":", ",", "ndim", ":", ",", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "if", "ssl", ":", "\n", "                    ", "return", "trip", "\n", "", "", "prop_locs", ".", "append", "(", "self", ".", "prop_loc_head", "(", "loc_prop_feat", ")", ".", "view", "(", "batch_num", ",", "2", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "prop_confs", ".", "append", "(", "self", ".", "prop_conf_head", "(", "conf_prop_feat", ")", ".", "view", "(", "batch_num", ",", "self", ".", "num_classes", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "if", "self", ".", "os_head", ":", "\n", "                ", "prop_acts", ".", "append", "(", "self", ".", "prop_actionness_head", "(", "conf_prop_feat", ")", ".", "view", "(", "batch_num", ",", "1", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "# (1, D, 1)", "\n", "", "centers", ".", "append", "(", "\n", "self", ".", "center_head", "(", "loc_prop_feat", ")", ".", "view", "(", "batch_num", ",", "1", ",", "-", "1", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", ")", "\n", "\n", "", "loc", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "2", ")", "for", "o", "in", "locs", "]", ",", "1", ")", "\n", "conf", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "self", ".", "num_classes", ")", "for", "o", "in", "confs", "]", ",", "1", ")", "\n", "prop_loc", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "2", ")", "for", "o", "in", "prop_locs", "]", ",", "1", ")", "\n", "prop_conf", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "self", ".", "num_classes", ")", "for", "o", "in", "prop_confs", "]", ",", "1", ")", "\n", "center", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "1", ")", "for", "o", "in", "centers", "]", ",", "1", ")", "\n", "priors", "=", "torch", ".", "cat", "(", "self", ".", "priors", ",", "0", ")", ".", "to", "(", "loc", ".", "device", ")", "\n", "outs", "=", "(", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "start", ",", "end", ",", "start_loc_prop", ",", "end_loc_prop", ",", "start_conf_prop", ",", "end_conf_prop", ")", "\n", "act", ",", "prop_act", "=", "None", ",", "None", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "act", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "1", ")", "for", "o", "in", "acts", "]", ",", "1", ")", "# (1, 126, 1)", "\n", "prop_act", "=", "torch", ".", "cat", "(", "[", "o", ".", "view", "(", "batch_num", ",", "-", "1", ",", "1", ")", "for", "o", "in", "prop_acts", "]", ",", "1", ")", "# (1, 126, 1)", "\n", "", "outs", "+=", "(", "act", ",", "prop_act", ")", "\n", "return", "outs", "\n", "\n", "\n", "", "", "class", "BDNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "backbone_model", "=", "None", ",", "training", "=", "True", ",", "\n", "frame_num", "=", "768", ",", "use_edl", "=", "False", ")", ":", "\n", "        ", "super", "(", "BDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "os_head", "=", "os_head", "\n", "self", ".", "num_classes", "=", "num_classes", "-", "1", "if", "self", ".", "os_head", "else", "num_classes", "\n", "self", ".", "coarse_pyramid_detection", "=", "CoarsePyramid", "(", "frame_num", "=", "frame_num", ",", "num_cls", "=", "self", ".", "num_classes", ")", "\n", "self", ".", "reset_params", "(", ")", "\n", "self", ".", "boundary_max_pooling", "=", "BoundaryMaxPooling", "(", ")", "\n", "self", ".", "backbone", "=", "I3D_BackBone", "(", "in_channels", "=", "in_channels", ")", "\n", "self", ".", "_training", "=", "training", "\n", "if", "self", ".", "_training", ":", "\n", "            ", "if", "backbone_model", "is", "None", ":", "\n", "                ", "self", ".", "backbone", ".", "load_pretrained_weight", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "backbone", ".", "load_pretrained_weight", "(", "backbone_model", ")", "\n", "", "", "self", ".", "scales", "=", "[", "1", ",", "4", ",", "4", "]", "\n", "self", ".", "use_edl", "=", "use_edl", "\n", "self", ".", "evidence", "=", "evidence", "\n", "if", "self", ".", "use_edl", ":", "\n", "            ", "self", ".", "out_layer", "=", "DirichletLayer", "(", "self", ".", "evidence", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "@", "staticmethod", "\n", "def", "weight_init", "(", "m", ")", ":", "\n", "        ", "def", "glorot_uniform_", "(", "tensor", ")", ":", "\n", "            ", "fan_in", ",", "fan_out", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "tensor", ")", "\n", "scale", "=", "1.0", "\n", "scale", "/=", "max", "(", "1.", ",", "(", "fan_in", "+", "fan_out", ")", "/", "2.", ")", "\n", "limit", "=", "np", ".", "sqrt", "(", "3.0", "*", "scale", ")", "\n", "return", "nn", ".", "init", ".", "_no_grad_uniform_", "(", "tensor", ",", "-", "limit", ",", "limit", ")", "\n", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose3d", ")", ":", "\n", "            ", "glorot_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.__init__": [[436, 459], ["torch.Module.__init__", "BDNet.CoarsePyramid", "BDNet.BDNet.reset_params", "BDNet.I3D_BackBone", "AFSD.prop_pooling.boundary_pooling_op.BoundaryMaxPooling", "BDNet.DirichletLayer", "BDNet.BDNet.backbone.load_pretrained_weight", "BDNet.BDNet.backbone.load_pretrained_weight"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.reset_params", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.load_pretrained_weight", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.load_pretrained_weight"], ["        ", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "self", ".", "weight_init", "(", "m", ")", "\n", "# Initialization", "\n", "", "for", "modules", "in", "[", "\n", "self", ".", "coarse_pyramid_detection", ".", "loc_tower", ",", "self", ".", "coarse_pyramid_detection", ".", "conf_tower", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "loc_head", ",", "self", ".", "coarse_pyramid_detection", ".", "conf_head", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "loc_proposal_branch", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "conf_proposal_branch", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "prop_loc_head", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "prop_conf_head", ",", "\n", "self", ".", "coarse_pyramid_detection", ".", "center_head", "\n", "]", ":", "\n", "            ", "for", "layer", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "proposals", "=", "None", ",", "ssl", "=", "False", ")", ":", "\n", "        ", "feat_dict", "=", "self", ".", "backbone", "(", "x", ")", "\n", "if", "ssl", ":", "\n", "            ", "top_feat", "=", "self", ".", "coarse_pyramid_detection", "(", "feat_dict", ",", "ssl", ")", "\n", "decoded_segments", "=", "proposals", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "\n", "plen", "=", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "1.0", "\n", "in_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "4.0", ",", "min", "=", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.weight_init": [[460, 474], ["torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "max", "numpy.sqrt", "torch.init._no_grad_uniform_", "torch.init._no_grad_uniform_", "torch.init._no_grad_uniform_", "isinstance", "isinstance", "isinstance", "isinstance", "BDNet.BDNet.weight_init.glorot_uniform_"], "methods", ["None"], ["out_plen", "=", "torch", ".", "clamp", "(", "plen", "/", "10.0", ",", "min", "=", "1.0", ")", "\n", "frame_segments", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "-", "out_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", ":", "1", "]", "+", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "-", "in_plen", ")", ",", "\n", "torch", ".", "round", "(", "decoded_segments", "[", ":", ",", ":", ",", "1", ":", "]", "+", "out_plen", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "anchor", ",", "positive", ",", "negative", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "bound_feat", "=", "self", ".", "boundary_max_pooling", "(", "top_feat", "[", "i", "]", ",", "frame_segments", "/", "self", ".", "scales", "[", "i", "]", ")", "\n", "# for triplet loss", "\n", "ndim", "=", "bound_feat", ".", "size", "(", "1", ")", "//", "2", "\n", "anchor", ".", "append", "(", "bound_feat", "[", ":", ",", "ndim", ":", ",", "0", "]", ")", "\n", "positive", ".", "append", "(", "bound_feat", "[", ":", ",", ":", "ndim", ",", "1", "]", ")", "\n", "negative", ".", "append", "(", "bound_feat", "[", ":", ",", ":", "ndim", ",", "2", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.reset_params": [[475, 478], ["enumerate", "BDNet.BDNet.modules", "BDNet.BDNet.weight_init"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.weight_init"], ["\n", "", "return", "anchor", ",", "positive", ",", "negative", "\n", "", "else", ":", "\n", "            ", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "start", ",", "end", ","]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.BDNet.forward": [[479, 536], ["BDNet.BDNet.backbone", "BDNet.BDNet.coarse_pyramid_detection", "proposals[].unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "BDNet.BDNet.coarse_pyramid_detection", "BDNet.BDNet.boundary_max_pooling", "anchor.append", "positive.append", "negative.append", "BDNet.BDNet.out_layer.compute_uncertainty", "BDNet.BDNet.out_layer.compute_uncertainty", "out_dict.update", "out_dict.update", "out_dict.update", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "BDNet.BDNet.size"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.compute_uncertainty", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.compute_uncertainty"], ["start_loc_prop", ",", "end_loc_prop", ",", "start_conf_prop", ",", "end_conf_prop", ",", "act", ",", "prop_act", "=", "self", ".", "coarse_pyramid_detection", "(", "feat_dict", ")", "\n", "out_dict", "=", "{", "\n", "'loc'", ":", "loc", ",", "\n", "'conf'", ":", "conf", ",", "\n", "'priors'", ":", "priors", ",", "\n", "'prop_loc'", ":", "prop_loc", ",", "\n", "'prop_conf'", ":", "prop_conf", ",", "\n", "'center'", ":", "center", ",", "\n", "'start'", ":", "start", ",", "\n", "'end'", ":", "end", ",", "\n", "'start_loc_prop'", ":", "start_loc_prop", ",", "\n", "'end_loc_prop'", ":", "end_loc_prop", ",", "\n", "'start_conf_prop'", ":", "start_conf_prop", ",", "\n", "'end_conf_prop'", ":", "end_conf_prop", ",", "\n", "'act'", ":", "act", ",", "\n", "'prop_act'", ":", "prop_act", "\n", "}", "\n", "if", "self", ".", "use_edl", ":", "\n", "                ", "unct", "=", "self", ".", "out_layer", ".", "compute_uncertainty", "(", "conf", ")", "\n", "prop_unct", "=", "self", ".", "out_layer", ".", "compute_uncertainty", "(", "prop_conf", ")", "\n", "out_dict", ".", "update", "(", "{", "'unct'", ":", "unct", ",", "'prop_unct'", ":", "prop_unct", "}", ")", "\n", "", "return", "out_dict", "\n", "\n", "\n", "", "", "", "class", "DirichletLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "evidence", "=", "'exp'", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "DirichletLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "evidence", "=", "evidence", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "", "def", "evidence_func", "(", "self", ",", "logit", ")", ":", "\n", "        ", "if", "self", ".", "evidence", "==", "'relu'", ":", "\n", "            ", "return", "F", ".", "relu", "(", "logit", ")", "\n", "", "if", "self", ".", "evidence", "==", "'exp'", ":", "\n", "            ", "return", "torch", ".", "exp", "(", "torch", ".", "clamp", "(", "logit", ",", "-", "10", ",", "10", ")", ")", "\n", "", "if", "self", ".", "evidence", "==", "'softplus'", ":", "\n", "            ", "return", "F", ".", "softplus", "(", "logit", ")", "\n", "\n", "", "", "def", "compute_uncertainty", "(", "self", ",", "logit", ")", ":", "\n", "        ", "num_classes", "=", "logit", ".", "size", "(", "-", "1", ")", "\n", "alpha", "=", "self", ".", "evidence_func", "(", "logit", ")", "+", "1", "# alpha = e + 1", "\n", "uncertainty", "=", "num_classes", "/", "alpha", ".", "sum", "(", "-", "1", ")", "# u = K / S", "\n", "return", "uncertainty", "\n", "\n", "", "def", "forward", "(", "self", ",", "logit", ")", ":", "\n", "        ", "alpha", "=", "self", ".", "evidence_func", "(", "logit", ")", "+", "1", "\n", "conf", "=", "alpha", "/", "alpha", ".", "sum", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "return", "conf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.__init__": [[539, 543], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.evidence_func": [[544, 551], ["torch.relu", "torch.relu", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.softplus", "torch.softplus", "torch.softplus", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.compute_uncertainty": [[552, 557], ["logit.size", "BDNet.DirichletLayer.evidence_func", "alpha.sum"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.DirichletLayer.forward": [[558, 562], ["BDNet.DirichletLayer.evidence_func", "alpha.sum"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.test_inference": [[564, 584], ["BDNet.BDNet", "BDNet.eval", "BDNet.cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "range", "numpy.mean", "print", "print", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "run_times.append", "int", "torch.randn", "torch.randn", "torch.randn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "BDNet.", "time.time"], "function", ["None"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.get_basic_config": [[24, 64], ["test.get_path", "AFSD.common.thumos_dataset.get_class_index_map", "AFSD.common.thumos_dataset.get_video_info", "AFSD.common.thumos_dataset.get_video_anno", "AFSD.common.thumos_dataset.get_video_info", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_video_anno", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info"], ["def", "get_basic_config", "(", "config", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "# testing data config", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", "\n", "# training data config", "\n", "cfg", ".", "clip_length_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'crop_size'", "]", "\n", "cfg", ".", "overlap_thresh", "=", "config", "[", "'training'", "]", "[", "'piou'", "]", "\n", "\n", "cfg", ".", "input_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", "\n", "cfg", ".", "checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", ")", "\n", "cfg", ".", "feat_dim", "=", "512", "\n", "\n", "cfg", ".", "json_name", "=", "config", "[", "'testing'", "]", "[", "'output_json'", "]", "\n", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "False", "\n", "\n", "# class_mapping, different for each split", "\n", "_", ",", "cfg", ".", "idx_to_class", "=", "get_class_index_map", "(", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "# train data", "\n", "cfg", ".", "video_data_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_data_path'", "]", "\n", "cfg", ".", "video_info_train", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_info_path'", "]", ")", "\n", "cfg", ".", "video_anno_train", "=", "get_video_anno", "(", "cfg", ".", "video_info_train", ",", "\n", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_anno_path'", "]", ",", "\n", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "# test data", "\n", "cfg", ".", "video_data_test", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_data_path'", "]", "\n", "cfg", ".", "video_info_test", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_info_path'", "]", ")", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.prepare_train_data": [[66, 80], ["center_crop", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "AFSD.common.thumos_dataset.annos_transform", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.zeros", "numpy.concatenate", "numpy.stack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.annos_transform"], ["", "def", "prepare_train_data", "(", "video_data", ",", "offset", ",", "clip_length", ",", "center_crop", ",", "annos", ")", ":", "\n", "    ", "input_data", "=", "video_data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "c", ",", "t", ",", "h", ",", "w", "=", "input_data", ".", "shape", "\n", "if", "t", "<", "clip_length", ":", "\n", "# padding t to clip_length", "\n", "        ", "pad_t", "=", "clip_length", "-", "t", "\n", "zero_clip", "=", "np", ".", "zeros", "(", "[", "c", ",", "pad_t", ",", "h", ",", "w", "]", ",", "input_data", ".", "dtype", ")", "\n", "input_data", "=", "np", ".", "concatenate", "(", "[", "input_data", ",", "zero_clip", "]", ",", "1", ")", "\n", "", "input_data", "=", "center_crop", "(", "input_data", ")", "\n", "input_data", "=", "torch", ".", "from_numpy", "(", "input_data", ")", ".", "float", "(", ")", "\n", "input_data", "=", "(", "input_data", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "annos", "=", "annos_transform", "(", "annos", ",", "cfg", ".", "clip_length_train", ")", "\n", "target", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "annos", ",", "0", ")", ")", "\n", "return", "input_data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.compute_iou": [[82, 100], ["torch.finfo", "torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "area_union.clamp"], "function", ["None"], ["", "def", "compute_iou", "(", "pred", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    jaccard: A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\n    \"\"\"", "\n", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "target_area", "=", "target_left", "+", "target_right", "\n", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "area_union", "=", "target_area", "+", "pred_area", "-", "inter", "\n", "ious", "=", "inter", "/", "area_union", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.get_matched_targets": [[102, 139], ["loc_data.size", "priors.size", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "priors.size", "truths.size", "priors[].unsqueeze().expand", "area.min", "test_openmax.compute_iou", "conf.clone", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "priors[].unsqueeze", "truths[].unsqueeze().expand", "truths[].unsqueeze().expand", "truths[].unsqueeze", "truths[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.compute_iou"], ["", "def", "get_matched_targets", "(", "targets", ",", "loc_data", ",", "priors", ",", "clip_length", ",", "tiou_thresh", "=", "0.5", ")", ":", "\n", "    ", "num_batch", "=", "loc_data", ".", "size", "(", "0", ")", "\n", "num_priors", "=", "priors", ".", "size", "(", "0", ")", "\n", "# match priors and ground truth segments", "\n", "loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "for", "idx", "in", "range", "(", "num_batch", ")", ":", "\n", "        ", "truths", "=", "targets", "[", "idx", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "labels", "=", "targets", "[", "idx", "]", "[", ":", ",", "-", "1", "]", "\n", "pre_loc", "=", "loc_data", "[", "idx", "]", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "N", "=", "truths", ".", "size", "(", "0", ")", "\n", "center", "=", "priors", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "K", ",", "N", ")", "\n", "left", "=", "(", "center", "-", "truths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", ")", "*", "clip_length", "\n", "right", "=", "(", "truths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", "-", "center", ")", "*", "clip_length", "\n", "area", "=", "left", "+", "right", "\n", "maxn", "=", "clip_length", "*", "2", "\n", "area", "[", "left", "<", "0", "]", "=", "maxn", "\n", "area", "[", "right", "<", "0", "]", "=", "maxn", "\n", "best_truth_area", ",", "best_truth_idx", "=", "area", ".", "min", "(", "1", ")", "\n", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "priors", "[", ":", ",", "0", "]", "-", "truths", "[", "best_truth_idx", ",", "0", "]", ")", "*", "clip_length", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "truths", "[", "best_truth_idx", ",", "1", "]", "-", "priors", "[", ":", ",", "0", "]", ")", "*", "clip_length", "\n", "conf", "=", "labels", "[", "best_truth_idx", "]", "\n", "conf", "[", "best_truth_area", ">=", "maxn", "]", "=", "0", "\n", "conf_t", "[", "idx", "]", "=", "conf", "\n", "\n", "iou", "=", "compute_iou", "(", "pre_loc", ",", "loc_t", "[", "idx", "]", ")", "# [num_priors]", "\n", "prop_conf", "=", "conf", ".", "clone", "(", ")", "\n", "prop_conf", "[", "iou", "<", "tiou_thresh", "]", "=", "0", "\n", "prop_conf_t", "[", "idx", "]", "=", "prop_conf", "\n", "prop_w", "=", "pre_loc", "[", ":", ",", "0", "]", "+", "pre_loc", "[", ":", ",", "1", "]", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "-", "pre_loc", "[", ":", ",", "0", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "-", "pre_loc", "[", ":", ",", "1", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "", "return", "loc_t", ",", "conf_t", ",", "prop_loc_t", ",", "prop_conf_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.decode_output": [[141, 171], ["torch.cat", "torch.cat", "torch.cat", "torch.cat.clamp_", "center.sigmoid.sigmoid", "conf.view().transpose.view().transpose", "conf.view().transpose.clone", "cfg.openmax_layer", "torch.softmax", "cfg.openmax_prop_layer", "torch.softmax", "conf.view().transpose.view"], "function", ["None"], ["", "def", "decode_output", "(", "output_dict", ",", "offset", ",", "sample_fps", ",", "cfg", ",", "get_feat", "=", "False", ")", ":", "\n", "# get the raw outputs", "\n", "    ", "loc", ",", "conf", ",", "priors", "=", "output_dict", "[", "'loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'conf'", "]", "[", "0", "]", ",", "output_dict", "[", "'priors'", "]", "\n", "prop_loc", ",", "prop_conf", "=", "output_dict", "[", "'prop_loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'prop_conf'", "]", "[", "0", "]", "\n", "center", "=", "output_dict", "[", "'center'", "]", "[", "0", "]", "\n", "if", "get_feat", ":", "\n", "        ", "feat", ",", "prop_feat", "=", "output_dict", "[", "'conf_feat'", "]", "[", "0", "]", ",", "output_dict", "[", "'prop_conf_feat'", "]", "[", "0", "]", "\n", "\n", "# late fusion", "\n", "", "pre_loc_w", "=", "loc", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", "1", ":", "]", "\n", "loc", "=", "0.5", "*", "pre_loc_w", "*", "prop_loc", "+", "loc", "\n", "segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "-", "loc", "[", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "+", "loc", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "segments", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "cfg", ".", "clip_length", ")", "\n", "decoded_segments", "=", "(", "segments", "+", "offset", ")", "/", "sample_fps", "\n", "\n", "conf", "=", "cfg", ".", "openmax_layer", "(", "conf", "[", ":", ",", "1", ":", "]", ",", "feat", ")", "if", "get_feat", "else", "F", ".", "softmax", "(", "conf", ",", "dim", "=", "1", ")", "\n", "prop_conf", "=", "cfg", ".", "openmax_prop_layer", "(", "prop_conf", "[", ":", ",", "1", ":", "]", ",", "feat", ")", "if", "get_feat", "else", "F", ".", "softmax", "(", "prop_conf", ",", "dim", "=", "1", ")", "\n", "center", "=", "center", ".", "sigmoid", "(", ")", "\n", "\n", "conf", "=", "(", "conf", "+", "prop_conf", ")", "/", "2.0", "\n", "conf", "=", "conf", "*", "center", "\n", "conf", "=", "conf", ".", "view", "(", "-", "1", ",", "cfg", ".", "num_classes", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "conf_scores", "=", "conf", ".", "clone", "(", ")", "\n", "\n", "out", "=", "(", "decoded_segments", ",", "conf_scores", ")", "\n", "if", "get_feat", ":", "\n", "        ", "out", "+=", "(", "feat", ",", "prop_feat", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.filtering": [[173, 190], ["c_mask.unsqueeze().expand_as", "decoded_segments[].view", "torch.cat", "torch.cat", "torch.cat", "scores.size", "c_mask.unsqueeze", "scores.unsqueeze"], "function", ["None"], ["", "def", "filtering", "(", "decoded_segments", ",", "conf_score_cls", ",", "conf_thresh", ",", "feat", "=", "None", ",", "prop_feat", "=", "None", ")", ":", "\n", "    ", "c_mask", "=", "conf_score_cls", ">", "conf_thresh", "\n", "scores", "=", "conf_score_cls", "[", "c_mask", "]", "\n", "if", "scores", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "# masking segments", "\n", "", "l_mask", "=", "c_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "decoded_segments", ")", "\n", "segments", "=", "decoded_segments", "[", "l_mask", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 3)", "\n", "\n", "out", "=", "{", "'seg'", ":", "segments", ",", "'feat'", ":", "None", ",", "'prop_feat'", ":", "None", "}", "\n", "if", "feat", "is", "not", "None", "and", "prop_feat", "is", "not", "None", ":", "\n", "        ", "feat_filtered", "=", "feat", "[", "c_mask", "]", "\n", "prop_feat_filtered", "=", "prop_feat", "[", "c_mask", "]", "\n", "out", "[", "'feat'", "]", "=", "feat_filtered", "\n", "out", "[", "'prop_feat'", "]", "=", "prop_feat_filtered", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.get_video_detections": [[192, 246], ["torch.zeros", "torch.zeros", "torch.zeros", "range", "min", "torch.zeros.contiguous().view", "flt.view.view", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.zeros.contiguous().view().view", "torch.zeros.contiguous().view().view", "flt[].contiguous", "tmp[].view", "tmp.detach().cpu().numpy.detach().cpu().numpy", "range", "len", "AFSD.common.segment_utils.softnms_v2", "AFSD.common.segment_utils.softnms_v2", "torch.zeros.contiguous", "tmp.detach().cpu().numpy.size", "flt_feat[].contiguous", "tmp_feat[].view", "tmp_feat.detach().cpu().numpy.detach().cpu().numpy", "flt_prop_feat[].contiguous", "tmp_prop_feat[].view", "tmp_prop_feat.detach().cpu().numpy.detach().cpu().numpy", "float", "proposal_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros.contiguous().view", "torch.zeros.contiguous().view", "tmp.detach().cpu().numpy.detach().cpu", "float", "float", "tmp_feat.detach().cpu().numpy.detach().cpu", "tmp_prop_feat.detach().cpu().numpy.detach().cpu", "torch.zeros.contiguous", "torch.zeros.contiguous", "mask.unsqueeze().expand_as", "tmp.detach().cpu().numpy.detach", "mask.unsqueeze().expand_as", "tmp_feat.detach().cpu().numpy.detach", "mask.unsqueeze().expand_as", "tmp_prop_feat.detach().cpu().numpy.detach", "mask.unsqueeze", "mask.unsqueeze", "mask.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2"], ["", "def", "get_video_detections", "(", "output", ",", "cfg", ",", "get_feat", "=", "False", ")", ":", "\n", "    ", "res_dim", "=", "3", "\n", "res", "=", "torch", ".", "zeros", "(", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "res_dim", ")", "\n", "if", "get_feat", ":", "\n", "        ", "res_feat", "=", "torch", ".", "zeros", "(", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "cfg", ".", "feat_dim", ")", "\n", "res_prop_feat", "=", "torch", ".", "zeros", "(", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "cfg", ".", "feat_dim", ")", "\n", "", "sum_count", "=", "0", "\n", "for", "cl", "in", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", ":", "# from 1 to K+1 by default", "\n", "        ", "if", "len", "(", "output", "[", "'seg'", "]", "[", "cl", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "torch", ".", "cat", "(", "output", "[", "'seg'", "]", "[", "cl", "]", ",", "0", ")", "\n", "if", "get_feat", ":", "\n", "            ", "tmp", ",", "count", ",", "nms_mask", "=", "softnms_v2", "(", "tmp", ",", "sigma", "=", "cfg", ".", "nms_sigma", ",", "top_k", "=", "cfg", ".", "top_k", ",", "score_threshold", "=", "0.001", ",", "get_mask", "=", "True", ")", "\n", "feat", ",", "prop_feat", "=", "torch", ".", "cat", "(", "output", "[", "'feat'", "]", "[", "cl", "]", ",", "0", ")", ",", "torch", ".", "cat", "(", "output", "[", "'prop_feat'", "]", "[", "cl", "]", ",", "0", ")", "\n", "res_feat", "[", "cl", ",", ":", "count", "]", "=", "feat", "[", "nms_mask", "]", "\n", "res_prop_feat", "[", "cl", ",", ":", "count", "]", "=", "prop_feat", "[", "nms_mask", "]", "\n", "", "else", ":", "\n", "            ", "tmp", ",", "count", "=", "softnms_v2", "(", "tmp", ",", "sigma", "=", "cfg", ".", "nms_sigma", ",", "top_k", "=", "cfg", ".", "top_k", ",", "score_threshold", "=", "0.001", ")", "\n", "", "res", "[", "cl", ",", ":", "count", "]", "=", "tmp", "\n", "sum_count", "+=", "count", "\n", "\n", "", "sum_count", "=", "min", "(", "sum_count", ",", "cfg", ".", "top_k", ")", "\n", "flt", "=", "res", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "flt", "=", "flt", ".", "view", "(", "cfg", ".", "num_classes", ",", "-", "1", ",", "res_dim", ")", "\n", "if", "get_feat", ":", "\n", "        ", "flt_feat", "=", "res_feat", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "cfg", ".", "feat_dim", ")", ".", "view", "(", "cfg", ".", "num_classes", ",", "-", "1", ",", "cfg", ".", "feat_dim", ")", "\n", "flt_prop_feat", "=", "res_prop_feat", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "cfg", ".", "feat_dim", ")", ".", "view", "(", "cfg", ".", "num_classes", ",", "-", "1", ",", "cfg", ".", "feat_dim", ")", "\n", "", "proposal_list", "=", "[", "]", "\n", "for", "cl", "in", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", ":", "# from 1 to K+1 by default", "\n", "        ", "class_name", "=", "cfg", ".", "idx_to_class", "[", "cl", "]", "# the name of K classes", "\n", "tmp", "=", "flt", "[", "cl", "]", ".", "contiguous", "(", ")", "# (topK, 3)", "\n", "mask", "=", "tmp", "[", ":", ",", "2", "]", ">", "0", "\n", "tmp", "=", "tmp", "[", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp", ")", "]", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "if", "tmp", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "get_feat", ":", "\n", "            ", "tmp_feat", "=", "flt_feat", "[", "cl", "]", ".", "contiguous", "(", ")", "\n", "tmp_feat", "=", "tmp_feat", "[", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp_feat", ")", "]", ".", "view", "(", "-", "1", ",", "cfg", ".", "feat_dim", ")", "\n", "tmp_feat", "=", "tmp_feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tmp_prop_feat", "=", "flt_prop_feat", "[", "cl", "]", ".", "contiguous", "(", ")", "\n", "tmp_prop_feat", "=", "tmp_prop_feat", "[", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp_prop_feat", ")", "]", ".", "view", "(", "-", "1", ",", "cfg", ".", "feat_dim", ")", "\n", "tmp_prop_feat", "=", "tmp_prop_feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "tmp", "=", "tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "tmp", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tmp_proposal", "=", "{", "}", "\n", "tmp_proposal", "[", "'label'", "]", "=", "class_name", "\n", "tmp_proposal", "[", "'score'", "]", "=", "float", "(", "tmp", "[", "i", ",", "2", "]", ")", "\n", "tmp_proposal", "[", "'segment'", "]", "=", "[", "float", "(", "tmp", "[", "i", ",", "0", "]", ")", ",", "\n", "float", "(", "tmp", "[", "i", ",", "1", "]", ")", "]", "\n", "if", "get_feat", ":", "\n", "                ", "tmp_proposal", "[", "'feat'", "]", "=", "tmp_feat", "[", "i", "]", "\n", "tmp_proposal", "[", "'prop_feat'", "]", "=", "tmp_prop_feat", "[", "i", "]", "\n", "", "proposal_list", ".", "append", "(", "tmp_proposal", ")", "\n", "", "", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.compute_mav_dist": [[248, 328], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.common.videotransforms.CenterCrop", "AFSD.common.thumos_dataset.split_videos", "AFSD.common.thumos_dataset.load_video_data", "cfg.idx_to_class.items", "tqdm.tqdm", "os.makedirs", "list", "torch.load", "torch.load", "torch.load", "numpy.zeros", "numpy.zeros", "test_openmax.prepare_train_data", "clip.unsqueeze().cuda.unsqueeze().cuda", "test_openmax.get_matched_targets", "conf_t.view", "prop_conf_t.view", "cfg.idx_to_class.values", "numpy.stack", "numpy.mean", "numpy.array", "numpy.stack", "numpy.mean", "numpy.array", "os.path.join", "numpy.savez", "AFSD.thumos14.BDNet.BDNet.eval", "len", "target.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "AFSD.thumos14.BDNet.BDNet.", "labels_pos.cpu().numpy.numel", "feat[].cpu().numpy", "labels_pos.cpu().numpy.cpu().numpy", "zip", "labels_pos.cpu().numpy.numel", "prop_feat[].cpu().numpy", "labels_pos.cpu().numpy.cpu().numpy", "zip", "clip.unsqueeze().cuda.unsqueeze", "all_features[].append", "all_prop_features[].append", "openmax.compute_eucos_dist", "openmax.compute_eucos_dist", "feat[].cpu", "labels_pos.cpu().numpy.cpu", "prop_feat[].cpu", "labels_pos.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.split_videos", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.load_video_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.prepare_train_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_matched_targets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.compute_eucos_dist", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.compute_eucos_dist"], ["", "def", "compute_mav_dist", "(", "mav_dist_dir", ",", "cfg", ")", ":", "\n", "# prepare model", "\n", "    ", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "training", "=", "False", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfg", ".", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size_train", ")", "\n", "\n", "# prepare dataset", "\n", "data_list", ",", "_", "=", "split_videos", "(", "cfg", ".", "video_info_train", ",", "cfg", ".", "video_anno_train", ",", "clip_length", "=", "cfg", ".", "clip_length_train", ",", "stride", "=", "cfg", ".", "stride_train", ")", "\n", "train_data_dict", "=", "load_video_data", "(", "cfg", ".", "video_info_train", ",", "cfg", ".", "video_data_train", ")", "# load the entire THUMOS14 dataset", "\n", "\n", "mav_features", ",", "mav_prop_features", "=", "{", "}", ",", "{", "}", "\n", "all_features", ",", "all_prop_features", "=", "{", "}", ",", "{", "}", "\n", "for", "cl", ",", "name", "in", "cfg", ".", "idx_to_class", ".", "items", "(", ")", ":", "\n", "        ", "mav_features", "[", "name", "]", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "feat_dim", ")", ")", "\n", "mav_prop_features", "[", "name", "]", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "feat_dim", ")", ")", "\n", "all_features", "[", "name", "]", "=", "[", "]", "\n", "all_prop_features", "[", "name", "]", "=", "[", "]", "\n", "# video_list = list(cfg.video_info_train.keys())", "\n", "", "count", ",", "count_prop", "=", "0", ",", "0", "\n", "for", "sample_info", "in", "tqdm", ".", "tqdm", "(", "data_list", ",", "total", "=", "len", "(", "data_list", ")", ",", "ncols", "=", "0", ",", "desc", "=", "'Extracting MAV frome Train Set'", ")", ":", "\n", "        ", "video_name", "=", "sample_info", "[", "'video_name'", "]", "\n", "sample_fps", "=", "cfg", ".", "video_info_train", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "# get and prepare training clip", "\n", "video_data", "=", "train_data_dict", "[", "video_name", "]", "# (C, T, H, W)", "\n", "clip", ",", "target", "=", "prepare_train_data", "(", "video_data", ",", "sample_info", "[", "'offset'", "]", ",", "cfg", ".", "clip_length_train", ",", "center_crop", ",", "sample_info", "[", "'annos'", "]", ")", "\n", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "target", "=", "[", "target", ".", "cuda", "(", ")", "]", "\n", "# inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "clip_out", "=", "net", "(", "clip", ",", "get_feat", "=", "True", ")", "\n", "\n", "# decode the outputs (late fusion)", "\n", "", "feat", ",", "prop_feat", "=", "clip_out", "[", "'conf_feat'", "]", "[", "0", "]", ",", "clip_out", "[", "'prop_conf_feat'", "]", "[", "0", "]", "\n", "# find the targets", "\n", "_", ",", "conf_t", ",", "_", ",", "prop_conf_t", "=", "get_matched_targets", "(", "target", ",", "clip_out", "[", "'loc'", "]", ",", "clip_out", "[", "'priors'", "]", ",", "cfg", ".", "clip_length_train", ",", "cfg", ".", "overlap_thresh", ")", "\n", "# coarse stage", "\n", "target_conf", "=", "conf_t", ".", "view", "(", "-", "1", ")", "\n", "inds_pos", "=", "target_conf", ">", "0", "\n", "labels_pos", "=", "target_conf", "[", "inds_pos", "]", "\n", "if", "labels_pos", ".", "numel", "(", ")", ">", "0", ":", "\n", "# save features", "\n", "            ", "feat_pos", "=", "feat", "[", "inds_pos", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels_pos", "=", "labels_pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "cl", ",", "feature", "in", "zip", "(", "labels_pos", ",", "feat_pos", ")", ":", "\n", "                ", "name", "=", "cfg", ".", "idx_to_class", "[", "cl", "]", "\n", "# online averaging (\\bar{x}_{n+1} = \\frac{n}{n+1} * \\bar{x}_{n}) + \\frac{1}{n+1} * x_{n+1}", "\n", "mav_features", "[", "name", "]", "=", "count", "/", "(", "count", "+", "1", ")", "*", "mav_features", "[", "name", "]", "+", "1.0", "/", "(", "count", "+", "1", ")", "*", "feature", "\n", "all_features", "[", "name", "]", ".", "append", "(", "feature", ")", "\n", "count", "+=", "1", "\n", "# refined stage", "\n", "", "", "prop_target_conf", "=", "prop_conf_t", ".", "view", "(", "-", "1", ")", "\n", "inds_pos", "=", "prop_target_conf", ">", "0", "\n", "labels_pos", "=", "prop_target_conf", "[", "inds_pos", "]", "\n", "if", "labels_pos", ".", "numel", "(", ")", ">", "0", ":", "\n", "# save features", "\n", "            ", "prop_feat_pos", "=", "prop_feat", "[", "inds_pos", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels_pos", "=", "labels_pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "cl", ",", "feature", "in", "zip", "(", "labels_pos", ",", "prop_feat_pos", ")", ":", "\n", "                ", "name", "=", "cfg", ".", "idx_to_class", "[", "cl", "]", "\n", "# online averaging (\\bar{x}_{n+1} = \\frac{n}{n+1} * \\bar{x}_{n}) + \\frac{1}{n+1} * x_{n+1}", "\n", "mav_prop_features", "[", "name", "]", "=", "count_prop", "/", "(", "count_prop", "+", "1", ")", "*", "mav_prop_features", "[", "name", "]", "+", "1.0", "/", "(", "count_prop", "+", "1", ")", "*", "feature", "\n", "all_prop_features", "[", "name", "]", ".", "append", "(", "feature", ")", "\n", "count_prop", "+=", "1", "\n", "# save class-wise features into disk", "\n", "", "", "", "os", ".", "makedirs", "(", "mav_dist_dir", ",", "exist_ok", "=", "True", ")", "\n", "for", "cls_name", "in", "list", "(", "cfg", ".", "idx_to_class", ".", "values", "(", ")", ")", ":", "\n", "# coarse stage: extract MAV features and distances", "\n", "        ", "feat_list", "=", "all_features", "[", "cls_name", "]", "\n", "features", "=", "np", ".", "stack", "(", "feat_list", ",", "axis", "=", "0", ")", "# (N, D)", "\n", "mav_train", "=", "np", ".", "mean", "(", "features", ",", "axis", "=", "0", ")", "# (D,)", "\n", "eucos_dist", "=", "np", ".", "array", "(", "[", "compute_eucos_dist", "(", "mav_train", ",", "feat", ")", "for", "feat", "in", "feat_list", "]", ")", "# (N,)", "\n", "# refined stage: extract MAV features and distances", "\n", "prop_feat_list", "=", "all_prop_features", "[", "cls_name", "]", "\n", "features", "=", "np", ".", "stack", "(", "prop_feat_list", ",", "axis", "=", "0", ")", "# (N, D)", "\n", "mav_prop_train", "=", "np", ".", "mean", "(", "features", ",", "axis", "=", "0", ")", "# (D,)", "\n", "prop_eucos_dist", "=", "np", ".", "array", "(", "[", "compute_eucos_dist", "(", "mav_prop_train", ",", "feat", ")", "for", "feat", "in", "prop_feat_list", "]", ")", "# (N,)", "\n", "# save results", "\n", "mav_dist_file", "=", "os", ".", "path", ".", "join", "(", "mav_dist_dir", ",", "f'{cls_name}.npz'", ")", "\n", "np", ".", "savez", "(", "mav_dist_file", ",", "mav", "=", "mav_train", ",", "dist", "=", "eucos_dist", ",", "mav_prop", "=", "mav_prop_train", ",", "dist_prop", "=", "prop_eucos_dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.weibull_fitting": [[331, 355], ["cfg.idx_to_class.items", "os.path.join", "numpy.load", "libmr.MR", "libmr.MR.fit_high", "[].append", "libmr.MR", "libmr.MR.fit_high", "[].append", "sorted", "len", "sorted", "len"], "function", ["None"], ["", "", "def", "weibull_fitting", "(", "cfg", ",", "mav_dist_dir", ",", "tailsize", "=", "20", ")", ":", "\n", "    ", "weibull_model", ",", "weibull_prop_model", "=", "{", "}", ",", "{", "}", "\n", "for", "cl", ",", "name", "in", "cfg", ".", "idx_to_class", ".", "items", "(", ")", ":", "\n", "# load the mav and dist data", "\n", "        ", "mav_dist_file", "=", "os", ".", "path", ".", "join", "(", "mav_dist_dir", ",", "f'{name}.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "mav_dist_file", ",", "allow_pickle", "=", "True", ")", "\n", "mav", ",", "dist", "=", "data", "[", "'mav'", "]", ",", "data", "[", "'dist'", "]", "\n", "mav_prop", ",", "dist_prop", "=", "data", "[", "'mav_prop'", "]", ",", "data", "[", "'dist_prop'", "]", "\n", "\n", "# weibull fitting (coarse)", "\n", "weibull_model", "[", "name", "]", "=", "{", "'mean_vec'", ":", "mav", ",", "'model'", ":", "[", "]", "}", "\n", "mr", "=", "libmr", ".", "MR", "(", ")", "\n", "tailtofit", "=", "sorted", "(", "dist", ")", "[", "-", "tailsize", ":", "]", "# points with top-K largest distances", "\n", "mr", ".", "fit_high", "(", "tailtofit", ",", "len", "(", "tailtofit", ")", ")", "\n", "weibull_model", "[", "name", "]", "[", "'model'", "]", ".", "append", "(", "mr", ")", "\n", "\n", "# weibull fitting (refined)", "\n", "weibull_prop_model", "[", "name", "]", "=", "{", "'mean_vec'", ":", "mav_prop", ",", "'model'", ":", "[", "]", "}", "\n", "mr", "=", "libmr", ".", "MR", "(", ")", "\n", "tailtofit", "=", "sorted", "(", "dist_prop", ")", "[", "-", "tailsize", ":", "]", "# points with top-K largest distances", "\n", "mr", ".", "fit_high", "(", "tailtofit", ",", "len", "(", "tailtofit", ")", ")", "\n", "weibull_prop_model", "[", "name", "]", "[", "'model'", "]", ".", "append", "(", "mr", ")", "\n", "\n", "", "return", "weibull_model", ",", "weibull_prop_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.test": [[358, 404], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "torch.load", "torch.load", "torch.load", "list", "test.get_offsets", "test.prepare_data", "test_openmax.get_video_detections", "dict", "open", "json.dump", "AFSD.thumos14.BDNet.BDNet.eval", "cfg.video_info_test.keys", "test.prepare_clip", "output_dict_all.append", "test_openmax.decode_output", "range", "os.path.join", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "AFSD.thumos14.BDNet.BDNet.", "test_openmax.filtering", "[].append", "[].append", "[].append", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.decode_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "test", "(", "cfg", ")", ":", "\n", "# prepare model", "\n", "    ", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "training", "=", "False", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfg", ".", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "cfg", ".", "video_info_test", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ")", ":", "\n", "# get the clip offsets", "\n", "        ", "offsetlist", "=", "get_offsets", "(", "cfg", ".", "video_info_test", ",", "video_name", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "stride", ")", "\n", "sample_fps", "=", "cfg", ".", "video_info_test", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "cfg", ".", "video_data_test", ",", "video_name", ",", "center_crop", ")", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "output_dict_all", "=", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ",", "get_feat", "=", "True", ")", "\n", "", "output_dict_all", ".", "append", "(", "(", "output_dict", ",", "offset", ")", ")", "\n", "\n", "# post-processing", "\n", "", "output", "=", "{", "'seg'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", ",", "\n", "'feat'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", ",", "\n", "'prop_feat'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "}", "\n", "for", "(", "output_dict", ",", "offset", ")", "in", "output_dict_all", ":", "\n", "# decode the outputs (late fusion)", "\n", "            ", "decoded_segments", ",", "conf_scores", ",", "_", ",", "_", "=", "decode_output", "(", "output_dict", ",", "offset", ",", "sample_fps", ",", "cfg", ",", "get_feat", "=", "True", ")", "\n", "# filtering out clip-level predictions with low confidence", "\n", "for", "cl", "in", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", ":", "# from 1 to K+1 by default", "\n", "                ", "out", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "cfg", ".", "conf_thresh", ")", "\n", "if", "out", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "'seg'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'seg'", "]", ")", "\n", "output", "[", "'feat'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'feat'", "]", ")", "\n", "output", "[", "'prop_feat'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'prop_feat'", "]", ")", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "]", "=", "get_video_detections", "(", "output", ",", "cfg", ")", "\n", "\n", "", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "output_path", ",", "cfg", ".", "json_name", ")", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.files_are_ready": [[407, 415], ["cfg.idx_to_class.items", "os.path.join", "os.path.exists"], "function", ["None"], ["", "", "def", "files_are_ready", "(", "mav_dist_dir", ",", "cfg", ")", ":", "\n", "    ", "ready", "=", "True", "\n", "# check the mav_dist files", "\n", "for", "cl", ",", "name", "in", "cfg", ".", "idx_to_class", ".", "items", "(", ")", ":", "\n", "        ", "mav_dist_file", "=", "os", ".", "path", ".", "join", "(", "mav_dist_dir", ",", "f'{name}.npz'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "mav_dist_file", ")", ":", "\n", "            ", "ready", "=", "False", "\n", "", "", "return", "ready", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.print_training_info": [[47, 60], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["print", "(", "'ctr weight: '", ",", "config", "[", "'training'", "]", "[", "'ctw'", "]", ")", "\n", "print", "(", "'iou weight: '", ",", "config", "[", "'training'", "]", "[", "'piou'", "]", ")", "\n", "print", "(", "'ssl weight: '", ",", "config", "[", "'training'", "]", "[", "'ssl'", "]", ")", "\n", "print", "(", "'piou:'", ",", "config", "[", "'training'", "]", "[", "'piou'", "]", ")", "\n", "print", "(", "'resume: '", ",", "resume", ")", "\n", "\n", "\n", "", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.set_seed": [[62, 70], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["\n", "\n", "", "GLOBAL_SEED", "=", "1", "\n", "\n", "\n", "def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "set_seed", "(", "GLOBAL_SEED", "+", "worker_id", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.worker_init_fn": [[75, 77], ["train.set_seed"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_seed"], ["states", ".", "append", "(", "torch", ".", "get_rng_state", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "states", ".", "append", "(", "torch", ".", "cuda", ".", "get_rng_state", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.get_rng_states": [[79, 87], ["states.append", "states.append", "states.append", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "random.getstate", "numpy.random.get_state", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "states.append", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state", "torch.cuda.get_rng_state"], "function", ["None"], ["\n", "\n", "", "def", "set_rng_state", "(", "states", ")", ":", "\n", "    ", "random", ".", "setstate", "(", "states", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "set_state", "(", "states", "[", "1", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "states", "[", "2", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_rng_state", "(", "states", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.set_rng_state": [[89, 95], ["random.setstate", "numpy.random.set_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state"], ["", "", "def", "update_the_latest", "(", "src_file", ",", "dest_file", ")", ":", "\n", "# source file must exist", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "src_file", ")", ",", "\"src file does not exist!\"", "\n", "# destinate file should be removed first if exists", "\n", "if", "os", ".", "path", ".", "lexists", "(", "dest_file", ")", ":", "\n", "        ", "os", ".", "remove", "(", "dest_file", ")", "\n", "", "os", ".", "symlink", "(", "src_file", ",", "dest_file", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.update_the_latest": [[97, 104], ["os.path.exists", "os.path.lexists", "os.symlink", "os.remove"], "function", ["None"], ["\n", "", "def", "save_model", "(", "epoch", ",", "model", ",", "optimizer", ")", ":", "\n", "# save the model weights", "\n", "    ", "model_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint-{}.ckpt'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "model_file", ")", "\n", "update_the_latest", "(", "model_file", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint-latest.ckpt'", ")", ")", "\n", "# save the training status", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.save_model": [[106, 119], ["os.path.join", "torch.save", "torch.save", "torch.save", "train.update_the_latest", "os.path.join", "torch.save", "torch.save", "torch.save", "train.update_the_latest", "model.module.state_dict", "os.path.join", "os.path.join", "optimizer.state_dict", "train.get_rng_states"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.update_the_latest", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.update_the_latest", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.get_rng_states"], ["torch", ".", "save", "(", "{", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'state'", ":", "get_rng_states", "(", ")", "}", ",", "\n", "state_file", ")", "\n", "update_the_latest", "(", "state_file", ",", "\n", "os", ".", "path", ".", "join", "(", "train_state_path", ",", "'checkpoint_latest.ckpt'", ")", ")", "\n", "\n", "\n", "", "def", "resume_training", "(", "resume", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "start_epoch", "=", "1", "\n", "if", "resume", ">", "0", ":", "\n", "        ", "start_epoch", "+=", "resume", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "'checkpoint-{}.ckpt'", ".", "format", "(", "resume", ")", ")", "\n", "model", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "train_path", "=", "os", ".", "path", ".", "join", "(", "train_state_path", ",", "'checkpoint_{}.ckpt'", ".", "format", "(", "resume", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.resume_training": [[121, 132], ["os.path.join", "model.module.load_state_dict", "os.path.join", "torch.load", "torch.load", "torch.load", "optimizer.load_state_dict", "train.set_rng_state", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state"], ["optimizer", ".", "load_state_dict", "(", "state_dict", "[", "'optimizer'", "]", ")", "\n", "set_rng_state", "(", "state_dict", "[", "'state'", "]", ")", "\n", "", "return", "start_epoch", "\n", "\n", "\n", "", "def", "get_grad_norm", "(", "model", ")", ":", "\n", "    ", "total_norm", "=", "0.0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", "and", "p", ".", "requires_grad", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "detach", "(", ")", ".", "data", ".", "norm", "(", "2", ")", "\n", "total_norm", "+=", "param_norm", "**", "2", "\n", "", "", "total_norm", "=", "total_norm", "**", "0.5", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.get_grad_norm": [[134, 142], ["model.parameters", "p.grad.detach().data.norm", "p.grad.detach"], "function", ["None"], ["", "def", "calc_bce_loss", "(", "start", ",", "end", ",", "scores", ")", ":", "\n", "    ", "start", "=", "torch", ".", "tanh", "(", "start", ")", ".", "mean", "(", "-", "1", ")", "\n", "end", "=", "torch", ".", "tanh", "(", "end", ")", ".", "mean", "(", "-", "1", ")", "\n", "loss_start", "=", "F", ".", "binary_cross_entropy", "(", "start", ".", "view", "(", "-", "1", ")", ",", "\n", "scores", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cuda", "(", ")", ",", "\n", "reduction", "=", "'mean'", ")", "\n", "loss_end", "=", "F", ".", "binary_cross_entropy", "(", "end", ".", "view", "(", "-", "1", ")", ",", "\n", "scores", "[", ":", ",", "2", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cuda", "(", ")", ",", "\n", "reduction", "=", "'mean'", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.get_trainable_params": [[144, 150], ["model.named_parameters", "params.append"], "function", ["None"], ["\n", "\n", "", "def", "forward_one_epoch", "(", "net", ",", "clips", ",", "targets", ",", "scores", "=", "None", ",", "training", "=", "True", ",", "ssl", "=", "True", ")", ":", "\n", "    ", "clips", "=", "clips", ".", "cuda", "(", ")", "\n", "targets", "=", "[", "t", ".", "cuda", "(", ")", "for", "t", "in", "targets", "]", "\n", "\n", "if", "training", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.calc_bce_loss": [[152, 162], ["torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.tanh().mean", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.tanh().mean.view", "scores[].contiguous().view().cuda", "torch.tanh().mean.view", "scores[].contiguous().view().cuda", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "scores[].contiguous().view", "scores[].contiguous().view", "scores[].contiguous", "scores[].contiguous"], "function", ["None"], ["            ", "output_dict", "=", "net", "(", "clips", ",", "proposals", "=", "targets", ",", "ssl", "=", "ssl", ")", "\n", "", "else", ":", "\n", "            ", "output_dict", "=", "net", "(", "clips", ",", "ssl", "=", "False", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_dict", "=", "net", "(", "clips", ")", "\n", "\n", "", "", "if", "ssl", ":", "\n", "        ", "anchor", ",", "positive", ",", "negative", "=", "output_dict", "\n", "loss_", "=", "[", "]", "\n", "weights", "=", "[", "1", ",", "0.1", ",", "0.1", "]", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.forward_one_epoch": [[164, 202], ["clips.cuda.cuda", "t.cuda", "range", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "CPD_Loss", "train.calc_bce_loss", "torch.__version__.split", "torch.__version__.split", "torch.__version__.split", "train.calc_bce_loss", "train.calc_bce_loss", "net", "net", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "loss_.append", "torch.interpolate", "torch.interpolate", "torch.stack", "torch.stack", "torch.stack", "int", "int", "torch.TripletMarginLoss"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.calc_bce_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.calc_bce_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.calc_bce_loss"], ["            ", "loss_", ".", "append", "(", "nn", ".", "TripletMarginLoss", "(", ")", "(", "anchor", "[", "i", "]", ",", "positive", "[", "i", "]", ",", "negative", "[", "i", "]", ")", "*", "weights", "[", "i", "]", ")", "\n", "", "trip_loss", "=", "torch", ".", "stack", "(", "loss_", ")", ".", "sum", "(", "0", ")", "\n", "return", "trip_loss", "\n", "", "else", ":", "\n", "        ", "loss_l", ",", "loss_c", ",", "loss_prop_l", ",", "loss_prop_c", ",", "loss_ct", ",", "loss_act", ",", "loss_prop_act", "=", "CPD_Loss", "(", "\n", "[", "output_dict", "[", "'loc'", "]", ",", "output_dict", "[", "'conf'", "]", ",", "\n", "output_dict", "[", "'prop_loc'", "]", ",", "output_dict", "[", "'prop_conf'", "]", ",", "\n", "output_dict", "[", "'center'", "]", ",", "output_dict", "[", "'priors'", "]", ",", "output_dict", "[", "'act'", "]", ",", "output_dict", "[", "'prop_act'", "]", "]", ",", "\n", "targets", ")", "\n", "loss_start", ",", "loss_end", "=", "calc_bce_loss", "(", "output_dict", "[", "'start'", "]", ",", "output_dict", "[", "'end'", "]", ",", "scores", ")", "\n", "versions", "=", "torch", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "if", "int", "(", "versions", "[", "0", "]", ")", "==", "1", "and", "int", "(", "versions", "[", "1", "]", ")", ">=", "6", ":", "# version later than torch 1.6.0", "\n", "            ", "scores_", "=", "F", ".", "interpolate", "(", "scores", ",", "scale_factor", "=", "1.0", "/", "8", ",", "recompute_scale_factor", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "scores_", "=", "F", ".", "interpolate", "(", "scores", ",", "scale_factor", "=", "1.0", "/", "8", ")", "\n", "", "loss_start_loc_prop", ",", "loss_end_loc_prop", "=", "calc_bce_loss", "(", "output_dict", "[", "'start_loc_prop'", "]", ",", "\n", "output_dict", "[", "'end_loc_prop'", "]", ",", "\n", "scores_", ")", "\n", "loss_start_conf_prop", ",", "loss_end_conf_prop", "=", "calc_bce_loss", "(", "output_dict", "[", "'start_conf_prop'", "]", ",", "\n", "output_dict", "[", "'end_conf_prop'", "]", ",", "\n", "scores_", ")", "\n", "loss_start", "=", "loss_start", "+", "0.1", "*", "(", "loss_start_loc_prop", "+", "loss_start_conf_prop", ")", "\n", "loss_end", "=", "loss_end", "+", "0.1", "*", "(", "loss_end_loc_prop", "+", "loss_end_conf_prop", ")", "\n", "return", "loss_l", ",", "loss_c", ",", "loss_prop_l", ",", "loss_prop_c", ",", "loss_ct", ",", "loss_start", ",", "loss_end", ",", "loss_act", ",", "loss_prop_act", "\n", "\n", "\n", "", "", "def", "run_one_epoch", "(", "epoch", ",", "net", ",", "optimizer", ",", "data_loader", ",", "epoch_step_num", ",", "training", "=", "True", ")", ":", "\n", "    ", "if", "training", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "\n", "", "loss_loc_val", "=", "0", "\n", "loss_conf_val", "=", "0", "\n", "loss_prop_l_val", "=", "0", "\n", "loss_prop_c_val", "=", "0", "\n", "loss_ct_val", "=", "0", "\n", "loss_start_val", "=", "0", "\n", "loss_end_val", "=", "0", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.run_one_epoch": [[204, 304], ["print", "net.train", "net.eval", "tqdm.tqdm", "enumerate", "train.save_model", "train.forward_one_epoch", "loss_l.cpu().detach().numpy", "loss_c.cpu().detach().numpy", "loss_prop_l.cpu().detach().numpy", "loss_prop_c.cpu().detach().numpy", "loss_ct.cpu().detach().numpy", "loss_start.cpu().detach().numpy", "loss_end.cpu().detach().numpy", "cost.cpu().detach().numpy", "pbar.set_postfix", "train.forward_one_epoch", "forward_one_epoch.cpu().detach().numpy", "optimizer.zero_grad", "cost.backward", "train.get_grad_norm", "optimizer.step", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "tb_writer.add_scalars", "loss_l.cpu().detach", "loss_c.cpu().detach", "loss_prop_l.cpu().detach", "loss_prop_c.cpu().detach", "loss_ct.cpu().detach", "loss_start.cpu().detach", "loss_end.cpu().detach", "cost.cpu().detach", "forward_one_epoch.cpu().detach", "loss_l.mean().item", "loss_c.mean().item", "loss_prop_l.mean().item", "loss_prop_c.mean().item", "loss_ct.mean().item", "loss_start.mean().item", "loss_end.mean().item", "cost.mean().item", "float", "get_grad_norm.mean().item", "forward_one_epoch.mean().item", "loss_act.mean().item", "loss_act_prop.mean().item", "loss_l.cpu", "loss_c.cpu", "loss_prop_l.cpu", "loss_prop_c.cpu", "loss_ct.cpu", "loss_start.cpu", "loss_end.cpu", "cost.cpu", "cost.cpu().detach().numpy", "forward_one_epoch.cpu", "loss_l.mean", "loss_c.mean", "loss_prop_l.mean", "loss_prop_c.mean", "loss_ct.mean", "loss_start.mean", "loss_end.mean", "cost.mean", "get_grad_norm.mean", "forward_one_epoch.mean", "loss_act.mean", "loss_act_prop.mean", "cost.cpu().detach", "cost.cpu"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.BDNet.I3D_BackBone.train", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.save_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.forward_one_epoch", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.forward_one_epoch", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.prop_pooling.boundary_pooling_op.BoundaryMaxPoolingFunction.backward", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.train.get_grad_norm"], ["loss_contras_val", "=", "0", "\n", "cost_val", "=", "0", "\n", "with", "tqdm", ".", "tqdm", "(", "data_loader", ",", "total", "=", "epoch_step_num", ",", "ncols", "=", "0", ")", "as", "pbar", ":", "\n", "        ", "for", "n_iter", ",", "(", "clips", ",", "targets", ",", "scores", ",", "ssl_clips", ",", "ssl_targets", ",", "flags", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "loss_l", ",", "loss_c", ",", "loss_prop_l", ",", "loss_prop_c", ",", "loss_ct", ",", "loss_start", ",", "loss_end", ",", "loss_act", ",", "loss_act_prop", "=", "forward_one_epoch", "(", "\n", "net", ",", "clips", ",", "targets", ",", "scores", ",", "training", "=", "training", ",", "ssl", "=", "False", ")", "\n", "\n", "loss_l", "=", "loss_l", "*", "config", "[", "'training'", "]", "[", "'lw'", "]", "\n", "loss_c", "=", "loss_c", "*", "config", "[", "'training'", "]", "[", "'cw'", "]", "\n", "loss_prop_l", "=", "loss_prop_l", "*", "config", "[", "'training'", "]", "[", "'lw'", "]", "\n", "loss_prop_c", "=", "loss_prop_c", "*", "config", "[", "'training'", "]", "[", "'cw'", "]", "\n", "loss_ct", "=", "loss_ct", "*", "config", "[", "'training'", "]", "[", "'ctw'", "]", "\n", "cost", "=", "loss_l", "+", "loss_c", "+", "loss_prop_l", "+", "loss_prop_c", "+", "loss_ct", "+", "loss_start", "+", "loss_end", "\n", "if", "os_head", ":", "\n", "                ", "loss_act", "=", "loss_act", "*", "config", "[", "'training'", "]", "[", "'actw'", "]", "\n", "loss_act_prop", "=", "loss_act_prop", "*", "config", "[", "'training'", "]", "[", "'actw'", "]", "\n", "cost", "=", "cost", "+", "loss_act", "+", "loss_act_prop", "\n", "\n", "", "if", "flags", "[", "0", "]", ":", "\n", "                ", "loss_trip", "=", "forward_one_epoch", "(", "net", ",", "ssl_clips", ",", "ssl_targets", ",", "training", "=", "training", ",", "\n", "ssl", "=", "True", ")", "\n", "loss_trip", "*=", "config", "[", "'training'", "]", "[", "'ssl'", "]", "\n", "cost", "=", "cost", "+", "loss_trip", "\n", "loss_trip_val", "+=", "loss_trip", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "cur_iter", "=", "i", "*", "epoch_step_num", "+", "n_iter", "\n", "if", "training", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "cost", ".", "backward", "(", ")", "\n", "grad_norm", "=", "get_grad_norm", "(", "net", ")", "\n", "if", "config", "[", "'testing'", "]", "[", "'split'", "]", "==", "0", ":", "\n", "                    ", "tb_writer", ".", "add_scalars", "(", "f'stats/grad_norm'", ",", "{", "'grad_norm'", ":", "grad_norm", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# record the loss in tensorboards", "\n", "", "if", "config", "[", "'testing'", "]", "[", "'split'", "]", "==", "0", ":", "\n", "                ", "tb_writer", ".", "add_scalars", "(", "f'train_loss/coarse/loss_loc'", ",", "{", "'loss_loc'", ":", "loss_l", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/coarse/loss_cls'", ",", "{", "'loss_cls'", ":", "loss_c", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/refined/loss_loc'", ",", "{", "'loss_loc'", ":", "loss_prop_l", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/refined/loss_cls'", ",", "{", "'loss_cls'", ":", "loss_prop_c", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_quality'", ",", "{", "'loss_q'", ":", "loss_ct", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_start'", ",", "{", "'loss_start'", ":", "loss_start", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_end'", ",", "{", "'loss_end'", ":", "loss_end", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "if", "flags", "[", "0", "]", ":", "\n", "                    ", "tb_writer", ".", "add_scalars", "(", "f'train_loss/regularizer/loss_trip'", ",", "{", "'loss_trip'", ":", "loss_trip", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "", "tb_writer", ".", "add_scalars", "(", "f'train_loss/loss_total'", ",", "{", "'loss_total'", ":", "cost", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "if", "os_head", ":", "\n", "                    ", "tb_writer", ".", "add_scalars", "(", "f'train_loss/coarse/loss_act'", ",", "{", "'loss_act'", ":", "loss_act", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "tb_writer", ".", "add_scalars", "(", "f'train_loss/refined/loss_act_prop'", ",", "{", "'loss_act'", ":", "loss_act_prop", ".", "mean", "(", ")", ".", "item", "(", ")", "}", ",", "cur_iter", ")", "\n", "\n", "", "", "loss_loc_val", "+=", "loss_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_conf_val", "+=", "loss_c", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_prop_l_val", "+=", "loss_prop_l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_prop_c_val", "+=", "loss_prop_c", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_ct_val", "+=", "loss_ct", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_start_val", "+=", "loss_start", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "loss_end_val", "+=", "loss_end", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "cost_val", "+=", "cost", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pbar", ".", "set_postfix", "(", "loss", "=", "'{:.5f}'", ".", "format", "(", "float", "(", "cost", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "\n", "", "", "loss_loc_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_conf_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_prop_l_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_prop_c_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_ct_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_start_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_end_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "loss_trip_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "cost_val", "/=", "(", "n_iter", "+", "1", ")", "\n", "\n", "if", "training", "and", "epoch", ">", "10", ":", "\n", "        ", "prefix", "=", "'Train'", "\n", "save_model", "(", "epoch", ",", "net", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "        ", "prefix", "=", "'Val'", "\n", "\n", "", "plog", "=", "'Epoch-{} {} Loss: Total - {:.5f}, loc - {:.5f}, conf - {:.5f}, prop_loc - {:.5f}, '", "'prop_conf - {:.5f}, IoU - {:.5f}, start - {:.5f}, end - {:.5f}'", ".", "format", "(", "\n", "i", ",", "prefix", ",", "cost_val", ",", "loss_loc_val", ",", "loss_conf_val", ",", "loss_prop_l_val", ",", "loss_prop_c_val", ",", "\n", "loss_ct_val", ",", "loss_start_val", ",", "loss_end_val", "\n", ")", "\n", "plog", "=", "plog", "+", "', Triplet - {:.5f}'", ".", "format", "(", "loss_trip_val", ")", "\n", "print", "(", "plog", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "print_training_info", "(", ")", "\n", "set_seed", "(", "random_seed", ")", "\n", "\"\"\"\n    Setup model\n    \"\"\"", "\n", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "net", "=", "BDNet", "(", "in_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", ",", "\n", "backbone_model", "=", "config", "[", "'model'", "]", "[", "'backbone_model'", "]", ",", "use_edl", "=", "use_edl", ")", "\n", "net", "=", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "\"\"\"\n    Setup optimizer\n    \"\"\"", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.threshold.get_basic_config": [[15, 46], ["config[].get", "config[].get", "os.path.exists", "os.makedirs"], "function", ["None"], ["for", "vid", ",", "proposal_list", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "prop", "in", "proposal_list", ":", "\n", "            ", "if", "scoring", "==", "'uncertainty'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "\n", "", "elif", "scoring", "==", "'confidence'", ":", "\n", "                ", "ood_score", "=", "prop", "[", "'score'", "]", "\n", "", "elif", "scoring", "==", "'uncertainty_actionness'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "*", "prop", "[", "'actionness'", "]", "\n", "", "all_scores", ".", "append", "(", "ood_score", ")", "\n", "", "", "score_sorted", "=", "np", ".", "sort", "(", "all_scores", ")", "# sort the confidence score in an increasing order", "\n", "N", "=", "len", "(", "all_scores", ")", "\n", "topK", "=", "N", "-", "int", "(", "N", "*", "0.95", ")", "\n", "threshold", "=", "score_sorted", "[", "topK", "-", "1", "]", "\n", "return", "threshold", "\n", "\n", "\n", "", "def", "thresholding", "(", "cfg", ",", "output_file", ",", "thread_num", "=", "1", ")", ":", "\n", "    ", "processes", "=", "[", "]", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "train_cls_data", "=", "load_json", "(", "'datasets/activitynet/result_tsn_train.json'", ")", "\n", "videos_in_clsdata", "=", "[", "'v_'", "+", "name", "for", "name", "in", "list", "(", "train_cls_data", "[", "'results'", "]", ".", "keys", "(", ")", ")", "]", "\n", "videos_in_annodata", "=", "list", "(", "cfg", ".", "video_infos", ".", "keys", "(", ")", ")", "\n", "video_list", "=", "list", "(", "set", "(", "videos_in_clsdata", ")", "&", "set", "(", "videos_in_annodata", ")", ")", "\n", "\n", "video_num", "=", "len", "(", "video_list", ")", "\n", "per_thread_video_num", "=", "video_num", "//", "thread_num", "\n", "result_dict", "=", "mp", ".", "Manager", "(", ")", ".", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "thread_num", ")", ":", "\n", "        ", "if", "i", "==", "thread_num", "-", "1", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "]", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.threshold.build_model": [[48, 69], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "config[].get", "config[].get", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path"], ["            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "(", "i", "+", "1", ")", "*", "per_thread_video_num", "]", "\n", "# inference_thread(lock, i, sub_video_list, train_cls_data, cfg)", "\n", "", "p", "=", "mp", ".", "Process", "(", "target", "=", "inference_thread", ",", "args", "=", "(", "lock", ",", "i", ",", "sub_video_list", ",", "train_cls_data", ",", "cfg", ",", "result_dict", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "# compute threshold value", "\n", "", "threshold", "=", "compute_threshold", "(", "result_dict", ",", "scoring", "=", "cfg", ".", "scoring", ")", "\n", "\n", "output_dict", "=", "{", "\"version\"", ":", "\"ActivityNet-v1.3\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "'threshold'", ":", "threshold", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "", "return", "threshold", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "cfg", "=", "get_basic_config", "(", "config", ",", "dataset", "=", "'training'", ")", "\n", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output_path", ",", "cfg", ".", "json_name", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.threshold.thresholding": [[71, 155], ["AFSD.common.thumos_dataset.get_video_info", "AFSD.common.thumos_dataset.get_class_index_map", "threshold.build_model", "AFSD.common.videotransforms.CenterCrop", "enumerate", "result_dict.items", "numpy.sort", "len", "range", "range", "AFSD.thumos14.BDNet.DirichletLayer", "torch.Softmax", "list", "time.time", "test.get_offsets", "test.prepare_data", "time.time", "time.time", "test.get_video_detections", "time.time", "print", "int", "dict", "open", "json.dump", "AFSD.common.thumos_dataset.get_video_info.keys", "test.prepare_data", "test.prepare_clip", "output_dict_all.append", "test.parse_output", "test.decode_predictions", "all_scores.append", "range", "test.prepare_clip", "torch.no_grad", "torch.no_grad", "net", "test.filtering", "output[].append", "flow_net", "len"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.parse_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.decode_predictions", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["        ", "threshold", "=", "thresholding", "(", "cfg", ",", "output_file", ",", "thread_num", "=", "cfg", ".", "thread_num", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "output_file", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "threshold", "=", "data", "[", "'external_data'", "]", "[", "'threshold'", "]", "\n", "", "print", "(", "f'Thresholding result file already exist at {output_file}!'", ")", "\n", "\n", "", "print", "(", "f'The threshold is: {threshold:.12f}'", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "# keep all things private in this file", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_path": [[15, 23], ["os.path.lexists", "os.path.join", "os.path.islink", "os.path.realpath", "fullpath.split", "os.path.dirname"], "function", ["None"], ["\n", "\n", "\n", "def", "get_basic_config", "(", "config", ",", "dataset", "=", "'testing'", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.build_model": [[25, 46], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "config[].get", "config[].get", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path"], ["cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", "\n", "cfg", ".", "input_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", "\n", "cfg", ".", "checkpoint_path", "=", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "cfg", ".", "evidence", "=", "config", "[", "'model'", "]", "[", "'evidence'", "]", "\n", "", "cfg", ".", "scoring", "=", "config", "[", "'testing'", "]", "[", "'ood_scoring'", "]", "\n", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "-", "1", "\n", "\n", "", "cfg", ".", "json_name", "=", "config", "[", "'testing'", "]", "[", "'output_json'", "]", "\n", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "config", "[", "'testing'", "]", "[", "'fusion'", "]", "\n", "cfg", ".", "ngpu", "=", "config", "[", "'ngpu'", "]", "\n", "cfg", ".", "thread_num", "=", "config", "[", "'ngpu'", "]", "\n", "\n", "subset", "=", "'validation'", "if", "dataset", "==", "'testing'", "else", "'training'", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets": [[48, 57], ["list", "range"], "function", ["None"], ["cfg", ".", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "dataset", "]", "[", "'video_info_path'", "]", ",", "subset", "=", "subset", ")", "\n", "cfg", ".", "mp4_data_path", "=", "config", "[", "'dataset'", "]", "[", "dataset", "]", "[", "'video_mp4_path'", "]", "# train_val_npy_112/", "\n", "\n", "return", "cfg", "\n", "\n", "\n", "", "def", "get_class_names", "(", "class_info_path", ")", ":", "\n", "    ", "idx_to_class", "=", "{", "}", "\n", "with", "open", "(", "class_info_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.prepare_data": [[59, 65], ["numpy.load", "numpy.transpose", "centor_crop", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "return", "idx_to_class", "\n", "\n", "\n", "", "def", "get_path", "(", "input_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "input_path", ")", ":", "\n", "        ", "fullpath", "=", "os", ".", "path", ".", "realpath", "(", "input_path", ")", "if", "os", ".", "path", ".", "islink", "(", "input_path", ")", "else", "input_path", "\n", "real_name", "=", "fullpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.prepare_clip": [[67, 77], ["torch.cat.float", "torch.cat.unsqueeze", "torch.cat.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "", "return", "real_full_path", "\n", "\n", "\n", "\n", "", "def", "prepare_data", "(", "video_name", ",", "center_crop", ",", "cfg", ")", ":", "\n", "    ", "sample_fps", "=", "cfg", ".", "video_infos", "[", "video_name", "]", "[", "'fps'", "]", "\n", "duration", "=", "cfg", ".", "video_infos", "[", "video_name", "]", "[", "'duration'", "]", "\n", "offsetlist", "=", "[", "0", "]", "\n", "# get video data", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.parse_output": [[79, 110], ["[].squeeze", "[].squeeze"], "function", ["None"], ["frames", "=", "data", "\n", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data", "=", "center_crop", "(", "frames", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "return", "data", ",", "offsetlist", ",", "sample_fps", ",", "duration", "\n", "\n", "\n", "", "def", "prepare_clip", "(", "data", ",", "offset", ",", "clip_length", ",", "crop_size", ")", ":", "\n", "    ", "clip", "=", "data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "clip", "=", "clip", ".", "float", "(", ")", "\n", "if", "clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "        ", "tmp", "=", "torch", ".", "ones", "(", "\n", "[", "clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "clip", ".", "size", "(", "1", ")", ",", "crop_size", ",", "crop_size", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "*", "127.5", "\n", "clip", "=", "torch", ".", "cat", "(", "[", "clip", ",", "tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", "\n", "clip", "=", "(", "clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "return", "clip", "\n", "\n", "\n", "", "def", "decode_prediction", "(", "output_dict", ",", "cfg", ",", "score_func", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", ")", ":", "\n", "# batchsize should be 1!", "\n", "    ", "loc", ",", "conf", ",", "priors", "=", "output_dict", "[", "'loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'conf'", "]", "[", "0", "]", ",", "output_dict", "[", "'priors'", "]", "\n", "prop_loc", ",", "prop_conf", "=", "output_dict", "[", "'prop_loc'", "]", "[", "0", "]", ",", "output_dict", "[", "'prop_conf'", "]", "[", "0", "]", "\n", "center", "=", "output_dict", "[", "'center'", "]", "[", "0", "]", "\n", "# conditional outputs", "\n", "act", "=", "output_dict", "[", "'act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "None", "\n", "prop_act", "=", "output_dict", "[", "'prop_act'", "]", "[", "0", "]", ".", "squeeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "None", "\n", "unct", "=", "output_dict", "[", "'unct'", "]", "[", "0", "]", "if", "cfg", ".", "use_edl", "else", "None", "\n", "prop_unct", "=", "output_dict", "[", "'prop_unct'", "]", "[", "0", "]", "if", "cfg", ".", "use_edl", "else", "None", "\n", "\n", "# decode the locations of segments", "\n", "pre_loc_w", "=", "loc", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", "1", ":", "]", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.decode_predictions": [[112, 141], ["torch.Softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat.clamp_", "score_func", "score_func", "center.sigmoid.sigmoid", "conf.view().transpose.view().transpose", "conf.view().transpose.clone", "act.sigmoid", "prop_act.sigmoid", "actionness.unsqueeze", "conf.view().transpose.view"], "function", ["None"], ["decoded_segments", "=", "torch", ".", "cat", "(", "\n", "[", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "-", "loc", "[", ":", ",", ":", "1", "]", ",", "\n", "priors", "[", ":", ",", ":", "1", "]", "*", "cfg", ".", "clip_length", "+", "loc", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "decoded_segments", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "cfg", ".", "clip_length", ")", "\n", "\n", "# compute uncertainty and actionness", "\n", "uncertainty", "=", "(", "unct", "+", "prop_unct", ")", "/", "2.0", "if", "cfg", ".", "use_edl", "else", "None", "\n", "actionness", "=", "(", "act", ".", "sigmoid", "(", ")", "+", "prop_act", ".", "sigmoid", "(", ")", ")", "/", "2.0", "if", "cfg", ".", "os_head", "else", "None", "\n", "\n", "# compute classification confidence", "\n", "conf", "=", "score_func", "(", "conf", ")", "\n", "prop_conf", "=", "score_func", "(", "prop_conf", ")", "\n", "center", "=", "center", ".", "sigmoid", "(", ")", "\n", "\n", "conf", "=", "(", "conf", "+", "prop_conf", ")", "/", "2.0", "\n", "conf", "=", "conf", "*", "center", "*", "actionness", ".", "unsqueeze", "(", "-", "1", ")", "if", "cfg", ".", "os_head", "else", "conf", "*", "center", "\n", "conf", "=", "conf", ".", "view", "(", "-", "1", ",", "cfg", ".", "num_classes", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "conf_scores", "=", "conf", ".", "clone", "(", ")", "\n", "\n", "return", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "\n", "\n", "\n", "", "def", "filtering", "(", "decoded_segments", ",", "conf_score_cls", ",", "uncertainty", ",", "actionness", ",", "offset", ",", "sample_fps", ",", "cfg", ",", "conf_thresh", "=", "0.001", ")", ":", "\n", "    ", "c_mask", "=", "conf_score_cls", ">", "conf_thresh", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "c_mask", "=", "c_mask", "&", "(", "actionness", ">", "0.5", ")", "\n", "", "scores", "=", "conf_score_cls", "[", "c_mask", "]", "\n", "if", "scores", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "l_mask", "=", "c_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "decoded_segments", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering": [[143, 163], ["c_mask.unsqueeze().expand_as", "decoded_segments[].view", "torch.cat", "torch.cat", "torch.cat", "scores.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "c_mask.unsqueeze", "scores.unsqueeze", "uncertain_scores.unsqueeze", "act_scores.unsqueeze"], "function", ["None"], ["segments", "=", "(", "segments", "+", "offset", ")", "/", "sample_fps", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 3)", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "# masking uncertainties", "\n", "        ", "uncertain_scores", "=", "uncertainty", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "uncertain_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4)", "\n", "", "if", "cfg", ".", "os_head", ":", "\n", "# masking actionness", "\n", "        ", "act_scores", "=", "actionness", "[", "c_mask", "]", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "act_scores", ".", "unsqueeze", "(", "1", ")", "]", ",", "-", "1", ")", "# (N, 4) or (N, 5)", "\n", "", "return", "segments", "\n", "\n", "\n", "", "def", "get_video_prediction", "(", "output", ",", "duration", ",", "cfg", ",", "cls_rng", "=", "None", ")", ":", "\n", "    ", "res_dim", "=", "3", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "cfg", ".", "use_edl", "else", "res_dim", "# 3 or 4", "\n", "res_dim", "=", "res_dim", "+", "1", "if", "cfg", ".", "os_head", "else", "res_dim", "# 3 or 4 or 5", "\n", "res", "=", "torch", ".", "zeros", "(", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "res_dim", ")", "\n", "# NMS for each class", "\n", "for", "cl", "in", "cls_rng", ":", "\n", "        ", "if", "len", "(", "output", "[", "cl", "]", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections": [[165, 201], ["torch.zeros", "torch.zeros", "torch.zeros", "min", "torch.zeros.contiguous().view", "flt.view.view", "torch.cat", "torch.cat", "torch.cat", "AFSD.common.segment_utils.softnms_v2", "flt[].contiguous", "tmp[].view", "tmp.detach().cpu().numpy.detach().cpu().numpy", "range", "len", "torch.zeros.contiguous", "tmp.detach().cpu().numpy.size", "float", "proposal_list.append", "tmp.detach().cpu().numpy.detach().cpu", "float", "float", "float", "float", "tmp.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2"], ["", "tmp", "=", "torch", ".", "cat", "(", "output", "[", "cl", "]", ",", "0", ")", "\n", "tmp", ",", "count", "=", "softnms_v2", "(", "tmp", ",", "sigma", "=", "cfg", ".", "nms_sigma", ",", "top_k", "=", "cfg", ".", "top_k", ",", "score_threshold", "=", "0.001", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "res", "[", "cl", ",", ":", "count", "]", "=", "tmp", "\n", "\n", "", "flt", "=", "res", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "flt", "=", "flt", ".", "view", "(", "cfg", ".", "num_classes", ",", "-", "1", ",", "res_dim", ")", "\n", "proposal_list", "=", "[", "]", "\n", "for", "cl", "in", "cls_rng", ":", "\n", "        ", "cl_idx", "=", "cl", "+", "1", "if", "cfg", ".", "os_head", "else", "cl", "\n", "class_name", "=", "cfg", ".", "idx_to_class", "[", "cl_idx", "]", "# assume the current video contains only one class", "\n", "tmp", "=", "flt", "[", "cl", "]", ".", "contiguous", "(", ")", "\n", "tmp", "=", "tmp", "[", "(", "tmp", "[", ":", ",", "2", "]", ">", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "tmp", ")", "]", ".", "view", "(", "-", "1", ",", "res_dim", ")", "\n", "if", "tmp", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "tmp", "=", "tmp", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "tmp", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "tmp_proposal", "=", "{", "}", "\n", "start_time", "=", "max", "(", "0", ",", "float", "(", "tmp", "[", "i", ",", "0", "]", ")", ")", "\n", "end_time", "=", "min", "(", "duration", ",", "float", "(", "tmp", "[", "i", ",", "1", "]", ")", ")", "\n", "if", "end_time", "<=", "start_time", ":", "\n", "                ", "continue", "\n", "", "tmp_proposal", "[", "'label'", "]", "=", "class_name", "\n", "tmp_proposal", "[", "'score'", "]", "=", "float", "(", "tmp", "[", "i", ",", "2", "]", ")", "\n", "tmp_proposal", "[", "'segment'", "]", "=", "[", "start_time", ",", "end_time", "]", "\n", "tmp_proposal", "[", "'uncertainty'", "]", "=", "float", "(", "tmp", "[", "i", ",", "3", "]", ")", "if", "cfg", ".", "use_edl", "else", "0.0", "\n", "tmp_proposal", "[", "'actionness'", "]", "=", "float", "(", "tmp", "[", "i", ",", "4", "]", ")", "if", "cfg", ".", "os_head", "else", "0.0", "\n", "proposal_list", ".", "append", "(", "tmp_proposal", ")", "\n", "", "", "return", "proposal_list", "\n", "\n", "\n", "", "def", "inference_thread", "(", "lock", ",", "pid", ",", "video_list", ",", "cfg", ",", "result_dict", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "pid", ")", "\n", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "get_path", "(", "cfg", ".", "checkpoint_path", ")", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.test": [[203, 257], ["AFSD.common.thumos_dataset.get_video_info", "AFSD.common.thumos_dataset.get_class_index_map", "test.build_model", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "range", "range", "AFSD.thumos14.BDNet.DirichletLayer", "torch.Softmax", "list", "test.get_offsets", "test.prepare_data", "test.get_video_detections", "dict", "open", "json.dump", "AFSD.common.thumos_dataset.get_video_info.keys", "test.prepare_data", "test.prepare_clip", "output_dict_all.append", "test.parse_output", "test.decode_predictions", "os.path.join", "range", "test.prepare_clip", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "test.filtering", "output[].append", "flow_net"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.parse_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.decode_predictions", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "\n", "text", "=", "'processor %d'", "%", "pid", "\n", "with", "lock", ":", "\n", "        ", "progress", "=", "tqdm", ".", "tqdm", "(", "\n", "total", "=", "len", "(", "video_list", ")", ",", "\n", "position", "=", "pid", ",", "\n", "desc", "=", "text", ",", "\n", "ncols", "=", "0", "\n", ")", "\n", "", "for", "video_name", "in", "video_list", ":", "\n", "# get video information", "\n", "        ", "data", ",", "offsetlist", ",", "sample_fps", ",", "duration", "=", "prepare_data", "(", "video_name", ",", "center_crop", ",", "cfg", ")", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "crop_size", ")", "\n", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "\n", "# decode results", "\n", "", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_prediction", "(", "output_dict", ",", "cfg", ",", "out_layer", ")", "\n", "# filtering", "\n", "for", "cl", "in", "class_range", ":", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "offset", ",", "sample_fps", ",", "cfg", ")", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "# finish offset loop", "\n", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "[", "2", ":", "]", "]", "=", "get_video_prediction", "(", "output", ",", "duration", ",", "cfg", ",", "cls_rng", "=", "class_range", ")", "\n", "with", "lock", ":", "\n", "            ", "progress", ".", "update", "(", "1", ")", "\n", "# finish video loop", "\n", "\n", "", "", "with", "lock", ":", "\n", "        ", "progress", ".", "close", "(", ")", "\n", "\n", "\n", "", "", "def", "testing_multithread", "(", "cfg", ",", "video_list", ",", "output_file", ",", "thread_num", "=", "1", ")", ":", "\n", "    ", "processes", "=", "[", "]", "\n", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "video_num", "=", "len", "(", "video_list", ")", "\n", "per_thread_video_num", "=", "video_num", "//", "thread_num", "\n", "result_dict", "=", "mp", ".", "Manager", "(", ")", ".", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "thread_num", ")", ":", "\n", "        ", "if", "i", "==", "thread_num", "-", "1", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_basic_config": [[259, 289], ["config[].get", "config[].get", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "else", ":", "\n", "            ", "sub_video_list", "=", "video_list", "[", "i", "*", "per_thread_video_num", ":", "(", "i", "+", "1", ")", "*", "per_thread_video_num", "]", "\n", "# inference_thread(lock, i, sub_video_list, test_cls_data, cfg)", "\n", "", "p", "=", "mp", ".", "Process", "(", "target", "=", "inference_thread", ",", "args", "=", "(", "lock", ",", "i", ",", "sub_video_list", ",", "cfg", ",", "result_dict", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "# save results", "\n", "", "assert", "len", "(", "result_dict", ")", "==", "video_num", ",", "\"Incomplete testing results!\"", "\n", "output_dict", "=", "{", "\"version\"", ":", "\"ActivityNet-v1.3\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n", "\n", "", "", "def", "testing", "(", "cfg", ",", "video_list", ",", "output_file", ")", ":", "\n", "\n", "    ", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "get_path", "(", "cfg", ".", "checkpoint_path", ")", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "progress", "=", "tqdm", ".", "tqdm", "(", "\n", "total", "=", "len", "(", "video_list", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.eval_open.write_eval_open": [[30, 35], ["open", "zip", "f.writelines", "f.writelines", "far_95.mean", "auc_ROC.mean", "auc_PR.mean", "OSDR.mean"], "function", ["None"], ["", "f", ".", "writelines", "(", "f\"Average mAP: {average_mAP:.5f}\\n\"", ")", "\n", "\n", "\n", "", "", "mAPs_all", ",", "average_mAP_all", "=", "[", "]", ",", "[", "]", "\n", "aucROCs_all", ",", "average_aucROC_all", "=", "[", "]", ",", "[", "]", "\n", "aucPRs_all", ",", "average_aucPR_all", "=", "[", "]", ",", "[", "]", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.eval_open.write_eval_closed": [[37, 42], ["open", "zip", "f.writelines", "f.writelines"], "function", ["None"], ["for", "split", "in", "args", ".", "all_splits", ":", "\n", "# GT file and Pred file", "\n", "    ", "gt_file", "=", "args", ".", "gt_json", ".", "format", "(", "id", "=", "split", ")", "\n", "pred_file", "=", "args", ".", "output_json", ".", "format", "(", "id", "=", "split", ")", "\n", "cls_idx_known", "=", "args", ".", "cls_idx_known", ".", "format", "(", "id", "=", "split", ")", "\n", "auc_data_path", "=", "None", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.eval_open.get_mean_std": [[102, 107], ["numpy.array().mean", "numpy.array", "numpy.array().std", "numpy.sqrt", "len", "numpy.array"], "function", ["None"], ["for", "(", "tiou", ",", "mean", ",", "std", ")", "in", "zip", "(", "tious", ",", "aucROCs_mean", ",", "aucROCs_std", ")", ":", "\n", "        ", "print", "(", "f\"AUC_ROC(tIoU={tiou}): mean={mean:.5f}, std={std:.5f}\"", ")", "\n", "", "print", "(", "f\"Average AUC_ROC = {average_aucROC_mean:.5f} ({average_aucROC_std:.5f})\\n\"", ")", "\n", "\n", "for", "(", "tiou", ",", "mean", ",", "std", ")", "in", "zip", "(", "tious", ",", "aucPRs_mean", ",", "aucPRs_std", ")", ":", "\n", "        ", "print", "(", "f\"AUC_PR(tIoU={tiou}): mean={mean:.5f}, std={std:.5f}\"", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.get_basic_config": [[20, 59], ["config[].get", "config[].get", "config[].get", "config[].get", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "get_basic_config", "(", "config", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "cfg", ".", "evidence", "=", "config", "[", "'model'", "]", "[", "'evidence'", "]", "\n", "", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "-", "1", "\n", "", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "config", "[", "'testing'", "]", "[", "'fusion'", "]", "\n", "cfg", ".", "scoring", "=", "config", "[", "'testing'", "]", "[", "'ood_scoring'", "]", "\n", "cfg", ".", "cls_idx_known", "=", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", "\n", "cfg", ".", "open_set", "=", "config", "[", "'open_set'", "]", "\n", "cfg", ".", "split", "=", "config", "[", "'testing'", "]", "[", "'split'", "]", "\n", "cfg", ".", "overlap_thresh", "=", "config", "[", "'training'", "]", "[", "'piou'", "]", "\n", "\n", "cfg", ".", "rgb_data_path", ",", "cfg", ".", "flow_data_path", "=", "{", "}", ",", "{", "}", "\n", "###  specific for training set", "\n", "cfg", ".", "rgb_data_path", "[", "'training'", "]", "=", "config", "[", "'training'", "]", ".", "get", "(", "'rgb_data_path'", ",", "\n", "'./datasets/thumos14/validation_npy/'", ")", "\n", "cfg", ".", "flow_data_path", "[", "'training'", "]", "=", "config", "[", "'training'", "]", ".", "get", "(", "'flow_data_path'", ",", "\n", "'./datasets/thumos14/validation_flow_npy/'", ")", "\n", "###  specific for testing set", "\n", "cfg", ".", "rgb_data_path", "[", "'testing'", "]", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_data_path'", ",", "\n", "'./datasets/thumos14/test_npy/'", ")", "\n", "cfg", ".", "flow_data_path", "[", "'testing'", "]", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_data_path'", ",", "\n", "'./datasets/thumos14/test_flow_npy/'", ")", "\n", "cfg", ".", "gt_known_json", "=", "'datasets/thumos14/annotations_open/split_{id:d}/known_gt.json'", "\n", "cfg", ".", "gt_all_json", "=", "'datasets/thumos14/annotations/thumos_gt.json'", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.build_model": [[62, 83], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "config[].get", "config[].get", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path"], ["", "def", "build_model", "(", "fusion", "=", "False", ")", ":", "\n", "    ", "net", ",", "flow_net", "=", "None", ",", "None", "\n", "if", "fusion", ":", "\n", "        ", "rgb_net", "=", "BDNet", "(", "in_channels", "=", "3", ",", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "flow_net", "=", "BDNet", "(", "in_channels", "=", "2", ",", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "rgb_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_checkpoint_path'", ",", "\n", "'./models/thumos14/checkpoint-15.ckpt'", ")", ")", "\n", "flow_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_checkpoint_path'", ",", "\n", "'./models/thumos14_flow/checkpoint-16.ckpt'", ")", ")", "\n", "rgb_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "rgb_checkpoint_path", ")", ")", "\n", "flow_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "flow_checkpoint_path", ")", ")", "\n", "rgb_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "flow_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "net", "=", "rgb_net", "\n", "", "else", ":", "\n", "        ", "net", "=", "BDNet", "(", "in_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "", "return", "net", ",", "flow_net", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.to_array": [[84, 94], ["data_dict.items", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["", "def", "to_array", "(", "data_dict", ")", ":", "\n", "    ", "if", "data_dict", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "result_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.to_tensor": [[95, 105], ["data_dict.items", "len", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "to_tensor", "(", "data_dict", ")", ":", "\n", "    ", "if", "len", "(", "data_dict", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "result_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.all_to_tensors": [[106, 112], ["enumerate", "enumerate", "zip", "draw_distribution.to_tensor", "draw_distribution.to_tensor"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.to_tensor", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.to_tensor"], ["", "def", "all_to_tensors", "(", "outputs", ")", ":", "\n", "    ", "for", "vid", ",", "out", "in", "enumerate", "(", "outputs", ")", ":", "\n", "        ", "for", "sid", ",", "(", "out_rgb", ",", "out_flow", ")", "in", "enumerate", "(", "zip", "(", "out", "[", "'rgb_out'", "]", ",", "out", "[", "'flow_out'", "]", ")", ")", ":", "\n", "            ", "outputs", "[", "vid", "]", "[", "'rgb_out'", "]", "[", "sid", "]", "=", "to_tensor", "(", "out_rgb", ")", "\n", "outputs", "[", "vid", "]", "[", "'flow_out'", "]", "[", "sid", "]", "=", "to_tensor", "(", "out_flow", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.get_raw_output": [[115, 153], ["AFSD.common.thumos_dataset.get_video_info", "draw_distribution.build_model", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "list", "test.get_offsets", "test.prepare_data", "results.append", "AFSD.common.thumos_dataset.get_video_info.keys", "test.prepare_data", "test.prepare_clip", "out_rgb.append", "out_flow.append", "test.prepare_clip", "torch.no_grad", "torch.no_grad", "net", "draw_distribution.to_array", "draw_distribution.to_array", "flow_net"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.to_array", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.to_array"], ["", "def", "get_raw_output", "(", "cfg", ",", "subset", "=", "'train'", ")", ":", "\n", "# get data", "\n", "    ", "node", "=", "'training'", "if", "subset", "==", "'train'", "else", "'testing'", "\n", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_info_path'", "]", ")", "\n", "npy_data_path", "=", "cfg", ".", "rgb_data_path", "[", "node", "]", "if", "cfg", ".", "fusion", "else", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_data_path'", "]", "\n", "\n", "# prepare model", "\n", "net", ",", "flow_net", "=", "build_model", "(", "fusion", "=", "cfg", ".", "fusion", ")", "\n", "\n", "centor_crop", "=", "videotransforms", ".", "CenterCrop", "(", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", ")", "\n", "results", "=", "[", "]", "\n", "# for video_name in tqdm.tqdm(list(video_infos.keys()), ncols=0, desc='Thresholding from Train Set'):", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "video_infos", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ",", "desc", "=", "f'Inference on {subset} set'", ")", ":", "\n", "# get the clip offsets", "\n", "        ", "offsetlist", "=", "get_offsets", "(", "video_infos", ",", "video_name", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "stride", ")", "\n", "sample_fps", "=", "video_infos", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "npy_data_path", ",", "video_name", ",", "centor_crop", ")", "\n", "flow_data", "=", "prepare_data", "(", "cfg", ".", "flow_data_path", ",", "video_name", ",", "centor_crop", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "\n", "out_rgb", ",", "out_flow", "=", "[", "]", ",", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "\n", "flow_clip", "=", "prepare_clip", "(", "flow_data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "flow_output_dict", "=", "flow_net", "(", "flow_clip", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "# tensor to numpy array", "\n", "", "out_rgb", ".", "append", "(", "to_array", "(", "output_dict", ")", ")", "\n", "out_flow", ".", "append", "(", "to_array", "(", "flow_output_dict", ")", ")", "\n", "# gather necessary results", "\n", "", "output_video", "=", "{", "'name'", ":", "video_name", ",", "'fps'", ":", "sample_fps", ",", "'offset'", ":", "offsetlist", ",", "'rgb_out'", ":", "out_rgb", ",", "'flow_out'", ":", "out_flow", "}", "\n", "results", ".", "append", "(", "output_video", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.get_all_annos": [[155, 199], ["AFSD.common.thumos_dataset.get_video_info", "AFSD.common.thumos_dataset.get_video_anno", "tqdm.tqdm", "list", "test.get_offsets", "AFSD.common.thumos_dataset.get_video_anno.keys", "max", "min", "numpy.zeros", "numpy.zeros", "all_annos.append", "cur_annos.append", "max", "numpy.clip", "numpy.clip", "int", "numpy.clip", "int", "numpy.clip", "max", "min", "round", "int", "round", "int", "round", "round"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_video_anno", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets"], ["", "def", "get_all_annos", "(", "subset", "=", "'train'", ",", "clip_length", "=", "256", ",", "stride", "=", "128", ")", ":", "\n", "    ", "node", "=", "'training'", "if", "subset", "==", "'train'", "else", "'testing'", "\n", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_info_path'", "]", ")", "\n", "video_annos", "=", "get_video_anno", "(", "video_infos", ",", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_anno_path'", "]", ",", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "all_annos", "=", "[", "]", "\n", "# loop for each video", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "video_annos", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ",", "desc", "=", "f'Get annotations of {subset} set'", ")", ":", "\n", "        ", "annos", "=", "video_annos", "[", "video_name", "]", "\n", "offsetlist", "=", "get_offsets", "(", "video_infos", ",", "video_name", ",", "clip_length", ",", "stride", ")", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# get the annos of the current offset", "\n", "            ", "left", ",", "right", "=", "offset", "+", "1", ",", "offset", "+", "clip_length", "\n", "cur_annos", "=", "[", "]", "\n", "save_offset", "=", "False", "\n", "for", "anno", "in", "annos", ":", "\n", "                ", "max_l", "=", "max", "(", "left", ",", "anno", "[", "0", "]", ")", "\n", "min_r", "=", "min", "(", "right", ",", "anno", "[", "1", "]", ")", "\n", "ioa", "=", "(", "min_r", "-", "max_l", ")", "*", "1.0", "/", "(", "anno", "[", "1", "]", "-", "anno", "[", "0", "]", ")", "\n", "if", "ioa", ">=", "1.0", ":", "\n", "                    ", "save_offset", "=", "True", "\n", "", "if", "ioa", ">=", "0.5", ":", "\n", "                    ", "cur_annos", ".", "append", "(", "[", "max", "(", "anno", "[", "0", "]", "-", "offset", ",", "1", ")", ",", "\n", "min", "(", "anno", "[", "1", "]", "-", "offset", ",", "clip_length", ")", ",", "\n", "anno", "[", "2", "]", "]", ")", "\n", "", "", "if", "save_offset", ":", "\n", "                ", "start", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "end", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "for", "anno", "in", "cur_annos", ":", "\n", "                    ", "s", ",", "e", ",", "id", "=", "anno", "\n", "d", "=", "max", "(", "(", "e", "-", "s", ")", "/", "10.0", ",", "2.0", ")", "\n", "start_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "-", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "start_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "+", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "start", "[", "start_s", ":", "start_e", "]", "=", "1", "\n", "end_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "-", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "end_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "+", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "end", "[", "end_s", ":", "end_e", "]", "=", "1", "\n", "", "all_annos", ".", "append", "(", "{", "\n", "'video_name'", ":", "video_name", ",", "\n", "'offset'", ":", "offset", ",", "\n", "'annos'", ":", "cur_annos", ",", "\n", "'start'", ":", "start", ",", "\n", "'end'", ":", "end", "\n", "}", ")", "\n", "", "", "", "return", "all_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.compute_iou": [[201, 219], ["torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "area_union.clamp"], "function", ["None"], ["", "def", "compute_iou", "(", "pred", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    jaccard: A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\n    \"\"\"", "\n", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "target_area", "=", "target_left", "+", "target_right", "\n", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "area_union", "=", "target_area", "+", "pred_area", "-", "inter", "\n", "ious", "=", "inter", "/", "area_union", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.get_matched_targets": [[221, 259], ["loc_data.size", "priors.size", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "priors.size", "truths.size", "priors[].unsqueeze().expand", "area.min", "draw_distribution.compute_iou", "conf.clone", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "priors[].unsqueeze", "truths[].unsqueeze().expand", "truths[].unsqueeze().expand", "truths[].unsqueeze", "truths[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.compute_iou"], ["", "def", "get_matched_targets", "(", "targets", ",", "loc_data", ",", "priors", ",", "clip_length", ")", ":", "\n", "    ", "num_batch", "=", "loc_data", ".", "size", "(", "0", ")", "\n", "num_priors", "=", "priors", ".", "size", "(", "0", ")", "\n", "# match priors and ground truth segments", "\n", "loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "for", "idx", "in", "range", "(", "num_batch", ")", ":", "\n", "        ", "truths", "=", "targets", "[", "idx", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "labels", "=", "targets", "[", "idx", "]", "[", ":", ",", "-", "1", "]", "\n", "pre_loc", "=", "loc_data", "[", "idx", "]", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "N", "=", "truths", ".", "size", "(", "0", ")", "\n", "center", "=", "priors", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "K", ",", "N", ")", "\n", "left", "=", "(", "center", "-", "truths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", ")", "*", "clip_length", "\n", "right", "=", "(", "truths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", "-", "center", ")", "*", "clip_length", "\n", "area", "=", "left", "+", "right", "\n", "maxn", "=", "clip_length", "*", "2", "\n", "area", "[", "left", "<", "0", "]", "=", "maxn", "\n", "area", "[", "right", "<", "0", "]", "=", "maxn", "\n", "best_truth_area", ",", "best_truth_idx", "=", "area", ".", "min", "(", "1", ")", "\n", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "priors", "[", ":", ",", "0", "]", "-", "truths", "[", "best_truth_idx", ",", "0", "]", ")", "*", "clip_length", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "truths", "[", "best_truth_idx", ",", "1", "]", "-", "priors", "[", ":", ",", "0", "]", ")", "*", "clip_length", "\n", "conf", "=", "labels", "[", "best_truth_idx", "]", "\n", "conf", "[", "best_truth_area", ">=", "maxn", "]", "=", "0", "\n", "conf_t", "[", "idx", "]", "=", "conf", "\n", "\n", "iou", "=", "compute_iou", "(", "pre_loc", ",", "loc_t", "[", "idx", "]", ")", "# [num_priors]", "\n", "prop_conf", "=", "conf", ".", "clone", "(", ")", "\n", "prop_conf", "[", "iou", "<", "cfg", ".", "overlap_thresh", "]", "=", "0", "\n", "prop_conf_t", "[", "idx", "]", "=", "prop_conf", "\n", "prop_w", "=", "pre_loc", "[", ":", ",", "0", "]", "+", "pre_loc", "[", ":", ",", "1", "]", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "-", "pre_loc", "[", ":", ",", "0", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "-", "pre_loc", "[", ":", ",", "1", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "\n", "", "return", "loc_t", ",", "conf_t", ",", "prop_loc_t", ",", "prop_conf_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.compute_threshold": [[261, 277], ["result_dict.items", "numpy.sort", "len", "int", "all_scores.append"], "function", ["None"], ["", "def", "compute_threshold", "(", "result_dict", ")", ":", "\n", "    ", "all_scores", "=", "[", "]", "\n", "for", "vid", ",", "proposal_list", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "prop", "in", "proposal_list", ":", "\n", "            ", "if", "cfg", ".", "scoring", "==", "'uncertainty'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "\n", "", "elif", "cfg", ".", "scoring", "==", "'confidence'", ":", "\n", "                ", "ood_score", "=", "prop", "[", "'score'", "]", "\n", "", "elif", "cfg", ".", "scoring", "==", "'uncertainty_actionness'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "*", "prop", "[", "'actionness'", "]", "\n", "", "all_scores", ".", "append", "(", "ood_score", ")", "\n", "", "", "score_sorted", "=", "np", ".", "sort", "(", "all_scores", ")", "# sort the confidence score in an increasing order", "\n", "N", "=", "len", "(", "all_scores", ")", "\n", "topK", "=", "N", "-", "int", "(", "N", "*", "0.95", ")", "\n", "threshold", "=", "score_sorted", "[", "topK", "-", "1", "]", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.post_process": [[279, 321], ["draw_distribution.all_to_tensors", "AFSD.common.thumos_dataset.get_class_index_map", "tqdm.tqdm", "AFSD.thumos14.BDNet.DirichletLayer", "torch.Softmax", "range", "range", "zip", "test.get_video_detections", "draw_distribution.compute_threshold", "os.path.join", "os.makedirs", "os.path.join", "len", "test.parse_output", "test.decode_predictions", "dict", "open", "json.dump", "range", "test.filtering", "output[].append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.all_to_tensors", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.compute_threshold", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.parse_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.decode_predictions", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "post_process", "(", "inference_result", ",", "phase", "=", "'train'", ")", ":", "\n", "# send the loaded results into GPU", "\n", "    ", "inference_result", "=", "all_to_tensors", "(", "inference_result", ")", "\n", "\n", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "_", ",", "idx_to_class", "=", "get_class_index_map", "(", "cfg", ".", "cls_idx_known", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "for", "out", "in", "tqdm", ".", "tqdm", "(", "inference_result", ",", "total", "=", "len", "(", "inference_result", ")", ",", "desc", "=", "f'{phase} phase post-processing'", ")", ":", "\n", "        ", "video_name", "=", "out", "[", "'name'", "]", "\n", "sample_fps", "=", "out", "[", "'fps'", "]", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "# post-processing", "\n", "for", "(", "out_rgb", ",", "out_flow", ",", "offset", ")", "in", "zip", "(", "out", "[", "'rgb_out'", "]", ",", "out", "[", "'flow_out'", "]", ",", "out", "[", "'offset'", "]", ")", ":", "\n", "# out_rgb, out_flow = to_tensor(out_rgb), to_tensor(out_flow)", "\n", "            ", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", "=", "parse_output", "(", "out_rgb", ",", "out_flow", ",", "fusion", "=", "cfg", ".", "fusion", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_predictions", "(", "loc", ",", "prop_loc", ",", "priors", ",", "conf", ",", "prop_conf", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", ",", "center", ",", "offset", ",", "sample_fps", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "num_classes", ",", "score_func", "=", "out_layer", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "# filtering out clip-level predictions with low confidence", "\n", "for", "cl", "in", "class_range", ":", "# from 1 to K+1 by default, or 0 to K for os_head", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "cfg", ".", "conf_thresh", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "# (N,5)", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "]", "=", "get_video_detections", "(", "output", ",", "idx_to_class", ",", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "cfg", ".", "nms_sigma", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ",", "cls_rng", "=", "class_range", ")", "\n", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "# get the score threshold", "\n", "        ", "threshold", "=", "compute_threshold", "(", "result_dict", ")", "\n", "return", "threshold", "\n", "", "else", ":", "\n", "# temporarily save the results for later evaluation", "\n", "        ", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output_path", ",", "'temp'", ")", "\n", "os", ".", "makedirs", "(", "temp_dir", ",", "exist_ok", "=", "True", ")", "\n", "pred_file", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "f'thumos14_open_rgb-test.json'", ")", "\n", "with", "open", "(", "pred_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "output_dict", ",", "f", ")", "\n", "", "return", "result_dict", ",", "pred_file", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.split_results_by_stages": [[323, 390], ["zip", "len", "all_unknown[].extend", "all_unknown[].extend", "AFSD.common.thumos_dataset.annos_transform", "draw_distribution.get_matched_targets", "draw_distribution.split_results_by_stages.get_result"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.annos_transform", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_matched_targets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_result"], ["", "", "def", "split_results_by_stages", "(", "output_test", ",", "annos_known_test", ",", "target", "=", "'uncertainty'", ")", ":", "\n", "\n", "    ", "def", "get_result", "(", "input_dict", ",", "stage", "=", "'coarse'", ",", "target", "=", "'uncertainty'", ")", ":", "\n", "        ", "if", "cfg", ".", "use_edl", ":", "\n", "            ", "unct", "=", "input_dict", "[", "'unct'", "]", "[", "0", "]", "if", "stage", "==", "'coarse'", "else", "input_dict", "[", "'prop_unct'", "]", "[", "0", "]", "# (N,)", "\n", "", "if", "cfg", ".", "os_head", ":", "\n", "            ", "act", "=", "input_dict", "[", "'act'", "]", "[", "0", "]", "if", "stage", "==", "'coarse'", "else", "input_dict", "[", "'prop_act'", "]", "[", "0", "]", "# (N, 1)", "\n", "\n", "# get the output target", "\n", "", "if", "target", "==", "'uncertainty'", "and", "cfg", ".", "use_edl", ":", "\n", "            ", "return", "unct", "\n", "", "elif", "target", "==", "'confidence'", ":", "\n", "            ", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "# get the uncertainty, actionness, and conf_scores", "\n", "logits", "=", "input_dict", "[", "'conf'", "]", "[", "0", "]", "if", "stage", "==", "'coarse'", "else", "input_dict", "[", "'prop_conf'", "]", "[", "0", "]", "# N x K", "\n", "conf", "=", "out_layer", "(", "torch", ".", "from_numpy", "(", "logits", ")", ")", "\n", "center", "=", "torch", ".", "from_numpy", "(", "input_dict", "[", "'center'", "]", "[", "0", "]", ")", "\n", "conf", "=", "conf", "*", "center", ".", "sigmoid", "(", ")", "# N x K", "\n", "conf", "=", "conf", ".", "numpy", "(", ")", "\n", "if", "cfg", ".", "os_head", ":", "\n", "                ", "conf", "=", "conf", "*", "act", "\n", "", "conf", "=", "np", ".", "max", "(", "conf", ",", "axis", "=", "-", "1", ")", "# (N,)", "\n", "return", "conf", "\n", "", "elif", "target", "==", "'uncertainty_actionness'", "and", "cfg", ".", "use_edl", ":", "\n", "            ", "return", "unct", "*", "np", ".", "squeeze", "(", "act", ",", "axis", "=", "-", "1", ")", "# (N,)", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "all_known", ",", "all_unknown", "=", "{", "'coarse'", ":", "[", "]", ",", "'refined'", ":", "[", "]", "}", ",", "{", "'coarse'", ":", "[", "]", ",", "'refined'", ":", "[", "]", "}", "\n", "for", "output_video", "in", "output_test", ":", "\n", "        ", "out_rgb", "=", "output_video", "[", "'rgb_out'", "]", "\n", "offsetlist", "=", "output_video", "[", "'offset'", "]", "\n", "video_name", "=", "output_video", "[", "'name'", "]", "\n", "annos_cur_video", "=", "[", "anno", "for", "anno", "in", "annos_known_test", "if", "video_name", "in", "anno", ".", "values", "(", ")", "]", "\n", "if", "len", "(", "annos_cur_video", ")", "==", "0", ":", "# clips in this video are all unknown/bg", "\n", "            ", "all_unknown", "[", "'coarse'", "]", ".", "extend", "(", "[", "get_result", "(", "clip_out", ",", "stage", "=", "'coarse'", ",", "target", "=", "target", ")", "for", "clip_out", "in", "out_rgb", "]", ")", "\n", "all_unknown", "[", "'refined'", "]", ".", "extend", "(", "[", "get_result", "(", "clip_out", ",", "stage", "=", "'refined'", ",", "target", "=", "target", ")", "for", "clip_out", "in", "out_rgb", "]", ")", "\n", "continue", "\n", "# the rest videos contain at least one known action", "\n", "", "for", "clip_out", ",", "offset", "in", "zip", "(", "out_rgb", ",", "offsetlist", ")", ":", "# iterate on clips", "\n", "# get the matched target label", "\n", "            ", "annos_cur_clip", "=", "[", "anno", "[", "'annos'", "]", "for", "anno", "in", "annos_cur_video", "if", "offset", "==", "anno", "[", "'offset'", "]", "]", "\n", "if", "len", "(", "annos_cur_clip", ")", "==", "0", ":", "\n", "# current clip is unknown/bg", "\n", "                ", "all_unknown", "[", "'coarse'", "]", ".", "append", "(", "get_result", "(", "clip_out", ",", "stage", "=", "'coarse'", ",", "target", "=", "target", ")", ")", "\n", "all_unknown", "[", "'refined'", "]", ".", "append", "(", "get_result", "(", "clip_out", ",", "stage", "=", "'refined'", ",", "target", "=", "target", ")", ")", "\n", "continue", "\n", "\n", "# the rest are used in training (known or unknown/bg)", "\n", "", "annos", "=", "annos_transform", "(", "annos_cur_clip", "[", "0", "]", ",", "cfg", ".", "clip_length", ")", "\n", "targets", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "annos", ",", "0", ")", ")", "]", "\n", "loc_t", ",", "conf_t", ",", "prop_loc_t", ",", "prop_conf_t", "=", "get_matched_targets", "(", "\n", "targets", ",", "torch", ".", "from_numpy", "(", "clip_out", "[", "'loc'", "]", ")", ",", "\n", "torch", ".", "from_numpy", "(", "clip_out", "[", "'priors'", "]", ")", ",", "cfg", ".", "clip_length", ")", "\n", "# coarse stage", "\n", "inds_pos", "=", "conf_t", ".", "view", "(", "-", "1", ")", ">", "0", "\n", "inds_neg", "=", "conf_t", ".", "view", "(", "-", "1", ")", "<=", "0", "\n", "res_coarse", "=", "get_result", "(", "clip_out", ",", "stage", "=", "'coarse'", ",", "target", "=", "target", ")", "\n", "all_known", "[", "'coarse'", "]", ".", "append", "(", "res_coarse", "[", "inds_pos", "]", ")", "\n", "all_unknown", "[", "'coarse'", "]", ".", "append", "(", "res_coarse", "[", "inds_neg", "]", ")", "\n", "# refined stage", "\n", "inds_pos", "=", "prop_conf_t", ".", "view", "(", "-", "1", ")", ">", "0", "\n", "inds_neg", "=", "prop_conf_t", ".", "view", "(", "-", "1", ")", "<=", "0", "\n", "res_refined", "=", "get_result", "(", "clip_out", ",", "stage", "=", "'refined'", ",", "target", "=", "target", ")", "\n", "all_known", "[", "'refined'", "]", ".", "append", "(", "res_refined", "[", "inds_pos", "]", ")", "\n", "all_unknown", "[", "'refined'", "]", ".", "append", "(", "res_refined", "[", "inds_neg", "]", ")", "\n", "", "", "return", "all_known", ",", "all_unknown", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.plot_unct_dist": [[392, 409], ["matplotlib.figure", "matplotlib.hist", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.xlim"], "function", ["None"], ["", "def", "plot_unct_dist", "(", "result_file", ",", "all_scores", ",", "colors", ",", "labels", ",", "xlabel", "=", "'uncertainty'", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", ",", "4", ")", ")", "# (w, h)", "\n", "fontsize", "=", "18", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "plt", ".", "hist", "(", "all_scores", ",", "100", ",", "density", "=", "normalize_fig", ",", "color", "=", "colors", ",", "label", "=", "labels", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", "-", "3", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ",", "fontsize", "=", "fontsize", ")", "\n", "y_labels", "=", "'density'", "if", "normalize_fig", "else", "'number of predictions'", "\n", "plt", ".", "ylabel", "(", "y_labels", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "if", "normalize_fig", ":", "\n", "        ", "plt", ".", "xlim", "(", "0", ",", "1.01", ")", "\n", "# plt.ylim(0, 40000)", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.get_activity_index": [[411, 419], ["numpy.loadtxt", "enumerate"], "function", ["None"], ["", "def", "get_activity_index", "(", "class_info_path", ")", ":", "\n", "    ", "txt", "=", "np", ".", "loadtxt", "(", "class_info_path", ",", "dtype", "=", "str", ")", "\n", "class_to_idx", "=", "{", "}", "\n", "if", "cfg", ".", "open_set", ":", "\n", "        ", "class_to_idx", "[", "'__unknown__'", "]", "=", "0", "# 0 is reserved for unknown in open set", "\n", "", "for", "idx", ",", "l", "in", "enumerate", "(", "txt", ")", ":", "\n", "        ", "class_to_idx", "[", "l", "[", "1", "]", "]", "=", "idx", "+", "1", "# starting from 1 to K (K=15 for thumos14)", "\n", "", "return", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.load_gt_data": [[421, 446], ["data[].items", "pandas.DataFrame", "list", "open", "json.load", "set", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "float", "float", "label_lst.append", "label_lst.append", "label_lst.append"], "function", ["None"], ["", "def", "load_gt_data", "(", "ground_truth_filename", ",", "activity_index", ")", ":", "\n", "    ", "with", "open", "(", "ground_truth_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Read ground truth data.", "\n", "", "video_lst", ",", "t_start_lst", ",", "t_end_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "for", "ann", "in", "v", "[", "'annotations'", "]", ":", "\n", "            ", "video_lst", ".", "append", "(", "videoid", ")", "\n", "t_start_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "t_end_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "if", "cfg", ".", "open_set", ":", "\n", "                ", "if", "ann", "[", "'label'", "]", "in", "activity_index", ":", "\n", "                    ", "label_lst", ".", "append", "(", "activity_index", "[", "ann", "[", "'label'", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "label_lst", ".", "append", "(", "0", ")", "# the unknown", "\n", "", "", "else", ":", "# closed set", "\n", "                ", "assert", "ann", "[", "'label'", "]", "in", "activity_index", ",", "'Ground truth json contains invalid class: %s'", "%", "(", "ann", "[", "'label'", "]", ")", "\n", "label_lst", ".", "append", "(", "activity_index", "[", "ann", "[", "'label'", "]", "]", ")", "\n", "\n", "", "", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "unique_videos", "=", "list", "(", "set", "(", "video_lst", ")", ")", "\n", "return", "ground_truth", ",", "unique_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.gather_valid_preds": [[448, 475], ["result_dict.items", "pandas.DataFrame", "predictions[].append", "predictions[].append", "predictions[].append", "predictions[].append", "predictions[].append", "float", "float"], "function", ["None"], ["", "def", "gather_valid_preds", "(", "result_dict", ",", "video_lst", ",", "activity_index", ")", ":", "\n", "    ", "predictions", "=", "{", "'video-id'", ":", "[", "]", ",", "'t-start'", ":", "[", "]", ",", "'t-end'", ":", "[", "]", ",", "'label'", ":", "[", "]", ",", "'uncertainty'", ":", "[", "]", "}", "\n", "for", "videoid", ",", "proposal_list", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "videoid", "not", "in", "video_lst", ":", "\n", "            ", "continue", "\n", "", "for", "result", "in", "proposal_list", ":", "\n", "            ", "if", "result", "[", "'label'", "]", "not", "in", "activity_index", ":", "\n", "                ", "continue", "\n", "# known/unknown classification", "\n", "", "if", "cfg", ".", "scoring", "==", "'uncertainty'", ":", "\n", "                ", "res_score", "=", "1", "-", "result", "[", "'uncertainty'", "]", "\n", "", "elif", "cfg", ".", "scoring", "==", "'confidence'", ":", "\n", "                ", "res_score", "=", "result", "[", "'score'", "]", "\n", "", "elif", "cfg", ".", "scoring", "==", "'uncertainty_actionness'", ":", "\n", "                ", "res_score", "=", "1", "-", "result", "[", "'uncertainty'", "]", "*", "result", "[", "'actionness'", "]", "\n", "", "if", "cfg", ".", "open_set", "and", "res_score", "<", "ood_thresh", ":", "\n", "                ", "label", "=", "activity_index", "[", "'__unknown__'", "]", "# reject the unknown", "\n", "", "else", ":", "\n", "                ", "label", "=", "activity_index", "[", "result", "[", "'label'", "]", "]", "\n", "\n", "", "predictions", "[", "'video-id'", "]", ".", "append", "(", "videoid", ")", "\n", "predictions", "[", "'t-start'", "]", ".", "append", "(", "float", "(", "result", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "predictions", "[", "'t-end'", "]", ".", "append", "(", "float", "(", "result", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "predictions", "[", "'label'", "]", ".", "append", "(", "label", ")", "\n", "predictions", "[", "'uncertainty'", "]", ".", "append", "(", "result", "[", "'uncertainty'", "]", ")", "\n", "", "", "predictions", "=", "pd", ".", "DataFrame", "(", "predictions", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.split_uncertainties": [[477, 511], ["ground_truth_all.groupby", "prediction_all.groupby", "tqdm.tqdm", "ground_truth_all.groupby.get_group().reset_index", "draw_distribution.split_uncertainties._get_predictions_with_vid"], "function", ["None"], ["", "def", "split_uncertainties", "(", "prediction_all", ",", "ground_truth_all", ",", "video_lst", ",", "tiou_thr", "=", "0.5", ")", ":", "\n", "    ", "ground_truth_by_vid", "=", "ground_truth_all", ".", "groupby", "(", "'video-id'", ")", "\n", "prediction_by_vid", "=", "prediction_all", ".", "groupby", "(", "'video-id'", ")", "\n", "def", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "prediction_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "            ", "return", "pd", ".", "DataFrame", "(", ")", "\n", "", "", "known_uncertainty", ",", "unknown_uncertainty", ",", "background_uncertainty", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "video_lst", ",", "total", "=", "len", "(", "video_lst", ")", ")", ":", "\n", "        ", "ground_truth", "=", "ground_truth_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", ")", "\n", "prediction", "=", "_get_predictions_with_vid", "(", "prediction_by_vid", ",", "video_name", ")", "\n", "if", "prediction", ".", "empty", ":", "\n", "            ", "continue", "\n", "", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "ground_truth", ")", ")", ")", "*", "-", "1", "\n", "for", "idx", ",", "this_pred", "in", "prediction", ".", "iterrows", "(", ")", ":", "\n", "            ", "uncertainty", "=", "this_pred", "[", "'uncertainty'", "]", "\n", "tiou_arr", "=", "segment_iou", "(", "this_pred", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ",", "\n", "ground_truth", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# tIoU in a decreasing order", "\n", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "                ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_thr", ":", "# background segment", "\n", "                    ", "background_uncertainty", ".", "append", "(", "uncertainty", ")", "\n", "break", "\n", "", "if", "lock_gt", "[", "jdx", "]", ">=", "0", ":", "\n", "                    ", "continue", "# this gt was matched before, continue to select the second largest tIoU match", "\n", "", "label_gt", "=", "int", "(", "ground_truth", ".", "loc", "[", "jdx", "]", "[", "'label'", "]", ")", "\n", "if", "label_gt", "==", "0", ":", "# unknown foreground", "\n", "                    ", "unknown_uncertainty", ".", "append", "(", "uncertainty", ")", "\n", "", "else", ":", "# known foreground", "\n", "                    ", "known_uncertainty", ".", "append", "(", "uncertainty", ")", "\n", "", "lock_gt", "[", "jdx", "]", "=", "idx", "\n", "break", "\n", "", "", "", "return", "known_uncertainty", ",", "unknown_uncertainty", ",", "background_uncertainty", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.draw_distribution.split_uncertainties_correct": [[513, 555], ["ground_truth_all.groupby", "result_dict.items", "draw_distribution.split_uncertainties_correct._get_groundtruth_with_vid"], "function", ["None"], ["", "def", "split_uncertainties_correct", "(", "result_dict", ",", "ground_truth_all", ",", "tiou_thr", "=", "0.5", ",", "target", "=", "'uncertainty'", ")", ":", "\n", "    ", "def", "get_result", "(", "pred", ",", "target", "=", "target", ")", ":", "\n", "        ", "if", "target", "==", "'uncertainty'", "and", "cfg", ".", "use_edl", ":", "\n", "            ", "return", "pred", "[", "'uncertainty'", "]", "\n", "", "elif", "target", "==", "'confidence'", ":", "\n", "            ", "return", "pred", "[", "'score'", "]", "\n", "", "elif", "target", "==", "'uncertainty_actionness'", "and", "cfg", ".", "use_edl", ":", "\n", "            ", "return", "pred", "[", "'uncertainty'", "]", "*", "pred", "[", "'actionness'", "]", "\n", "\n", "", "", "def", "_get_groundtruth_with_vid", "(", "ground_truth_by_vid", ",", "video_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "ground_truth_by_vid", ".", "get_group", "(", "video_name", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "", "ground_truth_by_vid", "=", "ground_truth_all", ".", "groupby", "(", "'video-id'", ")", "\n", "known_data", ",", "unknown_data", ",", "background_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "video_name", ",", "prediction", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "# get the ground truth of this video", "\n", "        ", "ground_truth", "=", "_get_groundtruth_with_vid", "(", "ground_truth_by_vid", ",", "video_name", ")", "\n", "if", "len", "(", "ground_truth", ")", "==", "0", ":", "# no ground truth, ignore!", "\n", "            ", "continue", "\n", "", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "ground_truth", ")", ")", ")", "*", "-", "1", "\n", "for", "idx", ",", "this_pred", "in", "enumerate", "(", "prediction", ")", ":", "\n", "            ", "res", "=", "get_result", "(", "this_pred", ",", "target", "=", "target", ")", "\n", "tiou_arr", "=", "segment_iou", "(", "np", ".", "array", "(", "this_pred", "[", "'segment'", "]", ")", ",", "\n", "ground_truth", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# tIoU in a decreasing order", "\n", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "                ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_thr", ":", "# background segment", "\n", "                    ", "background_data", ".", "append", "(", "res", ")", "\n", "break", "\n", "", "if", "lock_gt", "[", "jdx", "]", ">=", "0", ":", "\n", "                    ", "continue", "# this gt was matched before, continue to select the second largest tIoU match", "\n", "", "label_gt", "=", "int", "(", "ground_truth", ".", "loc", "[", "jdx", "]", "[", "'label'", "]", ")", "\n", "if", "label_gt", "==", "0", ":", "# unknown foreground", "\n", "                    ", "unknown_data", ".", "append", "(", "res", ")", "\n", "", "else", ":", "# known foreground", "\n", "                    ", "known_data", ".", "append", "(", "res", ")", "\n", "", "lock_gt", "[", "jdx", "]", "=", "idx", "\n", "break", "\n", "", "", "", "return", "known_data", ",", "unknown_data", ",", "background_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.OpenMax.__init__": [[13, 19], ["torch.Module.__init__", "list", "len", "weibull_model.keys"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weibull_model", ",", "rank", "=", "1", ")", ":", "\n", "        ", "super", "(", "OpenMax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weibull_model", "=", "weibull_model", "\n", "self", ".", "class_names", "=", "list", "(", "weibull_model", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cls", "=", "len", "(", "self", ".", "class_names", ")", "\n", "self", ".", "rank", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.OpenMax.compute_openmax_prob": [[21, 40], ["range", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "numpy.array", "numpy.sum", "numpy.exp", "numpy.mean.tolist", "len", "numpy.exp", "numpy.exp", "numpy.sum", "numpy.exp", "numpy.sum"], "methods", ["None"], ["", "def", "compute_openmax_prob", "(", "self", ",", "openmax_score", ",", "openmax_score_u", ")", ":", "\n", "        ", "prob_scores", ",", "prob_unknowns", "=", "[", "]", ",", "[", "]", "\n", "channel_scores", ",", "channel_unknowns", "=", "[", "]", ",", "[", "]", "\n", "for", "gt_cls", "in", "range", "(", "self", ".", "num_cls", ")", ":", "\n", "            ", "channel_scores", "+=", "[", "np", ".", "exp", "(", "openmax_score", "[", "gt_cls", "]", ")", "]", "\n", "\n", "", "total_denominator", "=", "np", ".", "sum", "(", "np", ".", "exp", "(", "openmax_score", ")", ")", "+", "np", ".", "exp", "(", "np", ".", "sum", "(", "openmax_score_u", ")", ")", "\n", "prob_scores", "+=", "[", "channel_scores", "/", "total_denominator", "]", "\n", "prob_unknowns", "+=", "[", "np", ".", "exp", "(", "np", ".", "sum", "(", "openmax_score_u", ")", ")", "/", "total_denominator", "]", "\n", "\n", "prob_scores", "=", "np", ".", "array", "(", "prob_scores", ")", "\n", "prob_unknowns", "=", "np", ".", "array", "(", "prob_unknowns", ")", "\n", "\n", "scores", "=", "np", ".", "mean", "(", "prob_scores", ",", "axis", "=", "0", ")", "\n", "unknowns", "=", "np", ".", "mean", "(", "prob_unknowns", ",", "axis", "=", "0", ")", "\n", "modified_scores", "=", "[", "unknowns", "]", "+", "scores", ".", "tolist", "(", ")", "# the first one is unknown", "\n", "assert", "len", "(", "modified_scores", ")", "==", "self", ".", "num_cls", "+", "1", "\n", "modified_scores", "=", "np", ".", "array", "(", "modified_scores", ")", "\n", "return", "modified_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.OpenMax.openmax_recalibrate": [[42, 74], ["min", "numpy.zeros", "range", "range", "numpy.array", "numpy.array", "openmax.OpenMax.compute_openmax_prob", "logit.argsort().ravel", "len", "openmax.compute_eucos_dist", "category_weibull[].w_score", "float", "range", "logit.argsort"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.OpenMax.compute_openmax_prob", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.compute_eucos_dist"], ["", "def", "openmax_recalibrate", "(", "self", ",", "logit", ",", "feat", ")", ":", "\n", "        ", "\"\"\" logit: (K,)\n            feat: (D,)\n        \"\"\"", "\n", "# get the ranked alpha", "\n", "alpharank", "=", "min", "(", "self", ".", "num_cls", ",", "self", ".", "rank", ")", "\n", "ranked_list", "=", "logit", ".", "argsort", "(", ")", ".", "ravel", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "alpha_weights", "=", "[", "(", "(", "alpharank", "+", "1", ")", "-", "i", ")", "/", "float", "(", "alpharank", ")", "for", "i", "in", "range", "(", "1", ",", "alpharank", "+", "1", ")", "]", "\n", "ranked_alpha", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_cls", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "alpha_weights", ")", ")", ":", "\n", "            ", "ranked_alpha", "[", "ranked_list", "[", "i", "]", "]", "=", "alpha_weights", "[", "i", "]", "\n", "\n", "", "openmax_channel", "=", "[", "]", "\n", "openmax_unknown", "=", "[", "]", "\n", "for", "cls_gt", "in", "range", "(", "self", ".", "num_cls", ")", ":", "\n", "# get distance between current channel and mean vector", "\n", "            ", "cls_name", "=", "self", ".", "class_names", "[", "cls_gt", "]", "\n", "mav_train", "=", "self", ".", "weibull_model", "[", "cls_name", "]", "[", "'mean_vec'", "]", "\n", "category_weibull", "=", "self", ".", "weibull_model", "[", "cls_name", "]", "[", "'model'", "]", "\n", "\n", "channel_distance", "=", "compute_eucos_dist", "(", "mav_train", ",", "feat", ")", "\n", "# obtain w_score for the distance and compute probability of the distance", "\n", "wscore", "=", "category_weibull", "[", "0", "]", ".", "w_score", "(", "channel_distance", ")", "\n", "modified_score", "=", "logit", "[", "cls_gt", "]", "*", "(", "1", "-", "wscore", "*", "ranked_alpha", "[", "cls_gt", "]", ")", "\n", "openmax_channel", "+=", "[", "modified_score", "]", "\n", "openmax_unknown", "+=", "[", "logit", "[", "cls_gt", "]", "-", "modified_score", "]", "\n", "\n", "", "openmax_score", "=", "np", ".", "array", "(", "openmax_channel", ")", "\n", "openmax_score_u", "=", "np", ".", "array", "(", "openmax_unknown", ")", "\n", "# Pass the recalibrated scores into openmax", "\n", "openmax_prob", "=", "self", ".", "compute_openmax_prob", "(", "openmax_score", ",", "openmax_score_u", ")", "\n", "return", "openmax_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.OpenMax.forward": [[76, 87], ["logits_in.cpu().numpy", "feature_in.cpu().numpy", "numpy.zeros", "enumerate", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "zip", "openmax.OpenMax.openmax_recalibrate", "logits_in.cpu", "feature_in.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.OpenMax.openmax_recalibrate"], ["", "def", "forward", "(", "self", ",", "logits_in", ",", "feature_in", ")", ":", "\n", "        ", "\"\"\" logits: (N, K)\n            feature: (N, D)\n        \"\"\"", "\n", "logits", "=", "logits_in", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feature", "=", "feature_in", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "openmax_probs", "=", "np", ".", "zeros", "(", "(", "logits", ".", "shape", "[", "0", "]", ",", "self", ".", "num_cls", "+", "1", ")", ")", "\n", "for", "i", ",", "(", "logit", ",", "feat", ")", "in", "enumerate", "(", "zip", "(", "logits", ",", "feature", ")", ")", ":", "\n", "            ", "openmax_probs", "[", "i", "]", "=", "self", ".", "openmax_recalibrate", "(", "logit", ",", "feat", ")", "\n", "", "openmax_probs", "=", "torch", ".", "from_numpy", "(", "openmax_probs", ")", ".", "to", "(", "logits_in", ".", "device", ")", "\n", "return", "openmax_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.openmax.compute_eucos_dist": [[7, 10], ["scipy.cosine", "scipy.euclidean"], "function", ["None"], ["def", "compute_eucos_dist", "(", "mav", ",", "feature", ")", ":", "\n", "    ", "dist", "=", "spd", ".", "euclidean", "(", "mav", ",", "feature", ")", "/", "200", "+", "spd", ".", "cosine", "(", "mav", ",", "feature", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.MultiSegmentLoss.__init__": [[71, 91], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "cls_loss.FocalLoss_Ori", "cls_loss.ActionnessLoss", "cls_loss.EvidenceLoss", "cls_loss.RPLoss"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["prior_rb", "=", "None", "\n", "\n", "\n", "def", "gen_bounds", "(", "priors", ")", ":", "\n", "    ", "global", "prior_lb", ",", "prior_rb", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "prior_lb", "=", "priors", "[", ":", ",", "1", "]", ".", "clone", "(", ")", "\n", "prior_rb", "=", "priors", "[", ":", ",", "1", "]", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "prior_lb", "[", "i", "]", "=", "bounds", "[", "int", "(", "prior_lb", "[", "i", "]", ")", "]", "[", "0", "]", "\n", "prior_rb", "[", "i", "]", "=", "bounds", "[", "int", "(", "prior_rb", "[", "i", "]", ")", "]", "[", "1", "]", "\n", "", "prior_lb", "=", "prior_lb", ".", "unsqueeze", "(", "1", ")", "\n", "prior_rb", "=", "prior_rb", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "\n", "", "class", "MultiSegmentLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "overlap_thresh", ",", "negpos_ratio", ",", "use_gpu", "=", "True", ",", "\n", "cls_loss_type", "=", "'focal'", ",", "edl_config", "=", "None", ",", "os_head", "=", "False", ",", "size_average", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiSegmentLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "overlap_thresh", "=", "overlap_thresh", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.MultiSegmentLoss.forward": [[92, 260], ["loc_data.size", "priors.size", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "pos.unsqueeze().expand_as", "torch.Tensor().to.clone", "torch.Tensor().to.clone", "torch.Tensor().to.clone", "loc_data[].view", "loc_t[].view", "prop_pos.unsqueeze().expand_as", "prop_loc_data[].view", "prop_loc_t[].view", "loc_data[].view", "gt_loc_t[].view", "prop_loc_data[].view", "center_data[].view", "conf_data.view", "torch.LongTensor().to.view", "torch.LongTensor().to.view", "torch.LongTensor().to.view", "prop_conf_data.view", "prop_conf_t.view.view.view", "max", "max", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "loc_data[].view.numel", "multisegment_loss.iou_loss", "loc_data[].view.sum", "prop_loc_data[].view.numel", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "prop_loc_data[].view.sum", "loc_data[].view.numel", "iou_loss().clamp_", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "loc_data[].view.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.LongTensor().to.view.numel", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "act_data.view", "inds_keep.to", "multisegment_loss.MultiSegmentLoss.act_loss", "torch.softmax", "torch.softmax", "torch.softmax", "prop_conf_t.view.view.numel", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "prop_conf_data.view", "multisegment_loss.MultiSegmentLoss.cls_loss.iou_calib", "prop_act_data.view", "inds_keep.to", "multisegment_loss.MultiSegmentLoss.act_loss", "pos.sum", "prop_pos.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "priors.size", "truths.size", "priors[].unsqueeze().expand", "area.min", "multisegment_loss.iou_loss", "conf.clone", "pos.unsqueeze", "prop_pos.unsqueeze", "targets_conf[].unsqueeze", "cls_ctr_data.view", "ctr_feat_data.view", "multisegment_loss.MultiSegmentLoss.cls_loss", "multisegment_loss.MultiSegmentLoss.cls_loss", "prop_conf_t[].unsqueeze", "prop_cls_ctr_data.view", "prop_ctr_feat_data.view", "multisegment_loss.MultiSegmentLoss.cls_loss", "multisegment_loss.MultiSegmentLoss.cls_loss", "torch.Tensor().to.view", "torch.Tensor().to.view", "torch.Tensor().to.view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "pos.dim", "multisegment_loss.iou_loss", "inds_keep.squeeze", "cls_ctr_data.view.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inds_keep.squeeze", "prop_cls_ctr_data.view.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "priors[].unsqueeze", "truths[].unsqueeze().expand", "truths[].unsqueeze().expand", "pos.unsqueeze", "pos.dim", "truths[].unsqueeze", "truths[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.iou_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.iou_calib", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.iou_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.iou_loss"], ["self", ".", "negpos_ratio", "=", "negpos_ratio", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "cls_loss_type", "=", "cls_loss_type", "\n", "if", "self", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "            ", "self", ".", "cls_loss", "=", "FocalLoss_Ori", "(", "num_classes", ",", "balance_index", "=", "0", ",", "size_average", "=", "size_average", ",", "alpha", "=", "0.25", ")", "\n", "", "elif", "self", ".", "cls_loss_type", "==", "'edl'", ":", "\n", "            ", "self", ".", "cls_loss", "=", "EvidenceLoss", "(", "num_classes", ",", "edl_config", ",", "size_average", "=", "size_average", ")", "\n", "", "self", ".", "iou_aware", "=", "True", "if", "self", ".", "cls_loss_type", "==", "'edl'", "and", "self", ".", "cls_loss", ".", "iou_aware", "else", "False", "\n", "self", ".", "os_head", "=", "os_head", "\n", "if", "self", ".", "os_head", ":", "\n", "            ", "self", ".", "act_loss", "=", "ActionnessLoss", "(", "size_average", "=", "size_average", ",", "weight", "=", "0.1", ")", "\n", "", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "center_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "predictions", ",", "targets", ",", "pre_locs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param predictions: a tuple containing loc, conf and priors\n        :param targets: ground truth segments and labels\n        :return: loc loss and conf loss\n        \"\"\"", "\n", "loc_data", ",", "conf_data", ",", "prop_loc_data", ",", "prop_conf_data", ",", "center_data", ",", "priors", ",", "act_data", ",", "prop_act_data", "=", "predictions", "\n", "# priors = priors[0]", "\n", "num_batch", "=", "loc_data", ".", "size", "(", "0", ")", "\n", "num_priors", "=", "priors", ".", "size", "(", "0", ")", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_length'", "]", "\n", "\n", "loss_l_list", "=", "[", "]", "\n", "loss_c_list", "=", "[", "]", "\n", "loss_ct_list", "=", "[", "]", "\n", "loss_prop_l_list", "=", "[", "]", "\n", "loss_prop_c_list", "=", "[", "]", "\n", "loss_act_list", "=", "[", "]", "\n", "loss_prop_act_list", "=", "[", "]", "\n", "\n", "iou_pred", "=", "torch", ".", "Tensor", "(", "num_priors", ",", "num_batch", ")", ".", "to", "(", "loc_data", ".", "device", ")", "if", "self", ".", "iou_aware", "else", "None", "\n", "for", "idx", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "loc_t", "=", "torch", ".", "Tensor", "(", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "conf_t", "=", "torch", ".", "LongTensor", "(", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_loc_t", "=", "torch", ".", "Tensor", "(", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_conf_t", "=", "torch", ".", "LongTensor", "(", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "\n", "loc_p", "=", "loc_data", "[", "idx", "]", "\n", "logit_p", "=", "conf_data", "[", "idx", "]", "\n", "prop_loc_p", "=", "prop_loc_data", "[", "idx", "]", "\n", "prop_logit_p", "=", "prop_conf_data", "[", "idx", "]", "\n", "center_p", "=", "center_data", "[", "idx", "]", "\n", "if", "self", ".", "os_head", ":", "\n", "                ", "act_p", "=", "act_data", "[", "idx", "]", "\n", "prop_act_p", "=", "prop_act_data", "[", "idx", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# match priors and ground truth segments", "\n", "                ", "truths", "=", "targets", "[", "idx", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "labels", "=", "targets", "[", "idx", "]", "[", ":", ",", "-", "1", "]", "\n", "\"\"\"\n                match gt\n                \"\"\"", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "N", "=", "truths", ".", "size", "(", "0", ")", "\n", "center", "=", "priors", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "K", ",", "N", ")", "\n", "left", "=", "(", "center", "-", "truths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", ")", "*", "clip_length", "\n", "right", "=", "(", "truths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", "-", "center", ")", "*", "clip_length", "\n", "max_dis", "=", "torch", ".", "max", "(", "left", ",", "right", ")", "\n", "if", "prior_lb", "is", "None", "or", "prior_rb", "is", "None", ":", "\n", "                    ", "gen_bounds", "(", "priors", ")", "\n", "", "l_bound", "=", "prior_lb", ".", "expand", "(", "K", ",", "N", ")", "\n", "r_bound", "=", "prior_rb", ".", "expand", "(", "K", ",", "N", ")", "\n", "area", "=", "left", "+", "right", "\n", "maxn", "=", "clip_length", "*", "2", "\n", "area", "[", "left", "<", "0", "]", "=", "maxn", "\n", "area", "[", "right", "<", "0", "]", "=", "maxn", "\n", "area", "[", "max_dis", "<=", "l_bound", "]", "=", "maxn", "\n", "area", "[", "max_dis", ">", "r_bound", "]", "=", "maxn", "\n", "best_truth_area", ",", "best_truth_idx", "=", "area", ".", "min", "(", "1", ")", "\n", "\n", "loc_t", "[", ":", ",", "0", "]", "=", "(", "priors", "[", ":", ",", "0", "]", "-", "truths", "[", "best_truth_idx", ",", "0", "]", ")", "*", "clip_length", "\n", "loc_t", "[", ":", ",", "1", "]", "=", "(", "truths", "[", "best_truth_idx", ",", "1", "]", "-", "priors", "[", ":", ",", "0", "]", ")", "*", "clip_length", "\n", "conf", "=", "labels", "[", "best_truth_idx", "]", "\n", "conf", "[", "best_truth_area", ">=", "maxn", "]", "=", "0", "\n", "conf_t", "[", ":", "]", "=", "conf", "\n", "\n", "iou", "=", "iou_loss", "(", "loc_p", ",", "loc_t", ",", "loss_type", "=", "'calc iou'", ")", "# [num_priors]", "\n", "if", "self", ".", "iou_aware", ":", "\n", "                    ", "iou_pred", "[", ":", ",", "idx", "]", "=", "iou", "\n", "", "if", "(", "conf", ">", "0", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "max_iou", ",", "max_iou_idx", "=", "iou", "[", "conf", ">", "0", "]", ".", "max", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "max_iou", "=", "2.0", "\n", "# print(max_iou)", "\n", "", "prop_conf", "=", "conf", ".", "clone", "(", ")", "\n", "prop_conf", "[", "iou", "<", "min", "(", "self", ".", "overlap_thresh", ",", "max_iou", ")", "]", "=", "0", "\n", "prop_conf_t", "[", ":", "]", "=", "prop_conf", "\n", "prop_w", "=", "loc_p", "[", ":", ",", "0", "]", "+", "loc_p", "[", ":", ",", "1", "]", "\n", "prop_loc_t", "[", ":", ",", "0", "]", "=", "(", "loc_t", "[", ":", ",", "0", "]", "-", "loc_p", "[", ":", ",", "0", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "prop_loc_t", "[", ":", ",", "1", "]", "=", "(", "loc_t", "[", ":", ",", "1", "]", "-", "loc_p", "[", ":", ",", "1", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "\n", "", "pos", "=", "conf_t", ">", "0", "# [num_priors]", "\n", "pos_idx", "=", "pos", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "loc_p", ")", "# [num_priors, 2]", "\n", "gt_loc_t", "=", "loc_t", ".", "clone", "(", ")", "\n", "loc_p", "=", "loc_p", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "loc_target", "=", "loc_t", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "if", "loc_p", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_l", "=", "iou_loss", "(", "loc_p", ",", "loc_target", ",", "loss_type", "=", "'giou'", ",", "reduction", "=", "'sum'", ")", "\n", "", "else", ":", "\n", "                ", "loss_l", "=", "loc_p", ".", "sum", "(", ")", "\n", "\n", "", "prop_pos", "=", "prop_conf_t", ">", "0", "\n", "prop_pos_idx", "=", "prop_pos", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "prop_loc_p", ")", "# [num_priors, 2]", "\n", "target_prop_loc_p", "=", "prop_loc_p", "[", "prop_pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "prop_loc_t", "=", "prop_loc_t", "[", "prop_pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n", "if", "prop_loc_p", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_prop_l", "=", "F", ".", "smooth_l1_loss", "(", "target_prop_loc_p", ",", "prop_loc_t", ",", "reduction", "=", "'sum'", ")", "\n", "", "else", ":", "\n", "                ", "loss_prop_l", "=", "target_prop_loc_p", ".", "sum", "(", ")", "\n", "\n", "", "prop_pre_loc", "=", "loc_p", "\n", "cur_loc_t", "=", "gt_loc_t", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "prop_loc_p", "=", "prop_loc_p", "[", "pos_idx", "]", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "center_p", "=", "center_p", "[", "pos", ".", "unsqueeze", "(", "-", "1", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "if", "prop_pre_loc", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "prop_pre_w", "=", "(", "prop_pre_loc", "[", ":", ",", "0", "]", "+", "prop_pre_loc", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "cur_loc_p", "=", "0.5", "*", "prop_pre_w", "*", "prop_loc_p", "+", "prop_pre_loc", "\n", "ious", "=", "iou_loss", "(", "cur_loc_p", ",", "cur_loc_t", ",", "loss_type", "=", "'calc iou'", ")", ".", "clamp_", "(", "min", "=", "0", ")", "\n", "loss_ct", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "center_p", ",", "\n", "ious", ",", "\n", "reduction", "=", "'sum'", "\n", ")", "\n", "", "else", ":", "\n", "                ", "loss_ct", "=", "prop_pre_loc", ".", "sum", "(", ")", "\n", "\n", "# classification loss in the coarse stage", "\n", "", "conf_p", "=", "logit_p", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "targets_conf", "=", "conf_t", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "self", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "                ", "conf_p", "=", "F", ".", "softmax", "(", "conf_p", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "os_head", ":", "\n", "                ", "inds_keep", "=", "targets_conf", ">", "0", "# (N,1)", "\n", "targets_conf", "=", "targets_conf", "[", "inds_keep", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "1", "# (M,1), starting from 0", "\n", "conf_p", "=", "conf_p", "[", "inds_keep", ".", "squeeze", "(", ")", "]", "# (M,15)", "\n", "", "if", "targets_conf", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_c", "=", "self", ".", "cls_loss", "(", "conf_p", ",", "targets_conf", ")", "\n", "", "else", ":", "# empty, do not need to compute loss", "\n", "                ", "loss_c", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "conf_p", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "os_head", ":", "\n", "                ", "act_scores", "=", "act_p", ".", "view", "(", "-", "1", ",", "1", ")", "# [N, 1]", "\n", "act_targets", "=", "inds_keep", ".", "to", "(", "torch", ".", "float32", ")", "# [N, 1]", "\n", "loss_act", ",", "AN", "=", "self", ".", "act_loss", "(", "act_scores", ",", "act_targets", ")", "\n", "\n", "# classification loss in the refined stage", "\n", "", "prop_conf_p", "=", "prop_logit_p", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n", "prop_conf_t", "=", "prop_conf_t", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "self", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "                ", "prop_conf_p", "=", "F", ".", "softmax", "(", "prop_conf_p", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "os_head", ":", "\n", "                ", "inds_keep", "=", "prop_conf_t", ">", "0", "# (N,1)", "\n", "prop_conf_t", "=", "prop_conf_t", "[", "inds_keep", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "1", "# (M,1), starting from 0", "\n", "prop_conf_p", "=", "prop_conf_p", "[", "inds_keep", ".", "squeeze", "(", ")", "]", "# (M,15)", "\n", "", "if", "prop_conf_t", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "loss_prop_c", "=", "self", ".", "cls_loss", "(", "prop_conf_p", ",", "prop_conf_t", ")", "\n", "", "else", ":", "# empty, do not need to compute loss", "\n", "                ", "loss_prop_c", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "prop_conf_p", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "iou_aware", ":", "\n", "                ", "logit_pred", "=", "prop_conf_data", "[", "idx", "]", ".", "view", "(", "-", "1", ",", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.log_sum_exp": [[9, 18], ["x.data.max", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["    ", "\"\"\"Utility function for computing log_sum_exp while determining\n    This will be used to determine unaveraged confidence loss across\n    all examples in a batch.\n    Args:\n        x (Variable(tensor)): conf_preds from conf layers\n    \"\"\"", "\n", "x_max", "=", "x", ".", "data", ".", "max", "(", ")", "\n", "return", "torch", ".", "log", "(", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "x", "-", "x_max", ")", ",", "1", ",", "keepdim", "=", "True", ")", ")", "+", "x_max", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.iou_loss": [[20, 54], ["torch.finfo", "torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "area_union.clamp", "loss.mean.sum", "weight.view", "loss.mean.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "loss.mean.size", "ac_uion.clamp"], "function", ["None"], ["    ", "\"\"\"\n    jaccard: A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\n    \"\"\"", "\n", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "target_area", "=", "target_left", "+", "target_right", "\n", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "area_union", "=", "target_area", "+", "pred_area", "-", "inter", "\n", "ious", "=", "inter", "/", "area_union", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "\n", "if", "loss_type", "==", "'linear_iou'", ":", "\n", "        ", "loss", "=", "1.0", "-", "ious", "\n", "", "elif", "loss_type", "==", "'giou'", ":", "\n", "        ", "ac_uion", "=", "torch", ".", "max", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "max", "(", "pred_right", ",", "target_right", ")", "\n", "gious", "=", "ious", "-", "(", "ac_uion", "-", "area_union", ")", "/", "ac_uion", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "loss", "=", "1.0", "-", "gious", "\n", "", "else", ":", "\n", "        ", "loss", "=", "ious", "\n", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "loss", "=", "loss", "*", "weight", ".", "view", "(", "loss", ".", "size", "(", ")", ")", "\n", "", "if", "reduction", "==", "'sum'", ":", "\n", "        ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "elif", "reduction", "==", "'mean'", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.multisegment_loss.calc_ioa": [[56, 68], ["torch.finfo", "torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "pred_area.clamp"], "function", ["None"], ["    ", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "ioa", "=", "inter", "/", "pred_area", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "return", "ioa", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.get_basic_config": [[18, 56], ["config[].get", "config[].get", "config[].get", "config[].get", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "get_basic_config", "(", "config", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "cfg", ".", "evidence", "=", "config", "[", "'model'", "]", "[", "'evidence'", "]", "\n", "", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "-", "1", "\n", "", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "config", "[", "'testing'", "]", "[", "'fusion'", "]", "\n", "cfg", ".", "scoring", "=", "config", "[", "'testing'", "]", "[", "'ood_scoring'", "]", "\n", "cfg", ".", "cls_idx_known", "=", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", "\n", "cfg", ".", "open_set", "=", "config", "[", "'open_set'", "]", "\n", "cfg", ".", "split", "=", "config", "[", "'testing'", "]", "[", "'split'", "]", "\n", "\n", "cfg", ".", "rgb_data_path", ",", "cfg", ".", "flow_data_path", "=", "{", "}", ",", "{", "}", "\n", "###  specific for training set", "\n", "cfg", ".", "rgb_data_path", "[", "'training'", "]", "=", "config", "[", "'training'", "]", ".", "get", "(", "'rgb_data_path'", ",", "\n", "'./datasets/thumos14/validation_npy/'", ")", "\n", "cfg", ".", "flow_data_path", "[", "'training'", "]", "=", "config", "[", "'training'", "]", ".", "get", "(", "'flow_data_path'", ",", "\n", "'./datasets/thumos14/validation_flow_npy/'", ")", "\n", "###  specific for testing set", "\n", "cfg", ".", "rgb_data_path", "[", "'testing'", "]", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_data_path'", ",", "\n", "'./datasets/thumos14/test_npy/'", ")", "\n", "cfg", ".", "flow_data_path", "[", "'testing'", "]", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_data_path'", ",", "\n", "'./datasets/thumos14/test_flow_npy/'", ")", "\n", "cfg", ".", "gt_known_json", "=", "'datasets/thumos14/annotations_open/split_{id:d}/known_gt.json'", "\n", "cfg", ".", "gt_all_json", "=", "'datasets/thumos14/annotations/thumos_gt.json'", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.build_model": [[59, 80], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet", "test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "config[].get", "config[].get", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path"], ["", "def", "build_model", "(", "fusion", "=", "False", ")", ":", "\n", "    ", "net", ",", "flow_net", "=", "None", ",", "None", "\n", "if", "fusion", ":", "\n", "        ", "rgb_net", "=", "BDNet", "(", "in_channels", "=", "3", ",", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "flow_net", "=", "BDNet", "(", "in_channels", "=", "2", ",", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "rgb_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_checkpoint_path'", ",", "\n", "'./models/thumos14/checkpoint-15.ckpt'", ")", ")", "\n", "flow_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_checkpoint_path'", ",", "\n", "'./models/thumos14_flow/checkpoint-16.ckpt'", ")", ")", "\n", "rgb_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "rgb_checkpoint_path", ")", ")", "\n", "flow_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "flow_checkpoint_path", ")", ")", "\n", "rgb_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "flow_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "net", "=", "rgb_net", "\n", "", "else", ":", "\n", "        ", "net", "=", "BDNet", "(", "in_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "", "return", "net", ",", "flow_net", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.to_array": [[81, 91], ["data_dict.items", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["", "def", "to_array", "(", "data_dict", ")", ":", "\n", "    ", "if", "data_dict", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "result_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.to_tensor": [[92, 102], ["data_dict.items", "len", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "to_tensor", "(", "data_dict", ")", ":", "\n", "    ", "if", "len", "(", "data_dict", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "result_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.all_to_tensors": [[103, 109], ["enumerate", "enumerate", "zip", "search_param.to_tensor", "search_param.to_tensor"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.to_tensor", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.to_tensor"], ["", "def", "all_to_tensors", "(", "outputs", ")", ":", "\n", "    ", "for", "vid", ",", "out", "in", "enumerate", "(", "outputs", ")", ":", "\n", "        ", "for", "sid", ",", "(", "out_rgb", ",", "out_flow", ")", "in", "enumerate", "(", "zip", "(", "out", "[", "'rgb_out'", "]", ",", "out", "[", "'flow_out'", "]", ")", ")", ":", "\n", "            ", "outputs", "[", "vid", "]", "[", "'rgb_out'", "]", "[", "sid", "]", "=", "to_tensor", "(", "out_rgb", ")", "\n", "outputs", "[", "vid", "]", "[", "'flow_out'", "]", "[", "sid", "]", "=", "to_tensor", "(", "out_flow", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.get_raw_output": [[112, 150], ["AFSD.common.thumos_dataset.get_video_info", "search_param.build_model", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "list", "test.get_offsets", "test.prepare_data", "results.append", "AFSD.common.thumos_dataset.get_video_info.keys", "test.prepare_data", "test.prepare_clip", "out_rgb.append", "out_flow.append", "test.prepare_clip", "torch.no_grad", "torch.no_grad", "net", "search_param.to_array", "search_param.to_array", "flow_net"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.to_array", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.to_array"], ["", "def", "get_raw_output", "(", "cfg", ",", "subset", "=", "'train'", ")", ":", "\n", "# get data", "\n", "    ", "node", "=", "'training'", "if", "subset", "==", "'train'", "else", "'testing'", "\n", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_info_path'", "]", ")", "\n", "npy_data_path", "=", "cfg", ".", "rgb_data_path", "[", "node", "]", "if", "cfg", ".", "fusion", "else", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_data_path'", "]", "\n", "\n", "# prepare model", "\n", "net", ",", "flow_net", "=", "build_model", "(", "fusion", "=", "cfg", ".", "fusion", ")", "\n", "\n", "centor_crop", "=", "videotransforms", ".", "CenterCrop", "(", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", ")", "\n", "results", "=", "[", "]", "\n", "# for video_name in tqdm.tqdm(list(video_infos.keys()), ncols=0, desc='Thresholding from Train Set'):", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "video_infos", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ",", "desc", "=", "f'Inference on {subset} set'", ")", ":", "\n", "# get the clip offsets", "\n", "        ", "offsetlist", "=", "get_offsets", "(", "video_infos", ",", "video_name", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "stride", ")", "\n", "sample_fps", "=", "video_infos", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "npy_data_path", ",", "video_name", ",", "centor_crop", ")", "\n", "flow_data", "=", "prepare_data", "(", "cfg", ".", "flow_data_path", ",", "video_name", ",", "centor_crop", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "\n", "out_rgb", ",", "out_flow", "=", "[", "]", ",", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "\n", "flow_clip", "=", "prepare_clip", "(", "flow_data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "flow_output_dict", "=", "flow_net", "(", "flow_clip", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "# tensor to numpy array", "\n", "", "out_rgb", ".", "append", "(", "to_array", "(", "output_dict", ")", ")", "\n", "out_flow", ".", "append", "(", "to_array", "(", "flow_output_dict", ")", ")", "\n", "# gather necessary results", "\n", "", "output_video", "=", "{", "'name'", ":", "video_name", ",", "'fps'", ":", "sample_fps", ",", "'offset'", ":", "offsetlist", ",", "'rgb_out'", ":", "out_rgb", ",", "'flow_out'", ":", "out_flow", "}", "\n", "results", ".", "append", "(", "output_video", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.compute_threshold": [[151, 167], ["result_dict.items", "numpy.sort", "len", "int", "all_scores.append"], "function", ["None"], ["", "def", "compute_threshold", "(", "result_dict", ")", ":", "\n", "    ", "all_scores", "=", "[", "]", "\n", "for", "vid", ",", "proposal_list", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "prop", "in", "proposal_list", ":", "\n", "            ", "if", "cfg", ".", "scoring", "==", "'uncertainty'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "\n", "", "elif", "cfg", ".", "scoring", "==", "'confidence'", ":", "\n", "                ", "ood_score", "=", "prop", "[", "'score'", "]", "\n", "", "elif", "cfg", ".", "scoring", "==", "'uncertainty_actionness'", ":", "\n", "                ", "ood_score", "=", "1", "-", "prop", "[", "'uncertainty'", "]", "*", "prop", "[", "'actionness'", "]", "\n", "", "all_scores", ".", "append", "(", "ood_score", ")", "\n", "", "", "score_sorted", "=", "np", ".", "sort", "(", "all_scores", ")", "# sort the confidence score in an increasing order", "\n", "N", "=", "len", "(", "all_scores", ")", "\n", "topK", "=", "N", "-", "int", "(", "N", "*", "0.95", ")", "\n", "threshold", "=", "score_sorted", "[", "topK", "-", "1", "]", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.post_process": [[169, 208], ["AFSD.common.thumos_dataset.get_class_index_map", "tqdm.tqdm", "AFSD.thumos14.BDNet.DirichletLayer", "torch.Softmax", "range", "range", "zip", "test.get_video_detections", "search_param.compute_threshold", "os.path.join", "os.makedirs", "os.path.join", "len", "test.parse_output", "test.decode_predictions", "dict", "open", "json.dump", "range", "test.filtering", "output[].append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.compute_threshold", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.parse_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.decode_predictions", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "post_process", "(", "inference_result", ",", "param", "=", "0.5", ",", "phase", "=", "'train'", ")", ":", "\n", "    ", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "class_range", "=", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", "if", "not", "cfg", ".", "os_head", "else", "range", "(", "0", ",", "cfg", ".", "num_classes", ")", "\n", "_", ",", "idx_to_class", "=", "get_class_index_map", "(", "cfg", ".", "cls_idx_known", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "for", "out", "in", "tqdm", ".", "tqdm", "(", "inference_result", ",", "total", "=", "len", "(", "inference_result", ")", ",", "desc", "=", "f'{phase} phase with param={param}'", ")", ":", "\n", "        ", "video_name", "=", "out", "[", "'name'", "]", "\n", "sample_fps", "=", "out", "[", "'fps'", "]", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "# post-processing", "\n", "for", "(", "out_rgb", ",", "out_flow", ",", "offset", ")", "in", "zip", "(", "out", "[", "'rgb_out'", "]", ",", "out", "[", "'flow_out'", "]", ",", "out", "[", "'offset'", "]", ")", ":", "\n", "# out_rgb, out_flow = to_tensor(out_rgb), to_tensor(out_flow)", "\n", "            ", "loc", ",", "conf", ",", "prop_loc", ",", "prop_conf", ",", "center", ",", "priors", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", "=", "parse_output", "(", "out_rgb", ",", "out_flow", ",", "fusion", "=", "cfg", ".", "fusion", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "decoded_segments", ",", "conf_scores", ",", "uncertainty", ",", "actionness", "=", "decode_predictions", "(", "loc", ",", "prop_loc", ",", "priors", ",", "conf", ",", "prop_conf", ",", "unct", ",", "prop_unct", ",", "act", ",", "prop_act", ",", "center", ",", "offset", ",", "sample_fps", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "num_classes", ",", "score_func", "=", "out_layer", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "\n", "# filtering out clip-level predictions with low confidence", "\n", "for", "cl", "in", "class_range", ":", "# from 1 to K+1 by default, or 0 to K for os_head", "\n", "                ", "segments", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "uncertainty", ",", "actionness", ",", "cfg", ".", "conf_thresh", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ")", "# (N,5)", "\n", "if", "segments", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "cl", "]", ".", "append", "(", "segments", ")", "\n", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "]", "=", "get_video_detections", "(", "output", ",", "idx_to_class", ",", "cfg", ".", "num_classes", ",", "cfg", ".", "top_k", ",", "cfg", ".", "nms_sigma", ",", "use_edl", "=", "cfg", ".", "use_edl", ",", "os_head", "=", "cfg", ".", "os_head", ",", "cls_rng", "=", "class_range", ")", "\n", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "# get the score threshold", "\n", "        ", "threshold", "=", "compute_threshold", "(", "result_dict", ")", "\n", "return", "threshold", "\n", "", "else", ":", "\n", "# temporarily save the results for later evaluation", "\n", "        ", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output_path", ",", "'temp'", ")", "\n", "os", ".", "makedirs", "(", "temp_dir", ",", "exist_ok", "=", "True", ")", "\n", "pred_file", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "f'thumos14_open_rgb-{param}.json'", ")", "\n", "with", "open", "(", "pred_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "output_dict", ",", "f", ")", "\n", "", "return", "pred_file", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.search_job": [[210, 234], ["search_param.post_process", "AFSD.evaluation.eval_detection.ANETdetection", "AFSD.evaluation.eval_detection.ANETdetection.evaluate", "print"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.search_param.post_process", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.eval_detection.ANETdetection.evaluate"], ["", "", "def", "search_job", "(", "output_train", ",", "output_test", ",", "param", ")", ":", "\n", "# # get the threshold from trainset inference results", "\n", "# ood_thresh = post_process(output_train, param=param, phase='train')", "\n", "    ", "ood_thresh", "=", "param", "\n", "\n", "# get the post process results for evaluation", "\n", "pred_file", "=", "post_process", "(", "output_test", ",", "param", "=", "param", ",", "phase", "=", "'test'", ")", "\n", "\n", "# evaluate on test set", "\n", "tious", "=", "[", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", "]", "\n", "anet_detection", "=", "ANETdetection", "(", "\n", "ground_truth_filename", "=", "gt_file", ",", "\n", "prediction_filename", "=", "pred_file", ",", "\n", "cls_idx_detection", "=", "cfg", ".", "cls_idx_known", ",", "\n", "subset", "=", "'test'", ",", "\n", "openset", "=", "cfg", ".", "open_set", ",", "\n", "ood_threshold", "=", "ood_thresh", ",", "\n", "ood_scoring", "=", "cfg", ".", "scoring", ",", "\n", "tiou_thresholds", "=", "tious", ",", "\n", "verbose", "=", "False", ")", "\n", "mAPs", ",", "average_mAP", ",", "ap", "=", "anet_detection", ".", "evaluate", "(", "type", "=", "'AP'", ")", "\n", "\n", "print", "(", "f'Param: {param:.3f}, OOD threshold: {ood_thresh:.6f}, Average mAP: {average_mAP*100:.3f}%'", ")", "\n", "return", "ood_thresh", ",", "average_mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.get_path": [[16, 24], ["os.path.lexists", "os.path.join", "os.path.islink", "os.path.realpath", "fullpath.split", "os.path.dirname"], "function", ["None"], ["def", "get_path", "(", "input_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "input_path", ")", ":", "\n", "        ", "fullpath", "=", "os", ".", "path", ".", "realpath", "(", "input_path", ")", "if", "os", ".", "path", ".", "islink", "(", "input_path", ")", "else", "input_path", "\n", "real_name", "=", "fullpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "real_full_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "input_path", ")", ",", "real_name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "", "return", "real_full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.get_anet_offsets": [[26, 34], ["list", "range"], "function", ["None"], ["", "def", "get_anet_offsets", "(", "sample_count", ",", "clip_length", ",", "stride", ")", ":", "\n", "    ", "if", "sample_count", "<", "clip_length", ":", "\n", "        ", "offsetlist", "=", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "offsetlist", "=", "list", "(", "range", "(", "0", ",", "sample_count", "-", "clip_length", "+", "1", ",", "stride", ")", ")", "\n", "if", "(", "sample_count", "-", "clip_length", ")", "%", "stride", ":", "\n", "            ", "offsetlist", "+=", "[", "sample_count", "-", "clip_length", "]", "\n", "", "", "return", "offsetlist", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data": [[36, 42], ["numpy.load", "numpy.transpose", "centor_crop", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "prepare_data", "(", "data_path", ",", "video_name", ",", "centor_crop", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "data", "=", "np", ".", "transpose", "(", "data", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data", "=", "centor_crop", "(", "data", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "data", ")", ".", "cuda", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip": [[44, 54], ["torch.cat.float", "torch.cat.unsqueeze", "torch.cat.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "prepare_clip", "(", "data", ",", "offset", ",", "clip_length", ")", ":", "\n", "    ", "clip", "=", "data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "clip", "=", "clip", ".", "float", "(", ")", "\n", "clip", "=", "(", "clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "if", "clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "        ", "tmp", "=", "torch", ".", "zeros", "(", "[", "clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "clip", ".", "size", "(", "1", ")", ",", "\n", "96", ",", "96", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "clip", "=", "torch", ".", "cat", "(", "[", "clip", ",", "tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", "\n", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_anet_clip": [[57, 67], ["torch.cat.float", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float().cuda", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones", "torch.ones", "torch.ones", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "prepare_anet_clip", "(", "data", ",", "offset", ",", "clip_length", ",", "crop_size", ")", ":", "\n", "    ", "clip", "=", "data", "[", ":", ",", "offset", ":", "offset", "+", "clip_length", "]", "\n", "clip", "=", "clip", ".", "float", "(", ")", "\n", "if", "clip", ".", "size", "(", "1", ")", "<", "clip_length", ":", "\n", "        ", "tmp", "=", "torch", ".", "ones", "(", "\n", "[", "clip", ".", "size", "(", "0", ")", ",", "clip_length", "-", "clip", ".", "size", "(", "1", ")", ",", "crop_size", ",", "crop_size", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "*", "127.5", "\n", "clip", "=", "torch", ".", "cat", "(", "[", "clip", ",", "tmp", "]", ",", "dim", "=", "1", ")", "\n", "", "clip", "=", "clip", ".", "unsqueeze", "(", "0", ")", "\n", "clip", "=", "(", "clip", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "return", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.test": [[69, 115], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "torch.load", "torch.load", "torch.load", "list", "test_openmax.get_offsets", "test_openmax_cross_data.prepare_data", "test_openmax.get_video_detections", "dict", "open", "json.dump", "AFSD.thumos14.BDNet.BDNet.eval", "cfg.video_info_test.keys", "test_openmax_cross_data.prepare_clip", "output_dict_all.append", "test_openmax.decode_output", "range", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "AFSD.thumos14.BDNet.BDNet.", "test_openmax.filtering", "[].append", "[].append", "[].append", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.decode_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "def", "test", "(", "cfg", ",", "output_file", ")", ":", "\n", "# prepare model", "\n", "    ", "net", "=", "BDNet", "(", "in_channels", "=", "cfg", ".", "input_channels", ",", "training", "=", "False", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfg", ".", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "cfg", ".", "crop_size", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "for", "video_name", "in", "tqdm", "(", "list", "(", "cfg", ".", "video_info_test", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ")", ":", "\n", "# get the clip offsets", "\n", "        ", "offsetlist", "=", "get_offsets", "(", "cfg", ".", "video_info_test", ",", "video_name", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "stride", ")", "\n", "sample_fps", "=", "cfg", ".", "video_info_test", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "cfg", ".", "video_data_test", ",", "video_name", ",", "center_crop", ")", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "\n", "output_dict_all", "=", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ",", "get_feat", "=", "True", ")", "\n", "", "output_dict_all", ".", "append", "(", "(", "output_dict", ",", "offset", ")", ")", "\n", "\n", "# post-processing", "\n", "", "output", "=", "{", "'seg'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", ",", "\n", "'feat'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", ",", "\n", "'prop_feat'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "cfg", ".", "num_classes", ")", "]", "}", "\n", "for", "(", "output_dict", ",", "offset", ")", "in", "output_dict_all", ":", "\n", "# decode the outputs (late fusion)", "\n", "            ", "decoded_segments", ",", "conf_scores", ",", "_", ",", "_", "=", "decode_output", "(", "output_dict", ",", "offset", ",", "sample_fps", ",", "cfg", ",", "get_feat", "=", "True", ")", "\n", "# filtering out clip-level predictions with low confidence", "\n", "for", "cl", "in", "range", "(", "1", ",", "cfg", ".", "num_classes", ")", ":", "# from 1 to K+1 by default", "\n", "                ", "out", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "cfg", ".", "conf_thresh", ")", "\n", "if", "out", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "'seg'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'seg'", "]", ")", "\n", "output", "[", "'feat'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'feat'", "]", ")", "\n", "output", "[", "'prop_feat'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'prop_feat'", "]", ")", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "]", "=", "get_video_detections", "(", "output", ",", "cfg", ")", "\n", "\n", "", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.test_anet": [[117, 173], ["list", "list", "AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "anet_cfg.video_infos.keys", "torch.load", "torch.load", "torch.load", "enumerate", "test_openmax_cross_data.get_anet_offsets", "test_openmax_cross_data.prepare_data", "test_openmax.get_video_detections", "dict", "open", "json.dump", "os.listdir", "set", "set", "AFSD.thumos14.BDNet.BDNet.eval", "len", "test_openmax_cross_data.prepare_anet_clip", "output_dict_all.append", "test_openmax.decode_output", "range", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "AFSD.thumos14.BDNet.BDNet.", "test_openmax.filtering", "[].append", "[].append", "[].append", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.get_anet_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_video_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_anet_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax.decode_output", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.filtering"], ["", "", "def", "test_anet", "(", "thumos_cfg", ",", "anet_cfg", ",", "anet_resfile", ")", ":", "\n", "\n", "    ", "video_list", "=", "list", "(", "anet_cfg", ".", "video_infos", ".", "keys", "(", ")", ")", "\n", "videos_in_disk", "=", "[", "filename", "[", ":", "-", "4", "]", "for", "filename", "in", "os", ".", "listdir", "(", "anet_cfg", ".", "mp4_data_path", ")", "]", "\n", "video_list", "=", "list", "(", "set", "(", "video_list", ")", "&", "set", "(", "videos_in_disk", ")", ")", "\n", "\n", "# prepare model", "\n", "net", "=", "BDNet", "(", "in_channels", "=", "thumos_cfg", ".", "input_channels", ",", "training", "=", "False", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "thumos_cfg", ".", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "thumos_cfg", ".", "crop_size", ")", "\n", "\n", "result_dict", "=", "{", "}", "\n", "for", "vid", ",", "video_name", "in", "tqdm", "(", "enumerate", "(", "video_list", ")", ",", "total", "=", "len", "(", "video_list", ")", ",", "desc", "=", "'ANet Inference'", ")", ":", "\n", "# setup clip offsets", "\n", "        ", "sample_fps", "=", "anet_cfg", ".", "video_infos", "[", "video_name", "]", "[", "'fps'", "]", "\n", "duration", "=", "anet_cfg", ".", "video_infos", "[", "video_name", "]", "[", "'duration'", "]", "\n", "frame_count", "=", "anet_cfg", ".", "video_infos", "[", "video_name", "]", "[", "'frame_num'", "]", "\n", "offsetlist", "=", "get_anet_offsets", "(", "frame_count", ",", "thumos_cfg", ".", "clip_length", ",", "thumos_cfg", ".", "stride", ")", "\n", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "anet_cfg", ".", "mp4_data_path", ",", "video_name", ",", "center_crop", ")", "# (3, 768, 96, 96)", "\n", "\n", "output", "=", "[", "[", "]", "for", "cl", "in", "range", "(", "thumos_cfg", ".", "num_classes", ")", "]", "\n", "output_dict_all", "=", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_anet_clip", "(", "data", ",", "offset", ",", "thumos_cfg", ".", "clip_length", ",", "thumos_cfg", ".", "crop_size", ")", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ",", "get_feat", "=", "True", ")", "\n", "", "output_dict_all", ".", "append", "(", "(", "output_dict", ",", "offset", ")", ")", "\n", "\n", "# post-processing", "\n", "", "output", "=", "{", "'seg'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "thumos_cfg", ".", "num_classes", ")", "]", ",", "\n", "'feat'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "thumos_cfg", ".", "num_classes", ")", "]", ",", "\n", "'prop_feat'", ":", "[", "[", "]", "for", "cl", "in", "range", "(", "thumos_cfg", ".", "num_classes", ")", "]", "}", "\n", "for", "(", "output_dict", ",", "offset", ")", "in", "output_dict_all", ":", "\n", "# decode the outputs (late fusion)", "\n", "            ", "decoded_segments", ",", "conf_scores", ",", "_", ",", "_", "=", "decode_output", "(", "output_dict", ",", "offset", ",", "sample_fps", ",", "thumos_cfg", ",", "get_feat", "=", "True", ")", "\n", "# filtering out clip-level predictions with low confidence", "\n", "for", "cl", "in", "range", "(", "1", ",", "thumos_cfg", ".", "num_classes", ")", ":", "# from 1 to K+1 by default", "\n", "                ", "out", "=", "filtering", "(", "decoded_segments", ",", "conf_scores", "[", "cl", "]", ",", "thumos_cfg", ".", "conf_thresh", ")", "\n", "if", "out", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "output", "[", "'seg'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'seg'", "]", ")", "\n", "output", "[", "'feat'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'feat'", "]", ")", "\n", "output", "[", "'prop_feat'", "]", "[", "cl", "]", ".", "append", "(", "out", "[", "'prop_feat'", "]", ")", "\n", "# get final detection results for each video", "\n", "", "", "result_dict", "[", "video_name", "[", "2", ":", "]", "]", "=", "get_video_detections", "(", "output", ",", "thumos_cfg", ")", "\n", "\n", "", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "with", "open", "(", "anet_resfile", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "output_dict", ",", "out", ")", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.exclude_overlapping": [[175, 194], ["anet_out[].items", "open", "enumerate", "dict", "f.readlines", "excluded_classes.append", "line.strip"], "function", ["None"], ["", "def", "exclude_overlapping", "(", "anet_out", ",", "overlapping_class_file", ")", ":", "\n", "# read the overlapping class names", "\n", "    ", "excluded_classes", "=", "[", "]", "\n", "with", "open", "(", "overlapping_class_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "excluded_classes", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "# filtering out the videos that contain excluded classes", "\n", "", "", "result_dict", "=", "{", "}", "\n", "for", "video_name", ",", "preds", "in", "anet_out", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "        ", "video_info", "=", "anet_cfg", ".", "video_infos", "[", "'v_'", "+", "video_name", "]", "\n", "exclude", "=", "False", "\n", "for", "ann", "in", "video_info", "[", "'annotations'", "]", ":", "\n", "            ", "if", "ann", "[", "'label'", "]", "in", "excluded_classes", ":", "\n", "                ", "exclude", "=", "True", "\n", "break", "\n", "", "", "if", "not", "exclude", ":", "\n", "            ", "result_dict", "[", "video_name", "]", "=", "preds", "\n", "", "", "output_dict", "=", "{", "\"version\"", ":", "\"THUMOS14\"", ",", "\"results\"", ":", "dict", "(", "result_dict", ")", ",", "\"external_data\"", ":", "{", "}", "}", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.get_basic_config": [[196, 236], ["test_openmax_cross_data.get_path", "os.path.join", "AFSD.common.thumos_dataset.get_class_index_map", "AFSD.common.thumos_dataset.get_video_info", "AFSD.common.thumos_dataset.get_video_anno", "AFSD.common.thumos_dataset.get_video_info", "outpath.split", "os.path.dirname", "os.path.exists", "os.makedirs", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_video_anno", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info"], ["", "def", "get_basic_config", "(", "config", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "# testing data config", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", "\n", "# training data config", "\n", "cfg", ".", "clip_length_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "crop_size_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'crop_size'", "]", "\n", "cfg", ".", "overlap_thresh", "=", "config", "[", "'training'", "]", "[", "'piou'", "]", "\n", "\n", "cfg", ".", "input_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", "\n", "cfg", ".", "checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", ")", "\n", "cfg", ".", "feat_dim", "=", "512", "\n", "\n", "cfg", ".", "json_name", "=", "config", "[", "'testing'", "]", "[", "'output_json'", "]", "\n", "outpath", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "split_folder", "=", "outpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "cfg", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "outpath", ")", ")", ",", "config", "[", "'testing'", "]", "[", "'exp_tag'", "]", ",", "split_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "False", "\n", "\n", "_", ",", "cfg", ".", "idx_to_class", "=", "get_class_index_map", "(", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "# train data", "\n", "cfg", ".", "video_data_train", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_data_path'", "]", "\n", "cfg", ".", "video_info_train", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_info_path'", "]", ")", "\n", "cfg", ".", "video_anno_train", "=", "get_video_anno", "(", "cfg", ".", "video_info_train", ",", "\n", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_anno_path'", "]", ",", "\n", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "# test data", "\n", "cfg", ".", "video_data_test", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_data_path'", "]", "\n", "cfg", ".", "video_info_test", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_info_path'", "]", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.get_anet_cfg": [[238, 258], ["test_openmax_cross_data.get_anet_cfg.get_anet_video_info"], "function", ["None"], ["", "def", "get_anet_cfg", "(", ")", ":", "\n", "    ", "def", "get_anet_video_info", "(", "video_info_path", ",", "subset", "=", "'training'", ")", ":", "\n", "        ", "with", "open", "(", "video_info_path", ")", "as", "json_file", ":", "\n", "            ", "json_data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "video_info", "=", "{", "}", "\n", "video_list", "=", "list", "(", "json_data", ".", "keys", "(", ")", ")", "\n", "for", "video_name", "in", "video_list", ":", "\n", "            ", "tmp", "=", "json_data", "[", "video_name", "]", "\n", "if", "tmp", "[", "'subset'", "]", "==", "subset", ":", "\n", "                ", "video_info", "[", "video_name", "]", "=", "tmp", "\n", "", "", "return", "video_info", "\n", "\n", "", "class", "cfg", ":", "pass", "\n", "cfg", ".", "clip_length", "=", "768", "\n", "cfg", ".", "stride", "=", "768", "\n", "cfg", ".", "crop_size", "=", "96", "\n", "cfg", ".", "video_infos", "=", "get_anet_video_info", "(", "'datasets/activitynet/annotations/video_info_train_val.json'", ",", "subset", "=", "'validation'", ")", "\n", "cfg", ".", "mp4_data_path", "=", "'datasets/activitynet/train_val_npy_112'", "\n", "cfg", ".", "overlapping_class_file", "=", "'datasets/activitynet/overlapping_classes_in_thumos.txt'", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.FocalLoss_Ori.__init__": [[19, 43], ["torch.Module.__init__", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "isinstance", "len", "list", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "alpha", "=", "[", "0.25", ",", "0.75", "]", ",", "gamma", "=", "2", ",", "balance_index", "=", "-", "1", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss_Ori", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n", "if", "isinstance", "(", "self", ".", "alpha", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "alpha", ")", "==", "self", ".", "num_class", "\n", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "list", "(", "self", ".", "alpha", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "alpha", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "assert", "0", "<", "self", ".", "alpha", "<", "1.0", ",", "'alpha should be in `(0,1)`)'", "\n", "assert", "balance_index", ">", "-", "1", "\n", "alpha", "=", "torch", ".", "ones", "(", "(", "self", ".", "num_class", ")", ")", "\n", "alpha", "*=", "1", "-", "self", ".", "alpha", "\n", "alpha", "[", "balance_index", "]", "=", "self", ".", "alpha", "\n", "self", ".", "alpha", "=", "alpha", "\n", "", "elif", "isinstance", "(", "self", ".", "alpha", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "alpha", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Not support alpha type, expect `int|float|list|tuple|torch.Tensor`'", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.FocalLoss_Ori.forward": [[44, 79], ["target.view.view.view", "pt.log", "cls_loss.FocalLoss_Ori.alpha.gather", "logit.view.view.dim", "logit.view.view.view", "logit.view.view.transpose().contiguous", "logit.view.view.view", "logit.view.view.gather().view", "cls_loss.FocalLoss_Ori.alpha.to", "target.view.view.view", "loss.sum.sum.mean", "loss.sum.sum.sum", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "logit.view.view.transpose", "logit.view.view.gather", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub"], "methods", ["None"], ["\n", "if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "            ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# [N,C,d1*d2..] -> [N,d1*d2..,C]", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "# [N,d1*d2..,C]-> [N*d1*d2..,C]", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "# [N,d1,d2,...]->[N*d1*d2*...,1]", "\n", "\n", "# -----------legacy way------------", "\n", "#  idx = target.cpu().long()", "\n", "# one_hot_key = torch.FloatTensor(target.size(0), self.num_class).zero_()", "\n", "# one_hot_key = one_hot_key.scatter_(1, idx, 1)", "\n", "# if one_hot_key.device != logit.device:", "\n", "#     one_hot_key = one_hot_key.to(logit.device)", "\n", "# pt = (one_hot_key * logit).sum(1) + epsilon", "\n", "\n", "# ----------memory saving way--------", "\n", "pt", "=", "logit", ".", "gather", "(", "1", ",", "target", ")", ".", "view", "(", "-", "1", ")", "+", "self", ".", "eps", "# avoid apply", "\n", "logpt", "=", "pt", ".", "log", "(", ")", "\n", "\n", "if", "self", ".", "alpha", ".", "device", "!=", "logpt", ".", "device", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "to", "(", "logpt", ".", "device", ")", "\n", "\n", "", "alpha_class", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "alpha_class", "*", "logpt", "\n", "loss", "=", "-", "1", "*", "torch", ".", "pow", "(", "torch", ".", "sub", "(", "1.0", ",", "pt", ")", ",", "self", ".", "gamma", ")", "*", "logpt", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n", "\n", "", "", "class", "EvidenceLoss", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.__init__": [[82, 118], ["torch.Module.__init__", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "float", "range", "float", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "loss_type", "=", "cfg", "[", "'loss_type'", "]", "\n", "self", ".", "evidence", "=", "cfg", "[", "'evidence'", "]", "\n", "self", ".", "iou_aware", "=", "cfg", "[", "'iou_aware'", "]", "if", "'iou_aware'", "in", "cfg", "else", "False", "\n", "self", ".", "with_ghm", "=", "cfg", "[", "'with_ghm'", "]", "if", "'with_ghm'", "in", "cfg", "else", "False", "\n", "self", ".", "with_ibm", "=", "cfg", "[", "'with_ibm'", "]", "if", "'with_ibm'", "in", "cfg", "else", "False", "\n", "self", ".", "eps", "=", "1e-10", "\n", "if", "self", ".", "with_ghm", ":", "\n", "            ", "self", ".", "num_bins", "=", "cfg", "[", "'num_bins'", "]", "\n", "self", ".", "momentum", "=", "cfg", "[", "'momentum'", "]", "\n", "self", ".", "ghm_start", "=", "cfg", "[", "'ghm_start'", "]", "if", "'ghm_start'", "in", "cfg", "else", "0", "\n", "self", ".", "edges", "=", "[", "float", "(", "x", ")", "/", "self", ".", "num_bins", "for", "x", "in", "range", "(", "self", ".", "num_bins", "+", "1", ")", "]", "\n", "self", ".", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "self", ".", "momentum", ">", "0", ":", "\n", "                ", "self", ".", "acc_sum", "=", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "num_bins", ")", "]", "\n", "", "", "if", "self", ".", "with_ibm", ":", "\n", "            ", "self", ".", "ibm_start", "=", "cfg", "[", "'ibm_start'", "]", "if", "'ibm_start'", "in", "cfg", "else", "0", "\n", "self", ".", "coeff", "=", "cfg", "[", "'ibm_coeff'", "]", "if", "'ibm_coeff'", "in", "cfg", "else", "10", "\n", "", "self", ".", "epoch", ",", "self", ".", "total_epoch", "=", "0", ",", "25", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n", "\n", "", "def", "iou_calib", "(", "self", ",", "logits", ",", "ious", ",", "mean", "=", "False", ")", ":", "\n", "        ", "\"\"\" logit, shape=(N, K)\n            ious, shape=(N)\n        \"\"\"", "\n", "ious", "[", "ious", "<", "0", "]", "=", "1e-3", "\n", "pred_alpha", "=", "self", ".", "evidence_func", "(", "logits", ")", "+", "1", "# (alpha = e + 1)", "\n", "uncertainty", "=", "self", ".", "num_cls", "/", "pred_alpha", ".", "sum", "(", "dim", "=", "-", "1", ")", "# (N,)", "\n", "iou_reg", "=", "-", "ious", "*", "torch", ".", "log", "(", "1", "-", "uncertainty", ")", "-", "(", "1", "-", "ious", ")", "*", "torch", ".", "log", "(", "uncertainty", ")", "\n", "iou_reg", "=", "torch", ".", "mean", "(", "iou_reg", ")", "if", "mean", "else", "torch", ".", "sum", "(", "iou_reg", ")", "\n", "return", "iou_reg", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.iou_calib": [[120, 130], ["cls_loss.EvidenceLoss.evidence_func", "pred_alpha.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], ["if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "            ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# [N,C,d1*d2..] -> [N,d1*d2..,C]", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "# [N,d1*d2..,C]-> [N*d1*d2..,C]", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ")", "# [N,d1,d2,...]->[N*d1*d2*...,]", "\n", "\n", "out_dict", "=", "dict", "(", ")", "\n", "\n", "# one-hot embedding for the target", "\n", "y", "=", "torch", ".", "eye", "(", "self", ".", "num_cls", ")", ".", "to", "(", "logit", ".", "device", ",", "non_blocking", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.forward": [[132, 169], ["target.view.view.view", "dict", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "cls_loss.EvidenceLoss.get_loss_func", "loss", "dict.update", "loss.items", "dict.update", "logit.view.view.dim", "logit.view.view.view", "logit.view.view.transpose().contiguous", "logit.view.view.view", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "torch.sum().reshape", "cls_loss.EvidenceLoss.evidence_func", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "logit.view.view.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.get_loss_func", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], ["\n", "# get loss func", "\n", "loss", ",", "func", "=", "self", ".", "get_loss_func", "(", ")", "\n", "\n", "# L_1 norm of feature", "\n", "feat_norm", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "logit", ")", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "if", "self", ".", "with_ibm", "else", "None", "\n", "\n", "# compute losses", "\n", "pred_alpha", "=", "self", ".", "evidence_func", "(", "logit", ")", "+", "1", "# (alpha = e + 1)", "\n", "loss_out", "=", "loss", "(", "y", ",", "pred_alpha", ",", "func", "=", "func", ",", "target", "=", "target", ",", "feat_norm", "=", "feat_norm", ")", "\n", "out_dict", ".", "update", "(", "loss_out", ")", "\n", "\n", "# accumulate total loss", "\n", "total_loss", "=", "0", "\n", "for", "k", ",", "v", "in", "loss_out", ".", "items", "(", ")", ":", "\n", "            ", "if", "'loss'", "in", "k", ":", "\n", "                ", "total_loss", "+=", "v", "\n", "", "", "out_dict", ".", "update", "(", "{", "'total_loss'", ":", "total_loss", "}", ")", "\n", "return", "total_loss", "\n", "\n", "\n", "", "def", "get_loss_func", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "loss_type", "==", "'mse'", ":", "\n", "            ", "return", "self", ".", "mse_loss", ",", "None", "\n", "", "elif", "self", ".", "loss_type", "==", "'log'", ":", "\n", "            ", "return", "self", ".", "edl_loss", ",", "torch", ".", "log", "\n", "", "elif", "self", ".", "loss_type", "==", "'digamma'", ":", "\n", "            ", "return", "self", ".", "edl_loss", ",", "torch", ".", "digamma", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "def", "evidence_func", "(", "self", ",", "logit", ")", ":", "\n", "        ", "if", "self", ".", "evidence", "==", "'relu'", ":", "\n", "            ", "return", "F", ".", "relu", "(", "logit", ")", "\n", "\n", "", "if", "self", ".", "evidence", "==", "'exp'", ":", "\n", "            ", "return", "torch", ".", "exp", "(", "torch", ".", "clamp", "(", "logit", ",", "-", "10", ",", "10", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.get_loss_func": [[171, 180], ["None"], "methods", ["None"], ["", "if", "self", ".", "evidence", "==", "'softplus'", ":", "\n", "            ", "return", "F", ".", "softplus", "(", "logit", ")", "\n", "\n", "\n", "", "", "def", "mse_loss", "(", "self", ",", "y", ",", "alpha", ",", "func", "=", "None", ",", "target", "=", "None", ",", "feat_norm", "=", "None", ")", ":", "\n", "        ", "\"\"\"Used only for loss_type == 'mse'\n        y: the one-hot labels (batchsize, num_classes)\n        alpha: the predictions (batchsize, num_classes)\n        annealing_coef: dependent on training epoch\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.evidence_func": [[182, 191], ["torch.relu", "torch.relu", "torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.softplus", "torch.softplus", "torch.softplus", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["# compute loss by considering the temporal penalty", "\n", "loglikelihood_err", ",", "loglikelihood_var", "=", "self", ".", "loglikelihood_loss", "(", "y", ",", "alpha", ")", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loglikelihood_err", "=", "torch", ".", "mean", "(", "loglikelihood_err", ")", "\n", "loglikelihood_var", "=", "torch", ".", "mean", "(", "loglikelihood_var", ")", "\n", "", "else", ":", "\n", "            ", "loglikelihood_err", "=", "torch", ".", "sum", "(", "loglikelihood_err", ")", "\n", "loglikelihood_var", "=", "torch", ".", "sum", "(", "loglikelihood_var", ")", "\n", "", "losses", ".", "update", "(", "{", "'cls_loss'", ":", "loglikelihood_err", ",", "'var_loss'", ":", "loglikelihood_var", "}", ")", "\n", "return", "losses", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.mse_loss": [[193, 210], ["cls_loss.EvidenceLoss.loglikelihood_loss", "losses.update", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.loglikelihood_loss"], ["\n", "", "def", "edl_loss", "(", "self", ",", "y", ",", "alpha", ",", "func", "=", "torch", ".", "log", ",", "target", "=", "None", ",", "feat_norm", "=", "None", ")", ":", "\n", "        ", "\"\"\"Used for both loss_type == 'log' and loss_type == 'digamma'\n        y: the one-hot labels (batchsize, num_classes)\n        alpha: the predictions (batchsize, num_classes)\n        annealing_coef: dependent on training epoch\n        func: function handler (torch.log, or torch.digamma)\n        \"\"\"", "\n", "losses", "=", "{", "}", "\n", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# (B, 1)", "\n", "if", "self", ".", "with_ghm", "and", "self", ".", "epoch", ">=", "self", ".", "ghm_start", ":", "\n", "            ", "alpha_pred", "=", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "# (N, K)", "\n", "uncertainty", "=", "self", ".", "num_cls", "/", "alpha_pred", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# (N, 1)", "\n", "# gradient length", "\n", "grad_norm", "=", "torch", ".", "abs", "(", "1", "/", "alpha_pred", "-", "uncertainty", ")", "*", "y", "# y_ij * (1/alpha_ij - u_i)", "\n", "n", "=", "0", "# n valid bins", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "alpha", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_bins", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.edl_loss": [[212, 279], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.update", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum.EvidenceLoss.alpha.gather", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.EvidenceLoss.alpha.to", "target.view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "alpha.detach().clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "alpha.detach().clone.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "inds.sum().item", "alpha.detach().clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "weight.unsqueeze", "func", "func", "alpha.detach", "alpha.detach().clone.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "alpha.detach().clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "inds.sum", "func", "func", "alpha.detach", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "feat_norm.detach", "alpha.detach().clone.sum", "feat_norm.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "alpha.detach", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "inds.sum().item", "func", "func", "func", "func", "inds.sum", "grad_hat[].mean", "func", "func"], "methods", ["None"], ["num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                    ", "if", "self", ".", "momentum", ">", "0", ":", "\n", "                        ", "self", ".", "acc_sum", "[", "i", "]", "=", "self", ".", "momentum", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "1.0", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                        ", "weights", "[", "inds", "]", "=", "1.0", "/", "num_in_bin", "\n", "", "n", "+=", "1", "\n", "", "", "if", "n", ">", "0", ":", "\n", "                ", "weights", "=", "weights", "/", "n", "\n", "# compute the weighted EDL loss", "\n", "", "cls_loss", "=", "torch", ".", "sum", "(", "y", "*", "weights", "*", "(", "func", "(", "S", ")", "-", "func", "(", "alpha", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "with_ibm", "and", "self", ".", "epoch", ">=", "self", ".", "ibm_start", ":", "\n", "            ", "alpha_pred", "=", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "# (N, K)", "\n", "uncertainty", "=", "self", ".", "num_cls", "/", "alpha_pred", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# (N, 1)", "\n", "grad_norm", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "1", "/", "alpha_pred", "-", "uncertainty", ")", "*", "y", ",", "dim", "=", "1", ")", "# sum_j|y_ij * (1/alpha_ij - u_i)|, (N)", "\n", "weights", "=", "1.0", "/", "(", "feat_norm", "*", "torch", ".", "exp", "(", "self", ".", "coeff", "*", "grad_norm", ")", "+", "self", ".", "eps", ")", "# influence-balanced weight", "\n", "# compute the weighted EDL loss", "\n", "cls_loss", "=", "weights", "*", "torch", ".", "sum", "(", "y", "*", "(", "func", "(", "S", ")", "-", "func", "(", "alpha", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "cls_loss", "=", "torch", ".", "sum", "(", "y", "*", "(", "func", "(", "S", ")", "-", "func", "(", "alpha", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "size_average", ":", "\n", "            ", "cls_loss", "=", "torch", ".", "mean", "(", "cls_loss", ")", "\n", "", "else", ":", "\n", "            ", "cls_loss", "=", "torch", ".", "sum", "(", "cls_loss", ")", "\n", "", "losses", ".", "update", "(", "{", "'cls_loss'", ":", "cls_loss", "}", ")", "\n", "return", "losses", "\n", "\n", "\n", "", "def", "loglikelihood_loss", "(", "self", ",", "y", ",", "alpha", ")", ":", "\n", "        ", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "loglikelihood_err", "=", "torch", ".", "sum", "(", "(", "y", "-", "(", "alpha", "/", "S", ")", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "loglikelihood_var", "=", "torch", ".", "sum", "(", "alpha", "*", "(", "S", "-", "alpha", ")", "/", "(", "S", "*", "S", "*", "(", "S", "+", "1", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "loglikelihood_err", ",", "loglikelihood_var", "\n", "\n", "\n", "", "", "class", "ActionnessLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "size_average", "=", "False", ",", "weight", "=", "0.1", ",", "margin", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ActionnessLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "margin", "=", "margin", "\n", "\n", "", "def", "forward", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "\"\"\" logit, shape=(N, 1), unbounded logits\n            target, shape=(N, 1) bianry values\n        \"\"\"", "\n", "if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "            ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# [N,C,d1*d2..] -> [N,d1*d2..,C]", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "# [N,d1*d2..,C]-> [N*d1*d2..,C]", "\n", "", "label", "=", "target", ".", "view", "(", "-", "1", ")", "# [N,d1,d2,...]->[N*d1*d2*...,]", "\n", "pred", "=", "logit", ".", "view", "(", "-", "1", ")", "if", "logit", ".", "size", "(", "-", "1", ")", "==", "1", "else", "logit", "\n", "\n", "# split the predictions into positive and negative setss", "\n", "pos_pred", ",", "pos_label", "=", "pred", "[", "label", ">", "0", "]", ",", "label", "[", "label", ">", "0", "]", "\n", "neg_pred", ",", "neg_label", "=", "pred", "[", "label", "==", "0", "]", ",", "label", "[", "label", "==", "0", "]", "\n", "\n", "num_pos", "=", "pos_pred", ".", "numel", "(", ")", "\n", "num_neg", "=", "neg_pred", ".", "numel", "(", ")", "\n", "topM", "=", "min", "(", "num_pos", ",", "num_neg", ")", "-", "1", "# reserve one for rank loss", "\n", "if", "topM", ">", "0", ":", "# both pos and neg sets have at least 2 samples", "\n", "            ", "_", ",", "inds", "=", "neg_pred", ".", "sort", "(", ")", "# by default, it is ascending sort", "\n", "# select the top-M negatives", "\n", "neg_clean_pred", "=", "neg_pred", "[", "inds", "[", ":", "topM", "]", "]", "\n", "neg_clean_label", "=", "neg_label", "[", "inds", "[", ":", "topM", "]", "]", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.loglikelihood_loss": [[281, 286], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["label", "=", "torch", ".", "cat", "(", "(", "pos_label", ",", "neg_clean_label", ")", ",", "dim", "=", "0", ")", "\n", "num_neg", "=", "topM", "\n", "\n", "# compute BCE loss", "\n", "", "reduction", "=", "'mean'", "if", "self", ".", "size_average", "else", "'sum'", "\n", "loss_bce", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pred", ",", "label", ",", "reduction", "=", "reduction", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.ActionnessLoss.__init__": [[289, 298], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["loss_rank", "=", "0", "\n", "if", "topM", ">", "0", ":", "\n", "            ", "neg_noisy_pred", ",", "_", "=", "torch", ".", "max", "(", "neg_pred", ",", "dim", "=", "0", ")", "\n", "pos_clean_pred", ",", "_", "=", "torch", ".", "max", "(", "pos_pred", ",", "dim", "=", "0", ")", "\n", "loss_rank", "=", "torch", ".", "maximum", "(", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "pred", ".", "device", ")", ",", "self", ".", "margin", "-", "neg_noisy_pred", "+", "pos_clean_pred", ".", "detach", "(", ")", ")", "\n", "\n", "", "loss_total", "=", "loss_bce", "+", "self", ".", "weight", "*", "loss_rank", "\n", "return", "loss_total", ",", "num_pos", "+", "num_neg", "", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.ActionnessLoss.forward": [[299, 340], ["target.view", "pos_pred.numel", "neg_pred.numel", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "logit.view.view.dim", "logit.view.view.view", "logit.view.view.transpose().contiguous", "logit.view.view.view", "logit.view.view.view", "min", "neg_pred.sort", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "logit.view.view.size", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "logit.view.view.transpose", "pos_clean_pred.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.RPLoss.__init__": [[343, 353], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "cls_loss.RPLoss.radius.data.fill_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.RPLoss.forward": [[355, 379], ["targets.view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "cls_loss.RPLoss.radius.to().tile", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "_dis.size", "cls_loss.RPLoss.radius.to"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.mse_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.mse_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.mse_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.mse_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.mse_loss", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.cls_loss.EvidenceLoss.mse_loss"], []], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.config.get_config": [[5, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "float", "float", "open", "f.read", "yaml.load", "int", "float", "float", "int", "[].format", "[].format", "[].format", "[].format", "[].format", "[].format", "video_info_path.format", "video_info_path.format"], "function", ["None"], ["def", "get_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'config_file'", ",", "type", "=", "str", ",", "\n", "default", "=", "'configs/default.yaml'", ",", "nargs", "=", "'?'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--focal_loss'", ",", "type", "=", "bool", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--nms_thresh'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--nms_sigma'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--top_k'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--output_json'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lw'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--cw'", ",", "type", "=", "float", ",", "default", "=", "10.0", ")", "\n", "parser", ".", "add_argument", "(", "'--ctw'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--actw'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--ssl'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--piou'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--ngpu'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--fusion'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--open_set'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--ood_scoring'", ",", "type", "=", "str", ",", "default", "=", "'confidence'", ",", "choices", "=", "[", "'uncertainty'", ",", "'confidence'", ",", "'uncertainty_actionness'", ",", "'a_by_inv_u'", ",", "'u_by_inv_a'", ",", "'half_au'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_tag'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "config_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "tmp", "=", "f", ".", "read", "(", ")", "\n", "data", "=", "yaml", ".", "load", "(", "tmp", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "data", "[", "'training'", "]", "[", "'learning_rate'", "]", "=", "float", "(", "data", "[", "'training'", "]", "[", "'learning_rate'", "]", ")", "\n", "data", "[", "'training'", "]", "[", "'weight_decay'", "]", "=", "float", "(", "data", "[", "'training'", "]", "[", "'weight_decay'", "]", ")", "\n", "\n", "if", "args", ".", "batch_size", "is", "not", "None", ":", "\n", "        ", "data", "[", "'training'", "]", "[", "'batch_size'", "]", "=", "int", "(", "args", ".", "batch_size", ")", "\n", "", "if", "args", ".", "learning_rate", "is", "not", "None", ":", "\n", "        ", "data", "[", "'training'", "]", "[", "'learning_rate'", "]", "=", "float", "(", "args", ".", "learning_rate", ")", "\n", "", "if", "args", ".", "weight_decay", "is", "not", "None", ":", "\n", "        ", "data", "[", "'training'", "]", "[", "'weight_decay'", "]", "=", "float", "(", "args", ".", "weight_decay", ")", "\n", "", "if", "args", ".", "max_epoch", "is", "not", "None", ":", "\n", "        ", "data", "[", "'training'", "]", "[", "'max_epoch'", "]", "=", "int", "(", "args", ".", "max_epoch", ")", "\n", "", "if", "args", ".", "checkpoint_path", "is", "not", "None", ":", "\n", "        ", "data", "[", "'training'", "]", "[", "'checkpoint_path'", "]", "=", "args", ".", "checkpoint_path", "\n", "data", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", "=", "args", ".", "checkpoint_path", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "data", "[", "'training'", "]", "[", "'random_seed'", "]", "=", "args", ".", "seed", "\n", "", "if", "args", ".", "focal_loss", "is", "not", "None", ":", "\n", "        ", "data", "[", "'training'", "]", "[", "'focal_loss'", "]", "=", "args", ".", "focal_loss", "\n", "", "data", "[", "'training'", "]", "[", "'lw'", "]", "=", "args", ".", "lw", "\n", "data", "[", "'training'", "]", "[", "'cw'", "]", "=", "args", ".", "cw", "\n", "data", "[", "'training'", "]", "[", "'ctw'", "]", "=", "args", ".", "ctw", "\n", "data", "[", "'training'", "]", "[", "'actw'", "]", "=", "args", ".", "actw", "\n", "data", "[", "'training'", "]", "[", "'ssl'", "]", "=", "args", ".", "ssl", "\n", "data", "[", "'training'", "]", "[", "'piou'", "]", "=", "args", ".", "piou", "\n", "data", "[", "'training'", "]", "[", "'resume'", "]", "=", "args", ".", "resume", "\n", "data", "[", "'ngpu'", "]", "=", "args", ".", "ngpu", "\n", "data", "[", "'testing'", "]", "[", "'fusion'", "]", "=", "args", ".", "fusion", "\n", "data", "[", "'testing'", "]", "[", "'split'", "]", "=", "args", ".", "split", "\n", "data", "[", "'testing'", "]", "[", "'ood_scoring'", "]", "=", "args", ".", "ood_scoring", "\n", "if", "args", ".", "nms_thresh", "is", "not", "None", ":", "\n", "        ", "data", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "=", "args", ".", "nms_thresh", "\n", "", "if", "args", ".", "nms_sigma", "is", "not", "None", ":", "\n", "        ", "data", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "=", "args", ".", "nms_sigma", "\n", "", "if", "args", ".", "top_k", "is", "not", "None", ":", "\n", "        ", "data", "[", "'testing'", "]", "[", "'top_k'", "]", "=", "args", ".", "top_k", "\n", "", "if", "args", ".", "output_json", "is", "not", "None", ":", "\n", "        ", "data", "[", "'testing'", "]", "[", "'output_json'", "]", "=", "args", ".", "output_json", "\n", "", "if", "args", ".", "exp_tag", "is", "not", "None", ":", "\n", "        ", "data", "[", "'testing'", "]", "[", "'exp_tag'", "]", "=", "args", ".", "exp_tag", "\n", "\n", "", "data", "[", "'open_set'", "]", "=", "args", ".", "open_set", "\n", "if", "args", ".", "open_set", ":", "\n", "        ", "data", "[", "'dataset'", "]", "[", "'class_info_path'", "]", "=", "data", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ".", "format", "(", "id", "=", "args", ".", "split", ")", "\n", "data", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_anno_path'", "]", "=", "data", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_anno_path'", "]", ".", "format", "(", "id", "=", "args", ".", "split", ")", "\n", "data", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_anno_path'", "]", "=", "data", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_anno_path'", "]", ".", "format", "(", "id", "=", "args", ".", "split", ")", "\n", "data", "[", "'training'", "]", "[", "'checkpoint_path'", "]", "=", "data", "[", "'training'", "]", "[", "'checkpoint_path'", "]", ".", "format", "(", "id", "=", "args", ".", "split", ")", "\n", "data", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", "=", "data", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", ".", "format", "(", "id", "=", "args", ".", "split", ")", "\n", "data", "[", "'testing'", "]", "[", "'output_path'", "]", "=", "data", "[", "'testing'", "]", "[", "'output_path'", "]", ".", "format", "(", "id", "=", "args", ".", "split", ")", "\n", "video_info_path", "=", "data", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_info_path'", "]", "\n", "data", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_info_path'", "]", "=", "video_info_path", ".", "format", "(", "id", "=", "args", ".", "split", ")", "if", "'split_'", "in", "video_info_path", "else", "video_info_path", "\n", "video_info_path", "=", "data", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_info_path'", "]", "\n", "data", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'video_info_path'", "]", "=", "video_info_path", ".", "format", "(", "id", "=", "args", ".", "split", ")", "if", "'split_'", "in", "video_info_path", "else", "video_info_path", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.center_form": [[5, 9], ["torch.cat"], "function", ["None"], ["def", "center_form", "(", "segments", ")", ":", "\n", "    ", "\"\"\" convert (left, right) to (center, width) \"\"\"", "\n", "return", "torch", ".", "cat", "(", "[", "(", "segments", "[", ":", ",", ":", "1", "]", "-", "segments", "[", ":", ",", "1", ":", "]", ")", "/", "2.0", ",", "\n", "segments", "[", ":", ",", "1", ":", "]", "-", "segments", "[", ":", ",", ":", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.point_form": [[11, 15], ["torch.cat"], "function", ["None"], ["", "def", "point_form", "(", "segments", ")", ":", "\n", "    ", "\"\"\" convert (centor, width) to (left, right) \"\"\"", "\n", "return", "torch", ".", "cat", "(", "[", "segments", "[", ":", ",", ":", "1", "]", "-", "segments", "[", ":", ",", "1", ":", "]", "/", "2.0", ",", "\n", "segments", "[", ":", ",", ":", "1", "]", "+", "segments", "[", ":", ",", "1", ":", "]", "/", "2.0", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.intersect": [[17, 31], ["segment_a.size", "segment_b.size", "torch.max", "torch.min", "torch.clamp", "segment_a[].unsqueeze().expand", "segment_b[].unsqueeze().expand", "segment_a[].unsqueeze().expand", "segment_b[].unsqueeze().expand", "segment_a[].unsqueeze", "segment_b[].unsqueeze", "segment_a[].unsqueeze", "segment_b[].unsqueeze"], "function", ["None"], ["", "def", "intersect", "(", "segment_a", ",", "segment_b", ")", ":", "\n", "    ", "\"\"\"\n    for example, compute the max left between segment_a and segment_b.\n    [A] -> [A, 1] -> [A, B]\n    [B] -> [1, B] -> [A, B]\n    \"\"\"", "\n", "A", "=", "segment_a", ".", "size", "(", "0", ")", "\n", "B", "=", "segment_b", ".", "size", "(", "0", ")", "\n", "max_l", "=", "torch", ".", "max", "(", "segment_a", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "A", ",", "B", ")", ",", "\n", "segment_b", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "A", ",", "B", ")", ")", "\n", "min_r", "=", "torch", ".", "min", "(", "segment_a", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "A", ",", "B", ")", ",", "\n", "segment_b", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "A", ",", "B", ")", ")", "\n", "inter", "=", "torch", ".", "clamp", "(", "min_r", "-", "max_l", ",", "min", "=", "0", ")", "\n", "return", "inter", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.jaccard": [[33, 42], ["segment_utils.intersect"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.intersect"], ["", "def", "jaccard", "(", "segment_a", ",", "segment_b", ")", ":", "\n", "    ", "\"\"\"\n    jaccard: A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\n    \"\"\"", "\n", "inter", "=", "intersect", "(", "segment_a", ",", "segment_b", ")", "\n", "length_a", "=", "(", "segment_a", "[", ":", ",", "1", "]", "-", "segment_a", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "inter", ")", "\n", "length_b", "=", "(", "segment_b", "[", ":", ",", "1", "]", "-", "segment_b", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "inter", ")", "\n", "union", "=", "length_a", "+", "length_b", "-", "inter", "\n", "return", "inter", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.match_gt": [[44, 63], ["segment_utils.jaccard", "jaccard.max", "jaccard.max", "best_truth_overlap.index_fill_", "range", "segment_utils.encode", "segment_utils.point_form", "best_prior_idx.size"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.jaccard", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.encode", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.point_form"], ["", "def", "match_gt", "(", "threshold", ",", "truths", ",", "priors", ",", "variances", ",", "labels", ",", "loc_t", ",", "conf_t", ",", "idx", ")", ":", "\n", "    ", "overlaps", "=", "jaccard", "(", "truths", ",", "point_form", "(", "priors", ")", ")", "\n", "# print(truths, point_form(priors))", "\n", "# print(overlaps)", "\n", "# [num_gt] best prior for each ground truth", "\n", "best_prior_overlap", ",", "best_prior_idx", "=", "overlaps", ".", "max", "(", "1", ")", "\n", "# [num_prior] best ground truth for each prior", "\n", "best_truth_overlap", ",", "best_truth_idx", "=", "overlaps", ".", "max", "(", "0", ")", "\n", "# ensure each truth has one best prior", "\n", "best_truth_overlap", ".", "index_fill_", "(", "0", ",", "best_prior_idx", ",", "2.0", ")", "\n", "for", "j", "in", "range", "(", "best_prior_idx", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "best_truth_idx", "[", "best_prior_idx", "[", "j", "]", "]", "=", "j", "\n", "\n", "", "matches", "=", "truths", "[", "best_truth_idx", "]", "# [num_prior, 2]", "\n", "conf", "=", "labels", "[", "best_truth_idx", "]", "# [num_prior]", "\n", "conf", "[", "best_truth_overlap", "<", "threshold", "]", "=", "0", "\n", "loc", "=", "encode", "(", "matches", ",", "priors", ",", "variances", ")", "\n", "loc_t", "[", "idx", "]", "=", "loc", "\n", "conf_t", "[", "idx", "]", "=", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.encode": [[65, 79], ["torch.cat", "torch.log"], "function", ["None"], ["", "def", "encode", "(", "matches", ",", "priors", ",", "variances", ")", ":", "\n", "    ", "\"\"\"\n    :param matches: point form, shape: [num_priors, 2]\n    :param priors: center form, shape: [num_priors, 2]\n    :param variances: list of variances\n    :return: encoded segments, shape: [num_priors, 2]\n    \"\"\"", "\n", "g_c", "=", "(", "matches", "[", ":", ",", ":", "1", "]", "+", "matches", "[", ":", ",", "1", ":", "]", ")", "/", "2.0", "-", "priors", "[", ":", ",", ":", "1", "]", "\n", "g_c", "/=", "(", "variances", "[", "0", "]", "*", "priors", "[", ":", ",", "1", ":", "]", ")", "\n", "\n", "g_w", "=", "(", "matches", "[", ":", ",", "1", ":", "]", "-", "matches", "[", ":", ",", ":", "1", "]", ")", "/", "priors", "[", ":", ",", "1", ":", "]", "\n", "g_w", "=", "torch", ".", "log", "(", "g_w", ")", "/", "variances", "[", "1", "]", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "g_c", ",", "g_w", "]", ",", "dim", "=", "1", ")", "# [num_priors, 2]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.decode": [[81, 92], ["torch.cat", "torch.exp"], "function", ["None"], ["", "def", "decode", "(", "loc", ",", "priors", ",", "variances", ")", ":", "\n", "    ", "\"\"\"\n    :param loc: location predictions for loc layers, shape: [num_priors, 2]\n    :param priors: center from, shape: [num_priors, 2]\n    :param variances: list of variances\n    :return: decoded segments, center form, shape: [num_priors, 2]\n    \"\"\"", "\n", "segments", "=", "torch", ".", "cat", "(", "[", "\n", "priors", "[", ":", ",", ":", "1", "]", "+", "loc", "[", ":", ",", ":", "1", "]", "*", "priors", "[", ":", ",", "1", ":", "]", "*", "variances", "[", "0", "]", ",", "\n", "priors", "[", ":", ",", "1", ":", "]", "*", "torch", ".", "exp", "(", "loc", "[", ":", ",", "1", ":", "]", "*", "variances", "[", "1", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.nms": [[94, 126], ["scores.new_zeros().long", "scores.sort", "idx.numel", "torch.index_select", "torch.index_select", "torch.max", "torch.min", "torch.clamp", "torch.index_select", "scores.new_zeros", "idx.size", "scores.size"], "function", ["None"], ["", "def", "nms", "(", "segments", ",", "overlap", "=", "0.5", ",", "top_k", "=", "1000", ")", ":", "\n", "    ", "left", "=", "segments", "[", ":", ",", "0", "]", "\n", "right", "=", "segments", "[", ":", ",", "1", "]", "\n", "scores", "=", "segments", "[", ":", ",", "2", "]", "\n", "\n", "keep", "=", "scores", ".", "new_zeros", "(", "scores", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "area", "=", "right", "-", "left", "\n", "v", ",", "idx", "=", "scores", ".", "sort", "(", "0", ")", "\n", "idx", "=", "idx", "[", "-", "top_k", ":", "]", "\n", "\n", "count", "=", "0", "\n", "while", "idx", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "i", "=", "idx", "[", "-", "1", "]", "\n", "keep", "[", "count", "]", "=", "i", "\n", "count", "+=", "1", "\n", "if", "idx", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "            ", "break", "\n", "", "idx", "=", "idx", "[", ":", "-", "1", "]", "\n", "l", "=", "torch", ".", "index_select", "(", "left", ",", "0", ",", "idx", ")", "\n", "r", "=", "torch", ".", "index_select", "(", "right", ",", "0", ",", "idx", ")", "\n", "l", "=", "torch", ".", "max", "(", "l", ",", "left", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "right", "[", "i", "]", ")", "\n", "# l = torch.clamp(l, max=left[i])", "\n", "# r = torch.clamp(r, min=right[i])", "\n", "inter", "=", "torch", ".", "clamp", "(", "r", "-", "l", ",", "min", "=", "0.0", ")", "\n", "\n", "rem_areas", "=", "torch", ".", "index_select", "(", "area", ",", "0", ",", "idx", ")", "\n", "union", "=", "rem_areas", "-", "inter", "+", "area", "[", "i", "]", "\n", "IoU", "=", "inter", "/", "union", "\n", "\n", "idx", "=", "idx", "[", "IoU", "<", "overlap", "]", "\n", "", "return", "keep", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.softnms_v2": [[128, 163], ["torch.cat.cpu", "done_mask.sum", "torch.stack", "tscore[].argmax", "[].item", "_tstart.clamp", "_tend.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.cat", "undone_mask.sum", "done_mask.sum", "undone_mask.nonzero"], "function", ["None"], ["", "def", "softnms_v2", "(", "segments", ",", "sigma", "=", "0.5", ",", "top_k", "=", "1000", ",", "score_threshold", "=", "0.001", ",", "use_edl", "=", "False", ",", "os_head", "=", "False", ",", "get_mask", "=", "False", ")", ":", "\n", "    ", "segments", "=", "segments", ".", "cpu", "(", ")", "\n", "tstart", "=", "segments", "[", ":", ",", "0", "]", "\n", "tend", "=", "segments", "[", ":", ",", "1", "]", "\n", "tscore", "=", "segments", "[", ":", ",", "2", "]", "\n", "rest_cols", "=", "segments", "[", ":", ",", "3", ":", "]", "if", "use_edl", "or", "os_head", "else", "None", "\n", "done_mask", "=", "tscore", "<", "-", "1", "# set all to False", "\n", "undone_mask", "=", "tscore", ">=", "score_threshold", "\n", "while", "undone_mask", ".", "sum", "(", ")", ">", "1", "and", "done_mask", ".", "sum", "(", ")", "<", "top_k", ":", "\n", "        ", "idx", "=", "tscore", "[", "undone_mask", "]", ".", "argmax", "(", ")", "\n", "idx", "=", "undone_mask", ".", "nonzero", "(", ")", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "undone_mask", "[", "idx", "]", "=", "False", "\n", "done_mask", "[", "idx", "]", "=", "True", "\n", "\n", "top_start", "=", "tstart", "[", "idx", "]", "\n", "top_end", "=", "tend", "[", "idx", "]", "\n", "_tstart", "=", "tstart", "[", "undone_mask", "]", "\n", "_tend", "=", "tend", "[", "undone_mask", "]", "\n", "tt1", "=", "_tstart", ".", "clamp", "(", "min", "=", "top_start", ")", "\n", "tt2", "=", "_tend", ".", "clamp", "(", "max", "=", "top_end", ")", "\n", "intersection", "=", "torch", ".", "clamp", "(", "tt2", "-", "tt1", ",", "min", "=", "0", ")", "\n", "duration", "=", "_tend", "-", "_tstart", "\n", "tmp_width", "=", "torch", ".", "clamp", "(", "top_end", "-", "top_start", ",", "min", "=", "1e-5", ")", "\n", "iou", "=", "intersection", "/", "(", "tmp_width", "+", "duration", "-", "intersection", ")", "\n", "scales", "=", "torch", ".", "exp", "(", "-", "iou", "**", "2", "/", "sigma", ")", "\n", "tscore", "[", "undone_mask", "]", "*=", "scales", "\n", "undone_mask", "[", "tscore", "<", "score_threshold", "]", "=", "False", "\n", "", "count", "=", "done_mask", ".", "sum", "(", ")", "\n", "segments", "=", "torch", ".", "stack", "(", "[", "tstart", "[", "done_mask", "]", ",", "tend", "[", "done_mask", "]", ",", "tscore", "[", "done_mask", "]", "]", ",", "-", "1", ")", "\n", "if", "rest_cols", "is", "not", "None", ":", "\n", "        ", "segments", "=", "torch", ".", "cat", "(", "[", "segments", ",", "rest_cols", "[", "done_mask", "]", "]", ",", "-", "1", ")", "\n", "", "if", "get_mask", ":", "\n", "        ", "return", "segments", ",", "count", ",", "done_mask", "\n", "", "return", "segments", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.segment_utils.soft_nms": [[165, 213], ["torch.from_numpy.detach().cpu().numpy", "segments[].tolist", "segments[].tolist", "segments[].tolist", "len", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy", "max", "list.index", "np.array.append", "np.array.append", "np.array.append", "list.pop", "list.pop", "list.pop", "numpy.array", "numpy.array", "numpy.array", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "list", "list", "list", "numpy.stack", "torch.from_numpy.detach().cpu", "len", "len", "numpy.where", "numpy.exp", "torch.from_numpy.detach", "numpy.square"], "function", ["None"], ["", "def", "soft_nms", "(", "segments", ",", "overlap", "=", "0.3", ",", "sigma", "=", "0.5", ",", "top_k", "=", "1000", ")", ":", "\n", "    ", "segments", "=", "segments", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tstart", "=", "segments", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "\n", "tend", "=", "segments", "[", ":", ",", "1", "]", ".", "tolist", "(", ")", "\n", "tscore", "=", "segments", "[", ":", ",", "2", "]", ".", "tolist", "(", ")", "\n", "\n", "rstart", "=", "[", "]", "\n", "rend", "=", "[", "]", "\n", "rscore", "=", "[", "]", "\n", "while", "len", "(", "tscore", ")", ">", "1", "and", "len", "(", "rscore", ")", "<", "top_k", ":", "\n", "        ", "max_score", "=", "max", "(", "tscore", ")", "\n", "if", "max_score", "<", "0.001", ":", "\n", "            ", "break", "\n", "", "max_index", "=", "tscore", ".", "index", "(", "max_score", ")", "\n", "tmp_start", "=", "tstart", "[", "max_index", "]", "\n", "tmp_end", "=", "tend", "[", "max_index", "]", "\n", "tmp_score", "=", "tscore", "[", "max_index", "]", "\n", "rstart", ".", "append", "(", "tmp_start", ")", "\n", "rend", ".", "append", "(", "tmp_end", ")", "\n", "rscore", ".", "append", "(", "tmp_score", ")", "\n", "tstart", ".", "pop", "(", "max_index", ")", "\n", "tend", ".", "pop", "(", "max_index", ")", "\n", "tscore", ".", "pop", "(", "max_index", ")", "\n", "\n", "tstart", "=", "np", ".", "array", "(", "tstart", ")", "\n", "tend", "=", "np", ".", "array", "(", "tend", ")", "\n", "tscore", "=", "np", ".", "array", "(", "tscore", ")", "\n", "\n", "tt1", "=", "np", ".", "maximum", "(", "tmp_start", ",", "tstart", ")", "\n", "tt2", "=", "np", ".", "minimum", "(", "tmp_end", ",", "tend", ")", "\n", "intersection", "=", "np", ".", "maximum", "(", "tt2", "-", "tt1", ",", "0", ")", "\n", "duration", "=", "tend", "-", "tstart", "\n", "tmp_width", "=", "np", ".", "minimum", "(", "tmp_end", "-", "tmp_start", ",", "1e-5", ")", "\n", "iou", "=", "intersection", "/", "(", "tmp_width", "+", "duration", "-", "intersection", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "idxs", "=", "np", ".", "where", "(", "iou", ">", "overlap", ")", "[", "0", "]", "\n", "tscore", "[", "idxs", "]", "=", "tscore", "[", "idxs", "]", "*", "np", ".", "exp", "(", "-", "np", ".", "square", "(", "iou", "[", "idxs", "]", ")", "/", "sigma", ")", "\n", "\n", "tstart", "=", "list", "(", "tstart", ")", "\n", "tend", "=", "list", "(", "tend", ")", "\n", "tscore", "=", "list", "(", "tscore", ")", "\n", "\n", "", "count", "=", "len", "(", "rstart", ")", "\n", "rstart", "=", "np", ".", "array", "(", "rstart", ")", "\n", "rend", "=", "np", ".", "array", "(", "rend", ")", "\n", "rscore", "=", "np", ".", "array", "(", "rscore", ")", "\n", "segments", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "[", "rstart", ",", "rend", ",", "rscore", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "return", "segments", ",", "count", "\n", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.video2npy.print_videos_info": [[9, 22], ["cv2.VideoCapture", "os.listdir", "f.endswith", "os.path.join", "cv2.VideoCapture.isOpened", "print", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "print"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--video_dir'", ",", "type", "=", "str", ",", "default", "=", "'datasets/activitynet/train_val_112'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'datasets/activitynet/train_val_npy_112'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_frame_num'", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "thread_num", "=", "args", ".", "thread_num", "\n", "video_dir", "=", "args", ".", "video_dir", "\n", "output_dir", "=", "args", ".", "output_dir", "\n", "max_frame_num", "=", "args", ".", "max_frame_num", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "files", "=", "sorted", "(", "os", ".", "listdir", "(", "video_dir", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.video2npy.video2npy": [[25, 80], ["pandas.DataFrame", "sorted", "pandas.read_csv", "os.path.exists", "os.makedirs", "list", "cv2.VideoCapture", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "numpy.stack", "print", "video_infos.append", "numpy.save", "pandas.DataFrame", "pd.DataFrame.to_csv", "set", "os.path.join", "cv2.VideoCapture.isOpened", "Exception", "ValueError", "ValueError", "cv2.VideoCapture.read", "int", "ValueError", "os.path.join", "numpy.array", "AFSD.common.videotransforms.imresize", "np.stack.append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.imresize"], ["    ", "fid", "=", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "video_dir", ")", ",", "'problematic_videos.txt'", ")", ",", "'w'", ")", "\n", "for", "file", "in", "files", "[", ":", "]", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "0", "]", "\n", "target_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file_name", "+", "'.npy'", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "os", ".", "path", ".", "join", "(", "video_dir", ",", "file", ")", ")", "\n", "count", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", "\n", "imgs", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "if", "not", "ret", ":", "\n", "                ", "break", "\n", "", "imgs", ".", "append", "(", "frame", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "if", "count", "!=", "len", "(", "imgs", ")", ":", "\n", "            ", "print", "(", "'{} frame num is less'", ".", "format", "(", "file_name", ")", ")", "\n", "fid", ".", "writelines", "(", "file", "+", "'\\n'", ")", "\n", "continue", "\n", "", "imgs", "=", "np", ".", "stack", "(", "imgs", ")", "\n", "print", "(", "imgs", ".", "shape", ")", "\n", "if", "max_frame_num", "is", "not", "None", ":", "\n", "            ", "imgs", "=", "imgs", "[", ":", "max_frame_num", "]", "\n", "", "np", ".", "save", "(", "target_file", ",", "imgs", ")", "\n", "", "fid", ".", "close", "(", ")", "\n", "\n", "", "processes", "=", "[", "]", "\n", "video_num", "=", "len", "(", "files", ")", "\n", "per_process_video_num", "=", "video_num", "//", "thread_num", "\n", "\n", "for", "i", "in", "range", "(", "thread_num", ")", ":", "\n", "    ", "if", "i", "==", "thread_num", "-", "1", ":", "\n", "        ", "sub_files", "=", "files", "[", "i", "*", "per_process_video_num", ":", "]", "\n", "", "else", ":", "\n", "        ", "sub_files", "=", "files", "[", "i", "*", "per_process_video_num", ":", "(", "i", "+", "1", ")", "*", "per_process_video_num", "]", "\n", "", "p", "=", "mp", ".", "Process", "(", "target", "=", "sub_processor", ",", "args", "=", "(", "i", ",", "sub_files", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "    ", "p", ".", "join", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.ANET_Dataset.__init__": [[128, 151], ["anet_dataset.get_video_info", "anet_dataset.split_videos", "AFSD.common.videotransforms.RandomCrop", "AFSD.common.videotransforms.RandomHorizontalFlip", "AFSD.common.videotransforms.CenterCrop"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.split_videos"], ["    ", "def", "__init__", "(", "self", ",", "\n", "video_info_path", ",", "\n", "video_dir", ",", "\n", "clip_length", ",", "\n", "crop_size", ",", "\n", "stride", ",", "\n", "channels", "=", "3", ",", "\n", "rgb_norm", "=", "True", ",", "\n", "training", "=", "True", ",", "\n", "binary_class", "=", "False", ")", ":", "\n", "        ", "self", ".", "training", "=", "training", "\n", "subset", "=", "'training'", "if", "training", "else", "'validation'", "\n", "video_info", "=", "get_video_info", "(", "video_info_path", ",", "subset", ")", "\n", "self", ".", "training_list", ",", "self", ".", "th", "=", "split_videos", "(", "video_info", ",", "clip_length", ",", "video_dir", ",", "binary_class", ")", "\n", "self", ".", "clip_length", "=", "clip_length", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "rgb_norm", "=", "rgb_norm", "\n", "self", ".", "video_dir", "=", "video_dir", "\n", "self", ".", "channels", "=", "channels", "\n", "\n", "self", ".", "random_crop", "=", "videotransforms", ".", "RandomCrop", "(", "crop_size", ")", "\n", "self", ".", "random_flip", "=", "videotransforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", "\n", "self", ".", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "crop_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.ANET_Dataset.__len__": [[152, 154], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "training_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.ANET_Dataset.get_bg": [[155, 169], ["times.extend", "times.sort", "list", "random.choice", "times.extend", "filter", "math.ceil", "math.floor", "range", "len", "math.floor", "math.ceil"], "methods", ["None"], ["", "def", "get_bg", "(", "self", ",", "annos", ",", "min_action", ")", ":", "\n", "        ", "annos", "=", "[", "[", "anno", "[", "0", "]", ",", "anno", "[", "1", "]", "]", "for", "anno", "in", "annos", "]", "\n", "times", "=", "[", "]", "\n", "for", "anno", "in", "annos", ":", "\n", "            ", "times", ".", "extend", "(", "anno", ")", "\n", "", "times", ".", "extend", "(", "[", "0", ",", "self", ".", "clip_length", "-", "1", "]", ")", "\n", "times", ".", "sort", "(", ")", "\n", "regions", "=", "[", "[", "times", "[", "i", "]", ",", "times", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "len", "(", "times", ")", "-", "1", ")", "]", "\n", "regions", "=", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "x", "not", "in", "annos", "and", "math", ".", "floor", "(", "x", "[", "1", "]", ")", "-", "math", ".", "ceil", "(", "x", "[", "0", "]", ")", ">", "min_action", ",", "\n", "regions", ")", ")", "\n", "# regions = list(filter(lambda x:x not in annos, regions))", "\n", "region", "=", "random", ".", "choice", "(", "regions", ")", "\n", "return", "[", "math", ".", "ceil", "(", "region", "[", "0", "]", ")", ",", "math", ".", "floor", "(", "region", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.ANET_Dataset.augment_": [[170, 208], ["range", "math.ceil", "math.ceil", "input.clone", "random.choice", "math.floor", "math.ceil", "random.choice", "math.ceil", "anet_dataset.ANET_Dataset.get_bg", "random.choice", "list", "range", "filter"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.get_bg"], ["", "def", "augment_", "(", "self", ",", "input", ",", "annos", ",", "th", ")", ":", "\n", "        ", "'''\n        input: (c, t, h, w)\n        target: (N, 3)\n        '''", "\n", "try", ":", "\n", "            ", "gt", "=", "random", ".", "choice", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", "-", "x", "[", "0", "]", ">=", "2", "*", "th", ",", "annos", ")", ")", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "input", ",", "annos", ",", "False", "\n", "", "gt_len", "=", "gt", "[", "1", "]", "-", "gt", "[", "0", "]", "\n", "region", "=", "range", "(", "math", ".", "floor", "(", "th", ")", ",", "math", ".", "ceil", "(", "gt_len", "-", "th", ")", ")", "\n", "t", "=", "random", ".", "choice", "(", "region", ")", "+", "math", ".", "ceil", "(", "gt", "[", "0", "]", ")", "\n", "l_len", "=", "math", ".", "ceil", "(", "t", "-", "gt", "[", "0", "]", ")", "\n", "r_len", "=", "math", ".", "ceil", "(", "gt", "[", "1", "]", "-", "t", ")", "\n", "try", ":", "\n", "            ", "bg", "=", "self", ".", "get_bg", "(", "annos", ",", "th", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "input", ",", "annos", ",", "False", "\n", "", "start_idx", "=", "random", ".", "choice", "(", "range", "(", "bg", "[", "1", "]", "-", "bg", "[", "0", "]", "-", "th", ")", ")", "+", "bg", "[", "0", "]", "\n", "end_idx", "=", "start_idx", "+", "th", "\n", "\n", "new_input", "=", "input", ".", "clone", "(", ")", "\n", "try", ":", "\n", "            ", "if", "gt", "[", "1", "]", "<", "start_idx", ":", "\n", "                ", "new_input", "[", ":", ",", "t", ":", "t", "+", "th", ",", "]", "=", "input", "[", ":", ",", "start_idx", ":", "end_idx", ",", "]", "\n", "new_input", "[", ":", ",", "t", "+", "th", ":", "end_idx", ",", "]", "=", "input", "[", ":", ",", "t", ":", "start_idx", ",", "]", "\n", "\n", "new_annos", "=", "[", "[", "gt", "[", "0", "]", ",", "t", "]", ",", "[", "t", "+", "th", ",", "th", "+", "gt", "[", "1", "]", "]", ",", "[", "t", "+", "1", ",", "t", "+", "th", "-", "1", "]", "]", "\n", "\n", "", "else", ":", "\n", "                ", "new_input", "[", ":", ",", "start_idx", ":", "t", "-", "th", "]", "=", "input", "[", ":", ",", "end_idx", ":", "t", ",", "]", "\n", "new_input", "[", ":", ",", "t", "-", "th", ":", "t", ",", "]", "=", "input", "[", ":", ",", "start_idx", ":", "end_idx", ",", "]", "\n", "\n", "new_annos", "=", "[", "[", "gt", "[", "0", "]", "-", "th", ",", "t", "-", "th", "]", ",", "[", "t", ",", "gt", "[", "1", "]", "]", ",", "[", "t", "-", "th", "+", "1", ",", "t", "-", "1", "]", "]", "\n", "", "", "except", "RuntimeError", ":", "\n", "            ", "return", "input", ",", "annos", ",", "False", "\n", "\n", "", "return", "new_input", ",", "new_annos", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.ANET_Dataset.augment": [[209, 216], ["anet_dataset.ANET_Dataset.augment_"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.augment_"], ["", "def", "augment", "(", "self", ",", "input", ",", "annos", ",", "th", ",", "max_iter", "=", "10", ")", ":", "\n", "        ", "flag", "=", "True", "\n", "i", "=", "0", "\n", "while", "flag", "and", "i", "<", "max_iter", ":", "\n", "            ", "new_input", ",", "new_annos", ",", "flag", "=", "self", ".", "augment_", "(", "input", ",", "annos", ",", "th", ")", "\n", "i", "+=", "1", "\n", "", "return", "new_input", ",", "new_annos", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.ANET_Dataset.__getitem__": [[217, 258], ["int", "numpy.load", "min", "numpy.transpose().astype", "torch.from_numpy().float", "anet_dataset.ANET_Dataset.augment", "anet_dataset.annos_transform", "numpy.stack", "numpy.stack", "numpy.stack", "torch.from_numpy().float", "os.path.join", "numpy.concatenate", "anet_dataset.ANET_Dataset.random_flip", "anet_dataset.ANET_Dataset.center_crop", "numpy.transpose", "numpy.ones", "anet_dataset.ANET_Dataset.random_crop", "torch.from_numpy", "torch.from_numpy", "anet_dataset.ANET_Dataset.copy", "torch.from_numpy().float.copy"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.augment", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.annos_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_info", "=", "self", ".", "training_list", "[", "idx", "]", "\n", "video_name", "=", "sample_info", "[", "'video_name'", "]", "\n", "offset", "=", "sample_info", "[", "'offset'", "]", "\n", "annos", "=", "sample_info", "[", "'annos'", "]", "\n", "frame_num", "=", "sample_info", "[", "'frame_num'", "]", "\n", "th", "=", "int", "(", "self", ".", "th", "[", "sample_info", "[", "'video_name'", "]", "]", "/", "4", ")", "\n", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "video_dir", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "start", "=", "offset", "\n", "end", "=", "min", "(", "offset", "+", "self", ".", "clip_length", ",", "frame_num", ")", "\n", "frames", "=", "data", "[", "start", ":", "end", "]", "\n", "frames", "=", "np", ".", "transpose", "(", "frames", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "c", ",", "t", ",", "h", ",", "w", "=", "frames", ".", "shape", "\n", "if", "t", "<", "self", ".", "clip_length", ":", "\n", "            ", "pad_t", "=", "self", ".", "clip_length", "-", "t", "\n", "zero_clip", "=", "np", ".", "ones", "(", "[", "c", ",", "pad_t", ",", "h", ",", "w", "]", ",", "dtype", "=", "frames", ".", "dtype", ")", "*", "127.5", "\n", "frames", "=", "np", ".", "concatenate", "(", "[", "frames", ",", "zero_clip", "]", ",", "1", ")", "\n", "\n", "# random crop and flip", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "frames", "=", "self", ".", "random_flip", "(", "self", ".", "random_crop", "(", "frames", ")", ")", "\n", "", "else", ":", "\n", "            ", "frames", "=", "self", ".", "center_crop", "(", "frames", ")", "\n", "\n", "", "input_data", "=", "torch", ".", "from_numpy", "(", "frames", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "rgb_norm", ":", "\n", "            ", "input_data", "=", "(", "input_data", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "", "ssl_input_data", ",", "ssl_annos", ",", "flag", "=", "self", ".", "augment", "(", "input_data", ",", "annos", ",", "th", ",", "1", ")", "\n", "annos", "=", "annos_transform", "(", "annos", ",", "self", ".", "clip_length", ")", "\n", "target", "=", "np", ".", "stack", "(", "annos", ",", "0", ")", "\n", "ssl_target", "=", "np", ".", "stack", "(", "ssl_annos", ",", "0", ")", "\n", "\n", "scores", "=", "np", ".", "stack", "(", "[", "\n", "sample_info", "[", "'action'", "]", ",", "\n", "sample_info", "[", "'start'", "]", ",", "\n", "sample_info", "[", "'end'", "]", "\n", "]", ",", "axis", "=", "0", ")", "\n", "scores", "=", "torch", ".", "from_numpy", "(", "scores", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "input_data", ",", "target", ",", "scores", ",", "ssl_input_data", ",", "ssl_target", ",", "flag", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.load_json": [[11, 19], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "file", ")", ":", "\n", "    ", "\"\"\"\n    :param file: json file path\n    :return: data of json\n    \"\"\"", "\n", "with", "open", "(", "file", ")", "as", "json_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.annos_transform": [[21, 30], ["res.append"], "function", ["None"], ["", "", "def", "annos_transform", "(", "annos", ",", "clip_length", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "anno", "in", "annos", ":", "\n", "        ", "res", ".", "append", "(", "[", "\n", "anno", "[", "0", "]", "*", "1.0", "/", "clip_length", ",", "\n", "anno", "[", "1", "]", "*", "1.0", "/", "clip_length", ",", "\n", "anno", "[", "2", "]", "\n", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.get_video_info": [[32, 41], ["anet_dataset.load_json", "list", "load_json.keys"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.load_json"], ["", "def", "get_video_info", "(", "video_info_path", ",", "subset", "=", "'training'", ")", ":", "\n", "    ", "json_data", "=", "load_json", "(", "video_info_path", ")", "\n", "video_info", "=", "{", "}", "\n", "video_list", "=", "list", "(", "json_data", ".", "keys", "(", ")", ")", "\n", "for", "video_name", "in", "video_list", ":", "\n", "        ", "tmp", "=", "json_data", "[", "video_name", "]", "\n", "if", "tmp", "[", "'subset'", "]", "==", "subset", ":", "\n", "            ", "video_info", "[", "video_name", "]", "=", "tmp", "\n", "", "", "return", "video_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.split_videos": [[43, 105], ["list", "os.path.join", "min", "math.floor", "video_info.keys", "os.path.exists", "annos.append", "len", "cur_annos.append", "len", "min", "numpy.zeros", "numpy.zeros", "numpy.zeros", "training_list.append", "max", "numpy.clip", "numpy.clip", "numpy.clip", "int", "numpy.clip", "int", "numpy.clip", "int", "numpy.clip", "round", "int", "round", "int", "round", "int", "round", "round", "round"], "function", ["None"], ["", "def", "split_videos", "(", "video_info", ",", "clip_length", ",", "video_dir", ",", "binary_class", "=", "False", ")", ":", "\n", "    ", "training_list", "=", "[", "]", "\n", "min_anno_dict", "=", "{", "}", "\n", "for", "video_name", "in", "list", "(", "video_info", ".", "keys", "(", ")", ")", "[", ":", "]", ":", "\n", "        ", "npy_data", "=", "os", ".", "path", ".", "join", "(", "video_dir", ",", "video_name", "+", "'.npy'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "npy_data", ")", ":", "\n", "            ", "continue", "\n", "", "frame_num", "=", "min", "(", "video_info", "[", "video_name", "]", "[", "'frame_num'", "]", ",", "clip_length", ")", "\n", "annos", "=", "[", "]", "\n", "min_anno", "=", "clip_length", "\n", "for", "anno", "in", "video_info", "[", "video_name", "]", "[", "'annotations'", "]", ":", "\n", "            ", "if", "binary_class", ":", "\n", "                ", "anno", "[", "'label_id'", "]", "=", "1", "if", "anno", "[", "'label_id'", "]", ">", "0", "else", "0", "\n", "", "if", "anno", "[", "'end_frame'", "]", "<=", "anno", "[", "'start_frame'", "]", ":", "\n", "                ", "continue", "\n", "", "annos", ".", "append", "(", "[", "\n", "anno", "[", "'start_frame'", "]", ",", "\n", "anno", "[", "'end_frame'", "]", ",", "\n", "anno", "[", "'label_id'", "]", "\n", "]", ")", "\n", "", "if", "len", "(", "annos", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "offsetlist", "=", "[", "0", "]", "\n", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "            ", "cur_annos", "=", "[", "]", "\n", "save_offset", "=", "True", "\n", "for", "anno", "in", "annos", ":", "\n", "                ", "cur_annos", ".", "append", "(", "[", "anno", "[", "0", "]", ",", "anno", "[", "1", "]", ",", "anno", "[", "2", "]", "]", ")", "\n", "", "if", "len", "(", "cur_annos", ")", ">", "0", ":", "\n", "                ", "min_anno_len", "=", "min", "(", "[", "x", "[", "1", "]", "-", "x", "[", "0", "]", "for", "x", "in", "cur_annos", "]", ")", "\n", "if", "min_anno_len", "<", "min_anno", ":", "\n", "                    ", "min_anno", "=", "min_anno_len", "\n", "", "", "if", "save_offset", ":", "\n", "                ", "start", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "end", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "action", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "for", "anno", "in", "cur_annos", ":", "\n", "                    ", "s", ",", "e", ",", "id", "=", "anno", "\n", "d", "=", "max", "(", "(", "e", "-", "s", ")", "/", "10.0", ",", "2.0", ")", "\n", "act_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "act_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "action", "[", "act_s", ":", "act_e", "]", "=", "id", "\n", "start_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "-", "d", "/", "2", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "start_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "+", "d", "/", "2", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "start", "[", "start_s", ":", "start_e", "]", "=", "id", "\n", "end_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "-", "d", "/", "2", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "end_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "+", "d", "/", "2", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "end", "[", "end_s", ":", "end_e", "]", "=", "id", "\n", "\n", "", "training_list", ".", "append", "(", "{", "\n", "'video_name'", ":", "video_name", ",", "\n", "'offset'", ":", "offset", ",", "\n", "'annos'", ":", "cur_annos", ",", "\n", "'frame_num'", ":", "frame_num", ",", "\n", "'start'", ":", "start", ",", "\n", "'end'", ":", "end", ",", "\n", "'action'", ":", "action", "\n", "}", ")", "\n", "", "", "min_anno_dict", "[", "video_name", "]", "=", "math", ".", "floor", "(", "min_anno", ")", "\n", "", "return", "training_list", ",", "min_anno_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.anet_dataset.detection_collate": [[107, 125], ["clips.append", "targets.append", "scores.append", "ssl_clips.append", "ssl_targets.append", "flags.append", "torch.stack", "torch.stack", "torch.stack", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "detection_collate", "(", "batch", ")", ":", "\n", "    ", "targets", "=", "[", "]", "\n", "clips", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "\n", "ssl_targets", "=", "[", "]", "\n", "ssl_clips", "=", "[", "]", "\n", "flags", "=", "[", "]", "\n", "for", "sample", "in", "batch", ":", "\n", "        ", "clips", ".", "append", "(", "sample", "[", "0", "]", ")", "\n", "targets", ".", "append", "(", "torch", ".", "FloatTensor", "(", "sample", "[", "1", "]", ")", ")", "\n", "scores", ".", "append", "(", "sample", "[", "2", "]", ")", "\n", "\n", "ssl_clips", ".", "append", "(", "sample", "[", "3", "]", ")", "\n", "ssl_targets", ".", "append", "(", "torch", ".", "FloatTensor", "(", "sample", "[", "4", "]", ")", ")", "\n", "flags", ".", "append", "(", "sample", "[", "5", "]", ")", "\n", "", "return", "torch", ".", "stack", "(", "clips", ",", "0", ")", ",", "targets", ",", "torch", ".", "stack", "(", "scores", ",", "0", ")", ",", "torch", ".", "stack", "(", "ssl_clips", ",", "0", ")", ",", "ssl_targets", ",", "flags", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.Unit3D.__init__": [[9, 44], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "0", ",", "\n", "activation_fn", "=", "F", ".", "relu", ",", "\n", "use_batch_norm", "=", "True", ",", "\n", "use_bias", "=", "False", ",", "\n", "padding_valid_spatial", "=", "False", ",", "\n", "name", "=", "'unit_3d'", ")", ":", "\n", "\n", "        ", "\"\"\"Initializes Unit3D module.\"\"\"", "\n", "super", "(", "Unit3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_output_channels", "=", "output_channels", "\n", "self", ".", "_kernel_shape", "=", "kernel_shape", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "_use_batch_norm", "=", "use_batch_norm", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "self", ".", "_use_bias", "=", "use_bias", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "padding_valid_spatial", "=", "padding_valid_spatial", "\n", "\n", "self", ".", "conv3d", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "_output_channels", ",", "\n", "kernel_size", "=", "self", ".", "_kernel_shape", ",", "\n", "stride", "=", "self", ".", "_stride", ",", "\n", "padding", "=", "0", ",", "\n", "# we always want padding to be 0 here.", "\n", "# We will dynamically pad based on input size in forward function", "\n", "bias", "=", "self", ".", "_use_bias", ")", "\n", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "self", ".", "_output_channels", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.Unit3D.compute_pad": [[45, 50], ["max", "max"], "methods", ["None"], ["", "", "def", "compute_pad", "(", "self", ",", "dim", ",", "s", ")", ":", "\n", "        ", "if", "s", "%", "self", ".", "_stride", "[", "dim", "]", "==", "0", ":", "\n", "            ", "return", "max", "(", "self", ".", "_kernel_shape", "[", "dim", "]", "-", "self", ".", "_stride", "[", "dim", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "max", "(", "self", ".", "_kernel_shape", "[", "dim", "]", "-", "(", "s", "%", "self", ".", "_stride", "[", "dim", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.Unit3D.forward": [[51, 88], ["i3d_backbone.Unit3D.size", "i3d_backbone.Unit3D.compute_pad", "i3d_backbone.Unit3D.compute_pad", "i3d_backbone.Unit3D.compute_pad", "torch.pad", "torch.pad", "torch.pad", "i3d_backbone.Unit3D.conv3d", "i3d_backbone.Unit3D.bn", "i3d_backbone.Unit3D._activation_fn"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# compute 'same' padding", "\n", "        ", "(", "batch", ",", "channel", ",", "t", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "# print t,h,w", "\n", "# out_t = np.ceil(float(t) / float(self._stride[0]))", "\n", "# out_h = np.ceil(float(h) / float(self._stride[1]))", "\n", "# out_w = np.ceil(float(w) / float(self._stride[2]))", "\n", "# print out_t, out_h, out_w", "\n", "pad_t", "=", "self", ".", "compute_pad", "(", "0", ",", "t", ")", "\n", "pad_h", "=", "self", ".", "compute_pad", "(", "1", ",", "h", ")", "\n", "pad_w", "=", "self", ".", "compute_pad", "(", "2", ",", "w", ")", "\n", "# print pad_t, pad_h, pad_w", "\n", "\n", "pad_t_f", "=", "pad_t", "//", "2", "\n", "pad_t_b", "=", "pad_t", "-", "pad_t_f", "\n", "pad_h_f", "=", "pad_h", "//", "2", "\n", "pad_h_b", "=", "pad_h", "-", "pad_h_f", "\n", "pad_w_f", "=", "pad_w", "//", "2", "\n", "pad_w_b", "=", "pad_w", "-", "pad_w_f", "\n", "\n", "pad", "=", "[", "pad_w_f", ",", "pad_w_b", ",", "pad_h_f", ",", "pad_h_b", ",", "pad_t_f", ",", "pad_t_b", "]", "\n", "if", "self", ".", "padding_valid_spatial", ":", "\n", "            ", "pad", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "pad_t_f", ",", "pad_t_b", "]", "\n", "\n", "", "if", "self", ".", "padding", "==", "-", "1", ":", "\n", "            ", "pad", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "# print x.size()", "\n", "# print pad", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", ")", "\n", "# print x.size()", "\n", "\n", "x", "=", "self", ".", "conv3d", "(", "x", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "_activation_fn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionModule.__init__": [[91, 115], ["torch.Module.__init__", "i3d_backbone.Unit3D", "i3d_backbone.Unit3D", "i3d_backbone.Unit3D", "i3d_backbone.Unit3D", "i3d_backbone.Unit3D", "AFSD.common.layers.MaxPool3dSamePadding", "i3d_backbone.Unit3D"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "name", ")", ":", "\n", "        ", "super", "(", "InceptionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "b0", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "0", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_0/Conv3d_0a_1x1'", ")", "\n", "self", ".", "b1a", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "1", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_1/Conv3d_0a_1x1'", ")", "\n", "self", ".", "b1b", "=", "Unit3D", "(", "in_channels", "=", "out_channels", "[", "1", "]", ",", "output_channels", "=", "out_channels", "[", "2", "]", ",", "\n", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "name", "+", "'/Branch_1/Conv3d_0b_3x3'", ")", "\n", "self", ".", "b2a", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "3", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_2/Conv3d_0a_1x1'", ")", "\n", "self", ".", "b2b", "=", "Unit3D", "(", "in_channels", "=", "out_channels", "[", "3", "]", ",", "output_channels", "=", "out_channels", "[", "4", "]", ",", "\n", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "name", "+", "'/Branch_2/Conv3d_0b_3x3'", ")", "\n", "self", ".", "b3a", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "0", ")", "\n", "self", ".", "b3b", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "out_channels", "[", "5", "]", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "'/Branch_3/Conv3d_0b_1x1'", ")", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionModule.forward": [[116, 122], ["i3d_backbone.InceptionModule.b0", "i3d_backbone.InceptionModule.b1b", "i3d_backbone.InceptionModule.b2b", "i3d_backbone.InceptionModule.b3b", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "i3d_backbone.InceptionModule.b1a", "i3d_backbone.InceptionModule.b2a", "i3d_backbone.InceptionModule.b3a"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b0", "=", "self", ".", "b0", "(", "x", ")", "\n", "b1", "=", "self", ".", "b1b", "(", "self", ".", "b1a", "(", "x", ")", ")", "\n", "b2", "=", "self", ".", "b2b", "(", "self", ".", "b2a", "(", "x", ")", ")", "\n", "b3", "=", "self", ".", "b3b", "(", "self", ".", "b3a", "(", "x", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "b0", ",", "b1", ",", "b2", ",", "b3", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.__init__": [[161, 309], ["torch.Module.__init__", "i3d_backbone.Unit3D", "AFSD.common.layers.MaxPool3dSamePadding", "i3d_backbone.Unit3D", "i3d_backbone.Unit3D", "AFSD.common.layers.MaxPool3dSamePadding", "i3d_backbone.InceptionModule", "i3d_backbone.InceptionModule", "AFSD.common.layers.MaxPool3dSamePadding", "i3d_backbone.InceptionModule", "i3d_backbone.InceptionModule", "i3d_backbone.InceptionModule", "i3d_backbone.InceptionModule", "i3d_backbone.InceptionModule", "AFSD.common.layers.MaxPool3dSamePadding", "i3d_backbone.InceptionModule", "i3d_backbone.InceptionModule", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "i3d_backbone.Unit3D", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "400", ",", "spatial_squeeze", "=", "True", ",", "\n", "final_endpoint", "=", "'Logits'", ",", "name", "=", "'inception_i3d'", ",", "in_channels", "=", "3", ",", "\n", "dropout_keep_prob", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"Initializes I3D model instance.\n        Args:\n          num_classes: The number of outputs in the logit layer (default 400, which\n              matches the Kinetics dataset).\n          spatial_squeeze: Whether to squeeze the spatial dimensions for the logits\n              before returning (default True).\n          final_endpoint: The model contains many possible endpoints.\n              `final_endpoint` specifies the last endpoint for the model to be built\n              up to. In addition to the output at `final_endpoint`, all the outputs\n              at endpoints up to `final_endpoint` will also be returned, in a\n              dictionary. `final_endpoint` must be one of\n              InceptionI3d.VALID_ENDPOINTS (default 'Logits').\n          name: A string (optional). The name of this module.\n        Raises:\n          ValueError: if `final_endpoint` is not recognized.\n        \"\"\"", "\n", "\n", "if", "final_endpoint", "not", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown final endpoint %s'", "%", "final_endpoint", ")", "\n", "\n", "", "super", "(", "InceptionI3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_spatial_squeeze", "=", "spatial_squeeze", "\n", "self", ".", "_final_endpoint", "=", "final_endpoint", "\n", "self", ".", "logits", "=", "None", "\n", "\n", "if", "self", ".", "_final_endpoint", "not", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown final endpoint %s'", "%", "self", ".", "_final_endpoint", ")", "\n", "\n", "", "self", ".", "end_points", "=", "{", "}", "\n", "end_point", "=", "'Conv3d_1a_7x7'", "\n", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "Unit3D", "(", "in_channels", "=", "in_channels", ",", "output_channels", "=", "64", ",", "\n", "kernel_shape", "=", "[", "7", ",", "7", ",", "7", "]", ",", "\n", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'MaxPool3d_2a_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Conv3d_2b_1x1'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "Unit3D", "(", "in_channels", "=", "64", ",", "output_channels", "=", "64", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "0", ",", "\n", "name", "=", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Conv3d_2c_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "Unit3D", "(", "in_channels", "=", "64", ",", "output_channels", "=", "192", ",", "\n", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "padding", "=", "1", ",", "\n", "name", "=", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'MaxPool3d_3a_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "1", ",", "3", ",", "3", "]", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_3b'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "192", ",", "[", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_3c'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "256", ",", "[", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'MaxPool3d_4a_3x3'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "3", ",", "3", ",", "3", "]", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_4b'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "128", "+", "192", "+", "96", "+", "64", ",", "\n", "[", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", "]", ",", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_4c'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "192", "+", "208", "+", "48", "+", "64", ",", "\n", "[", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", "]", ",", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_4d'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "160", "+", "224", "+", "64", "+", "64", ",", "\n", "[", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", "]", ",", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_4e'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "128", "+", "256", "+", "64", "+", "64", ",", "\n", "[", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", "]", ",", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_4f'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "112", "+", "288", "+", "64", "+", "64", ",", "\n", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'MaxPool3d_5a_2x2'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "MaxPool3dSamePadding", "(", "kernel_size", "=", "[", "2", ",", "2", ",", "2", "]", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_5b'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "256", "+", "320", "+", "128", "+", "128", ",", "\n", "[", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Mixed_5c'", "\n", "self", ".", "end_points", "[", "end_point", "]", "=", "InceptionModule", "(", "256", "+", "320", "+", "128", "+", "128", ",", "\n", "[", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", "]", ",", "\n", "name", "+", "end_point", ")", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "\n", "            ", "return", "\n", "\n", "", "end_point", "=", "'Logits'", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "[", "2", ",", "7", ",", "7", "]", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_keep_prob", ")", "\n", "self", ".", "logits", "=", "Unit3D", "(", "in_channels", "=", "384", "+", "384", "+", "128", "+", "128", ",", "output_channels", "=", "self", ".", "_num_classes", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "0", ",", "\n", "activation_fn", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "name", "=", "'logits'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.replace_logits": [[310, 319], ["i3d_backbone.Unit3D"], "methods", ["None"], ["", "def", "replace_logits", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "logits", "=", "Unit3D", "(", "in_channels", "=", "384", "+", "384", "+", "128", "+", "128", ",", "output_channels", "=", "self", ".", "_num_classes", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "0", ",", "\n", "activation_fn", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "name", "=", "'logits'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.build": [[320, 323], ["i3d_backbone.InceptionI3d.end_points.keys", "i3d_backbone.InceptionI3d.add_module"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "end_points", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "k", ",", "self", ".", "end_points", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.forward": [[324, 334], ["i3d_backbone.InceptionI3d.logits", "i3d_backbone.InceptionI3d.dropout", "i3d_backbone.InceptionI3d.squeeze().squeeze", "i3d_backbone.InceptionI3d.avg_pool", "i3d_backbone.InceptionI3d.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "end_point", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "            ", "if", "end_point", "in", "self", ".", "end_points", ":", "\n", "                ", "x", "=", "self", ".", "_modules", "[", "end_point", "]", "(", "x", ")", "# use _modules to work with dataparallel", "\n", "\n", "", "", "x", "=", "self", ".", "logits", "(", "self", ".", "dropout", "(", "self", ".", "avg_pool", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "_spatial_squeeze", ":", "\n", "            ", "logits", "=", "x", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "3", ")", "\n", "# logits is batch X time X classes, which is what we want to work with", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.i3d_backbone.InceptionI3d.extract_features": [[335, 343], ["None"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "output_dict", "=", "{", "}", "\n", "for", "end_point", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "            ", "if", "end_point", "in", "self", ".", "end_points", ":", "\n", "                ", "x", "=", "self", ".", "_modules", "[", "end_point", "]", "(", "x", ")", "\n", "output_dict", "[", "end_point", "]", "=", "x", "\n", "\n", "", "", "return", "output_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.__init__": [[143, 169], ["thumos_dataset.split_videos", "AFSD.common.videotransforms.RandomCrop", "AFSD.common.videotransforms.RandomHorizontalFlip", "AFSD.common.videotransforms.CenterCrop"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.split_videos"], ["    ", "def", "__init__", "(", "self", ",", "data_dict", ",", "\n", "video_infos", ",", "\n", "video_annos", ",", "\n", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_length'", "]", ",", "\n", "crop_size", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'crop_size'", "]", ",", "\n", "stride", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_stride'", "]", ",", "\n", "rgb_norm", "=", "True", ",", "\n", "training", "=", "True", ",", "\n", "origin_ratio", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "training_list", ",", "self", ".", "th", "=", "split_videos", "(", "\n", "video_infos", ",", "\n", "video_annos", ",", "\n", "clip_length", ",", "\n", "stride", "\n", ")", "\n", "# np.random.shuffle(self.training_list)", "\n", "self", ".", "data_dict", "=", "data_dict", "\n", "self", ".", "clip_length", "=", "clip_length", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "random_crop", "=", "videotransforms", ".", "RandomCrop", "(", "crop_size", ")", "\n", "self", ".", "random_flip", "=", "videotransforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", "\n", "self", ".", "center_crop", "=", "videotransforms", ".", "CenterCrop", "(", "crop_size", ")", "\n", "self", ".", "rgb_norm", "=", "rgb_norm", "\n", "self", ".", "training", "=", "training", "\n", "\n", "self", ".", "origin_ratio", "=", "origin_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.__len__": [[170, 172], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "training_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.get_bg": [[173, 186], ["times.extend", "times.sort", "list", "random.choice", "times.extend", "filter", "math.ceil", "math.floor", "range", "len", "math.floor", "math.ceil"], "methods", ["None"], ["", "def", "get_bg", "(", "self", ",", "annos", ",", "min_action", ")", ":", "\n", "        ", "annos", "=", "[", "[", "anno", "[", "0", "]", ",", "anno", "[", "1", "]", "]", "for", "anno", "in", "annos", "]", "\n", "times", "=", "[", "]", "\n", "for", "anno", "in", "annos", ":", "\n", "            ", "times", ".", "extend", "(", "anno", ")", "\n", "", "times", ".", "extend", "(", "[", "0", ",", "self", ".", "clip_length", "-", "1", "]", ")", "\n", "times", ".", "sort", "(", ")", "\n", "regions", "=", "[", "[", "times", "[", "i", "]", ",", "times", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "len", "(", "times", ")", "-", "1", ")", "]", "\n", "regions", "=", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "x", "not", "in", "annos", "and", "math", ".", "floor", "(", "x", "[", "1", "]", ")", "-", "math", ".", "ceil", "(", "x", "[", "0", "]", ")", ">", "min_action", ",", "regions", ")", ")", "\n", "# regions = list(filter(lambda x:x not in annos, regions))", "\n", "region", "=", "random", ".", "choice", "(", "regions", ")", "\n", "return", "[", "math", ".", "ceil", "(", "region", "[", "0", "]", ")", ",", "math", ".", "floor", "(", "region", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.augment_": [[187, 230], ["range", "math.ceil", "math.ceil", "input.clone", "random.choice", "math.floor", "math.ceil", "random.choice", "math.ceil", "thumos_dataset.THUMOS_Dataset.get_bg", "random.choice", "list", "range", "filter"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.get_bg"], ["", "def", "augment_", "(", "self", ",", "input", ",", "annos", ",", "th", ")", ":", "\n", "        ", "'''\n        input: (c, t, h, w)\n        target: (N, 3)\n        '''", "\n", "try", ":", "\n", "            ", "gt", "=", "random", ".", "choice", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", "-", "x", "[", "0", "]", ">", "2", "*", "th", ",", "annos", ")", ")", ")", "\n", "# gt = random.choice(annos)", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "input", ",", "annos", ",", "False", "\n", "", "gt_len", "=", "gt", "[", "1", "]", "-", "gt", "[", "0", "]", "\n", "region", "=", "range", "(", "math", ".", "floor", "(", "th", ")", ",", "math", ".", "ceil", "(", "gt_len", "-", "th", ")", ")", "\n", "t", "=", "random", ".", "choice", "(", "region", ")", "+", "math", ".", "ceil", "(", "gt", "[", "0", "]", ")", "\n", "l_len", "=", "math", ".", "ceil", "(", "t", "-", "gt", "[", "0", "]", ")", "\n", "r_len", "=", "math", ".", "ceil", "(", "gt", "[", "1", "]", "-", "t", ")", "\n", "try", ":", "\n", "            ", "bg", "=", "self", ".", "get_bg", "(", "annos", ",", "th", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "return", "input", ",", "annos", ",", "False", "\n", "", "start_idx", "=", "random", ".", "choice", "(", "range", "(", "bg", "[", "1", "]", "-", "bg", "[", "0", "]", "-", "th", ")", ")", "+", "bg", "[", "0", "]", "\n", "end_idx", "=", "start_idx", "+", "th", "\n", "\n", "new_input", "=", "input", ".", "clone", "(", ")", "\n", "# annos.remove(gt)", "\n", "if", "gt", "[", "1", "]", "<", "start_idx", ":", "\n", "            ", "new_input", "[", ":", ",", "t", ":", "t", "+", "th", ",", "]", "=", "input", "[", ":", ",", "start_idx", ":", "end_idx", ",", "]", "\n", "new_input", "[", ":", ",", "t", "+", "th", ":", "end_idx", ",", "]", "=", "input", "[", ":", ",", "t", ":", "start_idx", ",", "]", "\n", "\n", "new_annos", "=", "[", "[", "gt", "[", "0", "]", ",", "t", "]", ",", "[", "t", "+", "th", ",", "th", "+", "gt", "[", "1", "]", "]", ",", "[", "t", "+", "1", ",", "t", "+", "th", "-", "1", "]", "]", "\n", "# new_annos = [[t-math.ceil(th/5), t+math.ceil(th/5)],", "\n", "#            [t+th-math.ceil(th/5), t+th+math.ceil(th/5)],", "\n", "#            [t+1, t+th-1]]", "\n", "\n", "", "else", ":", "\n", "            ", "new_input", "[", ":", ",", "start_idx", ":", "t", "-", "th", "]", "=", "input", "[", ":", ",", "end_idx", ":", "t", ",", "]", "\n", "new_input", "[", ":", ",", "t", "-", "th", ":", "t", ",", "]", "=", "input", "[", ":", ",", "start_idx", ":", "end_idx", ",", "]", "\n", "\n", "new_annos", "=", "[", "[", "gt", "[", "0", "]", "-", "th", ",", "t", "-", "th", "]", ",", "[", "t", ",", "gt", "[", "1", "]", "]", ",", "[", "t", "-", "th", "+", "1", ",", "t", "-", "1", "]", "]", "\n", "# new_annos = [[t-th-math.ceil(th/5), t-th+math.ceil(th/5)],", "\n", "#            [t-math.ceil(th/5), t+math.ceil(th/5)],", "\n", "#            [t-th+1, t-1]]", "\n", "\n", "", "return", "new_input", ",", "new_annos", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.augment": [[231, 238], ["thumos_dataset.THUMOS_Dataset.augment_"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.augment_"], ["", "def", "augment", "(", "self", ",", "input", ",", "annos", ",", "th", ",", "max_iter", "=", "10", ")", ":", "\n", "        ", "flag", "=", "True", "\n", "i", "=", "0", "\n", "while", "flag", "and", "i", "<", "max_iter", ":", "\n", "            ", "new_input", ",", "new_annos", ",", "flag", "=", "self", ".", "augment_", "(", "input", ",", "annos", ",", "th", ")", "\n", "i", "+=", "1", "\n", "", "return", "new_input", ",", "new_annos", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.__getitem__": [[239, 276], ["torch.from_numpy().float", "thumos_dataset.THUMOS_Dataset.augment", "thumos_dataset.annos_transform", "numpy.stack", "numpy.stack", "numpy.stack", "torch.from_numpy().float", "numpy.zeros", "numpy.concatenate", "thumos_dataset.THUMOS_Dataset.random_flip", "thumos_dataset.THUMOS_Dataset.center_crop", "thumos_dataset.THUMOS_Dataset.random_crop", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float.copy"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.THUMOS_Dataset.augment", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.annos_transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_info", "=", "self", ".", "training_list", "[", "idx", "]", "\n", "video_data", "=", "self", ".", "data_dict", "[", "sample_info", "[", "'video_name'", "]", "]", "\n", "offset", "=", "sample_info", "[", "'offset'", "]", "\n", "annos", "=", "sample_info", "[", "'annos'", "]", "\n", "th", "=", "self", ".", "th", "[", "sample_info", "[", "'video_name'", "]", "]", "\n", "\n", "input_data", "=", "video_data", "[", ":", ",", "offset", ":", "offset", "+", "self", ".", "clip_length", "]", "\n", "c", ",", "t", ",", "h", ",", "w", "=", "input_data", ".", "shape", "\n", "if", "t", "<", "self", ".", "clip_length", ":", "\n", "# padding t to clip_length", "\n", "            ", "pad_t", "=", "self", ".", "clip_length", "-", "t", "\n", "zero_clip", "=", "np", ".", "zeros", "(", "[", "c", ",", "pad_t", ",", "h", ",", "w", "]", ",", "input_data", ".", "dtype", ")", "\n", "input_data", "=", "np", ".", "concatenate", "(", "[", "input_data", ",", "zero_clip", "]", ",", "1", ")", "\n", "\n", "# random crop and flip", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "input_data", "=", "self", ".", "random_flip", "(", "self", ".", "random_crop", "(", "input_data", ")", ")", "\n", "", "else", ":", "\n", "            ", "input_data", "=", "self", ".", "center_crop", "(", "input_data", ")", "\n", "\n", "# import pdb;pdb.set_trace()", "\n", "", "input_data", "=", "torch", ".", "from_numpy", "(", "input_data", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "rgb_norm", ":", "\n", "            ", "input_data", "=", "(", "input_data", "/", "255.0", ")", "*", "2.0", "-", "1.0", "\n", "", "ssl_input_data", ",", "ssl_annos", ",", "flag", "=", "self", ".", "augment", "(", "input_data", ",", "annos", ",", "th", ",", "1", ")", "\n", "annos", "=", "annos_transform", "(", "annos", ",", "self", ".", "clip_length", ")", "\n", "target", "=", "np", ".", "stack", "(", "annos", ",", "0", ")", "\n", "ssl_target", "=", "np", ".", "stack", "(", "ssl_annos", ",", "0", ")", "\n", "\n", "scores", "=", "np", ".", "stack", "(", "[", "\n", "sample_info", "[", "'start'", "]", ",", "\n", "sample_info", "[", "'end'", "]", "\n", "]", ",", "axis", "=", "0", ")", "\n", "scores", "=", "torch", ".", "from_numpy", "(", "scores", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "input_data", ",", "target", ",", "scores", ",", "ssl_input_data", ",", "ssl_target", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.get_class_index_map": [[13, 21], ["numpy.loadtxt", "enumerate", "int"], "function", ["None"], ["def", "get_class_index_map", "(", "class_info_path", "=", "'datasets/thumos14/annotations/Class_Index_Detection.txt'", ")", ":", "\n", "    ", "txt", "=", "np", ".", "loadtxt", "(", "class_info_path", ",", "dtype", "=", "str", ")", "\n", "originidx_to_idx", "=", "{", "}", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "idx", ",", "l", "in", "enumerate", "(", "txt", ")", ":", "\n", "        ", "originidx_to_idx", "[", "int", "(", "l", "[", "0", "]", ")", "]", "=", "idx", "+", "1", "\n", "idx_to_class", "[", "idx", "+", "1", "]", "=", "l", "[", "1", "]", "\n", "", "return", "originidx_to_idx", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.get_video_info": [[23, 34], ["pandas.DataFrame", "pandas.read_csv"], "function", ["None"], ["", "def", "get_video_info", "(", "video_info_path", ")", ":", "\n", "    ", "df_info", "=", "pd", ".", "DataFrame", "(", "pd", ".", "read_csv", "(", "video_info_path", ")", ")", ".", "values", "[", ":", "]", "\n", "video_infos", "=", "{", "}", "\n", "for", "info", "in", "df_info", ":", "\n", "        ", "video_infos", "[", "info", "[", "0", "]", "]", "=", "{", "\n", "'fps'", ":", "info", "[", "1", "]", ",", "\n", "'sample_fps'", ":", "info", "[", "2", "]", ",", "\n", "'count'", ":", "info", "[", "3", "]", ",", "\n", "'sample_count'", ":", "info", "[", "4", "]", "\n", "}", "\n", "", "return", "video_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.get_video_anno": [[36, 56], ["thumos_dataset.get_class_index_map", "pandas.DataFrame", "video_annos.get", "video_annos[].append", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map"], ["", "def", "get_video_anno", "(", "video_infos", ",", "video_anno_path", ",", "class_info_path", ")", ":", "\n", "    ", "df_anno", "=", "pd", ".", "DataFrame", "(", "pd", ".", "read_csv", "(", "video_anno_path", ")", ")", ".", "values", "[", ":", "]", "\n", "originidx_to_idx", ",", "idx_to_class", "=", "get_class_index_map", "(", "class_info_path", ")", "\n", "video_annos", "=", "{", "}", "\n", "for", "anno", "in", "df_anno", ":", "\n", "        ", "video_name", "=", "anno", "[", "0", "]", "\n", "originidx", "=", "anno", "[", "2", "]", "\n", "start_frame", "=", "anno", "[", "-", "2", "]", "\n", "end_frame", "=", "anno", "[", "-", "1", "]", "\n", "count", "=", "video_infos", "[", "video_name", "]", "[", "'count'", "]", "\n", "sample_count", "=", "video_infos", "[", "video_name", "]", "[", "'sample_count'", "]", "\n", "ratio", "=", "sample_count", "*", "1.0", "/", "count", "\n", "start_gt", "=", "start_frame", "*", "ratio", "\n", "end_gt", "=", "end_frame", "*", "ratio", "\n", "class_idx", "=", "originidx_to_idx", "[", "originidx", "]", "\n", "if", "video_annos", ".", "get", "(", "video_name", ")", "is", "None", ":", "\n", "            ", "video_annos", "[", "video_name", "]", "=", "[", "[", "start_gt", ",", "end_gt", ",", "class_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "video_annos", "[", "video_name", "]", ".", "append", "(", "[", "start_gt", ",", "end_gt", ",", "class_idx", "]", ")", "\n", "", "", "return", "video_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.annos_transform": [[58, 67], ["res.append"], "function", ["None"], ["", "def", "annos_transform", "(", "annos", ",", "clip_length", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "anno", "in", "annos", ":", "\n", "        ", "res", ".", "append", "(", "[", "\n", "anno", "[", "0", "]", "*", "1.0", "/", "clip_length", ",", "\n", "anno", "[", "1", "]", "*", "1.0", "/", "clip_length", ",", "\n", "anno", "[", "2", "]", "\n", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.split_videos": [[69, 130], ["video_annos.keys", "math.ceil", "min", "list", "range", "max", "min", "len", "min", "numpy.zeros", "numpy.zeros", "training_list.append", "cur_annos.append", "max", "numpy.clip", "numpy.clip", "int", "numpy.clip", "int", "numpy.clip", "max", "min", "round", "int", "round", "int", "round", "round"], "function", ["None"], ["", "def", "split_videos", "(", "video_infos", ",", "\n", "video_annos", ",", "\n", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_length'", "]", ",", "\n", "stride", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_stride'", "]", ")", ":", "\n", "# video_infos = get_video_info(config['dataset']['training']['video_info_path'])", "\n", "# video_annos = get_video_anno(video_infos,", "\n", "#                              config['dataset']['training']['video_anno_path'])", "\n", "    ", "training_list", "=", "[", "]", "\n", "min_anno_dict", "=", "{", "}", "\n", "for", "video_name", "in", "video_annos", ".", "keys", "(", ")", ":", "\n", "        ", "min_anno", "=", "clip_length", "\n", "sample_count", "=", "video_infos", "[", "video_name", "]", "[", "'sample_count'", "]", "\n", "annos", "=", "video_annos", "[", "video_name", "]", "\n", "if", "sample_count", "<=", "clip_length", ":", "\n", "            ", "offsetlist", "=", "[", "0", "]", "\n", "min_anno_len", "=", "min", "(", "[", "x", "[", "1", "]", "-", "x", "[", "0", "]", "for", "x", "in", "annos", "]", ")", "\n", "if", "min_anno_len", "<", "min_anno", ":", "\n", "                ", "min_anno", "=", "min_anno_len", "\n", "", "", "else", ":", "\n", "            ", "offsetlist", "=", "list", "(", "range", "(", "0", ",", "sample_count", "-", "clip_length", "+", "1", ",", "stride", ")", ")", "\n", "if", "(", "sample_count", "-", "clip_length", ")", "%", "stride", ":", "\n", "                ", "offsetlist", "+=", "[", "sample_count", "-", "clip_length", "]", "\n", "", "", "for", "offset", "in", "offsetlist", ":", "\n", "            ", "left", ",", "right", "=", "offset", "+", "1", ",", "offset", "+", "clip_length", "\n", "cur_annos", "=", "[", "]", "\n", "save_offset", "=", "False", "\n", "for", "anno", "in", "annos", ":", "\n", "                ", "max_l", "=", "max", "(", "left", ",", "anno", "[", "0", "]", ")", "\n", "min_r", "=", "min", "(", "right", ",", "anno", "[", "1", "]", ")", "\n", "ioa", "=", "(", "min_r", "-", "max_l", ")", "*", "1.0", "/", "(", "anno", "[", "1", "]", "-", "anno", "[", "0", "]", ")", "\n", "if", "ioa", ">=", "1.0", ":", "\n", "                    ", "save_offset", "=", "True", "\n", "", "if", "ioa", ">=", "0.5", ":", "\n", "                    ", "cur_annos", ".", "append", "(", "[", "max", "(", "anno", "[", "0", "]", "-", "offset", ",", "1", ")", ",", "\n", "min", "(", "anno", "[", "1", "]", "-", "offset", ",", "clip_length", ")", ",", "\n", "anno", "[", "2", "]", "]", ")", "\n", "", "", "if", "len", "(", "cur_annos", ")", ">", "0", ":", "\n", "                ", "min_anno_len", "=", "min", "(", "[", "x", "[", "1", "]", "-", "x", "[", "0", "]", "for", "x", "in", "cur_annos", "]", ")", "\n", "if", "min_anno_len", "<", "min_anno", ":", "\n", "                    ", "min_anno", "=", "min_anno_len", "\n", "", "", "if", "save_offset", ":", "\n", "                ", "start", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "end", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "for", "anno", "in", "cur_annos", ":", "\n", "                    ", "s", ",", "e", ",", "id", "=", "anno", "\n", "d", "=", "max", "(", "(", "e", "-", "s", ")", "/", "10.0", ",", "2.0", ")", "\n", "start_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "-", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "start_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "+", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "start", "[", "start_s", ":", "start_e", "]", "=", "1", "\n", "end_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "-", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "end_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "+", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "end", "[", "end_s", ":", "end_e", "]", "=", "1", "\n", "", "training_list", ".", "append", "(", "{", "\n", "'video_name'", ":", "video_name", ",", "\n", "'offset'", ":", "offset", ",", "\n", "'annos'", ":", "cur_annos", ",", "\n", "'start'", ":", "start", ",", "\n", "'end'", ":", "end", "\n", "}", ")", "\n", "", "", "min_anno_dict", "[", "video_name", "]", "=", "math", ".", "ceil", "(", "min_anno", ")", "\n", "", "return", "training_list", ",", "min_anno_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.load_video_data": [[132, 140], ["print", "tqdm.tqdm", "list", "numpy.load", "numpy.transpose", "video_infos.keys", "os.path.join"], "function", ["None"], ["", "def", "load_video_data", "(", "video_infos", ",", "npy_data_path", ")", ":", "\n", "    ", "data_dict", "=", "{", "}", "\n", "print", "(", "'loading video frame data ...'", ")", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "video_infos", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ")", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "npy_data_path", ",", "video_name", "+", "'.npy'", ")", ")", "\n", "data", "=", "np", ".", "transpose", "(", "data", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "data_dict", "[", "video_name", "]", "=", "data", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.detection_collate": [[278, 296], ["clips.append", "targets.append", "scores.append", "ssl_clips.append", "ssl_targets.append", "flags.append", "torch.stack", "torch.stack", "torch.stack", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "def", "detection_collate", "(", "batch", ")", ":", "\n", "    ", "targets", "=", "[", "]", "\n", "clips", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "\n", "ssl_targets", "=", "[", "]", "\n", "ssl_clips", "=", "[", "]", "\n", "flags", "=", "[", "]", "\n", "for", "sample", "in", "batch", ":", "\n", "        ", "clips", ".", "append", "(", "sample", "[", "0", "]", ")", "\n", "targets", ".", "append", "(", "torch", ".", "FloatTensor", "(", "sample", "[", "1", "]", ")", ")", "\n", "scores", ".", "append", "(", "sample", "[", "2", "]", ")", "\n", "\n", "ssl_clips", ".", "append", "(", "sample", "[", "3", "]", ")", "\n", "ssl_targets", ".", "append", "(", "torch", ".", "FloatTensor", "(", "sample", "[", "4", "]", ")", ")", "\n", "flags", ".", "append", "(", "sample", "[", "5", "]", ")", "\n", "", "return", "torch", ".", "stack", "(", "clips", ",", "0", ")", ",", "targets", ",", "torch", ".", "stack", "(", "scores", ",", "0", ")", ",", "torch", ".", "stack", "(", "ssl_clips", ",", "0", ")", ",", "ssl_targets", ",", "flags", "\n", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.MaxPool3dSamePadding.compute_pad": [[11, 16], ["max", "max"], "methods", ["None"], ["    ", "def", "compute_pad", "(", "self", ",", "dim", ",", "s", ")", ":", "\n", "        ", "if", "s", "%", "self", ".", "stride", "[", "dim", "]", "==", "0", ":", "\n", "            ", "return", "max", "(", "self", ".", "kernel_size", "[", "dim", "]", "-", "self", ".", "stride", "[", "dim", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "max", "(", "self", ".", "kernel_size", "[", "dim", "]", "-", "(", "s", "%", "self", ".", "stride", "[", "dim", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.MaxPool3dSamePadding.forward": [[17, 36], ["torch.pad.size", "layers.MaxPool3dSamePadding.compute_pad", "layers.MaxPool3dSamePadding.compute_pad", "layers.MaxPool3dSamePadding.compute_pad", "torch.pad", "torch.pad", "torch.pad", "super().forward"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.RPLHead.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# compute 'same' padding", "\n", "        ", "batch", ",", "channel", ",", "t", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "pad_t", "=", "self", ".", "compute_pad", "(", "0", ",", "t", ")", "\n", "pad_h", "=", "self", ".", "compute_pad", "(", "1", ",", "h", ")", "\n", "pad_w", "=", "self", ".", "compute_pad", "(", "2", ",", "w", ")", "\n", "\n", "pad_t_f", "=", "pad_t", "//", "2", "\n", "pad_t_b", "=", "pad_t", "-", "pad_t_f", "\n", "pad_h_f", "=", "pad_h", "//", "2", "\n", "pad_h_b", "=", "pad_h", "-", "pad_h_f", "\n", "pad_w_f", "=", "pad_w", "//", "2", "\n", "pad_w_b", "=", "pad_w", "-", "pad_w_f", "\n", "\n", "pad", "=", "[", "pad_w_f", ",", "pad_w_b", ",", "pad_h_f", ",", "pad_h_b", ",", "pad_t_f", ",", "pad_t_b", "]", "\n", "# print x.size()", "\n", "# print pad", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", ")", "\n", "return", "super", "(", "MaxPool3dSamePadding", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransposedConv1d.__init__": [[39, 62], ["torch.Module.__init__", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", ",", "\n", "activation_fn", "=", "F", ".", "relu", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "TransposedConv1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_use_batch_norm", "=", "use_batch_norm", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "\n", "self", ".", "transposed_conv1d", "=", "nn", ".", "ConvTranspose1d", "(", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", ",", "\n", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "use_bias", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "self", ".", "_output_channels", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransposedConv1d.forward": [[63, 70], ["layers.TransposedConv1d.transposed_conv1d", "layers.TransposedConv1d.bn", "layers.TransposedConv1d._activation_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "transposed_conv1d", "(", "x", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "_activation_fn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransposedConv3d.__init__": [[73, 96], ["torch.Module.__init__", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "output_padding", "=", "(", "1", ",", "0", ",", "0", ")", ",", "\n", "activation_fn", "=", "F", ".", "relu", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "TransposedConv3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_use_batch_norm", "=", "use_batch_norm", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "\n", "self", ".", "transposed_conv3d", "=", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", ",", "\n", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "use_bias", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "self", ".", "_output_channels", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransposedConv3d.forward": [[97, 104], ["layers.TransposedConv3d.transposed_conv3d", "layers.TransposedConv3d.bn", "layers.TransposedConv3d._activation_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "transposed_conv3d", "(", "x", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "_activation_fn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit3D.__init__": [[107, 136], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "'spatial_valid'", ",", "\n", "activation_fn", "=", "F", ".", "relu", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "False", ")", ":", "\n", "\n", "        ", "\"\"\"Initializes Unit3D module.\"\"\"", "\n", "super", "(", "Unit3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_output_channels", "=", "output_channels", "\n", "self", ".", "_kernel_shape", "=", "kernel_shape", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "_use_batch_norm", "=", "use_batch_norm", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "self", ".", "_use_bias", "=", "use_bias", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "self", ".", "_output_channels", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.01", ")", "\n", "\n", "", "self", ".", "conv3d", "=", "nn", ".", "Conv3d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "_output_channels", ",", "\n", "kernel_size", "=", "self", ".", "_kernel_shape", ",", "\n", "stride", "=", "self", ".", "_stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "self", ".", "_use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit3D.compute_pad": [[137, 142], ["max", "max"], "methods", ["None"], ["", "def", "compute_pad", "(", "self", ",", "dim", ",", "s", ")", ":", "\n", "        ", "if", "s", "%", "self", ".", "_stride", "[", "dim", "]", "==", "0", ":", "\n", "            ", "return", "max", "(", "self", ".", "_kernel_shape", "[", "dim", "]", "-", "self", ".", "_stride", "[", "dim", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "max", "(", "self", ".", "_kernel_shape", "[", "dim", "]", "-", "(", "s", "%", "self", ".", "_stride", "[", "dim", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit3D.forward": [[143, 176], ["layers.Unit3D.conv3d", "layers.Unit3D.size", "layers.Unit3D.compute_pad", "layers.Unit3D.compute_pad", "layers.Unit3D.compute_pad", "torch.pad", "torch.pad", "torch.pad", "layers.Unit3D.size", "layers.Unit3D.compute_pad", "torch.pad", "torch.pad", "torch.pad", "layers.Unit3D.bn", "layers.Unit3D._activation_fn"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# compute 'same' padding", "\n", "        ", "if", "self", ".", "padding", "==", "'same'", ":", "\n", "            ", "(", "batch", ",", "channel", ",", "t", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "pad_t", "=", "self", ".", "compute_pad", "(", "0", ",", "t", ")", "\n", "pad_h", "=", "self", ".", "compute_pad", "(", "1", ",", "h", ")", "\n", "pad_w", "=", "self", ".", "compute_pad", "(", "2", ",", "w", ")", "\n", "\n", "pad_t_f", "=", "pad_t", "//", "2", "\n", "pad_t_b", "=", "pad_t", "-", "pad_t_f", "\n", "pad_h_f", "=", "pad_h", "//", "2", "\n", "pad_h_b", "=", "pad_h", "-", "pad_h_f", "\n", "pad_w_f", "=", "pad_w", "//", "2", "\n", "pad_w_b", "=", "pad_w", "-", "pad_w_f", "\n", "\n", "pad", "=", "[", "pad_w_f", ",", "pad_w_b", ",", "pad_h_f", ",", "pad_h_b", ",", "pad_t_f", ",", "pad_t_b", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", ")", "\n", "\n", "", "if", "self", ".", "padding", "==", "'spatial_valid'", ":", "\n", "            ", "(", "batch", ",", "channel", ",", "t", ",", "h", ",", "w", ")", "=", "x", ".", "size", "(", ")", "\n", "pad_t", "=", "self", ".", "compute_pad", "(", "0", ",", "t", ")", "\n", "pad_t_f", "=", "pad_t", "//", "2", "\n", "pad_t_b", "=", "pad_t", "-", "pad_t_f", "\n", "\n", "pad", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "pad_t_f", ",", "pad_t_b", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", ")", "\n", "\n", "", "x", "=", "self", ".", "conv3d", "(", "x", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "_activation_fn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.__init__": [[179, 197], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'same'", ",", "\n", "activation_fn", "=", "F", ".", "relu", ",", "\n", "use_bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Unit1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1d", "=", "nn", ".", "Conv1d", "(", "in_channels", ",", "\n", "output_channels", ",", "\n", "kernel_shape", ",", "\n", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "_kernel_shape", "=", "kernel_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad": [[198, 203], ["max", "max"], "methods", ["None"], ["", "def", "compute_pad", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "%", "self", ".", "_stride", "==", "0", ":", "\n", "            ", "return", "max", "(", "self", ".", "_kernel_shape", "-", "self", ".", "_stride", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "max", "(", "self", ".", "_kernel_shape", "-", "(", "t", "%", "self", ".", "_stride", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.forward": [[204, 215], ["layers.Unit1D.conv1d", "layers.Unit1D.size", "layers.Unit1D.compute_pad", "torch.pad", "torch.pad", "torch.pad", "layers.Unit1D._activation_fn"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.Unit1D.compute_pad"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "_padding", "==", "'same'", ":", "\n", "            ", "batch", ",", "channel", ",", "t", "=", "x", ".", "size", "(", ")", "\n", "pad_t", "=", "self", ".", "compute_pad", "(", "t", ")", "\n", "pad_t_f", "=", "pad_t", "//", "2", "\n", "pad_t_b", "=", "pad_t", "-", "pad_t_f", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_t_f", ",", "pad_t_b", "]", ")", "\n", "", "x", "=", "self", ".", "conv1d", "(", "x", ")", "\n", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "_activation_fn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.PositionalEncoding.__init__": [[218, 229], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "layers.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.PositionalEncoding.forward": [[230, 242], ["layers.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"Inputs of forward function\n        Args:\n            x: the sequence fed to the positional encoder model (required).\n        Shape:\n            x: [sequence length, batch size, embed dim]\n            output: [sequence length, batch size, embed dim]\n        Examples:\n            >>> output = pos_encoder(x)\n        \"\"\"", "\n", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", ",", ":", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransformerHead.__init__": [[245, 263], ["torch.Module.__init__", "layers.PositionalEncoding", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "layers.TransformerHead.init_weights", "int"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransformerHead.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "\n", "output_channels", ",", "\n", "max_poslen", "=", "256", ",", "\n", "nheads", "=", "8", ",", "\n", "dropout", "=", "0.1", ",", "\n", "nlayers", "=", "2", ",", "\n", "activation_fn", "=", "F", ".", "relu", "\n", ")", ":", "\n", "        ", "super", "(", "TransformerHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pos_encoder", "=", "PositionalEncoding", "(", "in_channels", ",", "dropout", ",", "max_len", "=", "max_poslen", ")", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "in_channels", ")", "\n", "encoder_layers", "=", "TransformerEncoderLayer", "(", "in_channels", ",", "nheads", ",", "int", "(", "in_channels", "/", "2", ")", ",", "dropout", ")", "\n", "self", ".", "transformer_encoder", "=", "TransformerEncoder", "(", "encoder_layers", ",", "nlayers", ")", "\n", "self", ".", "ninp", "=", "in_channels", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "in_channels", ",", "output_channels", ")", "\n", "self", ".", "activation_fn", "=", "activation_fn", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransformerHead.init_weights": [[264, 268], ["torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "initrange", "=", "0.1", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "decoder", ".", "weight", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "decoder", ".", "weight", ",", "-", "initrange", ",", "initrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.TransformerHead.forward": [[301, 312], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "layers.TransformerHead.transformer_encoder", "layers.TransformerHead.decoder", "layers.TransformerHead.activation_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "        ", "\"\"\" src: size=(1, 512, T)\n        \"\"\"", "\n", "input", "=", "torch", ".", "einsum", "(", "'bdt->tbd'", ",", "src", ")", "\n", "# input = self.pos_encoder(input)  # (64, 1, 512)", "\n", "# input = self.layer_norm(input)", "\n", "output", "=", "self", ".", "transformer_encoder", "(", "input", ")", "# (64, 1, 512)", "\n", "output", "=", "self", ".", "decoder", "(", "output", ")", "# (64, 1, 15)", "\n", "if", "self", ".", "activation_fn", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "activation_fn", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.RPLHead.__init__": [[315, 326], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.RPLHead.centers.data.fill_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ",", "num_centers", "=", "1", ",", "init", "=", "'random'", ")", ":", "\n", "        ", "super", "(", "RPLHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_dim", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_centers", "=", "num_centers", "\n", "\n", "if", "init", "==", "'random'", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "0.1", "*", "torch", ".", "randn", "(", "num_classes", "*", "num_centers", ",", "self", ".", "feat_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", "*", "num_centers", ",", "self", ".", "feat_dim", ")", ")", "\n", "self", ".", "centers", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.layers.RPLHead.forward": [[327, 352], ["raw_features.size", "raw_features.permute().contiguous().view", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "raw_features.permute().contiguous().view.matmul.view().permute().contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "raw_features.permute().contiguous().view.matmul", "raw_features.permute().contiguous", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "center.t", "raw_features.permute().contiguous().view.matmul.view().permute", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "raw_features.permute", "raw_features.permute().contiguous().view.matmul.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "raw_features", ",", "center", "=", "None", ",", "metric", "=", "'l2'", ")", ":", "\n", "        ", "\"\"\" features: (B, D, T)\n        \"\"\"", "\n", "num_times", "=", "raw_features", ".", "size", "(", "-", "1", ")", "\n", "features", "=", "raw_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "feat_dim", ")", "# (B, D, T) --> (BT, D)", "\n", "if", "metric", "==", "'l2'", ":", "\n", "            ", "f_2", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "features", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# (BT, 1)", "\n", "if", "center", "is", "None", ":", "\n", "                ", "c_2", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "self", ".", "centers", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# (K+1) x 1", "\n", "dist", "=", "f_2", "-", "2", "*", "torch", ".", "matmul", "(", "features", ",", "torch", ".", "transpose", "(", "self", ".", "centers", ",", "1", ",", "0", ")", ")", "+", "torch", ".", "transpose", "(", "c_2", ",", "1", ",", "0", ")", "# (BT, K+1)", "\n", "", "else", ":", "\n", "                ", "c_2", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "center", ",", "2", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "dist", "=", "f_2", "-", "2", "*", "torch", ".", "matmul", "(", "features", ",", "torch", ".", "transpose", "(", "center", ",", "1", ",", "0", ")", ")", "+", "torch", ".", "transpose", "(", "c_2", ",", "1", ",", "0", ")", "\n", "", "dist", "=", "dist", "/", "float", "(", "features", ".", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "center", "is", "None", ":", "\n", "                ", "center", "=", "self", ".", "centers", "\n", "", "else", ":", "\n", "                ", "center", "=", "center", "\n", "", "dist", "=", "features", ".", "matmul", "(", "center", ".", "t", "(", ")", ")", "\n", "", "dist", "=", "torch", ".", "reshape", "(", "dist", ",", "[", "-", "1", ",", "self", ".", "num_classes", ",", "self", ".", "num_centers", "]", ")", "\n", "dist", "=", "torch", ".", "mean", "(", "dist", ",", "dim", "=", "2", ")", "# (BT, K+1)", "\n", "\n", "dist", "=", "dist", ".", "view", "(", "-", "1", ",", "num_times", ",", "self", ".", "num_classes", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (B, K+1, T)", "\n", "return", "dist", "", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.gen_denseflow_npy.gen_flow_image_from_video": [[17, 26], ["AFSD.common.thumos_dataset.get_video_info", "list", "os.path.exists", "os.makedirs", "AFSD.common.thumos_dataset.get_video_info.keys", "os.path.join", "os.system"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info"], ["def", "gen_flow_image_from_video", "(", "video_info_path", ",", "video_mp4_path", ",", "output_dir", ")", ":", "\n", "    ", "video_info", "=", "get_video_info", "(", "video_info_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "for", "video_name", "in", "list", "(", "video_info", ".", "keys", "(", ")", ")", ":", "\n", "        ", "mp4_path", "=", "os", ".", "path", ".", "join", "(", "video_mp4_path", ",", "video_name", "+", "'.mp4'", ")", "\n", "os", ".", "system", "(", "'denseflow {} -b=20 -a=tvl1 -s=1 -o={} -v'", ".", "format", "(", "mp4_path", ",", "\n", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.gen_denseflow_npy.gen_flow_npy_with_sample": [[28, 68], ["AFSD.common.thumos_dataset.get_video_info", "list", "os.path.exists", "os.makedirs", "AFSD.common.thumos_dataset.get_video_info.keys", "os.path.join", "os.path.exists", "sorted", "sorted", "zip", "numpy.stack", "numpy.save", "print", "glob.glob", "glob.glob", "len", "np.stack.append", "len", "os.path.join", "os.path.join", "cv2.imread", "cv2.imread", "np.stack.append", "AFSD.common.videotransforms.imresize", "AFSD.common.videotransforms.imresize", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.imresize", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.imresize"], ["", "", "def", "gen_flow_npy_with_sample", "(", "video_info_path", ",", "video_flow_img_path", ",", "output_dir", ",", "new_size", ")", ":", "\n", "    ", "video_info", "=", "get_video_info", "(", "video_info_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "for", "video_name", "in", "list", "(", "video_info", ".", "keys", "(", ")", ")", ":", "\n", "        ", "npy_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "video_name", "+", "'.npy'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "npy_path", ")", ":", "\n", "            ", "print", "(", "'{} is existed.'", ".", "format", "(", "npy_path", ")", ")", "\n", "continue", "\n", "", "fps", "=", "video_info", "[", "video_name", "]", "[", "'fps'", "]", "\n", "sample_fps", "=", "video_info", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "sample_count", "=", "video_info", "[", "video_name", "]", "[", "'sample_count'", "]", "\n", "\n", "step", "=", "fps", "/", "sample_fps", "\n", "flow_x_imgs", "=", "sorted", "(", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "video_flow_img_path", ",", "video_name", ",", "'flow_x_*.jpg'", ")", ")", ")", "\n", "flow_y_imgs", "=", "sorted", "(", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "video_flow_img_path", ",", "video_name", ",", "'flow_y_*.jpg'", ")", ")", ")", "\n", "cur_step", "=", ".0", "\n", "\n", "flows", "=", "[", "]", "\n", "for", "flow_x_img", ",", "flow_y_img", "in", "zip", "(", "flow_x_imgs", ",", "flow_y_imgs", ")", ":", "\n", "            ", "cur_step", "+=", "1", "\n", "if", "cur_step", ">=", "step", ":", "\n", "                ", "cur_step", "-=", "step", "\n", "flow_x", "=", "cv2", ".", "imread", "(", "flow_x_img", ")", "\n", "flow_x", "=", "imresize", "(", "flow_x", ",", "new_size", ",", "interp", "=", "'bicubic'", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "flow_y", "=", "cv2", ".", "imread", "(", "flow_y_img", ")", "\n", "flow_y", "=", "imresize", "(", "flow_y", ",", "new_size", ",", "interp", "=", "'bicubic'", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "flows", ".", "append", "(", "np", ".", "stack", "(", "[", "flow_x", ",", "flow_y", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "", "", "while", "len", "(", "flows", ")", "<", "sample_count", ":", "\n", "            ", "flows", ".", "append", "(", "flows", "[", "-", "1", "]", ")", "\n", "# print(len(flows), sample_count)", "\n", "", "assert", "len", "(", "flows", ")", "==", "sample_count", "\n", "flows", "=", "np", ".", "stack", "(", "flows", ",", "axis", "=", "0", ")", "\n", "assert", "flows", ".", "dtype", "==", "np", ".", "uint8", "\n", "# print(flows.shape)", "\n", "np", ".", "save", "(", "npy_path", ",", "flows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.gen_denseflow_npy.gen_flow_image": [[70, 86], ["AFSD.common.thumos_dataset.get_video_info", "list", "os.path.join", "numpy.load", "range", "os.system", "os.system", "AFSD.common.thumos_dataset.get_video_info.keys", "os.path.exists", "os.makedirs", "cv2.imwrite", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info"], ["", "", "def", "gen_flow_image", "(", "video_info_path", ",", "video_data_path", ",", "output_dir", ")", ":", "\n", "    ", "video_info", "=", "get_video_info", "(", "video_info_path", ")", "\n", "for", "video_name", "in", "list", "(", "video_info", ".", "keys", "(", ")", ")", "[", ":", "]", ":", "\n", "        ", "npy_path", "=", "os", ".", "path", ".", "join", "(", "video_data_path", ",", "video_name", "+", "'.npy'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "video_name", ")", "\n", "\n", "", "imgs", "=", "np", ".", "load", "(", "npy_path", ")", "\n", "imgs", "=", "imgs", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# convert RGB to BGR", "\n", "# gray_imgs = []", "\n", "for", "i", "in", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "im", "=", "imgs", "[", "i", "]", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "video_name", ",", "'%05d.jpg'", "%", "(", "i", "+", "1", ")", ")", ",", "im", ")", "\n", "", "os", ".", "system", "(", "'denseflow {} -b=20 -a=tvl1 -s=1 -if -v -o={}'", ".", "format", "(", "video_name", ",", "output_dir", ")", ")", "\n", "os", ".", "system", "(", "'rm {} -r'", ".", "format", "(", "video_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.gen_denseflow_npy.gen_flow_npy": [[88, 106], ["AFSD.common.thumos_dataset.get_video_info", "tqdm.tqdm", "os.path.exists", "os.makedirs", "list", "os.path.join", "os.path.join", "range", "np.stack.append", "numpy.stack", "numpy.save", "AFSD.common.thumos_dataset.get_video_info.keys", "numpy.stack", "np.stack.append", "cv2.imread", "cv2.imread", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info"], ["", "", "def", "gen_flow_npy", "(", "video_info_path", ",", "video_flow_img_path", ",", "output_dir", ")", ":", "\n", "    ", "video_info", "=", "get_video_info", "(", "video_info_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "video_info", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "video_flow_img_path", ",", "video_name", ")", "\n", "count", "=", "video_info", "[", "video_name", "]", "[", "'sample_count'", "]", "\n", "npy_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "video_name", "+", "'.npy'", ")", "\n", "flows", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "count", "-", "1", ")", ":", "\n", "            ", "flow_x", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "'flow_x_%05d.jpg'", "%", "i", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "flow_y", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "'flow_y_%05d.jpg'", "%", "i", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "flow", "=", "np", ".", "stack", "(", "[", "flow_x", ",", "flow_y", "]", ",", "axis", "=", "-", "1", ")", "\n", "flows", ".", "append", "(", "flow", ")", "\n", "", "flows", ".", "append", "(", "flows", "[", "-", "1", "]", ")", "\n", "flows", "=", "np", ".", "stack", "(", "flows", ",", "axis", "=", "0", ")", "\n", "# print(flows.shape, flows.dtype)", "\n", "np", ".", "save", "(", "npy_path", ",", "flows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.ResizeClip.__init__": [[15, 20], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.ResizeClip.__call__": [[21, 28], ["numpy.transpose", "range", "numpy.stack", "numpy.stack.transpose", "numpy.stack.append", "videotransforms.imresize"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.imresize"], ["", "", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "imgs", "=", "np", ".", "transpose", "(", "imgs", ",", "[", "1", ",", "2", ",", "3", ",", "0", "]", ")", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "res", ".", "append", "(", "imresize", "(", "imgs", "[", "i", "]", ",", "self", ".", "size", ",", "'bicubic'", ")", ")", "\n", "", "res", "=", "np", ".", "stack", "(", "res", ",", "0", ")", "\n", "return", "res", ".", "transpose", "(", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomCrop.__init__": [[38, 43], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomCrop.get_params": [[44, 61], ["random.randint", "random.randint"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "output_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random crop.\n        Args:\n            img (PIL Image): Image to be cropped.\n            output_size (tuple): Expected output size of the crop.\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for random crop.\n        \"\"\"", "\n", "c", ",", "t", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "if", "h", "!=", "th", "else", "0", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "if", "w", "!=", "tw", "else", "0", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomCrop.__call__": [[62, 68], ["videotransforms.RandomCrop.get_params"], "methods", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomCrop.get_params"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "\n", "        ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "imgs", ",", "self", ".", "size", ")", "\n", "\n", "imgs", "=", "imgs", "[", ":", ",", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomCrop.__repr__": [[69, 71], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(size={0})'", ".", "format", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.CenterCrop.__init__": [[81, 86], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.CenterCrop.__call__": [[87, 100], ["int", "int", "numpy.round", "numpy.round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "c", ",", "t", ",", "h", ",", "w", "=", "imgs", ".", "shape", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "i", "=", "int", "(", "np", ".", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "j", "=", "int", "(", "np", ".", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "\n", "return", "imgs", "[", ":", ",", ":", ",", "i", ":", "i", "+", "th", ",", "j", ":", "j", "+", "tw", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.CenterCrop.__repr__": [[101, 103], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(size={0})'", ".", "format", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__init__": [[111, 113], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__call__": [[114, 125], ["random.random", "numpy.flip().copy", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (seq Images): seq Images to be flipped.\n        Returns:\n            seq Images: Randomly flipped seq images.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "# c x t x h x w", "\n", "            ", "return", "np", ".", "flip", "(", "imgs", ",", "axis", "=", "3", ")", ".", "copy", "(", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.RandomHorizontalFlip.__repr__": [[126, 128], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(p={})'", ".", "format", "(", "self", ".", "p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.videotransforms.imresize": [[7, 12], ["PIL.Image.fromarray", "im.resize.resize", "numpy.array"], "function", ["None"], ["def", "imresize", "(", "img", ",", "size", ",", "interp", "=", "'bicubic'", ")", ":", "\n", "    ", "im", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "func", "=", "{", "'nearest'", ":", "0", ",", "'lanczos'", ":", "1", ",", "'bilinear'", ":", "2", ",", "'bicubic'", ":", "3", ",", "'cubic'", ":", "3", "}", "\n", "im", "=", "im", ".", "resize", "(", "size", ",", "func", "[", "interp", "]", ")", "\n", "return", "np", ".", "array", "(", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.merge_thumos_anet_gt.get_video_info": [[5, 15], ["copy.deepcopy", "data[].items", "open", "json.load"], "function", ["None"], ["def", "get_video_info", "(", "video_info_path", ",", "subset", "=", "'train'", ")", ":", "\n", "    ", "with", "open", "(", "video_info_path", ",", "'r'", ")", "as", "fobj", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "", "sub_data", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "video_info", "=", "{", "}", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "subset", "==", "v", "[", "'subset'", "]", ":", "\n", "            ", "video_info", "[", "videoid", "]", "=", "v", "\n", "", "", "sub_data", "[", "'database'", "]", "=", "video_info", "\n", "return", "sub_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.merge_thumos_anet_gt.exclude_overlapping": [[29, 46], ["anet_infos[].items", "open", "enumerate", "f.readlines", "excluded_classes.append", "line.strip"], "function", ["None"], ["", "def", "exclude_overlapping", "(", "anet_infos", ",", "overlapping_class_file", ")", ":", "\n", "# read the overlapping class names", "\n", "    ", "excluded_classes", "=", "[", "]", "\n", "with", "open", "(", "overlapping_class_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "excluded_classes", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "# filtering out the videos that contain excluded classes", "\n", "", "", "video_info", "=", "{", "}", "\n", "for", "video_name", ",", "info", "in", "anet_infos", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "exclude", "=", "False", "\n", "for", "ann", "in", "info", "[", "'annotations'", "]", ":", "\n", "            ", "if", "ann", "[", "'label'", "]", "in", "excluded_classes", ":", "\n", "                ", "exclude", "=", "True", "\n", "break", "\n", "", "", "if", "not", "exclude", ":", "\n", "            ", "video_info", "[", "video_name", "]", "=", "info", "\n", "", "", "return", "video_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.anet_test_gt.get_class_names": [[5, 11], ["open", "f.readlines", "all_class_names.append", "line.strip"], "function", ["None"], ["def", "get_class_names", "(", "class_info_path", ")", ":", "\n", "    ", "all_class_names", "=", "[", "]", "\n", "with", "open", "(", "class_info_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "all_class_names", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# each line is a class name", "\n", "", "", "return", "all_class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.anet_test_gt.get_video_info": [[13, 18], ["open", "json.load"], "function", ["None"], ["", "def", "get_video_info", "(", "video_info_path", ")", ":", "\n", "# load json data", "\n", "    ", "with", "open", "(", "video_info_path", ")", "as", "json_file", ":", "\n", "        ", "json_data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.anet_test_gt.get_filtered_database": [[20, 38], ["os.path.exists", "anet_test_gt.get_class_names", "video_info[].items", "copy.deepcopy", "len", "annos_filtered.append"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_class_names"], ["", "def", "get_filtered_database", "(", "class_file", ",", "video_info", ",", "subset", "=", "'validation'", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "class_file", ")", ",", "'File does not exist!\\n%s'", "%", "(", "class_file", ")", "\n", "class_names", "=", "get_class_names", "(", "class_file", ")", "\n", "\n", "database", "=", "{", "}", "\n", "for", "videoid", ",", "v", "in", "video_info", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "[", "'subset'", "]", "!=", "subset", ":", "\n", "            ", "continue", "# we only need the val subset", "\n", "", "annos_filtered", "=", "[", "]", "\n", "this_video_info", "=", "copy", ".", "deepcopy", "(", "video_info", "[", "'database'", "]", "[", "videoid", "]", ")", "\n", "for", "anno", "in", "v", "[", "'annotations'", "]", ":", "\n", "            ", "if", "anno", "[", "'label'", "]", "in", "class_names", ":", "\n", "                ", "annos_filtered", ".", "append", "(", "anno", ")", "\n", "", "", "if", "len", "(", "annos_filtered", ")", ">", "0", ":", "# not empty after filtering", "\n", "            ", "this_video_info", "[", "'annotations'", "]", "=", "annos_filtered", "\n", "database", "[", "videoid", "]", "=", "this_video_info", "\n", "", "", "result", "=", "{", "'database'", ":", "database", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map": [[8, 16], ["numpy.loadtxt", "enumerate", "int"], "function", ["None"], ["def", "get_class_index_map", "(", "class_info_path", ")", ":", "\n", "    ", "txt", "=", "np", ".", "loadtxt", "(", "class_info_path", ",", "dtype", "=", "str", ")", "\n", "originidx_to_idx", "=", "{", "}", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "idx", ",", "l", "in", "enumerate", "(", "txt", ")", ":", "\n", "        ", "originidx_to_idx", "[", "int", "(", "l", "[", "0", "]", ")", "]", "=", "idx", "+", "1", "\n", "idx_to_class", "[", "idx", "+", "1", "]", "=", "l", "[", "1", "]", "\n", "", "return", "originidx_to_idx", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.write_to_txt": [[17, 21], ["open", "originidx_to_idx.items", "f.writelines"], "function", ["None"], ["", "def", "write_to_txt", "(", "filename", ",", "idx_to_class", ",", "originidx_to_idx", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "ori_idx", ",", "idx", "in", "originidx_to_idx", ".", "items", "(", ")", ":", "\n", "            ", "f", ".", "writelines", "(", "f'{ori_idx} {idx_to_class[idx]}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.csv_filtering": [[22, 28], ["os.path.exists", "pandas.read_csv", "df_anno.dropna.dropna", "df_anno.dropna.drop", "df_anno.dropna.to_csv", "df_anno[].isin"], "function", ["None"], ["", "", "", "def", "csv_filtering", "(", "result_csv", ",", "anno_file", ",", "filtered_class", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "anno_file", ")", ",", "f'File does not exist! {anno_file}'", "\n", "df_anno", "=", "pd", ".", "read_csv", "(", "anno_file", ")", "\n", "df_anno", "=", "df_anno", ".", "dropna", "(", "how", "=", "'all'", ")", "\n", "df_anno", ".", "drop", "(", "df_anno", "[", "df_anno", "[", "'type'", "]", ".", "isin", "(", "filtered_class", ")", "]", ".", "index", ",", "inplace", "=", "True", ")", "\n", "df_anno", ".", "to_csv", "(", "result_csv", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.json_filtering": [[29, 50], ["os.path.exists", "copy.deepcopy", "data[].items", "open", "json.load", "open", "json.dump", "len", "copy.deepcopy", "new_gt[].pop", "anno_list.append"], "function", ["None"], ["", "def", "json_filtering", "(", "result_json", ",", "gt_file", ",", "filtered_class", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "gt_file", ")", ",", "f'File does not exist! {gt_file}'", "\n", "with", "open", "(", "gt_file", ",", "'r'", ")", "as", "fobj", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "", "new_gt", "=", "copy", ".", "deepcopy", "(", "data", ")", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "# iterate on each segments", "\n", "        ", "anno_list", "=", "[", "]", "\n", "for", "ann", "in", "v", "[", "'annotations'", "]", ":", "\n", "            ", "if", "ann", "[", "'label'", "]", "not", "in", "filtered_class", ":", "\n", "                ", "anno_list", ".", "append", "(", "ann", ")", "\n", "", "", "if", "len", "(", "anno_list", ")", ">", "0", ":", "# not empty after filtering", "\n", "            ", "v_new", "=", "copy", ".", "deepcopy", "(", "v", ")", "\n", "v_new", "[", "'annotations'", "]", "=", "anno_list", "\n", "new_gt", "[", "'database'", "]", "[", "videoid", "]", "=", "v_new", "\n", "", "else", ":", "\n", "# if empty, delete annotation of this video", "\n", "            ", "new_gt", "[", "'database'", "]", ".", "pop", "(", "videoid", ")", "\n", "# save to json file", "\n", "", "", "with", "open", "(", "result_json", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "new_gt", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.download.download": [[16, 58], ["isinstance", "isinstance", "os.path.exists", "len", "os.path.exists", "print", "subprocess.check_output"], "function", ["None"], ["def", "download", "(", "video_identifier", ",", "\n", "output_filename", ",", "\n", "num_attempts", "=", "5", ",", "\n", "url_base", "=", "'https://www.youtube.com/watch?v='", ")", ":", "\n", "    ", "\"\"\"Download a video from youtube if exists and is not blocked.\n    arguments:\n    ---------\n    video_identifier: str\n        Unique YouTube video identifier (11 characters)\n    output_filename: str\n        File path where the video will be stored.\n    \"\"\"", "\n", "# Defensive argument checking.", "\n", "assert", "isinstance", "(", "video_identifier", ",", "str", ")", ",", "'video_identifier must be string'", "\n", "assert", "isinstance", "(", "output_filename", ",", "str", ")", ",", "'output_filename must be string'", "\n", "assert", "len", "(", "video_identifier", ")", "==", "11", ",", "'video_identifier must have length 11'", "\n", "\n", "status", "=", "False", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_filename", ")", ":", "\n", "        ", "command", "=", "[", "\n", "'youtube-dl'", ",", "'--quiet'", ",", "'--no-warnings'", ",", "'--no-check-certificate'", ",", "\n", "'-f'", ",", "'mp4'", ",", "'-o'", ",", "\n", "'\"%s\"'", "%", "output_filename", ",", "\n", "'\"%s\"'", "%", "(", "url_base", "+", "video_identifier", ")", "\n", "]", "\n", "command", "=", "' '", ".", "join", "(", "command", ")", "\n", "print", "(", "command", ")", "\n", "attempts", "=", "0", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "subprocess", ".", "check_output", "(", "\n", "command", ",", "shell", "=", "True", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "                ", "attempts", "+=", "1", "\n", "if", "attempts", "==", "num_attempts", ":", "\n", "                    ", "return", "status", ",", "'Fail'", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "# Check if the video was successfully saved.", "\n", "", "", "", "status", "=", "os", ".", "path", ".", "exists", "(", "output_filename", ")", "\n", "return", "status", ",", "'Downloaded'", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.download.download_wrapper": [[60, 71], ["os.path.join", "os.path.exists", "download.download", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.download.download"], ["", "def", "download_wrapper", "(", "youtube_id", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Wrapper for parallel processing purposes.\"\"\"", "\n", "# we do this to align with names in annotations", "\n", "output_filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "youtube_id", "+", "'.mp4'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_filename", ")", ":", "\n", "        ", "status", "=", "tuple", "(", "[", "youtube_id", ",", "True", ",", "'Exists'", "]", ")", "\n", "return", "status", "\n", "\n", "", "downloaded", ",", "log", "=", "download", "(", "youtube_id", ",", "output_filename", ")", "\n", "status", "=", "tuple", "(", "[", "youtube_id", ",", "downloaded", ",", "log", "]", ")", "\n", "return", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.download.main": [[73, 91], ["mmcv.load().keys", "mmcv.dump", "os.path.exists", "os.makedirs", "mmcv.load", "status_list.append", "joblib.Parallel", "download.download_wrapper", "joblib.delayed"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.download.download_wrapper"], ["", "def", "main", "(", "input", ",", "output_dir", ",", "num_jobs", "=", "24", ")", ":", "\n", "# Reading and parsing ActivityNet.", "\n", "    ", "youtube_ids", "=", "mmcv", ".", "load", "(", "input", ")", ".", "keys", "(", ")", "\n", "# Creates folders where videos will be saved later.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "# Download all clips.", "\n", "", "if", "num_jobs", "==", "1", ":", "\n", "        ", "status_list", "=", "[", "]", "\n", "for", "index", "in", "youtube_ids", ":", "\n", "            ", "status_list", ".", "append", "(", "download_wrapper", "(", "index", ",", "output_dir", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "status_list", "=", "Parallel", "(", "n_jobs", "=", "num_jobs", ")", "(", "\n", "delayed", "(", "download_wrapper", ")", "(", "index", ",", "output_dir", ")", "\n", "for", "index", "in", "youtube_ids", ")", "\n", "\n", "# Save download report.", "\n", "", "mmcv", ".", "dump", "(", "status_list", ",", "'download_report.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_class_names": [[8, 14], ["open", "f.readlines", "all_class_names.append", "line.strip"], "function", ["None"], ["def", "get_class_names", "(", "class_info_path", ")", ":", "\n", "    ", "all_class_names", "=", "[", "]", "\n", "with", "open", "(", "class_info_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "all_class_names", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "# each line is a class name", "\n", "", "", "return", "all_class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.write_to_txt": [[16, 20], ["open", "f.writelines"], "function", ["None"], ["", "def", "write_to_txt", "(", "filename", ",", "class_names", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "name", "in", "class_names", ":", "\n", "            ", "f", ".", "writelines", "(", "name", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info": [[22, 27], ["open", "json.load"], "function", ["None"], ["", "", "", "def", "get_video_info", "(", "video_info_path", ")", ":", "\n", "# load json data", "\n", "    ", "with", "open", "(", "video_info_path", ")", "as", "json_file", ":", "\n", "        ", "json_data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.split_classes_random": [[29, 37], ["len", "numpy.random.choice", "list", "int", "set", "set"], "function", ["None"], ["", "def", "split_classes_random", "(", "all_classes", ",", "unknown_ratio", "=", "0.25", ")", ":", "\n", "    ", "num_cls", "=", "len", "(", "all_classes", ")", "\n", "# randomly select 1/4 categories (=50) as the unknown", "\n", "unknown", "=", "np", ".", "random", ".", "choice", "(", "num_cls", ",", "size", "=", "int", "(", "num_cls", "*", "unknown_ratio", ")", ",", "replace", "=", "False", ")", "\n", "classes_unknown", "=", "[", "all_classes", "[", "idx", "]", "for", "idx", "in", "unknown", "]", "\n", "# the rest 3/4 classes are known classes", "\n", "classes_known", "=", "list", "(", "set", "(", "class_names_all", ")", "-", "set", "(", "classes_unknown", ")", ")", "\n", "return", "classes_known", ",", "classes_unknown", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_class_ids": [[39, 45], ["enumerate"], "function", ["None"], ["", "def", "get_class_ids", "(", "classes_known", ",", "classes_unknown", ")", ":", "\n", "# coding the class ID, starting from the known classes", "\n", "    ", "class_to_id", "=", "{", "}", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "classes_known", "+", "classes_unknown", ")", ":", "\n", "        ", "class_to_id", "[", "name", "]", "=", "idx", "+", "1", "# known + unknown class IDs: [1, 2, ..., K + U]", "\n", "", "return", "class_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.filtering_unknown": [[47, 78], ["list", "copy.deepcopy", "open", "json.dump", "video_info.keys", "enumerate", "len", "annos_new.append", "annos_filtered.append"], "function", ["None"], ["", "def", "filtering_unknown", "(", "result_file", ",", "video_info", ",", "known_classes", ",", "class_to_id", ")", ":", "\n", "    ", "filtered_video_info", "=", "{", "}", "\n", "for", "video_name", "in", "list", "(", "video_info", ".", "keys", "(", ")", ")", "[", ":", "]", ":", "\n", "        ", "this_video_info", "=", "copy", ".", "deepcopy", "(", "video_info", "[", "video_name", "]", ")", "\n", "subset", "=", "this_video_info", "[", "'subset'", "]", "\n", "annotations", "=", "this_video_info", "[", "'annotations'", "]", "# a list of dict()", "\n", "if", "subset", "==", "'training'", ":", "# need to be filtering by known classes", "\n", "# get the filtered anno list", "\n", "            ", "annos_filtered", "=", "[", "]", "\n", "for", "anno", "in", "annotations", ":", "\n", "                ", "if", "anno", "[", "'label'", "]", "in", "known_classes", ":", "\n", "                    ", "anno", "[", "'label_id'", "]", "=", "class_to_id", "[", "anno", "[", "'label'", "]", "]", "# update the class_id", "\n", "annos_filtered", ".", "append", "(", "anno", ")", "\n", "# update video-level anno", "\n", "", "", "if", "len", "(", "annos_filtered", ")", ">", "0", ":", "# not empty after filtering", "\n", "                ", "this_video_info", "[", "'annotations'", "]", "=", "annos_filtered", "\n", "filtered_video_info", "[", "video_name", "]", "=", "this_video_info", "\n", "", "else", ":", "\n", "                ", "continue", "# if empty, discard the annotation of this video", "\n", "", "", "else", ":", "\n", "# for validation, only need to update class_id", "\n", "            ", "annos_new", "=", "[", "]", "\n", "for", "i", ",", "anno", "in", "enumerate", "(", "annotations", ")", ":", "\n", "                ", "anno", "[", "'label_id'", "]", "=", "class_to_id", "[", "anno", "[", "'label'", "]", "]", "# update the class_id", "\n", "annos_new", ".", "append", "(", "anno", ")", "\n", "", "this_video_info", "[", "'annotations'", "]", "=", "annos_new", "\n", "filtered_video_info", "[", "video_name", "]", "=", "this_video_info", "\n", "# save", "\n", "", "", "with", "open", "(", "result_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "filtered_video_info", ",", "f", ")", "\n", "", "return", "filtered_video_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_anno_stats": [[80, 90], ["list", "num_actions.append", "set", "num_classes.append", "video_info.keys", "len", "set.add", "len"], "function", ["None"], ["", "def", "get_anno_stats", "(", "video_info", ")", ":", "\n", "    ", "num_classes", ",", "num_actions", "=", "[", "]", ",", "[", "]", "\n", "for", "video_name", "in", "list", "(", "video_info", ".", "keys", "(", ")", ")", "[", ":", "]", ":", "\n", "        ", "annotations", "=", "video_info", "[", "video_name", "]", "[", "'annotations'", "]", "\n", "num_actions", ".", "append", "(", "len", "(", "annotations", ")", ")", "\n", "class_set", "=", "set", "(", ")", "\n", "for", "anno", "in", "annotations", ":", "\n", "            ", "class_set", ".", "add", "(", "anno", "[", "'label'", "]", ")", "\n", "", "num_classes", ".", "append", "(", "len", "(", "class_set", ")", ")", "\n", "", "return", "num_classes", ",", "num_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.get_activity_index": [[9, 17], ["numpy.loadtxt", "enumerate"], "function", ["None"], ["def", "get_activity_index", "(", "class_info_path", ",", "openset", "=", "False", ")", ":", "\n", "    ", "txt", "=", "np", ".", "loadtxt", "(", "class_info_path", ",", "dtype", "=", "str", ")", "\n", "class_to_idx", "=", "{", "}", "\n", "if", "openset", ":", "\n", "        ", "class_to_idx", "[", "'__unknown__'", "]", "=", "0", "# 0 is reserved for unknown in open set", "\n", "", "for", "idx", ",", "l", "in", "enumerate", "(", "txt", ")", ":", "\n", "        ", "class_to_idx", "[", "l", "[", "1", "]", "]", "=", "idx", "+", "1", "# starting from 1 to K (K=15 for thumos14)", "\n", "", "return", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.get_curve_points": [[19, 31], ["numpy.hstack", "numpy.hstack", "range", "max", "numpy.where", "len"], "function", ["None"], ["", "def", "get_curve_points", "(", "prec", ",", "rec", ",", "interpolate", "=", "True", ")", ":", "\n", "    ", "\"\"\"Interpolated AP - VOCdevkit from VOC 2011.\n    \"\"\"", "\n", "if", "not", "interpolate", ":", "\n", "        ", "return", "rec", ",", "prec", "\n", "", "mprec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "prec", ",", "[", "0", "]", "]", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "rec", ",", "[", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mprec", ")", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "mprec", "[", "i", "]", "=", "max", "(", "mprec", "[", "i", "]", ",", "mprec", "[", "i", "+", "1", "]", ")", "\n", "", "idx", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "# ap = np.sum((mrec[idx] - mrec[idx - 1]) * mprec[idx])", "\n", "return", "mrec", "[", "idx", "]", ",", "mprec", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.plot_stats": [[33, 57], ["numpy.zeros", "numpy.arange", "matplotlib.subplots", "enumerate", "ax.set_ylabel", "ax.set_xticks", "ax.set_xticklabels", "ax.legend", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.savefig", "len", "zip", "[].sum", "[].sum", "[].sum", "[].sum", "[].sum", "[].sum", "[].sum", "ax.bar", "len", "ax.bar_label", "len"], "function", ["None"], ["", "def", "plot_stats", "(", "width", "=", "0.15", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "Nums", "=", "np", ".", "zeros", "(", "(", "len", "(", "tious", ")", ",", "7", ")", ")", "\n", "xrng", "=", "np", ".", "arange", "(", "len", "(", "items", ")", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "for", "i", ",", "(", "iou", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "tious", ",", "colors", ")", ")", ":", "\n", "        ", "Nums", "[", "i", ",", "0", "]", "=", "stats", "[", "'tp_u2u'", "]", "[", "i", "]", ".", "sum", "(", ")", "# N_tp_u2u", "\n", "Nums", "[", "i", ",", "1", "]", "=", "stats", "[", "'tp_k2k'", "]", "[", "i", "]", ".", "sum", "(", ")", "# N_tp_k2k", "\n", "Nums", "[", "i", ",", "2", "]", "=", "stats", "[", "'fp_u2k'", "]", "[", "i", "]", ".", "sum", "(", ")", "# N_fp_u2k", "\n", "Nums", "[", "i", ",", "3", "]", "=", "stats", "[", "'fp_k2k'", "]", "[", "i", "]", ".", "sum", "(", ")", "# N_fp_k2k", "\n", "Nums", "[", "i", ",", "4", "]", "=", "stats", "[", "'fp_k2u'", "]", "[", "i", "]", ".", "sum", "(", ")", "# N_fp_k2u", "\n", "Nums", "[", "i", ",", "5", "]", "=", "stats", "[", "'fp_bg2u'", "]", "[", "i", "]", ".", "sum", "(", ")", "# N_fp_bg2u", "\n", "Nums", "[", "i", ",", "6", "]", "=", "stats", "[", "'fp_bg2k'", "]", "[", "i", "]", ".", "sum", "(", ")", "# N_fp_bg2k", "\n", "\n", "h", "=", "ax", ".", "bar", "(", "xrng", "+", "(", "i", "-", "2", ")", "*", "width", ",", "Nums", "[", "i", "]", ",", "width", ",", "label", "=", "f'tIoU={iou}'", ",", "color", "=", "c", ")", "\n", "if", "i", "==", "len", "(", "tious", ")", "-", "1", ":", "\n", "            ", "ax", ".", "bar_label", "(", "h", ",", "padding", "=", "3", ")", "\n", "\n", "", "", "ax", ".", "set_ylabel", "(", "'Number of Segments'", ",", "fontsize", "=", "fontsize", ")", "\n", "ax", ".", "set_xticks", "(", "xrng", ")", "\n", "ax", ".", "set_xticklabels", "(", "items", ",", "fontsize", "=", "fontsize", "-", "3", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f'../output/{exp_tag}/split_{split}/stats.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.get_mean_stds": [[59, 61], ["numpy.mean", "numpy.std", "numpy.sqrt", "len"], "function", ["None"], ["", "def", "get_mean_stds", "(", "data", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "data", ")", ",", "np", ".", "std", "(", "data", ")", "/", "np", ".", "sqrt", "(", "len", "(", "data", ")", ")", "*", "1.96", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.plot_ood_scores": [[63, 93], ["numpy.arange", "matplotlib.subplots", "numpy.zeros", "numpy.zeros", "enumerate", "ax.set_ylim", "ax.set_ylabel", "ax.set_xticks", "ax.set_xticklabels", "ax.legend", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "len", "numpy.array", "zip", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "ax.bar", "numpy.array", "len", "len", "[].sum", "[].sum", "[].sum", "[].sum"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds"], ["", "def", "plot_ood_scores", "(", "width", "=", "0.25", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "xrng", "=", "np", ".", "arange", "(", "len", "(", "items", ")", ")", "\n", "tious_used", "=", "[", "0.3", ",", "0.5", ",", "0.7", "]", "\n", "# score distribution", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "all_scores", "=", "np", ".", "array", "(", "stats", "[", "'ood_scores'", "]", ")", "if", "exp_tag", "==", "'default'", "else", "1", "-", "np", ".", "array", "(", "stats", "[", "'ood_scores'", "]", ")", "\n", "mean_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "tious_used", ")", ",", "7", ")", ")", "\n", "std_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "tious_used", ")", ",", "7", ")", ")", "\n", "for", "i", ",", "(", "iou", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "tious_used", ",", "colors", ")", ")", ":", "\n", "        ", "mean_scores", "[", "i", ",", "0", "]", ",", "std_scores", "[", "i", ",", "0", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'tp_u2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "1", "]", ",", "std_scores", "[", "i", ",", "1", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'tp_k2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "2", "]", ",", "std_scores", "[", "i", ",", "2", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_u2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "3", "]", ",", "std_scores", "[", "i", ",", "3", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_k2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "4", "]", ",", "std_scores", "[", "i", ",", "4", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_k2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "5", "]", ",", "std_scores", "[", "i", ",", "5", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_bg2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "6", "]", ",", "std_scores", "[", "i", ",", "6", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_bg2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "\n", "h", "=", "ax", ".", "bar", "(", "xrng", "+", "(", "i", "-", "1", ")", "*", "width", ",", "mean_scores", "[", "i", "]", ",", "yerr", "=", "std_scores", "[", "i", "]", ",", "width", "=", "width", ",", "label", "=", "f'tIoU={iou}'", ",", "align", "=", "'center'", ",", "alpha", "=", "0.5", ",", "ecolor", "=", "'black'", ",", "color", "=", "c", ")", "\n", "\n", "", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylabel", "(", "'OOD Scores'", ",", "fontsize", "=", "fontsize", ")", "\n", "ax", ".", "set_xticks", "(", "xrng", ")", "\n", "ax", ".", "set_xticklabels", "(", "items", ",", "fontsize", "=", "fontsize", "-", "3", ")", "\n", "# loc = 'lower center' if exp_tag == 'default' else 'upper center'", "\n", "ax", ".", "legend", "(", "fontsize", "=", "fontsize", ",", "loc", "=", "'upper center'", ",", "ncol", "=", "3", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f'../output/{exp_tag}/split_{split}/stats_ood_scores.png'", ")", "\n", "plt", ".", "savefig", "(", "f'../output/{exp_tag}/split_{split}/stats_ood_scores.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.plot_scores": [[95, 122], ["numpy.arange", "matplotlib.subplots", "numpy.array", "numpy.zeros", "numpy.zeros", "enumerate", "ax.set_ylabel", "ax.set_xticks", "ax.set_xticklabels", "ax.legend", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.savefig", "len", "zip", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "ax.bar", "len", "len", "[].sum", "[].sum", "[].sum", "[].sum"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds"], ["", "def", "plot_scores", "(", "width", "=", "0.15", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "xrng", "=", "np", ".", "arange", "(", "len", "(", "items", ")", ")", "\n", "# score distribution", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "all_scores", "=", "np", ".", "array", "(", "stats", "[", "'scores'", "]", ")", "\n", "all_max_tious", "=", "stats", "[", "'max_tious'", "]", "\n", "mean_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "tious", ")", ",", "7", ")", ")", "\n", "std_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "tious", ")", ",", "7", ")", ")", "\n", "for", "i", ",", "(", "iou", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "tious", ",", "colors", ")", ")", ":", "\n", "        ", "mean_scores", "[", "i", ",", "0", "]", ",", "std_scores", "[", "i", ",", "0", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'tp_u2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "1", "]", ",", "std_scores", "[", "i", ",", "1", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'tp_k2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "2", "]", ",", "std_scores", "[", "i", ",", "2", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_u2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "3", "]", ",", "std_scores", "[", "i", ",", "3", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_k2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "4", "]", ",", "std_scores", "[", "i", ",", "4", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_k2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "5", "]", ",", "std_scores", "[", "i", ",", "5", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_bg2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_scores", "[", "i", ",", "6", "]", ",", "std_scores", "[", "i", ",", "6", "]", "=", "get_mean_stds", "(", "all_scores", "[", "stats", "[", "'fp_bg2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "\n", "h", "=", "ax", ".", "bar", "(", "xrng", "+", "(", "i", "-", "2", ")", "*", "width", ",", "mean_scores", "[", "i", "]", ",", "yerr", "=", "std_scores", "[", "i", "]", ",", "width", "=", "width", ",", "label", "=", "f'tIoU={iou}'", ",", "align", "=", "'center'", ",", "alpha", "=", "0.5", ",", "ecolor", "=", "'black'", ",", "color", "=", "c", ")", "\n", "\n", "", "ax", ".", "set_ylabel", "(", "'Confidence Scores of Segments'", ",", "fontsize", "=", "fontsize", ")", "\n", "ax", ".", "set_xticks", "(", "xrng", ")", "\n", "ax", ".", "set_xticklabels", "(", "items", ",", "fontsize", "=", "fontsize", "-", "3", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f'../output/{exp_tag}/split_{split}/stats_scores.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.plot_max_tious": [[124, 150], ["numpy.arange", "matplotlib.subplots", "numpy.array", "numpy.zeros", "numpy.zeros", "enumerate", "ax.set_ylabel", "ax.set_xticks", "ax.set_xticklabels", "ax.legend", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.savefig", "len", "zip", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "analyze_stats.get_mean_stds", "ax.bar", "len", "len", "[].sum", "[].sum", "[].sum", "[].sum"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds"], ["", "def", "plot_max_tious", "(", "width", "=", "0.15", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "xrng", "=", "np", ".", "arange", "(", "len", "(", "items", ")", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "all_max_tious", "=", "np", ".", "array", "(", "stats", "[", "'max_tious'", "]", ")", "\n", "\n", "mean_ious", "=", "np", ".", "zeros", "(", "(", "len", "(", "tious", ")", ",", "7", ")", ")", "\n", "std_ious", "=", "np", ".", "zeros", "(", "(", "len", "(", "tious", ")", ",", "7", ")", ")", "\n", "for", "i", ",", "(", "iou", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "tious", ",", "colors", ")", ")", ":", "\n", "        ", "mean_ious", "[", "i", ",", "0", "]", ",", "std_ious", "[", "i", ",", "0", "]", "=", "get_mean_stds", "(", "all_max_tious", "[", "stats", "[", "'tp_u2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_ious", "[", "i", ",", "1", "]", ",", "std_ious", "[", "i", ",", "1", "]", "=", "get_mean_stds", "(", "all_max_tious", "[", "stats", "[", "'tp_k2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_ious", "[", "i", ",", "2", "]", ",", "std_ious", "[", "i", ",", "2", "]", "=", "get_mean_stds", "(", "all_max_tious", "[", "stats", "[", "'fp_u2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_ious", "[", "i", ",", "3", "]", ",", "std_ious", "[", "i", ",", "3", "]", "=", "get_mean_stds", "(", "all_max_tious", "[", "stats", "[", "'fp_k2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "mean_ious", "[", "i", ",", "4", "]", ",", "std_ious", "[", "i", ",", "4", "]", "=", "get_mean_stds", "(", "all_max_tious", "[", "stats", "[", "'fp_k2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_ious", "[", "i", ",", "5", "]", ",", "std_ious", "[", "i", ",", "5", "]", "=", "get_mean_stds", "(", "all_max_tious", "[", "stats", "[", "'fp_bg2u'", "]", "[", "i", "]", ">", "0", "]", ")", "\n", "mean_ious", "[", "i", ",", "6", "]", ",", "std_ious", "[", "i", ",", "6", "]", "=", "get_mean_stds", "(", "all_max_tious", "[", "stats", "[", "'fp_bg2k'", "]", "[", "i", "]", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", "]", ")", "\n", "\n", "h", "=", "ax", ".", "bar", "(", "xrng", "+", "(", "i", "-", "2", ")", "*", "width", ",", "mean_ious", "[", "i", "]", ",", "yerr", "=", "std_ious", "[", "i", "]", ",", "width", "=", "width", ",", "label", "=", "f'tIoU={iou}'", ",", "align", "=", "'center'", ",", "alpha", "=", "0.5", ",", "ecolor", "=", "'black'", ",", "color", "=", "c", ")", "\n", "\n", "", "ax", ".", "set_ylabel", "(", "'Max tIoU values'", ",", "fontsize", "=", "fontsize", ")", "\n", "ax", ".", "set_xticks", "(", "xrng", ")", "\n", "ax", ".", "set_xticklabels", "(", "items", ",", "fontsize", "=", "fontsize", "-", "3", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f'../output/{exp_tag}/split_{split}/stats_tiou.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.plot_wi_curves": [[152, 194], ["os.makedirs", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "copy.deepcopy", "copy.deepcopy.items", "num_gt[].sum", "matplotlib.subplots", "enumerate", "ax.legend", "ax.set_xlim", "ax.set_ylim", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum", "zip", "AFSD.evaluation.utils_eval.interpolated_prec_rec", "analyze_stats.get_curve_points", "ax.plot", "os.path.join", "num_gt[].sum"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.interpolated_prec_rec", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_stats.get_curve_points"], ["", "def", "plot_wi_curves", "(", "fontsize", "=", "18", ")", ":", "\n", "\n", "    ", "result_curve_path", "=", "f'../output/{exp_tag}/split_{split}/wi_curves'", "\n", "os", ".", "makedirs", "(", "result_curve_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "tp_u2u", ",", "tp_k2k", ",", "fp_u2k", ",", "fp_k2k", ",", "fp_k2u", ",", "fp_bg2u", ",", "fp_bg2k", ",", "num_gt", "=", "stats", "[", "'tp_u2u'", "]", ",", "stats", "[", "'tp_k2k'", "]", ",", "stats", "[", "'fp_u2k'", "]", ",", "stats", "[", "'fp_k2k'", "]", ",", "stats", "[", "'fp_k2u'", "]", ",", "stats", "[", "'fp_bg2u'", "]", ",", "stats", "[", "'fp_bg2k'", "]", ",", "stats", "[", "'num_gt'", "]", "\n", "fp_k2u", "+=", "fp_bg2u", "\n", "fp_k2k", "+=", "fp_bg2k", "\n", "\n", "# impact on recall ratio", "\n", "tp_u2u_cumsum", "=", "np", ".", "cumsum", "(", "tp_u2u", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "float", ")", "# T x N", "\n", "recall_ratio_cumsum", "=", "num_gt", "[", "1", ":", "]", ".", "sum", "(", ")", "/", "(", "num_gt", "[", "1", ":", "]", ".", "sum", "(", ")", "+", "num_gt", "[", "0", "]", "-", "tp_u2u_cumsum", ")", "# T x N", "\n", "# impact on precision ratio", "\n", "tp_k2k_cumsum", "=", "np", ".", "cumsum", "(", "tp_k2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "float", ")", "# T x K x N", "\n", "fp_u2k_cumsum", "=", "np", ".", "cumsum", "(", "fp_u2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "float", ")", "# T x K x N", "\n", "fp_k2k_cumsum", "=", "np", ".", "cumsum", "(", "fp_k2k", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "float", ")", "# T x K x N", "\n", "precision_ratio_cumsum", "=", "(", "tp_k2k_cumsum", "+", "fp_k2k_cumsum", ")", "/", "(", "tp_k2k_cumsum", "+", "fp_k2k_cumsum", "+", "fp_u2k_cumsum", "+", "1e-6", ")", "\n", "\n", "known_classes", "=", "copy", ".", "deepcopy", "(", "activity_index", ")", "\n", "del", "known_classes", "[", "'__unknown__'", "]", "\n", "\n", "for", "clsname", ",", "cidx", "in", "known_classes", ".", "items", "(", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "for", "tidx", ",", "(", "iou", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "tious", ",", "colors", ")", ")", ":", "\n", "            ", "pi", "=", "precision_ratio_cumsum", "[", "tidx", ",", "cidx", "-", "1", ",", ":", "]", "\n", "ri", "=", "recall_ratio_cumsum", "[", "tidx", ",", ":", "]", "\n", "wi", "=", "interpolated_prec_rec", "(", "pi", ",", "ri", ")", "\n", "xpts", ",", "ypts", "=", "get_curve_points", "(", "pi", ",", "ri", ",", "interpolate", "=", "False", ")", "\n", "ax", ".", "plot", "(", "xpts", ",", "ypts", ",", "'-'", ",", "color", "=", "c", ",", "label", "=", "f'tIoU={iou}'", ")", "\n", "", "ax", ".", "legend", "(", "fontsize", "=", "fontsize", ",", "loc", "=", "'lower right'", ")", "\n", "ax", ".", "set_xlim", "(", "0.7", ",", "0.8", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "title", "(", "f'{clsname} (AWI = {wi * 100:.2f}%)'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xlabel", "(", "'Recall Impact'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "'Precision Impact'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "result_curve_path", ",", "f'wi_{clsname}.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_oodbar_comparison.get_mean_stds": [[6, 8], ["numpy.mean", "numpy.std", "numpy.sqrt", "len"], "function", ["None"], ["def", "get_mean_stds", "(", "data", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "data", ")", ",", "np", ".", "std", "(", "data", ")", "/", "np", ".", "sqrt", "(", "len", "(", "data", ")", ")", "*", "1.96", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_basic_config": [[21, 61], ["config[].get", "config[].get", "config[].get", "config[].get", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "get_basic_config", "(", "config", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "conf_thresh", "=", "config", "[", "'testing'", "]", "[", "'conf_thresh'", "]", "\n", "cfg", ".", "top_k", "=", "config", "[", "'testing'", "]", "[", "'top_k'", "]", "\n", "cfg", ".", "nms_thresh", "=", "config", "[", "'testing'", "]", "[", "'nms_thresh'", "]", "\n", "cfg", ".", "nms_sigma", "=", "config", "[", "'testing'", "]", "[", "'nms_sigma'", "]", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "stride", "=", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'clip_stride'", "]", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "cfg", ".", "evidence", "=", "config", "[", "'model'", "]", "[", "'evidence'", "]", "\n", "", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "if", "cfg", ".", "os_head", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "-", "1", "\n", "", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output_path", ")", "\n", "", "cfg", ".", "fusion", "=", "config", "[", "'testing'", "]", "[", "'fusion'", "]", "\n", "cfg", ".", "scoring", "=", "config", "[", "'testing'", "]", "[", "'ood_scoring'", "]", "\n", "cfg", ".", "cls_idx_known", "=", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", "\n", "cfg", ".", "open_set", "=", "config", "[", "'open_set'", "]", "\n", "cfg", ".", "split", "=", "config", "[", "'testing'", "]", "[", "'split'", "]", "\n", "cfg", ".", "overlap_thresh", "=", "config", "[", "'training'", "]", "[", "'piou'", "]", "\n", "cfg", ".", "cls_idx_all", "=", "f'datasets/thumos14/annotations_open/split_{cfg.split}/Class_Index_All.txt'", "\n", "\n", "cfg", ".", "rgb_data_path", ",", "cfg", ".", "flow_data_path", "=", "{", "}", ",", "{", "}", "\n", "###  specific for training set", "\n", "cfg", ".", "rgb_data_path", "[", "'training'", "]", "=", "config", "[", "'training'", "]", ".", "get", "(", "'rgb_data_path'", ",", "\n", "'./datasets/thumos14/validation_npy/'", ")", "\n", "cfg", ".", "flow_data_path", "[", "'training'", "]", "=", "config", "[", "'training'", "]", ".", "get", "(", "'flow_data_path'", ",", "\n", "'./datasets/thumos14/validation_flow_npy/'", ")", "\n", "###  specific for testing set", "\n", "cfg", ".", "rgb_data_path", "[", "'testing'", "]", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_data_path'", ",", "\n", "'./datasets/thumos14/test_npy/'", ")", "\n", "cfg", ".", "flow_data_path", "[", "'testing'", "]", "=", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_data_path'", ",", "\n", "'./datasets/thumos14/test_flow_npy/'", ")", "\n", "cfg", ".", "gt_known_json", "=", "'datasets/thumos14/annotations_open/split_{id:d}/known_gt.json'", "\n", "cfg", ".", "gt_all_json", "=", "'datasets/thumos14/annotations/thumos_gt.json'", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model": [[63, 84], ["AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.test.get_path", "AFSD.thumos14.test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "AFSD.thumos14.BDNet.BDNet", "AFSD.thumos14.test.get_path", "AFSD.thumos14.BDNet.BDNet.load_state_dict", "AFSD.thumos14.BDNet.BDNet.eval().cuda", "config[].get", "config[].get", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval", "AFSD.thumos14.BDNet.BDNet.eval"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path"], ["", "def", "build_model", "(", "fusion", "=", "False", ")", ":", "\n", "    ", "net", ",", "flow_net", "=", "None", ",", "None", "\n", "if", "fusion", ":", "\n", "        ", "rgb_net", "=", "BDNet", "(", "in_channels", "=", "3", ",", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "flow_net", "=", "BDNet", "(", "in_channels", "=", "2", ",", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "rgb_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'rgb_checkpoint_path'", ",", "\n", "'./models/thumos14/checkpoint-15.ckpt'", ")", ")", "\n", "flow_checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", ".", "get", "(", "'flow_checkpoint_path'", ",", "\n", "'./models/thumos14_flow/checkpoint-16.ckpt'", ")", ")", "\n", "rgb_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "rgb_checkpoint_path", ")", ")", "\n", "flow_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "flow_checkpoint_path", ")", ")", "\n", "rgb_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "flow_net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "net", "=", "rgb_net", "\n", "", "else", ":", "\n", "        ", "net", "=", "BDNet", "(", "in_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", ",", "\n", "training", "=", "False", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "checkpoint_path", "=", "get_path", "(", "config", "[", "'testing'", "]", "[", "'checkpoint_path'", "]", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "checkpoint_path", ")", ")", "\n", "net", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "", "return", "net", ",", "flow_net", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.to_array": [[86, 96], ["data_dict.items", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["", "def", "to_array", "(", "data_dict", ")", ":", "\n", "    ", "if", "data_dict", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "result_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "result_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_raw_output": [[98, 136], ["AFSD.common.thumos_dataset.get_video_info", "analyze_actionness.build_model", "AFSD.common.videotransforms.CenterCrop", "tqdm.tqdm", "list", "AFSD.thumos14.test.get_offsets", "AFSD.thumos14.test.prepare_data", "results.append", "AFSD.common.thumos_dataset.get_video_info.keys", "AFSD.thumos14.test.prepare_data", "AFSD.thumos14.test.prepare_clip", "out_rgb.append", "out_flow.append", "AFSD.thumos14.test.prepare_clip", "torch.no_grad", "torch.no_grad", "net", "analyze_actionness.to_array", "analyze_actionness.to_array", "flow_net"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.build_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_data", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test_openmax_cross_data.prepare_clip", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.to_array", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.to_array"], ["", "def", "get_raw_output", "(", "cfg", ",", "subset", "=", "'train'", ")", ":", "\n", "# get data", "\n", "    ", "node", "=", "'training'", "if", "subset", "==", "'train'", "else", "'testing'", "\n", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_info_path'", "]", ")", "\n", "npy_data_path", "=", "cfg", ".", "rgb_data_path", "[", "node", "]", "if", "cfg", ".", "fusion", "else", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_data_path'", "]", "\n", "\n", "# prepare model", "\n", "net", ",", "flow_net", "=", "build_model", "(", "fusion", "=", "cfg", ".", "fusion", ")", "\n", "\n", "centor_crop", "=", "videotransforms", ".", "CenterCrop", "(", "config", "[", "'dataset'", "]", "[", "'testing'", "]", "[", "'crop_size'", "]", ")", "\n", "results", "=", "[", "]", "\n", "# for video_name in tqdm.tqdm(list(video_infos.keys()), ncols=0, desc='Thresholding from Train Set'):", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "video_infos", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ",", "desc", "=", "f'Inference on {subset} set'", ")", ":", "\n", "# get the clip offsets", "\n", "        ", "offsetlist", "=", "get_offsets", "(", "video_infos", ",", "video_name", ",", "cfg", ".", "clip_length", ",", "cfg", ".", "stride", ")", "\n", "sample_fps", "=", "video_infos", "[", "video_name", "]", "[", "'sample_fps'", "]", "\n", "\n", "# load data", "\n", "data", "=", "prepare_data", "(", "npy_data_path", ",", "video_name", ",", "centor_crop", ")", "\n", "flow_data", "=", "prepare_data", "(", "cfg", ".", "flow_data_path", ",", "video_name", ",", "centor_crop", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "\n", "out_rgb", ",", "out_flow", "=", "[", "]", ",", "[", "]", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# prepare clip of a video", "\n", "            ", "clip", "=", "prepare_clip", "(", "data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "\n", "flow_clip", "=", "prepare_clip", "(", "flow_data", ",", "offset", ",", "cfg", ".", "clip_length", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "# run inference", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_dict", "=", "net", "(", "clip", ")", "\n", "flow_output_dict", "=", "flow_net", "(", "flow_clip", ")", "if", "cfg", ".", "fusion", "else", "None", "\n", "# tensor to numpy array", "\n", "", "out_rgb", ".", "append", "(", "to_array", "(", "output_dict", ")", ")", "\n", "out_flow", ".", "append", "(", "to_array", "(", "flow_output_dict", ")", ")", "\n", "# gather necessary results", "\n", "", "output_video", "=", "{", "'name'", ":", "video_name", ",", "'fps'", ":", "sample_fps", ",", "'offset'", ":", "offsetlist", ",", "'rgb_out'", ":", "out_rgb", ",", "'flow_out'", ":", "out_flow", "}", "\n", "results", ".", "append", "(", "output_video", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_video_anno": [[138, 158], ["AFSD.common.thumos_dataset.get_class_index_map", "pandas.DataFrame", "video_annos.get", "video_annos[].append", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_thumos14.get_class_index_map"], ["", "def", "get_video_anno", "(", "video_infos", ",", "video_anno_path", ",", "class_info_path", ")", ":", "\n", "    ", "df_anno", "=", "pd", ".", "DataFrame", "(", "pd", ".", "read_csv", "(", "video_anno_path", ")", ")", ".", "values", "[", ":", "]", "\n", "originidx_to_idx", ",", "idx_to_class", "=", "get_class_index_map", "(", "class_info_path", ")", "\n", "video_annos", "=", "{", "}", "\n", "for", "anno", "in", "df_anno", ":", "\n", "        ", "video_name", "=", "anno", "[", "0", "]", "\n", "originidx", "=", "anno", "[", "2", "]", "\n", "start_frame", "=", "anno", "[", "-", "2", "]", "\n", "end_frame", "=", "anno", "[", "-", "1", "]", "\n", "count", "=", "video_infos", "[", "video_name", "]", "[", "'count'", "]", "\n", "sample_count", "=", "video_infos", "[", "video_name", "]", "[", "'sample_count'", "]", "\n", "ratio", "=", "sample_count", "*", "1.0", "/", "count", "\n", "start_gt", "=", "start_frame", "*", "ratio", "\n", "end_gt", "=", "end_frame", "*", "ratio", "\n", "class_idx", "=", "originidx_to_idx", "[", "originidx", "]", "\n", "if", "video_annos", ".", "get", "(", "video_name", ")", "is", "None", ":", "\n", "            ", "video_annos", "[", "video_name", "]", "=", "[", "[", "start_gt", ",", "end_gt", ",", "class_idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "video_annos", "[", "video_name", "]", ".", "append", "(", "[", "start_gt", ",", "end_gt", ",", "class_idx", "]", ")", "\n", "", "", "return", "video_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_all_annos": [[160, 204], ["AFSD.common.thumos_dataset.get_video_info", "analyze_actionness.get_video_anno", "tqdm.tqdm", "list", "AFSD.thumos14.test.get_offsets", "get_video_anno.keys", "max", "min", "numpy.zeros", "numpy.zeros", "all_annos.append", "cur_annos.append", "max", "numpy.clip", "numpy.clip", "int", "numpy.clip", "int", "numpy.clip", "max", "min", "round", "int", "round", "int", "round", "round"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_video_anno", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.thumos14.test.get_offsets"], ["", "def", "get_all_annos", "(", "subset", "=", "'train'", ",", "clip_length", "=", "256", ",", "stride", "=", "128", ")", ":", "\n", "    ", "node", "=", "'training'", "if", "subset", "==", "'train'", "else", "'testing'", "\n", "video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_info_path'", "]", ")", "\n", "video_annos", "=", "get_video_anno", "(", "video_infos", ",", "config", "[", "'dataset'", "]", "[", "node", "]", "[", "'video_anno_open_path'", "]", ",", "cfg", ".", "cls_idx_all", ")", "\n", "all_annos", "=", "[", "]", "\n", "# loop for each video", "\n", "for", "video_name", "in", "tqdm", ".", "tqdm", "(", "list", "(", "video_annos", ".", "keys", "(", ")", ")", ",", "ncols", "=", "0", ",", "desc", "=", "f'Get annotations of {subset} set'", ")", ":", "\n", "        ", "annos", "=", "video_annos", "[", "video_name", "]", "\n", "offsetlist", "=", "get_offsets", "(", "video_infos", ",", "video_name", ",", "clip_length", ",", "stride", ")", "\n", "for", "offset", "in", "offsetlist", ":", "\n", "# get the annos of the current offset", "\n", "            ", "left", ",", "right", "=", "offset", "+", "1", ",", "offset", "+", "clip_length", "\n", "cur_annos", "=", "[", "]", "\n", "save_offset", "=", "False", "\n", "for", "anno", "in", "annos", ":", "\n", "                ", "max_l", "=", "max", "(", "left", ",", "anno", "[", "0", "]", ")", "\n", "min_r", "=", "min", "(", "right", ",", "anno", "[", "1", "]", ")", "\n", "ioa", "=", "(", "min_r", "-", "max_l", ")", "*", "1.0", "/", "(", "anno", "[", "1", "]", "-", "anno", "[", "0", "]", ")", "\n", "if", "ioa", ">=", "1.0", ":", "\n", "                    ", "save_offset", "=", "True", "\n", "", "if", "ioa", ">=", "0.5", ":", "\n", "                    ", "cur_annos", ".", "append", "(", "[", "max", "(", "anno", "[", "0", "]", "-", "offset", ",", "1", ")", ",", "\n", "min", "(", "anno", "[", "1", "]", "-", "offset", ",", "clip_length", ")", ",", "\n", "anno", "[", "2", "]", "]", ")", "\n", "", "", "if", "save_offset", ":", "\n", "                ", "start", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "end", "=", "np", ".", "zeros", "(", "[", "clip_length", "]", ")", "\n", "for", "anno", "in", "cur_annos", ":", "\n", "                    ", "s", ",", "e", ",", "id", "=", "anno", "\n", "d", "=", "max", "(", "(", "e", "-", "s", ")", "/", "10.0", ",", "2.0", ")", "\n", "start_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "-", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "start_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "s", "+", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "start", "[", "start_s", ":", "start_e", "]", "=", "1", "\n", "end_s", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "-", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "\n", "end_e", "=", "np", ".", "clip", "(", "int", "(", "round", "(", "e", "+", "d", "/", "2.0", ")", ")", ",", "0", ",", "clip_length", "-", "1", ")", "+", "1", "\n", "end", "[", "end_s", ":", "end_e", "]", "=", "1", "\n", "", "all_annos", ".", "append", "(", "{", "\n", "'video_name'", ":", "video_name", ",", "\n", "'offset'", ":", "offset", ",", "\n", "'annos'", ":", "cur_annos", ",", "\n", "'start'", ":", "start", ",", "\n", "'end'", ":", "end", "\n", "}", ")", "\n", "", "", "", "return", "all_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.compute_iou": [[206, 224], ["torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "area_union.clamp"], "function", ["None"], ["", "def", "compute_iou", "(", "pred", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    jaccard: A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\n    \"\"\"", "\n", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "target_area", "=", "target_left", "+", "target_right", "\n", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "area_union", "=", "target_area", "+", "pred_area", "-", "inter", "\n", "ious", "=", "inter", "/", "area_union", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_matched_targets": [[226, 264], ["loc_data.size", "priors.size", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "priors.size", "truths.size", "priors[].unsqueeze().expand", "area.min", "analyze_actionness.compute_iou", "conf.clone", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "priors[].unsqueeze", "truths[].unsqueeze().expand", "truths[].unsqueeze().expand", "truths[].unsqueeze", "truths[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.compute_iou"], ["", "def", "get_matched_targets", "(", "targets", ",", "loc_data", ",", "priors", ",", "clip_length", ")", ":", "\n", "    ", "num_batch", "=", "loc_data", ".", "size", "(", "0", ")", "\n", "num_priors", "=", "priors", ".", "size", "(", "0", ")", "\n", "# match priors and ground truth segments", "\n", "loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "for", "idx", "in", "range", "(", "num_batch", ")", ":", "\n", "        ", "truths", "=", "targets", "[", "idx", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "labels", "=", "targets", "[", "idx", "]", "[", ":", ",", "-", "1", "]", "\n", "pre_loc", "=", "loc_data", "[", "idx", "]", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "N", "=", "truths", ".", "size", "(", "0", ")", "\n", "center", "=", "priors", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "K", ",", "N", ")", "\n", "left", "=", "(", "center", "-", "truths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", ")", "*", "clip_length", "\n", "right", "=", "(", "truths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", "-", "center", ")", "*", "clip_length", "\n", "area", "=", "left", "+", "right", "\n", "maxn", "=", "clip_length", "*", "2", "\n", "area", "[", "left", "<", "0", "]", "=", "maxn", "\n", "area", "[", "right", "<", "0", "]", "=", "maxn", "\n", "best_truth_area", ",", "best_truth_idx", "=", "area", ".", "min", "(", "1", ")", "\n", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "priors", "[", ":", ",", "0", "]", "-", "truths", "[", "best_truth_idx", ",", "0", "]", ")", "*", "clip_length", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "truths", "[", "best_truth_idx", ",", "1", "]", "-", "priors", "[", ":", ",", "0", "]", ")", "*", "clip_length", "\n", "conf", "=", "labels", "[", "best_truth_idx", "]", "\n", "conf", "[", "best_truth_area", ">=", "maxn", "]", "=", "0", "\n", "conf_t", "[", "idx", "]", "=", "conf", "\n", "\n", "iou", "=", "compute_iou", "(", "pre_loc", ",", "loc_t", "[", "idx", "]", ")", "# [num_priors]", "\n", "prop_conf", "=", "conf", ".", "clone", "(", ")", "\n", "prop_conf", "[", "iou", "<", "cfg", ".", "overlap_thresh", "]", "=", "0", "\n", "prop_conf_t", "[", "idx", "]", "=", "prop_conf", "\n", "prop_w", "=", "pre_loc", "[", ":", ",", "0", "]", "+", "pre_loc", "[", ":", ",", "1", "]", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "-", "pre_loc", "[", ":", ",", "0", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "-", "pre_loc", "[", ":", ",", "1", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "\n", "", "return", "loc_t", ",", "conf_t", ",", "prop_loc_t", ",", "prop_conf_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_result": [[266, 296], ["torch.from_numpy().sigmoid().numpy", "torch.from_numpy().sigmoid().numpy", "numpy.squeeze", "out_layer", "torch.from_numpy", "torch.from_numpy", "np.max.numpy", "numpy.max", "torch.from_numpy().sigmoid", "torch.from_numpy().sigmoid", "AFSD.thumos14.BDNet.DirichletLayer", "torch.Softmax", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.sigmoid", "numpy.squeeze", "torch.from_numpy", "torch.from_numpy", "numpy.squeeze"], "function", ["None"], ["", "def", "get_result", "(", "input_dict", ",", "stage", "=", "'coarse'", ",", "target", "=", "'uncertainty'", ")", ":", "\n", "    ", "if", "cfg", ".", "use_edl", ":", "\n", "        ", "unct", "=", "input_dict", "[", "'unct'", "]", "[", "0", "]", "if", "stage", "==", "'coarse'", "else", "input_dict", "[", "'prop_unct'", "]", "[", "0", "]", "# (N,)", "\n", "", "if", "cfg", ".", "os_head", ":", "\n", "        ", "act", "=", "input_dict", "[", "'act'", "]", "[", "0", "]", "if", "stage", "==", "'coarse'", "else", "input_dict", "[", "'prop_act'", "]", "[", "0", "]", "# (N, 1)", "\n", "act", "=", "torch", ".", "from_numpy", "(", "act", ")", ".", "sigmoid", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# get the output target", "\n", "", "if", "target", "==", "'uncertainty'", "and", "cfg", ".", "use_edl", ":", "\n", "        ", "return", "unct", "\n", "", "if", "target", "==", "'actionness'", "and", "cfg", ".", "use_edl", "and", "cfg", ".", "open_set", ":", "\n", "        ", "return", "np", ".", "squeeze", "(", "act", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "target", "==", "'confidence'", ":", "\n", "        ", "out_layer", "=", "DirichletLayer", "(", "evidence", "=", "cfg", ".", "evidence", ",", "dim", "=", "-", "1", ")", "if", "cfg", ".", "use_edl", "else", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "# get the uncertainty, actionness, and conf_scores", "\n", "logits", "=", "input_dict", "[", "'conf'", "]", "[", "0", "]", "if", "stage", "==", "'coarse'", "else", "input_dict", "[", "'prop_conf'", "]", "[", "0", "]", "# N x K", "\n", "conf", "=", "out_layer", "(", "torch", ".", "from_numpy", "(", "logits", ")", ")", "\n", "center", "=", "torch", ".", "from_numpy", "(", "input_dict", "[", "'center'", "]", "[", "0", "]", ")", "\n", "conf", "=", "conf", "*", "center", ".", "sigmoid", "(", ")", "# N x K", "\n", "conf", "=", "conf", ".", "numpy", "(", ")", "\n", "if", "cfg", ".", "os_head", ":", "\n", "            ", "conf", "=", "conf", "*", "act", "\n", "", "conf", "=", "np", ".", "max", "(", "conf", ",", "axis", "=", "-", "1", ")", "# (N,)", "\n", "return", "conf", "\n", "", "elif", "target", "==", "'uncertainty_actionness'", "and", "cfg", ".", "use_edl", ":", "\n", "        ", "return", "unct", "*", "np", ".", "squeeze", "(", "act", ",", "axis", "=", "-", "1", ")", "# (N,)", "\n", "", "elif", "target", "==", "'half_au'", "and", "cfg", ".", "use_edl", ":", "\n", "        ", "return", "0.5", "*", "(", "np", ".", "squeeze", "(", "act", ",", "axis", "=", "-", "1", ")", "+", "1.0", ")", "*", "unct", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.split_results_by_stages": [[298, 340], ["zip", "len", "AFSD.common.thumos_dataset.annos_transform", "analyze_actionness.get_matched_targets", "analyze_actionness.get_result", "all_known[].append", "all_unknown[].append", "all_bg[].append", "analyze_actionness.get_result", "all_known[].append", "all_unknown[].append", "all_bg[].append", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conf_t.view", "prop_conf_t.view", "anno.values", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.annos_transform", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_matched_targets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_result", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_result"], ["", "", "def", "split_results_by_stages", "(", "output_test", ",", "annos_known_test", ",", "target", "=", "'uncertainty'", ")", ":", "\n", "\n", "    ", "all_known", ",", "all_unknown", ",", "all_bg", "=", "{", "'coarse'", ":", "[", "]", ",", "'refined'", ":", "[", "]", "}", ",", "{", "'coarse'", ":", "[", "]", ",", "'refined'", ":", "[", "]", "}", ",", "{", "'coarse'", ":", "[", "]", ",", "'refined'", ":", "[", "]", "}", "\n", "for", "output_video", "in", "output_test", ":", "\n", "        ", "out_rgb", "=", "output_video", "[", "'rgb_out'", "]", "\n", "offsetlist", "=", "output_video", "[", "'offset'", "]", "\n", "video_name", "=", "output_video", "[", "'name'", "]", "\n", "annos_cur_video", "=", "[", "anno", "for", "anno", "in", "annos_known_test", "if", "video_name", "in", "anno", ".", "values", "(", ")", "]", "\n", "if", "len", "(", "annos_cur_video", ")", "==", "0", ":", "# ignore if the video is not annotated", "\n", "            ", "continue", "\n", "# the rest videos contain at least one known action", "\n", "", "for", "clip_out", ",", "offset", "in", "zip", "(", "out_rgb", ",", "offsetlist", ")", ":", "# iterate on clips", "\n", "            ", "annos_cur_clip", "=", "[", "anno", "[", "'annos'", "]", "for", "anno", "in", "annos_cur_video", "if", "offset", "==", "anno", "[", "'offset'", "]", "]", "\n", "if", "len", "(", "annos_cur_clip", ")", "==", "0", ":", "# current clip is unknown/bg", "\n", "                ", "continue", "\n", "# the rest are used in training (known or unknown/bg)", "\n", "", "annos", "=", "annos_transform", "(", "annos_cur_clip", "[", "0", "]", ",", "cfg", ".", "clip_length", ")", "\n", "targets", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "annos", ",", "0", ")", ")", "]", "\n", "# get the matched target label", "\n", "loc_t", ",", "conf_t", ",", "prop_loc_t", ",", "prop_conf_t", "=", "get_matched_targets", "(", "\n", "targets", ",", "torch", ".", "from_numpy", "(", "clip_out", "[", "'loc'", "]", ")", ",", "\n", "torch", ".", "from_numpy", "(", "clip_out", "[", "'priors'", "]", ")", ",", "cfg", ".", "clip_length", ")", "\n", "\n", "# coarse stage", "\n", "conf_t", ",", "prop_conf_t", "=", "conf_t", ".", "view", "(", "-", "1", ")", ",", "prop_conf_t", ".", "view", "(", "-", "1", ")", "\n", "inds_uk", "=", "conf_t", ">", "cfg", ".", "num_classes", "# y > K", "\n", "inds_k", "=", "(", "conf_t", ">", "0", ")", "&", "(", "conf_t", "<=", "cfg", ".", "num_classes", ")", "# 1 <= y <= K", "\n", "inds_bg", "=", "conf_t", "==", "0", "# y == 0", "\n", "res_coarse", "=", "get_result", "(", "clip_out", ",", "stage", "=", "'coarse'", ",", "target", "=", "target", ")", "\n", "all_known", "[", "'coarse'", "]", ".", "append", "(", "res_coarse", "[", "inds_k", "]", ")", "\n", "all_unknown", "[", "'coarse'", "]", ".", "append", "(", "res_coarse", "[", "inds_uk", "]", ")", "\n", "all_bg", "[", "'coarse'", "]", ".", "append", "(", "res_coarse", "[", "inds_bg", "]", ")", "\n", "\n", "# refined stage", "\n", "inds_uk", "=", "prop_conf_t", ">", "cfg", ".", "num_classes", "# y > K", "\n", "inds_k", "=", "(", "prop_conf_t", ">", "0", ")", "&", "(", "prop_conf_t", "<=", "cfg", ".", "num_classes", ")", "# 1 <= y <= K", "\n", "inds_bg", "=", "prop_conf_t", "==", "0", "# y == 0", "\n", "res_refined", "=", "get_result", "(", "clip_out", ",", "stage", "=", "'refined'", ",", "target", "=", "target", ")", "\n", "all_known", "[", "'refined'", "]", ".", "append", "(", "res_refined", "[", "inds_k", "]", ")", "\n", "all_unknown", "[", "'refined'", "]", ".", "append", "(", "res_refined", "[", "inds_uk", "]", ")", "\n", "all_bg", "[", "'refined'", "]", ".", "append", "(", "res_refined", "[", "inds_bg", "]", ")", "\n", "", "", "return", "all_known", ",", "all_unknown", ",", "all_bg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.plot_dist": [[342, 363], ["matplotlib.figure", "zip", "matplotlib.legend", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.savefig", "seaborn.kdeplot", "matplotlib.xlabel"], "function", ["None"], ["", "def", "plot_dist", "(", "result_file", ",", "all_scores", ",", "colors", ",", "labels", ",", "xlabel", "=", "None", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", ",", "4", ")", ")", "# (w, h)", "\n", "fontsize", "=", "18", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "# plt.hist(all_scores, 100, density=normalize_fig, color=colors, label=labels)", "\n", "for", "score", ",", "color", ",", "label", "in", "zip", "(", "all_scores", ",", "colors", ",", "labels", ")", ":", "\n", "        ", "sns", ".", "kdeplot", "(", "score", ",", "color", "=", "color", ",", "shade", "=", "True", ",", "label", "=", "label", ")", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", "-", "3", ",", "loc", "=", "'upper center'", ")", "\n", "if", "xlabel", "is", "not", "None", ":", "\n", "        ", "plt", ".", "xlabel", "(", "xlabel", ",", "fontsize", "=", "fontsize", ")", "\n", "", "y_labels", "=", "'density'", "if", "normalize_fig", "else", "'number of predictions'", "\n", "plt", ".", "ylabel", "(", "y_labels", ",", "fontsize", "=", "fontsize", ")", "\n", "# plt.yscale('log')", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "# if normalize_fig:", "\n", "#     plt.xlim(0, 1.01)", "\n", "# plt.ylim(0, 40000)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_auc_comparison.draw_OSDR_curve": [[6, 29], ["matplotlib.figure", "enumerate", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "zip", "os.path.join", "enumerate", "os.path.join", "os.path.join", "open", "pickle.load", "zip", "matplotlib.plot"], "function", ["None"], ["def", "draw_OSDR_curve", "(", "split", ",", "tiou_thresh", ",", "fig_name", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "for", "idx", ",", "(", "folder", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "result_folders", ",", "labels", ")", ")", ":", "\n", "# load result file", "\n", "        ", "result_file", "=", "os", ".", "path", ".", "join", "(", "'output'", ",", "folder", ",", "f'split_{split}'", ",", "'auc_data'", ",", "'osdr_data.pkl'", ")", "\n", "with", "open", "(", "result_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "osdr_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# draw curves", "\n", "", "for", "tidx", ",", "(", "fpr", ",", "cdr", ",", "osdr", ",", "tiou", ")", "in", "enumerate", "(", "zip", "(", "osdr_data", "[", "'fpr'", "]", ",", "osdr_data", "[", "'cdr'", "]", ",", "osdr_data", "[", "'osdr'", "]", ",", "osdr_data", "[", "'tiou'", "]", ")", ")", ":", "\n", "            ", "if", "tiou", "==", "tiou_thresh", ":", "\n", "                ", "plt", ".", "plot", "(", "fpr", "[", ":", "-", "2", "]", ",", "cdr", "[", ":", "-", "2", "]", ",", "line_styles", "[", "idx", "]", ",", "linewidth", "=", "2", ",", "label", "=", "f'{label} ({osdr*100:.2f})'", ")", "\n", "", "", "", "plt", ".", "xlabel", "(", "'False Positive Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "'Correct Detection Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "1", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "0.7", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", ",", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "fig_path", ",", "fig_name", "+", "'.png'", ")", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "fig_path", ",", "fig_name", "+", "'.pdf'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_auc_comparison.draw_ROC_curve": [[31, 54], ["matplotlib.figure", "enumerate", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "zip", "os.path.join", "enumerate", "os.path.join", "os.path.join", "open", "pickle.load", "zip", "matplotlib.plot"], "function", ["None"], ["", "def", "draw_ROC_curve", "(", "split", ",", "tiou_thresh", ",", "fig_name", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "for", "idx", ",", "(", "folder", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "result_folders", ",", "labels", ")", ")", ":", "\n", "# load result file", "\n", "        ", "result_file", "=", "os", ".", "path", ".", "join", "(", "'output'", ",", "folder", ",", "f'split_{split}'", ",", "'auc_data'", ",", "'roc_data.pkl'", ")", "\n", "with", "open", "(", "result_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "roc_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# draw curves", "\n", "", "for", "tidx", ",", "(", "fpr", ",", "tpr", ",", "auc", ",", "tiou", ")", "in", "enumerate", "(", "zip", "(", "roc_data", "[", "'fpr'", "]", ",", "roc_data", "[", "'tpr'", "]", ",", "roc_data", "[", "'auc'", "]", ",", "roc_data", "[", "'tiou'", "]", ")", ")", ":", "\n", "            ", "if", "tiou", "==", "tiou_thresh", ":", "\n", "                ", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "line_styles", "[", "idx", "]", ",", "linewidth", "=", "2", ",", "label", "=", "f'{label} ({auc*100:.2f})'", ")", "\n", "", "", "", "plt", ".", "xlabel", "(", "'False Positive Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "'True Positive Rate'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "1", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", ",", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "fig_path", ",", "fig_name", "+", "'.png'", ")", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "fig_path", ",", "fig_name", "+", "'.pdf'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.draw_auc_comparison.draw_PR_curve": [[56, 79], ["matplotlib.figure", "enumerate", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "zip", "os.path.join", "enumerate", "os.path.join", "os.path.join", "open", "pickle.load", "zip", "matplotlib.plot"], "function", ["None"], ["", "def", "draw_PR_curve", "(", "split", ",", "tiou_thresh", ",", "fig_name", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "5", ")", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "for", "idx", ",", "(", "folder", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "result_folders", ",", "labels", ")", ")", ":", "\n", "# load result file", "\n", "        ", "result_file", "=", "os", ".", "path", ".", "join", "(", "'output'", ",", "folder", ",", "f'split_{split}'", ",", "'auc_data'", ",", "'pr_data.pkl'", ")", "\n", "with", "open", "(", "result_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pr_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# draw curves", "\n", "", "for", "tidx", ",", "(", "precision", ",", "recall", ",", "auc", ",", "tiou", ")", "in", "enumerate", "(", "zip", "(", "pr_data", "[", "'precision'", "]", ",", "pr_data", "[", "'recall'", "]", ",", "pr_data", "[", "'auc'", "]", ",", "pr_data", "[", "'tiou'", "]", ")", ")", ":", "\n", "            ", "if", "tiou", "==", "tiou_thresh", ":", "\n", "                ", "plt", ".", "plot", "(", "recall", ",", "precision", ",", "line_styles", "[", "idx", "]", ",", "label", "=", "f'{label} ({auc*100:.2f})'", ")", "\n", "", "", "", "plt", ".", "xlabel", "(", "'Recall'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "1", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "1", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "fontsize", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "fig_path", ",", "fig_name", "+", "'.png'", ")", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "fig_path", ",", "fig_name", "+", "'.pdf'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_basic_config": [[17, 40], ["os.path.join", "os.path.exists"], "function", ["None"], ["def", "get_basic_config", "(", "config", ")", ":", "\n", "    ", "class", "cfg", ":", "pass", "\n", "cfg", ".", "batch_size", "=", "config", "[", "'training'", "]", "[", "'batch_size'", "]", "\n", "cfg", ".", "learning_rate", "=", "config", "[", "'training'", "]", "[", "'learning_rate'", "]", "\n", "cfg", ".", "weight_decay", "=", "config", "[", "'training'", "]", "[", "'weight_decay'", "]", "\n", "cfg", ".", "max_epoch", "=", "config", "[", "'training'", "]", "[", "'max_epoch'", "]", "\n", "cfg", ".", "checkpoint_path", "=", "config", "[", "'training'", "]", "[", "'checkpoint_path'", "]", "\n", "cfg", ".", "focal_loss", "=", "config", "[", "'training'", "]", "[", "'focal_loss'", "]", "\n", "cfg", ".", "edl_loss", "=", "config", "[", "'training'", "]", "[", "'edl_loss'", "]", "if", "'edl_loss'", "in", "config", "[", "'training'", "]", "else", "False", "\n", "cfg", ".", "edl_config", "=", "config", "[", "'training'", "]", "[", "'edl_config'", "]", "if", "'edl_config'", "in", "config", "[", "'training'", "]", "else", "None", "\n", "cfg", ".", "cls_loss_type", "=", "'edl'", "if", "cfg", ".", "edl_loss", "else", "'focal'", "# by default, we use focal loss", "\n", "cfg", ".", "os_head", "=", "config", "[", "'model'", "]", "[", "'os_head'", "]", "if", "'os_head'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "num_classes", "=", "config", "[", "'dataset'", "]", "[", "'num_classes'", "]", "\n", "cfg", ".", "num_classes", "=", "num_classes", "-", "1", "if", "cfg", ".", "os_head", "else", "num_classes", "\n", "cfg", ".", "random_seed", "=", "config", "[", "'training'", "]", "[", "'random_seed'", "]", "\n", "cfg", ".", "train_state_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "checkpoint_path", ",", "'training'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "cfg", ".", "train_state_path", ")", "\n", "cfg", ".", "resume", "=", "config", "[", "'training'", "]", "[", "'resume'", "]", "\n", "cfg", ".", "use_edl", "=", "config", "[", "'model'", "]", "[", "'use_edl'", "]", "if", "'use_edl'", "in", "config", "[", "'model'", "]", "else", "False", "\n", "cfg", ".", "clip_length", "=", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'clip_length'", "]", "\n", "cfg", ".", "overlap_thresh", "=", "config", "[", "'training'", "]", "[", "'piou'", "]", "\n", "cfg", ".", "output_path", "=", "config", "[", "'testing'", "]", "[", "'output_path'", "]", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path": [[42, 50], ["os.path.lexists", "os.path.join", "os.path.islink", "os.path.realpath", "fullpath.split", "os.path.dirname"], "function", ["None"], ["", "def", "get_path", "(", "input_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "input_path", ")", ":", "\n", "        ", "fullpath", "=", "os", ".", "path", ".", "realpath", "(", "input_path", ")", "if", "os", ".", "path", ".", "islink", "(", "input_path", ")", "else", "input_path", "\n", "real_name", "=", "fullpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "real_full_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "input_path", ")", ",", "real_name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "", "return", "real_full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_seed": [[52, 60], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.worker_init_fn": [[63, 65], ["analyze_gradnorm.set_seed"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_seed"], ["def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "set_seed", "(", "GLOBAL_SEED", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state": [[66, 72], ["random.setstate", "numpy.random.set_state", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state", "torch.cuda.set_rng_state"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state"], ["", "def", "set_rng_state", "(", "states", ")", ":", "\n", "    ", "random", ".", "setstate", "(", "states", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "set_state", "(", "states", "[", "1", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "states", "[", "2", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_rng_state", "(", "states", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.setup_model": [[74, 85], ["AFSD.thumos14.BDNet.BDNet", "torch.DataParallel().cuda", "analyze_gradnorm.get_path", "nn.DataParallel().cuda.module.load_state_dict", "analyze_gradnorm.get_path", "torch.load", "torch.load", "torch.load", "analyze_gradnorm.set_rng_state", "nn.DataParallel().cuda.eval", "os.path.join", "torch.load", "torch.load", "torch.load", "os.path.join", "torch.DataParallel"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_path", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_rng_state"], ["", "", "def", "setup_model", "(", "cfg", ")", ":", "\n", "    ", "net", "=", "BDNet", "(", "in_channels", "=", "config", "[", "'model'", "]", "[", "'in_channels'", "]", ",", "\n", "backbone_model", "=", "config", "[", "'model'", "]", "[", "'backbone_model'", "]", ",", "use_edl", "=", "cfg", ".", "use_edl", ")", "\n", "net", "=", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "model_path", "=", "get_path", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "checkpoint_path", ",", "'checkpoint-latest.ckpt'", ")", ")", "\n", "net", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "train_path", "=", "get_path", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "train_state_path", ",", "'checkpoint_latest.ckpt'", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "train_path", ")", "\n", "set_rng_state", "(", "state_dict", "[", "'state'", "]", ")", "\n", "net", ".", "eval", "(", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.setup_dataloader": [[87, 102], ["AFSD.common.thumos_dataset.get_video_info", "AFSD.common.thumos_dataset.get_video_anno", "AFSD.common.thumos_dataset.load_video_data", "AFSD.common.thumos_dataset.THUMOS_Dataset", "torch.utils.data.DataLoader", "len"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.datasets.openset_split_anet.get_video_info", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_actionness.get_video_anno", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.common.thumos_dataset.load_video_data"], ["", "def", "setup_dataloader", "(", "cfg", ")", ":", "\n", "    ", "train_video_infos", "=", "get_video_info", "(", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_info_path'", "]", ")", "\n", "train_video_annos", "=", "get_video_anno", "(", "train_video_infos", ",", "\n", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_anno_path'", "]", ",", "\n", "config", "[", "'dataset'", "]", "[", "'class_info_path'", "]", ")", "\n", "train_data_dict", "=", "load_video_data", "(", "train_video_infos", ",", "\n", "config", "[", "'dataset'", "]", "[", "'training'", "]", "[", "'video_data_path'", "]", ")", "\n", "train_dataset", "=", "THUMOS_Dataset", "(", "train_data_dict", ",", "\n", "train_video_infos", ",", "\n", "train_video_annos", ")", "\n", "train_data_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "collate_fn", "=", "detection_collate", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "epoch_step_num", "=", "len", "(", "train_dataset", ")", "//", "cfg", ".", "batch_size", "\n", "return", "train_data_loader", ",", "epoch_step_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.compute_iou": [[104, 122], ["torch.finfo", "torch.finfo", "torch.finfo", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "area_union.clamp"], "function", ["None"], ["", "def", "compute_iou", "(", "pred", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    jaccard: A \u2229 B / A \u222a B = A \u2229 B / (area(A) + area(B) - A \u2229 B)\n    \"\"\"", "\n", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "1", "]", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_right", "=", "target", "[", ":", ",", "1", "]", "\n", "\n", "pred_area", "=", "pred_left", "+", "pred_right", "\n", "target_area", "=", "target_left", "+", "target_right", "\n", "\n", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", "\n", "\n", "inter", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "area_union", "=", "target_area", "+", "pred_area", "-", "inter", "\n", "ious", "=", "inter", "/", "area_union", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_matched_targets": [[124, 162], ["loc_data.size", "priors.size", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "range", "priors.size", "truths.size", "priors[].unsqueeze().expand", "area.min", "analyze_gradnorm.compute_iou", "conf.clone", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "priors[].unsqueeze", "truths[].unsqueeze().expand", "truths[].unsqueeze().expand", "truths[].unsqueeze", "truths[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.compute_iou"], ["", "def", "get_matched_targets", "(", "targets", ",", "loc_data", ",", "priors", ",", "clip_length", ")", ":", "\n", "    ", "num_batch", "=", "loc_data", ".", "size", "(", "0", ")", "\n", "num_priors", "=", "priors", ".", "size", "(", "0", ")", "\n", "# match priors and ground truth segments", "\n", "loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_loc_t", "=", "torch", ".", "Tensor", "(", "num_batch", ",", "num_priors", ",", "2", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "prop_conf_t", "=", "torch", ".", "LongTensor", "(", "num_batch", ",", "num_priors", ")", ".", "to", "(", "loc_data", ".", "device", ")", "\n", "for", "idx", "in", "range", "(", "num_batch", ")", ":", "\n", "        ", "truths", "=", "targets", "[", "idx", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "labels", "=", "targets", "[", "idx", "]", "[", ":", ",", "-", "1", "]", "\n", "pre_loc", "=", "loc_data", "[", "idx", "]", "\n", "K", "=", "priors", ".", "size", "(", "0", ")", "\n", "N", "=", "truths", ".", "size", "(", "0", ")", "\n", "center", "=", "priors", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "K", ",", "N", ")", "\n", "left", "=", "(", "center", "-", "truths", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", ")", "*", "clip_length", "\n", "right", "=", "(", "truths", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "K", ",", "N", ")", "-", "center", ")", "*", "clip_length", "\n", "area", "=", "left", "+", "right", "\n", "maxn", "=", "clip_length", "*", "2", "\n", "area", "[", "left", "<", "0", "]", "=", "maxn", "\n", "area", "[", "right", "<", "0", "]", "=", "maxn", "\n", "best_truth_area", ",", "best_truth_idx", "=", "area", ".", "min", "(", "1", ")", "\n", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "priors", "[", ":", ",", "0", "]", "-", "truths", "[", "best_truth_idx", ",", "0", "]", ")", "*", "clip_length", "\n", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "truths", "[", "best_truth_idx", ",", "1", "]", "-", "priors", "[", ":", ",", "0", "]", ")", "*", "clip_length", "\n", "conf", "=", "labels", "[", "best_truth_idx", "]", "\n", "conf", "[", "best_truth_area", ">=", "maxn", "]", "=", "0", "\n", "conf_t", "[", "idx", "]", "=", "conf", "\n", "\n", "iou", "=", "compute_iou", "(", "pre_loc", ",", "loc_t", "[", "idx", "]", ")", "# [num_priors]", "\n", "prop_conf", "=", "conf", ".", "clone", "(", ")", "\n", "prop_conf", "[", "iou", "<", "cfg", ".", "overlap_thresh", "]", "=", "0", "\n", "prop_conf_t", "[", "idx", "]", "=", "prop_conf", "\n", "prop_w", "=", "pre_loc", "[", ":", ",", "0", "]", "+", "pre_loc", "[", ":", ",", "1", "]", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "0", "]", "-", "pre_loc", "[", ":", ",", "0", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "prop_loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "=", "(", "loc_t", "[", "idx", "]", "[", ":", ",", "1", "]", "-", "pre_loc", "[", ":", ",", "1", "]", ")", "/", "(", "0.5", "*", "prop_w", ")", "\n", "\n", "", "return", "loc_t", ",", "conf_t", ",", "prop_loc_t", ",", "prop_conf_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func": [[164, 171], ["torch.relu", "torch.exp", "torch.exp", "torch.exp", "torch.softplus", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "evidence_func", "(", "logit", ",", "evidence", "=", "'exp'", ")", ":", "\n", "    ", "if", "evidence", "==", "'relu'", ":", "\n", "        ", "return", "F", ".", "relu", "(", "logit", ")", "\n", "", "if", "evidence", "==", "'exp'", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "torch", ".", "clamp", "(", "logit", ",", "-", "10", ",", "10", ")", ")", "\n", "", "if", "evidence", "==", "'softplus'", ":", "\n", "        ", "return", "F", ".", "softplus", "(", "logit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.grad_edl": [[173, 190], ["target.view.view", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.abs", "torch.abs", "torch.abs", "logit.view.dim", "logit.view.view", "logit.view.transpose().contiguous", "logit.view.view", "analyze_gradnorm.evidence_func", "pred_alpha.sum", "logit.view.size", "logit.view.size", "logit.view.size", "torch.eye", "torch.eye", "torch.eye", "logit.view.transpose"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.evidence_func"], ["", "", "def", "grad_edl", "(", "logit", ",", "target", ",", "num_cls", "=", "15", ",", "evidence", "=", "'exp'", ")", ":", "\n", "    ", "if", "logit", ".", "dim", "(", ")", ">", "2", ":", "\n", "# N,C,d1,d2 -> N,C,m (m=d1*d2*...)", "\n", "        ", "logit", "=", "logit", ".", "view", "(", "logit", ".", "size", "(", "0", ")", ",", "logit", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "logit", "=", "logit", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# [N,C,d1*d2..] -> [N,d1*d2..,C]", "\n", "logit", "=", "logit", ".", "view", "(", "-", "1", ",", "logit", ".", "size", "(", "-", "1", ")", ")", "# [N,d1*d2..,C]-> [N*d1*d2..,C]", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ")", "# [N,d1,d2,...]->[N*d1*d2*...,]", "\n", "# one-hot embedding for the target", "\n", "y", "=", "torch", ".", "eye", "(", "num_cls", ")", ".", "to", "(", "logit", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "y", "=", "y", "[", "target", "]", "\n", "\n", "pred_alpha", "=", "evidence_func", "(", "logit", ",", "evidence", "=", "evidence", ")", "+", "1", "# (alpha = e + 1)", "\n", "uncertainty", "=", "num_cls", "/", "pred_alpha", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# (N, 1)", "\n", "# gradient length", "\n", "grad", "=", "(", "1", "/", "pred_alpha", "-", "uncertainty", ")", "*", "y", "# y_ij * (1/alpha_ij - u_i)", "\n", "grad_norm", "=", "torch", ".", "abs", "(", "grad", ")", "\n", "return", "grad", ",", "grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_grad_info": [[192, 246], ["analyze_gradnorm.set_seed", "analyze_gradnorm.setup_model", "analyze_gradnorm.setup_dataloader", "tqdm.tqdm", "enumerate", "clips.cuda.cuda", "output_dict[].view", "conf_t.view", "output_dict[].view", "prop_conf_t.view.view", "t.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "setup_model.", "analyze_gradnorm.get_matched_targets", "torch.softmax", "analyze_gradnorm.grad_edl", "torch.softmax", "analyze_gradnorm.grad_edl", "all_grad_norms.append", "all_grads.append", "all_grad_norms_prop.append", "all_grads_prop.append", "targets_conf[].unsqueeze", "conf_t.view.numel", "prop_conf_t[].unsqueeze", "prop_conf_t.view.numel", "grad_norms.cpu().numpy", "grads.cpu().numpy", "grad_norms_prop.cpu().numpy", "grads_prop.cpu().numpy", "inds_keep.squeeze", "inds_keep.squeeze", "grad_norms.cpu", "grads.cpu", "grad_norms_prop.cpu", "grads_prop.cpu"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.set_seed", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.setup_model", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.setup_dataloader", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.get_matched_targets", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.grad_edl", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.grad_edl"], ["", "def", "get_grad_info", "(", "cfg", ")", ":", "\n", "    ", "set_seed", "(", "cfg", ".", "random_seed", ")", "\n", "# Setup model", "\n", "net", "=", "setup_model", "(", "cfg", ")", "\n", "\n", "# Setup dataloader", "\n", "train_data_loader", ",", "epoch_step_num", "=", "setup_dataloader", "(", "cfg", ")", "\n", "\n", "# start loop", "\n", "all_grad_norms", ",", "all_grad_norms_prop", "=", "[", "]", ",", "[", "]", "\n", "all_grads", ",", "all_grads_prop", "=", "[", "]", ",", "[", "]", "\n", "with", "tqdm", ".", "tqdm", "(", "train_data_loader", ",", "total", "=", "epoch_step_num", ",", "ncols", "=", "0", ")", "as", "pbar", ":", "\n", "        ", "for", "n_iter", ",", "(", "clips", ",", "targets", ",", "scores", ",", "ssl_clips", ",", "ssl_targets", ",", "flags", ")", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "clips", "=", "clips", ".", "cuda", "(", ")", "\n", "targets", "=", "[", "t", ".", "cuda", "(", ")", "for", "t", "in", "targets", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# run infernece", "\n", "                ", "output_dict", "=", "net", "(", "clips", ",", "ssl", "=", "False", ")", "\n", "# get the matched target", "\n", "loc_t", ",", "conf_t", ",", "prop_loc_t", ",", "prop_conf_t", "=", "get_matched_targets", "(", "targets", ",", "output_dict", "[", "'loc'", "]", ",", "output_dict", "[", "'priors'", "]", ",", "cfg", ".", "clip_length", ")", "\n", "\n", "# coarse stage", "\n", "", "conf_p", "=", "output_dict", "[", "'conf'", "]", ".", "view", "(", "-", "1", ",", "cfg", ".", "num_classes", ")", "\n", "targets_conf", "=", "conf_t", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "cfg", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "                ", "conf_p", "=", "F", ".", "softmax", "(", "conf_p", ",", "dim", "=", "1", ")", "\n", "", "if", "cfg", ".", "os_head", ":", "\n", "                ", "inds_keep", "=", "targets_conf", ">", "0", "# (N,1)", "\n", "targets_conf", "=", "targets_conf", "[", "inds_keep", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "1", "# (M,1), starting from 0", "\n", "conf_p", "=", "conf_p", "[", "inds_keep", ".", "squeeze", "(", ")", "]", "# (M,15)", "\n", "", "if", "targets_conf", ".", "numel", "(", ")", ">", "0", "and", "cfg", ".", "cls_loss_type", "==", "'edl'", ":", "\n", "# compute gradient norm (one-hot)", "\n", "                ", "grads", ",", "grad_norms", "=", "grad_edl", "(", "conf_p", ",", "targets_conf", ",", "num_cls", "=", "cfg", ".", "num_classes", ",", "evidence", "=", "cfg", ".", "edl_config", "[", "'evidence'", "]", ")", "\n", "\n", "# refined stage", "\n", "", "prop_conf_p", "=", "output_dict", "[", "'prop_conf'", "]", ".", "view", "(", "-", "1", ",", "cfg", ".", "num_classes", ")", "\n", "prop_conf_t", "=", "prop_conf_t", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "cfg", ".", "cls_loss_type", "==", "'focal'", ":", "\n", "                ", "prop_conf_p", "=", "F", ".", "softmax", "(", "prop_conf_p", ",", "dim", "=", "1", ")", "\n", "", "if", "cfg", ".", "os_head", ":", "\n", "                ", "inds_keep", "=", "prop_conf_t", ">", "0", "# (N,1)", "\n", "prop_conf_t", "=", "prop_conf_t", "[", "inds_keep", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "1", "# (M,1), starting from 0", "\n", "prop_conf_p", "=", "prop_conf_p", "[", "inds_keep", ".", "squeeze", "(", ")", "]", "# (M,15)", "\n", "", "if", "prop_conf_t", ".", "numel", "(", ")", ">", "0", "and", "cfg", ".", "cls_loss_type", "==", "'edl'", ":", "\n", "# compute gradient norm", "\n", "                ", "grads_prop", ",", "grad_norms_prop", "=", "grad_edl", "(", "prop_conf_p", ",", "prop_conf_t", ",", "num_cls", "=", "cfg", ".", "num_classes", ",", "evidence", "=", "cfg", ".", "edl_config", "[", "'evidence'", "]", ")", "\n", "\n", "", "if", "grad_norms", "is", "not", "None", ":", "\n", "                ", "all_grad_norms", ".", "append", "(", "grad_norms", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_grads", ".", "append", "(", "grads", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "if", "grad_norms_prop", "is", "not", "None", ":", "\n", "                ", "all_grad_norms_prop", ".", "append", "(", "grad_norms_prop", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_grads_prop", ".", "append", "(", "grads_prop", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "", "return", "all_grad_norms", ",", "all_grad_norms_prop", ",", "all_grads", ",", "all_grads_prop", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.plot_grad_density": [[248, 290], ["numpy.zeros", "numpy.zeros", "numpy.concatenate().sum", "numpy.zeros_like", "range", "matplotlib.subplots", "ax1.plot", "ax1.legend", "ax1.twinx", "ax1.twinx.plot", "ax1.twinx.legend", "matplotlib.xlabel", "matplotlib.xlim", "matplotlib.tight_layout", "matplotlib.savefig", "inds.sum", "float", "range", "numpy.concatenate", "np.concatenate().sum.max", "range"], "function", ["None"], ["", "def", "plot_grad_density", "(", "save_file", ",", "all_grad_norms", ",", "num_bins", "=", "30", ",", "momentum", "=", "0.75", ",", "fontsize", "=", "18", ")", ":", "\n", "\n", "    ", "edges", "=", "[", "float", "(", "x", ")", "/", "num_bins", "for", "x", "in", "range", "(", "num_bins", "+", "1", ")", "]", "\n", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "momentum", ">", "0", ":", "\n", "        ", "acc_sum", "=", "[", "0.0", "for", "_", "in", "range", "(", "num_bins", ")", "]", "\n", "", "grad_density", "=", "np", ".", "zeros", "(", "(", "num_bins", ")", ")", "\n", "weight_density", "=", "np", ".", "zeros", "(", "(", "num_bins", ")", ")", "\n", "grad_norm", "=", "np", ".", "concatenate", "(", "all_grad_norms", ",", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "# sum for one-hot grad_norms", "\n", "weights", "=", "np", ".", "zeros_like", "(", "grad_norm", ")", "\n", "for", "i", "in", "range", "(", "num_bins", ")", ":", "\n", "# compute gradient density (number of gradients in each bin)", "\n", "        ", "inds", "=", "(", "grad_norm", ">=", "edges", "[", "i", "]", ")", "&", "(", "grad_norm", "<", "edges", "[", "i", "+", "1", "]", ")", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", "\n", "grad_density", "[", "i", "]", "=", "num_in_bin", "\n", "# compute the weights", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "            ", "if", "momentum", ">", "0", ":", "\n", "                ", "acc_sum", "[", "i", "]", "=", "momentum", "*", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "momentum", ")", "*", "num_in_bin", "\n", "w", "=", "1.0", "/", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "w", "=", "1.0", "/", "num_in_bin", "\n", "", "weights", "[", "inds", "]", "=", "w", "\n", "weight_density", "[", "i", "]", "=", "w", "\n", "\n", "# plot", "\n", "", "", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "ax1", ".", "plot", "(", "edges", "[", ":", "-", "1", "]", ",", "grad_density", ",", "'r-'", ",", "linewidth", "=", "2", ",", "label", "=", "'Grad Density'", ")", "\n", "# ax1.set_ylabel('fraction of samples', fontsize=fontsize)", "\n", "# ax1.set_yscale('log')", "\n", "ax1", ".", "legend", "(", "fontsize", "=", "fontsize", ",", "loc", "=", "'upper left'", ")", "\n", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "ax2", ".", "plot", "(", "edges", "[", ":", "-", "1", "]", ",", "weight_density", ",", "'b-'", ",", "linewidth", "=", "2", ",", "label", "=", "'weights'", ")", "\n", "# ax2.set_ylabel('weights', fontsize=fontsize)", "\n", "# ax2.set_yscale('log')", "\n", "ax2", ".", "legend", "(", "fontsize", "=", "fontsize", ",", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'gradient norm'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "grad_norm", ".", "max", "(", ")", "-", "1.0", "/", "num_bins", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.plot_grad_hist": [[292, 302], ["numpy.concatenate().sum", "matplotlib.subplots", "matplotlib.hist", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.xlim", "matplotlib.ylim", "numpy.concatenate", "min", "max"], "function", ["None"], ["", "def", "plot_grad_hist", "(", "save_file", ",", "all_grads", ",", "xlim", "=", "(", "-", "0.1", ",", "0.1", ")", ",", "ylim", "=", "(", "0", ",", "100", ")", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "grads", "=", "np", ".", "concatenate", "(", "all_grads", ",", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "plt", ".", "hist", "(", "grads", ",", "200", ",", "density", "=", "True", ",", "alpha", "=", "0.8", ")", "\n", "plt", ".", "xlabel", "(", "\"gradient\"", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "\"probability density\"", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xlim", "(", "xlim", ")", "if", "xlim", "is", "not", "None", "else", "[", "min", "(", "grads", ")", ",", "max", "(", "grads", ")", "]", "\n", "plt", ".", "ylim", "(", "ylim", ")", "if", "xlim", "is", "not", "None", "else", "None", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.experiments.analyze_gradnorm.plot_gradnorm_weight": [[304, 325], ["numpy.concatenate().sum", "numpy.linspace", "matplotlib.subplots", "ax1.hist", "ax1.set_yscale", "ax1.set_ylabel", "ax1.legend", "ax1.twinx", "ax1.twinx.plot", "ax1.twinx.set_yscale", "ax1.twinx.set_ylabel", "ax1.twinx.legend", "matplotlib.tight_layout", "matplotlib.savefig", "np.concatenate().sum.min", "np.concatenate().sum.max", "numpy.exp", "matplotlib.xlim", "numpy.concatenate", "min", "max"], "function", ["None"], ["", "def", "plot_gradnorm_weight", "(", "save_file", ",", "all_grad_norms", ",", "xlim", "=", "(", "0", ",", "1", ")", ",", "ylim", "=", "(", "0", ",", "100", ")", ",", "fontsize", "=", "18", ")", ":", "\n", "    ", "grad_norm", "=", "np", ".", "concatenate", "(", "all_grad_norms", ",", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "# sum for one-hot grad_norms", "\n", "x_vals", "=", "np", ".", "linspace", "(", "grad_norm", ".", "min", "(", ")", ",", "grad_norm", ".", "max", "(", ")", ",", "num", "=", "200", ")", "\n", "weights", "=", "1.0", "/", "np", ".", "exp", "(", "10", "*", "x_vals", ")", "\n", "# plot figure", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "8", ",", "5", ")", ")", "\n", "ax1", ".", "hist", "(", "grad_norm", ",", "200", ",", "density", "=", "True", ",", "alpha", "=", "0.8", ")", "\n", "ax1", ".", "set_yscale", "(", "'log'", ")", "\n", "ax1", ".", "set_ylabel", "(", "\"probability density\"", ",", "fontsize", "=", "fontsize", ")", "\n", "# ax1.set_ylim()", "\n", "ax1", ".", "legend", "(", "[", "\"frequency of gradient norm\"", "]", ",", "fontsize", "=", "fontsize", ",", "loc", "=", "'upper left'", ")", "\n", "\n", "ax2", "=", "ax1", ".", "twinx", "(", ")", "\n", "ax2", ".", "plot", "(", "x_vals", ",", "weights", ",", "'r-'", ",", "linewidth", "=", "2", ")", "\n", "ax2", ".", "set_yscale", "(", "'log'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'weights'", ",", "fontsize", "=", "fontsize", ")", "\n", "ax2", ".", "legend", "(", "[", "'weights'", "]", ",", "fontsize", "=", "fontsize", ",", "loc", "=", "'upper right'", ")", "\n", "\n", "plt", ".", "xlim", "(", "xlim", ")", "if", "xlim", "is", "not", "None", "else", "[", "min", "(", "grad_norm", ")", ",", "max", "(", "grad_norm", ")", "]", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.read_threshold": [[11, 19], ["os.path.exists", "open", "json.load"], "function", ["None"], ["def", "read_threshold", "(", "trainset_result", ",", "type", "=", "'confidence'", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "trainset_result", ")", ",", "'File does not exist! %s'", "%", "(", "trainset_result", ")", "\n", "with", "open", "(", "trainset_result", ",", "'r'", ")", "as", "fobj", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "threshold", "=", "data", "[", "'external_data'", "]", "[", "'threshold'", "]", "\n", "", "if", "type", "==", "'confidence'", ":", "\n", "        ", "threshold", "=", "1", "-", "threshold", "\n", "", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.get_activity_index": [[21, 27], ["numpy.loadtxt", "enumerate"], "function", ["None"], ["", "def", "get_activity_index", "(", "class_info_path", ")", ":", "\n", "    ", "txt", "=", "np", ".", "loadtxt", "(", "class_info_path", ",", "dtype", "=", "str", ")", "\n", "class_to_idx", "=", "{", "'Unknown'", ":", "0", "}", "\n", "for", "idx", ",", "l", "in", "enumerate", "(", "txt", ")", ":", "\n", "        ", "class_to_idx", "[", "l", "[", "1", "]", "]", "=", "idx", "+", "1", "# starting from 1 to K", "\n", "", "return", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.import_ground_truth": [[29, 52], ["data[].items", "numpy.array", "open", "json.load", "videos.append", "float", "float", "np.array.append", "labels.append"], "function", ["None"], ["", "def", "import_ground_truth", "(", "gt_file", ",", "subset", "=", "'test'", ")", ":", "\n", "    ", "with", "open", "(", "gt_file", ",", "'r'", ")", "as", "fobj", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "\n", "", "videos", ",", "segments", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "durations", "=", "{", "}", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "[", "'subset'", "]", "!=", "subset", ":", "\n", "            ", "continue", "\n", "", "min_start", ",", "max_end", "=", "np", ".", "inf", ",", "-", "np", ".", "inf", "\n", "for", "ann", "in", "v", "[", "'annotations'", "]", ":", "\n", "            ", "videos", ".", "append", "(", "videoid", ")", "\n", "start", "=", "float", "(", "ann", "[", "'segment'", "]", "[", "0", "]", ")", "\n", "end", "=", "float", "(", "ann", "[", "'segment'", "]", "[", "1", "]", ")", "\n", "segments", ".", "append", "(", "[", "start", ",", "end", "]", ")", "\n", "labels", ".", "append", "(", "ann", "[", "'label'", "]", ")", "\n", "# find the min start and max end", "\n", "min_start", "=", "start", "if", "start", "<", "min_start", "else", "min_start", "\n", "max_end", "=", "end", "if", "end", ">", "max_end", "else", "max_end", "\n", "", "durations", "[", "videoid", "]", "=", "[", "min_start", ",", "max_end", "]", "\n", "", "segments", "=", "np", ".", "array", "(", "segments", ")", "\n", "ground_truth", "=", "{", "'videos'", ":", "videos", ",", "'segments'", ":", "segments", ",", "'labels'", ":", "labels", "}", "\n", "return", "ground_truth", ",", "durations", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.import_prediction": [[54, 84], ["data[].items", "open", "json.load", "videos.append", "float", "float", "segments.append", "labels.append", "scores[].append", "scores[].append", "scores[].append"], "function", ["None"], ["", "def", "import_prediction", "(", "pred_file", ",", "video_list", ",", "activity_index", ",", "score_items", "=", "[", "'uncertainty'", ",", "'actionness'", "]", ")", ":", "\n", "    ", "with", "open", "(", "pred_file", ",", "'r'", ")", "as", "fobj", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "", "videos", ",", "segments", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "scores", "=", "{", "}", "\n", "for", "item", "in", "score_items", ":", "\n", "        ", "scores", "[", "item", "]", "=", "[", "]", "\n", "", "for", "videoid", ",", "v", "in", "data", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "videoid", "not", "in", "video_list", ":", "\n", "            ", "continue", "\n", "", "for", "result", "in", "v", ":", "\n", "            ", "if", "result", "[", "'label'", "]", "not", "in", "activity_index", ":", "\n", "                ", "continue", "\n", "# load videos", "\n", "", "videos", ".", "append", "(", "videoid", ")", "\n", "# load segments", "\n", "start", "=", "float", "(", "result", "[", "'segment'", "]", "[", "0", "]", ")", "\n", "end", "=", "float", "(", "result", "[", "'segment'", "]", "[", "1", "]", ")", "\n", "segments", ".", "append", "(", "[", "start", ",", "end", "]", ")", "\n", "# load labels", "\n", "labels", ".", "append", "(", "result", "[", "'label'", "]", ")", "\n", "# load scores", "\n", "if", "'uncertainty'", "in", "score_items", ":", "\n", "                ", "scores", "[", "'uncertainty'", "]", ".", "append", "(", "result", "[", "'uncertainty'", "]", ")", "\n", "", "if", "'confidence'", "in", "score_items", ":", "\n", "                ", "scores", "[", "'confidence'", "]", ".", "append", "(", "result", "[", "'score'", "]", ")", "\n", "", "if", "'actionness'", "in", "score_items", ":", "\n", "                ", "scores", "[", "'actionness'", "]", ".", "append", "(", "result", "[", "'actionness'", "]", ")", "\n", "", "", "", "predictions", "=", "{", "'videos'", ":", "videos", ",", "'segments'", ":", "segments", ",", "'labels'", ":", "labels", ",", "'scores'", ":", "scores", "}", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.retrieve_segments": [[86, 98], ["len", "numpy.array", "enumerate"], "function", ["None"], ["", "def", "retrieve_segments", "(", "data", ",", "video_name", ",", "type", "=", "'gt'", ")", ":", "\n", "    ", "idx", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "data", "[", "'videos'", "]", ")", "if", "x", "==", "video_name", "]", "\n", "segments", ",", "labels", ",", "scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "len", "(", "idx", ")", ">", "0", ":", "\n", "        ", "segments", "=", "[", "data", "[", "'segments'", "]", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "labels", "=", "[", "data", "[", "'labels'", "]", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "if", "type", "==", "'pred_u'", ":", "\n", "            ", "scores", "=", "[", "data", "[", "'scores'", "]", "[", "'uncertainty'", "]", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "", "elif", "type", "==", "'pred_conf'", ":", "\n", "            ", "scores", "=", "[", "1", "-", "data", "[", "'scores'", "]", "[", "'confidence'", "]", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "", "segments", "=", "np", ".", "array", "(", "segments", ")", "\n", "", "return", "segments", ",", "labels", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.match_preds_with_gt": [[100, 119], ["enumerate", "numpy.ones", "zip", "AFSD.evaluation.utils_eval.segment_iou", "actions_pred[].append", "actions_pred[].append", "actions_pred[].append", "len", "AFSD.evaluation.utils_eval.segment_iou.argsort"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.evaluation.utils_eval.segment_iou"], ["", "def", "match_preds_with_gt", "(", "segment_preds", ",", "label_preds", ",", "scores_pred", ",", "segment_gts", ",", "thresh", "=", "0.25", ",", "tiou_threshold", "=", "0.3", ")", ":", "\n", "    ", "actions_pred", "=", "{", "'segments'", ":", "[", "]", ",", "'labels'", ":", "[", "]", ",", "'matched_gtid'", ":", "[", "]", "}", "\n", "# match predictions with ground truth by tIoU", "\n", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "segment_gts", ")", ")", ")", "*", "-", "1", "\n", "for", "idx", ",", "(", "seg", ",", "label", ",", "score", ")", "in", "enumerate", "(", "zip", "(", "segment_preds", ",", "label_preds", ",", "scores_pred", ")", ")", ":", "\n", "        ", "tiou_arr", "=", "segment_iou", "(", "seg", ",", "segment_gts", ")", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# tIoU in a decreasing order", "\n", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "            ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_threshold", ":", "# background segment", "\n", "                ", "break", "\n", "", "", "if", "lock_gt", "[", "jdx", "]", ">=", "0", ":", "\n", "            ", "continue", "# this gt was matched before", "\n", "# for positive localized actions", "\n", "", "label", "=", "'Unknown'", "if", "score", ">", "thresh", "else", "label", "\n", "actions_pred", "[", "'segments'", "]", ".", "append", "(", "seg", ")", "\n", "actions_pred", "[", "'labels'", "]", ".", "append", "(", "label", ")", "\n", "actions_pred", "[", "'matched_gtid'", "]", ".", "append", "(", "jdx", ")", "\n", "lock_gt", "[", "jdx", "]", "=", "idx", "\n", "", "return", "actions_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.get_thresholds": [[121, 151], ["tqdm.tqdm", "print", "visualization.retrieve_segments", "visualization.retrieve_segments", "numpy.arange", "numpy.zeros", "enumerate", "visualization.read_threshold", "len", "visualization.match_preds_with_gt", "zip", "len", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.retrieve_segments", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.retrieve_segments", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.read_threshold", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.match_preds_with_gt"], ["", "def", "get_thresholds", "(", "predictions", ",", "ground_truths", ",", "video_list", ",", "method", ",", "unct_threshold_openmax", ",", "trainset_result", ",", "tiou", "=", "0.3", ")", ":", "\n", "    ", "thresholds", "=", "{", "}", "\n", "if", "method", "==", "'OpenTAL'", ":", "\n", "# unct_threshold = unct_threshold_opental", "\n", "        ", "for", "video_name", "in", "tqdm", "(", "video_list", ",", "total", "=", "len", "(", "video_list", ")", ",", "desc", "=", "'Searching for thresholds: '", ")", ":", "\n", "            ", "segment_gts", ",", "label_gts", ",", "_", "=", "retrieve_segments", "(", "ground_truths", ",", "video_name", ",", "type", "=", "'gt'", ")", "\n", "segment_preds", ",", "label_preds", ",", "scores_pred", "=", "retrieve_segments", "(", "predictions", ",", "video_name", ",", "type", "=", "'pred_u'", ")", "\n", "# search for the best thresholds", "\n", "candidates", "=", "np", ".", "arange", "(", "0.05", ",", "1.0", ",", "0.05", ")", "\n", "all_cnts", "=", "np", ".", "zeros", "(", "(", "len", "(", "candidates", ")", ",", ")", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                ", "actions_pred", "=", "match_preds_with_gt", "(", "segment_preds", ",", "label_preds", ",", "scores_pred", ",", "segment_gts", ",", "thresh", "=", "t", ",", "tiou_threshold", "=", "tiou", ")", "\n", "cnt", "=", "0", "\n", "for", "label_pred", ",", "jdx", "in", "zip", "(", "actions_pred", "[", "'labels'", "]", ",", "actions_pred", "[", "'matched_gtid'", "]", ")", ":", "\n", "                    ", "if", "label_gts", "[", "jdx", "]", "==", "label_pred", ":", "\n", "                        ", "cnt", "=", "cnt", "+", "1", "\n", "", "else", ":", "\n", "                        ", "cnt", "=", "cnt", "-", "1", "\n", "", "", "all_cnts", "[", "i", "]", "=", "cnt", "\n", "", "thresholds", "[", "video_name", "]", "=", "candidates", "[", "np", ".", "argmax", "(", "all_cnts", ")", "]", "\n", "", "print", "(", "thresholds", ")", "\n", "", "elif", "method", "==", "'OpenMax'", ":", "\n", "        ", "for", "video_name", "in", "video_list", ":", "\n", "            ", "thresholds", "[", "video_name", "]", "=", "unct_threshold_openmax", "\n", "", "", "else", ":", "\n", "        ", "thresh", "=", "read_threshold", "(", "trainset_result", ")", "\n", "for", "video_name", "in", "video_list", ":", "\n", "            ", "thresholds", "[", "video_name", "]", "=", "thresh", "\n", "", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.get_n_hls_colors": [[153, 165], ["hls_colors.append", "random.random", "random.random"], "function", ["None"], ["", "def", "get_n_hls_colors", "(", "num", ")", ":", "\n", "    ", "hls_colors", "=", "[", "]", "\n", "i", "=", "0", "\n", "step", "=", "360.0", "/", "num", "\n", "while", "i", "<", "360", ":", "\n", "        ", "h", "=", "i", "\n", "s", "=", "90", "+", "random", ".", "random", "(", ")", "*", "10", "\n", "l", "=", "50", "+", "random", ".", "random", "(", ")", "*", "10", "\n", "_hlsc", "=", "[", "h", "/", "360.0", ",", "l", "/", "100.0", ",", "s", "/", "100.0", "]", "\n", "hls_colors", ".", "append", "(", "_hlsc", ")", "\n", "i", "+=", "step", "\n", "", "return", "hls_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.ncolors": [[166, 177], ["visualization.get_n_hls_colors", "colorsys.hls_to_rgb", "rgb_colors.append", "int"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.get_n_hls_colors"], ["", "def", "ncolors", "(", "num", ")", ":", "\n", "    ", "rgb_colors", "=", "[", "]", "\n", "if", "num", "<", "1", ":", "\n", "        ", "return", "rgb_colors", "\n", "", "hls_colors", "=", "get_n_hls_colors", "(", "num", ")", "\n", "for", "hlsc", "in", "hls_colors", ":", "\n", "        ", "_r", ",", "_g", ",", "_b", "=", "colorsys", ".", "hls_to_rgb", "(", "hlsc", "[", "0", "]", ",", "hlsc", "[", "1", "]", ",", "hlsc", "[", "2", "]", ")", "\n", "r", ",", "g", ",", "b", "=", "[", "int", "(", "x", "*", "255.0", ")", "for", "x", "in", "(", "_r", ",", "_g", ",", "_b", ")", "]", "\n", "rgb_colors", ".", "append", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "return", "rgb_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.draw_action_detections": [[180, 243], ["matplotlib.subplots", "numpy.arange", "zip", "enumerate", "axes.imshow", "axes.set_facecolor", "axes.set_frame_on", "axes.get_xaxis().tick_bottom", "axes.get_yaxis().set_visible", "axes.get_xaxis().get_view_interval", "axes.get_yaxis().get_view_interval", "axes.add_artist", "axes.set_yticks", "axes.set_xticks", "axes.set_xticklabels", "int", "axes.text", "enumerate", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "numpy.ones", "int", "int", "all_actions.items", "zip", "matplotlib.lines.Line2D", "list", "axes.text", "matplotlib.savefig", "len", "int", "int", "axes.get_xaxis", "axes.get_yaxis", "axes.get_xaxis", "axes.get_yaxis", "all_actions.keys"], "function", ["None"], ["", "def", "draw_action_detections", "(", "fig_file", ",", "all_actions", ",", "actions_gt", ",", "durations", ",", "cls_to_color", ",", "fontsize", "=", "18", ",", "paper_format", "=", "False", ")", ":", "\n", "    ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "15", ",", "5", ")", ",", "sharex", "=", "True", ")", "\n", "plt", ".", "rcParams", "[", "\"font.family\"", "]", "=", "\"Arial\"", "\n", "video_height", "=", "30", "\n", "video_len", "=", "500", "# pixels", "\n", "offset", "=", "5", "\n", "line_color", "=", "(", "128", ",", "138", ",", "135", ")", "\n", "video_duration", "=", "durations", "[", "1", "]", "+", "3", "# seconds", "\n", "xlocs", "=", "np", ".", "arange", "(", "video_len", "+", "1", ",", "step", "=", "100", ")", "\n", "xlabels", "=", "[", "'%.1f'", "%", "(", "loc", "/", "video_len", "*", "video_duration", ")", "for", "loc", "in", "xlocs", "]", "\n", "\n", "\n", "fig_height", "=", "(", "video_height", "+", "offset", "+", "2", ")", "*", "(", "len", "(", "all_actions", ")", "+", "1", ")", "\n", "video_bars", "=", "np", ".", "ones", "(", "(", "fig_height", ",", "video_len", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "# draw GT bar", "\n", "r_start", "=", "0", "\n", "r_end", "=", "video_height", "\n", "for", "seg", ",", "label", "in", "zip", "(", "actions_gt", "[", "'segments'", "]", ",", "actions_gt", "[", "'labels'", "]", ")", ":", "\n", "        ", "c_start", "=", "int", "(", "video_len", "/", "video_duration", "*", "seg", "[", "0", "]", ")", "\n", "c_end", "=", "int", "(", "video_len", "/", "video_duration", "*", "seg", "[", "1", "]", ")", "\n", "color", "=", "cls_to_color", "[", "label", "]", "if", "label", "in", "cls_to_color", "else", "(", "0", ",", "0", ",", "0", ")", "# black: novel class", "\n", "video_bars", "[", "r_start", ":", "r_end", ",", "c_start", ":", "c_end", "+", "1", ",", ":", "]", "=", "color", "\n", "# draw upper and bottom lines", "\n", "", "video_bars", "[", "r_start", ":", "r_start", "+", "1", ",", ":", ",", ":", "]", "=", "line_color", "\n", "video_bars", "[", "r_end", ":", "r_end", "+", "1", ",", ":", ",", ":", "]", "=", "line_color", "\n", "\n", "# draw Pred bars", "\n", "for", "i", ",", "(", "method", ",", "actions_pred", ")", "in", "enumerate", "(", "all_actions", ".", "items", "(", ")", ")", ":", "\n", "        ", "r_start", "+=", "(", "video_height", "+", "offset", ")", "\n", "r_end", "+=", "(", "video_height", "+", "offset", ")", "\n", "for", "seg", ",", "label", "in", "zip", "(", "actions_pred", "[", "'segments'", "]", ",", "actions_pred", "[", "'labels'", "]", ")", ":", "\n", "            ", "c_start", "=", "int", "(", "video_len", "/", "video_duration", "*", "seg", "[", "0", "]", ")", "\n", "c_end", "=", "int", "(", "video_len", "/", "video_duration", "*", "seg", "[", "1", "]", ")", "\n", "color", "=", "cls_to_color", "[", "label", "]", "if", "label", "!=", "'Unknown'", "else", "(", "0", ",", "0", ",", "0", ")", "\n", "video_bars", "[", "r_start", ":", "r_end", ",", "c_start", ":", "c_end", "+", "1", ",", ":", "]", "=", "color", "\n", "# draw upper and bottom lines", "\n", "", "video_bars", "[", "r_start", ":", "r_start", "+", "1", ",", ":", ",", ":", "]", "=", "line_color", "\n", "video_bars", "[", "r_end", ":", "r_end", "+", "1", ",", ":", ",", ":", "]", "=", "line_color", "\n", "\n", "# visualize", "\n", "", "axes", ".", "imshow", "(", "video_bars", ")", "\n", "axes", ".", "set_facecolor", "(", "(", "1.0", ",", "0.47", ",", "0.42", ")", ")", "\n", "axes", ".", "set_frame_on", "(", "False", ")", "\n", "axes", ".", "get_xaxis", "(", ")", ".", "tick_bottom", "(", ")", "\n", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "xmin", ",", "xmax", "=", "axes", ".", "get_xaxis", "(", ")", ".", "get_view_interval", "(", ")", "\n", "ymin", ",", "ymax", "=", "axes", ".", "get_yaxis", "(", ")", ".", "get_view_interval", "(", ")", "\n", "axes", ".", "add_artist", "(", "Line2D", "(", "(", "xmin", ",", "xmax", ")", ",", "(", "ymin", ",", "ymin", ")", ",", "color", "=", "'black'", ",", "linewidth", "=", "2", ")", ")", "\n", "axes", ".", "set_yticks", "(", "[", "]", ")", "\n", "axes", ".", "set_xticks", "(", "xlocs", ")", "\n", "axes", ".", "set_xticklabels", "(", "xlabels", ",", "fontsize", "=", "fontsize", ")", "\n", "# draw labels", "\n", "r_center", "=", "int", "(", "video_height", "*", "0.5", ")", "\n", "left_border", "=", "-", "80", "\n", "axes", ".", "text", "(", "left_border", ",", "r_center", ",", "'Ground Truth'", ",", "horizontalalignment", "=", "'left'", ",", "verticalalignment", "=", "'center'", ",", "fontsize", "=", "fontsize", ")", "\n", "for", "i", ",", "method", "in", "enumerate", "(", "list", "(", "all_actions", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "r_center", "+=", "(", "video_height", "+", "offset", ")", "\n", "axes", ".", "text", "(", "left_border", ",", "r_center", ",", "method", ",", "horizontalalignment", "=", "'left'", ",", "verticalalignment", "=", "'center'", ",", "fontsize", "=", "fontsize", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "fig_file", ")", "\n", "if", "paper_format", ":", "\n", "        ", "plt", ".", "savefig", "(", "fig_file", "[", ":", "-", "4", "]", "+", "'.pdf'", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.main": [[246, 312], ["random.seed", "numpy.random.seed", "os.makedirs", "visualization.import_ground_truth", "list", "visualization.get_activity_index", "visualization.ncolors", "get_activity_index.items", "zip", "tqdm.tqdm", "set", "len", "visualization.import_prediction", "visualization.get_thresholds", "visualization.retrieve_segments", "os.path.join", "visualization.draw_action_detections", "len", "visualization.retrieve_segments", "visualization.match_preds_with_gt"], "function", ["home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.import_ground_truth", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.get_activity_index", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.ncolors", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.import_prediction", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.get_thresholds", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.retrieve_segments", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.draw_action_detections", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.retrieve_segments", "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.demo.visualization.match_preds_with_gt"], ["", "def", "main", "(", ")", ":", "\n", "    ", "split", "=", "'0'", "\n", "exp_tags", "=", "[", "'softmax'", ",", "'openmax'", ",", "'open_edl'", ",", "'opental_final'", "]", "\n", "method_list", "=", "[", "'SoftMax'", ",", "'OpenMax'", ",", "'EDL'", ",", "'OpenTAL'", "]", "\n", "# selected_images = ['video_test_0000039', 'video_test_0000379', 'video_test_0001081', 'video_test_0001468', 'video_test_0001484']", "\n", "tiou_threshold", "=", "0.3", "\n", "unct_threshold_opental", "=", "0.25", "# the best threshold", "\n", "unct_threshold_openmax", "=", "0.995", "# the best threshold", "\n", "random", ".", "seed", "(", "123", ")", "\n", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "\n", "# save path", "\n", "save_path", "=", "f'experiments/demo/vis_compare_all0'", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# # annotation infos", "\n", "# video_info_path = './datasets/thumos14/annotations_open/test_video_info.csv'", "\n", "# video_data_path = './datasets/thumos14/test_npy/'", "\n", "\n", "# GT annotations", "\n", "gt_file", "=", "'datasets/thumos14/annotations/thumos_gt.json'", "# all videos (known + unknown)", "\n", "# import ground truth and parse into segmental level dictionary", "\n", "ground_truths", ",", "video_durations", "=", "import_ground_truth", "(", "gt_file", ")", "\n", "video_list", "=", "list", "(", "set", "(", "ground_truths", "[", "'videos'", "]", ")", ")", "\n", "\n", "# import known actions", "\n", "known_class_file", "=", "f'datasets/thumos14/annotations_open/split_{split}/Class_Index_Known.txt'", "\n", "activity_index", "=", "get_activity_index", "(", "known_class_file", ")", "\n", "colors", "=", "ncolors", "(", "len", "(", "activity_index", ")", ")", "\n", "cls_to_color", "=", "{", "}", "\n", "for", "cls", ",", "idx", "in", "activity_index", ".", "items", "(", ")", ":", "\n", "        ", "cls_to_color", "[", "cls", "]", "=", "colors", "[", "idx", "]", "\n", "\n", "", "all_predictions", "=", "{", "}", "\n", "for", "method", ",", "tag", "in", "zip", "(", "method_list", ",", "exp_tags", ")", ":", "\n", "        ", "pred_file", "=", "f'output/{tag}/split_{split}/thumos14_open_rgb.json'", "\n", "# import predictions according the GT videos", "\n", "score_items", "=", "[", "'uncertainty'", "]", "if", "method", "in", "[", "'OpenTAL'", ",", "'EDL'", "]", "else", "[", "'confidence'", "]", "\n", "predictions", "=", "import_prediction", "(", "pred_file", ",", "video_list", ",", "activity_index", ",", "score_items", "=", "score_items", ")", "\n", "# import the threshold from train set", "\n", "trainset_result", "=", "f'output/{tag}/split_{split}/thumos14_open_trainset.json'", "\n", "thresholds", "=", "get_thresholds", "(", "predictions", ",", "ground_truths", ",", "video_list", ",", "method", ",", "unct_threshold_openmax", ",", "trainset_result", ",", "tiou", "=", "tiou_threshold", ")", "\n", "all_predictions", "[", "method", "]", "=", "{", "'pred'", ":", "predictions", ",", "'threshold'", ":", "thresholds", "}", "\n", "\n", "# draw all validation videos", "\n", "", "for", "video_name", "in", "tqdm", "(", "video_list", ",", "total", "=", "len", "(", "video_list", ")", ",", "desc", "=", "'Creating Demos'", ")", ":", "\n", "# if video_name not in selected_images:", "\n", "#     continue", "\n", "# retrieve the ground truth of this video", "\n", "        ", "segment_gts", ",", "label_gts", ",", "_", "=", "retrieve_segments", "(", "ground_truths", ",", "video_name", ",", "type", "=", "'gt'", ")", "\n", "actions_gt", "=", "{", "'segments'", ":", "segment_gts", ",", "'labels'", ":", "label_gts", "}", "\n", "durations", "=", "video_durations", "[", "video_name", "]", "\n", "\n", "# retrieve the predictions of this video for each method", "\n", "all_actions", "=", "{", "}", "\n", "for", "method", "in", "method_list", ":", "\n", "            ", "type", "=", "'pred_u'", "if", "method", "in", "[", "'OpenTAL'", ",", "'EDL'", "]", "else", "'pred_conf'", "\n", "segment_preds", ",", "label_preds", ",", "scores_pred", "=", "retrieve_segments", "(", "all_predictions", "[", "method", "]", "[", "'pred'", "]", ",", "video_name", ",", "type", "=", "type", ")", "\n", "# match the predictions with GT", "\n", "actions_pred", "=", "match_preds_with_gt", "(", "segment_preds", ",", "label_preds", ",", "scores_pred", ",", "segment_gts", ",", "thresh", "=", "all_predictions", "[", "method", "]", "[", "'threshold'", "]", "[", "video_name", "]", ",", "tiou_threshold", "=", "tiou_threshold", ")", "\n", "all_actions", "[", "method", "]", "=", "actions_pred", "\n", "\n", "# draw figure", "\n", "", "fig_file", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{video_name}.png'", ")", "\n", "draw_action_detections", "(", "fig_file", ",", "all_actions", ",", "actions_gt", ",", "durations", ",", "cls_to_color", ",", "fontsize", "=", "22", ",", "paper_format", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cogito2012_OpenTAL.libMR.test_libmr.main": [[19, 34], ["libmr.MR", "len", "libmr.MR.fit_svm", "print", "print", "libmr.MR.mr_save", "open", "pickle.dump", "open.close", "print", "libmr.MR.w_score_vector", "dir"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "mr", "=", "libmr", ".", "MR", "(", ")", "\n", "datasize", "=", "len", "(", "svm_data", "[", "\"scores\"", "]", ")", "\n", "mr", ".", "fit_svm", "(", "svm_data", ",", "datasize", ",", "1", ",", "1", ",", "1", ",", "10", ")", "\n", "print", "(", "fit_data", ")", "\n", "print", "(", "mr", ".", "w_score_vector", "(", "fit_data", ")", ")", "\n", "mr", ".", "mr_save", "(", "\"meta_rec.model\"", ")", "\n", "datadump", "=", "{", "}", "\n", "datadump", "=", "{", "\"data\"", ":", "fit_data", "}", "\n", "\n", "f", "=", "open", "(", "\"data.dump\"", ",", "\"w\"", ")", "\n", "pickle", ".", "dump", "(", "datadump", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "dir", "(", "mr", ")", ")", "\n", "\n"]]}