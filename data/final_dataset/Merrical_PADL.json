{"home.repos.pwc.inspect_result.Merrical_PADL.None.main.main": [[5, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "run.train", "run.test"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.None.run.train", "home.repos.pwc.inspect_result.Merrical_PADL.None.run.test"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "\"\"\"\n    out_dir; dataset; train or test; network;\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"outputs\"", ",", "# don't change it", "\n", "help", "=", "\"The output path.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataroot\"", ",", "type", "=", "str", ",", "default", "=", "'/media/userdisk0/Dataset/DiscRegion'", ",", "\n", "help", "=", "\"The path of the dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "choices", "=", "[", "\"RIGA\"", "]", ",", "default", "=", "\"RIGA\"", ",", "\n", "help", "=", "\"Which downstream task.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rater_num\"", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "\"number of rater.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--phase\"", ",", "choices", "=", "[", "\"train\"", ",", "\"test\"", "]", ",", "default", "=", "\"train\"", ",", "\n", "help", "=", "\"phase: train or only test?\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--net_arch\"", ",", "\n", "choices", "=", "[", "\"PADL\"", "]", ",", "\n", "default", "=", "\"PADL\"", ",", "\n", "help", "=", "\"Which network to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_func\"", ",", "choices", "=", "[", "\"dice\"", ",", "\"ce\"", ",", "\"bce\"", "]", ",", "default", "=", "\"bce\"", ",", "\n", "help", "=", "\"which loss function to use.\"", ")", "\n", "\n", "\"\"\"\n    pretrained params\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--pretrained\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"whether to load pretrained models.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrained_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "\n", "help", "=", "\"the path of pretrained models.\"", ")", "\n", "\n", "\"\"\"\n    img for network input\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--img_width\"", ",", "default", "=", "256", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Resolution size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_height\"", ",", "default", "=", "256", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Resolution size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_channel\"", ",", "default", "=", "3", ",", "type", "=", "int", ",", "\n", "help", "=", "\"channel size\"", ")", "\n", "\n", "\"\"\"\n    training settings: classes; bs; lr; EPOCH; device_id\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--num_classes\"", ",", "default", "=", "2", ",", "type", "=", "int", ",", "\n", "help", "=", "\"the number of classes for pixel-wise classification\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for training, validation and testing.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "default", "=", "7e-4", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate of optimizer.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The weight_decay of Adam optimizer.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "\n", "help", "=", "\"the hyper-parameter of poly learning rate adjust\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_epoch\"", ",", "default", "=", "60", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device_id\"", ",", "default", "=", "\"0\"", ",", "choices", "=", "[", "\"0\"", ",", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", "]", ",", "\n", "help", "=", "\"gpu ID.\"", ")", "\n", "\n", "\"\"\"\n    dataset setting: k_fold(loop;fold); random(ratio) --> to find .csv file under the dataset dir.\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "\"--data_split\"", ",", "default", "=", "\"official\"", ",", "choices", "=", "[", "\"k_fold\"", ",", "\"official\"", "]", ",", "\n", "help", "=", "\"k_fold: needs to set --fold; official: needs to set nothing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loop\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"this is the {loop}-th run.\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "phase", "==", "\"train\"", ":", "\n", "        ", "train", "(", "args", ")", "\n", "", "else", ":", "# test", "\n", "        ", "test", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.None.run.train": [[9, 33], ["utils.generate.generate_output_folder", "models.bulid.build_model", "dataset.get_dataset.getDataset", "torch.optim.Adam", "loss_func.get_loss.get_loss_func", "torch.load", "models.bulid.build_model.load_state_dict", "models.bulid.build_model.parameters", "trainer.train_riga_padl.train_riga_padl"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.utils.generate.generate_output_folder", "home.repos.pwc.inspect_result.Merrical_PADL.models.bulid.build_model", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.get_dataset.getDataset", "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.get_loss.get_loss_func", "home.repos.pwc.inspect_result.Merrical_PADL.trainer.train_riga_padl.train_riga_padl"], ["def", "train", "(", "args", ")", ":", "\n", "    ", "log_folder", ",", "checkpoint_folder", ",", "visualization_folder", ",", "metrics_folder", "=", "generate_output_folder", "(", "args", ")", "\n", "\n", "# network", "\n", "model", "=", "build_model", "(", "args", ")", "\n", "\n", "# load pretrained params", "\n", "if", "args", ".", "pretrained", "==", "1", ":", "\n", "        ", "params", "=", "torch", ".", "load", "(", "args", ".", "pretrained_dir", ")", "\n", "model_params", "=", "params", "[", "'model'", "]", "\n", "model", ".", "load_state_dict", "(", "model_params", ")", "\n", "\n", "# dataset", "\n", "", "train_set", ",", "test_set", "=", "getDataset", "(", "args", ")", "\n", "\n", "# optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# loss_func", "\n", "loss_func", "=", "get_loss_func", "(", "args", ")", "\n", "\n", "if", "args", ".", "net_arch", "==", "\"PADL\"", "and", "args", ".", "dataset", "==", "\"RIGA\"", ":", "\n", "        ", "train_riga_padl", "(", "args", ",", "log_folder", ",", "checkpoint_folder", ",", "visualization_folder", ",", "metrics_folder", ",", "model", ",", "optimizer", ",", "\n", "loss_func", ",", "train_set", ",", "test_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.None.run.test": [[35, 51], ["utils.generate.generate_output_folder", "models.bulid.build_model", "torch.load", "models.bulid.build_model.load_state_dict", "dataset.get_dataset.getDataset", "trainer.train_riga_padl.test_riga_padl"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.utils.generate.generate_output_folder", "home.repos.pwc.inspect_result.Merrical_PADL.models.bulid.build_model", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.get_dataset.getDataset", "home.repos.pwc.inspect_result.Merrical_PADL.trainer.train_riga_padl.test_riga_padl"], ["", "", "def", "test", "(", "args", ")", ":", "\n", "    ", "log_folder", ",", "checkpoint_folder", ",", "visualization_folder", ",", "metrics_folder", "=", "generate_output_folder", "(", "args", ")", "\n", "\n", "# network", "\n", "model", "=", "build_model", "(", "args", ")", "\n", "\n", "# load pretrained params", "\n", "params", "=", "torch", ".", "load", "(", "checkpoint_folder", "+", "\"/amp_checkpoint.pt\"", ")", "\n", "model_params", "=", "params", "[", "'model'", "]", "\n", "model", ".", "load_state_dict", "(", "model_params", ")", "\n", "\n", "# dataset", "\n", "train_set", ",", "test_set", "=", "getDataset", "(", "args", ")", "\n", "\n", "if", "args", ".", "net_arch", "==", "\"PADL\"", "and", "args", ".", "dataset", "==", "\"RIGA\"", ":", "\n", "        ", "test_riga_padl", "(", "args", ",", "visualization_folder", ",", "metrics_folder", ",", "model", ",", "test_set", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.utils.generate.generate_output_folder": [[4, 38], ["print", "str", "os.path.exists", "os.makedirs", "str", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "repr", "str", "str", "str"], "function", ["None"], ["def", "generate_output_folder", "(", "args", ")", ":", "\n", "    ", "output_folder_name", "=", "args", ".", "output_dir", "+", "'/'", "+", "args", ".", "dataset", "+", "\"_\"", "+", "args", ".", "net_arch", "+", "\"_\"", "+", "args", ".", "loss_func", "+", "\"_pretrain\"", "+", "str", "(", "\n", "args", ".", "pretrained", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder_name", ")", "\n", "\n", "", "setting_folder_name", "=", "output_folder_name", "+", "'/bs'", "+", "str", "(", "args", ".", "batch_size", ")", "+", "'_lr'", "+", "repr", "(", "\n", "args", ".", "learning_rate", ")", "+", "'_epoch'", "+", "str", "(", "args", ".", "num_epoch", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "setting_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "setting_folder_name", ")", "\n", "\n", "", "if", "args", ".", "data_split", "==", "\"k_fold\"", ":", "\n", "        ", "final_folder_name", "=", "setting_folder_name", "+", "'/loop'", "+", "str", "(", "args", ".", "loop", ")", "+", "'_fold'", "+", "str", "(", "args", ".", "fold", ")", "\n", "", "else", ":", "\n", "        ", "final_folder_name", "=", "setting_folder_name", "+", "'/loop'", "+", "str", "(", "args", ".", "loop", ")", "+", "'_official'", "\n", "", "print", "(", "final_folder_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "final_folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "final_folder_name", ")", "\n", "\n", "", "log_folder", "=", "final_folder_name", "+", "'/logs'", "\n", "checkpoint_folder", "=", "final_folder_name", "+", "'/checkpoints'", "\n", "visualization_folder", "=", "final_folder_name", "+", "'/visualization'", "\n", "metrics_folder", "=", "final_folder_name", "+", "'/metrics'", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_folder", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_folder", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "visualization_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "visualization_folder", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "metrics_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "metrics_folder", ")", "\n", "\n", "", "return", "log_folder", ",", "checkpoint_folder", ",", "visualization_folder", ",", "metrics_folder", "\n", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_dice_threshold": [[5, 24], ["torch.zeros_like", "torch.ones_like", "torch.where", "torch.where", "output.view.view", "mask.view.view", "output.view.sum", "mask.view.sum"], "function", ["None"], ["def", "get_dice_threshold", "(", "output", ",", "mask", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"\n    :param output: output shape per image, float, (0,1)\n    :param mask: mask shape per image, float, (0,1)\n    :param threshold: the threshold to binarize output and feature (0,1)\n    :return: dice of threshold t\n    \"\"\"", "\n", "smooth", "=", "1e-6", "\n", "\n", "zero", "=", "torch", ".", "zeros_like", "(", "output", ")", "\n", "one", "=", "torch", ".", "ones_like", "(", "output", ")", "\n", "output", "=", "torch", ".", "where", "(", "output", ">", "threshold", ",", "one", ",", "zero", ")", "\n", "mask", "=", "torch", ".", "where", "(", "mask", ">", "threshold", ",", "one", ",", "zero", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ")", "\n", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", "\n", "intersection", "=", "(", "output", "*", "mask", ")", ".", "sum", "(", ")", "\n", "dice", "=", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "output", ".", "sum", "(", ")", "+", "mask", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "\n", "return", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_dice": [[26, 44], ["range", "numpy.mean", "outputs.size", "numpy.mean", "dice_list.append", "metrics.get_dice_threshold", "dice_item_thres_list.append"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_dice_threshold"], ["", "def", "get_soft_dice", "(", "outputs", ",", "masks", ")", ":", "\n", "    ", "\"\"\"\n    :param outputs: B * output shape per image\n    :param masks: B * mask shape per image\n    :return: average dice of B items\n    \"\"\"", "\n", "dice_list", "=", "[", "]", "\n", "for", "this_item", "in", "range", "(", "outputs", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "output", "=", "outputs", "[", "this_item", "]", "\n", "mask", "=", "masks", "[", "this_item", "]", "\n", "dice_item_thres_list", "=", "[", "]", "\n", "for", "thres", "in", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", ":", "\n", "            ", "dice_item_thres", "=", "get_dice_threshold", "(", "output", ",", "mask", ",", "thres", ")", "\n", "dice_item_thres_list", ".", "append", "(", "dice_item_thres", ".", "data", ")", "\n", "", "dice_item_thres_mean", "=", "np", ".", "mean", "(", "dice_item_thres_list", ")", "\n", "dice_list", ".", "append", "(", "dice_item_thres_mean", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "dice_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_iou_threshold": [[46, 66], ["torch.zeros_like", "torch.ones_like", "torch.where", "torch.where"], "function", ["None"], ["", "def", "get_iou_threshold", "(", "output", ",", "mask", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"\n    :param output: output shape per image, float, (0,1)\n    :param mask: mask shape per image, float, (0,1)\n    :param threshold: the threshold to binarize output and feature (0,1)\n    :return: iou of threshold t\n    \"\"\"", "\n", "smooth", "=", "1", "\n", "\n", "zero", "=", "torch", ".", "zeros_like", "(", "output", ")", "\n", "one", "=", "torch", ".", "ones_like", "(", "output", ")", "\n", "output", "=", "torch", ".", "where", "(", "output", ">", "threshold", ",", "one", ",", "zero", ")", "\n", "mask", "=", "torch", ".", "where", "(", "mask", ">", "threshold", ",", "one", ",", "zero", ")", "\n", "\n", "intersection", "=", "(", "output", "*", "mask", ")", ".", "sum", "(", ")", "\n", "total", "=", "(", "output", "+", "mask", ")", ".", "sum", "(", ")", "\n", "union", "=", "total", "-", "intersection", "\n", "IoU", "=", "(", "intersection", "+", "smooth", ")", "/", "(", "union", "+", "smooth", ")", "\n", "\n", "return", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_iou": [[68, 87], ["range", "numpy.mean", "outputs.size", "numpy.mean", "iou_list.append", "metrics.get_iou_threshold", "iou_item_thres_list.append"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_iou_threshold"], ["", "def", "get_soft_iou", "(", "outputs", ",", "masks", ")", ":", "\n", "    ", "\"\"\"\n    :param outputs: B * output shape per image\n    :param masks: B * mask shape per image\n    :return: average iou of B items\n    \"\"\"", "\n", "iou_list", "=", "[", "]", "\n", "for", "this_item", "in", "range", "(", "outputs", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "output", "=", "outputs", "[", "this_item", "]", "\n", "mask", "=", "masks", "[", "this_item", "]", "\n", "# output = torch.sigmoid(output)", "\n", "iou_item_thres_list", "=", "[", "]", "\n", "for", "thres", "in", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", ":", "\n", "            ", "iou_item_thres", "=", "get_iou_threshold", "(", "output", ",", "mask", ",", "thres", ")", "\n", "iou_item_thres_list", ".", "append", "(", "iou_item_thres", ")", "\n", "", "iou_item_thres_mean", "=", "np", ".", "mean", "(", "iou_item_thres_list", ")", "\n", "iou_list", ".", "append", "(", "iou_item_thres_mean", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "iou_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.utils.functions.adjust_learning_rate": [[1, 5], ["functions.lr_poly"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.utils.functions.lr_poly"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "LR", ",", "EPOCH", ",", "POWER", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR divided by 5 at 60th, 120th and 160th epochs\"\"\"", "\n", "lr", "=", "lr_poly", "(", "LR", ",", "i_iter", ",", "EPOCH", ",", "POWER", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "# return lr", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.utils.functions.lr_poly": [[8, 10], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.config.Config.display": [[32, 39], ["print", "dir", "print", "print", "a.startswith", "callable", "getattr", "getattr"], "methods", ["None"], ["def", "display", "(", "self", ")", ":", "\n", "        ", "\"\"\"Display Configuration values.\"\"\"", "\n", "print", "(", "\"\\nConfigurations:\"", ")", "\n", "for", "a", "in", "dir", "(", "self", ")", ":", "\n", "            ", "if", "not", "a", ".", "startswith", "(", "\"__\"", ")", "and", "not", "callable", "(", "getattr", "(", "self", ",", "a", ")", ")", ":", "\n", "                ", "print", "(", "\"{:30} {}\"", ".", "format", "(", "a", ",", "getattr", "(", "self", ",", "a", ")", ")", ")", "\n", "", "", "print", "(", "\"\\n\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__init__": [[26, 44], ["torch.utils.data.Dataset.__init__", "pandas.DataFrame", "range", "pandas.read_csv", "DF_this.drop.drop.reset_index", "DF_this.drop.drop.drop", "pandas.concat", "len"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "batch_size", ",", "DF", ",", "transform", "=", "True", ")", ":", "\n", "        ", "super", "(", "Disc_Cup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "_transform", "=", "transform", "\n", "self", ".", "scale_size", "=", "config", ".", "SCALE_SIZE", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "DF", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'imgName'", ",", "'maskName'", ",", "'label'", ",", "'center'", ",", "'xmin'", ",", "'ymin'", ",", "\n", "'xmax'", ",", "'ymax'", ",", "'width'", ",", "'height'", ",", "'discFlag'", ",", "'rater'", "]", ")", "\n", "for", "spilt", "in", "DF", ":", "\n", "            ", "DF_all", "=", "pd", ".", "read_csv", "(", "root", "+", "'/'", "+", "'Glaucoma_multirater_'", "+", "spilt", "+", "'.csv'", ",", "encoding", "=", "'gbk'", ")", "\n", "\n", "DF_this", "=", "DF_all", ".", "loc", "[", "DF_all", "[", "'rater'", "]", "==", "0", "]", "# Final Label", "\n", "DF_this", "=", "DF_this", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "DF_this", "=", "DF_this", ".", "drop", "(", "'Unnamed: 0'", ",", "1", ")", "\n", "self", ".", "DF", "=", "pd", ".", "concat", "(", "[", "self", ".", "DF", ",", "DF_this", "]", ")", "\n", "\n", "", "self", ".", "DF", ".", "index", "=", "range", "(", "0", ",", "len", "(", "self", ".", "DF", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "DF", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__getitem__": [[48, 95], ["os.path.join", "fullPathName.replace.replace.replace", "PIL.Image.open().convert", "numpy.expand_dims.resize", "numpy.array", "range", "len", "numpy.expand_dims", "DiscRegion.Disc_Cup.DF.loc[].replace", "os.path.join", "fullPathName.replace.replace.replace", "PIL.Image.open().convert", "torch.from_numpy.resize", "numpy.array", "torch.from_numpy.copy", "torch.from_numpy.copy", "numpy.stack", "torch.from_numpy", "masks.append", "DiscRegion.Disc_Cup.transform", "PIL.Image.open", "torch.from_numpy.max", "str", "PIL.Image.open", "img_Name.split", "img_Name.split"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_Name", "=", "self", ".", "DF", ".", "loc", "[", "index", ",", "'imgName'", "]", "\n", "\n", "\"\"\" Get the images \"\"\"", "\n", "fullPathName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_Name", ")", "\n", "fullPathName", "=", "fullPathName", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "# image path", "\n", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "fullPathName", ")", ".", "convert", "(", "'RGB'", ")", "# read image", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "scale_size", ",", "self", ".", "scale_size", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "2", ")", "# add additional channel in dim 2 (channel)", "\n", "\n", "", "img_ori", "=", "img", "\n", "\n", "\"\"\" Get the six raters masks \"\"\"", "\n", "masks", "=", "[", "]", "\n", "data_path", "=", "self", ".", "root", "\n", "for", "n", "in", "range", "(", "1", ",", "7", ")", ":", "# n:1-6", "\n", "# # load rater 1-6 label recurrently", "\n", "            ", "maskName", "=", "self", ".", "DF", ".", "loc", "[", "index", ",", "'maskName'", "]", ".", "replace", "(", "'FinalLabel'", ",", "'Rater'", "+", "str", "(", "n", ")", ")", "\n", "fullPathName", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "maskName", ")", "\n", "fullPathName", "=", "fullPathName", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "\n", "Mask", "=", "PIL", ".", "Image", ".", "open", "(", "fullPathName", ")", ".", "convert", "(", "'L'", ")", "\n", "Mask", "=", "Mask", ".", "resize", "(", "(", "self", ".", "scale_size", ",", "self", ".", "scale_size", ")", ")", "\n", "Mask", "=", "np", ".", "array", "(", "Mask", ")", "\n", "\n", "if", "Mask", ".", "max", "(", ")", ">", "1", ":", "\n", "                ", "Mask", "=", "Mask", "/", "255.0", "\n", "\n", "", "disc", "=", "Mask", ".", "copy", "(", ")", "\n", "disc", "[", "disc", "!=", "0", "]", "=", "1", "\n", "cup", "=", "Mask", ".", "copy", "(", ")", "\n", "cup", "[", "cup", "!=", "1", "]", "=", "0", "\n", "Mask", "=", "np", ".", "stack", "(", "(", "disc", ",", "cup", ")", ")", "\n", "\n", "# Mask = Mask.transpose((2, 0, 1))", "\n", "Mask", "=", "torch", ".", "from_numpy", "(", "Mask", ")", "\n", "masks", ".", "append", "(", "Mask", ")", "\n", "\n", "", "if", "self", ".", "_transform", ":", "\n", "            ", "img_ori", ",", "img", ",", "masks", "=", "self", ".", "transform", "(", "img_ori", ",", "img", ",", "masks", ")", "\n", "return", "{", "'image'", ":", "img", ",", "'image_ori'", ":", "img_ori", ",", "'mask'", ":", "masks", ",", "'name'", ":", "img_Name", ".", "split", "(", "'.'", ")", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'image'", ":", "img", ",", "'image_ori'", ":", "img_ori", ",", "'mask'", ":", "masks", ",", "'name'", ":", "img_Name", ".", "split", "(", "'.'", ")", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.transform": [[97, 111], ["torch.from_numpy.transpose", "torch.from_numpy", "torch.from_numpy.transpose", "torch.from_numpy", "torch.from_numpy.max", "torch.from_numpy.max", "torch.from_numpy.astype", "torch.from_numpy.astype"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img_o", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "if", "img", ".", "max", "(", ")", ">", "1", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "", "img", "-=", "config", ".", "MEAN_AND_STD", "[", "'mean_rgb'", "]", "\n", "img", "/=", "config", ".", "MEAN_AND_STD", "[", "'std_rgb'", "]", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "\n", "if", "img", ".", "max", "(", ")", ">", "1", ":", "\n", "            ", "img_o", "=", "img_o", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "", "img_o", "=", "img_o", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img_o", "=", "torch", ".", "from_numpy", "(", "img_o", ")", "\n", "\n", "return", "img_o", ",", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup_DataLoader.__init__": [[114, 121], ["batchgenerators.dataloading.data_loader.DataLoader.__init__", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "batch_size", ",", "patch_size", ",", "num_threads_in_multithreaded", ",", "seed_for_shuffle", "=", "1234", ",", "\n", "return_incomplete", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data", ",", "batch_size", ",", "num_threads_in_multithreaded", ",", "seed_for_shuffle", ",", "return_incomplete", ",", "\n", "shuffle", ",", "True", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_modalities", "=", "3", "# == channels", "\n", "self", ".", "indices", "=", "list", "(", "range", "(", "len", "(", "data", ".", "DF", ")", ")", ")", "# data --> dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup_DataLoader.generate_train_batch": [[122, 149], ["DiscRegion.Disc_Cup_DataLoader.get_indices", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "data_temp[].to().numpy", "[].numpy", "[].numpy", "[].numpy", "[].numpy", "[].numpy", "[].numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data_temp[].to"], "methods", ["None"], ["", "def", "generate_train_batch", "(", "self", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get_indices", "(", ")", "# len = batch_size", "\n", "samples_for_batch", "=", "[", "self", ".", "_data", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "# self._data[i]['image']: torch.size([3,256,256]);", "\n", "# self._data[i]['mask']: list(6), item.size = torch.size([2,256,256])", "\n", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_modalities", ",", "*", "self", ".", "patch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask1", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "2", ",", "*", "self", ".", "patch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask2", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "2", ",", "*", "self", ".", "patch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask3", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "2", ",", "*", "self", ".", "patch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask4", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "2", ",", "*", "self", ".", "patch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask5", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "2", ",", "*", "self", ".", "patch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask6", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "2", ",", "*", "self", ".", "patch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "data_temp", "in", "enumerate", "(", "samples_for_batch", ")", ":", "\n", "            ", "data", "[", "i", "]", "=", "data_temp", "[", "'image'", "]", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "numpy", "(", ")", "\n", "mask1", "[", "i", "]", "=", "data_temp", "[", "'mask'", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "mask2", "[", "i", "]", "=", "data_temp", "[", "'mask'", "]", "[", "1", "]", ".", "numpy", "(", ")", "\n", "mask3", "[", "i", "]", "=", "data_temp", "[", "'mask'", "]", "[", "2", "]", ".", "numpy", "(", ")", "\n", "mask4", "[", "i", "]", "=", "data_temp", "[", "'mask'", "]", "[", "3", "]", ".", "numpy", "(", ")", "\n", "mask5", "[", "i", "]", "=", "data_temp", "[", "'mask'", "]", "[", "4", "]", ".", "numpy", "(", ")", "\n", "mask6", "[", "i", "]", "=", "data_temp", "[", "'mask'", "]", "[", "5", "]", ".", "numpy", "(", ")", "\n", "", "data", ",", "mask1", ",", "mask2", ",", "mask3", ",", "mask4", ",", "mask5", ",", "mask6", "=", "torch", ".", "from_numpy", "(", "data", ")", ",", "torch", ".", "from_numpy", "(", "mask1", ")", ",", "torch", ".", "from_numpy", "(", "mask2", ")", ",", "torch", ".", "from_numpy", "(", "mask3", ")", ",", "torch", ".", "from_numpy", "(", "mask4", ")", ",", "torch", ".", "from_numpy", "(", "mask5", ")", ",", "torch", ".", "from_numpy", "(", "mask6", ")", "\n", "mask", "=", "[", "mask1", ",", "mask2", ",", "mask3", ",", "mask4", ",", "mask5", ",", "mask6", "]", "\n", "return", "{", "'image'", ":", "data", ",", "'mask'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.get_train_transform": [[151, 202], ["batchgenerators.transforms.abstract_transforms.Compose.append", "batchgenerators.transforms.abstract_transforms.Compose.append", "batchgenerators.transforms.abstract_transforms.Compose.append", "batchgenerators.transforms.abstract_transforms.Compose.append", "batchgenerators.transforms.abstract_transforms.Compose.append", "batchgenerators.transforms.abstract_transforms.Compose.append", "batchgenerators.transforms.abstract_transforms.Compose.append", "batchgenerators.transforms.abstract_transforms.Compose", "batchgenerators.transforms.spatial_transforms.SpatialTransform_2", "batchgenerators.transforms.spatial_transforms.MirrorTransform", "batchgenerators.transforms.color_transforms.BrightnessMultiplicativeTransform", "batchgenerators.transforms.color_transforms.GammaTransform", "batchgenerators.transforms.color_transforms.GammaTransform", "batchgenerators.transforms.noise_transforms.GaussianNoiseTransform", "batchgenerators.transforms.noise_transforms.GaussianBlurTransform"], "function", ["None"], ["", "", "def", "get_train_transform", "(", "patch_size", ")", ":", "\n", "# we now create a list of transforms. These are not necessarily the best transforms to use for BraTS, this is just", "\n", "# to showcase some things", "\n", "    ", "tr_transforms", "=", "[", "]", "\n", "\n", "# the first thing we want to run is the SpatialTransform. It reduces the size of our data to patch_size and thus", "\n", "# also reduces the computational cost of all subsequent operations. All subsequent operations do not modify the", "\n", "# shape and do not transform spatially, so no border artifacts will be introduced", "\n", "# Here we use the new SpatialTransform_2 which uses a new way of parameterizing elastic_deform", "\n", "# We use all spatial transformations with a probability of 0.2 per sample. This means that 1 - (1 - 0.1) ** 3 = 27%", "\n", "# of samples will be augmented, the rest will just be cropped", "\n", "tr_transforms", ".", "append", "(", "\n", "SpatialTransform_2", "(", "\n", "patch_size", ",", "[", "i", "//", "2", "for", "i", "in", "patch_size", "]", ",", "\n", "do_elastic_deform", "=", "True", ",", "deformation_scale", "=", "(", "0", ",", "0.25", ")", ",", "\n", "do_rotation", "=", "True", ",", "\n", "angle_x", "=", "(", "-", "15", "/", "360.", "*", "2", "*", "np", ".", "pi", ",", "15", "/", "360.", "*", "2", "*", "np", ".", "pi", ")", ",", "\n", "angle_y", "=", "(", "-", "15", "/", "360.", "*", "2", "*", "np", ".", "pi", ",", "15", "/", "360.", "*", "2", "*", "np", ".", "pi", ")", ",", "\n", "angle_z", "=", "(", "-", "15", "/", "360.", "*", "2", "*", "np", ".", "pi", ",", "15", "/", "360.", "*", "2", "*", "np", ".", "pi", ")", ",", "\n", "do_scale", "=", "True", ",", "scale", "=", "(", "0.75", ",", "1.25", ")", ",", "\n", "border_mode_data", "=", "'constant'", ",", "border_cval_data", "=", "0", ",", "\n", "border_mode_seg", "=", "'constant'", ",", "border_cval_seg", "=", "0", ",", "\n", "order_seg", "=", "1", ",", "order_data", "=", "3", ",", "\n", "random_crop", "=", "True", ",", "\n", "p_el_per_sample", "=", "0.1", ",", "p_rot_per_sample", "=", "0.1", ",", "p_scale_per_sample", "=", "0.1", "\n", ")", "\n", ")", "\n", "\n", "# now we mirror along all axes", "\n", "tr_transforms", ".", "append", "(", "MirrorTransform", "(", "axes", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "\n", "\n", "# brightness transform for 15% of samples", "\n", "tr_transforms", ".", "append", "(", "BrightnessMultiplicativeTransform", "(", "(", "0.7", ",", "1.5", ")", ",", "per_channel", "=", "True", ",", "p_per_sample", "=", "0.15", ")", ")", "\n", "\n", "# gamma transform. This is a nonlinear transformation of intensity values", "\n", "# (https://en.wikipedia.org/wiki/Gamma_correction)", "\n", "tr_transforms", ".", "append", "(", "GammaTransform", "(", "gamma_range", "=", "(", "0.5", ",", "2", ")", ",", "invert_image", "=", "False", ",", "per_channel", "=", "True", ",", "p_per_sample", "=", "0.15", ")", ")", "\n", "# we can also invert the image, apply the transform and then invert back", "\n", "tr_transforms", ".", "append", "(", "GammaTransform", "(", "gamma_range", "=", "(", "0.5", ",", "2", ")", ",", "invert_image", "=", "True", ",", "per_channel", "=", "True", ",", "p_per_sample", "=", "0.15", ")", ")", "\n", "\n", "# Gaussian Noise", "\n", "tr_transforms", ".", "append", "(", "GaussianNoiseTransform", "(", "noise_variance", "=", "(", "0", ",", "0.05", ")", ",", "p_per_sample", "=", "0.15", ")", ")", "\n", "\n", "# blurring. Some BraTS cases have very blurry modalities. This can simulate more patients with this problem and", "\n", "# thus make the model more robust to it", "\n", "tr_transforms", ".", "append", "(", "GaussianBlurTransform", "(", "blur_sigma", "=", "(", "0.5", ",", "1.5", ")", ",", "different_sigma_per_channel", "=", "True", ",", "\n", "p_per_channel", "=", "0.5", ",", "p_per_sample", "=", "0.15", ")", ")", "\n", "\n", "# now we compose these transforms together", "\n", "tr_transforms", "=", "Compose", "(", "tr_transforms", ")", "\n", "return", "tr_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.dataset.get_dataset.getDataset": [[4, 10], ["dataset.DiscRegion.Disc_Cup", "dataset.DiscRegion.Disc_Cup"], "function", ["None"], ["def", "getDataset", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "\"RIGA\"", ":", "\n", "        ", "train_set", "=", "Disc_Cup", "(", "args", ".", "dataroot", ",", "args", ".", "batch_size", ",", "DF", "=", "[", "'BinRushed'", ",", "'MESSIDOR'", "]", ",", "transform", "=", "True", ")", "\n", "test_set", "=", "Disc_Cup", "(", "args", ".", "dataroot", ",", "args", ".", "batch_size", ",", "DF", "=", "[", "'Magrabia'", "]", ")", "\n", "return", "train_set", ",", "test_set", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.models.bulid.build_model": [[4, 13], ["models.res_unet.unet_model.ResUNet", "models.res_unet.unet_model.PADL"], "function", ["None"], ["def", "build_model", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    return models\n    \"\"\"", "\n", "if", "args", ".", "net_arch", "==", "\"res_unet\"", ":", "\n", "        ", "model", "=", "ResUNet", "(", "resnet", "=", "'resnet34'", ",", "num_classes", "=", "args", ".", "num_classes", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "args", ".", "net_arch", "==", "\"PADL\"", ":", "\n", "        ", "model", "=", "PADL", "(", "resnet", "=", "'resnet34'", ",", "num_classes", "=", "args", ".", "num_classes", ",", "rater_num", "=", "args", ".", "rater_num", ",", "pretrained", "=", "True", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.BasicBlock.__init__": [[29, 38], ["torch.Module.__init__", "res_net.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "res_net.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.conv3x3", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.BasicBlock.forward": [[39, 56], ["res_net.BasicBlock.conv1", "res_net.BasicBlock.bn1", "res_net.BasicBlock.relu", "res_net.BasicBlock.conv2", "res_net.BasicBlock.bn2", "res_net.BasicBlock.relu", "res_net.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.Bottleneck.__init__": [[61, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.Bottleneck.forward": [[74, 95], ["res_net.Bottleneck.conv1", "res_net.Bottleneck.bn1", "res_net.Bottleneck.relu", "res_net.Bottleneck.conv2", "res_net.Bottleneck.bn2", "res_net.Bottleneck.relu", "res_net.Bottleneck.conv3", "res_net.Bottleneck.bn3", "res_net.Bottleneck.relu", "res_net.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.ResNet.__init__": [[99, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "res_net.ResNet._make_layer", "res_net.ResNet._make_layer", "res_net.ResNet._make_layer", "res_net.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "res_net.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.ResNet._make_layer", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.ResNet._make_layer", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.ResNet._make_layer", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "ini", "=", "3", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "ini", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.ResNet._make_layer": [[122, 138], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.ResNet.forward": [[139, 155], ["res_net.ResNet.conv1", "res_net.ResNet.bn1", "res_net.ResNet.relu", "res_net.ResNet.maxpool", "res_net.ResNet.layer1", "res_net.ResNet.layer2", "res_net.ResNet.layer3", "res_net.ResNet.layer4", "res_net.ResNet.avgpool", "res_net.ResNet.view", "res_net.ResNet.fc", "res_net.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet18": [[157, 167], ["res_net.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet34": [[169, 179], ["res_net.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'models/res_unet/resnet34-333f7ec4.pth'", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet50": [[181, 191], ["res_net.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet101": [[193, 203], ["res_net.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet152": [[205, 215], ["res_net.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.DoubleConv.__init__": [[11, 20], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.DoubleConv.forward": [[22, 24], ["unet_parts.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.Down.__init__": [[29, 34], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet_parts.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.Down.forward": [[36, 38], ["unet_parts.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.Up.__init__": [[43, 53], ["torch.Module.__init__", "unet_parts.DoubleConv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "//", "2", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.Up.forward": [[54, 67], ["unet_parts.Up.up", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_parts.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "torch", ".", "tensor", "(", "[", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "]", ")", "\n", "diffX", "=", "torch", ".", "tensor", "(", "[", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "]", ")", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "# if you have padding issues, see", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.OutConv.__init__": [[70, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_parts.OutConv.forward": [[74, 76], ["unet_parts.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.SaveFeatures.__init__": [[14, 15], ["m.register_forward_hook"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "m", ")", ":", "self", ".", "hook", "=", "m", ".", "register_forward_hook", "(", "self", ".", "hook_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.SaveFeatures.hook_fn": [[16, 17], ["None"], "methods", ["None"], ["def", "hook_fn", "(", "self", ",", "module", ",", "input", ",", "output", ")", ":", "self", ".", "features", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.SaveFeatures.remove": [[18, 19], ["unet_model.SaveFeatures.hook.remove"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.SaveFeatures.remove"], ["def", "remove", "(", "self", ")", ":", "self", ".", "hook", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.UnetBlock.__init__": [[22, 30], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "up_in", ",", "x_in", ",", "n_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# super(UnetBlock, self).__init__()", "\n", "up_out", "=", "x_out", "=", "n_out", "//", "2", "\n", "self", ".", "x_conv", "=", "nn", ".", "Conv2d", "(", "x_in", ",", "x_out", ",", "1", ")", "\n", "self", ".", "tr_conv", "=", "nn", ".", "ConvTranspose2d", "(", "up_in", ",", "up_out", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "n_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.UnetBlock.forward": [[31, 36], ["unet_model.UnetBlock.tr_conv", "unet_model.UnetBlock.x_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_model.UnetBlock.bn", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "up_p", ",", "x_p", ")", ":", "\n", "        ", "up_p", "=", "self", ".", "tr_conv", "(", "up_p", ")", "\n", "x_p", "=", "self", ".", "x_conv", "(", "x_p", ")", "\n", "cat_p", "=", "torch", ".", "cat", "(", "[", "up_p", ",", "x_p", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "bn", "(", "F", ".", "relu", "(", "cat_p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.ResUNet.__init__": [[40, 71], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "unet_model.UnetBlock", "unet_model.UnetBlock", "unet_model.UnetBlock", "unet_model.UnetBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "list", "unet_model.SaveFeatures", "res_net.resnet101.children", "res_net.resnet101", "res_net.resnet101.", "Exception"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet101"], ["    ", "def", "__init__", "(", "self", ",", "resnet", "=", "'resnet34'", ",", "num_classes", "=", "2", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# super(ResUnet, self).__init__()", "\n", "cut", ",", "lr_cut", "=", "[", "8", ",", "6", "]", "\n", "\n", "if", "resnet", "==", "'resnet34'", ":", "\n", "            ", "base_model", "=", "resnet34", "\n", "", "elif", "resnet", "==", "'resnet18'", ":", "\n", "            ", "base_model", "=", "resnet18", "\n", "", "elif", "resnet", "==", "'resnet50'", ":", "\n", "            ", "base_model", "=", "resnet50", "\n", "", "elif", "resnet", "==", "'resnet101'", ":", "\n", "            ", "base_model", "=", "resnet101", "(", ")", "\n", "", "elif", "resnet", "==", "'resnet152'", ":", "\n", "            ", "base_model", "=", "resnet152", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'The Resnet Model only accept resnet18, resnet34, resnet50,'", "\n", "'resnet101 and resnet152'", ")", "\n", "\n", "", "layers", "=", "list", "(", "base_model", "(", "pretrained", "=", "pretrained", ")", ".", "children", "(", ")", ")", "[", ":", "cut", "]", "\n", "base_layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "rn", "=", "base_layers", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "sfs", "=", "[", "SaveFeatures", "(", "base_layers", "[", "i", "]", ")", "for", "i", "in", "[", "2", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "self", ".", "up1", "=", "UnetBlock", "(", "512", ",", "256", ",", "256", ")", "\n", "self", ".", "up2", "=", "UnetBlock", "(", "256", ",", "128", ",", "256", ")", "\n", "self", ".", "up3", "=", "UnetBlock", "(", "256", ",", "64", ",", "256", ")", "\n", "self", ".", "up4", "=", "UnetBlock", "(", "256", ",", "64", ",", "256", ")", "\n", "\n", "self", ".", "up5", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "self", ".", "num_classes", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.ResUNet.forward": [[72, 85], ["torch.relu", "torch.relu", "unet_model.ResUNet.up1", "unet_model.ResUNet.up2", "unet_model.ResUNet.up3", "unet_model.ResUNet.up4", "unet_model.ResUNet.up5", "unet_model.ResUNet.rn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "rn", "(", "x", ")", ")", "# x = [b_size, 2048, 8, 8]", "\n", "\n", "'''~~~ 0: Decoder ~~~'''", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "self", ".", "sfs", "[", "3", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "self", ".", "sfs", "[", "2", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "self", ".", "sfs", "[", "1", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "self", ".", "sfs", "[", "0", "]", ".", "features", ")", "\n", "fea", "=", "x", "\n", "output", "=", "self", ".", "up5", "(", "x", ")", "\n", "'''~~~ 0: ENDs ~~~'''", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.ResUNet.close": [[86, 88], ["sf.remove"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.SaveFeatures.remove"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "sf", "in", "self", ".", "sfs", ":", "sf", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.UNet_dist.__init__": [[92, 122], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "unet_model.UnetBlock", "unet_model.UnetBlock", "unet_model.UnetBlock", "unet_model.UnetBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "list", "unet_model.SaveFeatures", "res_net.resnet101.children", "res_net.resnet101", "res_net.resnet101.", "Exception"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet101"], ["    ", "def", "__init__", "(", "self", ",", "resnet", "=", "'resnet34'", ",", "num_classes", "=", "2", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "cut", ",", "lr_cut", "=", "[", "8", ",", "6", "]", "\n", "\n", "if", "resnet", "==", "'resnet34'", ":", "\n", "            ", "base_model", "=", "resnet34", "\n", "", "elif", "resnet", "==", "'resnet18'", ":", "\n", "            ", "base_model", "=", "resnet18", "\n", "", "elif", "resnet", "==", "'resnet50'", ":", "\n", "            ", "base_model", "=", "resnet50", "\n", "", "elif", "resnet", "==", "'resnet101'", ":", "\n", "            ", "base_model", "=", "resnet101", "(", ")", "\n", "", "elif", "resnet", "==", "'resnet152'", ":", "\n", "            ", "base_model", "=", "resnet152", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'The Resnet Model only accept resnet18, resnet34, resnet50,'", "\n", "'resnet101 and resnet152'", ")", "\n", "\n", "", "layers", "=", "list", "(", "base_model", "(", "pretrained", "=", "pretrained", ")", ".", "children", "(", ")", ")", "[", ":", "cut", "]", "\n", "base_layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "rn", "=", "base_layers", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "sfs", "=", "[", "SaveFeatures", "(", "base_layers", "[", "i", "]", ")", "for", "i", "in", "[", "2", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "self", ".", "up1", "=", "UnetBlock", "(", "512", ",", "256", ",", "256", ")", "\n", "self", ".", "up2", "=", "UnetBlock", "(", "256", ",", "128", ",", "256", ")", "\n", "self", ".", "up3", "=", "UnetBlock", "(", "256", ",", "64", ",", "256", ")", "\n", "self", ".", "up4", "=", "UnetBlock", "(", "256", ",", "64", ",", "256", ")", "\n", "\n", "self", ".", "up5", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "self", ".", "num_classes", "*", "14", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.UNet_dist.forward": [[123, 171], ["torch.relu", "torch.relu", "unet_model.UNet_dist.up1", "unet_model.UNet_dist.up2", "unet_model.UNet_dist.up3", "unet_model.UNet_dist.up4", "unet_model.UNet_dist.up5", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "range", "range", "torch.distributions.Independent", "torch.distributions.Independent", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "unet_model.UNet_dist.rn", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "mu_residual_list.append", "sigma_rater_list.append", "mu_rater_list.append", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Independent", "torch.distributions.Independent", "dist_rater_list.append", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "range", "torch.distributions.Independent.sample", "torch.distributions.Independent.sample", "torch.distributions.Normal", "torch.distributions.Normal", "dist_rater_list[].rsample", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "rater_samples_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "training", "=", "True", ")", ":", "\n", "        ", "rater_num", "=", "6", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "rn", "(", "x", ")", ")", "# x = [b_size, 2048, 8, 8]", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "self", ".", "sfs", "[", "3", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "self", ".", "sfs", "[", "2", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "self", ".", "sfs", "[", "1", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "self", ".", "sfs", "[", "0", "]", ".", "features", ")", "\n", "output", "=", "self", ".", "up5", "(", "x", ")", "\n", "\n", "global_mu", "=", "output", "[", ":", ",", "0", ":", "2", ",", ":", ",", ":", "]", "\n", "global_sigma", "=", "output", "[", ":", ",", "2", ":", "4", ",", ":", ",", ":", "]", "\n", "global_sigma", "=", "torch", ".", "abs", "(", "global_sigma", ")", "\n", "\n", "mu_residual_list", "=", "[", "]", "\n", "sigma_rater_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "rater_num", ")", ":", "\n", "            ", "start_index", "=", "3", "+", "4", "*", "i", "\n", "end_index", "=", "start_index", "+", "2", "\n", "mu_residual_temp", "=", "output", "[", ":", ",", "start_index", ":", "end_index", ",", ":", ",", ":", "]", "\n", "sigma_rater_temp", "=", "output", "[", ":", ",", "end_index", ":", "end_index", "+", "2", ",", ":", ",", ":", "]", "\n", "sigma_rater_temp", "=", "torch", ".", "abs", "(", "sigma_rater_temp", ")", "\n", "mu_residual_list", ".", "append", "(", "mu_residual_temp", ")", "\n", "sigma_rater_list", ".", "append", "(", "sigma_rater_temp", ")", "\n", "\n", "", "mu_rater_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "rater_num", ")", ":", "\n", "            ", "mu_rater_temp", "=", "global_mu", "+", "mu_residual_list", "[", "i", "]", "\n", "mu_rater_list", ".", "append", "(", "mu_rater_temp", ")", "\n", "\n", "", "global_dist", "=", "Independent", "(", "Normal", "(", "loc", "=", "global_mu", ",", "scale", "=", "global_sigma", ")", ",", "1", ")", "\n", "dist_rater_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "rater_num", ")", ":", "\n", "            ", "dist_rater_temp", "=", "Independent", "(", "Normal", "(", "loc", "=", "mu_rater_list", "[", "i", "]", ",", "scale", "=", "sigma_rater_list", "[", "i", "]", ")", ",", "1", ")", "\n", "dist_rater_list", ".", "append", "(", "dist_rater_temp", ")", "\n", "\n", "", "if", "training", ":", "\n", "            ", "global_samples", "=", "global_dist", ".", "rsample", "(", "[", "6", "]", ")", "\n", "rater_samples_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "rater_num", ")", ":", "\n", "                ", "sample_temp", "=", "dist_rater_list", "[", "i", "]", ".", "rsample", "(", ")", "\n", "sample_temp", "=", "torch", ".", "sigmoid", "(", "sample_temp", ")", "\n", "rater_samples_list", ".", "append", "(", "sample_temp", ")", "\n", "", "", "else", ":", "\n", "            ", "global_samples", "=", "global_dist", ".", "sample", "(", "[", "50", "]", ")", "\n", "rater_samples_list", "=", "[", "]", "\n", "\n", "", "global_samples", "=", "torch", ".", "sigmoid", "(", "global_samples", ")", "\n", "return", "global_mu", ",", "global_sigma", ",", "mu_rater_list", ",", "sigma_rater_list", ",", "global_samples", ",", "rater_samples_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.UNet_dist.close": [[172, 174], ["sf.remove"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.SaveFeatures.remove"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "sf", "in", "self", ".", "sfs", ":", "sf", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.PADL.__init__": [[178, 250], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "unet_model.UnetBlock", "unet_model.UnetBlock", "unet_model.UnetBlock", "unet_model.UnetBlock", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "list", "list", "list", "list", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "list", "unet_model.SaveFeatures", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "unet_model.PADL.rater_residual_heads_reduction.append", "unet_model.PADL.rater_residual_heads_output.append", "unet_model.PADL.rater_sigma_heads_reduction.append", "unet_model.PADL.rater_sigma_heads_output.append", "res_net.resnet101.children", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "res_net.resnet101", "res_net.resnet101.", "Exception"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__", "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.res_net.resnet101"], ["    ", "def", "__init__", "(", "self", ",", "resnet", "=", "'resnet34'", ",", "num_classes", "=", "2", ",", "rater_num", "=", "6", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "cut", ",", "lr_cut", "=", "[", "8", ",", "6", "]", "\n", "self", ".", "rater_num", "=", "rater_num", "\n", "\n", "if", "resnet", "==", "'resnet34'", ":", "\n", "            ", "base_model", "=", "resnet34", "\n", "", "elif", "resnet", "==", "'resnet18'", ":", "\n", "            ", "base_model", "=", "resnet18", "\n", "", "elif", "resnet", "==", "'resnet50'", ":", "\n", "            ", "base_model", "=", "resnet50", "\n", "", "elif", "resnet", "==", "'resnet101'", ":", "\n", "            ", "base_model", "=", "resnet101", "(", ")", "\n", "", "elif", "resnet", "==", "'resnet152'", ":", "\n", "            ", "base_model", "=", "resnet152", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'The Resnet Model only accept resnet18, resnet34, resnet50,'", "\n", "'resnet101 and resnet152'", ")", "\n", "\n", "", "layers", "=", "list", "(", "base_model", "(", "pretrained", "=", "pretrained", ")", ".", "children", "(", ")", ")", "[", ":", "cut", "]", "\n", "base_layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "rn", "=", "base_layers", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "sfs", "=", "[", "SaveFeatures", "(", "base_layers", "[", "i", "]", ")", "for", "i", "in", "[", "2", ",", "4", ",", "5", ",", "6", "]", "]", "\n", "self", ".", "up1", "=", "UnetBlock", "(", "512", ",", "256", ",", "256", ")", "\n", "self", ".", "up2", "=", "UnetBlock", "(", "256", ",", "128", ",", "256", ")", "\n", "self", ".", "up3", "=", "UnetBlock", "(", "256", ",", "64", ",", "256", ")", "\n", "self", ".", "up4", "=", "UnetBlock", "(", "256", ",", "64", ",", "256", ")", "\n", "\n", "self", ".", "up5", "=", "nn", ".", "ConvTranspose2d", "(", "256", ",", "32", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "bnout", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "\n", "self", ".", "global_mu_head", "=", "nn", ".", "Conv2d", "(", "32", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "global_sigma_head_reduction", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "self", ".", "num_classes", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_classes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "global_sigma_head_output", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_classes", "*", "2", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "rater_residual_heads_reduction", "=", "list", "(", ")", "\n", "self", ".", "rater_residual_heads_output", "=", "list", "(", ")", "\n", "self", ".", "rater_sigma_heads_reduction", "=", "list", "(", ")", "\n", "self", ".", "rater_sigma_heads_output", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", ":", "\n", "            ", "self", ".", "rater_residual_heads_reduction", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "self", ".", "num_classes", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_classes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "rater_residual_heads_output", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_classes", "*", "2", ",", "self", ".", "num_classes", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "rater_sigma_heads_reduction", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "self", ".", "num_classes", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_classes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "rater_sigma_heads_output", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_classes", "*", "2", ",", "self", ".", "num_classes", ",", "1", ")", "\n", ")", "\n", "\n", "", "self", ".", "rater_residual_heads_reduction", "=", "nn", ".", "ModuleList", "(", "self", ".", "rater_residual_heads_reduction", ")", "\n", "self", ".", "rater_residual_heads_output", "=", "nn", ".", "ModuleList", "(", "self", ".", "rater_residual_heads_output", ")", "\n", "self", ".", "rater_sigma_heads_reduction", "=", "nn", ".", "ModuleList", "(", "self", ".", "rater_sigma_heads_reduction", ")", "\n", "self", ".", "rater_sigma_heads_output", "=", "nn", ".", "ModuleList", "(", "self", ".", "rater_sigma_heads_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.PADL.forward": [[251, 303], ["torch.relu", "torch.relu", "unet_model.PADL.up1", "unet_model.PADL.up2", "unet_model.PADL.up3", "unet_model.PADL.up4", "unet_model.PADL.up5", "torch.relu", "torch.relu", "unet_model.PADL.global_mu_head", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "global_entropy_map.detach.detach.detach", "unet_model.PADL.global_sigma_head_reduction", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_model.PADL.global_sigma_head_output", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list", "range", "torch.distributions.Independent", "torch.distributions.Independent", "unet_model.PADL.rn", "unet_model.PADL.bnout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list.append", "torch.distributions.Normal", "torch.distributions.Normal", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.distributions.Independent.rsample", "torch.distributions.Independent.rsample", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.distributions.Independent.sample", "torch.distributions.Independent.sample", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "range", "range", "range", "range", "range", "range", "range", "range", "range", "torch.distributions.Independent", "torch.distributions.Independent", "dist.rsample", "dist.sample", "torch.distributions.Normal", "torch.distributions.Normal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "training", "=", "True", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "rn", "(", "x", ")", ")", "# x = [b_size, 2048, 8, 8]", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "self", ".", "sfs", "[", "3", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "self", ".", "sfs", "[", "2", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "self", ".", "sfs", "[", "1", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "self", ".", "sfs", "[", "0", "]", ".", "features", ")", "\n", "x", "=", "self", ".", "up5", "(", "x", ")", "\n", "\n", "head_input", "=", "F", ".", "relu", "(", "self", ".", "bnout", "(", "x", ")", ")", "\n", "\n", "global_mu", "=", "self", ".", "global_mu_head", "(", "head_input", ")", "\n", "global_mu_sigmoid", "=", "torch", ".", "sigmoid", "(", "global_mu", ")", "\n", "global_entropy_map", "=", "-", "global_mu_sigmoid", "*", "torch", ".", "log2", "(", "global_mu_sigmoid", "+", "1e-6", ")", "-", "(", "1", "-", "global_mu_sigmoid", ")", "*", "torch", ".", "log2", "(", "1", "-", "global_mu_sigmoid", "+", "1e-6", ")", "\n", "global_entropy_map", "=", "global_entropy_map", ".", "detach", "(", ")", "\n", "global_sigma_reduction", "=", "self", ".", "global_sigma_head_reduction", "(", "head_input", ")", "\n", "global_sigma_input", "=", "(", "1", "+", "global_entropy_map", ")", "*", "global_sigma_reduction", "\n", "global_sigma_input", "=", "torch", ".", "cat", "(", "[", "global_sigma_input", ",", "global_mu", "]", ",", "dim", "=", "1", ")", "\n", "global_sigma", "=", "self", ".", "global_sigma_head_output", "(", "global_sigma_input", ")", "\n", "global_sigma", "=", "torch", ".", "abs", "(", "global_sigma", ")", "\n", "\n", "rater_residual_reduction_list", "=", "[", "self", ".", "rater_residual_heads_reduction", "[", "i", "]", "(", "head_input", ")", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "rater_residual_input", "=", "[", "(", "1", "+", "global_entropy_map", ")", "*", "rater_residual_reduction_list", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "rater_residual_input", "=", "[", "torch", ".", "cat", "(", "[", "rater_residual_input", "[", "i", "]", ",", "global_mu", "]", ",", "dim", "=", "1", ")", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "rater_residual", "=", "[", "self", ".", "rater_residual_heads_output", "[", "i", "]", "(", "rater_residual_input", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "\n", "rater_mu", "=", "[", "rater_residual", "[", "i", "]", "+", "global_mu", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "\n", "rater_sigma_reduction_list", "=", "[", "self", ".", "rater_sigma_heads_reduction", "[", "i", "]", "(", "head_input", ")", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "rater_sigma_input", "=", "[", "(", "1", "+", "global_entropy_map", ")", "*", "rater_sigma_reduction_list", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "rater_sigma_input", "=", "[", "torch", ".", "cat", "(", "[", "rater_sigma_input", "[", "i", "]", ",", "rater_mu", "[", "i", "]", "]", ",", "dim", "=", "1", ")", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "rater_sigma", "=", "[", "self", ".", "rater_sigma_heads_output", "[", "i", "]", "(", "rater_sigma_input", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", "]", "\n", "\n", "rater_sigmas", "=", "torch", ".", "stack", "(", "rater_sigma", ",", "dim", "=", "0", ")", "\n", "rater_sigmas", "=", "torch", ".", "abs", "(", "rater_sigmas", ")", "\n", "rater_mus", "=", "torch", ".", "stack", "(", "rater_mu", ",", "dim", "=", "0", ")", "\n", "rater_residuals", "=", "torch", ".", "stack", "(", "rater_residual", ",", "dim", "=", "0", ")", "\n", "rater_dists", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "rater_num", ")", ":", "\n", "            ", "rater_dists", ".", "append", "(", "Independent", "(", "Normal", "(", "loc", "=", "rater_mus", "[", "i", "]", ",", "scale", "=", "rater_sigmas", "[", "i", "]", ",", "validate_args", "=", "False", ")", ",", "1", ")", ")", "\n", "", "global_dist", "=", "Independent", "(", "Normal", "(", "loc", "=", "global_mu", ",", "scale", "=", "global_sigma", ",", "validate_args", "=", "False", ")", ",", "1", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "rater_samples", "=", "[", "dist", ".", "rsample", "(", ")", "for", "dist", "in", "rater_dists", "]", "\n", "rater_samples", "=", "torch", ".", "stack", "(", "rater_samples", ",", "dim", "=", "0", ")", "\n", "global_samples", "=", "global_dist", ".", "rsample", "(", "[", "self", ".", "rater_num", "]", ")", "\n", "", "else", ":", "\n", "            ", "rater_samples", "=", "[", "dist", ".", "sample", "(", ")", "for", "dist", "in", "rater_dists", "]", "\n", "rater_samples", "=", "torch", ".", "stack", "(", "rater_samples", ",", "dim", "=", "0", ")", "\n", "global_samples", "=", "global_dist", ".", "sample", "(", "[", "self", ".", "rater_num", "]", ")", "\n", "\n", "", "return", "global_mu", ",", "rater_mus", ",", "global_sigma", ",", "rater_sigmas", ",", "rater_samples", ",", "global_samples", ",", "rater_residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.PADL.close": [[304, 306], ["sf.remove"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.SaveFeatures.remove"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "sf", "in", "self", ".", "sfs", ":", "sf", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.get_loss.get_loss_func": [[5, 13], ["loss_func.loss.DiceLoss", "torch.BCEWithLogitsLoss", "loss_func.loss.DiceLoss"], "function", ["None"], ["def", "get_loss_func", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "loss_func", "==", "\"dice\"", ":", "\n", "        ", "loss_func", "=", "DiceLoss", "(", ")", "\n", "", "elif", "args", ".", "loss_func", "==", "\"bce\"", ":", "\n", "        ", "loss_func", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "        ", "loss_func", "=", "DiceLoss", "(", ")", "\n", "", "return", "loss_func", "", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.DiceLoss.__init__": [[7, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.DiceLoss.forward": [[10, 22], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view", "inputs.view.view.sum", "targets.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "# comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "# flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "dice", "=", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "\n", "return", "1", "-", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.DiceBCELoss.__init__": [[25, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiceBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.DiceBCELoss.forward": [[28, 42], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "inputs.view.view.sum", "targets.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "# comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "# flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "dice_loss", "=", "1", "-", "(", "2.", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "BCE", "=", "F", ".", "binary_cross_entropy", "(", "inputs", ",", "targets", ",", "reduction", "=", "'mean'", ")", "\n", "Dice_BCE", "=", "BCE", "+", "dice_loss", "\n", "\n", "return", "Dice_BCE", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.IoULoss.__init__": [[45, 47], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "IoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.IoULoss.forward": [[48, 65], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "# comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "# flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "# intersection is equivalent to True Positive count", "\n", "# union is the mutually inclusive area of all labels & predictions", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "total", "=", "(", "inputs", "+", "targets", ")", ".", "sum", "(", ")", "\n", "union", "=", "total", "-", "intersection", "\n", "\n", "IoU", "=", "(", "intersection", "+", "smooth", ")", "/", "(", "union", "+", "smooth", ")", "\n", "\n", "return", "1", "-", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalLoss.__init__": [[68, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "0.8", "\n", "self", ".", "gamma", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalLoss.forward": [[73, 87], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "# comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "# flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "# first compute binary cross-entropy", "\n", "BCE", "=", "F", ".", "binary_cross_entropy", "(", "inputs", ",", "targets", ",", "reduction", "=", "'mean'", ")", "\n", "BCE_EXP", "=", "torch", ".", "exp", "(", "-", "BCE", ")", "\n", "focal_loss", "=", "self", ".", "alpha", "*", "(", "1", "-", "BCE_EXP", ")", "**", "self", ".", "gamma", "*", "BCE", "\n", "\n", "return", "focal_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.TverskyLoss.__init__": [[90, 94], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "TverskyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "0.5", "\n", "self", ".", "beta", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.TverskyLoss.forward": [[95, 111], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "# comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "# flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "# True Positives, False Positives & False Negatives", "\n", "TP", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "FP", "=", "(", "(", "1", "-", "targets", ")", "*", "inputs", ")", ".", "sum", "(", ")", "\n", "FN", "=", "(", "targets", "*", "(", "1", "-", "inputs", ")", ")", ".", "sum", "(", ")", "\n", "\n", "Tversky", "=", "(", "TP", "+", "smooth", ")", "/", "(", "TP", "+", "self", ".", "alpha", "*", "FP", "+", "self", ".", "beta", "*", "FN", "+", "smooth", ")", "\n", "\n", "return", "1", "-", "Tversky", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__": [[114, 119], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalTverskyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "0.5", "\n", "self", ".", "gamma", "=", "1", "\n", "self", ".", "beta", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.loss_func.loss.FocalTverskyLoss.forward": [[120, 137], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "inputs.view.view.view", "targets.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "# comment out if your model contains a sigmoid or equivalent activation layer", "\n", "        ", "inputs", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "# flatten label and prediction tensors", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "# True Positives, False Positives & False Negatives", "\n", "TP", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "FP", "=", "(", "(", "1", "-", "targets", ")", "*", "inputs", ")", ".", "sum", "(", ")", "\n", "FN", "=", "(", "targets", "*", "(", "1", "-", "inputs", ")", ")", ".", "sum", "(", ")", "\n", "\n", "Tversky", "=", "(", "TP", "+", "smooth", ")", "/", "(", "TP", "+", "self", ".", "alpha", "*", "FP", "+", "self", ".", "beta", "*", "FN", "+", "smooth", ")", "\n", "FocalTversky", "=", "(", "1", "-", "Tversky", ")", "**", "self", ".", "gamma", "\n", "\n", "return", "FocalTversky", "", "", "", ""]], "home.repos.pwc.inspect_result.Merrical_PADL.trainer.train_riga_padl.train_riga_padl": [[13, 76], ["torch.device", "model.cuda.cuda", "apex.amp.initialize", "torch.utils.data.DataLoader", "torch.utils.tensorboard.SummaryWriter", "range", "torch.save", "train_riga_padl.test_riga_padl", "print", "print", "model.cuda.train", "enumerate", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "model.cuda.state_dict", "optimizer.state_dict", "apex.amp.state_dict", "torch.cuda.is_available", "data[].to().cuda", "mask_major_vote.to().cuda.to().cuda", "model.cuda.", "range", "optimizer.zero_grad", "utils.functions.adjust_learning_rate", "optimizer.step", "torch.sigmoid", "mask[].cuda", "loss_func", "loss_func", "apex.amp.scale_loss", "scaled_loss.backward", "train_set.__len__", "train_set.__len__", "train_set.__len__", "data[].to", "mask_major_vote.to().cuda.to", "data[].to().cuda.size", "utils.metrics.get_soft_dice", "data[].to().cuda.size", "utils.metrics.get_soft_dice", "data[].to().cuda.size", "global_mu[].cpu", "mask_major_vote[].cpu", "global_mu[].cpu", "mask_major_vote[].cpu"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.trainer.train_riga_padl.test_riga_padl", "home.repos.pwc.inspect_result.Merrical_PADL.None.run.train", "home.repos.pwc.inspect_result.Merrical_PADL.utils.functions.adjust_learning_rate", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_dice", "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_dice"], ["def", "train_riga_padl", "(", "args", ",", "log_folder", ",", "checkpoint_folder", ",", "visualization_folder", ",", "metrics_folder", ",", "model", ",", "optimizer", ",", "\n", "loss_func", ",", "train_set", ",", "test_set", ")", ":", "\n", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device_id", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_folder", ")", "\n", "\n", "for", "this_epoch", "in", "range", "(", "args", ".", "num_epoch", ")", ":", "\n", "        ", "print", "(", "\"---------------------\"", ")", "\n", "print", "(", "this_epoch", ")", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0.0", "\n", "train_soft_dice_cup", "=", "0.0", "\n", "train_soft_dice_disc", "=", "0.0", "\n", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "imgs", "=", "data", "[", "'image'", "]", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "# torch.Size([B, 3, 256, 256])", "\n", "mask", "=", "data", "[", "'mask'", "]", "# type = list; len = 6; item_type = tensor; item_size = torch.Size([B, 2, 256, 256])", "\n", "# cup_mask = mask[i][:,1,:,:], size = [B,256,256]", "\n", "# disc_mask = mask[i][:,0,:,:], size = [B,256,256]", "\n", "\n", "# get majority voting mask", "\n", "mask_major_vote", "=", "(", "mask", "[", "0", "]", "+", "mask", "[", "1", "]", "+", "mask", "[", "2", "]", "+", "mask", "[", "3", "]", "+", "mask", "[", "4", "]", "+", "mask", "[", "5", "]", ")", "/", "6.0", "\n", "mask_major_vote", "=", "mask_major_vote", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "\n", "global_mu", ",", "rater_mus", ",", "global_sigma", ",", "rater_sigmas", ",", "rater_samples", ",", "global_samples", ",", "rater_residuals", "=", "model", "(", "imgs", ",", "training", "=", "True", ")", "\n", "\n", "loss_global", "=", "0.0", "\n", "loss_rater", "=", "0.0", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "                ", "rater_mask", "=", "mask", "[", "i", "]", ".", "cuda", "(", ")", "\n", "loss_global", "+=", "loss_func", "(", "global_samples", "[", "i", "]", ",", "rater_mask", ")", "\n", "loss_rater", "+=", "loss_func", "(", "rater_samples", "[", "i", "]", ",", "rater_mask", ")", "\n", "\n", "", "loss", "=", "loss_global", "+", "loss_rater", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "this_epoch", ",", "args", ".", "learning_rate", ",", "args", ".", "num_epoch", ",", "args", ".", "power", ")", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "# torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "=", "train_loss", "+", "loss", "*", "imgs", ".", "size", "(", "0", ")", "\n", "global_mu", "=", "torch", ".", "sigmoid", "(", "global_mu", ")", "\n", "train_soft_dice_cup", "=", "train_soft_dice_cup", "+", "get_soft_dice", "(", "outputs", "=", "global_mu", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ",", "masks", "=", "mask_major_vote", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "*", "imgs", ".", "size", "(", "0", ")", "\n", "train_soft_dice_disc", "=", "train_soft_dice_disc", "+", "get_soft_dice", "(", "outputs", "=", "global_mu", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ",", "masks", "=", "mask_major_vote", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "*", "imgs", ".", "size", "(", "0", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "\"Loss/train\"", ",", "train_loss", "/", "(", "train_set", ".", "__len__", "(", ")", ")", ",", "this_epoch", ")", "\n", "writer", ".", "add_scalar", "(", "\"Soft_Dice/train_cup\"", ",", "train_soft_dice_cup", "/", "(", "train_set", ".", "__len__", "(", ")", ")", ",", "this_epoch", ")", "\n", "writer", ".", "add_scalar", "(", "\"Soft_Dice/train_disc\"", ",", "train_soft_dice_disc", "/", "(", "train_set", ".", "__len__", "(", ")", ")", ",", "this_epoch", ")", "\n", "\n", "", "checkpoint", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'amp'", ":", "amp", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_folder", "+", "'/amp_checkpoint.pt'", ")", "\n", "\n", "test_riga_padl", "(", "args", ",", "visualization_folder", ",", "metrics_folder", ",", "model", ",", "test_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.trainer.train_riga_padl.test_visualization": [[78, 86], ["nibabel.Nifti1Image", "nib.Nifti1Image.set_data_dtype", "nibabel.save", "numpy.eye"], "function", ["None"], ["", "def", "test_visualization", "(", "numpy_arr", ",", "folder", ",", "nii_name", ")", ":", "\n", "    ", "\"\"\"\n    :param numpy_arr: 3D\n    :return:\n    \"\"\"", "\n", "new_image", "=", "nib", ".", "Nifti1Image", "(", "numpy_arr", ",", "np", ".", "eye", "(", "4", ")", ")", "\n", "new_image", ".", "set_data_dtype", "(", "np", ".", "float32", ")", "\n", "nib", ".", "save", "(", "new_image", ",", "folder", "+", "'/'", "+", "nii_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Merrical_PADL.trainer.train_riga_padl.test_riga_padl": [[88, 135], ["torch.device", "model.cuda.cuda", "torch.utils.data.DataLoader", "open", "open.write", "open.close", "model.cuda.eval", "enumerate", "open", "open.write", "open.write", "range", "open.write", "torch.cuda.is_available", "test_set.__len__", "torch.no_grad", "data[].to().cuda", "model.cuda.", "torch.sigmoid", "torch.sigmoid", "round", "round", "round", "round", "round", "round", "data[].to", "utils.metrics.get_soft_dice", "data[].to().cuda.size", "utils.metrics.get_soft_dice", "data[].to().cuda.size", "range", "range", "utils.metrics.get_soft_dice", "data[].to().cuda.size", "utils.metrics.get_soft_dice", "data[].to().cuda.size", "test_set.__len__", "test_set.__len__", "numpy.mean", "test_set.__len__", "numpy.mean", "test_set.__len__", "global_mu_sigmoid[].cpu", "mask_major_vote[].cpu", "global_mu_sigmoid[].cpu", "mask_major_vote[].cpu", "test_set.__len__", "test_set.__len__", "[].cpu", "[].cpu", "[].cpu", "[].cpu"], "function", ["home.repos.pwc.inspect_result.Merrical_PADL.res_unet.unet_model.PADL.close", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_dice", "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_dice", "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_dice", "home.repos.pwc.inspect_result.Merrical_PADL.utils.metrics.get_soft_dice", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__", "home.repos.pwc.inspect_result.Merrical_PADL.dataset.DiscRegion.Disc_Cup.__len__"], ["", "def", "test_riga_padl", "(", "args", ",", "visualization_folder", ",", "metrics_folder", ",", "model", ",", "test_set", ")", ":", "\n", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device_id", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "95", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "metrix_file", "=", "metrics_folder", "+", "\"/dice.txt\"", "\n", "file_handle", "=", "open", "(", "metrix_file", ",", "'a'", ")", "\n", "file_handle", ".", "write", "(", "'testing data size: %d \\n'", "%", "(", "test_set", ".", "__len__", "(", ")", ")", ")", "\n", "file_handle", ".", "close", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_soft_dice_cup", "=", "0.0", "\n", "test_soft_dice_disc", "=", "0.0", "\n", "\n", "test_soft_dice_disc_raters", "=", "[", "0.0", "]", "*", "6", "\n", "test_soft_dice_cup_raters", "=", "[", "0.0", "]", "*", "6", "\n", "\n", "for", "step", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "imgs", "=", "data", "[", "'image'", "]", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "# torch.Size([B, 3, 256, 256])", "\n", "mask", "=", "data", "[", "'mask'", "]", "# type = list; len = 6; item_type = tensor; item_size = torch.Size([B, 2, 256, 256])", "\n", "\n", "mask_major_vote", "=", "(", "mask", "[", "0", "]", "+", "mask", "[", "1", "]", "+", "mask", "[", "2", "]", "+", "mask", "[", "3", "]", "+", "mask", "[", "4", "]", "+", "mask", "[", "5", "]", ")", "/", "6.0", "\n", "global_mu", ",", "rater_mus", ",", "global_sigma", ",", "rater_sigmas", ",", "rater_samples", ",", "global_samples", ",", "rater_residuals", "=", "model", "(", "imgs", ",", "training", "=", "False", ")", "\n", "\n", "rater_mus_sigmoid", "=", "torch", ".", "sigmoid", "(", "rater_mus", ")", "\n", "global_mu_sigmoid", "=", "torch", ".", "sigmoid", "(", "global_mu", ")", "\n", "\n", "test_soft_dice_cup", "=", "test_soft_dice_cup", "+", "get_soft_dice", "(", "outputs", "=", "global_mu_sigmoid", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ",", "masks", "=", "mask_major_vote", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "*", "imgs", ".", "size", "(", "0", ")", "\n", "test_soft_dice_disc", "=", "test_soft_dice_disc", "+", "get_soft_dice", "(", "outputs", "=", "global_mu_sigmoid", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ",", "masks", "=", "mask_major_vote", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "*", "imgs", ".", "size", "(", "0", ")", "\n", "\n", "test_soft_dice_disc_raters", "=", "[", "test_soft_dice_disc_raters", "[", "i", "]", "+", "get_soft_dice", "(", "outputs", "=", "rater_mus_sigmoid", "[", "i", "]", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ",", "masks", "=", "mask", "[", "i", "]", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "*", "imgs", ".", "size", "(", "0", ")", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "test_soft_dice_cup_raters", "=", "[", "test_soft_dice_cup_raters", "[", "i", "]", "+", "get_soft_dice", "(", "outputs", "=", "rater_mus_sigmoid", "[", "i", "]", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ",", "masks", "=", "mask", "[", "i", "]", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ")", "*", "imgs", ".", "size", "(", "0", ")", "for", "i", "in", "range", "(", "6", ")", "]", "\n", "\n", "", "", "file_handle", "=", "open", "(", "metrix_file", ",", "'a'", ")", "\n", "file_handle", ".", "write", "(", "\"Mean Voting: ({}, {})\\n\"", ".", "format", "(", "round", "(", "test_soft_dice_disc", "/", "test_set", ".", "__len__", "(", ")", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "test_soft_dice_cup", "/", "test_set", ".", "__len__", "(", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "file_handle", ".", "write", "(", "\"Average: ({}, {})\\n\"", ".", "format", "(", "round", "(", "np", ".", "mean", "(", "test_soft_dice_disc_raters", ")", "/", "test_set", ".", "__len__", "(", ")", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "np", ".", "mean", "(", "test_soft_dice_cup_raters", ")", "/", "test_set", ".", "__len__", "(", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "        ", "file_handle", ".", "write", "(", "\n", "\"rater{}: ({}, {})\\n\"", ".", "format", "(", "i", "+", "1", ",", "round", "(", "test_soft_dice_disc_raters", "[", "i", "]", "/", "test_set", ".", "__len__", "(", ")", "*", "100", ",", "2", ")", ",", "\n", "round", "(", "test_soft_dice_cup_raters", "[", "i", "]", "/", "test_set", ".", "__len__", "(", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "", "", ""]]}