{"home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.LFWDataset.__init__": [[157, 165], ["open", "line.rstrip().lstrip", "len", "validate_lfw.LFWDataset.lfw_file_list.append", "line.rstrip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lfw_filename", ",", "lfw_root_dir", ")", ":", "\n", "        ", "self", ".", "lfw_file_list", "=", "[", "]", "\n", "with", "open", "(", "lfw_filename", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "l", "=", "line", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "\n", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "self", ".", "lfw_file_list", ".", "append", "(", "l", ")", "\n", "", "", "", "self", ".", "lfw_root_dir", "=", "lfw_root_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.LFWDataset.__len__": [[166, 168], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "lfw_file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.LFWDataset.__getitem__": [[169, 174], ["validate_lfw.load_image", "torch.from_numpy", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.load_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "lfw_file_list", "[", "index", "]", "\n", "image", "=", "load_image", "(", "os", ".", "path", ".", "join", "(", "self", ".", "lfw_root_dir", ",", "filename", ")", ")", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ")", "\n", "return", "image", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.find_score": [[15, 45], ["None"], "function", ["None"], ["def", "find_score", "(", "far", ",", "vr", ",", "target", "=", "1e-4", ")", ":", "\n", "    ", "l", "=", "0", "\n", "u", "=", "far", ".", "size", "-", "1", "\n", "e", "=", "-", "1", "\n", "while", "u", "-", "l", ">", "1", ":", "\n", "        ", "mid", "=", "(", "l", "+", "u", ")", "//", "2", "\n", "if", "far", "[", "mid", "]", "==", "target", ":", "\n", "            ", "if", "target", "!=", "0", ":", "\n", "                ", "return", "vr", "[", "mid", "]", "\n", "", "else", ":", "\n", "                ", "e", "=", "mid", "\n", "break", "\n", "", "", "elif", "far", "[", "mid", "]", "<", "target", ":", "\n", "            ", "u", "=", "mid", "\n", "", "else", ":", "\n", "            ", "l", "=", "mid", "\n", "", "", "if", "target", "==", "0", ":", "\n", "        ", "i", "=", "e", "\n", "while", "i", ">=", "0", ":", "\n", "            ", "if", "far", "[", "i", "]", "!=", "0", ":", "\n", "                ", "break", "\n", "", "i", "-=", "1", "\n", "", "if", "i", ">=", "0", ":", "\n", "            ", "return", "vr", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "vr", "[", "u", "]", "\n", "", "", "if", "target", "!=", "0", "and", "far", "[", "l", "]", "/", "target", ">=", "8", ":", "\n", "        ", "return", "0.0", "\n", "", "nearest_point", "=", "(", "target", "-", "far", "[", "l", "]", ")", "/", "(", "far", "[", "u", "]", "-", "far", "[", "l", "]", ")", "*", "(", "vr", "[", "u", "]", "-", "vr", "[", "l", "]", ")", "+", "vr", "[", "l", "]", "\n", "return", "nearest_point", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.compute_roc": [[47, 75], ["numpy.max", "numpy.min", "numpy.append", "numpy.triu", "numpy.histogram", "numpy.histogram", "numpy.squeeze", "numpy.squeeze", "numpy.array", "numpy.ones", "numpy.dot", "numpy.dot", "numpy.array", "range"], "function", ["None"], ["", "def", "compute_roc", "(", "score", ",", "label", ",", "num_thresholds", "=", "1000", ",", "show_sample_hist", "=", "False", ")", ":", "\n", "    ", "pos_dist", "=", "score", "[", "label", "==", "1", "]", "\n", "neg_dist", "=", "score", "[", "label", "==", "0", "]", "\n", "\n", "num_pos_samples", "=", "pos_dist", ".", "size", "\n", "num_neg_samples", "=", "neg_dist", ".", "size", "\n", "data_max", "=", "np", ".", "max", "(", "score", ")", "\n", "data_min", "=", "np", ".", "min", "(", "score", ")", "\n", "unit", "=", "(", "data_max", "-", "data_min", ")", "*", "1.0", "/", "num_thresholds", "\n", "threshold", "=", "data_min", "+", "(", "data_max", "-", "data_min", ")", "*", "np", ".", "array", "(", "range", "(", "1", ",", "num_thresholds", "+", "1", ")", ")", "/", "num_thresholds", "\n", "new_interval", "=", "threshold", "-", "unit", "/", "2.0", "+", "2e-6", "\n", "new_interval", "=", "np", ".", "append", "(", "new_interval", ",", "np", ".", "array", "(", "new_interval", "[", "-", "1", "]", "+", "unit", ")", ")", "\n", "P", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "num_thresholds", ")", ")", "\n", "\n", "pos_hist", ",", "dummy", "=", "np", ".", "histogram", "(", "pos_dist", ",", "new_interval", ")", "\n", "neg_hist", ",", "dummy2", "=", "np", ".", "histogram", "(", "neg_dist", ",", "new_interval", ")", "\n", "pos_mat", "=", "pos_hist", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "neg_mat", "=", "neg_hist", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "assert", "pos_hist", ".", "size", "==", "neg_hist", ".", "size", "==", "num_thresholds", "\n", "far", "=", "np", ".", "dot", "(", "P", ",", "neg_mat", ")", "/", "num_neg_samples", "\n", "far", "=", "np", ".", "squeeze", "(", "far", ")", "\n", "vr", "=", "np", ".", "dot", "(", "P", ",", "pos_mat", ")", "/", "num_pos_samples", "\n", "vr", "=", "np", ".", "squeeze", "(", "vr", ")", "\n", "if", "show_sample_hist", "is", "False", ":", "\n", "        ", "return", "far", ",", "vr", ",", "threshold", "\n", "", "else", ":", "\n", "        ", "return", "far", ",", "vr", ",", "threshold", ",", "pos_hist", ",", "neg_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.test_lfw": [[77, 109], ["numpy.zeros", "range", "numpy.mean", "validate_lfw.compute_roc", "range", "numpy.std", "numpy.sqrt", "numpy.hstack", "numpy.hstack", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.compute_roc"], ["", "", "def", "test_lfw", "(", "mask", ",", "score", ")", ":", "\n", "    ", "acc_list", "=", "np", ".", "zeros", "(", "10", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "test_label", "=", "mask", "[", "i", "*", "600", ":", "(", "i", "+", "1", ")", "*", "600", "]", "\n", "test_score", "=", "score", "[", "i", "*", "600", ":", "(", "i", "+", "1", ")", "*", "600", "]", "\n", "if", "i", "==", "0", ":", "\n", "            ", "train_label", "=", "mask", "[", "600", ":", "]", "\n", "train_score", "=", "score", "[", "600", ":", "]", "\n", "", "elif", "i", "==", "9", ":", "\n", "            ", "train_label", "=", "mask", "[", ":", "5400", "]", "\n", "train_score", "=", "score", "[", ":", "5400", "]", "\n", "", "else", ":", "\n", "            ", "train_label_1", "=", "mask", "[", ":", "i", "*", "600", "]", "\n", "train_label_2", "=", "mask", "[", "(", "i", "+", "1", ")", "*", "600", ":", "]", "\n", "train_label", "=", "np", ".", "hstack", "(", "[", "train_label_1", ",", "train_label_2", "]", ")", "\n", "train_score_1", "=", "score", "[", ":", "i", "*", "600", "]", "\n", "train_score_2", "=", "score", "[", "(", "i", "+", "1", ")", "*", "600", ":", "]", "\n", "train_score", "=", "np", ".", "hstack", "(", "[", "train_score_1", ",", "train_score_2", "]", ")", "\n", "\n", "", "far", ",", "vr", ",", "threshold", "=", "compute_roc", "(", "train_score", ",", "train_label", ")", "\n", "train_accuracy", "=", "(", "vr", "+", "1", "-", "far", ")", "/", "2.0", "\n", "tr", "=", "threshold", "[", "np", ".", "argmax", "(", "train_accuracy", ")", "]", "\n", "num_right_samples", "=", "0", "\n", "for", "j", "in", "range", "(", "600", ")", ":", "\n", "            ", "if", "test_score", "[", "j", "]", ">=", "tr", "and", "test_label", "[", "j", "]", "==", "1", ":", "\n", "                ", "num_right_samples", "+=", "1", "\n", "", "elif", "test_score", "[", "j", "]", "<", "tr", "and", "test_label", "[", "j", "]", "==", "0", ":", "\n", "                ", "num_right_samples", "+=", "1", "\n", "", "", "acc_list", "[", "i", "]", "=", "num_right_samples", "*", "1.0", "/", "600", "\n", "", "mean", "=", "np", ".", "mean", "(", "acc_list", ")", "\n", "std", "=", "np", ".", "std", "(", "acc_list", ")", "/", "np", ".", "sqrt", "(", "10", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.load_image": [[111, 154], ["cv2.imdecode.astype", "order.upper", "os.path.exists", "Exception", "cv2.imread", "order.upper", "cv2.imdecode", "Exception", "numpy.fromfile", "cv2.imdecode.transpose"], "function", ["None"], ["", "def", "load_image", "(", "filename", ",", "color", "=", "True", ",", "mean", "=", "127.5", ",", "std", "=", "128.0", ")", ":", "\n", "    ", "\"\"\"\n    Load an image && convert it to gray-scale or BGR image as needed.\n\n    Parameters\n    ----------\n    filename : string\n    color : boolean\n        flag for color format. True (default) loads as ile False\n        loads as intensity (if image is already gray-scale\n    mean: pre-process, default is minus 127.5, divided by 128.0\n    std: pre-process.\n\n    Returns\n    -------\n    image : an image with type np.uint8 in range [0,255]\n        of size (3 x H x W ) in BGR or\n        of size (1 x H x W ) in gray-scale, if order == CHW\n        else return H X W X 3 in BGR or H X W X 1 in gray-scale\n    \"\"\"", "\n", "order", "=", "'CHW'", "\n", "assert", "order", ".", "upper", "(", ")", "in", "[", "'CHW'", ",", "'HWC'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "'%s does not exist.'", "%", "filename", ")", "\n", "\n", "", "flags", "=", "cv2", ".", "IMREAD_COLOR", "\n", "if", "color", "is", "False", ":", "\n", "        ", "flags", "=", "cv2", ".", "IMREAD_GRAYSCALE", "\n", "", "python_version", "=", "sys", ".", "version_info", ".", "major", "\n", "if", "python_version", "==", "2", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "filename", ",", "flags", ")", "\n", "", "elif", "python_version", "==", "3", ":", "\n", "        ", "img", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromfile", "(", "filename", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown python version.'", ")", "\n", "", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "assert", "color", "is", "False", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "", "if", "order", ".", "upper", "(", ")", "==", "'CHW'", ":", "\n", "        ", "img", "=", "(", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "-", "mean", ")", "/", "std", "\n", "", "else", ":", "\n", "        ", "img", "=", "(", "img", "-", "mean", ")", "/", "std", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.validate": [[176, 201], ["model.eval", "numpy.array", "numpy.array", "validate_lfw.test_lfw", "model.train", "torch.no_grad", "enumerate", "score_list.append", "label_list.append", "image.to.to", "model().cpu().numpy", "enumerate", "numpy.dot", "numpy.sqrt", "copy.deepcopy", "model().cpu", "numpy.dot", "numpy.dot", "model"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.test_lfw", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.train"], ["", "", "def", "validate", "(", "model", ",", "lfw_test_pairs", ",", "test_data_loader", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "filename2feat", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "image", ",", "filenames", ")", "in", "enumerate", "(", "test_data_loader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "feature", "=", "model", "(", "image", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "fid", ",", "e", "in", "enumerate", "(", "filenames", ")", ":", "\n", "                ", "assert", "e", "not", "in", "filename2feat", "\n", "filename2feat", "[", "e", "]", "=", "copy", ".", "deepcopy", "(", "feature", "[", "fid", "]", ")", "\n", "\n", "", "", "", "score_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "for", "pairs", "in", "lfw_test_pairs", ":", "\n", "        ", "feat1", "=", "filename2feat", "[", "pairs", "[", "0", "]", "]", "\n", "feat2", "=", "filename2feat", "[", "pairs", "[", "1", "]", "]", "\n", "dist", "=", "np", ".", "dot", "(", "feat1", ",", "feat2", ")", "/", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "feat1", ",", "feat1", ")", "*", "np", ".", "dot", "(", "feat2", ",", "feat2", ")", ")", "\n", "score_list", ".", "append", "(", "dist", ")", "\n", "label_list", ".", "append", "(", "pairs", "[", "2", "]", ")", "\n", "", "score", "=", "np", ".", "array", "(", "score_list", ")", "\n", "label", "=", "np", ".", "array", "(", "label_list", ")", "\n", "lfw_acc", ",", "lfw_std", "=", "test_lfw", "(", "label", ",", "score", ")", "\n", "model", ".", "train", "(", ")", "\n", "return", "lfw_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.prepare_validate_data": [[203, 225], ["re.compile", "torch.utils.data.DataLoader", "open", "validate_lfw.LFWDataset", "line.rstrip", "l.lstrip.lstrip", "len", "re.compile.search", "pat.search.group", "pat.search.group", "int", "lfw_test_pairs.append", "Exception", "pat.search.group"], "function", ["None"], ["", "def", "prepare_validate_data", "(", ")", ":", "\n", "# Common settings", "\n", "    ", "lfw_filename", "=", "'./lfw_test/lfw_image_list.txt'", "\n", "lfw_root_dir", "=", "'./lfw_test/lfw_cropped_images'", "\n", "lfw_pairs_file", "=", "'./lfw_test/lfw_test_pairs.txt'", "\n", "lfw_test_pairs", "=", "[", "]", "\n", "pat", "=", "re", ".", "compile", "(", "r'(\\S+)\\s+(\\S+)\\s+(\\S+)'", ")", "\n", "with", "open", "(", "lfw_pairs_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "l", "=", "line", ".", "rstrip", "(", ")", "\n", "l", "=", "l", ".", "lstrip", "(", ")", "\n", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                ", "obj", "=", "pat", ".", "search", "(", "l", ")", "\n", "if", "obj", ":", "\n", "                    ", "file1", "=", "obj", ".", "group", "(", "1", ")", "\n", "file2", "=", "obj", ".", "group", "(", "2", ")", "\n", "label", "=", "int", "(", "obj", ".", "group", "(", "3", ")", ")", "\n", "lfw_test_pairs", ".", "append", "(", "[", "file1", ",", "file2", ",", "label", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Cannot parse line %s, expected format: file1 file2 image_label'", "%", "l", ")", "\n", "", "", "", "", "test_data_loader", "=", "DataLoader", "(", "LFWDataset", "(", "lfw_filename", ",", "lfw_root_dir", ")", ",", "batch_size", "=", "100", ",", "num_workers", "=", "4", ")", "\n", "return", "lfw_test_pairs", ",", "test_data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.FaceNet.__init__": [[21, 26], ["super().__init__", "backbone.create_backbone", "fc.fc_layers.FC"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.__init__.create_backbone"], ["    ", "def", "__init__", "(", "self", ",", "net_type", ",", "feat_dim", ",", "num_class", ")", ":", "\n", "        ", "super", "(", "FaceNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feat_net", "=", "create_backbone", "(", "net_type", ")", "\n", "#  As we perform loss search, it's recommended that we simply use normal full-connected layer.", "\n", "self", ".", "fc", "=", "FC", "(", "'FC'", ",", "embedding_size", "=", "feat_dim", ",", "num_class", "=", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.FaceNet.forward": [[27, 31], ["main.FaceNet.feat_net", "main.FaceNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "        ", "feat", "=", "self", ".", "feat_net", "(", "x", ")", "\n", "logits", "=", "self", ".", "fc", "(", "feat", ",", "label", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.get_lr": [[33, 36], ["None"], "function", ["None"], ["", "", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "return", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.train_one_epoch": [[38, 69], ["model.train", "len", "torch.get_rank", "enumerate", "image.cuda.cuda", "label.cuda.cuda", "model", "torch.softmax", "lfs.get_loss", "optimizer.zero_grad", "lfs.get_loss.backward", "optimizer.step", "torch.save", "torch.save", "torch.save", "logging.info", "lfs.get_loss.item", "main.get_lr", "logging.info", "torch.save", "torch.save", "torch.save", "logging.info", "os.path.join", "os.path.join", "model.module.feat_net.state_dict", "model.module.feat_net.state_dict"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.train", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.get_loss", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.step", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.get_lr"], ["", "", "def", "train_one_epoch", "(", "data_loader", ",", "model", ",", "optimizer", ",", "lfs", ",", "cur_epoch", ",", "device_id", ",", "print_freq", ",", "saved_freq", ",", "saved_dir", ")", ":", "\n", "# switch to train mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "db_size", "=", "len", "(", "data_loader", ")", "\n", "my_rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "start_iters", "=", "cur_epoch", "*", "db_size", "\n", "for", "batch_idx", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "image", "=", "image", ".", "cuda", "(", "device_id", ")", "\n", "label", "=", "label", ".", "cuda", "(", "device_id", ")", "\n", "pred", "=", "model", "(", "image", ",", "label", ")", "\n", "\n", "logits", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "loss", "=", "lfs", ".", "get_loss", "(", "logits", ",", "label", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "cur_iters", "=", "start_iters", "+", "batch_idx", "\n", "if", "cur_iters", "%", "print_freq", "==", "0", ":", "\n", "            ", "loss_val", "=", "loss", ".", "item", "(", ")", "\n", "lr", "=", "get_lr", "(", "optimizer", ")", "\n", "logger", ".", "info", "(", "'rank %d, epoch %d, iter %d, lr %f, loss %f'", "%", "(", "my_rank", ",", "cur_epoch", ",", "batch_idx", ",", "lr", ",", "loss_val", ")", ")", "\n", "\n", "", "if", "my_rank", "==", "0", "and", "cur_iters", "%", "saved_freq", "==", "0", ":", "\n", "            ", "saved_name", "=", "'epoch_%d_batch_%d.pt'", "%", "(", "cur_epoch", ",", "batch_idx", ")", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "module", ".", "feat_net", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "saved_dir", ",", "saved_name", ")", ")", "\n", "logger", ".", "info", "(", "'save checkpoint %s to disk...'", "%", "saved_name", ")", "\n", "", "", "if", "my_rank", "==", "0", ":", "\n", "        ", "saved_name", "=", "'epoch_%d.pt'", "%", "cur_epoch", "\n", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "module", ".", "feat_net", ".", "state_dict", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "saved_dir", ",", "saved_name", ")", ")", "\n", "logger", ".", "info", "(", "'save checkpoint %s to disk...'", "%", "saved_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.train": [[71, 102], ["main.FaceNet", "list", "torch.device", "torch.device", "torch.device", "torch.nn.DataParallel().to", "torch.nn.DataParallel().to", "torch.nn.DataParallel().to", "torch.optim.SGD", "torch.get_rank", "torch.optim.lr_scheduler.MultiStepLR", "lmdb_utils.LMDBDataset", "lmdb_utils.LMDBDistributeSampler", "torch.utils.data.DataLoader", "lfs_core.loss_func_search.LossFuncSearch", "lfs_core.loss_func_search.LossFuncSearch.set_model", "range", "lmdb_utils.LMDBDataset.close", "range", "torch.nn.DataParallel().to.parameters", "optim.lr_scheduler.MultiStepLR.step", "lfs_core.loss_func_search.LossFuncSearch.set_loss_parameters", "main.train_one_epoch", "lmdb_utils.LMDBDistributeSampler.set_epoch", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "validate_lfw.validate", "logging.info", "lfs_core.loss_func_search.LossFuncSearch.update_lfs"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.set_model", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_dataset.LMDBDataset.close", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.step", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.set_loss_parameters", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.train_one_epoch", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_sampler.LMDBDistributeSampler.set_epoch", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.validate", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.update_lfs"], ["", "", "def", "train", "(", "conf", ")", ":", "\n", "    ", "model", "=", "FaceNet", "(", "conf", ".", "net_type", ",", "conf", ".", "feat_dim", ",", "conf", ".", "num_class", ")", "\n", "\n", "start_device_id", "=", "conf", ".", "device", "*", "conf", ".", "num_gpus_per_rank", "\n", "end_device_id", "=", "(", "conf", ".", "device", "+", "1", ")", "*", "conf", ".", "num_gpus_per_rank", "\n", "device_list", "=", "list", "(", "range", "(", "start_device_id", ",", "end_device_id", ")", ")", "\n", "output_device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "device_list", "[", "0", "]", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_list", ",", "device_list", "[", "0", "]", ")", ".", "to", "(", "output_device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "conf", ".", "lr", ",", "momentum", "=", "conf", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "my_rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "lr_schedule", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "conf", ".", "milestones", ",", "gamma", "=", "0.1", ")", "\n", "db", "=", "LMDBDataset", "(", "conf", ".", "source_lmdb_list", ",", "conf", ".", "source_file_list", ")", "\n", "lmdb_sampler", "=", "LMDBDistributeSampler", "(", "db", ",", "my_rank", ")", "\n", "data_loader", "=", "DataLoader", "(", "db", ",", "conf", ".", "batch_size", ",", "sampler", "=", "lmdb_sampler", ",", "num_workers", "=", "4", ")", "\n", "\n", "# create LFS", "\n", "lfs", "=", "LossFuncSearch", "(", "conf", ".", "scale", ",", "True", "if", "conf", ".", "do_search", "==", "1", "else", "False", ")", "\n", "lfs", ".", "set_model", "(", "model", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "conf", ".", "epochs", ")", ":", "\n", "        ", "lr_schedule", ".", "step", "(", ")", "\n", "lfs", ".", "set_loss_parameters", "(", "epoch", ")", "\n", "train_one_epoch", "(", "data_loader", ",", "model", ",", "optimizer", ",", "lfs", ",", "epoch", ",", "device_list", "[", "0", "]", ",", "conf", ".", "print_freq", ",", "conf", ".", "saved_freq", ",", "conf", ".", "saved_dir", ")", "\n", "lmdb_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "if", "epoch", "!=", "0", "and", "(", "epoch", "+", "1", ")", "%", "conf", ".", "val_freq", "==", "0", "and", "(", "epoch", "+", "1", ")", ">=", "3", ":", "\n", "            ", "reward", "=", "validate", "(", "model", ".", "feat_net", ",", "conf", ".", "test_pairs", ",", "conf", ".", "test_data_loader", ",", "output_device", ")", "\n", "logger", ".", "info", "(", "'rank: %d, acc = %f'", "%", "(", "my_rank", ",", "reward", ")", ")", "\n", "if", "conf", ".", "do_search", "==", "1", ":", "\n", "                ", "lfs", ".", "update_lfs", "(", "reward", ")", "\n", "", "", "", "db", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.main": [[104, 154], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.init_process_group", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "validate_lfw.prepare_validate_data", "torch.get_rank", "main.train", "logging.info", "torch.destroy_process_group", "int", "max", "conf.parse_args.step.split", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.validate_lfw.prepare_validate_data", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.None.main.train"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "conf", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Loss Function Search for Face Recognition.'", ")", "\n", "conf", ".", "add_argument", "(", "'ip'", ",", "type", "=", "str", ",", ")", "\n", "conf", ".", "add_argument", "(", "'port'", ",", "type", "=", "int", ")", "\n", "conf", ".", "add_argument", "(", "'rank'", ",", "type", "=", "int", ")", "\n", "conf", ".", "add_argument", "(", "'world_size'", ",", "type", "=", "int", ")", "\n", "conf", ".", "add_argument", "(", "'source_lmdb_list'", ",", "type", "=", "str", ",", "help", "=", "'comma separated training dataset'", ")", "\n", "conf", ".", "add_argument", "(", "'source_file_list'", ",", "type", "=", "str", ",", "help", "=", "'comma separated training kv text file, echo line contains '", "\n", "'lmdb_key label, it is space separated.'", ")", "\n", "conf", ".", "add_argument", "(", "\"--saved_dir\"", ",", "type", "=", "str", ",", "default", "=", "'snapshot'", ",", "help", "=", "'where to save the snapshot'", ")", "\n", "conf", ".", "add_argument", "(", "'--val_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'when trained on margin-based.'", ")", "\n", "conf", ".", "add_argument", "(", "'--num_class'", ",", "type", "=", "int", ",", "default", "=", "9809", ",", "help", "=", "'number of categories'", ")", "\n", "conf", ".", "add_argument", "(", "'--net_type'", ",", "type", "=", "str", ",", "default", "=", "'mobile'", ",", "choices", "=", "[", "'mobile'", ",", "'r50'", ",", "'r101'", "]", ")", "\n", "conf", ".", "add_argument", "(", "'--feat_dim'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'feature dimension.'", ")", "\n", "conf", ".", "add_argument", "(", "'--scale'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'loss function search scale parameters.'", ")", "\n", "conf", ".", "add_argument", "(", "'--search_type'", ",", "type", "=", "str", ",", "default", "=", "'global'", ",", "choices", "=", "[", "'global'", ",", "'local'", "]", ")", "\n", "conf", ".", "add_argument", "(", "'--do_search'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'if 1, do loss search otherwise perform random softmax'", ")", "\n", "conf", ".", "add_argument", "(", "'--step'", ",", "type", "=", "str", ",", "default", "=", "'4,8,10'", ",", "\n", "help", "=", "'similar to step specified in caffe solver, but in epoch mechanism'", ")", "\n", "conf", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'how many epochs you want to train.'", ")", "\n", "conf", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'frequency of displaying current training state.'", ")", "\n", "conf", ".", "add_argument", "(", "'--saved_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'how often should we save the checkpoint.'", ")", "\n", "conf", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "conf", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'batch size over all gpus per rank.'", ")", "\n", "\n", "conf", ".", "add_argument", "(", "'--backend'", ",", "type", "=", "str", ",", "default", "=", "'nccl'", ",", "choices", "=", "[", "'nccl'", ",", "'gloo'", "]", ")", "\n", "conf", ".", "add_argument", "(", "'--num_gpus_per_rank'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"#gpus each rank will use to train the model.\"", ")", "\n", "conf", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'initial learning rate.'", ")", "\n", "args", "=", "conf", ".", "parse_args", "(", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "backend", ",", "init_method", "=", "\"tcp://%s:%d\"", "%", "(", "args", ".", "ip", ",", "args", ".", "port", ")", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "args", ".", "milestones", "=", "[", "int", "(", "p", ")", "for", "p", "in", "args", ".", "step", ".", "split", "(", "','", ")", "]", "\n", "num_gpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "num_gpus_per_rank", ">=", "num_gpus_per_node", ":", "\n", "        ", "args", ".", "num_gpus_per_rank", "=", "max", "(", "1", ",", "num_gpus_per_node", ")", "\n", "\n", "", "test_pairs", ",", "test_data_loader", "=", "prepare_validate_data", "(", ")", "\n", "args", ".", "test_pairs", "=", "test_pairs", "\n", "args", ".", "test_data_loader", "=", "test_data_loader", "\n", "args", ".", "num_gpus_per_node", "=", "num_gpus_per_node", "\n", "assert", "args", ".", "world_size", "*", "args", ".", "num_gpus_per_rank", "%", "args", ".", "num_gpus_per_node", "==", "0", "\n", "node_id", "=", "args", ".", "rank", "*", "args", ".", "num_gpus_per_rank", "//", "num_gpus_per_node", "\n", "args", ".", "device", "=", "(", "args", ".", "rank", "*", "args", ".", "num_gpus_per_rank", "-", "node_id", "*", "args", ".", "num_gpus_per_node", ")", "//", "args", ".", "num_gpus_per_rank", "\n", "my_rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "if", "my_rank", "==", "0", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "saved_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "saved_dir", ")", "\n", "", "", "train", "(", "args", ")", "\n", "logger", ".", "info", "(", "'Optimization done!'", ")", "\n", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.fc.fc_layers.FC.__init__": [[8, 35], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "fc_layers.FC.weight.data.uniform_().renorm_().mul_", "math.cos", "math.sin", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "fc_layers.FC.weight.data.uniform_().renorm_", "fc_layers.FC.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fc_type", "=", "'MV-AM'", ",", "margin", "=", "0.35", ",", "t", "=", "0.2", ",", "scale", "=", "32", ",", "embedding_size", "=", "512", ",", "num_class", "=", "72690", ",", "\n", "easy_margin", "=", "True", ")", ":", "\n", "        ", "super", "(", "FC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "embedding_size", ",", "num_class", ")", ")", "\n", "# initial kernel", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "easy_margin", "=", "easy_margin", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "fc_type", "=", "fc_type", "\n", "self", ".", "cos_m", "=", "math", ".", "cos", "(", "margin", ")", "\n", "self", ".", "sin_m", "=", "math", ".", "sin", "(", "margin", ")", "\n", "\n", "# duplication formula", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "base", "=", "1000", "\n", "self", ".", "alpha", "=", "0.0001", "\n", "self", ".", "power", "=", "2", "\n", "self", ".", "lambda_min", "=", "5.0", "\n", "self", ".", "margin_formula", "=", "[", "\n", "lambda", "x", ":", "x", "**", "0", ",", "\n", "lambda", "x", ":", "x", "**", "1", ",", "\n", "lambda", "x", ":", "2", "*", "x", "**", "2", "-", "1", ",", "\n", "lambda", "x", ":", "4", "*", "x", "**", "3", "-", "3", "*", "x", ",", "\n", "lambda", "x", ":", "8", "*", "x", "**", "4", "-", "8", "*", "x", "**", "2", "+", "1", ",", "\n", "lambda", "x", ":", "16", "*", "x", "**", "5", "-", "20", "*", "x", "**", "3", "+", "5", "*", "x", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.fc.fc_layers.FC.forward": [[37, 94], ["torch.normalize", "torch.normalize", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "label.size", "cos_theta[].view", "torch.mm.scatter_", "torch.mm.scatter_", "label.data.view", "max", "cos_theta[].view.data.acos", "torch.where", "torch.where", "torch.where", "torch.where", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "int", "torch.where", "torch.where", "torch.where", "torch.where", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.where", "torch.where", "torch.where", "torch.where", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "Exception", "torch.where", "torch.where", "torch.where", "torch.where", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "# x (M, K), w(K, N), y = xw (M, N), note both x and w are already l2 normalized.", "\n", "        ", "kernel_norm", "=", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", "\n", "cos_theta", "=", "torch", ".", "mm", "(", "x", ",", "kernel_norm", ")", "\n", "\n", "batch_size", "=", "label", ".", "size", "(", "0", ")", "\n", "gt", "=", "cos_theta", "[", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", ",", "label", "]", ".", "view", "(", "-", "1", ",", "1", ")", "# ground truth score", "\n", "\n", "if", "self", ".", "fc_type", "==", "'FC'", ":", "\n", "            ", "final_gt", "=", "gt", "\n", "", "elif", "self", ".", "fc_type", "==", "'SphereFace'", ":", "\n", "            ", "self", ".", "iter", "+=", "1", "\n", "self", ".", "cur_lambda", "=", "max", "(", "self", ".", "lambda_min", ",", "self", ".", "base", "*", "(", "1", "+", "self", ".", "alpha", "*", "self", ".", "iter", ")", "**", "(", "-", "1", "*", "self", ".", "power", ")", ")", "\n", "cos_theta_m", "=", "self", ".", "margin_formula", "[", "int", "(", "self", ".", "margin", ")", "]", "(", "gt", ")", "# cos(margin * gt)", "\n", "theta", "=", "gt", ".", "data", ".", "acos", "(", ")", "\n", "k", "=", "(", "(", "self", ".", "margin", "*", "theta", ")", "/", "math", ".", "pi", ")", ".", "floor", "(", ")", "\n", "phi_theta", "=", "(", "(", "-", "1.0", ")", "**", "k", ")", "*", "cos_theta_m", "-", "2", "*", "k", "\n", "final_gt", "=", "(", "self", ".", "cur_lambda", "*", "gt", "+", "phi_theta", ")", "/", "(", "1", "+", "self", ".", "cur_lambda", ")", "\n", "", "elif", "self", ".", "fc_type", "==", "'AM'", ":", "# cosface", "\n", "            ", "if", "self", ".", "easy_margin", ":", "\n", "                ", "final_gt", "=", "torch", ".", "where", "(", "gt", ">", "0", ",", "gt", "-", "self", ".", "margin", ",", "gt", ")", "\n", "", "else", ":", "\n", "                ", "final_gt", "=", "gt", "-", "self", ".", "margin", "\n", "", "", "elif", "self", ".", "fc_type", "==", "'Arc'", ":", "# arcface", "\n", "            ", "sin_theta", "=", "torch", ".", "sqrt", "(", "1.0", "-", "torch", ".", "pow", "(", "gt", ",", "2", ")", ")", "\n", "cos_theta_m", "=", "gt", "*", "self", ".", "cos_m", "-", "sin_theta", "*", "self", ".", "sin_m", "# cos(gt + margin)", "\n", "if", "self", ".", "easy_margin", ":", "\n", "                ", "final_gt", "=", "torch", ".", "where", "(", "gt", ">", "0", ",", "cos_theta_m", ",", "gt", ")", "\n", "", "else", ":", "\n", "                ", "final_gt", "=", "cos_theta_m", "\n", "", "", "elif", "self", ".", "fc_type", "==", "'MV-AM'", ":", "\n", "            ", "mask", "=", "cos_theta", ">", "gt", "-", "self", ".", "margin", "\n", "hard_vector", "=", "cos_theta", "[", "mask", "]", "\n", "cos_theta", "[", "mask", "]", "=", "(", "self", ".", "t", "+", "1.0", ")", "*", "hard_vector", "+", "self", ".", "t", "# adaptive", "\n", "# cos_theta[mask] = hard_vector + self.t  #fixed", "\n", "if", "self", ".", "easy_margin", ":", "\n", "                ", "final_gt", "=", "torch", ".", "where", "(", "gt", ">", "0", ",", "gt", "-", "self", ".", "margin", ",", "gt", ")", "\n", "", "else", ":", "\n", "                ", "final_gt", "=", "gt", "-", "self", ".", "margin", "\n", "", "", "elif", "self", ".", "fc_type", "==", "'MV-Arc'", ":", "\n", "            ", "sin_theta", "=", "torch", ".", "sqrt", "(", "1.0", "-", "torch", ".", "pow", "(", "gt", ",", "2", ")", ")", "\n", "cos_theta_m", "=", "gt", "*", "self", ".", "cos_m", "-", "sin_theta", "*", "self", ".", "sin_m", "# cos(gt + margin)", "\n", "\n", "mask", "=", "cos_theta", ">", "cos_theta_m", "\n", "hard_vector", "=", "cos_theta", "[", "mask", "]", "\n", "cos_theta", "[", "mask", "]", "=", "(", "self", ".", "t", "+", "1.0", ")", "*", "hard_vector", "+", "self", ".", "t", "# adaptive", "\n", "# cos_theta[mask] = hard_vector + self.t #fixed", "\n", "if", "self", ".", "easy_margin", ":", "\n", "                ", "final_gt", "=", "torch", ".", "where", "(", "gt", ">", "0", ",", "cos_theta_m", ",", "gt", ")", "\n", "", "else", ":", "\n", "                ", "final_gt", "=", "cos_theta_m", "\n", "# final_gt = torch.where(gt > cos_theta_m, cos_theta_m, gt)", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown fc type!'", ")", "\n", "\n", "", "cos_theta", ".", "scatter_", "(", "1", ",", "label", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "final_gt", ")", "\n", "cos_theta", "*=", "self", ".", "scale", "\n", "return", "cos_theta", "", "", "", ""]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.broadcast_params": [[5, 9], ["model.state_dict().items", "torch.barrier", "torch.broadcast", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.broadcast"], ["def", "broadcast_params", "(", "model", ",", "rank", ")", ":", "\n", "    ", "for", "_", ",", "item", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "item", ",", "rank", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.all_gather": [[11, 15], ["torch.all_gather", "torch.stack", "torch.stack", "torch.ones_like", "torch.ones_like", "range", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.all_gather"], ["", "def", "all_gather", "(", "tensor", ")", ":", "\n", "    ", "res", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "res", ",", "tensor", ")", "\n", "return", "torch", ".", "stack", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.all_reduce": [[17, 21], ["torch.all_reduce", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.all_reduce"], ["", "def", "all_reduce", "(", "tensor", ")", ":", "\n", "    ", "dist", ".", "all_reduce", "(", "tensor", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "tensor", ".", "data", "/=", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.broadcast": [[23, 25], ["torch.broadcast"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.broadcast"], ["", "def", "broadcast", "(", "tensor", ",", "rank", "=", "0", ")", ":", "\n", "    ", "dist", ".", "broadcast", "(", "tensor", ",", "rank", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.__init__": [[9, 22], ["torch.get_rank", "torch.get_rank", "loss_func_search.LossFuncSearch.__init_agent"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.__init_agent"], ["    ", "def", "__init__", "(", "self", ",", "sm", "=", "32", ",", "do_search", "=", "True", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "\n", "self", ".", "lr", "=", "0.05", "\n", "self", ".", "sample_step", "=", "2", "\n", "self", ".", "val_freq", "=", "2", "\n", "self", ".", "scale", "=", "0.2", "\n", "self", ".", "global_rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "self", ".", "best_acc", "=", "0", "\n", "self", ".", "best_epoch", "=", "-", "1", "\n", "self", ".", "sm", "=", "sm", "\n", "self", ".", "__init_agent", "(", ")", "\n", "self", ".", "do_search", "=", "do_search", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.__init_agent": [[23, 27], ["lfs_core.utils.loss_agent.LFSAgent", "range"], "methods", ["None"], ["", "def", "__init_agent", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent", "=", "LFSAgent", "(", "self", ".", "lr", ",", "self", ".", "scale", ")", "\n", "self", ".", "p", "=", "[", "i", "/", "10.0", "for", "i", "in", "range", "(", "11", ")", "]", "\n", "self", ".", "a", "=", "[", "-", "1.0", "]", "+", "[", "0.0", ",", "]", "*", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.set_model": [[28, 30], ["None"], "methods", ["None"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.get_loss": [[31, 37], ["lfs_core.utils.loss.loss_search", "lfs_core.utils.loss.loss_random"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss.loss_search", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss.loss_random"], ["", "def", "get_loss", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "do_search", ":", "\n", "            ", "loss", "=", "loss_search", "(", "outputs", ",", "targets", ",", "self", ".", "p", ",", "self", ".", "a", ",", "self", ".", "sm", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss_random", "(", "outputs", ",", "targets", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.set_loss_parameters": [[38, 41], ["loss_func_search.LossFuncSearch.agent.sample_subfunction"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.sample_subfunction"], ["", "def", "set_loss_parameters", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">=", "2", ":", "\n", "            ", "self", ".", "p", ",", "self", ".", "a", "=", "self", ".", "agent", ".", "sample_subfunction", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch._broadcast_parameters": [[42, 47], ["lfs_core.broadcast_params"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.broadcast_params"], ["", "", "def", "_broadcast_parameters", "(", "self", ",", "rank", ")", ":", "\n", "        ", "\"\"\"\n        broadcast model parameters \n        \"\"\"", "\n", "link", ".", "broadcast_params", "(", "self", ".", "model", ",", "rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch.update_lfs": [[48, 63], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "lfs_core.all_gather", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "test_acc_tensor[].item", "loss_func_search.LossFuncSearch._broadcast_parameters", "loss_func_search.LossFuncSearch.agent.step", "torch.argmax.item", "torch.argmax.item", "reward[].item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.all_gather", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.loss_func_search.LossFuncSearch._broadcast_parameters", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.step"], ["", "def", "update_lfs", "(", "self", ",", "reward", ")", ":", "\n", "        ", "rank", "=", "self", ".", "global_rank", "\n", "temp_acc", "=", "torch", ".", "tensor", "(", "reward", ")", "\n", "\n", "test_acc_tensor", "=", "link", ".", "all_gather", "(", "temp_acc", ")", "\n", "best_test_acc_rank", "=", "torch", ".", "argmax", "(", "test_acc_tensor", ")", "\n", "current_best_acc", "=", "test_acc_tensor", "[", "best_test_acc_rank", "]", ".", "item", "(", ")", "\n", "\n", "self", ".", "_broadcast_parameters", "(", "rank", "=", "best_test_acc_rank", ".", "item", "(", ")", ")", "\n", "\n", "reward", "=", "(", "test_acc_tensor", "-", "torch", ".", "mean", "(", "test_acc_tensor", ")", ")", "/", "(", "(", "torch", ".", "max", "(", "test_acc_tensor", ")", "-", "torch", ".", "min", "(", "test_acc_tensor", ")", ")", "+", "1e-6", ")", "*", "2", "\n", "\n", "self", ".", "agent", ".", "step", "(", "reward", "=", "reward", "[", "rank", "]", ".", "item", "(", ")", ")", "\n", "\n", "return", "current_best_acc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss.my_loss": [[6, 29], ["range", "Exception", "range", "math.exp", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.exp", "len", "x[].item", "math.exp", "math.exp"], "function", ["None"], ["def", "my_loss", "(", "x", ",", "lb", ",", "p_bins", ",", "a", ",", "sm", ",", "search_type", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "new_x", "=", "1.0", "*", "x", "\n", "if", "search_type", "==", "'global'", ":", "\n", "        ", "if", "a", "[", "0", "]", "<=", "0", ":", "\n", "            ", "b", "=", "1.0", "-", "a", "[", "0", "]", "*", "math", ".", "exp", "(", "sm", "/", "3", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "1.0", "\n", "", "gt", "=", "x", "[", "torch", ".", "arange", "(", "batch_size", ")", ",", "lb", "]", "\n", "new_x", "[", "torch", ".", "arange", "(", "batch_size", ")", ",", "lb", "]", "=", "gt", "/", "(", "a", "[", "0", "]", "*", "math", ".", "exp", "(", "sm", "/", "3", ")", "*", "gt", "+", "b", ")", "\n", "", "elif", "search_type", "==", "'local'", ":", "\n", "        ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "p_bins", ")", "-", "1", ")", ":", "\n", "                ", "if", "x", "[", "i", ",", "lb", "[", "i", "]", "]", ".", "item", "(", ")", "<=", "p_bins", "[", "j", "+", "1", "]", ":", "\n", "                    ", "if", "a", "[", "j", "]", "<=", "0", ":", "\n", "                        ", "b", "=", "1.0", "-", "a", "[", "j", "]", "*", "math", ".", "exp", "(", "sm", "/", "2", ")", "\n", "", "else", ":", "\n", "                        ", "b", "=", "1.0", "\n", "", "new_x", "[", "i", ",", "lb", "[", "i", "]", "]", "=", "x", "[", "i", ",", "lb", "[", "i", "]", "]", "/", "(", "a", "[", "j", "]", "*", "math", ".", "exp", "(", "sm", "/", "2", ")", "*", "x", "[", "i", ",", "lb", "[", "i", "]", "]", "+", "b", ")", "\n", "break", "\n", "", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown search type!'", ")", "\n", "", "return", "new_x", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss.loss_search": [[31, 39], ["targets.view", "loss.my_loss", "torch.nll_loss", "lb.cpu.cpu", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss.my_loss"], ["", "def", "loss_search", "(", "outputs", ",", "targets", ",", "p_bins", ",", "a", ",", "sm", ",", "search_type", "=", "'global'", ")", ":", "\n", "# assume outputs is already pass through softmax", "\n", "    ", "lb", "=", "targets", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "if", "lb", ".", "is_cuda", ":", "\n", "        ", "lb", "=", "lb", ".", "cpu", "(", ")", "\n", "", "outputs", "=", "my_loss", "(", "outputs", ",", "lb", ",", "p_bins", ",", "a", ",", "sm", ",", "search_type", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "torch", ".", "log", "(", "outputs", ")", ",", "targets", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss.loss_random": [[40, 46], ["torch.softmax", "torch.log", "torch.log", "torch.nll_loss"], "function", ["None"], ["", "def", "loss_random", "(", "pred", ",", "label", ",", "a", ")", ":", "\n", "    ", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "prob_margin", "=", "prob", "/", "(", "a", "*", "prob", "+", "1", "-", "a", ")", "\n", "pred_log", "=", "torch", ".", "log", "(", "prob_margin", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "pred_log", ",", "label", ")", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.__init__": [[6, 15], ["torch.nn.Parameter", "torch.Tensor", "torch.optim.Adam", "torch.nn.ReLU", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lr", "=", "1e-4", ",", "scale", "=", "0.1", ")", ":", "\n", "\n", "        ", "self", ".", "counter", "=", "0", "\n", "self", ".", "log_prob", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "gaussian_param_loc", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.0", ",", "]", "*", "10", ")", ")", "\n", "self", ".", "gaussian_scale", "=", "torch", ".", "Tensor", "(", "[", "scale", ",", "]", "*", "10", ")", "\n", "self", ".", "gaussian_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "self", ".", "gaussian_param_loc", "]", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "0.0", ")", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.sample_subfunction": [[16, 19], ["loss_agent.LFSAgent.gaussian_sample_subfunction"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.gaussian_sample_subfunction"], ["", "def", "sample_subfunction", "(", "self", ")", ":", "\n", "        ", "p", ",", "a", "=", "self", ".", "gaussian_sample_subfunction", "(", ")", "\n", "return", "p", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.step": [[20, 22], ["loss_agent.LFSAgent.gaussian_step"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.gaussian_step"], ["", "def", "step", "(", "self", ",", "reward", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "gaussian_step", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.gaussian_sample_subfunction": [[23, 37], ["range", "range", "loss_agent.LFSAgent.actions.append", "torch.distributions.normal.Normal", "m.append", "m[].sample().item", "a.append", "torch.tensor", "range", "loss_agent.LFSAgent.relu", "torch.distributions.normal.Normal", "abs", "m[].sample"], "methods", ["None"], ["", "def", "gaussian_sample_subfunction", "(", "self", ")", ":", "\n", "        ", "p", "=", "[", "i", "/", "10.0", "for", "i", "in", "range", "(", "11", ")", "]", "\n", "a", "=", "[", "]", "\n", "m", "=", "[", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "self", ".", "relu", "(", "self", ".", "gaussian_param_loc", "[", "0", "]", ")", ",", "self", ".", "gaussian_scale", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "m", ".", "append", "(", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "self", ".", "gaussian_param_loc", "[", "i", "]", ",", "self", ".", "gaussian_scale", "[", "i", "]", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "x", "=", "m", "[", "i", "]", ".", "sample", "(", ")", ".", "item", "(", ")", "\n", "x", "=", "-", "abs", "(", "x", ")", "\n", "a", ".", "append", "(", "x", ")", "\n", "", "self", ".", "actions", ".", "append", "(", "torch", ".", "tensor", "(", "a", ")", ")", "\n", "\n", "return", "p", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.add_multi_gaussian_log_prob": [[38, 52], ["loss_agent.LFSAgent.gaussian_param_loc.cuda", "loss_agent.LFSAgent.gaussian_scale.cuda", "torch.stack().cuda", "range", "range", "torch.distributions.normal.Normal", "m.append", "loss_agent.LFSAgent.log_prob.append", "torch.stack", "loss_agent.LFSAgent.relu", "torch.distributions.normal.Normal", "torch.sum", "m[].log_prob"], "methods", ["None"], ["", "def", "add_multi_gaussian_log_prob", "(", "self", ",", "actions", ")", ":", "\n", "# IMPORTANT: the main function for the agent in the main process compute log probability of act1 and act2", "\n", "# if cuda:", "\n", "        ", "self", ".", "gaussian_loc_param_cuda", "=", "self", ".", "gaussian_param_loc", ".", "cuda", "(", ")", "\n", "self", ".", "gaussian_scale_cuda", "=", "self", ".", "gaussian_scale", ".", "cuda", "(", ")", "\n", "\n", "actions_", "=", "torch", ".", "stack", "(", "actions", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "m", "=", "[", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "self", ".", "relu", "(", "self", ".", "gaussian_loc_param_cuda", "[", "0", "]", ")", ",", "self", ".", "gaussian_scale_cuda", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "m", ".", "append", "(", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "self", ".", "gaussian_loc_param_cuda", "[", "i", "]", ",", "self", ".", "gaussian_scale_cuda", "[", "i", "]", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "log_prob", ".", "append", "(", "torch", ".", "sum", "(", "m", "[", "i", "]", ".", "log_prob", "(", "actions_", "[", "i", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.scale_step": [[53, 56], ["torch.Tensor"], "methods", ["None"], ["", "", "def", "scale_step", "(", "self", ",", "epoch", ",", "tot_epoch", "=", "1000", ",", "start_scale", "=", "0.1", ",", "final_scale", "=", "0.01", ")", ":", "\n", "        ", "temp_scale", "=", "start_scale", "+", "(", "final_scale", "-", "start_scale", ")", "*", "(", "epoch", "/", "tot_epoch", ")", "\n", "self", ".", "gaussian_scale", "=", "torch", ".", "Tensor", "(", "[", "temp_scale", ",", "]", "*", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.gaussian_step": [[57, 78], ["loss_agent.LFSAgent.gaussian_optimizer.zero_grad", "loss_agent.LFSAgent.add_multi_gaussian_log_prob", "loss.backward", "loss_agent.LFSAgent.gaussian_optimizer.step", "lfs_core.broadcast", "torch.sum", "lfs_core.all_reduce", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.add_multi_gaussian_log_prob", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.utils.loss_agent.LFSAgent.step", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.broadcast", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lfs_core.link_utils.all_reduce"], ["", "def", "gaussian_step", "(", "self", ",", "reward", "=", "0.0", ")", ":", "\n", "\n", "        ", "self", ".", "gaussian_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "add_multi_gaussian_log_prob", "(", "self", ".", "actions", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "self", ".", "log_prob", ",", "dim", "=", "-", "1", ")", ")", "*", "reward", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "\n", "for", "param", "in", "[", "self", ".", "gaussian_param_loc", ",", "]", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "link", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ")", "\n", "\n", "", "", "self", ".", "gaussian_optimizer", ".", "step", "(", ")", "\n", "\n", "# broadcast gradients", "\n", "for", "param", "in", "[", "self", ".", "gaussian_param_loc", "]", ":", "\n", "            ", "link", ".", "broadcast", "(", "param", ",", "0", ")", "\n", "\n", "# # reset", "\n", "", "del", "self", ".", "actions", "[", ":", "]", "\n", "del", "self", ".", "log_prob", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_sampler.LMDBDistributeSampler.__init__": [[25, 36], ["len", "torch.is_available", "torch.is_available", "RuntimeError", "torch.get_rank", "torch.get_rank", "torch.is_available", "torch.is_available", "RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "len", "(", "dataset", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_sampler.LMDBDistributeSampler.__iter__": [[37, 47], ["torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "iter", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "list", "len", "range", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "list", "(", "range", "(", "self", ".", "num_samples", ")", ")", "\n", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_sampler.LMDBDistributeSampler.__len__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_sampler.LMDBDistributeSampler.set_epoch": [[51, 53], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_dataset.LMDBDataset.__init__": [[11, 37], ["enumerate", "isinstance", "isinstance", "isinstance", "isinstance", "len", "len", "len", "lmdb_dataset.LMDBDataset.envs.append", "lmdb_dataset.LMDBDataset.txns.append", "lmdb.open", "lmdb_dataset.LMDBDataset.envs[].begin", "open", "line.rstrip().lstrip", "len", "line.rstrip().lstrip.split", "lmdb_dataset.LMDBDataset.train_list.append", "max", "line.rstrip", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source_lmdbs", ",", "source_files", ")", ":", "\n", "        ", "assert", "isinstance", "(", "source_files", ",", "list", ")", "or", "isinstance", "(", "source_files", ",", "tuple", ")", "\n", "assert", "isinstance", "(", "source_lmdbs", ",", "list", ")", "or", "isinstance", "(", "source_lmdbs", ",", "tuple", ")", "\n", "assert", "len", "(", "source_lmdbs", ")", "==", "len", "(", "source_files", ")", "\n", "assert", "len", "(", "source_files", ")", ">", "0", "\n", "\n", "self", ".", "envs", "=", "[", "]", "\n", "self", ".", "txns", "=", "[", "]", "\n", "for", "lmdb_path", "in", "source_lmdbs", ":", "\n", "            ", "self", ".", "envs", ".", "append", "(", "lmdb", ".", "open", "(", "lmdb_path", ",", "max_readers", "=", "4", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "meminit", "=", "False", ")", ")", "\n", "self", ".", "txns", ".", "append", "(", "self", ".", "envs", "[", "-", "1", "]", ".", "begin", "(", "write", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "train_list", "=", "[", "]", "\n", "\n", "last_label", "=", "0", "\n", "max_label", "=", "-", "1", "\n", "for", "db_id", ",", "lmdb_train_file", "in", "enumerate", "(", "source_files", ")", ":", "\n", "            ", "with", "open", "(", "lmdb_train_file", ",", "'r'", ")", "as", "infile", ":", "\n", "                ", "for", "line", "in", "infile", ":", "\n", "                    ", "l", "=", "line", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "\n", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                        ", "lmdb_key", ",", "label", "=", "l", ".", "split", "(", "' '", ")", "\n", "self", ".", "train_list", ".", "append", "(", "[", "lmdb_key", ",", "int", "(", "label", ")", "+", "last_label", ",", "db_id", "]", ")", "\n", "max_label", "=", "max", "(", "max_label", ",", "int", "(", "label", ")", "+", "last_label", ")", "\n", "", "", "", "max_label", "+=", "1", "\n", "last_label", "=", "max_label", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_dataset.LMDBDataset.close": [[39, 44], ["range", "range", "len", "lmdb_dataset.LMDBDataset.txns[].abort", "len", "lmdb_dataset.LMDBDataset.envs[].close"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_dataset.LMDBDataset.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "txns", ")", ")", ":", "\n", "            ", "self", ".", "txns", "[", "i", "]", ".", "abort", "(", ")", "\n", "", "for", "j", "in", "range", "(", "len", "(", "self", ".", "envs", ")", ")", ":", "\n", "            ", "self", ".", "envs", "[", "j", "]", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_dataset.LMDBDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.lmdb_utils.lmdb_dataset.LMDBDataset.__getitem__": [[48, 69], ["caffe_pb2.Datum", "lmdb_dataset.LMDBDataset.txns[].get", "caffe_pb2.Datum.ParseFromString", "cv2.imdecode", "lmdb_key.encode", "numpy.frombuffer", "random.random", "cv2.flip", "numpy.zeros", "numpy.transpose", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "lmdb_key", ",", "label", ",", "db_id", "=", "self", ".", "train_list", "[", "index", "]", "\n", "datum", "=", "Datum", "(", ")", "\n", "raw_byte_buffer", "=", "self", ".", "txns", "[", "db_id", "]", ".", "get", "(", "lmdb_key", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "datum", ".", "ParseFromString", "(", "raw_byte_buffer", ")", "\n", "cv_img", "=", "cv2", ".", "imdecode", "(", "np", ".", "frombuffer", "(", "datum", ".", "data", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "-", "1", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "cv_img", "=", "cv2", ".", "flip", "(", "cv_img", ",", "1", ")", "\n", "\n", "", "if", "cv_img", ".", "ndim", "==", "2", ":", "\n", "            ", "rows", "=", "cv_img", ".", "shape", "[", "0", "]", "\n", "cols", "=", "cv_img", ".", "shape", "[", "1", "]", "\n", "buf", "=", "np", ".", "zeros", "(", "(", "3", ",", "rows", ",", "cols", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "buf", "[", "0", "]", "=", "buf", "[", "1", "]", "=", "buf", "[", "2", "]", "=", "cv_img", "\n", "input_tensor", "=", "(", "torch", ".", "from_numpy", "(", "buf", ")", "-", "127.5", ")", "*", "0.0078125", "\n", "", "else", ":", "\n", "            ", "assert", "cv_img", ".", "ndim", "==", "3", "\n", "cv_img", "=", "np", ".", "transpose", "(", "cv_img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "input_tensor", "=", "(", "torch", ".", "from_numpy", "(", "cv_img", ")", "-", "127.5", ")", "*", "0.0078125", "\n", "\n", "", "return", "input_tensor", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.mobilefacenet.BottleNeck.__init__": [[27, 45], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expansion", ")", ":", "\n", "        ", "super", "(", "BottleNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "connect", "=", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# 1*1 conv", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", "*", "expansion", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", "*", "expansion", ")", ",", "\n", "nn", ".", "PReLU", "(", "inp", "*", "expansion", ")", ",", "\n", "\n", "# 3*3 depth wise conv", "\n", "nn", ".", "Conv2d", "(", "inp", "*", "expansion", ",", "inp", "*", "expansion", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", "*", "expansion", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", "*", "expansion", ")", ",", "\n", "nn", ".", "PReLU", "(", "inp", "*", "expansion", ")", ",", "\n", "\n", "# 1*1 conv", "\n", "nn", ".", "Conv2d", "(", "inp", "*", "expansion", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.mobilefacenet.BottleNeck.forward": [[47, 52], ["mobilefacenet.BottleNeck.conv", "mobilefacenet.BottleNeck.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.mobilefacenet.ConvBlock.__init__": [[55, 66], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "k", ",", "s", ",", "p", ",", "dw", "=", "False", ",", "linear", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "linear", "\n", "if", "dw", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "k", ",", "s", ",", "p", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "k", ",", "s", ",", "p", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "oup", ")", "\n", "if", "not", "linear", ":", "\n", "            ", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "oup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.mobilefacenet.ConvBlock.forward": [[67, 74], ["mobilefacenet.ConvBlock.conv", "mobilefacenet.ConvBlock.bn", "mobilefacenet.ConvBlock.prelu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "if", "self", ".", "linear", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "prelu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.mobilefacenet.MobileFaceNet.__init__": [[77, 99], ["torch.nn.Module.__init__", "mobilefacenet.ConvBlock", "mobilefacenet.ConvBlock", "mobilefacenet.MobileFaceNet._make_layer", "mobilefacenet.ConvBlock", "mobilefacenet.ConvBlock", "mobilefacenet.ConvBlock", "mobilefacenet.MobileFaceNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "feature_dim", "=", "512", ",", "bottleneck_setting", "=", "None", ")", ":", "\n", "        ", "super", "(", "MobileFaceNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "bottleneck_setting", "is", "None", ":", "\n", "            ", "bottleneck_setting", "=", "MobileFaceNet_BottleNeck_Setting", "\n", "", "self", ".", "conv1", "=", "ConvBlock", "(", "3", ",", "64", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "dw_conv1", "=", "ConvBlock", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "dw", "=", "True", ")", "\n", "\n", "self", ".", "cur_channel", "=", "64", "\n", "block", "=", "BottleNeck", "\n", "self", ".", "blocks", "=", "self", ".", "_make_layer", "(", "block", ",", "bottleneck_setting", ")", "\n", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "128", ",", "512", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "linear7", "=", "ConvBlock", "(", "512", ",", "512", ",", "7", ",", "1", ",", "0", ",", "dw", "=", "True", ",", "linear", "=", "True", ")", "\n", "self", ".", "linear1", "=", "ConvBlock", "(", "512", ",", "feature_dim", ",", "1", ",", "1", ",", "0", ",", "linear", "=", "True", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.mobilefacenet.MobileFaceNet._make_layer": [[100, 111], ["torch.nn.Sequential", "torch.nn.Sequential", "range", "layers.append", "layers.append", "block", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "setting", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "setting", ":", "\n", "            ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "layers", ".", "append", "(", "block", "(", "self", ".", "cur_channel", ",", "c", ",", "s", ",", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "layers", ".", "append", "(", "block", "(", "self", ".", "cur_channel", ",", "c", ",", "1", ",", "t", ")", ")", "\n", "", "self", ".", "cur_channel", "=", "c", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.mobilefacenet.MobileFaceNet.forward": [[112, 121], ["mobilefacenet.MobileFaceNet.conv1", "mobilefacenet.MobileFaceNet.dw_conv1", "mobilefacenet.MobileFaceNet.blocks", "mobilefacenet.MobileFaceNet.conv2", "mobilefacenet.MobileFaceNet.linear7", "mobilefacenet.MobileFaceNet.linear1", "x.view.view.view", "torch.normalize", "torch.normalize", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "dw_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "linear7", "(", "x", ")", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "F", ".", "normalize", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.BasicBlock.__init__": [[57, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.BasicBlock.forward": [[67, 83], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.Bottleneck.__init__": [[88, 99], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.Bottleneck.forward": [[100, 121], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.Flatten.forward": [[124, 126], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__": [[130, 163], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet.ResNet.modules", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "feature_dim", "=", "512", ",", "drop_ratio", "=", "0.4", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "output_layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "7", "*", "7", ",", "feature_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feature_dim", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet._make_layer": [[164, 179], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet.forward": [[180, 194], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.output_layer", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "\n", "return", "F", ".", "normalize", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet18": [[16, 19], ["resnet.ResNet"], "function", ["None"], ["def", "ResNet18", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet34": [[21, 24], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet50": [[26, 29], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet101": [[31, 34], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.ResNet152": [[36, 39], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.conv3x3": [[44, 47], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.resnet.conv1x1": [[49, 52], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tiandunx_loss_function_search.backbone.__init__.create_backbone": [[5, 10], ["Exception"], "function", ["None"], []]}