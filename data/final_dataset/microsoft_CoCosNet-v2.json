{"home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.trainers.pix2pix_trainer.Pix2PixTrainer.__init__": [[33, 60], ["models.pix2pix_model.Pix2PixModel", "GradScaler", "len", "torch.nn.DataParallel", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model.to", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.create_optimizers", "os.path.join", "torch.load", "pix2pix_trainer.Pix2PixTrainer.optimizer_G.load_state_dict", "pix2pix_trainer.Pix2PixTrainer.optimizer_D.load_state_dict", "print", "print"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.create_optimizers"], ["def", "__init__", "(", "self", ",", "opt", ",", "resume_epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "pix2pix_model", "=", "Pix2PixModel", "(", "opt", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "            ", "self", ".", "pix2pix_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "pix2pix_model", ",", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "pix2pix_model_on_one_gpu", "=", "self", ".", "pix2pix_model", ".", "module", "\n", "", "else", ":", "\n", "            ", "self", ".", "pix2pix_model", ".", "to", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "pix2pix_model_on_one_gpu", "=", "self", ".", "pix2pix_model", "\n", "", "self", ".", "generated", "=", "None", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "optimizer_G", ",", "self", ".", "optimizer_D", "=", "self", ".", "pix2pix_model_on_one_gpu", ".", "create_optimizers", "(", "opt", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "if", "opt", ".", "continue_train", "and", "opt", ".", "which_epoch", "==", "'latest'", ":", "\n", "                ", "try", ":", "\n", "                    ", "load_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'optimizer.pth'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "self", ".", "optimizer_G", ".", "load_state_dict", "(", "checkpoint", "[", "'G'", "]", ")", "\n", "self", ".", "optimizer_D", ".", "load_state_dict", "(", "checkpoint", "[", "'D'", "]", ")", "\n", "", "except", "FileNotFoundError", "as", "err", ":", "\n", "                    ", "print", "(", "err", ")", "\n", "print", "(", "'Not find optimizer state dict: '", "+", "load_path", "+", "'. Do not load optimizer!'", ")", "\n", "\n", "", "", "", "self", ".", "last_data", ",", "self", ".", "last_netCorr", ",", "self", ".", "last_netG", ",", "self", ".", "last_optimizer_G", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "self", ".", "g_losses", "=", "{", "}", "\n", "self", ".", "d_losses", "=", "{", "}", "\n", "self", ".", "scaler", "=", "GradScaler", "(", "enabled", "=", "self", ".", "opt", ".", "amp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.trainers.pix2pix_trainer.Pix2PixTrainer.run_generator_one_step": [[61, 73], ["pix2pix_trainer.Pix2PixTrainer.optimizer_G.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "pix2pix_trainer.Pix2PixTrainer.scaler.scale().backward", "pix2pix_trainer.Pix2PixTrainer.scaler.unscale_", "pix2pix_trainer.Pix2PixTrainer.scaler.step", "pix2pix_trainer.Pix2PixTrainer.scaler.update", "sum", "pix2pix_trainer.Pix2PixTrainer.scaler.scale", "g_losses.values"], "methods", ["None"], ["", "def", "run_generator_one_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "g_losses", ",", "out", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'generator'", ")", "\n", "g_loss", "=", "sum", "(", "g_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "# g_loss.backward()", "\n", "self", ".", "scaler", ".", "scale", "(", "g_loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "unscale_", "(", "self", ".", "optimizer_G", ")", "\n", "# self.optimizer_G.step()", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "self", ".", "g_losses", "=", "g_losses", "\n", "self", ".", "out", "=", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.trainers.pix2pix_trainer.Pix2PixTrainer.run_discriminator_one_step": [[74, 89], ["pix2pix_trainer.Pix2PixTrainer.optimizer_D.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "pix2pix_trainer.Pix2PixTrainer.scaler.scale().backward", "pix2pix_trainer.Pix2PixTrainer.scaler.unscale_", "pix2pix_trainer.Pix2PixTrainer.scaler.step", "pix2pix_trainer.Pix2PixTrainer.scaler.update", "sum", "pix2pix_trainer.Pix2PixTrainer.scaler.scale", "pix2pix_trainer.Pix2PixTrainer.values"], "methods", ["None"], ["", "def", "run_discriminator_one_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "GforD", "=", "{", "}", "\n", "GforD", "[", "'fake_image'", "]", "=", "self", ".", "out", "[", "'fake_image'", "]", "\n", "GforD", "[", "'adaptive_feature_seg'", "]", "=", "self", ".", "out", "[", "'adaptive_feature_seg'", "]", "\n", "GforD", "[", "'adaptive_feature_img'", "]", "=", "self", ".", "out", "[", "'adaptive_feature_img'", "]", "\n", "d_losses", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'discriminator'", ",", "GforD", "=", "GforD", ")", "\n", "d_loss", "=", "sum", "(", "d_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "# d_loss.backward()", "\n", "self", ".", "scaler", ".", "scale", "(", "d_loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "unscale_", "(", "self", ".", "optimizer_D", ")", "\n", "# self.optimizer_D.step()", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer_D", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "self", ".", "d_losses", "=", "d_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_losses": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_latest_losses", "(", "self", ")", ":", "\n", "        ", "return", "{", "**", "self", ".", "g_losses", ",", "**", "self", ".", "d_losses", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_generated": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_latest_generated", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "out", "[", "'fake_image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.trainers.pix2pix_trainer.Pix2PixTrainer.update_learning_rate": [[107, 125], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "", "else", ":", "\n", "            ", "new_lr", "=", "self", ".", "old_lr", "\n", "", "if", "new_lr", "!=", "self", ".", "old_lr", ":", "\n", "            ", "new_lr_G", "=", "new_lr", "\n", "new_lr_D", "=", "new_lr", "\n", "", "else", ":", "\n", "            ", "new_lr_G", "=", "self", ".", "old_lr", "\n", "new_lr_D", "=", "self", ".", "old_lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr_D", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr_G", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "new_lr", ")", ")", "\n", "self", ".", "old_lr", "=", "new_lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.trainers.pix2pix_trainer.Pix2PixTrainer.save": [[99, 106], ["pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.save", "torch.save", "os.path.join", "pix2pix_trainer.Pix2PixTrainer.optimizer_G.state_dict", "pix2pix_trainer.Pix2PixTrainer.optimizer_D.state_dict"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "pix2pix_model_on_one_gpu", ".", "save", "(", "epoch", ")", "\n", "if", "epoch", "==", "'latest'", ":", "\n", "            ", "torch", ".", "save", "(", "{", "'G'", ":", "self", ".", "optimizer_G", ".", "state_dict", "(", ")", ",", "'D'", ":", "self", ".", "optimizer_D", ".", "state_dict", "(", ")", ",", "'lr'", ":", "self", ".", "old_lr", ",", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "'optimizer.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.__init__": [[10, 28], ["os.path.join", "numpy.loadtxt", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dataset_size", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "dataset_size", "=", "dataset_size", "\n", "self", ".", "batch_size", "=", "opt", ".", "batchSize", "\n", "self", ".", "first_epoch", "=", "1", "\n", "self", ".", "total_epochs", "=", "opt", ".", "niter", "+", "opt", ".", "niter_decay", "\n", "# iter number within each epoch", "\n", "self", ".", "epoch_iter", "=", "0", "\n", "self", ".", "iter_record_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "'iter.txt'", ")", "\n", "if", "opt", ".", "isTrain", "and", "opt", ".", "continue_train", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", "=", "np", ".", "loadtxt", "(", "self", ".", "iter_record_path", ",", "delimiter", "=", "','", ",", "dtype", "=", "int", ")", "\n", "print", "(", "'Resuming from epoch %d at iteration %d'", "%", "(", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Could not load iteration record at %s. Starting from beginning.'", "%", "self", ".", "iter_record_path", ")", "\n", "", "", "self", ".", "epoch_iter_num", "=", "dataset_size", "*", "self", ".", "batch_size", "\n", "self", ".", "total_steps_so_far", "=", "(", "self", ".", "first_epoch", "-", "1", ")", "*", "self", ".", "epoch_iter_num", "+", "self", ".", "epoch_iter", "\n", "self", ".", "continue_train_flag", "=", "opt", ".", "continue_train", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.training_epochs": [[30, 32], ["range"], "methods", ["None"], ["", "def", "training_epochs", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "self", ".", "first_epoch", ",", "self", ".", "total_epochs", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.record_epoch_start": [[33, 41], ["time.time", "time.time"], "methods", ["None"], ["", "def", "record_epoch_start", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "self", ".", "continue_train_flag", ":", "\n", "            ", "self", ".", "epoch_iter", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "continue_train_flag", "=", "False", "\n", "", "self", ".", "last_iter_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "current_epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.record_one_iteration": [[42, 50], ["time.time"], "methods", ["None"], ["", "def", "record_one_iteration", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "# the last remaining batch is dropped (see data/__init__.py),", "\n", "# so we can assume batch size is always opt.batchSize", "\n", "self", ".", "time_per_iter", "=", "(", "current_time", "-", "self", ".", "last_iter_time", ")", "/", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "last_iter_time", "=", "current_time", "\n", "self", ".", "total_steps_so_far", "+=", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "epoch_iter", "+=", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.record_epoch_end": [[51, 60], ["time.time", "print", "numpy.savetxt", "print"], "methods", ["None"], ["", "def", "record_epoch_end", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_per_epoch", "=", "current_time", "-", "self", ".", "epoch_start_time", "\n", "print", "(", "'End of epoch %d / %d \\t Time Taken: %d sec'", "%", "\n", "(", "self", ".", "current_epoch", ",", "self", ".", "total_epochs", ",", "self", ".", "time_per_epoch", ")", ")", "\n", "if", "self", ".", "current_epoch", "%", "self", ".", "opt", ".", "save_epoch_freq", "==", "0", ":", "\n", "            ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", "+", "1", ",", "0", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.record_current_iter": [[61, 65], ["numpy.savetxt", "print"], "methods", ["None"], ["", "", "def", "record_current_iter", "(", "self", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", ",", "self", ".", "epoch_iter", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.needs_saving": [[66, 68], ["None"], "methods", ["None"], ["", "def", "needs_saving", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "save_latest_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.needs_printing": [[69, 71], ["None"], "methods", ["None"], ["", "def", "needs_printing", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "print_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.iter_counter.IterationCounter.needs_displaying": [[72, 74], ["None"], "methods", ["None"], ["", "def", "needs_displaying", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "display_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.feature_normalize": [[15, 19], ["torch.div", "torch.norm"], "function", ["None"], ["def", "feature_normalize", "(", "feature_in", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "feature_in_norm", "=", "torch", ".", "norm", "(", "feature_in", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "+", "eps", "\n", "feature_in_norm", "=", "torch", ".", "div", "(", "feature_in", ",", "feature_in_norm", ")", "\n", "return", "feature_in_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.weighted_l1_loss": [[21, 26], ["torch.abs", "torch.abs.mean", "weights.expand_as"], "function", ["None"], ["", "def", "weighted_l1_loss", "(", "input", ",", "target", ",", "weights", ")", ":", "\n", "    ", "out", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "out", "=", "out", "*", "weights", ".", "expand_as", "(", "out", ")", "\n", "loss", "=", "out", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mse_loss": [[28, 30], ["torch.mean"], "function", ["None"], ["", "def", "mse_loss", "(", "input", ",", "target", "=", "0", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "(", "input", "-", "target", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.vgg_preprocess": [[32, 42], ["torch.cat", "torch.Tensor().type_as().view", "torch.Tensor().type_as", "torch.Tensor"], "function", ["None"], ["", "def", "vgg_preprocess", "(", "tensor", ",", "vgg_normal_correct", "=", "False", ")", ":", "\n", "    ", "if", "vgg_normal_correct", ":", "\n", "        ", "tensor", "=", "(", "tensor", "+", "1", ")", "/", "2", "\n", "# input is RGB tensor which ranges in [0,1]", "\n", "# output is BGR tensor which ranges in [0,255]", "\n", "", "tensor_bgr", "=", "torch", ".", "cat", "(", "(", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# tensor_bgr = tensor[:, [2, 1, 0], ...]", "\n", "tensor_bgr_ml", "=", "tensor_bgr", "-", "torch", ".", "Tensor", "(", "[", "0.40760392", ",", "0.45795686", ",", "0.48501961", "]", ")", ".", "type_as", "(", "tensor_bgr", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "tensor_rst", "=", "tensor_bgr_ml", "*", "255", "\n", "return", "tensor_rst", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mkdirs": [[44, 50], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mkdir", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mkdir": [[52, 55], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.find_class_in_module": [[57, 68], ["target_cls_name.replace().lower.replace().lower", "importlib.import_module", "importlib.import_module.__dict__.items", "print", "exit", "target_cls_name.replace().lower.replace", "name.lower"], "function", ["None"], ["", "", "def", "find_class_in_module", "(", "target_cls_name", ",", "module", ")", ":", "\n", "    ", "target_cls_name", "=", "target_cls_name", ".", "replace", "(", "'_'", ",", "''", ")", ".", "lower", "(", ")", "\n", "clslib", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "cls", "=", "None", "\n", "for", "name", ",", "clsobj", "in", "clslib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_cls_name", ":", "\n", "            ", "cls", "=", "clsobj", "\n", "", "", "if", "cls", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s, there should be a class whose name matches %s in lowercase without underscore(_)\"", "%", "(", "module", ",", "target_cls_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.save_network": [[70, 76], ["os.path.join", "torch.save", "net.cpu().state_dict", "len", "torch.cuda.is_available", "net.cuda", "net.cpu"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.load_network": [[78, 96], ["os.path.join", "os.path.join", "torch.load", "print", "os.path.exists", "print", "net.load_state_dict", "print", "print", "net.load_state_dict", "print"], "function", ["None"], ["", "", "def", "load_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "print", "(", "'not find model :'", "+", "save_path", "+", "', do not load model!'", ")", "\n", "return", "net", "\n", "", "weights", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "try", ":", "\n", "        ", "net", ".", "load_state_dict", "(", "weights", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "print", "(", "'key error, not load!'", ")", "\n", "", "except", "RuntimeError", "as", "err", ":", "\n", "        ", "print", "(", "err", ")", "\n", "net", ".", "load_state_dict", "(", "weights", ",", "strict", "=", "False", ")", "\n", "print", "(", "'loaded with strict = False'", ")", "\n", "", "print", "(", "'Load from '", "+", "save_path", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.print_current_errors": [[98, 107], ["errors.items", "print", "os.path.join", "v.mean().float.mean().float", "open", "log_file.write", "v.mean().float.mean"], "function", ["None"], ["", "def", "print_current_errors", "(", "opt", ",", "epoch", ",", "i", ",", "num", ",", "errors", ",", "t", ")", ":", "\n", "    ", "message", "=", "'(epoch: %d, iters: %d, finish: %.2f%%, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "(", "i", "/", "num", ")", "*", "100.0", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "        ", "v", "=", "v", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "", "print", "(", "message", ")", "\n", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "        ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.__init__.find_model_using_name": [[8, 27], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.__init__.get_option_setter": [[29, 32], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.__init__.create_model": [[34, 39], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.modify_commandline_options": [[23, 27], ["models.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "networks", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.__init__": [[28, 58], ["super().__init__", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "pix2pix_model.Pix2PixModel.use_gpu", "pix2pix_model.Pix2PixModel.use_gpu", "pix2pix_model.Pix2PixModel.initialize_networks", "models.architecture.VGG19_feature_color_torchversion", "pix2pix_model.Pix2PixModel.vggnet_fix.load_state_dict", "pix2pix_model.Pix2PixModel.vggnet_fix.eval", "pix2pix_model.Pix2PixModel.vggnet_fix.parameters", "pix2pix_model.Pix2PixModel.vggnet_fix.to", "models.ContextualLoss_forward", "models.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.use_gpu", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.use_gpu", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.initialize_networks"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "ByteTensor", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "ModuleDict", "(", "self", ".", "initialize_networks", "(", "opt", ")", ")", "\n", "# set loss functions", "\n", "if", "opt", ".", "isTrain", ":", "\n", "# vgg network", "\n", "            ", "self", ".", "vggnet_fix", "=", "networks", ".", "architecture", ".", "VGG19_feature_color_torchversion", "(", "vgg_normal_correct", "=", "opt", ".", "vgg_normal_correct", ")", "\n", "self", ".", "vggnet_fix", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'vgg/vgg19_conv.pth'", ")", ")", "\n", "self", ".", "vggnet_fix", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "vggnet_fix", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "vggnet_fix", ".", "to", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "# contextual loss", "\n", "self", ".", "contextual_forward_loss", "=", "networks", ".", "ContextualLoss_forward", "(", "opt", ")", "\n", "# GAN loss", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "opt", ".", "gan_mode", ",", "tensor", "=", "self", ".", "FloatTensor", ",", "opt", "=", "self", ".", "opt", ")", "\n", "# L1 loss", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# L2 loss", "\n", "self", ".", "MSE_loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "# setting which layer is used in the perceptual loss", "\n", "if", "opt", ".", "which_perceptual", "==", "'5_2'", ":", "\n", "                ", "self", ".", "perceptual_layer", "=", "-", "1", "\n", "", "elif", "opt", ".", "which_perceptual", "==", "'4_2'", ":", "\n", "                ", "self", ".", "perceptual_layer", "=", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.forward": [[59, 94], ["pix2pix_model.Pix2PixModel.preprocess_input", "pix2pix_model.Pix2PixModel.compute_generator_loss", "pix2pix_model.Pix2PixModel.compute_discriminator_loss", "ValueError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pix2pix_model.Pix2PixModel.inference"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.preprocess_input", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.compute_generator_loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.compute_discriminator_loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.inference"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "mode", ",", "GforD", "=", "None", ")", ":", "\n", "        ", "input_label", ",", "input_semantics", ",", "real_image", ",", "self_ref", ",", "ref_image", ",", "ref_label", ",", "ref_semantics", "=", "self", ".", "preprocess_input", "(", "data", ",", ")", "\n", "generated_out", "=", "{", "}", "\n", "\n", "if", "mode", "==", "'generator'", ":", "\n", "            ", "g_loss", ",", "generated_out", "=", "self", ".", "compute_generator_loss", "(", "input_label", ",", "input_semantics", ",", "real_image", ",", "ref_label", ",", "ref_semantics", ",", "ref_image", ",", "self_ref", ")", "\n", "out", "=", "{", "}", "\n", "out", "[", "'fake_image'", "]", "=", "generated_out", "[", "'fake_image'", "]", "\n", "out", "[", "'input_semantics'", "]", "=", "input_semantics", "\n", "out", "[", "'ref_semantics'", "]", "=", "ref_semantics", "\n", "out", "[", "'warp_out'", "]", "=", "None", "if", "'warp_out'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp_out'", "]", "\n", "out", "[", "'adaptive_feature_seg'", "]", "=", "None", "if", "'adaptive_feature_seg'", "not", "in", "generated_out", "else", "generated_out", "[", "'adaptive_feature_seg'", "]", "\n", "out", "[", "'adaptive_feature_img'", "]", "=", "None", "if", "'adaptive_feature_img'", "not", "in", "generated_out", "else", "generated_out", "[", "'adaptive_feature_img'", "]", "\n", "out", "[", "'warp_cycle'", "]", "=", "None", "if", "'warp_cycle'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp_cycle'", "]", "\n", "return", "g_loss", ",", "out", "\n", "\n", "", "elif", "mode", "==", "'discriminator'", ":", "\n", "            ", "d_loss", "=", "self", ".", "compute_discriminator_loss", "(", "input_semantics", ",", "real_image", ",", "GforD", ",", "label", "=", "input_label", ")", "\n", "return", "d_loss", "\n", "\n", "", "elif", "mode", "==", "'inference'", ":", "\n", "            ", "out", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out", "=", "self", ".", "inference", "(", "input_semantics", ",", "ref_semantics", "=", "ref_semantics", ",", "ref_image", "=", "ref_image", ",", "self_ref", "=", "self_ref", ",", "real_image", "=", "real_image", ")", "\n", "", "out", "[", "'input_semantics'", "]", "=", "input_semantics", "\n", "out", "[", "'ref_semantics'", "]", "=", "ref_semantics", "\n", "return", "out", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"|mode| is invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.create_optimizers": [[95, 107], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "itertools.chain", "itertools.chain", "pix2pix_model.Pix2PixModel.net[].parameters", "pix2pix_model.Pix2PixModel.net[].parameters", "pix2pix_model.Pix2PixModel.net[].parameters"], "methods", ["None"], ["", "", "def", "create_optimizers", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "no_TTUR", ":", "\n", "            ", "beta1", ",", "beta2", "=", "opt", ".", "beta1", ",", "opt", ".", "beta2", "\n", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", ",", "opt", ".", "lr", "\n", "", "else", ":", "\n", "            ", "beta1", ",", "beta2", "=", "0", ",", "0.9", "\n", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", "/", "2", ",", "opt", ".", "lr", "*", "2", "\n", "", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "net", "[", "'netG'", "]", ".", "parameters", "(", ")", ",", "self", ".", "net", "[", "'netCorr'", "]", ".", "parameters", "(", ")", ")", ",", "lr", "=", "G_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ",", "eps", "=", "1e-3", ")", "\n", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "net", "[", "'netD'", "]", ".", "parameters", "(", ")", ")", ",", "lr", "=", "D_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "\n", "return", "optimizer_G", ",", "optimizer_D", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.save": [[108, 112], ["util.save_network", "util.save_network", "util.save_network"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.save_network", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.save_network", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.save_network"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "util", ".", "save_network", "(", "self", ".", "net", "[", "'netG'", "]", ",", "'G'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "util", ".", "save_network", "(", "self", ".", "net", "[", "'netD'", "]", ",", "'D'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "util", ".", "save_network", "(", "self", ".", "net", "[", "'netCorr'", "]", ",", "'Corr'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.initialize_networks": [[113, 124], ["models.define_G", "models.define_Corr", "models.define_D", "util.load_network", "util.load_network", "util.load_network"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.define_G", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.define_Corr", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.define_D", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.load_network", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.load_network", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.load_network"], ["", "def", "initialize_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "net", "=", "{", "}", "\n", "net", "[", "'netG'", "]", "=", "networks", ".", "define_G", "(", "opt", ")", "\n", "net", "[", "'netD'", "]", "=", "networks", ".", "define_D", "(", "opt", ")", "if", "opt", ".", "isTrain", "else", "None", "\n", "net", "[", "'netCorr'", "]", "=", "networks", ".", "define_Corr", "(", "opt", ")", "\n", "if", "not", "opt", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "net", "[", "'netCorr'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netCorr'", "]", ",", "'Corr'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "net", "[", "'netG'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netG'", "]", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "                ", "net", "[", "'netD'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netD'", "]", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.preprocess_input": [[125, 140], ["pix2pix_model.Pix2PixModel.use_gpu", "[].float", "[].float", "data[].float", "data[].float", "data.keys", "data[].cuda"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.use_gpu"], ["", "def", "preprocess_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "self", ".", "use_gpu", "(", ")", ":", "\n", "            ", "for", "k", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "data", "[", "k", "]", "=", "data", "[", "k", "]", ".", "cuda", "(", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "", "", "", "label", "=", "data", "[", "'label'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ".", "float", "(", ")", "\n", "label_ref", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ".", "float", "(", ")", "\n", "input_semantics", "=", "data", "[", "'label'", "]", ".", "float", "(", ")", "\n", "ref_semantics", "=", "data", "[", "'label_ref'", "]", ".", "float", "(", ")", "\n", "image", "=", "data", "[", "'image'", "]", "\n", "ref", "=", "data", "[", "'ref'", "]", "\n", "self_ref", "=", "data", "[", "'self_ref'", "]", "\n", "return", "label", ",", "input_semantics", ",", "image", ",", "self_ref", ",", "ref", ",", "label_ref", ",", "ref_semantics", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.get_ctx_loss": [[141, 146], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pix2pix_model.Pix2PixModel.contextual_forward_loss", "pix2pix_model.Pix2PixModel.contextual_forward_loss", "pix2pix_model.Pix2PixModel.contextual_forward_loss", "target[].detach", "target[].detach", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "target[].detach"], "methods", ["None"], ["", "def", "get_ctx_loss", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "contextual_style5_1", "=", "torch", ".", "mean", "(", "self", ".", "contextual_forward_loss", "(", "source", "[", "-", "1", "]", ",", "target", "[", "-", "1", "]", ".", "detach", "(", ")", ")", ")", "*", "8", "\n", "contextual_style4_1", "=", "torch", ".", "mean", "(", "self", ".", "contextual_forward_loss", "(", "source", "[", "-", "2", "]", ",", "target", "[", "-", "2", "]", ".", "detach", "(", ")", ")", ")", "*", "4", "\n", "contextual_style3_1", "=", "torch", ".", "mean", "(", "self", ".", "contextual_forward_loss", "(", "F", ".", "avg_pool2d", "(", "source", "[", "-", "3", "]", ",", "2", ")", ",", "F", ".", "avg_pool2d", "(", "target", "[", "-", "3", "]", ".", "detach", "(", ")", ",", "2", ")", ")", ")", "*", "2", "\n", "return", "contextual_style5_1", "+", "contextual_style4_1", "+", "contextual_style3_1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.compute_generator_loss": [[147, 199], ["pix2pix_model.Pix2PixModel.generate_fake", "generate_out[].float", "sample_weights.view.view.view", "pix2pix_model.Pix2PixModel.discriminate", "pix2pix_model.Pix2PixModel.vggnet_fix", "range", "util.mse_loss", "torch.avg_pool2d", "torch.avg_pool2d", "pix2pix_model.Pix2PixModel.criterionGAN", "len", "range", "len", "[].detach", "sum", "torch.l1_loss", "torch.l1_loss", "range", "util.weighted_l1_loss", "pix2pix_model.Pix2PixModel.get_ctx_loss", "ref_image.size", "warp_cycle.size", "len", "pix2pix_model.Pix2PixModel.criterionFeat", "[].detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.avg_pool2d", "torch.avg_pool2d", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.generate_fake", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.discriminate", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mse_loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.weighted_l1_loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.get_ctx_loss"], ["", "def", "compute_generator_loss", "(", "self", ",", "input_label", ",", "input_semantics", ",", "real_image", ",", "ref_label", "=", "None", ",", "ref_semantics", "=", "None", ",", "ref_image", "=", "None", ",", "self_ref", "=", "None", ")", ":", "\n", "        ", "G_losses", "=", "{", "}", "\n", "generate_out", "=", "self", ".", "generate_fake", "(", "input_semantics", ",", "real_image", ",", "ref_semantics", "=", "ref_semantics", ",", "ref_image", "=", "ref_image", ",", "self_ref", "=", "self_ref", ")", "\n", "generate_out", "[", "'fake_image'", "]", "=", "generate_out", "[", "'fake_image'", "]", ".", "float", "(", ")", "\n", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "sample_weights", "=", "self_ref", "/", "(", "sum", "(", "self_ref", ")", "+", "1e-5", ")", "\n", "sample_weights", "=", "sample_weights", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\"\"\"domain align\"\"\"", "\n", "if", "'loss_novgg_featpair'", "in", "generate_out", "and", "generate_out", "[", "'loss_novgg_featpair'", "]", "is", "not", "None", ":", "\n", "            ", "G_losses", "[", "'no_vgg_feat'", "]", "=", "generate_out", "[", "'loss_novgg_featpair'", "]", "\n", "", "\"\"\"warping cycle\"\"\"", "\n", "if", "self", ".", "opt", ".", "weight_warp_cycle", ">", "0", ":", "\n", "            ", "warp_cycle", "=", "generate_out", "[", "'warp_cycle'", "]", "\n", "scale_factor", "=", "ref_image", ".", "size", "(", ")", "[", "-", "1", "]", "//", "warp_cycle", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "ref", "=", "F", ".", "avg_pool2d", "(", "ref_image", ",", "scale_factor", ",", "stride", "=", "scale_factor", ")", "\n", "G_losses", "[", "'G_warp_cycle'", "]", "=", "F", ".", "l1_loss", "(", "warp_cycle", ",", "ref", ")", "*", "self", ".", "opt", ".", "weight_warp_cycle", "\n", "", "\"\"\"warping loss\"\"\"", "\n", "if", "self", ".", "opt", ".", "weight_warp_self", ">", "0", ":", "\n", "            ", "\"\"\"512x512\"\"\"", "\n", "warp1", ",", "warp2", ",", "warp3", ",", "warp4", "=", "generate_out", "[", "'warp_out'", "]", "\n", "G_losses", "[", "'G_warp_self'", "]", "=", "torch", ".", "mean", "(", "F", ".", "l1_loss", "(", "warp4", ",", "real_image", ",", "reduction", "=", "'none'", ")", "*", "sample_weights", ")", "*", "self", ".", "opt", ".", "weight_warp_self", "*", "1.0", "+", "torch", ".", "mean", "(", "F", ".", "l1_loss", "(", "warp3", ",", "F", ".", "avg_pool2d", "(", "real_image", ",", "2", ",", "stride", "=", "2", ")", ",", "reduction", "=", "'none'", ")", "*", "sample_weights", ")", "*", "self", ".", "opt", ".", "weight_warp_self", "*", "1.0", "+", "torch", ".", "mean", "(", "F", ".", "l1_loss", "(", "warp2", ",", "F", ".", "avg_pool2d", "(", "real_image", ",", "4", ",", "stride", "=", "4", ")", ",", "reduction", "=", "'none'", ")", "*", "sample_weights", ")", "*", "self", ".", "opt", ".", "weight_warp_self", "*", "1.0", "+", "torch", ".", "mean", "(", "F", ".", "l1_loss", "(", "warp1", ",", "F", ".", "avg_pool2d", "(", "real_image", ",", "8", ",", "stride", "=", "8", ")", ",", "reduction", "=", "'none'", ")", "*", "sample_weights", ")", "*", "self", ".", "opt", ".", "weight_warp_self", "*", "1.0", "\n", "", "\"\"\"gan loss\"\"\"", "\n", "pred_fake", ",", "pred_real", "=", "self", ".", "discriminate", "(", "input_semantics", ",", "generate_out", "[", "'fake_image'", "]", ",", "real_image", ")", "\n", "G_losses", "[", "'GAN'", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ",", "for_discriminator", "=", "False", ")", "*", "self", ".", "opt", ".", "weight_gan", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "num_D", "=", "len", "(", "pred_fake", ")", "\n", "GAN_Feat_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "# for each discriminator", "\n", "# last output is the final prediction, so we exclude it", "\n", "                ", "num_intermediate_outputs", "=", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", "\n", "for", "j", "in", "range", "(", "num_intermediate_outputs", ")", ":", "\n", "# for each layer output", "\n", "                    ", "unweighted_loss", "=", "self", ".", "criterionFeat", "(", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "\n", "GAN_Feat_loss", "+=", "unweighted_loss", "*", "self", ".", "opt", ".", "weight_ganFeat", "/", "num_D", "\n", "", "", "G_losses", "[", "'GAN_Feat'", "]", "=", "GAN_Feat_loss", "\n", "", "\"\"\"feature matching loss\"\"\"", "\n", "fake_features", "=", "self", ".", "vggnet_fix", "(", "generate_out", "[", "'fake_image'", "]", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "generate_out", "[", "'real_features'", "]", ")", ")", ":", "\n", "            ", "loss", "+=", "weights", "[", "i", "]", "*", "util", ".", "weighted_l1_loss", "(", "fake_features", "[", "i", "]", ",", "generate_out", "[", "'real_features'", "]", "[", "i", "]", ".", "detach", "(", ")", ",", "sample_weights", ")", "\n", "", "G_losses", "[", "'fm'", "]", "=", "loss", "*", "self", ".", "opt", ".", "weight_vgg", "*", "self", ".", "opt", ".", "weight_fm_ratio", "\n", "\"\"\"perceptual loss\"\"\"", "\n", "feat_loss", "=", "util", ".", "mse_loss", "(", "fake_features", "[", "self", ".", "perceptual_layer", "]", ",", "generate_out", "[", "'real_features'", "]", "[", "self", ".", "perceptual_layer", "]", ".", "detach", "(", ")", ")", "\n", "G_losses", "[", "'perc'", "]", "=", "feat_loss", "*", "self", ".", "opt", ".", "weight_perceptual", "\n", "\"\"\"contextual loss\"\"\"", "\n", "G_losses", "[", "'contextual'", "]", "=", "self", ".", "get_ctx_loss", "(", "fake_features", ",", "generate_out", "[", "'ref_features'", "]", ")", "*", "self", ".", "opt", ".", "weight_vgg", "*", "self", ".", "opt", ".", "weight_contextual", "\n", "return", "G_losses", ",", "generate_out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.compute_discriminator_loss": [[200, 209], ["pix2pix_model.Pix2PixModel.discriminate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "GforD[].detach", "GforD[].detach.requires_grad_", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.criterionGAN"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.discriminate"], ["", "def", "compute_discriminator_loss", "(", "self", ",", "input_semantics", ",", "real_image", ",", "GforD", ",", "label", "=", "None", ")", ":", "\n", "        ", "D_losses", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake_image", "=", "GforD", "[", "'fake_image'", "]", ".", "detach", "(", ")", "\n", "fake_image", ".", "requires_grad_", "(", ")", "\n", "", "pred_fake", ",", "pred_real", "=", "self", ".", "discriminate", "(", "input_semantics", ",", "fake_image", ",", "real_image", ")", "\n", "D_losses", "[", "'D_Fake'", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ",", "for_discriminator", "=", "True", ")", "*", "self", ".", "opt", ".", "weight_gan", "\n", "D_losses", "[", "'D_real'", "]", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ",", "for_discriminator", "=", "True", ")", "*", "self", ".", "opt", ".", "weight_gan", "\n", "return", "D_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.encode_z": [[210, 214], ["pix2pix_model.Pix2PixModel.reparameterize"], "methods", ["None"], ["", "def", "encode_z", "(", "self", ",", "real_image", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "net", "[", "'netE'", "]", "(", "real_image", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.generate_fake": [[215, 224], ["pix2pix_model.Pix2PixModel.vggnet_fix", "pix2pix_model.Pix2PixModel.vggnet_fix", "autocast"], "methods", ["None"], ["", "def", "generate_fake", "(", "self", ",", "input_semantics", ",", "real_image", ",", "ref_semantics", "=", "None", ",", "ref_image", "=", "None", ",", "self_ref", "=", "None", ")", ":", "\n", "        ", "generate_out", "=", "{", "}", "\n", "generate_out", "[", "'ref_features'", "]", "=", "self", ".", "vggnet_fix", "(", "ref_image", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "generate_out", "[", "'real_features'", "]", "=", "self", ".", "vggnet_fix", "(", "real_image", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "opt", ".", "amp", ")", ":", "\n", "            ", "corr_out", "=", "self", ".", "net", "[", "'netCorr'", "]", "(", "ref_image", ",", "real_image", ",", "input_semantics", ",", "ref_semantics", ")", "\n", "generate_out", "[", "'fake_image'", "]", "=", "self", ".", "net", "[", "'netG'", "]", "(", "input_semantics", ",", "warp_out", "=", "corr_out", "[", "'warp_out'", "]", ")", "\n", "", "generate_out", "=", "{", "**", "generate_out", ",", "**", "corr_out", "}", "\n", "return", "generate_out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.inference": [[225, 232], ["autocast"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "input_semantics", ",", "ref_semantics", "=", "None", ",", "ref_image", "=", "None", ",", "self_ref", "=", "None", ",", "real_image", "=", "None", ")", ":", "\n", "        ", "generate_out", "=", "{", "}", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "opt", ".", "amp", ")", ":", "\n", "            ", "corr_out", "=", "self", ".", "net", "[", "'netCorr'", "]", "(", "ref_image", ",", "real_image", ",", "input_semantics", ",", "ref_semantics", ")", "\n", "generate_out", "[", "'fake_image'", "]", "=", "self", ".", "net", "[", "'netG'", "]", "(", "input_semantics", ",", "warp_out", "=", "corr_out", "[", "'warp_out'", "]", ")", "\n", "", "generate_out", "=", "{", "**", "generate_out", ",", "**", "corr_out", "}", "\n", "return", "generate_out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.discriminate": [[233, 241], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pix2pix_model.Pix2PixModel.divide_pred", "autocast"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.divide_pred"], ["", "def", "discriminate", "(", "self", ",", "input_semantics", ",", "fake_image", ",", "real_image", ")", ":", "\n", "        ", "fake_concat", "=", "torch", ".", "cat", "(", "[", "input_semantics", ",", "fake_image", "]", ",", "dim", "=", "1", ")", "\n", "real_concat", "=", "torch", ".", "cat", "(", "[", "input_semantics", ",", "real_image", "]", ",", "dim", "=", "1", ")", "\n", "fake_and_real", "=", "torch", ".", "cat", "(", "[", "fake_concat", ",", "real_concat", "]", ",", "dim", "=", "0", ")", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "opt", ".", "amp", ")", ":", "\n", "            ", "discriminator_out", "=", "self", ".", "net", "[", "'netD'", "]", "(", "fake_and_real", ")", "\n", "", "pred_fake", ",", "pred_real", "=", "self", ".", "divide_pred", "(", "discriminator_out", ")", "\n", "return", "pred_fake", ",", "pred_real", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.divide_pred": [[242, 253], ["type", "fake.append", "real.append", "pred.size", "pred.size", "tensor.size", "tensor.size"], "methods", ["None"], ["", "def", "divide_pred", "(", "self", ",", "pred", ")", ":", "\n", "        ", "if", "type", "(", "pred", ")", "==", "list", ":", "\n", "            ", "fake", "=", "[", "]", "\n", "real", "=", "[", "]", "\n", "for", "p", "in", "pred", ":", "\n", "                ", "fake", ".", "append", "(", "[", "tensor", "[", ":", "tensor", ".", "size", "(", "0", ")", "//", "2", "]", "for", "tensor", "in", "p", "]", ")", "\n", "real", ".", "append", "(", "[", "tensor", "[", "tensor", ".", "size", "(", "0", ")", "//", "2", ":", "]", "for", "tensor", "in", "p", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "fake", "=", "pred", "[", ":", "pred", ".", "size", "(", "0", ")", "//", "2", "]", "\n", "real", "=", "pred", "[", "pred", ".", "size", "(", "0", ")", "//", "2", ":", "]", "\n", "", "return", "fake", ",", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.models.pix2pix_model.Pix2PixModel.use_gpu": [[254, 256], ["len"], "methods", ["None"], ["", "def", "use_gpu", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.MultiscaleDiscriminator.modify_commandline_options": [[14, 26], ["parser.add_argument", "parser.add_argument", "parser.parse_known_args", "util.find_class_in_module", "util.find_class_in_module.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.find_class_in_module", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--netD_subarch'", ",", "type", "=", "str", ",", "default", "=", "'n_layer'", ",", "\n", "help", "=", "'architecture of each discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of discriminators to be used in multiscale'", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "# define properties of each discriminator of the multiscale discriminator", "\n", "subnetD", "=", "util", ".", "find_class_in_module", "(", "opt", ".", "netD_subarch", "+", "'discriminator'", ",", "'models.networks.discriminator'", ")", "\n", "subnetD", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.MultiscaleDiscriminator.__init__": [[27, 33], ["models.networks.base_network.BaseNetwork.__init__", "range", "discriminator.MultiscaleDiscriminator.create_single_discriminator", "discriminator.MultiscaleDiscriminator.add_module"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_D", ")", ":", "\n", "            ", "subnetD", "=", "self", ".", "create_single_discriminator", "(", "opt", ")", "\n", "self", ".", "add_module", "(", "'discriminator_%d'", "%", "i", ",", "subnetD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator": [[34, 41], ["discriminator.NLayerDiscriminator", "ValueError"], "methods", ["None"], ["", "", "def", "create_single_discriminator", "(", "self", ",", "opt", ")", ":", "\n", "        ", "subarch", "=", "opt", ".", "netD_subarch", "\n", "if", "subarch", "==", "'n_layer'", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "opt", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unrecognized discriminator subarchitecture %s'", "%", "subarch", ")", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.MultiscaleDiscriminator.downsample": [[42, 44], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "downsample", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "avg_pool2d", "(", "input", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.MultiscaleDiscriminator.forward": [[45, 55], ["discriminator.MultiscaleDiscriminator.named_children", "D", "result.append", "discriminator.MultiscaleDiscriminator.downsample"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.MultiscaleDiscriminator.downsample"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "for", "name", ",", "D", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "out", "=", "D", "(", "input", ")", "\n", "if", "not", "get_intermediate_features", ":", "\n", "                ", "out", "=", "[", "out", "]", "\n", "", "result", ".", "append", "(", "out", ")", "\n", "input", "=", "self", ".", "downsample", "(", "input", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.NLayerDiscriminator.modify_commandline_options": [[58, 62], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# layers in each discriminator'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.NLayerDiscriminator.__init__": [[63, 92], ["models.networks.base_network.BaseNetwork.__init__", "int", "discriminator.NLayerDiscriminator.compute_D_input_nc", "models.networks.normalization.get_nonspade_norm_layer", "range", "range", "min", "len", "discriminator.NLayerDiscriminator.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "str", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.NLayerDiscriminator.compute_D_input_nc", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.normalization.get_nonspade_norm_layer"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", "\n", "nf", "=", "opt", ".", "ndf", "\n", "input_nc", "=", "self", ".", "compute_D_input_nc", "(", "opt", ")", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_D", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "]", "]", "\n", "for", "n", "in", "range", "(", "1", ",", "opt", ".", "n_layers_D", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "stride", "=", "1", "if", "n", "==", "opt", ".", "n_layers_D", "-", "1", "else", "2", "\n", "if", "n", "==", "opt", ".", "n_layers_D", "-", "1", ":", "\n", "                ", "dec", "=", "[", "]", "\n", "nc_dec", "=", "nf_prev", "\n", "for", "_", "in", "range", "(", "opt", ".", "n_layers_D", "-", "1", ")", ":", "\n", "                    ", "dec", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nc_dec", ",", "int", "(", "nc_dec", "//", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "]", "\n", "nc_dec", "=", "int", "(", "nc_dec", "//", "2", ")", "\n", "", "dec", "+=", "[", "nn", ".", "Conv2d", "(", "nc_dec", ",", "opt", ".", "semantic_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "]", "\n", "self", ".", "dec", "=", "nn", ".", "Sequential", "(", "*", "dec", ")", "\n", "", "sequence", "+=", "[", "[", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "stride", ",", "padding", "=", "padw", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "]", "]", "\n", "", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.NLayerDiscriminator.compute_D_input_nc": [[93, 98], ["None"], "methods", ["None"], ["", "", "def", "compute_D_input_nc", "(", "self", ",", "opt", ")", ":", "\n", "        ", "input_nc", "=", "opt", ".", "label_nc", "+", "opt", ".", "output_nc", "\n", "if", "opt", ".", "contain_dontcare_label", ":", "\n", "            ", "input_nc", "+=", "1", "\n", "", "return", "input_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.discriminator.NLayerDiscriminator.forward": [[99, 115], ["discriminator.NLayerDiscriminator.named_children", "submodel", "results.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "results", "=", "[", "input", "]", "\n", "seg", "=", "None", "\n", "cam_logit", "=", "None", "\n", "for", "name", ",", "submodel", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "'model'", "not", "in", "name", ":", "\n", "                ", "continue", "\n", "", "x", "=", "results", "[", "-", "1", "]", "\n", "intermediate_output", "=", "submodel", "(", "x", ")", "\n", "results", ".", "append", "(", "intermediate_output", ")", "\n", "", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "if", "get_intermediate_features", ":", "\n", "            ", "retu", "=", "results", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "retu", "=", "results", "[", "-", "1", "]", "\n", "", "return", "retu", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.FlowHead.__init__": [[10, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "32", ",", "hidden_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "FlowHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "candidate_num", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "2", "*", "candidate_num", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.FlowHead.forward": [[16, 23], ["convgru.FlowHead.conv1", "convgru.FlowHead.relu", "convgru.FlowHead.conv2", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "convgru.FlowHead.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "num", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "delta_offset_x", ",", "delta_offset_y", "=", "torch", ".", "split", "(", "x", ",", "[", "num", "//", "2", ",", "num", "//", "2", "]", ",", "dim", "=", "1", ")", "\n", "return", "delta_offset_x", ",", "delta_offset_y", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.SepConvGRU.__init__": [[26, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "32", ",", "input_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "SepConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convr1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convq1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convz2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convr2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convq2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.SepConvGRU.forward": [[35, 49], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "convgru.SepConvGRU.convz1", "convgru.SepConvGRU.convr1", "convgru.SepConvGRU.convq1", "convgru.SepConvGRU.convz2", "convgru.SepConvGRU.convr2", "convgru.SepConvGRU.convq2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "# horizontal", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz1", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr1", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq1", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "# vertical", "\n", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz2", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr2", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq2", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.BasicMotionEncoder.__init__": [[52, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BasicMotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "candidate_num", "=", "16", "\n", "self", ".", "convc1", "=", "nn", ".", "Conv2d", "(", "candidate_num", ",", "64", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convc2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convf1", "=", "nn", ".", "Conv2d", "(", "2", "*", "candidate_num", ",", "64", ",", "7", ",", "padding", "=", "3", ")", "\n", "self", ".", "convf2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "64", "+", "64", ",", "64", "-", "2", "*", "candidate_num", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.BasicMotionEncoder.forward": [[61, 69], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "convgru.BasicMotionEncoder.convc1", "convgru.BasicMotionEncoder.convc2", "convgru.BasicMotionEncoder.convf1", "convgru.BasicMotionEncoder.convf2", "convgru.BasicMotionEncoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc1", "(", "corr", ")", ")", "\n", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc2", "(", "cor", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf1", "(", "flow", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf2", "(", "flo", ")", ")", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "flow", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.BasicUpdateBlock.__init__": [[72, 77], ["torch.Module.__init__", "convgru.BasicMotionEncoder", "convgru.SepConvGRU", "convgru.FlowHead"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BasicUpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "BasicMotionEncoder", "(", ")", "\n", "self", ".", "gru", "=", "SepConvGRU", "(", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.convgru.BasicUpdateBlock.forward": [[78, 84], ["convgru.BasicUpdateBlock.encoder", "convgru.BasicUpdateBlock.gru", "convgru.BasicUpdateBlock.flow_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "corr", ",", "flow", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "motion_features", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "delta_offset_x", ",", "delta_offset_y", "=", "self", ".", "flow_head", "(", "net", ")", "\n", "return", "net", ",", "delta_offset_x", ",", "delta_offset_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.AdaptiveFeatureGenerator.modify_commandline_options": [[33, 36], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.AdaptiveFeatureGenerator.__init__": [[37, 66], ["models.networks.base_network.BaseNetwork.__init__", "int", "models.networks.normalization.get_nonspade_norm_layer", "models.networks.normalization.get_nonspade_norm_layer.", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.architecture.ResidualBlock", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.architecture.ResidualBlock", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.architecture.ResidualBlock", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.architecture.ResidualBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.normalization.get_nonspade_norm_layer"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "kw", "=", "opt", ".", "featEnc_kernel", "\n", "pw", "=", "int", "(", "(", "kw", "-", "1", ")", "//", "2", ")", "\n", "nf", "=", "opt", ".", "nef", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_E", ")", "\n", "self", ".", "layer1", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "opt", ".", "spade_ic", ",", "nf", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "1", ",", "nf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ")", ",", "\n", "ResidualBlock", "(", "nf", "*", "2", ",", "nf", "*", "2", ")", ",", "\n", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", ",", "\n", "ResidualBlock", "(", "nf", "*", "4", ",", "nf", "*", "4", ")", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", ",", "\n", "ResidualBlock", "(", "nf", "*", "4", ",", "nf", "*", "4", ")", ",", "\n", ")", "\n", "self", ".", "layer5", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", ",", "\n", "ResidualBlock", "(", "nf", "*", "4", ",", "nf", "*", "4", ")", ",", "\n", ")", "\n", "self", ".", "head_0", "=", "SPADEResnetBlock", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "opt", ")", "\n", "self", ".", "G_middle_0", "=", "SPADEResnetBlock", "(", "nf", "*", "4", ",", "nf", "*", "4", ",", "opt", ")", "\n", "self", ".", "G_middle_1", "=", "SPADEResnetBlock", "(", "nf", "*", "4", ",", "nf", "*", "2", ",", "opt", ")", "\n", "self", ".", "G_middle_2", "=", "SPADEResnetBlock", "(", "nf", "*", "2", ",", "nf", "*", "1", ",", "opt", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.AdaptiveFeatureGenerator.forward": [[67, 87], ["correspondence.AdaptiveFeatureGenerator.layer1", "correspondence.AdaptiveFeatureGenerator.layer2", "correspondence.AdaptiveFeatureGenerator.layer3", "correspondence.AdaptiveFeatureGenerator.layer4", "correspondence.AdaptiveFeatureGenerator.layer5", "correspondence.AdaptiveFeatureGenerator.head_0", "correspondence.AdaptiveFeatureGenerator.G_middle_0", "correspondence.AdaptiveFeatureGenerator.G_middle_1", "correspondence.AdaptiveFeatureGenerator.G_middle_2", "correspondence.AdaptiveFeatureGenerator.actvn", "correspondence.AdaptiveFeatureGenerator.actvn", "correspondence.AdaptiveFeatureGenerator.actvn", "correspondence.AdaptiveFeatureGenerator.actvn", "correspondence.AdaptiveFeatureGenerator.up", "correspondence.AdaptiveFeatureGenerator.up", "correspondence.AdaptiveFeatureGenerator.up"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn"], ["", "def", "forward", "(", "self", ",", "input", ",", "seg", ")", ":", "\n", "# 512", "\n", "        ", "x1", "=", "self", ".", "layer1", "(", "input", ")", "\n", "# 512", "\n", "x2", "=", "self", ".", "layer2", "(", "self", ".", "actvn", "(", "x1", ")", ")", "\n", "# 256", "\n", "x3", "=", "self", ".", "layer3", "(", "self", ".", "actvn", "(", "x2", ")", ")", "\n", "# 128", "\n", "x4", "=", "self", ".", "layer4", "(", "self", ".", "actvn", "(", "x3", ")", ")", "\n", "# 64", "\n", "x5", "=", "self", ".", "layer5", "(", "self", ".", "actvn", "(", "x4", ")", ")", "\n", "# bottleneck", "\n", "x6", "=", "self", ".", "head_0", "(", "x5", ",", "seg", ")", "\n", "# 128", "\n", "x7", "=", "self", ".", "G_middle_0", "(", "self", ".", "up", "(", "x6", ")", "+", "x4", ",", "seg", ")", "\n", "# 256", "\n", "x8", "=", "self", ".", "G_middle_1", "(", "self", ".", "up", "(", "x7", ")", "+", "x3", ",", "seg", ")", "\n", "# 512", "\n", "x9", "=", "self", ".", "G_middle_2", "(", "self", ".", "up", "(", "x8", ")", "+", "x2", ",", "seg", ")", "\n", "return", "[", "x6", ",", "x7", ",", "x8", ",", "x9", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.AdaptiveFeatureGenerator.actvn": [[88, 90], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.NoVGGHPMCorrespondence.__init__": [[93, 113], ["models.networks.base_network.BaseNetwork.__init__", "correspondence.AdaptiveFeatureGenerator", "correspondence.AdaptiveFeatureGenerator", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.patch_match.PatchMatchGRU"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "opt", ".", "spade_ic", "=", "opt", ".", "semantic_nc", "\n", "self", ".", "adaptive_model_seg", "=", "AdaptiveFeatureGenerator", "(", "opt", ")", "\n", "opt", ".", "spade_ic", "=", "3", "+", "opt", ".", "semantic_nc", "\n", "self", ".", "adaptive_model_img", "=", "AdaptiveFeatureGenerator", "(", "opt", ")", "\n", "del", "opt", ".", "spade_ic", "\n", "self", ".", "batch_size", "=", "opt", ".", "batchSize", "\n", "\"\"\"512x512\"\"\"", "\n", "feature_channel", "=", "opt", ".", "nef", "\n", "self", ".", "phi_0", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", "*", "4", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", "*", "4", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", "*", "2", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta_0", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", "*", "4", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", "*", "4", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", "*", "2", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "feature_channel", ",", "out_channels", "=", "feature_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "patch_match", "=", "PatchMatchGRU", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.NoVGGHPMCorrespondence.multi_scale_patch_match": [[115, 201], ["f1.view.view.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "ref.view.view.view", "f1.view.view.view", "f2.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.view.view.permute().view", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "ref.view.view.view", "correspondence.NoVGGHPMCorrespondence.patch_match", "y.view.view.view", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "ref.view.view.view", "correspondence.NoVGGHPMCorrespondence.patch_match", "y.view.view.view", "ref.view.view.view", "correspondence.NoVGGHPMCorrespondence.patch_match", "y.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "ref.view.view.permute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y_cycle.permute().view.permute().view.permute().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "f1.view.view.size", "topk_inds.permute().view().float", "inds_to_offset", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "f1.view.view.size", "topk_inds.permute().view().float", "inds_to_offset", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "f1.view.view.size", "topk_inds.permute().view().float", "inds_to_offset", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "f1.view.view.permute", "matmul_result.transpose", "y.view.view.permute", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "dx.view", "dy.view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "dx.view", "dy.view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "torch.arange().unsqueeze_().expand().contiguous().view", "dx.view", "dy.view", "y_cycle.permute().view.permute().view.permute", "topk_inds.permute().view", "topk_inds.permute().view", "topk_inds.permute().view", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "torch.arange().unsqueeze_().expand().contiguous", "topk_inds.permute", "topk_inds.permute", "topk_inds.permute", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_().expand", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange().unsqueeze_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.inds_to_offset", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.inds_to_offset", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.inds_to_offset"], ["def", "multi_scale_patch_match", "(", "self", ",", "f1", ",", "f2", ",", "ref", ",", "hierarchical_scale", ",", "pre", "=", "None", ",", "real_img", "=", "None", ")", ":", "\n", "        ", "if", "hierarchical_scale", "==", "0", ":", "\n", "            ", "y_cycle", "=", "None", "\n", "scale", "=", "64", "\n", "batch_size", ",", "channel", ",", "feature_height", ",", "feature_width", "=", "f1", ".", "size", "(", ")", "\n", "ref", "=", "F", ".", "avg_pool2d", "(", "ref", ",", "8", ",", "stride", "=", "8", ")", "\n", "ref", "=", "ref", ".", "view", "(", "batch_size", ",", "3", ",", "scale", "*", "scale", ")", "\n", "f1", "=", "f1", ".", "view", "(", "batch_size", ",", "channel", ",", "scale", "*", "scale", ")", "\n", "f2", "=", "f2", ".", "view", "(", "batch_size", ",", "channel", ",", "scale", "*", "scale", ")", "\n", "matmul_result", "=", "torch", ".", "matmul", "(", "f1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "f2", ")", "/", "self", ".", "opt", ".", "temperature", "\n", "mat", "=", "F", ".", "softmax", "(", "matmul_result", ",", "dim", "=", "-", "1", ")", "\n", "y", "=", "torch", ".", "matmul", "(", "mat", ",", "ref", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "if", "self", ".", "opt", ".", "phase", "is", "'train'", "and", "self", ".", "opt", ".", "weight_warp_cycle", ">", "0", ":", "\n", "                ", "mat_cycle", "=", "F", ".", "softmax", "(", "matmul_result", ".", "transpose", "(", "1", ",", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "y_cycle", "=", "torch", ".", "matmul", "(", "mat_cycle", ",", "y", ")", "\n", "y_cycle", "=", "y_cycle", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "3", ",", "scale", ",", "scale", ")", "\n", "", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "3", ",", "scale", ",", "scale", ")", "\n", "return", "mat", ",", "y", ",", "y_cycle", "\n", "", "if", "hierarchical_scale", "==", "1", ":", "\n", "            ", "scale", "=", "128", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_size", ",", "channel", ",", "feature_height", ",", "feature_width", "=", "f1", ".", "size", "(", ")", "\n", "topk_num", "=", "1", "\n", "search_window", "=", "4", "\n", "centering", "=", "1", "\n", "dilation", "=", "2", "\n", "total_candidate_num", "=", "topk_num", "*", "(", "search_window", "**", "2", ")", "\n", "topk_inds", "=", "torch", ".", "topk", "(", "pre", ",", "topk_num", ",", "dim", "=", "-", "1", ")", "[", "-", "1", "]", "\n", "inds", "=", "topk_inds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "topk_num", ",", "(", "scale", "//", "2", ")", ",", "(", "scale", "//", "2", ")", ")", ".", "float", "(", ")", "\n", "offset_x", ",", "offset_y", "=", "inds_to_offset", "(", "inds", ")", "\n", "dx", "=", "torch", ".", "arange", "(", "search_window", ",", "dtype", "=", "topk_inds", ".", "dtype", ",", "device", "=", "topk_inds", ".", "device", ")", ".", "unsqueeze_", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "search_window", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "-", "centering", "\n", "dy", "=", "torch", ".", "arange", "(", "search_window", ",", "dtype", "=", "topk_inds", ".", "dtype", ",", "device", "=", "topk_inds", ".", "device", ")", ".", "unsqueeze_", "(", "dim", "=", "0", ")", ".", "expand", "(", "search_window", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "-", "centering", "\n", "dx", "=", "dx", ".", "view", "(", "1", ",", "search_window", "**", "2", ",", "1", ",", "1", ")", "*", "dilation", "\n", "dy", "=", "dy", ".", "view", "(", "1", ",", "search_window", "**", "2", ",", "1", ",", "1", ")", "*", "dilation", "\n", "offset_x_up", "=", "F", ".", "interpolate", "(", "(", "2", "*", "offset_x", "+", "dx", ")", ",", "scale_factor", "=", "2", ")", "\n", "offset_y_up", "=", "F", ".", "interpolate", "(", "(", "2", "*", "offset_y", "+", "dy", ")", ",", "scale_factor", "=", "2", ")", "\n", "", "ref", "=", "F", ".", "avg_pool2d", "(", "ref", ",", "4", ",", "stride", "=", "4", ")", "\n", "ref", "=", "ref", ".", "view", "(", "batch_size", ",", "3", ",", "scale", "*", "scale", ")", "\n", "mat", ",", "y", "=", "self", ".", "patch_match", "(", "f1", ",", "f2", ",", "ref", ",", "offset_x_up", ",", "offset_y_up", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "3", ",", "scale", ",", "scale", ")", "\n", "return", "mat", ",", "y", "\n", "", "if", "hierarchical_scale", "==", "2", ":", "\n", "            ", "scale", "=", "256", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_size", ",", "channel", ",", "feature_height", ",", "feature_width", "=", "f1", ".", "size", "(", ")", "\n", "topk_num", "=", "1", "\n", "search_window", "=", "4", "\n", "centering", "=", "1", "\n", "dilation", "=", "2", "\n", "total_candidate_num", "=", "topk_num", "*", "(", "search_window", "**", "2", ")", "\n", "topk_inds", "=", "pre", "[", ":", ",", ":", ",", ":", "topk_num", "]", "\n", "inds", "=", "topk_inds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "topk_num", ",", "(", "scale", "//", "2", ")", ",", "(", "scale", "//", "2", ")", ")", ".", "float", "(", ")", "\n", "offset_x", ",", "offset_y", "=", "inds_to_offset", "(", "inds", ")", "\n", "dx", "=", "torch", ".", "arange", "(", "search_window", ",", "dtype", "=", "topk_inds", ".", "dtype", ",", "device", "=", "topk_inds", ".", "device", ")", ".", "unsqueeze_", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "search_window", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "-", "centering", "\n", "dy", "=", "torch", ".", "arange", "(", "search_window", ",", "dtype", "=", "topk_inds", ".", "dtype", ",", "device", "=", "topk_inds", ".", "device", ")", ".", "unsqueeze_", "(", "dim", "=", "0", ")", ".", "expand", "(", "search_window", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "-", "centering", "\n", "dx", "=", "dx", ".", "view", "(", "1", ",", "search_window", "**", "2", ",", "1", ",", "1", ")", "*", "dilation", "\n", "dy", "=", "dy", ".", "view", "(", "1", ",", "search_window", "**", "2", ",", "1", ",", "1", ")", "*", "dilation", "\n", "offset_x_up", "=", "F", ".", "interpolate", "(", "(", "2", "*", "offset_x", "+", "dx", ")", ",", "scale_factor", "=", "2", ")", "\n", "offset_y_up", "=", "F", ".", "interpolate", "(", "(", "2", "*", "offset_y", "+", "dy", ")", ",", "scale_factor", "=", "2", ")", "\n", "", "ref", "=", "F", ".", "avg_pool2d", "(", "ref", ",", "2", ",", "stride", "=", "2", ")", "\n", "ref", "=", "ref", ".", "view", "(", "batch_size", ",", "3", ",", "scale", "*", "scale", ")", "\n", "mat", ",", "y", "=", "self", ".", "patch_match", "(", "f1", ",", "f2", ",", "ref", ",", "offset_x_up", ",", "offset_y_up", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "3", ",", "scale", ",", "scale", ")", "\n", "return", "mat", ",", "y", "\n", "", "if", "hierarchical_scale", "==", "3", ":", "\n", "            ", "scale", "=", "512", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_size", ",", "channel", ",", "feature_height", ",", "feature_width", "=", "f1", ".", "size", "(", ")", "\n", "topk_num", "=", "1", "\n", "search_window", "=", "4", "\n", "centering", "=", "1", "\n", "dilation", "=", "2", "\n", "total_candidate_num", "=", "topk_num", "*", "(", "search_window", "**", "2", ")", "\n", "topk_inds", "=", "pre", "[", ":", ",", ":", ",", ":", "topk_num", "]", "\n", "inds", "=", "topk_inds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "topk_num", ",", "(", "scale", "//", "2", ")", ",", "(", "scale", "//", "2", ")", ")", ".", "float", "(", ")", "\n", "offset_x", ",", "offset_y", "=", "inds_to_offset", "(", "inds", ")", "\n", "dx", "=", "torch", ".", "arange", "(", "search_window", ",", "dtype", "=", "topk_inds", ".", "dtype", ",", "device", "=", "topk_inds", ".", "device", ")", ".", "unsqueeze_", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "search_window", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "-", "centering", "\n", "dy", "=", "torch", ".", "arange", "(", "search_window", ",", "dtype", "=", "topk_inds", ".", "dtype", ",", "device", "=", "topk_inds", ".", "device", ")", ".", "unsqueeze_", "(", "dim", "=", "0", ")", ".", "expand", "(", "search_window", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "-", "centering", "\n", "dx", "=", "dx", ".", "view", "(", "1", ",", "search_window", "**", "2", ",", "1", ",", "1", ")", "*", "dilation", "\n", "dy", "=", "dy", ".", "view", "(", "1", ",", "search_window", "**", "2", ",", "1", ",", "1", ")", "*", "dilation", "\n", "offset_x_up", "=", "F", ".", "interpolate", "(", "(", "2", "*", "offset_x", "+", "dx", ")", ",", "scale_factor", "=", "2", ")", "\n", "offset_y_up", "=", "F", ".", "interpolate", "(", "(", "2", "*", "offset_y", "+", "dy", ")", ",", "scale_factor", "=", "2", ")", "\n", "", "ref", "=", "ref", ".", "view", "(", "batch_size", ",", "3", ",", "scale", "*", "scale", ")", "\n", "mat", ",", "y", "=", "self", ".", "patch_match", "(", "f1", ",", "f2", ",", "ref", ",", "offset_x_up", ",", "offset_y_up", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "3", ",", "scale", ",", "scale", ")", "\n", "return", "mat", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.NoVGGHPMCorrespondence.forward": [[202, 246], ["correspondence.NoVGGHPMCorrespondence.adaptive_model_seg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "correspondence.NoVGGHPMCorrespondence.adaptive_model_img", "range", "theta.append", "theta.append", "theta.append", "theta.append", "phi.append", "phi.append", "phi.append", "phi.append", "range", "len", "util.feature_normalize", "util.feature_normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "correspondence.NoVGGHPMCorrespondence.adaptive_model_img", "range", "correspondence.match_kernel_and_pono_c", "correspondence.match_kernel_and_pono_c", "correspondence.match_kernel_and_pono_c", "correspondence.match_kernel_and_pono_c", "correspondence.match_kernel_and_pono_c", "correspondence.match_kernel_and_pono_c", "correspondence.match_kernel_and_pono_c", "correspondence.match_kernel_and_pono_c", "len", "ys.append", "len", "util.feature_normalize", "correspondence.NoVGGHPMCorrespondence.theta_0", "correspondence.NoVGGHPMCorrespondence.theta_1", "correspondence.NoVGGHPMCorrespondence.theta_2", "correspondence.NoVGGHPMCorrespondence.theta_3", "correspondence.NoVGGHPMCorrespondence.phi_0", "correspondence.NoVGGHPMCorrespondence.phi_1", "correspondence.NoVGGHPMCorrespondence.phi_2", "correspondence.NoVGGHPMCorrespondence.phi_3", "correspondence.NoVGGHPMCorrespondence.multi_scale_patch_match", "correspondence.NoVGGHPMCorrespondence.multi_scale_patch_match", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.feature_normalize", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.feature_normalize", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.feature_normalize", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.NoVGGHPMCorrespondence.multi_scale_patch_match", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.NoVGGHPMCorrespondence.multi_scale_patch_match"], ["", "", "def", "forward", "(", "self", ",", "ref_img", ",", "real_img", ",", "seg_map", ",", "ref_seg_map", ")", ":", "\n", "        ", "corr_out", "=", "{", "}", "\n", "seg_input", "=", "seg_map", "\n", "adaptive_feature_seg", "=", "self", ".", "adaptive_model_seg", "(", "seg_input", ",", "seg_input", ")", "\n", "ref_input", "=", "torch", ".", "cat", "(", "(", "ref_img", ",", "ref_seg_map", ")", ",", "dim", "=", "1", ")", "\n", "adaptive_feature_img", "=", "self", ".", "adaptive_model_img", "(", "ref_input", ",", "ref_input", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "adaptive_feature_seg", ")", ")", ":", "\n", "            ", "adaptive_feature_seg", "[", "i", "]", "=", "util", ".", "feature_normalize", "(", "adaptive_feature_seg", "[", "i", "]", ")", "\n", "adaptive_feature_img", "[", "i", "]", "=", "util", ".", "feature_normalize", "(", "adaptive_feature_img", "[", "i", "]", ")", "\n", "", "if", "self", ".", "opt", ".", "isTrain", "and", "self", ".", "opt", ".", "weight_novgg_featpair", ">", "0", ":", "\n", "            ", "real_input", "=", "torch", ".", "cat", "(", "(", "real_img", ",", "seg_map", ")", ",", "dim", "=", "1", ")", "\n", "adaptive_feature_img_pair", "=", "self", ".", "adaptive_model_img", "(", "real_input", ",", "real_input", ")", "\n", "loss_novgg_featpair", "=", "0", "\n", "weights", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "adaptive_feature_img_pair", ")", ")", ":", "\n", "                ", "adaptive_feature_img_pair", "[", "i", "]", "=", "util", ".", "feature_normalize", "(", "adaptive_feature_img_pair", "[", "i", "]", ")", "\n", "loss_novgg_featpair", "+=", "F", ".", "l1_loss", "(", "adaptive_feature_seg", "[", "i", "]", ",", "adaptive_feature_img_pair", "[", "i", "]", ")", "*", "weights", "[", "i", "]", "\n", "", "corr_out", "[", "'loss_novgg_featpair'", "]", "=", "loss_novgg_featpair", "*", "self", ".", "opt", ".", "weight_novgg_featpair", "\n", "", "cont_features", "=", "adaptive_feature_seg", "\n", "ref_features", "=", "adaptive_feature_img", "\n", "theta", "=", "[", "]", "\n", "phi", "=", "[", "]", "\n", "\"\"\"512x512\"\"\"", "\n", "theta", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "theta_0", "(", "cont_features", "[", "0", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "theta", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "theta_1", "(", "cont_features", "[", "1", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "theta", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "theta_2", "(", "cont_features", "[", "2", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "theta", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "theta_3", "(", "cont_features", "[", "3", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "phi", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "phi_0", "(", "ref_features", "[", "0", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "phi", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "phi_1", "(", "ref_features", "[", "1", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "phi", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "phi_2", "(", "ref_features", "[", "2", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "phi", ".", "append", "(", "match_kernel_and_pono_c", "(", "self", ".", "phi_3", "(", "ref_features", "[", "3", "]", ")", ",", "self", ".", "opt", ".", "match_kernel", ",", "self", ".", "opt", ".", "PONO_C", ")", ")", "\n", "ref", "=", "ref_img", "\n", "ys", "=", "[", "]", "\n", "m", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "theta", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "m", ",", "y", ",", "y_cycle", "=", "self", ".", "multi_scale_patch_match", "(", "theta", "[", "i", "]", ",", "phi", "[", "i", "]", ",", "ref", ",", "i", ",", "pre", "=", "m", ")", "\n", "if", "y_cycle", "is", "not", "None", ":", "\n", "                    ", "corr_out", "[", "'warp_cycle'", "]", "=", "y_cycle", "\n", "", "", "else", ":", "\n", "                ", "m", ",", "y", "=", "self", ".", "multi_scale_patch_match", "(", "theta", "[", "i", "]", ",", "phi", "[", "i", "]", ",", "ref", ",", "i", ",", "pre", "=", "m", ")", "\n", "", "ys", ".", "append", "(", "y", ")", "\n", "", "corr_out", "[", "'warp_out'", "]", "=", "ys", "\n", "return", "corr_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.correspondence.match_kernel_and_pono_c": [[18, 29], ["F.unfold.size", "torch.div", "torch.div", "torch.div", "F.unfold.view", "F.unfold.view", "torch.unfold", "F.unfold.mean", "torch.norm", "torch.norm", "torch.norm", "int"], "function", ["None"], ["def", "match_kernel_and_pono_c", "(", "feature", ",", "match_kernel", ",", "PONO_C", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "feature", ".", "size", "(", ")", "\n", "if", "match_kernel", "==", "1", ":", "\n", "        ", "feature", "=", "feature", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "feature", "=", "F", ".", "unfold", "(", "feature", ",", "kernel_size", "=", "match_kernel", ",", "padding", "=", "int", "(", "match_kernel", "//", "2", ")", ")", "\n", "", "dim_mean", "=", "1", "if", "PONO_C", "else", "-", "1", "\n", "feature", "=", "feature", "-", "feature", ".", "mean", "(", "dim", "=", "dim_mean", ",", "keepdim", "=", "True", ")", "\n", "feature_norm", "=", "torch", ".", "norm", "(", "feature", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "+", "eps", "\n", "feature", "=", "torch", ".", "div", "(", "feature", ",", "feature_norm", ")", "\n", "return", "feature", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.convert_1d_to_2d": [[10, 14], ["None"], "function", ["None"], ["def", "convert_1d_to_2d", "(", "index", ",", "base", "=", "64", ")", ":", "\n", "    ", "x", "=", "index", "//", "base", "\n", "y", "=", "index", "%", "base", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.convert_2d_to_1d": [[16, 18], ["None"], "function", ["None"], ["", "def", "convert_2d_to_1d", "(", "x", ",", "y", ",", "base", "=", "64", ")", ":", "\n", "    ", "return", "x", "*", "base", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.batch_meshgrid": [[20, 28], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "x_coordinate.expand().unsqueeze.expand().unsqueeze", "y_coordinate.expand().unsqueeze.expand().unsqueeze", "x_coordinate.expand().unsqueeze.expand", "y_coordinate.expand().unsqueeze.expand"], "function", ["None"], ["", "def", "batch_meshgrid", "(", "shape", ",", "device", ")", ":", "\n", "    ", "batch_size", ",", "_", ",", "height", ",", "width", "=", "shape", "\n", "x_range", "=", "torch", ".", "arange", "(", "0.0", ",", "width", ",", "device", "=", "device", ")", "\n", "y_range", "=", "torch", ".", "arange", "(", "0.0", ",", "height", ",", "device", "=", "device", ")", "\n", "x_coordinate", ",", "y_coordinate", "=", "torch", ".", "meshgrid", "(", "x_range", ",", "y_range", ")", "\n", "x_coordinate", "=", "x_coordinate", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "y_coordinate", "=", "y_coordinate", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x_coordinate", ",", "y_coordinate", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.inds_to_offset": [[30, 41], ["inds.size", "ops.batch_meshgrid"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.batch_meshgrid"], ["", "def", "inds_to_offset", "(", "inds", ")", ":", "\n", "    ", "\"\"\"\n    inds: b x number x h x w\n    \"\"\"", "\n", "shape", "=", "inds", ".", "size", "(", ")", "\n", "device", "=", "inds", ".", "device", "\n", "x_coordinate", ",", "y_coordinate", "=", "batch_meshgrid", "(", "shape", ",", "device", ")", "\n", "batch_size", ",", "_", ",", "height", ",", "width", "=", "shape", "\n", "x", "=", "inds", "//", "width", "\n", "y", "=", "inds", "%", "width", "\n", "return", "x", "-", "x_coordinate", ",", "y", "-", "y_coordinate", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.offset_to_inds": [[43, 51], ["offset_x.size", "ops.batch_meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "offset_x.size", "offset_x.size"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.batch_meshgrid"], ["", "def", "offset_to_inds", "(", "offset_x", ",", "offset_y", ")", ":", "\n", "    ", "shape", "=", "offset_x", ".", "size", "(", ")", "\n", "device", "=", "offset_x", ".", "device", "\n", "x_coordinate", ",", "y_coordinate", "=", "batch_meshgrid", "(", "shape", ",", "device", ")", "\n", "h", ",", "w", "=", "offset_x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x", "=", "torch", ".", "clamp", "(", "x_coordinate", "+", "offset_x", ",", "0", ",", "h", "-", "1", ")", "\n", "y", "=", "torch", ".", "clamp", "(", "y_coordinate", "+", "offset_y", ",", "0", ",", "w", "-", "1", ")", "\n", "return", "x", "*", "offset_x", ".", "size", "(", ")", "[", "3", "]", "+", "y", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.normalization.SPADE.__init__": [[49, 85], ["torch.Module.__init__", "config_text.startswith", "re.search", "str", "int", "re.search.group", "re.search.group", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "label_nc", ",", "PONO", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "config_text", ".", "startswith", "(", "'spade'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'spade(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "self", ".", "pad_type", "=", "'nozero'", "\n", "if", "PONO", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "PositionalNorm2d", "\n", "", "elif", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "True", ")", "\n", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not a recognized param-free norm type in SPADE'", "%", "param_free_norm_type", ")", "\n", "", "nhidden", "=", "128", "\n", "pw", "=", "ks", "//", "2", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "pw", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.normalization.SPADE.forward": [[86, 98], ["normalization.SPADE.param_free_norm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SPADE.mlp_shared", "normalization.SPADE.mlp_gamma", "normalization.SPADE.mlp_beta", "normalization.SPADE.mlp_gamma", "normalization.SPADE.mlp_beta", "normalization.SPADE.pad", "normalization.SPADE.pad", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "segmap", ")", ":", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "actv", "=", "self", ".", "mlp_shared", "(", "segmap", ")", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "gamma", "=", "self", ".", "mlp_gamma", "(", "self", ".", "pad", "(", "actv", ")", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "self", ".", "pad", "(", "actv", ")", ")", "\n", "", "else", ":", "\n", "            ", "gamma", "=", "self", ".", "mlp_gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "actv", ")", "\n", "", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.normalization.get_nonspade_norm_layer": [[11, 38], ["hasattr", "torch.weight.size", "norm_type.startswith", "torch.Sequential", "getattr", "torch", "getattr", "delattr", "torch.register_parameter", "torch.BatchNorm2d", "len", "normalization.get_nonspade_norm_layer.get_out_channel"], "function", ["None"], ["def", "get_nonspade_norm_layer", "(", "opt", ",", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "def", "get_out_channel", "(", "layer", ")", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'out_channels'", ")", ":", "\n", "            ", "return", "getattr", "(", "layer", ",", "'out_channels'", ")", "\n", "", "return", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "", "def", "add_norm_layer", "(", "layer", ")", ":", "\n", "        ", "nonlocal", "norm_type", "\n", "if", "norm_type", ".", "startswith", "(", "'spectral'", ")", ":", "\n", "            ", "layer", "=", "spectral_norm", "(", "layer", ")", "\n", "subnorm_type", "=", "norm_type", "[", "len", "(", "'spectral'", ")", ":", "]", "\n", "", "else", ":", "\n", "            ", "subnorm_type", "=", "norm_type", "\n", "", "if", "subnorm_type", "==", "'none'", "or", "len", "(", "subnorm_type", ")", "==", "0", ":", "\n", "            ", "return", "layer", "\n", "", "if", "getattr", "(", "layer", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "delattr", "(", "layer", ",", "'bias'", ")", "\n", "layer", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "if", "subnorm_type", "==", "'batch'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "elif", "subnorm_type", "==", "'sync_batch'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "elif", "subnorm_type", "==", "'instance'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'normalization layer %s is not recognized'", "%", "subnorm_type", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "layer", ",", "norm_layer", ")", "\n", "", "return", "add_norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.normalization.PositionalNorm2d": [[40, 46], ["x.mean", "x.var().add().sqrt", "x.var().add", "x.var"], "function", ["None"], ["", "def", "PositionalNorm2d", "(", "x", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "# x: B*C*W*H normalize in C dim", "\n", "    ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "add", "(", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "output", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.ResidualBlock.__init__": [[12, 23], ["torch.Module.__init__", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "padding", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", ",", "\n", "self", ".", "relu", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "padding", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.ResidualBlock.forward": [[25, 28], ["architecture.ResidualBlock.relu", "architecture.ResidualBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "x", "+", "self", ".", "model", "(", "x", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.__init__": [[31, 65], ["torch.Module.__init__", "min", "opt.norm_G.replace", "models.networks.normalization.SPADE", "models.networks.normalization.SPADE", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch", "torch", "torch", "torch", "torch", "torch", "models.networks.normalization.SPADE", "torch", "torch", "torch"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "opt", ",", "use_se", "=", "False", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "pad_type", "=", "'nozero'", "\n", "self", ".", "use_se", "=", "use_se", "\n", "# create conv layers", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "# apply spectral norm if specified", "\n", "", "if", "'spectral'", "in", "opt", ".", "norm_G", ":", "\n", "            ", "self", ".", "conv_0", "=", "spectral_norm", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "spectral_norm", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                ", "self", ".", "conv_s", "=", "spectral_norm", "(", "self", ".", "conv_s", ")", "\n", "# define normalization layers", "\n", "", "", "spade_config_str", "=", "opt", ".", "norm_G", ".", "replace", "(", "'spectral'", ",", "''", ")", "\n", "if", "'spade_ic'", "in", "opt", ":", "\n", "            ", "ic", "=", "opt", ".", "spade_ic", "\n", "", "else", ":", "\n", "            ", "ic", "=", "4", "*", "3", "+", "opt", ".", "label_nc", "\n", "", "self", ".", "norm_0", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "ic", ",", "PONO", "=", "opt", ".", "PONO", ")", "\n", "self", ".", "norm_1", "=", "SPADE", "(", "spade_config_str", ",", "fmiddle", ",", "ic", ",", "PONO", "=", "opt", ".", "PONO", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "norm_s", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "ic", ",", "PONO", "=", "opt", ".", "PONO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.forward": [[66, 76], ["architecture.SPADEResnetBlock.shortcut", "architecture.SPADEResnetBlock.conv_0", "architecture.SPADEResnetBlock.conv_1", "architecture.SPADEResnetBlock.conv_0", "architecture.SPADEResnetBlock.conv_1", "architecture.SPADEResnetBlock.pad", "architecture.SPADEResnetBlock.pad", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.norm_0", "architecture.SPADEResnetBlock.norm_1", "architecture.SPADEResnetBlock.norm_0", "architecture.SPADEResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.shortcut", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg1", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "seg1", ")", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "pad", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg1", ")", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "pad", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg1", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg1", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg1", ")", ")", ")", "\n", "", "out", "=", "x_s", "+", "dx", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.shortcut": [[77, 83], ["architecture.SPADEResnetBlock.conv_s", "architecture.SPADEResnetBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg1", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg1", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.SPADEResnetBlock.actvn": [[84, 86], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.VGG19_feature_color_torchversion.__init__": [[93, 125], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "pool", "=", "'max'", ",", "vgg_normal_correct", "=", "False", ",", "ic", "=", "3", ")", ":", "\n", "        ", "super", "(", "VGG19_feature_color_torchversion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_normal_correct", "=", "vgg_normal_correct", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "ic", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "pool", "==", "'max'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "elif", "pool", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.architecture.VGG19_feature_color_torchversion.forward": [[126, 155], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "architecture.VGG19_feature_color_torchversion.pool1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "architecture.VGG19_feature_color_torchversion.pool2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "architecture.VGG19_feature_color_torchversion.pool3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "architecture.VGG19_feature_color_torchversion.pool4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "architecture.VGG19_feature_color_torchversion.pool5", "util.util.vgg_preprocess", "architecture.VGG19_feature_color_torchversion.conv1_1", "architecture.VGG19_feature_color_torchversion.conv1_2", "architecture.VGG19_feature_color_torchversion.conv2_1", "architecture.VGG19_feature_color_torchversion.conv2_2", "architecture.VGG19_feature_color_torchversion.conv3_1", "architecture.VGG19_feature_color_torchversion.conv3_2", "architecture.VGG19_feature_color_torchversion.conv3_3", "architecture.VGG19_feature_color_torchversion.conv3_4", "architecture.VGG19_feature_color_torchversion.conv4_1", "architecture.VGG19_feature_color_torchversion.conv4_2", "architecture.VGG19_feature_color_torchversion.conv4_3", "architecture.VGG19_feature_color_torchversion.conv4_4", "architecture.VGG19_feature_color_torchversion.conv5_1", "architecture.VGG19_feature_color_torchversion.conv5_2", "architecture.VGG19_feature_color_torchversion.conv5_3", "architecture.VGG19_feature_color_torchversion.conv5_4"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.vgg_preprocess"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "out_keys", ",", "preprocess", "=", "True", ")", ":", "\n", "        ", "''' \n        NOTE: input tensor should range in [0,1]\n        '''", "\n", "out", "=", "{", "}", "\n", "if", "preprocess", ":", "\n", "            ", "x", "=", "vgg_preprocess", "(", "x", ",", "vgg_normal_correct", "=", "self", ".", "vgg_normal_correct", ")", "\n", "", "out", "[", "'r11'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "out", "[", "'r12'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_2", "(", "out", "[", "'r11'", "]", ")", ")", "\n", "out", "[", "'p1'", "]", "=", "self", ".", "pool1", "(", "out", "[", "'r12'", "]", ")", "\n", "out", "[", "'r21'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_1", "(", "out", "[", "'p1'", "]", ")", ")", "\n", "out", "[", "'r22'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_2", "(", "out", "[", "'r21'", "]", ")", ")", "\n", "out", "[", "'p2'", "]", "=", "self", ".", "pool2", "(", "out", "[", "'r22'", "]", ")", "\n", "out", "[", "'r31'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_1", "(", "out", "[", "'p2'", "]", ")", ")", "\n", "out", "[", "'r32'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_2", "(", "out", "[", "'r31'", "]", ")", ")", "\n", "out", "[", "'r33'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_3", "(", "out", "[", "'r32'", "]", ")", ")", "\n", "out", "[", "'r34'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_4", "(", "out", "[", "'r33'", "]", ")", ")", "\n", "out", "[", "'p3'", "]", "=", "self", ".", "pool3", "(", "out", "[", "'r34'", "]", ")", "\n", "out", "[", "'r41'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_1", "(", "out", "[", "'p3'", "]", ")", ")", "\n", "out", "[", "'r42'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_2", "(", "out", "[", "'r41'", "]", ")", ")", "\n", "out", "[", "'r43'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_3", "(", "out", "[", "'r42'", "]", ")", ")", "\n", "out", "[", "'r44'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_4", "(", "out", "[", "'r43'", "]", ")", ")", "\n", "out", "[", "'p4'", "]", "=", "self", ".", "pool4", "(", "out", "[", "'r44'", "]", ")", "\n", "out", "[", "'r51'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_1", "(", "out", "[", "'p4'", "]", ")", ")", "\n", "out", "[", "'r52'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_2", "(", "out", "[", "'r51'", "]", ")", ")", "\n", "out", "[", "'r53'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_3", "(", "out", "[", "'r52'", "]", ")", ")", "\n", "out", "[", "'r54'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_4", "(", "out", "[", "'r53'", "]", ")", ")", "\n", "out", "[", "'p5'", "]", "=", "self", ".", "pool5", "(", "out", "[", "'r54'", "]", ")", "\n", "return", "[", "out", "[", "key", "]", "for", "key", "in", "out_keys", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.__init__": [[10, 31], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "'ls'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'original'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'w'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected gan_mode {}'", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.get_target_tensor": [[32, 43], ["loss.GANLoss.real_label_tensor.expand_as", "loss.GANLoss.fake_label_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.real_label_tensor.requires_grad_", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.fake_label_tensor.requires_grad_", "loss.GANLoss.Tensor", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fake_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "fake_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.get_zero_tensor": [[44, 49], ["loss.GANLoss.zero_tensor.expand_as().type_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.zero_tensor.requires_grad_", "loss.GANLoss.zero_tensor.expand_as", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", ".", "type_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.loss": [[50, 76], ["F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mse_loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mse_loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mse_loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.get_zero_tensor", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.get_zero_tensor"], ["", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "'original'", ":", "# cross entropy loss", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "'ls'", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.__call__": [[77, 90], ["isinstance", "loss.GANLoss.loss", "isinstance", "loss.GANLoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "loss.GANLoss.size", "loss.GANLoss.view", "len", "loss.GANLoss.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.loss", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.loss.GANLoss.loss"], ["", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "pred_i", "in", "input", ":", "\n", "                ", "if", "isinstance", "(", "pred_i", ",", "list", ")", ":", "\n", "                    ", "pred_i", "=", "pred_i", "[", "-", "1", "]", "\n", "", "loss_tensor", "=", "self", ".", "loss", "(", "pred_i", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "bs", "=", "1", "if", "len", "(", "loss_tensor", ".", "size", "(", ")", ")", "==", "0", "else", "loss_tensor", ".", "size", "(", "0", ")", "\n", "new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.generator.SPADEGenerator.modify_commandline_options": [[14, 18], ["parser.set_defaults"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "norm_G", "=", "'spectralspadesyncbatch3x3'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.generator.SPADEGenerator.__init__": [[19, 36], ["models.networks.base_network.BaseNetwork.__init__", "generator.SPADEGenerator.compute_latent_vector_size", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.generator.SPADEGenerator.compute_latent_vector_size"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "nf", "=", "opt", ".", "ngf", "\n", "self", ".", "sw", ",", "self", ".", "sh", "=", "self", ".", "compute_latent_vector_size", "(", "opt", ")", "\n", "ic", "=", "4", "*", "3", "+", "opt", ".", "label_nc", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "ic", ",", "8", "*", "nf", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "head_0", "=", "SPADEResnetBlock", "(", "8", "*", "nf", ",", "8", "*", "nf", ",", "opt", ")", "\n", "self", ".", "G_middle_0", "=", "SPADEResnetBlock", "(", "8", "*", "nf", ",", "8", "*", "nf", ",", "opt", ")", "\n", "self", ".", "G_middle_1", "=", "SPADEResnetBlock", "(", "8", "*", "nf", ",", "8", "*", "nf", ",", "opt", ")", "\n", "self", ".", "up_0", "=", "SPADEResnetBlock", "(", "8", "*", "nf", ",", "8", "*", "nf", ",", "opt", ")", "\n", "self", ".", "up_1", "=", "SPADEResnetBlock", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "opt", ")", "\n", "self", ".", "up_2", "=", "SPADEResnetBlock", "(", "4", "*", "nf", ",", "2", "*", "nf", ",", "opt", ")", "\n", "self", ".", "up_3", "=", "SPADEResnetBlock", "(", "2", "*", "nf", ",", "1", "*", "nf", ",", "opt", ")", "\n", "final_nc", "=", "nf", "\n", "self", ".", "conv_img", "=", "nn", ".", "Conv2d", "(", "final_nc", ",", "3", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.generator.SPADEGenerator.compute_latent_vector_size": [[37, 42], ["round"], "methods", ["None"], ["", "def", "compute_latent_vector_size", "(", "self", ",", "opt", ")", ":", "\n", "        ", "num_up_layers", "=", "5", "\n", "sw", "=", "opt", ".", "crop_size", "//", "(", "2", "**", "num_up_layers", ")", "\n", "sh", "=", "round", "(", "sw", "/", "opt", ".", "aspect_ratio", ")", "\n", "return", "sw", ",", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.generator.SPADEGenerator.forward": [[43, 62], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "generator.SPADEGenerator.fc", "generator.SPADEGenerator.head_0", "generator.SPADEGenerator.up", "generator.SPADEGenerator.G_middle_0", "generator.SPADEGenerator.G_middle_1", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_0", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_1", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_2", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_3", "generator.SPADEGenerator.conv_img", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "warp_out", "=", "None", ")", ":", "\n", "        ", "seg", "=", "torch", ".", "cat", "(", "(", "F", ".", "interpolate", "(", "warp_out", "[", "0", "]", ",", "size", "=", "(", "512", ",", "512", ")", ")", ",", "F", ".", "interpolate", "(", "warp_out", "[", "1", "]", ",", "size", "=", "(", "512", ",", "512", ")", ")", ",", "F", ".", "interpolate", "(", "warp_out", "[", "2", "]", ",", "size", "=", "(", "512", ",", "512", ")", ")", ",", "warp_out", "[", "3", "]", ",", "input", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "(", "self", ".", "sh", ",", "self", ".", "sw", ")", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "head_0", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "G_middle_0", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "G_middle_1", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_0", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_1", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_2", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_3", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "conv_img", "(", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.Evaluate.__init__": [[17, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter_size", "=", "3", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.Evaluate.forward": [[22, 49], ["left_features.get_device", "offset_x.size", "offset_to_inds", "matching_inds.permute().view().float.permute().view().float.view().permute().long", "base_batch.view.view.view", "range", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "matching_inds.permute().view().float.permute().view().float.permute().view().float", "inds_to_offset", "match_cost_topk.permute", "left_features.size", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "idx.contiguous().view.contiguous().view.contiguous().view", "right_features_select.view().transpose.view().transpose.view().transpose", "torch.softmax.append", "matching_inds.permute().view().float.permute().view().float.view().permute", "matching_inds_add_base.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "matching_inds.permute().view().float.permute().view().float.permute().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "idx.contiguous().view.contiguous().view.contiguous", "right_features_select.view().transpose.view().transpose.view", "matching_inds.permute().view().float.permute().view().float.view", "matching_inds.permute().view().float.permute().view().float.permute", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.offset_to_inds", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.inds_to_offset"], ["", "def", "forward", "(", "self", ",", "left_features", ",", "right_features", ",", "offset_x", ",", "offset_y", ")", ":", "\n", "        ", "device", "=", "left_features", ".", "get_device", "(", ")", "\n", "batch_size", ",", "num", ",", "height", ",", "width", "=", "offset_x", ".", "size", "(", ")", "\n", "channel", "=", "left_features", ".", "size", "(", ")", "[", "1", "]", "\n", "matching_inds", "=", "offset_to_inds", "(", "offset_x", ",", "offset_y", ")", "\n", "matching_inds", "=", "matching_inds", ".", "view", "(", "batch_size", ",", "num", ",", "height", "*", "width", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "long", "(", ")", "\n", "base_batch", "=", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "*", "(", "height", "*", "width", ")", "\n", "base_batch", "=", "base_batch", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "matching_inds_add_base", "=", "matching_inds", "+", "base_batch", "\n", "right_features_view", "=", "right_features", "\n", "match_cost", "=", "[", "]", "\n", "# using A[:, idx]", "\n", "for", "i", "in", "range", "(", "matching_inds_add_base", ".", "size", "(", ")", "[", "-", "1", "]", ")", ":", "\n", "            ", "idx", "=", "matching_inds_add_base", "[", ":", ",", ":", ",", "i", "]", "\n", "idx", "=", "idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "right_features_select", "=", "right_features_view", "[", ":", ",", "idx", "]", "\n", "right_features_select", "=", "right_features_select", ".", "view", "(", "channel", ",", "batch_size", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "match_cost_i", "=", "torch", ".", "sum", "(", "left_features", "*", "right_features_select", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "self", ".", "temperature", "\n", "match_cost", ".", "append", "(", "match_cost_i", ")", "\n", "", "match_cost", "=", "torch", ".", "cat", "(", "match_cost", ",", "dim", "=", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "match_cost", "=", "F", ".", "softmax", "(", "match_cost", ",", "dim", "=", "-", "1", ")", "\n", "match_cost_topk", ",", "match_cost_topk_indices", "=", "torch", ".", "topk", "(", "match_cost", ",", "num", "//", "self", ".", "filter_size", ",", "dim", "=", "-", "1", ")", "\n", "matching_inds", "=", "torch", ".", "gather", "(", "matching_inds", ",", "-", "1", ",", "match_cost_topk_indices", ")", "\n", "matching_inds", "=", "matching_inds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "height", ",", "width", ")", ".", "float", "(", ")", "\n", "offset_x", ",", "offset_y", "=", "inds_to_offset", "(", "matching_inds", ")", "\n", "corr", "=", "match_cost_topk", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "offset_x", ",", "offset_y", ",", "corr", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.PropagationFaster.__init__": [[52, 54], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.PropagationFaster.forward": [[55, 77], ["torch.cat.get_device", "torch.cat.get_device", "torch.cat.get_device", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "offset_x", ",", "offset_y", ",", "propagation_type", "=", "\"horizontal\"", ")", ":", "\n", "        ", "device", "=", "offset_x", ".", "get_device", "(", ")", "\n", "self", ".", "horizontal_zeros", "=", "torch", ".", "zeros", "(", "(", "offset_x", ".", "size", "(", ")", "[", "0", "]", ",", "offset_x", ".", "size", "(", ")", "[", "1", "]", ",", "offset_x", ".", "size", "(", ")", "[", "2", "]", ",", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "vertical_zeros", "=", "torch", ".", "zeros", "(", "(", "offset_x", ".", "size", "(", ")", "[", "0", "]", ",", "offset_x", ".", "size", "(", ")", "[", "1", "]", ",", "1", ",", "offset_x", ".", "size", "(", ")", "[", "3", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "if", "propagation_type", "is", "\"horizontal\"", ":", "\n", "            ", "offset_x", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "self", ".", "horizontal_zeros", ",", "offset_x", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ",", "dim", "=", "3", ")", ",", "\n", "offset_x", ",", "\n", "torch", ".", "cat", "(", "(", "offset_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ",", "self", ".", "horizontal_zeros", ")", ",", "dim", "=", "3", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "offset_y", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "self", ".", "horizontal_zeros", ",", "offset_y", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ",", "dim", "=", "3", ")", ",", "\n", "offset_y", ",", "\n", "torch", ".", "cat", "(", "(", "offset_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ",", "self", ".", "horizontal_zeros", ")", ",", "dim", "=", "3", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "offset_x", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "self", ".", "vertical_zeros", ",", "offset_x", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ",", "dim", "=", "2", ")", ",", "\n", "offset_x", ",", "\n", "torch", ".", "cat", "(", "(", "offset_x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ",", "self", ".", "vertical_zeros", ")", ",", "dim", "=", "2", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "offset_y", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "(", "self", ".", "vertical_zeros", ",", "offset_y", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", ",", "dim", "=", "2", ")", ",", "\n", "offset_y", ",", "\n", "torch", ".", "cat", "(", "(", "offset_y", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ",", "self", ".", "vertical_zeros", ")", ",", "dim", "=", "2", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "offset_x", ",", "offset_y", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.PatchMatchOnce.__init__": [[80, 84], ["torch.Module.__init__", "patch_match.PropagationFaster", "patch_match.Evaluate"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "propagation", "=", "PropagationFaster", "(", ")", "\n", "self", ".", "evaluate", "=", "Evaluate", "(", "opt", ".", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.PatchMatchOnce.forward": [[85, 98], ["random.random", "patch_match.PatchMatchOnce.propagation", "patch_match.PatchMatchOnce.evaluate", "patch_match.PatchMatchOnce.propagation", "patch_match.PatchMatchOnce.evaluate", "patch_match.PatchMatchOnce.propagation", "patch_match.PatchMatchOnce.evaluate", "patch_match.PatchMatchOnce.propagation", "patch_match.PatchMatchOnce.evaluate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "left_features", ",", "right_features", ",", "offset_x", ",", "offset_y", ")", ":", "\n", "        ", "prob", "=", "random", ".", "random", "(", ")", "\n", "if", "prob", "<", "0.5", ":", "\n", "            ", "offset_x", ",", "offset_y", "=", "self", ".", "propagation", "(", "offset_x", ",", "offset_y", ",", "\"horizontal\"", ")", "\n", "offset_x", ",", "offset_y", ",", "_", "=", "self", ".", "evaluate", "(", "left_features", ",", "right_features", ",", "offset_x", ",", "offset_y", ")", "\n", "offset_x", ",", "offset_y", "=", "self", ".", "propagation", "(", "offset_x", ",", "offset_y", ",", "\"vertical\"", ")", "\n", "offset_x", ",", "offset_y", ",", "corr", "=", "self", ".", "evaluate", "(", "left_features", ",", "right_features", ",", "offset_x", ",", "offset_y", ")", "\n", "", "else", ":", "\n", "            ", "offset_x", ",", "offset_y", "=", "self", ".", "propagation", "(", "offset_x", ",", "offset_y", ",", "\"vertical\"", ")", "\n", "offset_x", ",", "offset_y", ",", "_", "=", "self", ".", "evaluate", "(", "left_features", ",", "right_features", ",", "offset_x", ",", "offset_y", ")", "\n", "offset_x", ",", "offset_y", "=", "self", ".", "propagation", "(", "offset_x", ",", "offset_y", ",", "\"horizontal\"", ")", "\n", "offset_x", ",", "offset_y", ",", "corr", "=", "self", ".", "evaluate", "(", "left_features", ",", "right_features", ",", "offset_x", ",", "offset_y", ")", "\n", "", "return", "offset_x", ",", "offset_y", ",", "corr", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.PatchMatchGRU.__init__": [[101, 122], ["torch.Module.__init__", "patch_match.PatchMatchOnce", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.networks.convgru.BasicUpdateBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patch_match_one_step", "=", "PatchMatchOnce", "(", "opt", ")", "\n", "self", ".", "temperature", "=", "opt", ".", "temperature", "\n", "self", ".", "iters", "=", "opt", ".", "iteration_count", "\n", "input_dim", "=", "opt", ".", "nef", "\n", "hidden_dim", "=", "32", "\n", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "hidden_dim", ",", "affine", "=", "False", ")", "\n", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\"\"\"\n        concat left and right features\n        \"\"\"", "\n", "self", ".", "initial_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_dim", "*", "2", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "norm", ",", "\n", "relu", ",", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm", ",", "\n", "relu", ",", "\n", ")", "\n", "self", ".", "refine_net", "=", "BasicUpdateBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.patch_match.PatchMatchGRU.forward": [[123, 170], ["left_features.view.view.get_device", "left_features.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_match.PatchMatchGRU.initial_layer", "left_features.view.view.view", "right_features.view.view.view", "right_features.view.view.transpose().contiguous().view", "range", "range", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.softmax", "torch.softmax", "torch.softmax", "right_input.transpose().contiguous().view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "initial_offset_x.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "corr.view.view.view", "patch_match.PatchMatchGRU.refine_net", "idx.contiguous().view.contiguous().view.contiguous().view", "right_features_select.view().transpose.view().transpose.view().transpose", "torch.softmax.append", "idx.contiguous().view.contiguous().view.contiguous().view", "right_input_select.view().transpose.view().transpose.view().transpose", "right_features.view.view.transpose().contiguous", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "patch_match.PatchMatchGRU.patch_match_one_step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "offset_to_inds", "matching_inds.view().permute().long.view().permute().long.view().permute().long", "base_batch.view.view.view", "matching_inds_plus_base.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "right_input.transpose().contiguous", "right_input.size", "torch.softmax.size", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "torch.arange().to().long", "idx.contiguous().view.contiguous().view.contiguous", "right_features_select.view().transpose.view().transpose.view", "idx.contiguous().view.contiguous().view.contiguous", "right_input_select.view().transpose.view().transpose.view", "match_cost[].unsqueeze", "right_features.view.view.transpose", "matching_inds.view().permute().long.view().permute().long.view().permute", "right_input.transpose", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "right_input.size", "matching_inds.view().permute().long.view().permute().long.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ops.offset_to_inds"], ["", "def", "forward", "(", "self", ",", "left_features", ",", "right_features", ",", "right_input", ",", "initial_offset_x", ",", "initial_offset_y", ")", ":", "\n", "        ", "device", "=", "left_features", ".", "get_device", "(", ")", "\n", "batch_size", ",", "channel", ",", "height", ",", "width", "=", "left_features", ".", "size", "(", ")", "\n", "num", "=", "initial_offset_x", ".", "size", "(", ")", "[", "1", "]", "\n", "initial_input", "=", "torch", ".", "cat", "(", "(", "left_features", ",", "right_features", ")", ",", "dim", "=", "1", ")", "\n", "hidden", "=", "self", ".", "initial_layer", "(", "initial_input", ")", "\n", "left_features", "=", "left_features", ".", "view", "(", "batch_size", ",", "-", "1", ",", "height", "*", "width", ")", "\n", "right_features", "=", "right_features", ".", "view", "(", "batch_size", ",", "-", "1", ",", "height", "*", "width", ")", "\n", "right_features_view", "=", "right_features", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channel", ",", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "offset_x", ",", "offset_y", "=", "initial_offset_x", ",", "initial_offset_y", "\n", "", "for", "it", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "offset_x", ",", "offset_y", ",", "corr", "=", "self", ".", "patch_match_one_step", "(", "left_features", ",", "right_features_view", ",", "offset_x", ",", "offset_y", ")", "\n", "", "\"\"\"GRU refinement\"\"\"", "\n", "flow", "=", "torch", ".", "cat", "(", "(", "offset_x", ",", "offset_y", ")", ",", "dim", "=", "1", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch_size", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "hidden", ",", "delta_offset_x", ",", "delta_offset_y", "=", "self", ".", "refine_net", "(", "hidden", ",", "corr", ",", "flow", ")", "\n", "offset_x", "=", "offset_x", "+", "delta_offset_x", "\n", "offset_y", "=", "offset_y", "+", "delta_offset_y", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "matching_inds", "=", "offset_to_inds", "(", "offset_x", ",", "offset_y", ")", "\n", "matching_inds", "=", "matching_inds", ".", "view", "(", "batch_size", ",", "num", ",", "height", "*", "width", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "long", "(", ")", "\n", "base_batch", "=", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "*", "(", "height", "*", "width", ")", "\n", "base_batch", "=", "base_batch", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "matching_inds_plus_base", "=", "matching_inds", "+", "base_batch", "\n", "", "", "match_cost", "=", "[", "]", "\n", "# using A[:, idx]", "\n", "for", "i", "in", "range", "(", "matching_inds_plus_base", ".", "size", "(", ")", "[", "-", "1", "]", ")", ":", "\n", "            ", "idx", "=", "matching_inds_plus_base", "[", ":", ",", ":", ",", "i", "]", "\n", "idx", "=", "idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "right_features_select", "=", "right_features_view", "[", ":", ",", "idx", "]", "\n", "right_features_select", "=", "right_features_select", ".", "view", "(", "channel", ",", "batch_size", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "match_cost_i", "=", "torch", ".", "sum", "(", "left_features", "*", "right_features_select", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "self", ".", "temperature", "\n", "match_cost", ".", "append", "(", "match_cost_i", ")", "\n", "", "match_cost", "=", "torch", ".", "cat", "(", "match_cost", ",", "dim", "=", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "match_cost", "=", "F", ".", "softmax", "(", "match_cost", ",", "dim", "=", "-", "1", ")", "\n", "right_input_view", "=", "right_input", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "right_input", ".", "size", "(", ")", "[", "1", "]", ",", "-", "1", ")", "\n", "warp", "=", "torch", ".", "zeros_like", "(", "right_input", ")", "\n", "# using A[:, idx]", "\n", "for", "i", "in", "range", "(", "match_cost", ".", "size", "(", ")", "[", "-", "1", "]", ")", ":", "\n", "            ", "idx", "=", "matching_inds_plus_base", "[", ":", ",", ":", ",", "i", "]", "\n", "idx", "=", "idx", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "right_input_select", "=", "right_input_view", "[", ":", ",", "idx", "]", "\n", "right_input_select", "=", "right_input_select", ".", "view", "(", "right_input", ".", "size", "(", ")", "[", "1", "]", ",", "batch_size", ",", "-", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "warp", "=", "warp", "+", "right_input_select", "*", "match_cost", "[", ":", ",", ":", ",", "i", "]", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "", "return", "matching_inds", ",", "warp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.base_network.BaseNetwork.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.base_network.BaseNetwork.modify_commandline_options": [[13, 16], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.base_network.BaseNetwork.print_network": [[17, 26], ["isinstance", "base_network.BaseNetwork.parameters", "print", "param.numel", "type"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "list", ")", ":", "\n", "            ", "self", "=", "self", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network [%s] was created. Total number of parameters: %.1f million. '", "\n", "'To see the architecture, do print(network).'", "\n", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "num_params", "/", "1000000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.base_network.BaseNetwork.init_weights": [[27, 57], ["base_network.BaseNetwork.apply", "base_network.BaseNetwork.children", "hasattr", "classname.find", "m.init_weights", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "m.reset_parameters", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.base_network.BaseNetwork.init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier_uniform'", ":", "\n", "                    ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'none'", ":", "# uses pytorch's default init method", "\n", "                    ", "m", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "# propagate to children", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'init_weights'", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", "init_type", ",", "gain", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ContextualLoss.ContextualLoss_forward.__init__": [[18, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "ContextualLoss_forward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.ContextualLoss.ContextualLoss_forward.forward": [[23, 72], ["util.util.feature_normalize().view", "util.util.feature_normalize().view", "util.util.feature_normalize().view.permute", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "util.util.feature_normalize", "util.util.feature_normalize", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "util.util.feature_normalize().view.mean().unsqueeze", "util.util.feature_normalize().view.mean().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze().unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "util.util.feature_normalize().view.mean", "util.util.feature_normalize().view.mean", "util.util.feature_normalize().view.view().mean().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze", "util.util.feature_normalize().view.view().mean", "util.util.feature_normalize().view.view().mean", "util.util.feature_normalize().view.view", "util.util.feature_normalize().view.view"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.feature_normalize", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.feature_normalize"], ["", "def", "forward", "(", "self", ",", "X_features", ",", "Y_features", ",", "h", "=", "0.1", ",", "feature_centering", "=", "True", ")", ":", "\n", "        ", "'''\n        X_features&Y_features are are feature vectors or feature 2d array\n        h: bandwidth\n        return the per-sample loss\n        '''", "\n", "batch_size", "=", "X_features", ".", "shape", "[", "0", "]", "\n", "feature_depth", "=", "X_features", ".", "shape", "[", "1", "]", "\n", "feature_size", "=", "X_features", ".", "shape", "[", "2", "]", "\n", "\n", "# to normalized feature vectors", "\n", "if", "feature_centering", ":", "\n", "            ", "if", "self", ".", "opt", ".", "PONO", ":", "\n", "                ", "X_features", "=", "X_features", "-", "Y_features", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "Y_features", "=", "Y_features", "-", "Y_features", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "X_features", "=", "X_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "Y_features", "=", "Y_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# X_features = X_features - Y_features.mean(dim=1).unsqueeze(dim=1)", "\n", "# Y_features = Y_features - Y_features.mean(dim=1).unsqueeze(dim=1)", "\n", "\n", "", "", "X_features", "=", "feature_normalize", "(", "X_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size * feature_size", "\n", "Y_features", "=", "feature_normalize", "(", "Y_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size * feature_size", "\n", "\n", "# X_features = F.unfold(", "\n", "#     X_features, kernel_size=self.opt.match_kernel, stride=1, padding=int(self.opt.match_kernel // 2))  # batch_size * feature_depth_new * feature_size^2", "\n", "# Y_features = F.unfold(", "\n", "#     Y_features, kernel_size=self.opt.match_kernel, stride=1, padding=int(self.opt.match_kernel // 2))  # batch_size * feature_depth_new * feature_size^2", "\n", "\n", "# conine distance = 1 - similarity", "\n", "X_features_permute", "=", "X_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch_size * feature_size^2 * feature_depth", "\n", "d", "=", "1", "-", "torch", ".", "matmul", "(", "X_features_permute", ",", "Y_features", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# normalized distance: dij_bar", "\n", "# d_norm = d", "\n", "d_norm", "=", "d", "/", "(", "torch", ".", "min", "(", "d", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "+", "1e-3", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# pairwise affinity", "\n", "w", "=", "torch", ".", "exp", "(", "(", "1", "-", "d_norm", ")", "/", "h", ")", "\n", "A_ij", "=", "w", "/", "torch", ".", "sum", "(", "w", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# contextual loss per sample", "\n", "CX", "=", "torch", ".", "mean", "(", "torch", ".", "max", "(", "A_ij", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "torch", ".", "log", "(", "CX", ")", "\n", "\n", "# contextual loss per batch", "\n", "# loss = torch.mean(loss)", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.find_network_using_name": [[15, 22], ["util.find_class_in_module", "issubclass"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.find_class_in_module"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.modify_commandline_options": [[24, 32], ["netD_cls.modify_commandline_options.parse_known_args", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.modify_commandline_options", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.modify_commandline_options"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.create_network": [[34, 42], ["cls", "cls.print_network", "cls.init_weights", "len", "torch.cuda.is_available", "cls.cuda"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.base_network.BaseNetwork.print_network", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.base_network.BaseNetwork.init_weights"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.define_G": [[44, 47], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.define_D": [[49, 52], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.define_Corr": [[53, 56], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options": [[13, 17], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--no_pairing_check'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If specified, skip sanity check of correct label-image file pairing'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.initialize": [[18, 34], ["pix2pix_dataset.Pix2pixDataset.get_paths", "len", "pix2pix_dataset.Pix2pixDataset.get_ref", "zip", "pix2pix_dataset.Pix2pixDataset.paths_match"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_paths", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_ref", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.paths_match"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "label_paths", ",", "image_paths", "=", "self", ".", "get_paths", "(", "opt", ")", "\n", "label_paths", "=", "label_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "image_paths", "=", "image_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "if", "not", "opt", ".", "no_pairing_check", ":", "\n", "            ", "for", "path1", ",", "path2", "in", "zip", "(", "label_paths", ",", "image_paths", ")", ":", "\n", "                ", "assert", "self", ".", "paths_match", "(", "path1", ",", "path2", ")", ",", "\"The label-image pair (%s, %s) do not look like the right pair because the filenames are quite different. Are you sure about the pairing? Please see data/pix2pix_dataset.py to see what is going on, and use --no_pairing_check to bypass this.\"", "%", "(", "path1", ",", "path2", ")", "\n", "", "", "self", ".", "label_paths", "=", "label_paths", "\n", "self", ".", "image_paths", "=", "image_paths", "\n", "size", "=", "len", "(", "self", ".", "label_paths", ")", "\n", "self", ".", "dataset_size", "=", "size", "\n", "self", ".", "real_reference_probability", "=", "1", "if", "opt", ".", "phase", "==", "'test'", "else", "opt", ".", "real_reference_probability", "\n", "self", ".", "hard_reference_probability", "=", "0", "if", "opt", ".", "phase", "==", "'test'", "else", "opt", ".", "hard_reference_probability", "\n", "self", ".", "ref_dict", ",", "self", ".", "train_test_folder", "=", "self", ".", "get_ref", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.get_paths": [[35, 40], ["None"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "label_paths", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "assert", "False", ",", "\"A subclass of Pix2pixDataset must override self.get_paths(self, opt)\"", "\n", "return", "label_paths", ",", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.paths_match": [[41, 45], ["os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "paths_match", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "filename1_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path1", ")", ")", "[", "0", "]", "\n", "filename2_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path2", ")", ")", "[", "0", "]", "\n", "return", "filename1_without_ext", "==", "filename2_without_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.get_label_tensor": [[46, 54], ["PIL.Image.open", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform."], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_params", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform"], ["", "def", "get_label_tensor", "(", "self", ",", "path", ")", ":", "\n", "        ", "label", "=", "Image", ".", "open", "(", "path", ")", "\n", "params1", "=", "get_params", "(", "self", ".", "opt", ",", "label", ".", "size", ")", "\n", "transform_label", "=", "get_transform", "(", "self", ".", "opt", ",", "params1", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "label_tensor", "=", "transform_label", "(", "label", ")", "*", "255.0", "\n", "label_tensor", "[", "label_tensor", "==", "255", "]", "=", "self", ".", "opt", ".", "label_nc", "\n", "# 'unknown' is opt.label_nc", "\n", "return", "label_tensor", ",", "params1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.__getitem__": [[55, 119], ["os.path.join", "pix2pix_dataset.Pix2pixDataset.get_label_tensor", "os.path.join", "PIL.Image.open().convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "random.random", "PIL.Image.open().convert", "pix2pix_dataset.Pix2pixDataset.get_label_tensor", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open", "os.path.join.split", "os.path.join", "os.path.join.replace", "pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "os.path.join", "PIL.Image.open().convert", "pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "pix2pix_dataset.Pix2pixDataset.get_label_tensor", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "pix2pix_dataset.Pix2pixDataset.get_label_tensor", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "PIL.Image.open", "os.path.join.replace().split", "os.path.dirname().replace", "PIL.Image.open", "os.path.join.replace", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_label_tensor", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_label_tensor", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.imgpath_to_labelpath", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.imgpath_to_labelpath", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.imgpath_to_labelpath", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_label_tensor", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_label_tensor", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# label Image", "\n", "        ", "label_path", "=", "self", ".", "label_paths", "[", "index", "]", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dataroot", ",", "label_path", ")", "\n", "label_tensor", ",", "params1", "=", "self", ".", "get_label_tensor", "(", "label_path", ")", "\n", "# input image (real images)", "\n", "image_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dataroot", ",", "image_path", ")", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params1", ")", "\n", "image_tensor", "=", "transform_image", "(", "image", ")", "\n", "ref_tensor", "=", "0", "\n", "label_ref_tensor", "=", "0", "\n", "random_p", "=", "random", ".", "random", "(", ")", "\n", "if", "random_p", "<", "self", ".", "real_reference_probability", "or", "self", ".", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "key", "=", "image_path", ".", "split", "(", "'deepfashionHD/'", ")", "[", "-", "1", "]", "\n", "val", "=", "self", ".", "ref_dict", "[", "key", "]", "\n", "if", "random_p", "<", "self", ".", "hard_reference_probability", ":", "\n", "#hard reference", "\n", "                ", "path_ref", "=", "val", "[", "1", "]", "\n", "", "else", ":", "\n", "#easy reference", "\n", "                ", "path_ref", "=", "val", "[", "0", "]", "\n", "", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'deepfashionHD'", ":", "\n", "                ", "path_ref", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dataroot", ",", "path_ref", ")", "\n", "", "else", ":", "\n", "                ", "path_ref", "=", "os", ".", "path", ".", "dirname", "(", "image_path", ")", ".", "replace", "(", "self", ".", "train_test_folder", "[", "1", "]", ",", "self", ".", "train_test_folder", "[", "0", "]", ")", "+", "'/'", "+", "path_ref", "\n", "", "image_ref", "=", "Image", ".", "open", "(", "path_ref", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "opt", ".", "dataset_mode", "!=", "'deepfashionHD'", ":", "\n", "                ", "path_ref_label", "=", "path_ref", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "path_ref_label", "=", "self", ".", "imgpath_to_labelpath", "(", "path_ref_label", ")", "\n", "", "else", ":", "\n", "                ", "path_ref_label", "=", "self", ".", "imgpath_to_labelpath", "(", "path_ref", ")", "\n", "", "label_ref_tensor", ",", "params", "=", "self", ".", "get_label_tensor", "(", "path_ref_label", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "ref_tensor", "=", "transform_image", "(", "image_ref", ")", "\n", "self_ref_flag", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "pair", "=", "False", "\n", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'deepfashionHD'", "and", "self", ".", "opt", ".", "video_like", ":", "\n", "                ", "key", "=", "image_path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ".", "split", "(", "'deepfashionHD/'", ")", "[", "-", "1", "]", "\n", "val", "=", "self", ".", "ref_dict", "[", "key", "]", "\n", "ref_name", "=", "val", "[", "0", "]", "\n", "key_name", "=", "key", "\n", "path_ref", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dataroot", ",", "ref_name", ")", "\n", "image_ref", "=", "Image", ".", "open", "(", "path_ref", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label_ref_path", "=", "self", ".", "imgpath_to_labelpath", "(", "path_ref", ")", "\n", "label_ref_tensor", ",", "params", "=", "self", ".", "get_label_tensor", "(", "label_ref_path", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "ref_tensor", "=", "transform_image", "(", "image_ref", ")", "\n", "pair", "=", "True", "\n", "", "if", "not", "pair", ":", "\n", "                ", "label_ref_tensor", ",", "params", "=", "self", ".", "get_label_tensor", "(", "label_path", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "ref_tensor", "=", "transform_image", "(", "image", ")", "\n", "", "self_ref_flag", "=", "1.0", "\n", "", "input_dict", "=", "{", "'label'", ":", "label_tensor", ",", "\n", "'image'", ":", "image_tensor", ",", "\n", "'path'", ":", "image_path", ",", "\n", "'self_ref'", ":", "self_ref_flag", ",", "\n", "'ref'", ":", "ref_tensor", ",", "\n", "'label_ref'", ":", "label_ref_tensor", "\n", "}", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.__len__": [[120, 122], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_size", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.get_ref": [[123, 125], ["None"], "methods", ["None"], ["", "def", "get_ref", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath": [[126, 128], ["None"], "methods", ["None"], ["", "def", "imgpath_to_labelpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.BaseDataset.__init__": [[12, 14], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.BaseDataset.modify_commandline_options": [[15, 18], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.BaseDataset.initialize": [[19, 21], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_params": [[23, 43], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random", "int", "min", "max"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "preprocess_mode", "==", "'resize_and_crop'", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "load_size", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_width_and_crop'", ":", "\n", "        ", "new_w", "=", "opt", ".", "load_size", "\n", "new_h", "=", "opt", ".", "load_size", "*", "h", "//", "w", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_shortside_and_crop'", ":", "\n", "        ", "ss", ",", "ls", "=", "min", "(", "w", ",", "h", ")", ",", "max", "(", "w", ",", "h", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "w", "==", "ss", "\n", "ls", "=", "int", "(", "opt", ".", "load_size", "*", "ls", "/", "ss", ")", "\n", "new_w", ",", "new_h", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "crop_size", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "crop_size", ")", ")", "\n", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "return", "{", "'crop_pos'", ":", "(", "x", ",", "y", ")", ",", "'flip'", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform": [[45, 82], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "round", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.Resize", "transform_list.append", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "params.keys", "torchvision.Lambda", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Lambda", "transform_list.append", "base_dataset.__add1", "torchvision.Lambda", "base_dataset.__crop", "base_dataset.__make_power_2", "base_dataset.__resize", "base_dataset.__flip", "base_dataset.__rotate", "base_dataset.__scale_width", "base_dataset.__scale_shortside"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__add1", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__crop", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__resize", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__flip", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__rotate", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__scale_shortside"], ["", "def", "get_transform", "(", "opt", ",", "params", ",", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ",", "toTensor", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "dataset_mode", "==", "'flickr'", "and", "method", "==", "Image", ".", "NEAREST", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__add1", "(", "img", ")", ")", ")", "\n", "", "if", "'resize'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "interpolation", "=", "method", ")", ")", "\n", "", "elif", "'scale_width'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "", "elif", "'scale_shortside'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_shortside", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "'crop'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'none'", ":", "\n", "        ", "base", "=", "32", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'fixed'", ":", "\n", "        ", "w", "=", "opt", ".", "crop_size", "\n", "h", "=", "round", "(", "opt", ".", "crop_size", "/", "opt", ".", "aspect_ratio", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "'flip'", "]", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "'rotate'", "in", "params", ".", "keys", "(", ")", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__rotate", "(", "img", ",", "params", "[", "'rotate'", "]", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "toTensor", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__resize": [[84, 86], ["img.resize"], "function", ["None"], ["", "def", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__make_power_2": [[88, 95], ["int", "int", "img.resize", "round", "round"], "function", ["None"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__scale_width": [[97, 104], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__scale_shortside": [[106, 115], ["int", "img.resize", "min", "max"], "function", ["None"], ["", "def", "__scale_shortside", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "ss", ",", "ls", "=", "min", "(", "ow", ",", "oh", ")", ",", "max", "(", "ow", ",", "oh", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "ow", "==", "ss", "\n", "if", "(", "ss", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "ls", "=", "int", "(", "target_width", "*", "ls", "/", "ss", ")", "\n", "nw", ",", "nh", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "return", "img", ".", "resize", "(", "(", "nw", ",", "nh", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__crop": [[117, 122], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__flip": [[124, 128], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__rotate": [[130, 132], ["img.rotate"], "function", ["None"], ["", "def", "__rotate", "(", "img", ",", "deg", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "rotate", "(", "deg", ",", "resample", "=", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.__add1": [[134, 136], ["PIL.Image.fromarray", "numpy.array"], "function", ["None"], ["", "def", "__add1", "(", "img", ")", ":", "\n", "    ", "return", "Image", ".", "fromarray", "(", "np", ".", "array", "(", "img", ")", "+", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.modify_commandline_options": [[17, 29], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "parser", ".", "set_defaults", "(", "no_pairing_check", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "550", ")", "\n", "parser", ".", "set_defaults", "(", "crop_size", "=", "512", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "20", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_read", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_write", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_paths": [[30, 48], ["range", "open", "open.readlines", "open.close", "len", "lines[].strip", "image_paths.append", "lines[].strip.replace().replace", "label_paths.append", "os.path.join", "open", "open.readlines", "open.close", "os.path.join", "os.path.join", "lines[].strip.replace"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "if", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "fd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./data/train.txt'", ")", ")", "\n", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "", "elif", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "fd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./data/val.txt'", ")", ")", "\n", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "", "image_paths", "=", "[", "]", "\n", "label_paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "name", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "image_paths", ".", "append", "(", "name", ")", "\n", "label_path", "=", "name", ".", "replace", "(", "'img'", ",", "'pose'", ")", ".", "replace", "(", "'.jpg'", ",", "'_{}.txt'", ")", "\n", "label_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "label_path", ")", ")", "\n", "", "return", "label_paths", ",", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_ref_video_like": [[49, 73], ["range", "open", "fd.readlines", "it.split", "open", "fd.readlines", "len", "ref[].strip().split", "it.strip", "it.strip", "deepfashionHD_dataset.DeepFashionHDDataset.keys", "v.replace", "ref[].strip", "key.replace"], "methods", ["None"], ["", "def", "get_ref_video_like", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pair_path", "=", "'./data/deepfashion_self_pair.txt'", "\n", "with", "open", "(", "pair_path", ")", "as", "fd", ":", "\n", "            ", "self_pair", "=", "fd", ".", "readlines", "(", ")", "\n", "self_pair", "=", "[", "it", ".", "strip", "(", ")", "for", "it", "in", "self_pair", "]", "\n", "", "self_pair_dict", "=", "{", "}", "\n", "for", "it", "in", "self_pair", ":", "\n", "            ", "items", "=", "it", ".", "split", "(", "','", ")", "\n", "self_pair_dict", "[", "items", "[", "0", "]", "]", "=", "items", "[", "1", ":", "]", "\n", "", "ref_path", "=", "'./data/deepfashion_ref_test.txt'", "if", "opt", ".", "phase", "==", "'test'", "else", "'./data/deepfashion_ref.txt'", "\n", "with", "open", "(", "ref_path", ")", "as", "fd", ":", "\n", "            ", "ref", "=", "fd", ".", "readlines", "(", ")", "\n", "ref", "=", "[", "it", ".", "strip", "(", ")", "for", "it", "in", "ref", "]", "\n", "", "ref_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "ref", ")", ")", ":", "\n", "            ", "items", "=", "ref", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "key", "=", "items", "[", "0", "]", "\n", "if", "key", "in", "self_pair_dict", ".", "keys", "(", ")", ":", "\n", "                ", "val", "=", "[", "it", "for", "it", "in", "self_pair_dict", "[", "items", "[", "0", "]", "]", "]", "\n", "", "else", ":", "\n", "                ", "val", "=", "[", "items", "[", "-", "1", "]", "]", "\n", "", "ref_dict", "[", "key", ".", "replace", "(", "'\\\\'", ",", "\"/\"", ")", "]", "=", "[", "v", ".", "replace", "(", "'\\\\'", ",", "\"/\"", ")", "for", "v", "in", "val", "]", "\n", "", "train_test_folder", "=", "(", "''", ",", "''", ")", "\n", "return", "ref_dict", ",", "train_test_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_ref_vgg": [[74, 91], ["range", "open", "fd.readlines", "len", "lines[].strip().split", "v.replace", "lines[].strip", "key.replace"], "methods", ["None"], ["", "def", "get_ref_vgg", "(", "self", ",", "opt", ")", ":", "\n", "        ", "extra", "=", "''", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "extra", "=", "'_test'", "\n", "", "with", "open", "(", "'./data/deepfashion_ref{}.txt'", ".", "format", "(", "extra", ")", ")", "as", "fd", ":", "\n", "            ", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "", "ref_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "items", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "key", "=", "items", "[", "0", "]", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "                ", "val", "=", "[", "it", "for", "it", "in", "items", "[", "1", ":", "]", "]", "\n", "", "else", ":", "\n", "                ", "val", "=", "[", "items", "[", "-", "1", "]", "]", "\n", "", "ref_dict", "[", "key", ".", "replace", "(", "'\\\\'", ",", "\"/\"", ")", "]", "=", "[", "v", ".", "replace", "(", "'\\\\'", ",", "\"/\"", ")", "for", "v", "in", "val", "]", "\n", "", "train_test_folder", "=", "(", "''", ",", "''", ")", "\n", "return", "ref_dict", ",", "train_test_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_ref": [[92, 97], ["deepfashionHD_dataset.DeepFashionHDDataset.get_ref_video_like", "deepfashionHD_dataset.DeepFashionHDDataset.get_ref_vgg"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_ref_video_like", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_ref_vgg"], ["", "def", "get_ref", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "video_like", ":", "\n", "            ", "return", "self", ".", "get_ref_video_like", "(", "opt", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_ref_vgg", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.get_label_tensor": [[98, 151], ["numpy.loadtxt", "numpy.loadtxt", "numpy.zeros", "range", "range", "PIL.Image.fromarray().resize", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform", "range", "data.base_dataset.get_transform.", "torch.cat", "path.format", "path.format", "int", "cv2.circle", "cv2.addWeighted.copy", "numpy.mean", "numpy.mean", "math.degrees", "cv2.ellipse2Poly", "cv2.fillConvexPoly", "cv2.addWeighted", "numpy.zeros_like", "cv2.fillConvexPoly", "cv2.addWeighted", "joints.append", "len", "cv2.distanceTransform", "numpy.clip().astype", "data.base_dataset.get_transform.", "joints.append", "math.atan2", "int", "PIL.Image.fromarray", "PIL.Image.fromarray", "torch.cat", "int", "int", "numpy.zeros_like", "int", "int", "int", "cv2.cvtColor", "numpy.clip", "numpy.array", "int.astype", "int.astype"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_params", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.base_dataset.get_transform"], ["", "", "def", "get_label_tensor", "(", "self", ",", "path", ")", ":", "\n", "        ", "candidate", "=", "np", ".", "loadtxt", "(", "path", ".", "format", "(", "'candidate'", ")", ")", "\n", "subset", "=", "np", ".", "loadtxt", "(", "path", ".", "format", "(", "'subset'", ")", ")", "\n", "stickwidth", "=", "20", "\n", "limbSeq", "=", "[", "[", "2", ",", "3", "]", ",", "[", "2", ",", "6", "]", ",", "[", "3", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "2", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "[", "10", ",", "11", "]", ",", "[", "2", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "13", ",", "14", "]", ",", "[", "2", ",", "1", "]", ",", "[", "1", ",", "15", "]", ",", "[", "15", ",", "17", "]", ",", "[", "1", ",", "16", "]", ",", "[", "16", ",", "18", "]", ",", "[", "3", ",", "17", "]", ",", "[", "6", ",", "18", "]", "]", "\n", "colors", "=", "[", "[", "255", ",", "0", ",", "0", "]", ",", "[", "255", ",", "85", ",", "0", "]", ",", "[", "255", ",", "170", ",", "0", "]", ",", "[", "255", ",", "255", ",", "0", "]", ",", "[", "170", ",", "255", ",", "0", "]", ",", "[", "85", ",", "255", ",", "0", "]", ",", "[", "0", ",", "255", ",", "0", "]", ",", "[", "0", ",", "255", ",", "85", "]", ",", "[", "0", ",", "255", ",", "170", "]", ",", "[", "0", ",", "255", ",", "255", "]", ",", "[", "0", ",", "170", ",", "255", "]", ",", "[", "0", ",", "85", ",", "255", "]", ",", "[", "0", ",", "0", ",", "255", "]", ",", "[", "85", ",", "0", ",", "255", "]", ",", "[", "170", ",", "0", ",", "255", "]", ",", "[", "255", ",", "0", ",", "255", "]", ",", "[", "255", ",", "0", ",", "170", "]", ",", "[", "255", ",", "0", ",", "85", "]", "]", "\n", "canvas", "=", "np", ".", "zeros", "(", "(", "1024", ",", "1024", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cycle_radius", "=", "20", "\n", "for", "i", "in", "range", "(", "18", ")", ":", "\n", "            ", "index", "=", "int", "(", "subset", "[", "i", "]", ")", "\n", "if", "index", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "x", ",", "y", "=", "candidate", "[", "index", "]", "[", "0", ":", "2", "]", "\n", "cv2", ".", "circle", "(", "canvas", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "cycle_radius", ",", "colors", "[", "i", "]", ",", "thickness", "=", "-", "1", ")", "\n", "", "joints", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "17", ")", ":", "\n", "            ", "index", "=", "subset", "[", "np", ".", "array", "(", "limbSeq", "[", "i", "]", ")", "-", "1", "]", "\n", "cur_canvas", "=", "canvas", ".", "copy", "(", ")", "\n", "if", "-", "1", "in", "index", ":", "\n", "                ", "joints", ".", "append", "(", "np", ".", "zeros_like", "(", "cur_canvas", "[", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "continue", "\n", "", "Y", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", ",", "0", "]", "\n", "X", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", ",", "1", "]", "\n", "mX", "=", "np", ".", "mean", "(", "X", ")", "\n", "mY", "=", "np", ".", "mean", "(", "Y", ")", "\n", "length", "=", "(", "(", "X", "[", "0", "]", "-", "X", "[", "1", "]", ")", "**", "2", "+", "(", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "angle", "=", "math", ".", "degrees", "(", "math", ".", "atan2", "(", "X", "[", "0", "]", "-", "X", "[", "1", "]", ",", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ")", ")", "\n", "polygon", "=", "cv2", ".", "ellipse2Poly", "(", "(", "int", "(", "mY", ")", ",", "int", "(", "mX", ")", ")", ",", "(", "int", "(", "length", "/", "2", ")", ",", "stickwidth", ")", ",", "int", "(", "angle", ")", ",", "0", ",", "360", ",", "1", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "cur_canvas", ",", "polygon", ",", "colors", "[", "i", "]", ")", "\n", "canvas", "=", "cv2", ".", "addWeighted", "(", "canvas", ",", "0.4", ",", "cur_canvas", ",", "0.6", ",", "0", ")", "\n", "joint", "=", "np", ".", "zeros_like", "(", "cur_canvas", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "joint", ",", "polygon", ",", "255", ")", "\n", "joint", "=", "cv2", ".", "addWeighted", "(", "joint", ",", "0.4", ",", "joint", ",", "0.6", ",", "0", ")", "\n", "joints", ".", "append", "(", "joint", ")", "\n", "", "pose", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "canvas", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "load_size", ",", "self", ".", "opt", ".", "load_size", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "pose", ".", "size", ")", "\n", "transform_label", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "transform_img", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "BILINEAR", ",", "normalize", "=", "False", ")", "\n", "tensors_dist", "=", "0", "\n", "e", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "joints", ")", ")", ":", "\n", "            ", "im_dist", "=", "cv2", ".", "distanceTransform", "(", "255", "-", "joints", "[", "i", "]", ",", "cv2", ".", "DIST_L1", ",", "3", ")", "\n", "im_dist", "=", "np", ".", "clip", "(", "(", "im_dist", "/", "3", ")", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "tensor_dist", "=", "transform_img", "(", "Image", ".", "fromarray", "(", "im_dist", ")", ")", "\n", "tensors_dist", "=", "tensor_dist", "if", "e", "==", "1", "else", "torch", ".", "cat", "(", "[", "tensors_dist", ",", "tensor_dist", "]", ")", "\n", "e", "+=", "1", "\n", "", "tensor_pose", "=", "transform_label", "(", "pose", ")", "\n", "label_tensor", "=", "torch", ".", "cat", "(", "(", "tensor_pose", ",", "tensors_dist", ")", ",", "dim", "=", "0", ")", "\n", "return", "label_tensor", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.imgpath_to_labelpath": [[152, 155], ["path.replace().replace", "path.replace"], "methods", ["None"], ["", "def", "imgpath_to_labelpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "label_path", "=", "path", ".", "replace", "(", "'/img/'", ",", "'/pose/'", ")", ".", "replace", "(", "'.jpg'", ",", "'_{}.txt'", ")", "\n", "return", "label_path", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.deepfashionHD_dataset.DeepFashionHDDataset.labelpath_to_imgpath": [[156, 159], ["path.replace().replace", "path.replace"], "methods", ["None"], ["", "def", "labelpath_to_imgpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "img_path", "=", "path", ".", "replace", "(", "'/pose/'", ",", "'/img/'", ")", ".", "replace", "(", "'_{}.txt'", ",", "'.jpg'", ")", "\n", "return", "img_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.__init__.find_dataset_using_name": [[9, 23], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "ValueError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.__init__.get_option_setter": [[25, 28], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.__init__.create_dataloader": [[30, 43], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "torch.utils.data.DataLoader", "int", "len", "type"], "function", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.test_options.TestOptions.initialize": [[8, 21], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "float"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'how many test images to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_per_img'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, save per image'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_corr'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, save bilinear upsample correspondence'", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'scale_width_and_crop'", ",", "crop_size", "=", "256", ",", "load_size", "=", "256", ",", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "serial_batches", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "no_flip", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "phase", "=", "'test'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.train_options.TrainOptions.initialize": [[9, 47], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "# for training", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate. This is NOT the total #epochs. Totla #epochs is niter + niter_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--D_steps_per_G'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of discriminator iterations per generator iterations.'", ")", "\n", "# for discriminators", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'multiscale'", ",", "help", "=", "'(n_layers|multiscale|image)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_TTUR'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use TTUR training scheme'", ")", "\n", "parser", ".", "add_argument", "(", "'--real_reference_probability'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'self-supervised training probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--hard_reference_probability'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'hard reference training probability'", ")", "\n", "# training loss weights", "\n", "parser", ".", "add_argument", "(", "'--weight_warp_self'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'push warp self to ref'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_warp_cycle'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'push warp cycle to ref'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_novgg_featpair'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'in no vgg setting, use pair feat loss in domain adaptation'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'hinge'", ",", "help", "=", "'(ls|original|hinge)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_gan'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight of all loss in stage1'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_ganFeat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_perceptual'", ",", "type", "=", "str", ",", "default", "=", "'4_2'", ",", "help", "=", "'relu5_2 or relu4_2'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_perceptual'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_vgg'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for vgg loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_contextual'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'ctx loss weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_fm_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'vgg fm loss weight comp with ctx loss'", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.initialize": [[20, 73], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "# experiment specifics", "\n", "        ", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'deepfashionHD'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0,1,2,3'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pix'", ",", "help", "=", "'which model to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_G'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_D'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_E'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "# input/output sizes", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess_mode'", ",", "type", "=", "str", ",", "default", "=", "'scale_width_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time.'", ",", "choices", "=", "(", "\"resize_and_crop\"", ",", "\"crop\"", ",", "\"scale_width\"", ",", "\"scale_width_and_crop\"", ",", "\"scale_shortside\"", ",", "\"scale_shortside_and_crop\"", ",", "\"fixed\"", ",", "\"none\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Scale images to this size. The final image will be cropped to --crop_size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Crop to the width of crop_size (after initially scaling the images to load_size.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'The ratio width/height. The final height of the load image will be crop_size/aspect_ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "182", ",", "help", "=", "'# of input label classes without unknown class. If you have unknown class as class label, specify --contain_dopntcare_label.'", ")", "\n", "parser", ".", "add_argument", "(", "'--contain_dontcare_label'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if the label map contains dontcare label (dontcare=255)'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "# for setting inputs", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'dataset/deepfashionHD'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'deepfashionHD'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "sys", ".", "maxsize", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_from_opt_file'", ",", "action", "=", "'store_true'", ",", "help", "=", "'load the options from checkpoints and use that as default'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_write'", ",", "action", "=", "'store_true'", ",", "help", "=", "'saves the current filelist into a text file, so that it loads faster'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_read'", ",", "action", "=", "'store_true'", ",", "help", "=", "'reads from the file list cache'", ")", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'display window size'", ")", "\n", "# for generator", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'spade'", ",", "help", "=", "'selects model to use for netG (pix2pixhd | spade)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_variance'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'variance of the initialization distribution'", ")", "\n", "# for feature encoder", "\n", "parser", ".", "add_argument", "(", "'--netCorr'", ",", "type", "=", "str", ",", "default", "=", "'NoVGGHPM'", ")", "\n", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "# for instance-wise features", "\n", "parser", ".", "add_argument", "(", "'--CBN_intype'", ",", "type", "=", "str", ",", "default", "=", "'warp_mask'", ",", "help", "=", "'type of CBN input for framework, warp/mask/warp_mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--match_kernel'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'correspondence matrix match kernel size'", ")", "\n", "parser", ".", "add_argument", "(", "'--featEnc_kernel'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'kernel size in domain adaptor'", ")", "\n", "parser", ".", "add_argument", "(", "'--PONO'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use positional normalization '", ")", "\n", "parser", ".", "add_argument", "(", "'--PONO_C'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use C normalization in corr module'", ")", "\n", "parser", ".", "add_argument", "(", "'--vgg_normal_correct'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, correct vgg normalization and replace vgg FM model with ctx model'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_coordconv'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use coordconv in CorrNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_like'", ",", "action", "=", "'store_true'", ",", "help", "=", "'useful in deepfashion'", ")", "\n", "parser", ".", "add_argument", "(", "'--amp'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use torch.cuda.amp'", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--iteration_count'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.gather_options": [[74, 97], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_known_args", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize", "base_options.BaseOptions.update_options_from_file"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.update_options_from_file"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "# get the basic options", "\n", "", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "# modify dataset-related parser options", "\n", "dataset_mode", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_mode", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "# if there is opt_file, load it.", "\n", "# The previous default options will be overwritten", "\n", "if", "opt", ".", "load_from_opt_file", ":", "\n", "            ", "parser", "=", "self", ".", "update_options_from_file", "(", "parser", ",", "opt", ")", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.print_options": [[98, 109], ["sorted", "print", "vars().items", "base_options.BaseOptions.parser.get_default", "str", "str", "vars", "str"], "methods", ["None"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.option_file_path": [[110, 116], ["os.path.join", "os.path.join", "util.util.util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.util.util.mkdirs"], ["", "def", "option_file_path", "(", "self", ",", "opt", ",", "makedir", "=", "False", ")", ":", "\n", "        ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "makedir", ":", "\n", "            ", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt'", ")", "\n", "return", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.save_options": [[117, 128], ["base_options.BaseOptions.option_file_path", "open", "sorted", "open", "pickle.dump", "vars().items", "base_options.BaseOptions.parser.get_default", "opt_file.write", "vars", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.option_file_path"], ["", "def", "save_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "True", ")", "\n", "with", "open", "(", "file_name", "+", "'.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "                ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                    ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "opt_file", ".", "write", "(", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", ")", "\n", "", "", "with", "open", "(", "file_name", "+", "'.pkl'", ",", "'wb'", ")", "as", "opt_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "opt", ",", "opt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.update_options_from_file": [[129, 136], ["base_options.BaseOptions.load_options", "sorted", "vars().items", "hasattr", "getattr", "parser.set_defaults", "vars", "getattr"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.load_options"], ["", "", "def", "update_options_from_file", "(", "self", ",", "parser", ",", "opt", ")", ":", "\n", "        ", "new_opt", "=", "self", ".", "load_options", "(", "opt", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "new_opt", ",", "k", ")", "and", "v", "!=", "getattr", "(", "new_opt", ",", "k", ")", ":", "\n", "                ", "new_val", "=", "getattr", "(", "new_opt", ",", "k", ")", "\n", "parser", ".", "set_defaults", "(", "**", "{", "k", ":", "new_val", "}", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.load_options": [[137, 141], ["base_options.BaseOptions.option_file_path", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.option_file_path"], ["", "def", "load_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "False", ")", "\n", "new_opt", "=", "pickle", ".", "load", "(", "open", "(", "file_name", "+", "'.pkl'", ",", "'rb'", ")", ")", "\n", "return", "new_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.parse": [[142, 167], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "list", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.random.manual_seed", "torch.cuda.manual_seed_all", "base_options.BaseOptions.save_options", "range", "len", "torch.cuda.set_device", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.print_options", "home.repos.pwc.inspect_result.microsoft_CoCosNet-v2.options.base_options.BaseOptions.save_options"], ["", "def", "parse", "(", "self", ",", "save", "=", "False", ")", ":", "\n", "# gather options from base, train, dataset, model", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "# train or test", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "save_options", "(", "opt", ")", "\n", "# Set semantic_nc based on the option.", "\n", "# This will be convenient in many places", "\n", "", "opt", ".", "semantic_nc", "=", "opt", ".", "label_nc", "+", "(", "1", "if", "opt", ".", "contain_dontcare_label", "else", "0", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "opt", ".", "gpu_ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "list", "(", "range", "(", "len", "(", "str_ids", ")", ")", ")", "\n", "seed", "=", "1234", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}