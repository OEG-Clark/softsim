{"home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.evaluation_exposure.mkdir": [[40, 43], ["os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.evaluation_lol.mkdir"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.evaluation_lol.mkdir": [[39, 42], ["os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.evaluation_lol.mkdir"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.PSNR.__init__": [[19, 27], ["torch.Module.__init__", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "utils.PSNR.register_buffer", "utils.PSNR.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_val", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "base10", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "10.0", ")", ")", "\n", "max_val", "=", "torch", ".", "tensor", "(", "max_val", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'base10'", ",", "base10", ")", "\n", "self", ".", "register_buffer", "(", "'max_val'", ",", "20", "*", "torch", ".", "log", "(", "max_val", ")", "/", "base10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.PSNR.__call__": [[28, 35], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.log10", "a.float", "b.float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "mse", "=", "torch", ".", "mean", "(", "(", "a", ".", "float", "(", ")", "-", "b", ".", "float", "(", ")", ")", "**", "2", ")", "\n", "\n", "if", "mse", "==", "0", ":", "\n", "            ", "return", "0", "\n", "\n", "", "return", "10", "*", "torch", ".", "log10", "(", "(", "1.0", "/", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.LossNetwork.__init__": [[144, 151], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg_model", ")", ":", "\n", "        ", "super", "(", "LossNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_layers", "=", "vgg_model", "\n", "self", ".", "layer_name_mapping", "=", "{", "\n", "'3'", ":", "\"relu1_2\"", ",", "\n", "'8'", ":", "\"relu2_2\"", ",", "\n", "'15'", ":", "\"relu3_3\"", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.LossNetwork.output_features": [[153, 160], ["utils.LossNetwork.vgg_layers._modules.items", "list", "module", "output.values"], "methods", ["None"], ["", "def", "output_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "self", ".", "vgg_layers", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "layer_name_mapping", ":", "\n", "                ", "output", "[", "self", ".", "layer_name_mapping", "[", "name", "]", "]", "=", "x", "\n", "", "", "return", "list", "(", "output", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.LossNetwork.forward": [[161, 169], ["utils.LossNetwork.output_features", "utils.LossNetwork.output_features", "zip", "loss.append", "sum", "len", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.LossNetwork.output_features", "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.LossNetwork.output_features"], ["", "def", "forward", "(", "self", ",", "pred_im", ",", "gt", ")", ":", "\n", "        ", "loss", "=", "[", "]", "\n", "pred_im_features", "=", "self", ".", "output_features", "(", "pred_im", ")", "\n", "gt_features", "=", "self", ".", "output_features", "(", "gt", ")", "\n", "for", "pred_im_feature", ",", "gt_feature", "in", "zip", "(", "pred_im_features", ",", "gt_features", ")", ":", "\n", "            ", "loss", ".", "append", "(", "F", ".", "mse_loss", "(", "pred_im_feature", ",", "gt_feature", ")", ")", "\n", "\n", "", "return", "sum", "(", "loss", ")", "/", "len", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.L_color.__init__": [[173, 175], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L_color", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.L_color.forward": [[176, 187], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "mean_rgb", "=", "torch", ".", "mean", "(", "x", ",", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "mr", ",", "mg", ",", "mb", "=", "torch", ".", "split", "(", "mean_rgb", ",", "1", ",", "dim", "=", "1", ")", "\n", "Drg", "=", "torch", ".", "pow", "(", "mr", "-", "mg", ",", "2", ")", "\n", "Drb", "=", "torch", ".", "pow", "(", "mr", "-", "mb", ",", "2", ")", "\n", "Dgb", "=", "torch", ".", "pow", "(", "mb", "-", "mg", ",", "2", ")", "\n", "k", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "Drg", ",", "2", ")", "+", "torch", ".", "pow", "(", "Drb", ",", "2", ")", "+", "torch", ".", "pow", "(", "Dgb", ",", "2", ")", ",", "0.5", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.adjust_learning_rate": [[37, 49], ["print", "print"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_decay", "=", "0.5", ")", ":", "\n", "\n", "# --- Decay learning rate --- #", "\n", "    ", "step", "=", "20", "\n", "\n", "if", "not", "epoch", "%", "step", "and", "epoch", ">", "0", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "*=", "lr_decay", "\n", "print", "(", "'Learning rate sets to {}.'", ".", "format", "(", "param_group", "[", "'lr'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "print", "(", "'Learning rate sets to {}.'", ".", "format", "(", "param_group", "[", "'lr'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.get_dist_info": [[50, 65], ["torch.is_available", "torch.is_initialized", "torch.get_rank", "torch.get_world_size"], "function", ["None"], ["", "", "", "def", "get_dist_info", "(", ")", ":", "\n", "\n", "# --- Get dist info --- #", "\n", "\n", "    ", "if", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "initialized", "=", "dist", ".", "is_initialized", "(", ")", "\n", "", "else", ":", "\n", "        ", "initialized", "=", "False", "\n", "", "if", "initialized", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.visualization": [[66, 86], ["img.cpu().numpy.cpu().numpy", "range", "os.path.exists", "os.makedirs", "print", "numpy.transpose", "cv2.UMat().get", "matplotlib.imsave", "img.cpu().numpy.cpu", "numpy.clip", "os.path.join", "str", "cv2.UMat", "str"], "function", ["None"], ["", "def", "visualization", "(", "img", ",", "img_path", ",", "iteration", ")", ":", "\n", "\n", "# --- Visualization for Checking --- #", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "img_path", ")", "\n", "\n", "", "img", "=", "img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "# save name", "\n", "        ", "name", "=", "str", "(", "iteration", ")", "+", "'_'", "+", "str", "(", "i", ")", "+", "'.jpg'", "\n", "print", "(", "name", ")", "\n", "\n", "img_single", "=", "np", ".", "transpose", "(", "img", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "# print(img_single)", "\n", "img_single", "=", "np", ".", "clip", "(", "img_single", ",", "0", ",", "1", ")", "*", "255.0", "\n", "img_single", "=", "cv2", ".", "UMat", "(", "img_single", ")", ".", "get", "(", ")", "\n", "img_single", "=", "img_single", "/", "255.0", "\n", "\n", "plt", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "name", ")", ",", "img_single", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.validation": [[90, 113], ["IQA_pytorch.SSIM", "utils.PSNR", "enumerate", "numpy.mean", "numpy.mean", "print", "print", "IQA_pytorch.SSIM.item", "PSNR.item", "ssim_list.append", "psnr_list.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "imgs[].cuda", "imgs[].cuda", "IQA_pytorch.SSIM.", "PSNR."], "function", ["None"], ["def", "validation", "(", "model", ",", "val_loader", ")", ":", "\n", "\n", "    ", "ssim", "=", "SSIM", "(", ")", "\n", "psnr", "=", "PSNR", "(", ")", "\n", "ssim_list", "=", "[", "]", "\n", "psnr_list", "=", "[", "]", "\n", "for", "i", ",", "imgs", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "low_img", ",", "high_img", "=", "imgs", "[", "0", "]", ".", "cuda", "(", ")", ",", "imgs", "[", "1", "]", ".", "cuda", "(", ")", "\n", "_", ",", "_", ",", "enhanced_img", "=", "model", "(", "low_img", ")", "\n", "# print(enhanced_img.shape)", "\n", "", "ssim_value", "=", "ssim", "(", "enhanced_img", ",", "high_img", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "#ssim_value = ssim(enhanced_img, high_img).item()", "\n", "psnr_value", "=", "psnr", "(", "enhanced_img", ",", "high_img", ")", ".", "item", "(", ")", "\n", "# print('The %d image SSIM value is %d:' %(i, ssim_value))", "\n", "ssim_list", ".", "append", "(", "ssim_value", ")", "\n", "psnr_list", ".", "append", "(", "psnr_value", ")", "\n", "\n", "", "SSIM_mean", "=", "np", ".", "mean", "(", "ssim_list", ")", "\n", "PSNR_mean", "=", "np", ".", "mean", "(", "psnr_list", ")", "\n", "print", "(", "'The SSIM Value is:'", ",", "SSIM_mean", ")", "\n", "print", "(", "'The PSNR Value is:'", ",", "PSNR_mean", ")", "\n", "return", "SSIM_mean", ",", "PSNR_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.IAT_enhance.utils.validation_shadow": [[114, 137], ["IQA_pytorch.SSIM", "utils.PSNR", "enumerate", "numpy.mean", "numpy.mean", "print", "print", "IQA_pytorch.SSIM.item", "PSNR.item", "ssim_list.append", "psnr_list.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "imgs[].cuda", "imgs[].cuda", "imgs[].cuda", "IQA_pytorch.SSIM.", "PSNR."], "function", ["None"], ["", "def", "validation_shadow", "(", "model", ",", "val_loader", ")", ":", "\n", "\n", "    ", "ssim", "=", "SSIM", "(", ")", "\n", "psnr", "=", "PSNR", "(", ")", "\n", "ssim_list", "=", "[", "]", "\n", "psnr_list", "=", "[", "]", "\n", "for", "i", ",", "imgs", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "low_img", ",", "high_img", ",", "mask", "=", "imgs", "[", "0", "]", ".", "cuda", "(", ")", ",", "imgs", "[", "1", "]", ".", "cuda", "(", ")", ",", "imgs", "[", "2", "]", ".", "cuda", "(", ")", "\n", "_", ",", "_", ",", "enhanced_img", "=", "model", "(", "low_img", ",", "mask", ")", "\n", "# print(enhanced_img.shape)", "\n", "", "ssim_value", "=", "ssim", "(", "enhanced_img", ",", "high_img", ",", "as_loss", "=", "False", ")", ".", "item", "(", ")", "\n", "#ssim_value = ssim(enhanced_img, high_img).item()", "\n", "psnr_value", "=", "psnr", "(", "enhanced_img", ",", "high_img", ")", ".", "item", "(", ")", "\n", "# print('The %d image SSIM value is %d:' %(i, ssim_value))", "\n", "ssim_list", ".", "append", "(", "ssim_value", ")", "\n", "psnr_list", ".", "append", "(", "psnr_value", ")", "\n", "\n", "", "SSIM_mean", "=", "np", ".", "mean", "(", "ssim_list", ")", "\n", "PSNR_mean", "=", "np", ".", "mean", "(", "psnr_list", ")", "\n", "print", "(", "'The SSIM Value is:'", ",", "SSIM_mean", ")", "\n", "print", "(", "'The PSNR Value is:'", ",", "PSNR_mean", ")", "\n", "return", "SSIM_mean", ",", "PSNR_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.exposure.exposure_loader.__init__": [[32, 50], ["exposure.populate_train_list", "print", "images_path.replace", "len", "images_path.replace"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.populate_train_list"], ["    ", "def", "__init__", "(", "self", ",", "images_path", ",", "mode", "=", "'train'", ",", "expert", "=", "'c'", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "self", ".", "train_list", "=", "populate_train_list", "(", "images_path", ",", "mode", ")", "\n", "# self.h, self.w = int(img_size[0]), int(img_size[1])", "\n", "self", ".", "mode", "=", "mode", "# train or test", "\n", "self", ".", "data_list", "=", "self", ".", "train_list", "\n", "self", ".", "low_path", "=", "images_path", "\n", "if", "self", ".", "mode", "==", "'train'", "or", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "self", ".", "high_path", "=", "images_path", ".", "replace", "(", "'INPUT_IMAGES'", ",", "'GT_IMAGES'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "high_path", "=", "images_path", ".", "replace", "(", "'INPUT_IMAGES'", ",", "'expert_'", "+", "expert", "+", "'_testing_set'", ")", "\n", "", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "resize", "=", "True", "\n", "self", ".", "image_size", "=", "1200", "\n", "self", ".", "image_size_w", "=", "900", "\n", "#self.image_size = 512", "\n", "#self.image_size_w = 512", "\n", "# self.test_resize = True", "\n", "print", "(", "\"Total examples:\"", ",", "len", "(", "self", ".", "data_list", ")", ")", "\n", "# print(\"Total testing examples:\", len(self.test_list))", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.exposure.exposure_loader.FLIP_aug": [[53, 63], ["random.random", "cv2.flip", "cv2.flip", "random.random", "cv2.flip", "cv2.flip"], "methods", ["None"], ["", "def", "FLIP_aug", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "low", "=", "cv2", ".", "flip", "(", "low", ",", "0", ")", "\n", "high", "=", "cv2", ".", "flip", "(", "high", ",", "0", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "low", "=", "cv2", ".", "flip", "(", "low", ",", "1", ")", "\n", "high", "=", "cv2", ".", "flip", "(", "high", ",", "1", ")", "\n", "\n", "", "return", "low", ",", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.exposure.exposure_loader.get_params": [[64, 75], ["random.randint", "random.randint"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "low", ")", ":", "\n", "        ", "self", ".", "h", ",", "self", ".", "w", "=", "low", ".", "shape", "[", "0", "]", ",", "low", ".", "shape", "[", "1", "]", "# 900, 1200", "\n", "# print(self.h, self.w)", "\n", "# self.crop_height = random.randint(self.h / 2, self.h)  # random.randint(self.MinCropHeight, self.MaxCropHeight)", "\n", "# self.crop_width = random.randint(self.w / 2, self.w)  # random.randint(self.MinCropWidth,self.MaxCropWidth)", "\n", "self", ".", "crop_height", "=", "self", ".", "h", "/", "2", "# random.randint(self.MinCropHeight, self.MaxCropHeight)", "\n", "self", ".", "crop_width", "=", "self", ".", "w", "/", "2", "# random.randint(self.MinCropWidth,self.MaxCropWidth)", "\n", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "h", "-", "self", ".", "crop_height", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "w", "-", "self", ".", "crop_width", ")", "\n", "return", "i", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.exposure.exposure_loader.Random_Crop": [[76, 83], ["exposure.exposure_loader.get_params", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.get_params"], ["", "def", "Random_Crop", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "self", ".", "i", ",", "self", ".", "j", "=", "self", ".", "get_params", "(", "low", ")", "\n", "self", ".", "i", ",", "self", ".", "j", "=", "int", "(", "self", ".", "i", ")", ",", "int", "(", "self", ".", "j", ")", "\n", "# if random.random() > 0.5:", "\n", "low", "=", "low", "[", "self", ".", "i", ":", "self", ".", "i", "+", "int", "(", "self", ".", "crop_height", ")", ",", "self", ".", "j", ":", "self", ".", "j", "+", "int", "(", "self", ".", "crop_width", ")", "]", "\n", "high", "=", "high", "[", "self", ".", "i", ":", "self", ".", "i", "+", "int", "(", "self", ".", "crop_height", ")", ",", "self", ".", "j", ":", "self", ".", "j", "+", "int", "(", "self", ".", "crop_width", ")", "]", "\n", "return", "low", ",", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.exposure.exposure_loader.__getitem__": [[84, 111], ["img_id.rfind", "cv2.imread", "cv2.imread", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "os.join", "os.join", "os.join", "os.join", "cv2.transpose", "cv2.transpose", "cv2.resize", "cv2.resize", "exposure.exposure_loader.FLIP_aug", "numpy.asarray", "numpy.asarray", "cv2.resize.permute", "cv2.resize.permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.FLIP_aug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "data_list", "[", "index", "]", "\n", "a", "=", "img_id", ".", "rfind", "(", "'_'", ")", "\n", "img_id_gt", "=", "img_id", "[", ":", "a", "]", "\n", "\n", "data_lowlight", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "low_path", ",", "img_id", ")", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "data_highlight", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "high_path", ",", "img_id_gt", "+", "'.jpg'", ")", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "if", "data_lowlight", ".", "shape", "[", "0", "]", ">=", "data_lowlight", ".", "shape", "[", "1", "]", ":", "\n", "            ", "data_lowlight", "=", "cv2", ".", "transpose", "(", "data_lowlight", ")", "\n", "data_highlight", "=", "cv2", ".", "transpose", "(", "data_highlight", ")", "\n", "\n", "", "if", "self", ".", "resize", ":", "\n", "            ", "data_lowlight", "=", "cv2", ".", "resize", "(", "data_lowlight", ",", "(", "self", ".", "image_size", ",", "self", ".", "image_size_w", ")", ")", "\n", "data_highlight", "=", "cv2", ".", "resize", "(", "data_highlight", ",", "(", "self", ".", "image_size", ",", "self", ".", "image_size_w", ")", ")", "\n", "# print(data_lowlight.shape)", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "# data augmentation", "\n", "            ", "data_lowlight", ",", "data_highlight", "=", "self", ".", "FLIP_aug", "(", "data_lowlight", ",", "data_highlight", ")", "\n", "# data_lowlight, data_highlight = self.Random_Crop(data_lowlight, data_highlight)", "\n", "# print(data_lowlight.shape)", "\n", "", "data_lowlight", "=", "(", "np", ".", "asarray", "(", "data_lowlight", "[", "...", ",", ":", ":", "-", "1", "]", ")", "/", "255.0", ")", "\n", "data_highlight", "=", "(", "np", ".", "asarray", "(", "data_highlight", "[", "...", ",", ":", ":", "-", "1", "]", ")", "/", "255.0", ")", "\n", "\n", "data_lowlight", "=", "torch", ".", "from_numpy", "(", "data_lowlight", ")", ".", "float", "(", ")", "# float32", "\n", "data_highlight", "=", "torch", ".", "from_numpy", "(", "data_highlight", ")", ".", "float", "(", ")", "# float32", "\n", "\n", "return", "data_lowlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "data_highlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.exposure.exposure_loader.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.exposure.populate_train_list": [[20, 28], ["train_list.sort", "os.path.basename", "os.path.basename", "random.shuffle", "glob", "glob.glob", "os.path.join", "os.path.join"], "function", ["None"], ["def", "populate_train_list", "(", "images_path", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "train_list", "=", "[", "os", ".", "path", ".", "basename", "(", "f", ")", "for", "f", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "'*.JPG'", ")", ")", "]", "\n", "train_list", ".", "sort", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "random", ".", "shuffle", "(", "train_list", ")", "\n", "\n", "", "return", "train_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.__init__": [[27, 35], ["lol.populate_train_list", "print", "len"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.populate_train_list"], ["    ", "def", "__init__", "(", "self", ",", "images_path", ",", "mode", "=", "'train'", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "self", ".", "train_list", "=", "populate_train_list", "(", "images_path", ",", "mode", ")", "\n", "#self.h, self.w = int(img_size[0]), int(img_size[1])", "\n", "# train or test", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_list", "=", "self", ".", "train_list", "\n", "self", ".", "normalize", "=", "normalize", "\n", "print", "(", "\"Total examples:\"", ",", "len", "(", "self", ".", "train_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.FLIP_LR": [[38, 43], ["random.random", "low.transpose.transpose.transpose", "high.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "FLIP_LR", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "low", "=", "low", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "high", "=", "high", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "low", ",", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.FLIP_UD": [[44, 49], ["random.random", "low.transpose.transpose.transpose", "high.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "FLIP_UD", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "low", "=", "low", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "high", "=", "high", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "low", ",", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.get_params": [[50, 61], ["random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "low", ")", ":", "\n", "        ", "self", ".", "w", ",", "self", ".", "h", "=", "low", ".", "size", "\n", "\n", "self", ".", "crop_height", "=", "random", ".", "randint", "(", "self", ".", "h", "/", "2", ",", "self", ".", "h", ")", "#random.randint(self.MinCropHeight, self.MaxCropHeight)", "\n", "self", ".", "crop_width", "=", "random", ".", "randint", "(", "self", ".", "w", "/", "2", ",", "self", ".", "w", ")", "#random.randint(self.MinCropWidth,self.MaxCropWidth)", "\n", "# self.crop_height = 224 #random.randint(self.MinCropHeight, self.MaxCropHeight)", "\n", "# self.crop_width = 224 #random.randint(self.MinCropWidth,self.MaxCropWidth)", "\n", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "h", "-", "self", ".", "crop_height", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "w", "-", "self", ".", "crop_width", ")", "\n", "return", "i", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.Random_Crop": [[62, 68], ["lol.lowlight_loader.get_params", "random.random", "low.crop.crop.crop", "high.crop.crop.crop"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.get_params"], ["", "def", "Random_Crop", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "self", ".", "i", ",", "self", ".", "j", "=", "self", ".", "get_params", "(", "(", "low", ")", ")", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "low", "=", "low", ".", "crop", "(", "(", "self", ".", "j", ",", "self", ".", "i", ",", "self", ".", "j", "+", "self", ".", "crop_width", ",", "self", ".", "i", "+", "self", ".", "crop_height", ")", ")", "\n", "high", "=", "high", ".", "crop", "(", "(", "self", ".", "j", ",", "self", ".", "i", ",", "self", ".", "j", "+", "self", ".", "crop_width", ",", "self", ".", "i", "+", "self", ".", "crop_height", ")", ")", "\n", "", "return", "low", ",", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.__getitem__": [[70, 112], ["PIL.Image.open", "PIL.Image.open", "lol.lowlight_loader.FLIP_LR", "lol.lowlight_loader.FLIP_UD", "lol.lowlight_loader.Random_Crop", "PIL.Image.open.resize", "PIL.Image.open.resize", "data_lowlight_path.replace().replace", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "PIL.Image.open", "PIL.Image.open", "numpy.asarray", "numpy.asarray", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "PIL.Image.open.permute", "PIL.Image.open.permute", "data_lowlight_path.replace().replace", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "data_lowlight_path.replace", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ConvertImageDtype", "torchvision.transforms.ToTensor", "torchvision.transforms.ConvertImageDtype", "numpy.asarray", "numpy.asarray", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "PIL.Image.open.permute", "PIL.Image.open.permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data_lowlight_path.replace", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ConvertImageDtype", "torchvision.transforms.ToTensor", "torchvision.transforms.ConvertImageDtype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.FLIP_LR", "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.FLIP_UD", "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.Random_Crop"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data_lowlight_path", "=", "self", ".", "data_list", "[", "index", "]", "\n", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "data_lowlight", "=", "Image", ".", "open", "(", "data_lowlight_path", ")", "\n", "data_highlight", "=", "Image", ".", "open", "(", "data_lowlight_path", ".", "replace", "(", "'low'", ",", "'normal'", ")", ".", "replace", "(", "'Low'", ",", "'Normal'", ")", ")", "\n", "\n", "data_lowlight", ",", "data_highlight", "=", "self", ".", "FLIP_LR", "(", "data_lowlight", ",", "data_highlight", ")", "\n", "data_lowlight", ",", "data_highlight", "=", "self", ".", "FLIP_UD", "(", "data_lowlight", ",", "data_highlight", ")", "\n", "data_lowlight", ",", "data_highlight", "=", "self", ".", "Random_Crop", "(", "data_lowlight", ",", "data_highlight", ")", "\n", "\n", "# print(self.w, self.h)", "\n", "#print(data_lowlight.size, data_highlight.size)", "\n", "\n", "data_lowlight", "=", "data_lowlight", ".", "resize", "(", "(", "self", ".", "w", ",", "self", ".", "h", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "data_highlight", "=", "data_highlight", ".", "resize", "(", "(", "self", ".", "w", ",", "self", ".", "h", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "data_lowlight", ",", "data_highlight", "=", "(", "np", ".", "asarray", "(", "data_lowlight", ")", "/", "255.0", ")", ",", "(", "np", ".", "asarray", "(", "data_highlight", ")", "/", "255.0", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "#data_lowlight, data_highlight = torch.from_numpy(data_lowlight).float(), torch.from_numpy(data_highlight).float()", "\n", "                ", "transform_input", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "ConvertImageDtype", "(", "torch", ".", "float", ")", ",", "]", ")", "\n", "transform_gt", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "ConvertImageDtype", "(", "torch", ".", "float", ")", ",", "]", ")", "\n", "#return transform_input(data_lowlight).permute(2, 0, 1), transform_gt(data_highlight).permute(2, 0, 1)", "\n", "return", "transform_input", "(", "data_lowlight", ")", ",", "transform_gt", "(", "data_highlight", ")", "\n", "", "else", ":", "\n", "                ", "data_lowlight", ",", "data_highlight", "=", "torch", ".", "from_numpy", "(", "data_lowlight", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "data_highlight", ")", ".", "float", "(", ")", "\n", "return", "data_lowlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "data_highlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "data_lowlight", "=", "Image", ".", "open", "(", "data_lowlight_path", ")", "\n", "data_highlight", "=", "Image", ".", "open", "(", "data_lowlight_path", ".", "replace", "(", "'low'", ",", "'normal'", ")", ".", "replace", "(", "'Low'", ",", "'Normal'", ")", ")", "\n", "data_lowlight", ",", "data_highlight", "=", "(", "np", ".", "asarray", "(", "data_lowlight", ")", "/", "255.0", ")", ",", "(", "np", ".", "asarray", "(", "data_highlight", ")", "/", "255.0", ")", "\n", "#data_lowlight, data_highlight = torch.from_numpy(data_lowlight).float(), torch.from_numpy(data_highlight).float()", "\n", "if", "self", ".", "normalize", ":", "\n", "#data_lowlight, data_highlight = torch.from_numpy(data_lowlight).float(), torch.from_numpy(data_highlight).float()", "\n", "                ", "transform_input", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "ConvertImageDtype", "(", "torch", ".", "float", ")", ",", "]", ")", "\n", "transform_gt", "=", "Compose", "(", "[", "ToTensor", "(", ")", ",", "ConvertImageDtype", "(", "torch", ".", "float", ")", ",", "]", ")", "\n", "#return transform_input(data_lowlight).permute(2, 0, 1), transform_gt(data_highlight).permute(2, 0, 1)", "\n", "return", "transform_input", "(", "data_lowlight", ")", ",", "transform_gt", "(", "data_highlight", ")", "\n", "", "else", ":", "\n", "                ", "data_lowlight", ",", "data_highlight", "=", "torch", ".", "from_numpy", "(", "data_lowlight", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "data_highlight", ")", ".", "float", "(", ")", "\n", "return", "data_lowlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "data_highlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.lowlight_loader.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.lol.populate_train_list": [[16, 24], ["glob.glob", "random.shuffle"], "function", ["None"], ["def", "populate_train_list", "(", "images_path", ",", "mode", "=", "'train'", ")", ":", "\n", "# print(images_path)", "\n", "    ", "image_list_lowlight", "=", "glob", ".", "glob", "(", "images_path", "+", "'*.png'", ")", "\n", "train_list", "=", "image_list_lowlight", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "random", ".", "shuffle", "(", "train_list", ")", "\n", "\n", "", "return", "train_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.__init__": [[37, 52], ["mit5k.populate_train_list", "images_path.replace", "print", "len"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.populate_train_list"], ["    ", "def", "__init__", "(", "self", ",", "images_path", ",", "mode", "=", "'train'", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "self", ".", "train_list", "=", "populate_train_list", "(", "images_path", ",", "mode", ")", "\n", "# self.h, self.w = int(img_size[0]), int(img_size[1])", "\n", "self", ".", "mode", "=", "mode", "# train or test", "\n", "self", ".", "data_list", "=", "self", ".", "train_list", "\n", "self", ".", "low_path", "=", "images_path", "\n", "self", ".", "high_path", "=", "images_path", ".", "replace", "(", "'Inputs_jpg'", ",", "'Experts_C'", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "resize", "=", "True", "\n", "#self.image_size = 1200", "\n", "#self.image_size_w = 900", "\n", "self", ".", "image_size", "=", "600", "\n", "self", ".", "image_size_w", "=", "450", "\n", "#self.test_resize = True", "\n", "print", "(", "\"Total examples:\"", ",", "len", "(", "self", ".", "data_list", ")", ")", "\n", "#print(\"Total testing examples:\", len(self.test_list))", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.FLIP_aug": [[55, 65], ["random.random", "cv2.flip", "cv2.flip", "random.random", "cv2.flip", "cv2.flip"], "methods", ["None"], ["", "def", "FLIP_aug", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "low", "=", "cv2", ".", "flip", "(", "low", ",", "0", ")", "\n", "high", "=", "cv2", ".", "flip", "(", "high", ",", "0", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "low", "=", "cv2", ".", "flip", "(", "low", ",", "1", ")", "\n", "high", "=", "cv2", ".", "flip", "(", "high", ",", "1", ")", "\n", "\n", "", "return", "low", ",", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.get_params": [[67, 78], ["random.randint", "random.randint"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "low", ")", ":", "\n", "        ", "self", ".", "h", ",", "self", ".", "w", "=", "low", ".", "shape", "[", "0", "]", ",", "low", ".", "shape", "[", "1", "]", "# 900, 1200", "\n", "#print(self.h, self.w)", "\n", "#self.crop_height = random.randint(self.h / 2, self.h)  # random.randint(self.MinCropHeight, self.MaxCropHeight)", "\n", "#self.crop_width = random.randint(self.w / 2, self.w)  # random.randint(self.MinCropWidth,self.MaxCropWidth)", "\n", "self", ".", "crop_height", "=", "self", ".", "h", "/", "2", "#random.randint(self.MinCropHeight, self.MaxCropHeight)", "\n", "self", ".", "crop_width", "=", "self", ".", "w", "/", "2", "#random.randint(self.MinCropWidth,self.MaxCropWidth)", "\n", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "h", "-", "self", ".", "crop_height", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "w", "-", "self", ".", "crop_width", ")", "\n", "return", "i", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.Random_Crop": [[79, 86], ["mit5k.adobe5k_loader.get_params", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.get_params"], ["", "def", "Random_Crop", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "self", ".", "i", ",", "self", ".", "j", "=", "self", ".", "get_params", "(", "low", ")", "\n", "self", ".", "i", ",", "self", ".", "j", "=", "int", "(", "self", ".", "i", ")", ",", "int", "(", "self", ".", "j", ")", "\n", "#if random.random() > 0.5:", "\n", "low", "=", "low", "[", "self", ".", "i", ":", "self", ".", "i", "+", "int", "(", "self", ".", "crop_height", ")", ",", "self", ".", "j", ":", "self", ".", "j", "+", "int", "(", "self", ".", "crop_width", ")", "]", "\n", "high", "=", "high", "[", "self", ".", "i", ":", "self", ".", "i", "+", "int", "(", "self", ".", "crop_height", ")", ",", "self", ".", "j", ":", "self", ".", "j", "+", "int", "(", "self", ".", "crop_width", ")", "]", "\n", "return", "low", ",", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.__getitem__": [[87, 113], ["cv2.imread", "cv2.imread", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "os.join", "os.join", "os.join", "os.join", "cv2.transpose", "cv2.transpose", "cv2.resize", "cv2.resize", "mit5k.adobe5k_loader.FLIP_aug", "numpy.asarray", "numpy.asarray", "cv2.resize.permute", "cv2.resize.permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.FLIP_aug"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "data_list", "[", "index", "]", "\n", "\n", "#data_lowlight = Image.open(osp.join(self.low_path, img_id))", "\n", "data_lowlight", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "low_path", ",", "img_id", ")", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "data_highlight", "=", "cv2", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "high_path", ",", "img_id", ")", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "if", "data_lowlight", ".", "shape", "[", "0", "]", ">=", "data_lowlight", ".", "shape", "[", "1", "]", ":", "\n", "            ", "data_lowlight", "=", "cv2", ".", "transpose", "(", "data_lowlight", ")", "\n", "data_highlight", "=", "cv2", ".", "transpose", "(", "data_highlight", ")", "\n", "\n", "", "if", "self", ".", "resize", ":", "\n", "            ", "data_lowlight", "=", "cv2", ".", "resize", "(", "data_lowlight", ",", "(", "self", ".", "image_size", ",", "self", ".", "image_size_w", ")", ")", "\n", "data_highlight", "=", "cv2", ".", "resize", "(", "data_highlight", ",", "(", "self", ".", "image_size", ",", "self", ".", "image_size_w", ")", ")", "\n", "#print(data_lowlight.shape)", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "#data augmentation", "\n", "            ", "data_lowlight", ",", "data_highlight", "=", "self", ".", "FLIP_aug", "(", "data_lowlight", ",", "data_highlight", ")", "\n", "#data_lowlight, data_highlight = self.Random_Crop(data_lowlight, data_highlight)", "\n", "#print(data_lowlight.shape)", "\n", "", "data_lowlight", "=", "(", "np", ".", "asarray", "(", "data_lowlight", "[", "...", ",", ":", ":", "-", "1", "]", ")", "/", "255.0", ")", "\n", "data_highlight", "=", "(", "np", ".", "asarray", "(", "data_highlight", "[", "...", ",", ":", ":", "-", "1", "]", ")", "/", "255.0", ")", "\n", "\n", "data_lowlight", "=", "torch", ".", "from_numpy", "(", "data_lowlight", ")", ".", "float", "(", ")", "# float32", "\n", "data_highlight", "=", "torch", ".", "from_numpy", "(", "data_highlight", ")", ".", "float", "(", ")", "# float32", "\n", "\n", "return", "data_lowlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "data_highlight", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.adobe5k_loader.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.data_loaders.mit5k.populate_train_list": [[24, 33], ["train_list.sort", "os.path.basename", "os.path.basename", "random.shuffle", "glob", "glob.glob", "os.path.join", "os.path.join"], "function", ["None"], ["def", "populate_train_list", "(", "images_path", ",", "mode", "=", "'train'", ")", ":", "\n", "\n", "    ", "train_list", "=", "[", "os", ".", "path", ".", "basename", "(", "f", ")", "for", "f", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "images_path", ",", "'*.jpg'", ")", ")", "]", "\n", "train_list", ".", "sort", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "random", ".", "shuffle", "(", "train_list", ")", "\n", "\n", "", "return", "train_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.Local_pred.__init__": [[13, 32], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "model.blocks.CBlock_ln", "model.blocks.SwinTransformerBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "16", ",", "number", "=", "4", ",", "type", "=", "'ccc'", ")", ":", "\n", "        ", "super", "(", "Local_pred", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initial convolution", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "dim", ",", "3", ",", "padding", "=", "1", ",", "groups", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "# main blocks", "\n", "block", "=", "CBlock_ln", "(", "dim", ")", "\n", "block_t", "=", "SwinTransformerBlock", "(", "dim", ")", "# head number", "\n", "if", "type", "==", "'ccc'", ":", "\n", "#blocks1, blocks2 = [block for _ in range(number)], [block for _ in range(number)]", "\n", "            ", "blocks1", "=", "[", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.01", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.05", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.1", ")", "]", "\n", "blocks2", "=", "[", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.01", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.05", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.1", ")", "]", "\n", "", "elif", "type", "==", "'ttt'", ":", "\n", "            ", "blocks1", ",", "blocks2", "=", "[", "block_t", "for", "_", "in", "range", "(", "number", ")", "]", ",", "[", "block_t", "for", "_", "in", "range", "(", "number", ")", "]", "\n", "", "elif", "type", "==", "'cct'", ":", "\n", "            ", "blocks1", ",", "blocks2", "=", "[", "block", ",", "block", ",", "block_t", "]", ",", "[", "block", ",", "block", ",", "block_t", "]", "\n", "#    block1 = [CBlock_ln(16), nn.Conv2d(16,24,3,1,1)]", "\n", "", "self", ".", "mul_blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ",", "nn", ".", "Conv2d", "(", "dim", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "add_blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks2", ",", "nn", ".", "Conv2d", "(", "dim", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.Local_pred.forward": [[34, 40], ["IAT_main.Local_pred.relu", "IAT_main.Local_pred.mul_blocks", "IAT_main.Local_pred.add_blocks", "IAT_main.Local_pred.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "img1", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "img", ")", ")", "\n", "mul", "=", "self", ".", "mul_blocks", "(", "img1", ")", "\n", "add", "=", "self", ".", "add_blocks", "(", "img1", ")", "\n", "\n", "return", "mul", ",", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.Local_pred_S.__init__": [[43, 65], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "model.blocks.CBlock_ln", "model.blocks.SwinTransformerBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "IAT_main.Local_pred_S.apply", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Tanh", "torch.nn.Tanh", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "model.blocks.CBlock_ln", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "3", ",", "dim", "=", "16", ",", "number", "=", "4", ",", "type", "=", "'ccc'", ")", ":", "\n", "        ", "super", "(", "Local_pred_S", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# initial convolution", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "dim", ",", "3", ",", "padding", "=", "1", ",", "groups", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "# main blocks", "\n", "block", "=", "CBlock_ln", "(", "dim", ")", "\n", "block_t", "=", "SwinTransformerBlock", "(", "dim", ")", "# head number", "\n", "if", "type", "==", "'ccc'", ":", "\n", "            ", "blocks1", "=", "[", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.01", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.05", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.1", ")", "]", "\n", "blocks2", "=", "[", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.01", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.05", ")", ",", "CBlock_ln", "(", "16", ",", "drop_path", "=", "0.1", ")", "]", "\n", "", "elif", "type", "==", "'ttt'", ":", "\n", "            ", "blocks1", ",", "blocks2", "=", "[", "block_t", "for", "_", "in", "range", "(", "number", ")", "]", ",", "[", "block_t", "for", "_", "in", "range", "(", "number", ")", "]", "\n", "", "elif", "type", "==", "'cct'", ":", "\n", "            ", "blocks1", ",", "blocks2", "=", "[", "block", ",", "block", ",", "block_t", "]", ",", "[", "block", ",", "block", ",", "block_t", "]", "\n", "#    block1 = [CBlock_ln(16), nn.Conv2d(16,24,3,1,1)]", "\n", "", "self", ".", "mul_blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ")", "\n", "self", ".", "add_blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks2", ")", "\n", "\n", "self", ".", "mul_end", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "dim", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "add_end", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "dim", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.Local_pred_S._init_weights": [[66, 80], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.Local_pred_S.forward": [[83, 92], ["IAT_main.Local_pred_S.relu", "IAT_main.Local_pred_S.mul_end", "IAT_main.Local_pred_S.add_end", "IAT_main.Local_pred_S.conv1", "IAT_main.Local_pred_S.mul_blocks", "IAT_main.Local_pred_S.add_blocks"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "img1", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "img", ")", ")", "\n", "# short cut connection", "\n", "mul", "=", "self", ".", "mul_blocks", "(", "img1", ")", "+", "img1", "\n", "add", "=", "self", ".", "add_blocks", "(", "img1", ")", "+", "img1", "\n", "mul", "=", "self", ".", "mul_end", "(", "mul", ")", "\n", "add", "=", "self", ".", "add_end", "(", "add", ")", "\n", "\n", "return", "mul", ",", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.IAT.__init__": [[94, 103], ["torch.nn.Module.__init__", "IAT_main.Local_pred_S", "model.global_net.Global_pred"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "3", ",", "with_global", "=", "True", ",", "type", "=", "'lol'", ")", ":", "\n", "        ", "super", "(", "IAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.local_net = Local_pred()", "\n", "\n", "self", ".", "local_net", "=", "Local_pred_S", "(", "in_dim", "=", "in_dim", ")", "\n", "\n", "self", ".", "with_global", "=", "with_global", "\n", "if", "self", ".", "with_global", ":", "\n", "            ", "self", ".", "global_net", "=", "Global_pred", "(", "in_channels", "=", "in_dim", ",", "type", "=", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.IAT.apply_color": [[104, 110], ["image.view.view.view", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "image.view.view.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "", "def", "apply_color", "(", "self", ",", "image", ",", "ccm", ")", ":", "\n", "        ", "shape", "=", "image", ".", "shape", "\n", "image", "=", "image", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "image", "=", "torch", ".", "tensordot", "(", "image", ",", "ccm", ",", "dims", "=", "[", "[", "-", "1", "]", ",", "[", "-", "1", "]", "]", ")", "\n", "image", "=", "image", ".", "view", "(", "shape", ")", "\n", "return", "torch", ".", "clamp", "(", "image", ",", "1e-8", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.IAT.forward": [[111, 126], ["IAT_main.IAT.local_net", "img_low.mul().add", "IAT_main.IAT.global_net", "img_high.permute.permute.permute", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "img_high.permute.permute.permute", "img_low.mul", "IAT_main.IAT.apply_color", "range"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.IAT_main.IAT.apply_color"], ["", "def", "forward", "(", "self", ",", "img_low", ")", ":", "\n", "#print(self.with_global)", "\n", "        ", "mul", ",", "add", "=", "self", ".", "local_net", "(", "img_low", ")", "\n", "img_high", "=", "(", "img_low", ".", "mul", "(", "mul", ")", ")", ".", "add", "(", "add", ")", "\n", "\n", "if", "not", "self", ".", "with_global", ":", "\n", "            ", "return", "mul", ",", "add", ",", "img_high", "\n", "\n", "", "else", ":", "\n", "            ", "gamma", ",", "color", "=", "self", ".", "global_net", "(", "img_low", ")", "\n", "b", "=", "img_high", ".", "shape", "[", "0", "]", "\n", "img_high", "=", "img_high", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (B,C,H,W) -- (B,H,W,C)", "\n", "img_high", "=", "torch", ".", "stack", "(", "[", "self", ".", "apply_color", "(", "img_high", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "color", "[", "i", ",", ":", ",", ":", "]", ")", "**", "gamma", "[", "i", ",", ":", "]", "for", "i", "in", "range", "(", "b", ")", "]", ",", "dim", "=", "0", ")", "\n", "img_high", "=", "img_high", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# (B,H,W,C) -- (B,C,H,W)", "\n", "return", "mul", ",", "add", ",", "img_high", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.query_Attention.__init__": [[10, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "2", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "1", ",", "10", ",", "dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.query_Attention.forward": [[24, 38], ["global_net.query_Attention.k().reshape().permute", "global_net.query_Attention.v().reshape().permute", "global_net.query_Attention.q.expand().view().permute", "global_net.query_Attention.softmax", "global_net.query_Attention.attn_drop", "global_net.query_Attention.proj", "global_net.query_Attention.proj_drop", "global_net.query_Attention.k().reshape", "global_net.query_Attention.v().reshape", "global_net.query_Attention.q.expand().view", "global_net.query_Attention.transpose", "global_net.query_Attention.k", "global_net.query_Attention.v", "global_net.query_Attention.q.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "v", "=", "self", ".", "v", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "q", "=", "self", ".", "q", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", ".", "view", "(", "B", ",", "-", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "10", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.query_SABlock.__init__": [[41, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "global_net.query_Attention", "norm_layer", "int", "model.blocks.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "padding", "=", "1", ",", "groups", "=", "dim", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "query_Attention", "(", "\n", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.query_SABlock.forward": [[56, 62], ["global_net.query_SABlock.flatten().transpose", "global_net.query_SABlock.drop_path", "global_net.query_SABlock.pos_embed", "global_net.query_SABlock.attn", "global_net.query_SABlock.drop_path", "global_net.query_SABlock.flatten", "global_net.query_SABlock.norm1", "global_net.query_SABlock.mlp", "global_net.query_SABlock.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pos_embed", "(", "x", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.conv_embedding.__init__": [[65, 76], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.GELU", "torch.GELU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "conv_embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "//", "2", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "//", "2", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "# nn.Conv2d(out_channels // 2, out_channels // 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)),", "\n", "# nn.BatchNorm2d(out_channels // 2),", "\n", "# nn.GELU(),", "\n", "nn", ".", "Conv2d", "(", "out_channels", "//", "2", ",", "out_channels", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.conv_embedding.forward": [[78, 81], ["global_net.conv_embedding.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.Global_pred.__init__": [[84, 102], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "global_net.conv_embedding", "global_net.query_SABlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "global_net.Global_pred.apply", "global_net.Global_pred.named_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "num_heads", "=", "4", ",", "type", "=", "'exp'", ")", ":", "\n", "        ", "super", "(", "Global_pred", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "==", "'exp'", ":", "\n", "            ", "self", ".", "gamma_base", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "1", ")", ")", ",", "requires_grad", "=", "False", ")", "# False in exposure correction", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma_base", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "1", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "color_base", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "(", "3", ")", ")", ",", "requires_grad", "=", "True", ")", "# basic color matrix", "\n", "# main blocks", "\n", "self", ".", "conv_large", "=", "conv_embedding", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "generator", "=", "query_SABlock", "(", "dim", "=", "out_channels", ",", "num_heads", "=", "num_heads", ")", "\n", "self", ".", "gamma_linear", "=", "nn", ".", "Linear", "(", "out_channels", ",", "1", ")", "\n", "self", ".", "color_linear", "=", "nn", ".", "Linear", "(", "out_channels", ",", "1", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "for", "name", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "name", "==", "'generator.attn.v.weight'", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.Global_pred._init_weights": [[103, 111], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.global_net.Global_pred.forward": [[113, 122], ["global_net.Global_pred.conv_large", "global_net.Global_pred.generator", "x[].unsqueeze", "global_net.Global_pred.gamma_linear().squeeze", "global_net.Global_pred.color_linear().squeeze().view", "global_net.Global_pred.gamma_linear", "global_net.Global_pred.color_linear().squeeze", "global_net.Global_pred.color_linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(self.gamma_base)", "\n", "        ", "x", "=", "self", ".", "conv_large", "(", "x", ")", "\n", "x", "=", "self", ".", "generator", "(", "x", ")", "\n", "gamma", ",", "color", "=", "x", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "x", "[", ":", ",", "1", ":", "]", "\n", "gamma", "=", "self", ".", "gamma_linear", "(", "gamma", ")", ".", "squeeze", "(", "-", "1", ")", "+", "self", ".", "gamma_base", "\n", "#print(self.gamma_base, self.gamma_linear(gamma))", "\n", "color", "=", "self", ".", "color_linear", "(", "color", ")", ".", "squeeze", "(", "-", "1", ")", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "+", "self", ".", "color_base", "\n", "return", "gamma", ",", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.Aff.__init__": [[16, 21], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# learnable", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "1", ",", "1", ",", "dim", "]", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.Aff.forward": [[22, 25], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "alpha", "+", "self", ".", "beta", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.Aff_channel.__init__": [[28, 35], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "channel_first", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# learnable", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "1", ",", "1", ",", "dim", "]", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "dim", "]", ")", ")", "\n", "self", ".", "color", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "dim", ")", ")", "\n", "self", ".", "channel_first", "=", "channel_first", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.Aff_channel.forward": [[36, 44], ["torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "channel_first", ":", "\n", "            ", "x1", "=", "torch", ".", "tensordot", "(", "x", ",", "self", ".", "color", ",", "dims", "=", "[", "[", "-", "1", "]", ",", "[", "-", "1", "]", "]", ")", "\n", "x2", "=", "x1", "*", "self", ".", "alpha", "+", "self", ".", "beta", "\n", "", "else", ":", "\n", "            ", "x1", "=", "x", "*", "self", ".", "alpha", "+", "self", ".", "beta", "\n", "x2", "=", "torch", ".", "tensordot", "(", "x1", ",", "self", ".", "color", ",", "dims", "=", "[", "[", "-", "1", "]", ",", "[", "-", "1", "]", "]", ")", "\n", "", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.Mlp.__init__": [[47, 55], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.Mlp.forward": [[56, 63], ["blocks.Mlp.fc1", "blocks.Mlp.act", "blocks.Mlp.drop", "blocks.Mlp.fc2", "blocks.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.CMlp.__init__": [[66, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_features", ",", "hidden_features", ",", "1", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "hidden_features", ",", "out_features", ",", "1", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.CMlp.forward": [[75, 82], ["blocks.CMlp.fc1", "blocks.CMlp.act", "blocks.CMlp.drop", "blocks.CMlp.fc2", "blocks.CMlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.CBlock_ln.__init__": [[84, 101], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "blocks.CMlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "Aff_channel", ",", "init_values", "=", "1e-4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "padding", "=", "1", ",", "groups", "=", "dim", ")", "\n", "#self.norm1 = Aff_channel(dim)", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "1", ")", "\n", "self", ".", "attn", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "5", ",", "padding", "=", "2", ",", "groups", "=", "dim", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "#self.norm2 = Aff_channel(dim)", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "gamma_1", "=", "nn", ".", "Parameter", "(", "init_values", "*", "torch", ".", "ones", "(", "(", "1", ",", "dim", ",", "1", ",", "1", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma_2", "=", "nn", ".", "Parameter", "(", "init_values", "*", "torch", ".", "ones", "(", "(", "1", ",", "dim", ",", "1", ",", "1", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "mlp", "=", "CMlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.CBlock_ln.forward": [[102, 118], ["x.flatten().transpose", "blocks.CBlock_ln.norm1", "norm_x.view().permute.view().permute.view().permute", "x.flatten().transpose", "blocks.CBlock_ln.norm2", "norm_x.view().permute.view().permute.view().permute", "blocks.CBlock_ln.pos_embed", "blocks.CBlock_ln.drop_path", "blocks.CBlock_ln.drop_path", "x.flatten", "norm_x.view().permute.view().permute.view", "x.flatten", "norm_x.view().permute.view().permute.view", "blocks.CBlock_ln.conv2", "blocks.CBlock_ln.mlp", "blocks.CBlock_ln.attn", "blocks.CBlock_ln.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pos_embed", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "#print(x.shape)", "\n", "norm_x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "#print(norm_x.shape)", "\n", "norm_x", "=", "self", ".", "norm1", "(", "norm_x", ")", "\n", "norm_x", "=", "norm_x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma_1", "*", "self", ".", "conv2", "(", "self", ".", "attn", "(", "self", ".", "conv1", "(", "norm_x", ")", ")", ")", ")", "\n", "norm_x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "norm_x", "=", "self", ".", "norm2", "(", "norm_x", ")", "\n", "norm_x", "=", "norm_x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma_2", "*", "self", ".", "mlp", "(", "norm_x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.WindowAttention.__init__": [[164, 178], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.WindowAttention.forward": [[179, 195], ["blocks.WindowAttention.qkv().reshape().permute", "blocks.WindowAttention.softmax", "blocks.WindowAttention.attn_drop", "blocks.WindowAttention.proj", "blocks.WindowAttention.proj_drop", "k.transpose", "blocks.WindowAttention.qkv().reshape", "blocks.WindowAttention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__": [[215, 237], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "blocks.WindowAttention", "norm_layer", "int", "blocks.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "timm.models.layers.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "2", ",", "window_size", "=", "8", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "Aff_channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "padding", "=", "1", ",", "groups", "=", "dim", ")", "\n", "#self.norm1 = norm_layer(dim)", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "#self.norm2 = norm_layer(dim)", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.SwinTransformerBlock.forward": [[238, 273], ["x.transpose().reshape.transpose().reshape.flatten().transpose", "blocks.SwinTransformerBlock.norm1", "x.transpose().reshape.transpose().reshape.view", "blocks.window_partition", "x_windows.view.view.view", "blocks.SwinTransformerBlock.attn", "attn_windows.view.view.view", "blocks.window_reverse", "x.transpose().reshape.transpose().reshape.view", "x.transpose().reshape.transpose().reshape.transpose().reshape", "blocks.SwinTransformerBlock.pos_embed", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "blocks.SwinTransformerBlock.drop_path", "blocks.SwinTransformerBlock.drop_path", "x.transpose().reshape.transpose().reshape.flatten", "blocks.SwinTransformerBlock.mlp", "x.transpose().reshape.transpose().reshape.transpose", "blocks.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.window_partition", "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.window_reverse"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pos_embed", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", "# B H' W' C", "\n", "\n", "x", "=", "shifted_x", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.window_partition": [[120, 133], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "#print(x.shape)", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.cuiziteng_illumination-adaptive-transformer.model.blocks.window_reverse": [[135, 149], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]]}