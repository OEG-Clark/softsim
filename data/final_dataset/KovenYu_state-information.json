{"home.repos.pwc.inspect_result.KovenYu_state-information.src.main_cfp.main": [[11, 66], ["BaseOptions", "BaseOptions.parse", "Logger", "range", "torch.Tensor().mean", "torch.Tensor().std", "torch.Tensor().mean", "torch.Tensor().std", "torch.Tensor().mean", "torch.Tensor().std", "Logger.print_log", "BaseOptions.print_options", "get_cfp_dataloaders", "time.time", "AverageMeter", "range", "trainers.ReidTrainer.eval_performance_cfp", "acc_FP.append", "EER_FP.append", "AUC_FP.append", "load_checkpoint", "trainers.ReidTrainer", "Logger.print_log", "trainers.ReidTrainer.train_epoch", "Logger.print_log", "AverageMeter.update", "time.time", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "time_string", "create_stat_string", "time.time"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.parse", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.print_options", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.get_cfp_dataloaders", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.eval_performance_cfp", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.load_checkpoint", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.train_epoch", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.time_string", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.create_stat_string"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opts", "=", "BaseOptions", "(", ")", "\n", "args", "=", "opts", ".", "parse", "(", ")", "\n", "logger", "=", "Logger", "(", "args", ".", "save_path", ")", "\n", "\n", "acc_FP", "=", "[", "]", "\n", "EER_FP", "=", "[", "]", "\n", "AUC_FP", "=", "[", "]", "\n", "for", "test_set", "in", "range", "(", "10", ")", ":", "\n", "        ", "args", ".", "centroids_path", "=", "'data/renorm_centroids_CFP_resnet50-vggface2_K500_{}.dat'", ".", "format", "(", "test_set", ")", "\n", "args", ".", "align_path", "=", "'data/feature_CFP_resnet50-vggface2_{}.dat'", ".", "format", "(", "test_set", ")", "\n", "args", ".", "test_set", "=", "test_set", "\n", "opts", ".", "print_options", "(", "logger", ")", "\n", "train_loader", ",", "test_loader", ",", "protocol", "=", "get_cfp_dataloaders", "(", "args", ".", "dataset_path", ",", "args", ".", "img_size", ",", "args", ".", "crop_size", ",", "\n", "args", ".", "padding", ",", "args", ".", "batch_size", ",", "args", ".", "test_set", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "            ", "trainer", ",", "start_epoch", "=", "load_checkpoint", "(", "args", ",", "logger", ")", "\n", "", "else", ":", "\n", "            ", "trainer", "=", "ReidTrainer", "(", "args", ",", "logger", ",", "train_loader", ")", "\n", "start_epoch", "=", "0", "\n", "\n", "", "total_epoch", "=", "args", ".", "epochs", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epoch", ")", ":", "\n", "\n", "            ", "logger", ".", "print_log", "(", "\n", "'\\n==>>{:s} [Epoch={:03d}/{:03d}]'", ".", "format", "(", "time_string", "(", ")", ",", "epoch", ",", "total_epoch", ")", ")", "\n", "\n", "meters_trn", "=", "trainer", ".", "train_epoch", "(", "train_loader", ",", "epoch", ")", "\n", "logger", ".", "print_log", "(", "'  **Train**  '", "+", "create_stat_string", "(", "meters_trn", ")", ")", "\n", "\n", "epoch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "meters_val", "=", "trainer", ".", "eval_performance_cfp", "(", "test_loader", ",", "protocol", ")", "\n", "acc_FP", ".", "append", "(", "meters_val", "[", "'acc_FP'", "]", ".", "val", ")", "\n", "EER_FP", ".", "append", "(", "meters_val", "[", "'EER_FP'", "]", ".", "val", ")", "\n", "AUC_FP", ".", "append", "(", "meters_val", "[", "'AUC_FP'", "]", ".", "val", ")", "\n", "\n", "", "acc_m_FP", "=", "torch", ".", "Tensor", "(", "acc_FP", ")", ".", "mean", "(", ")", "\n", "acc_std_FP", "=", "torch", ".", "Tensor", "(", "acc_FP", ")", ".", "std", "(", ")", "\n", "EER_m_FP", "=", "torch", ".", "Tensor", "(", "EER_FP", ")", ".", "mean", "(", ")", "\n", "EER_std_FP", "=", "torch", ".", "Tensor", "(", "EER_FP", ")", ".", "std", "(", ")", "\n", "AUC_m_FP", "=", "torch", ".", "Tensor", "(", "AUC_FP", ")", ".", "mean", "(", ")", "\n", "AUC_std_FP", "=", "torch", ".", "Tensor", "(", "AUC_FP", ")", ".", "std", "(", ")", "\n", "\n", "logger", ".", "print_log", "(", "\n", "'acc_FP: {:.2%}({:.2%}), EER_FP: {:.2%}({:.2%}), AUC_FP: {:.2%}({:.2%})'", ".", "format", "(", "acc_m_FP", ",", "acc_std_FP", ",", "EER_m_FP", ",", "\n", "EER_std_FP", ",", "AUC_m_FP", ",", "\n", "AUC_std_FP", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.__init__": [[14, 16], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.train": [[17, 35], ["dir", "getattr().train", "getattr", "isinstance", "modules.append", "getattr"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.train"], ["", "def", "train", "(", "self", ",", "*", "names", ")", ":", "\n", "        ", "\"\"\"\n        set the given attributes in names to the training state.\n        if names is empty, call the train() method for all attributes which are instances of nn.Module.\n        :param names:\n        :return:\n        \"\"\"", "\n", "if", "not", "names", ":", "\n", "            ", "modules", "=", "[", "]", "\n", "for", "attr_name", "in", "dir", "(", "self", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "self", ",", "attr_name", ")", "\n", "if", "isinstance", "(", "attr", ",", "nn", ".", "Module", ")", ":", "\n", "                    ", "modules", ".", "append", "(", "attr_name", ")", "\n", "", "", "", "else", ":", "\n", "            ", "modules", "=", "names", "\n", "\n", "", "for", "m", "in", "modules", ":", "\n", "            ", "getattr", "(", "self", ",", "m", ")", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.eval": [[36, 54], ["dir", "getattr().eval", "getattr", "isinstance", "modules.append", "getattr"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.eval"], ["", "", "def", "eval", "(", "self", ",", "*", "names", ")", ":", "\n", "        ", "\"\"\"\n        set the given attributes in names to the evaluation state.\n        if names is empty, call the eval() method for all attributes which are instances of nn.Module.\n        :param names:\n        :return:\n        \"\"\"", "\n", "if", "not", "names", ":", "\n", "            ", "modules", "=", "[", "]", "\n", "for", "attr_name", "in", "dir", "(", "self", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "self", ",", "attr_name", ")", "\n", "if", "isinstance", "(", "attr", ",", "nn", ".", "Module", ")", ":", "\n", "                    ", "modules", ".", "append", "(", "attr_name", ")", "\n", "", "", "", "else", ":", "\n", "            ", "modules", "=", "names", "\n", "\n", "", "for", "m", "in", "modules", ":", "\n", "            ", "getattr", "(", "self", ",", "m", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.__init__": [[57, 89], ["trainers.Trainer.__init__", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "AlignLoss().cuda", "resnet.resnet50().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "utils.partition_params", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "trainers.ReidTrainer.init_losses", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "np.asarray", "trainers.ReidTrainer.logger.print_log", "os.path.isfile", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "trainers.AlignLoss", "resnet.resnet50", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.parse_pretrained_checkpoint", "trainers.ReidTrainer.add_fc_dim", "trainers.ReidTrainer.net.load_state_dict", "trainers.ReidTrainer.logger.print_log", "trainers.ReidTrainer.logger.print_log", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.partition_params", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.init_losses", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.resnet50", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.parse_pretrained_checkpoint", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.add_fc_dim", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ",", "loader", ")", ":", "\n", "        ", "super", "(", "ReidTrainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "disc_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "align_loss", "=", "AlignLoss", "(", "args", ".", "batch_size", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "net", "=", "resnet50", "(", "pretrained", "=", "False", ",", "num_classes", "=", "args", ".", "pseudo_class", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "pretrain_path", "is", "None", ":", "\n", "            ", "self", ".", "logger", ".", "print_log", "(", "'do not use pre-trained model. train from scratch.'", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrain_path", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrain_path", ")", "\n", "state_dict", "=", "parse_pretrained_checkpoint", "(", "checkpoint", ",", "args", ".", "pseudo_class", ")", "\n", "state_dict", "=", "self", ".", "add_fc_dim", "(", "state_dict", ",", "loader", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "self", ".", "logger", ".", "print_log", "(", "'loaded pre-trained model from {}'", ".", "format", "(", "args", ".", "pretrain_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "print_log", "(", "'{} is not a file. train from scratch.'", ".", "format", "(", "args", ".", "pretrain_path", ")", ")", "\n", "", "self", ".", "net", "=", "nn", ".", "DataParallel", "(", "self", ".", "net", ")", ".", "cuda", "(", ")", "\n", "\n", "bn_params", ",", "other_params", "=", "partition_params", "(", "self", ".", "net", ",", "'bn'", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "bn_params", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "'params'", ":", "other_params", "}", "]", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "self", ".", "lr_scheduler", "=", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "[", "int", "(", "args", ".", "epochs", "/", "8", "*", "5", ")", ",", "int", "(", "args", ".", "epochs", "/", "8", "*", "7", ")", "]", ")", "\n", "\n", "self", ".", "init_losses", "(", "loader", ")", "\n", "self", ".", "prior", "=", "torch", ".", "ones", "(", "args", ".", "pseudo_class", ")", ".", "cuda", "(", ")", "\n", "self", ".", "n_total", "=", "torch", ".", "full", "(", "(", "args", ".", "pseudo_class", ",", ")", ",", "len", "(", "loader", ".", "dataset", ")", "/", "args", ".", "pseudo_class", ")", "\n", "self", ".", "max_predominance_index", "=", "torch", ".", "zeros", "(", "args", ".", "pseudo_class", ")", "\n", "self", ".", "pseudo_label_memory", "=", "torch", ".", "full", "(", "(", "len", "(", "loader", ".", "dataset", ")", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "view_memory", "=", "np", ".", "asarray", "(", "loader", ".", "dataset", ".", "views", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.train_epoch": [[90, 136], ["trainers.ReidTrainer.lr_scheduler.step", "utils.AverageMeter", "trainers.ReidTrainer.train", "time.time", "enumerate", "utils.save_checkpoint", "utils.AverageMeter", "tuple[].cuda", "tuple[].cuda", "trainers.ReidTrainer.net.module.fc.weight.renorm().mul", "trainers.ReidTrainer.net", "torch.softmax", "torch.softmax", "torch.softmax", "trainers.ReidTrainer.align_loss", "trainers.get_pseudo_labels", "get_pseudo_labels.cpu", "trainers.ReidTrainer.disc_loss", "trainers.ReidTrainer.optimizer.zero_grad", "loss_total.backward", "trainers.ReidTrainer.optimizer.step", "utils.AverageMeter.update", "time.time", "os.path.join", "trainers.ReidTrainer.update_state", "trainers.ReidTrainer.update_prior", "features.mm", "trainers.ReidTrainer.logger.print_log", "trainers.ReidTrainer.net.module.fc.weight.renorm", "torch.softmax.detach", "locals", "v.item", "meters_trn[].update", "time.time", "trainers.ReidTrainer.detach().t", "v.item", "utils.time_string", "utils.create_stat_string", "trainers.ReidTrainer.detach", "len"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.train", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.save_checkpoint", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.get_pseudo_labels", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.update_state", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.update_prior", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.time_string", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.create_stat_string"], ["", "def", "train_epoch", "(", "self", ",", "loader", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "batch_time_meter", "=", "AverageMeter", "(", ")", "\n", "stats", "=", "(", "'loss_surrogate'", ",", "'loss_align'", ",", "'loss_total'", ")", "\n", "meters_trn", "=", "{", "stat", ":", "AverageMeter", "(", ")", "for", "stat", "in", "stats", "}", "\n", "self", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "tuple", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "i", "%", "self", ".", "args", ".", "prior_update_freq", "==", "0", ":", "\n", "                ", "self", ".", "update_state", "(", ")", "\n", "self", ".", "update_prior", "(", ")", "\n", "", "imgs", "=", "tuple", "[", "0", "]", ".", "cuda", "(", ")", "\n", "views", "=", "tuple", "[", "2", "]", ".", "cuda", "(", ")", "\n", "idx_img", "=", "tuple", "[", "3", "]", "\n", "\n", "classifer", "=", "self", ".", "net", ".", "module", ".", "fc", ".", "weight", ".", "renorm", "(", "2", ",", "0", ",", "1e-5", ")", ".", "mul", "(", "1e5", ")", "\n", "\n", "features", ",", "similarity", ",", "_", "=", "self", ".", "net", "(", "imgs", ")", "\n", "scores", "=", "similarity", "*", "30", "\n", "logits", "=", "F", ".", "softmax", "(", "features", ".", "mm", "(", "classifer", ".", "detach", "(", ")", ".", "t", "(", ")", "*", "30", ")", ",", "dim", "=", "1", ")", "\n", "loss_align", "=", "self", ".", "align_loss", "(", "features", ",", "views", ")", "\n", "\n", "pseudo_labels", "=", "get_pseudo_labels", "(", "logits", ".", "detach", "(", ")", "*", "self", ".", "prior", ")", "\n", "self", ".", "pseudo_label_memory", "[", "idx_img", "]", "=", "pseudo_labels", ".", "cpu", "(", ")", "\n", "loss_surrogate", "=", "self", ".", "disc_loss", "(", "scores", ",", "pseudo_labels", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_total", "=", "loss_surrogate", "+", "self", ".", "args", ".", "lamb_align", "*", "loss_align", "\n", "loss_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "for", "k", "in", "stats", ":", "\n", "                ", "v", "=", "locals", "(", ")", "[", "k", "]", "\n", "if", "v", ".", "item", "(", ")", ">", "0", ":", "\n", "                    ", "meters_trn", "[", "k", "]", ".", "update", "(", "v", ".", "item", "(", ")", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "\n", "", "", "batch_time_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "freq", "=", "self", ".", "args", ".", "batch_size", "/", "batch_time_meter", ".", "avg", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "args", ".", "print_freq", "!=", "0", "and", "i", "%", "self", ".", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "print_log", "(", "'  Iter: [{:03d}/{:03d}]   Freq {:.1f}   '", ".", "format", "(", "\n", "i", ",", "len", "(", "loader", ")", ",", "freq", ")", "+", "create_stat_string", "(", "meters_trn", ")", "+", "time_string", "(", ")", ")", "\n", "\n", "", "", "save_checkpoint", "(", "self", ",", "epoch", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "\"checkpoints.pth\"", ")", ")", "\n", "return", "meters_trn", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.eval_performance": [[137, 154], ["trainers.ReidTrainer.eval", "utils.extract_features", "utils.extract_features", "scipy.spatial.distance.cdist", "utils.eval_cmc_map", "utils.AverageMeter", "meters_val[].update", "locals", "v.item"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.eval", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.eval_cmc_map", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update"], ["", "def", "eval_performance", "(", "self", ",", "loader", ",", "gallery_loader", ",", "probe_loader", ")", ":", "\n", "        ", "stats", "=", "(", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'MAP'", ")", "\n", "meters_val", "=", "{", "stat", ":", "AverageMeter", "(", ")", "for", "stat", "in", "stats", "}", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "gallery_features", ",", "gallery_labels", ",", "gallery_views", "=", "extract_features", "(", "gallery_loader", ",", "self", ".", "net", ",", "index_feature", "=", "0", ")", "\n", "probe_features", ",", "probe_labels", ",", "probe_views", "=", "extract_features", "(", "probe_loader", ",", "self", ".", "net", ",", "index_feature", "=", "0", ")", "\n", "dist", "=", "cdist", "(", "gallery_features", ",", "probe_features", ",", "metric", "=", "'cosine'", ")", "\n", "CMC", ",", "MAP", "=", "eval_cmc_map", "(", "dist", ",", "gallery_labels", ",", "probe_labels", ",", "gallery_views", ",", "probe_views", ",", "ignore_MAP", "=", "False", ")", "\n", "r1", "=", "CMC", "[", "0", "]", "\n", "r5", "=", "CMC", "[", "4", "]", "\n", "r10", "=", "CMC", "[", "9", "]", "\n", "\n", "for", "k", "in", "stats", ":", "\n", "            ", "v", "=", "locals", "(", ")", "[", "k", "]", "\n", "meters_val", "[", "k", "]", ".", "update", "(", "v", ".", "item", "(", ")", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "", "return", "meters_val", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.eval_performance_mpie": [[155, 182], ["trainers.ReidTrainer.eval", "utils.extract_features", "utils.extract_features", "np.unique", "np.array", "np.array.mean", "utils.AverageMeter", "scipy.spatial.distance.cdist", "utils.eval_acc", "np.array.append", "trainers.ReidTrainer.logger.print_log", "meters_val[].update", "locals", "v.item"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.eval", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.eval_acc", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update"], ["", "def", "eval_performance_mpie", "(", "self", ",", "target_loader", ",", "gallery_loader", ",", "probe_loader", ")", ":", "\n", "        ", "stats", "=", "(", "'overall'", ",", "'d0'", ",", "'d15'", ",", "'d30'", ",", "'d45'", ",", "'d60'", ")", "\n", "meters_val", "=", "{", "stat", ":", "AverageMeter", "(", ")", "for", "stat", "in", "stats", "}", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "gallery_features", ",", "gallery_labels", ",", "gallery_views", "=", "extract_features", "(", "gallery_loader", ",", "self", ".", "net", ",", "index_feature", "=", "0", ")", "\n", "probe_features", ",", "probe_labels", ",", "probe_views", "=", "extract_features", "(", "probe_loader", ",", "self", ".", "net", ",", "index_feature", "=", "0", ")", "\n", "accuracy", "=", "[", "]", "\n", "for", "v", "in", "np", ".", "unique", "(", "probe_views", ")", ":", "\n", "            ", "idx", "=", "probe_views", "==", "v", "\n", "f", "=", "probe_features", "[", "idx", "]", "\n", "l", "=", "probe_labels", "[", "idx", "]", "\n", "dist", "=", "cdist", "(", "gallery_features", ",", "f", ",", "metric", "=", "'cosine'", ")", "\n", "acc", "=", "eval_acc", "(", "dist", ",", "gallery_labels", ",", "l", ")", "\n", "accuracy", ".", "append", "(", "acc", ")", "\n", "self", ".", "logger", ".", "print_log", "(", "'view : {}, acc : {:2f}'", ".", "format", "(", "v", ",", "acc", ")", ")", "\n", "", "accuracy", "=", "np", ".", "array", "(", "accuracy", ")", "\n", "overall", "=", "accuracy", ".", "mean", "(", ")", "\n", "d0", "=", "accuracy", "[", "4", "]", "\n", "d15", "=", "(", "accuracy", "[", "3", "]", "+", "accuracy", "[", "5", "]", ")", "/", "2", "\n", "d30", "=", "(", "accuracy", "[", "2", "]", "+", "accuracy", "[", "6", "]", ")", "/", "2", "\n", "d45", "=", "(", "accuracy", "[", "1", "]", "+", "accuracy", "[", "7", "]", ")", "/", "2", "\n", "d60", "=", "(", "accuracy", "[", "0", "]", "+", "accuracy", "[", "8", "]", ")", "/", "2", "\n", "for", "k", "in", "stats", ":", "\n", "            ", "v", "=", "locals", "(", ")", "[", "k", "]", "\n", "meters_val", "[", "k", "]", ".", "update", "(", "v", ".", "item", "(", ")", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "", "return", "meters_val", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.eval_performance_cfp": [[183, 208], ["trainers.ReidTrainer.eval", "utils.extract_features", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "utils.eval_CFP", "utils.AverageMeter", "torch.stack().cpu.append", "torch.stack().cpu.append", "torch.stack().cpu.append", "torch.stack().cpu.append", "torch.stack().cpu.append", "torch.stack().cpu.append", "meters_val[].update", "test_features.matmul", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "locals", "v.item", "test_features.t"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.eval", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.eval_CFP", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update"], ["", "def", "eval_performance_cfp", "(", "self", ",", "test_loader", ",", "protocol", ")", ":", "\n", "        ", "stats", "=", "(", "'acc_FP'", ",", "'EER_FP'", ",", "'AUC_FP'", ")", "\n", "meters_val", "=", "{", "stat", ":", "AverageMeter", "(", ")", "for", "stat", "in", "stats", "}", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "test_features", ",", "_", ",", "_", "=", "extract_features", "(", "test_loader", ",", "self", ".", "net", ",", "index_feature", "=", "0", ",", "return_numpy", "=", "False", ")", "\n", "similarity", "=", "(", "test_features", ".", "matmul", "(", "test_features", ".", "t", "(", ")", ")", "+", "1", ")", "/", "2", "\n", "FP_same_idx", "=", "protocol", "[", "'FP_same'", "]", "\n", "FP_same", "=", "[", "]", "\n", "for", "pair", "in", "FP_same_idx", ":", "\n", "            ", "sim", "=", "similarity", "[", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "+", "500", "]", "\n", "FP_same", ".", "append", "(", "sim", ")", "\n", "", "FP_same", "=", "torch", ".", "stack", "(", "FP_same", ")", ".", "cpu", "(", ")", "\n", "FP_diff_idx", "=", "protocol", "[", "'FP_diff'", "]", "\n", "FP_diff", "=", "[", "]", "\n", "for", "pair", "in", "FP_diff_idx", ":", "\n", "            ", "sim", "=", "similarity", "[", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "+", "500", "]", "\n", "FP_diff", ".", "append", "(", "sim", ")", "\n", "", "FP_diff", "=", "torch", ".", "stack", "(", "FP_diff", ")", ".", "cpu", "(", ")", "\n", "acc_FP", ",", "EER_FP", ",", "AUC_FP", "=", "eval_CFP", "(", "FP_same", ",", "FP_diff", ")", "\n", "\n", "for", "k", "in", "stats", ":", "\n", "            ", "v", "=", "locals", "(", ")", "[", "k", "]", "\n", "meters_val", "[", "k", "]", ".", "update", "(", "v", ".", "item", "(", ")", ")", "\n", "", "return", "meters_val", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.init_losses": [[209, 219], ["os.path.isfile", "trainers.ReidTrainer.align_loss.init_centers", "trainers.ReidTrainer.logger.print_log", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "trainers.ReidTrainer.logger.print_log", "trainers.ReidTrainer.logger.print_log", "utils.extract_features", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.AlignLoss.init_centers", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features"], ["", "def", "init_losses", "(", "self", ",", "loader", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "align_path", ")", ":", "\n", "            ", "features", ",", "views", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "align_path", ")", "\n", "self", ".", "logger", ".", "print_log", "(", "'loaded features from {}'", ".", "format", "(", "self", ".", "args", ".", "align_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "print_log", "(", "'not found {}. computing features...'", ".", "format", "(", "self", ".", "args", ".", "align_path", ")", ")", "\n", "features", ",", "_", ",", "views", "=", "extract_features", "(", "loader", ",", "self", ".", "net", ",", "index_feature", "=", "0", ",", "return_numpy", "=", "False", ")", "\n", "torch", ".", "save", "(", "(", "features", ",", "views", ")", ",", "self", ".", "args", ".", "align_path", ")", "\n", "", "self", ".", "align_loss", ".", "init_centers", "(", "features", ",", "views", ")", "\n", "self", ".", "logger", ".", "print_log", "(", "'initializing align loss centers done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.add_fc_dim": [[220, 245], ["os.path.isfile", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainers.ReidTrainer.logger.print_log", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "trainers.ReidTrainer.logger.print_log", "trainers.ReidTrainer.logger.print_log", "trainers.ReidTrainer.net.load_state_dict", "trainers.ReidTrainer.eval", "utils.extract_features", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "fc_weights.pow().sum().pow().mean", "torch.Tensor().cuda.renorm().mul", "torch.Tensor().cuda.renorm().mul", "torch.Tensor().cuda.renorm().mul", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "fc_weights.pow().sum().pow", "torch.Tensor().cuda.renorm", "torch.Tensor().cuda.renorm", "torch.Tensor().cuda.renorm", "fc_weights.pow().sum", "fc_weights.pow"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.eval", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features"], ["", "def", "add_fc_dim", "(", "self", ",", "state_dict", ",", "loader", ",", "fc_layer_name", "=", "'fc'", ")", ":", "\n", "        ", "fc_weight_name", "=", "'{}.weight'", ".", "format", "(", "fc_layer_name", ")", "\n", "fc_weight", "=", "state_dict", "[", "fc_weight_name", "]", "if", "fc_weight_name", "in", "state_dict", "else", "torch", ".", "empty", "(", "0", ",", "2048", ")", ".", "cuda", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "args", ".", "centroids_path", ")", ":", "\n", "            ", "renorm_centroids", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "centroids_path", ")", "\n", "self", ".", "logger", ".", "print_log", "(", "'loaded centroids from {}.'", ".", "format", "(", "self", ".", "args", ".", "centroids_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "print_log", "(", "'Not found {}. Evaluating centroids ..'", ".", "format", "(", "self", ".", "args", ".", "centroids_path", ")", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "features", ",", "_", ",", "_", "=", "extract_features", "(", "loader", ",", "self", ".", "net", ",", "index_feature", "=", "0", ")", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "self", ".", "args", ".", "pseudo_class", ",", "n_init", "=", "2", ")", "\n", "kmeans", ".", "fit", "(", "features", ")", "\n", "centroids_np", "=", "kmeans", ".", "cluster_centers_", "\n", "centroids", "=", "torch", ".", "Tensor", "(", "centroids_np", ")", ".", "cuda", "(", ")", "\n", "\n", "fc_weights", "=", "self", ".", "net", ".", "fc", ".", "weight", ".", "data", "\n", "mean_norm", "=", "fc_weights", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "pow", "(", "0.5", ")", ".", "mean", "(", ")", "\n", "renorm_centroids", "=", "centroids", ".", "renorm", "(", "p", "=", "2", ",", "dim", "=", "0", ",", "maxnorm", "=", "(", "1e-5", ")", "*", "mean_norm", ")", ".", "mul", "(", "1e5", ")", "\n", "torch", ".", "save", "(", "renorm_centroids", ",", "self", ".", "args", ".", "centroids_path", ")", "\n", "", "new_fc_weight", "=", "torch", ".", "cat", "(", "[", "fc_weight", ",", "renorm_centroids", "]", ",", "dim", "=", "0", ")", "\n", "state_dict", "[", "fc_weight_name", "]", "=", "new_fc_weight", "\n", "self", ".", "logger", ".", "print_log", "(", "'FC dimensions added.'", ")", "\n", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.update_state": [[246, 265], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "idx.sum", "tuple", "collections.Counter", "idx.nonzero().squeeze().numpy", "collections.Counter.most_common", "idx.nonzero().squeeze", "idx.nonzero"], "methods", ["None"], ["", "def", "update_state", "(", "self", ",", "moment", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"\n        according to self.pseudo_label_memory and self.view_memory,\n        update self.n_total and self.max_predominance_index\n        :return:\n        \"\"\"", "\n", "n_total", "=", "torch", ".", "zeros", "(", "self", ".", "args", ".", "pseudo_class", ")", "\n", "max_predominance_index", "=", "torch", ".", "ones", "(", "self", ".", "args", ".", "pseudo_class", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "pseudo_class", ")", ":", "\n", "            ", "idx", "=", "self", ".", "pseudo_label_memory", "==", "i", "\n", "n_total", "[", "i", "]", "=", "idx", ".", "sum", "(", ")", "\n", "views", "=", "self", ".", "view_memory", "[", "idx", ".", "nonzero", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "numpy", "(", ")", "]", "\n", "t", "=", "tuple", "(", "views", ")", "\n", "if", "t", ":", "\n", "                ", "c", "=", "Counter", "(", "t", ")", "\n", "_", ",", "max_count", "=", "c", ".", "most_common", "(", "1", ")", "[", "0", "]", "\n", "max_predominance_index", "[", "i", "]", "=", "max_count", "/", "n_total", "[", "i", "]", "\n", "", "", "self", ".", "n_total", "=", "moment", "*", "self", ".", "n_total", "+", "(", "1", "-", "moment", ")", "*", "n_total", "\n", "self", ".", "max_predominance_index", "=", "moment", "*", "self", ".", "max_predominance_index", "+", "(", "1", "-", "moment", ")", "*", "max_predominance_index", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.update_prior": [[266, 272], ["range", "np.exp"], "methods", ["None"], ["", "def", "update_prior", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "args", ".", "pseudo_class", ")", ":", "\n", "            ", "a", "=", "self", ".", "args", ".", "a", "\n", "b", "=", "self", ".", "args", ".", "b", "\n", "x", "=", "self", ".", "max_predominance_index", "[", "i", "]", "\n", "self", ".", "prior", "[", "i", "]", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "a", "*", "(", "x", "-", "b", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.AlignLoss.__init__": [[275, 279], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "AlignLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "moment", "=", "batch_size", "/", "10000", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.AlignLoss.init_centers": [[280, 300], ["torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "trainers.AlignLoss.register_buffer", "trainers.AlignLoss.register_buffer", "ml_in_v.mean", "ml_in_v.std", "mean_ml.append", "std_ml.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "init_centers", "(", "self", ",", "variables", ",", "views", ")", ":", "\n", "        ", "\"\"\"\n        :param variables: shape=(N, n_class)\n        :param views: (N,)\n        :return:\n        \"\"\"", "\n", "univiews", "=", "torch", ".", "unique", "(", "views", ")", "\n", "mean_ml", "=", "[", "]", "\n", "std_ml", "=", "[", "]", "\n", "for", "v", "in", "univiews", ":", "\n", "            ", "ml_in_v", "=", "variables", "[", "views", "==", "v", "]", "\n", "mean", "=", "ml_in_v", ".", "mean", "(", "dim", "=", "0", ")", "\n", "std", "=", "ml_in_v", ".", "std", "(", "dim", "=", "0", ")", "\n", "mean_ml", ".", "append", "(", "mean", ")", "\n", "std_ml", ".", "append", "(", "std", ")", "\n", "", "center_mean", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "mean_ml", ")", ",", "dim", "=", "0", ")", "\n", "center_std", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "std_ml", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "'center_mean'", ",", "center_mean", ")", "\n", "self", ".", "register_buffer", "(", "'center_std'", ",", "center_std", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.AlignLoss._update_centers": [[301, 322], ["torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "ml_in_v.mean", "means.append", "ml_in_v.std", "stds.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["None"], ["", "def", "_update_centers", "(", "self", ",", "variables", ",", "views", ")", ":", "\n", "        ", "\"\"\"\n        :param variables: shape=(BS, n_class)\n        :param views: shape=(BS,)\n        :return:\n        \"\"\"", "\n", "univiews", "=", "torch", ".", "unique", "(", "views", ")", "\n", "means", "=", "[", "]", "\n", "stds", "=", "[", "]", "\n", "for", "v", "in", "univiews", ":", "\n", "            ", "ml_in_v", "=", "variables", "[", "views", "==", "v", "]", "\n", "if", "len", "(", "ml_in_v", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "", "mean", "=", "ml_in_v", ".", "mean", "(", "dim", "=", "0", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "std", "=", "ml_in_v", ".", "std", "(", "dim", "=", "0", ")", "\n", "stds", ".", "append", "(", "std", ")", "\n", "", "new_mean", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "means", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "center_mean", "=", "self", ".", "center_mean", "*", "(", "1", "-", "self", ".", "moment", ")", "+", "new_mean", "*", "self", ".", "moment", "\n", "new_std", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "stds", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "center_std", "=", "self", ".", "center_std", "*", "(", "1", "-", "self", ".", "moment", ")", "+", "new_std", "*", "self", ".", "moment", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.AlignLoss.forward": [[323, 345], ["trainers.AlignLoss._update_centers", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "variables.detach", "ml_in_v.mean", "loss_terms.append", "ml_in_v.std", "loss_terms.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.AlignLoss._update_centers"], ["", "def", "forward", "(", "self", ",", "variables", ",", "views", ")", ":", "\n", "        ", "\"\"\"\n        :param variables: shape=(BS, n_class)\n        :param views: shape=(BS,)\n        :return:\n        \"\"\"", "\n", "self", ".", "_update_centers", "(", "variables", ".", "detach", "(", ")", ",", "views", ")", "\n", "\n", "univiews", "=", "torch", ".", "unique", "(", "views", ")", "\n", "loss_terms", "=", "[", "]", "\n", "for", "v", "in", "univiews", ":", "\n", "            ", "ml_in_v", "=", "variables", "[", "views", "==", "v", "]", "\n", "if", "len", "(", "ml_in_v", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "", "mean", "=", "ml_in_v", ".", "mean", "(", "dim", "=", "0", ")", "\n", "loss_mean", "=", "(", "mean", "-", "self", ".", "center_mean", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "loss_terms", ".", "append", "(", "loss_mean", ")", "\n", "std", "=", "ml_in_v", ".", "std", "(", "dim", "=", "0", ")", "\n", "loss_std", "=", "(", "std", "-", "self", ".", "center_std", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "loss_terms", ".", "append", "(", "loss_std", ")", "\n", "", "loss_total", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "loss_terms", ")", ")", "\n", "return", "loss_total", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.get_pseudo_labels": [[347, 356], ["torch.argmax", "torch.argmax", "torch.argmax", "pseudo_labels.cuda"], "function", ["None"], ["", "", "def", "get_pseudo_labels", "(", "similarity", ")", ":", "\n", "    ", "\"\"\"\n    :param similarity: torch.Tensor, shape=(BS, n_classes)\n    :return:\n    \"\"\"", "\n", "sim", "=", "similarity", "\n", "max_entries", "=", "torch", ".", "argmax", "(", "sim", ",", "dim", "=", "1", ")", "\n", "pseudo_labels", "=", "max_entries", "\n", "return", "pseudo_labels", ".", "cuda", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.main.main": [[11, 45], ["BaseOptions", "BaseOptions.parse", "Logger", "BaseOptions.print_options", "get_reid_dataloaders", "time.time", "AverageMeter", "range", "trainers.ReidTrainer.eval_performance", "Logger.print_log", "load_checkpoint", "trainers.ReidTrainer", "convert_secs2time", "Logger.print_log", "trainers.ReidTrainer.train_epoch", "Logger.print_log", "AverageMeter.update", "time.time", "create_stat_string", "time_string", "create_stat_string", "time.time"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.parse", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.print_options", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.get_reid_dataloaders", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.eval_performance", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.load_checkpoint", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.convert_secs2time", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.train_epoch", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.create_stat_string", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.time_string", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.create_stat_string"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opts", "=", "BaseOptions", "(", ")", "\n", "args", "=", "opts", ".", "parse", "(", ")", "\n", "logger", "=", "Logger", "(", "args", ".", "save_path", ")", "\n", "opts", ".", "print_options", "(", "logger", ")", "\n", "loader", ",", "gallery_loader", ",", "probe_loader", "=", "get_reid_dataloaders", "(", "args", ".", "dataset_path", ",", "args", ".", "img_size", ",", "\n", "args", ".", "crop_size", ",", "args", ".", "padding", ",", "args", ".", "batch_size", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "trainer", ",", "start_epoch", "=", "load_checkpoint", "(", "args", ",", "logger", ")", "\n", "", "else", ":", "\n", "        ", "trainer", "=", "ReidTrainer", "(", "args", ",", "logger", ",", "loader", ")", "\n", "start_epoch", "=", "0", "\n", "\n", "", "total_epoch", "=", "args", ".", "epochs", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epoch", ")", ":", "\n", "        ", "need_hour", ",", "need_mins", ",", "need_secs", "=", "convert_secs2time", "(", "epoch_time", ".", "avg", "*", "(", "total_epoch", "-", "epoch", ")", ")", "\n", "need_time", "=", "'[Need: {:02d}:{:02d}:{:02d}]'", ".", "format", "(", "need_hour", ",", "need_mins", ",", "need_secs", ")", "\n", "logger", ".", "print_log", "(", "\n", "'\\n==>>{:s} [Epoch={:03d}/{:03d}] {:s}'", ".", "format", "(", "time_string", "(", ")", ",", "epoch", ",", "total_epoch", ",", "need_time", ")", ")", "\n", "\n", "meters_trn", "=", "trainer", ".", "train_epoch", "(", "loader", ",", "epoch", ")", "\n", "logger", ".", "print_log", "(", "'  **Train**  '", "+", "create_stat_string", "(", "meters_trn", ")", ")", "\n", "\n", "epoch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "meters_val", "=", "trainer", ".", "eval_performance", "(", "loader", ",", "gallery_loader", ",", "probe_loader", ")", "\n", "logger", ".", "print_log", "(", "'  **Test**  '", "+", "create_stat_string", "(", "meters_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.main_mpie.main": [[11, 45], ["BaseOptions", "BaseOptions.parse", "Logger", "BaseOptions.print_options", "get_mpie_dataloaders", "time.time", "AverageMeter", "range", "trainers.ReidTrainer.eval_performance_mpie", "Logger.print_log", "load_checkpoint", "trainers.ReidTrainer", "convert_secs2time", "Logger.print_log", "trainers.ReidTrainer.train_epoch", "Logger.print_log", "AverageMeter.update", "time.time", "create_stat_string", "time_string", "create_stat_string", "time.time"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.parse", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.print_options", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.get_mpie_dataloaders", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.eval_performance_mpie", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.load_checkpoint", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.convert_secs2time", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.ReidTrainer.train_epoch", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.create_stat_string", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.time_string", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.create_stat_string"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opts", "=", "BaseOptions", "(", ")", "\n", "args", "=", "opts", ".", "parse", "(", ")", "\n", "logger", "=", "Logger", "(", "args", ".", "save_path", ")", "\n", "opts", ".", "print_options", "(", "logger", ")", "\n", "loader", ",", "gallery_loader", ",", "probe_loader", "=", "get_mpie_dataloaders", "(", "args", ".", "dataset_path", ",", "args", ".", "img_size", ",", "\n", "args", ".", "crop_size", ",", "args", ".", "padding", ",", "args", ".", "batch_size", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "trainer", ",", "start_epoch", "=", "load_checkpoint", "(", "args", ",", "logger", ")", "\n", "", "else", ":", "\n", "        ", "trainer", "=", "ReidTrainer", "(", "args", ",", "logger", ",", "loader", ")", "\n", "start_epoch", "=", "0", "\n", "\n", "", "total_epoch", "=", "args", ".", "epochs", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epoch", ")", ":", "\n", "        ", "need_hour", ",", "need_mins", ",", "need_secs", "=", "convert_secs2time", "(", "epoch_time", ".", "avg", "*", "(", "total_epoch", "-", "epoch", ")", ")", "\n", "need_time", "=", "'[Need: {:02d}:{:02d}:{:02d}]'", ".", "format", "(", "need_hour", ",", "need_mins", ",", "need_secs", ")", "\n", "logger", ".", "print_log", "(", "\n", "'\\n==>>{:s} [Epoch={:03d}/{:03d}] {:s}'", ".", "format", "(", "time_string", "(", ")", ",", "epoch", ",", "total_epoch", ",", "need_time", ")", ")", "\n", "\n", "meters_trn", "=", "trainer", ".", "train_epoch", "(", "loader", ",", "epoch", ")", "\n", "logger", ".", "print_log", "(", "'  **Train**  '", "+", "create_stat_string", "(", "meters_trn", ")", ")", "\n", "\n", "epoch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "meters_val", "=", "trainer", ".", "eval_performance_mpie", "(", "loader", ",", "gallery_loader", ",", "probe_loader", ")", "\n", "logger", ".", "print_log", "(", "'  **Test**  '", "+", "create_stat_string", "(", "meters_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.Bottleneck.__init__": [[21, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.Bottleneck.forward": [[35, 57], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.downsample", "resnet.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "not", "self", ".", "is_last", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNet.__init__": [[61, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__", "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "is_last", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNet._make_layer": [[84, 101], ["layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "is_last", "=", "is_last", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNet.forward": [[102, 121], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "x.view.view.view", "x.view.view.renorm().mul", "w.renorm().mul", "x.view.renorm().mul.mm", "x.view.view.size", "w.renorm().mul.t", "x.view.view.renorm", "w.renorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "feature_maps", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "feature_maps", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feature", "=", "x", ".", "renorm", "(", "2", ",", "0", ",", "1e-5", ")", ".", "mul", "(", "1e5", ")", "\n", "w", "=", "self", ".", "fc", ".", "weight", "\n", "ww", "=", "w", ".", "renorm", "(", "2", ",", "0", ",", "1e-5", ")", ".", "mul", "(", "1e5", ")", "\n", "sim", "=", "feature", ".", "mm", "(", "ww", ".", "t", "(", ")", ")", "\n", "\n", "return", "feature", ",", "sim", ",", "feature_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNetBasicblock.__init__": [[126, 148], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "residual_transform", "=", "None", ",", "output_activation", "=", "'relu'", ",", "norm", "=", "'batch'", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "norm", "\n", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "norm", "==", "'batch'", ":", "\n", "            ", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "            ", "self", ".", "bn_a", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'norm must be batch or instance'", "\n", "\n", "", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "norm", "==", "'batch'", ":", "\n", "            ", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "            ", "self", ".", "bn_b", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'norm must be batch or instance'", "\n", "\n", "", "self", ".", "residual_transform", "=", "residual_transform", "\n", "self", ".", "output_activation", "=", "nn", ".", "ReLU", "(", ")", "if", "output_activation", "==", "'relu'", "else", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.ResNetBasicblock.forward": [[149, 167], ["resnet.ResNetBasicblock.conv_a", "resnet.ResNetBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNetBasicblock.conv_b", "resnet.ResNetBasicblock.bn_b", "resnet.ResNetBasicblock.output_activation", "resnet.ResNetBasicblock.residual_transform", "resnet.ResNetBasicblock.size", "resnet.ResNetBasicblock.size", "resnet.ResNetBasicblock.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "basicblock", "=", "self", ".", "bn_a", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ",", "inplace", "=", "True", ")", "\n", "# basicblock = F.leaky_relu(basicblock, 0.1, inplace=True)", "\n", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "residual_transform", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "residual_transform", "(", "x", ")", "\n", "\n", "", "if", "residual", ".", "size", "(", ")", "[", "1", "]", ">", "basicblock", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "            ", "residual", "=", "residual", "[", ":", ",", ":", "basicblock", ".", "size", "(", ")", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "", "output", "=", "self", ".", "output_activation", "(", "residual", "+", "basicblock", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.init_params": [[169, 183], ["isinstance", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "function", ["None"], ["", "", "def", "init_params", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    initialize a module's parameters\n    if conv2d or convT2d, using he normalization\n    if bn set weight to 1 and bias to 0\n    :param m:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.resnet.resnet50": [[185, 195], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.__init__": [[23, 30], ["argparse.ArgumentParser", "utils.BaseOptions.parser.add_argument", "utils.BaseOptions.parser.add_argument", "utils.BaseOptions.parser.add_argument"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "self", ".", "args", "=", "None", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "'debug'", ",", "help", "=", "'Folder to save checkpoints and log.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu used.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.parse": [[31, 38], ["utils.BaseOptions.parser.parse_args", "argparse.Namespace", "open", "yaml.load", "os.path.join", "vars"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "self", ".", "args", ".", "gpu", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "save_path", ",", "'args.yaml'", ")", ")", "as", "f", ":", "\n", "            ", "extra_args", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "self", ".", "args", "=", "argparse", ".", "Namespace", "(", "**", "vars", "(", "self", ".", "args", ")", ",", "**", "extra_args", ")", "\n", "return", "self", ".", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.BaseOptions.print_options": [[39, 51], ["logger.print_log", "logger.print_log", "vars", "enumerate", "logger.print_log", "logger.print_log", "sorted", "vars.items", "logger.print_log", "len", "vars.items"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log"], ["", "def", "print_options", "(", "self", ",", "logger", ")", ":", "\n", "        ", "logger", ".", "print_log", "(", "\"\"", ")", "\n", "logger", ".", "print_log", "(", "\"----- options -----\"", ".", "center", "(", "120", ",", "'-'", ")", ")", "\n", "args", "=", "vars", "(", "self", ".", "args", ")", "\n", "string", "=", "''", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "sorted", "(", "args", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "string", "+=", "\"{}: {}\"", ".", "format", "(", "k", ",", "v", ")", ".", "center", "(", "40", ",", "' '", ")", "\n", "if", "i", "%", "3", "==", "2", "or", "i", "==", "len", "(", "args", ".", "items", "(", ")", ")", "-", "1", ":", "\n", "                ", "logger", ".", "print_log", "(", "string", ")", "\n", "string", "=", "''", "\n", "", "", "logger", ".", "print_log", "(", "\"\"", ".", "center", "(", "120", ",", "'-'", ")", ")", "\n", "logger", ".", "print_log", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.__init__": [[54, 60], ["open", "utils.Logger.print_log", "utils.Logger.print_log", "os.path.isdir", "os.makedirs", "os.path.join", "sys.version.replace", "utils.time_string"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.time_string"], ["    ", "def", "__init__", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "self", ".", "file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'log_{}.txt'", ".", "format", "(", "time_string", "(", ")", ")", ")", ",", "'w'", ")", "\n", "self", ".", "print_log", "(", "\"python version : {}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "self", ".", "print_log", "(", "\"torch  version : {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log": [[61, 65], ["utils.Logger.file.write", "utils.Logger.file.flush", "print"], "methods", ["None"], ["", "def", "print_log", "(", "self", ",", "string", ")", ":", "\n", "        ", "self", ".", "file", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "string", ")", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.__init__": [[70, 75], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update": [[76, 81], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.time_string": [[83, 87], ["time.strftime", "time.localtime", "time.time"], "function", ["None"], ["", "", "def", "time_string", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.extract_features": [[89, 139], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "type", "m.eval", "data[].cuda", "zip", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "len", "len", "views.append", "numpy.array", "numpy.array", "numpy.array", "torch.no_grad", "torch.no_grad", "m", "torch.cat.cpu", "torch.cat.cpu", "views.cpu"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.trainers.Trainer.eval"], ["", "def", "extract_features", "(", "loader", ",", "model", ",", "index_feature", "=", "None", ",", "return_numpy", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    extract features for the given loader using the given model\n    if loader.dataset.require_views is False, the returned 'views' are empty.\n    :param loader: a ReIDDataset that has attribute require_views\n    :param model: returns a tuple containing the feature or only return the feature. if latter, index_feature be None\n    model can also be a tuple of nn.Module, indicating that the feature extraction is multi-stage.\n    in this case, index_feature should be a tuple of the same size.\n    :param index_feature: in the tuple returned by model, the index of the feature.\n    if the model only returns feature, this should be set to None.\n    :param return_numpy: if True, return numpy array; otherwise return torch tensor\n    :return: features, labels, views, np array\n    \"\"\"", "\n", "if", "type", "(", "model", ")", "is", "not", "tuple", ":", "\n", "        ", "models", "=", "(", "model", ",", ")", "\n", "indices_feature", "=", "(", "index_feature", ",", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "model", ")", "==", "len", "(", "index_feature", ")", "\n", "models", "=", "model", "\n", "indices_feature", "=", "index_feature", "\n", "", "for", "m", "in", "models", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "\n", "", "labels", "=", "[", "]", "\n", "views", "=", "[", "]", "\n", "features", "=", "[", "]", "\n", "\n", "require_views", "=", "loader", ".", "dataset", ".", "require_views", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "imgs", "=", "data", "[", "0", "]", ".", "cuda", "(", ")", "\n", "label_batch", "=", "data", "[", "1", "]", "\n", "inputs", "=", "imgs", "\n", "for", "m", ",", "feat_idx", "in", "zip", "(", "models", ",", "indices_feature", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_tuple", "=", "m", "(", "inputs", ")", "\n", "", "feature_batch", "=", "output_tuple", "if", "feat_idx", "is", "None", "else", "output_tuple", "[", "feat_idx", "]", "\n", "inputs", "=", "feature_batch", "\n", "\n", "", "features", ".", "append", "(", "feature_batch", ")", "\n", "labels", ".", "append", "(", "label_batch", ")", "\n", "if", "require_views", ":", "\n", "            ", "view_batch", "=", "data", "[", "2", "]", "\n", "views", ".", "append", "(", "view_batch", ")", "\n", "", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "views", "=", "torch", ".", "cat", "(", "views", ",", "dim", "=", "0", ")", "if", "require_views", "else", "views", "\n", "if", "return_numpy", ":", "\n", "        ", "return", "np", ".", "array", "(", "features", ".", "cpu", "(", ")", ")", ",", "np", ".", "array", "(", "labels", ".", "cpu", "(", ")", ")", ",", "np", ".", "array", "(", "views", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "features", ",", "labels", ",", "views", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.create_stat_string": [[141, 146], ["meters.items"], "function", ["None"], ["", "", "def", "create_stat_string", "(", "meters", ")", ":", "\n", "    ", "stat_string", "=", "''", "\n", "for", "stat", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "        ", "stat_string", "+=", "'{} {:.3f}   '", ".", "format", "(", "stat", ",", "meter", ".", "avg", ")", "\n", "", "return", "stat_string", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.convert_secs2time": [[148, 153], ["int", "int", "int"], "function", ["None"], ["", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "    ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.eval_cmc_map": [[155, 214], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.zeros", "range", "numpy.mean", "numpy.mean", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.argsort", "numpy.nonzero", "range", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "eval_cmc_map", "(", "dist", ",", "gallery_labels", ",", "probe_labels", ",", "gallery_views", "=", "None", ",", "\n", "probe_views", "=", "None", ",", "ignore_MAP", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param dist: 2-d np array, shape=(num_gallery, num_probe), distance matrix.\n    :param gallery_labels: np array, shape=(num_gallery,)\n    :param probe_labels:\n    :param gallery_views: np array, shape=(num_gallery,) if specified, for any probe image,\n    the gallery correct matches from the same view are ignored.\n    :param probe_views: must be specified if gallery_views are specified.\n    :param ignore_MAP: is True, only compute cmc\n    :return:\n    CMC: np array, shape=(num_gallery,). Measured by percentage\n    MAP: np array, shape=(1,). Measured by percentage\n    \"\"\"", "\n", "gallery_labels", "=", "np", ".", "asarray", "(", "gallery_labels", ")", "\n", "probe_labels", "=", "np", ".", "asarray", "(", "probe_labels", ")", "\n", "dist", "=", "np", ".", "asarray", "(", "dist", ")", "\n", "\n", "is_view_sensitive", "=", "False", "\n", "num_gallery", "=", "gallery_labels", ".", "shape", "[", "0", "]", "\n", "num_probe", "=", "probe_labels", ".", "shape", "[", "0", "]", "\n", "if", "gallery_views", "is", "not", "None", "or", "probe_views", "is", "not", "None", ":", "\n", "        ", "assert", "gallery_views", "is", "not", "None", "and", "probe_views", "is", "not", "None", ",", "'gallery_views and probe_views must be specified together. \\n'", "\n", "gallery_views", "=", "np", ".", "asarray", "(", "gallery_views", ")", "\n", "probe_views", "=", "np", ".", "asarray", "(", "probe_views", ")", "\n", "is_view_sensitive", "=", "True", "\n", "", "cmc", "=", "np", ".", "zeros", "(", "(", "num_gallery", ",", "num_probe", ")", ")", "\n", "ap", "=", "np", ".", "zeros", "(", "(", "num_probe", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "num_probe", ")", ":", "\n", "        ", "cmc_", "=", "np", ".", "zeros", "(", "(", "num_gallery", ",", ")", ")", "\n", "dist_", "=", "dist", "[", ":", ",", "i", "]", "\n", "probe_label", "=", "probe_labels", "[", "i", "]", "\n", "gallery_labels_", "=", "gallery_labels", "\n", "if", "is_view_sensitive", ":", "\n", "            ", "probe_view", "=", "probe_views", "[", "i", "]", "\n", "is_from_same_view", "=", "gallery_views", "==", "probe_view", "\n", "is_correct", "=", "gallery_labels", "==", "probe_label", "\n", "should_be_excluded", "=", "is_from_same_view", "&", "is_correct", "\n", "dist_", "=", "dist_", "[", "~", "should_be_excluded", "]", "\n", "gallery_labels_", "=", "gallery_labels_", "[", "~", "should_be_excluded", "]", "\n", "", "ranking_list", "=", "np", ".", "argsort", "(", "dist_", ")", "\n", "inference_list", "=", "gallery_labels_", "[", "ranking_list", "]", "\n", "positions_correct_tuple", "=", "np", ".", "nonzero", "(", "probe_label", "==", "inference_list", ")", "\n", "positions_correct", "=", "positions_correct_tuple", "[", "0", "]", "\n", "pos_first_correct", "=", "positions_correct", "[", "0", "]", "\n", "cmc_", "[", "pos_first_correct", ":", "]", "=", "1", "\n", "cmc", "[", ":", ",", "i", "]", "=", "cmc_", "\n", "\n", "if", "not", "ignore_MAP", ":", "\n", "            ", "num_correct", "=", "positions_correct", ".", "shape", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "num_correct", ")", ":", "\n", "                ", "last_precision", "=", "float", "(", "j", ")", "/", "float", "(", "positions_correct", "[", "j", "]", ")", "if", "j", "!=", "0", "else", "1.0", "\n", "current_precision", "=", "float", "(", "j", "+", "1", ")", "/", "float", "(", "positions_correct", "[", "j", "]", "+", "1", ")", "\n", "ap", "[", "i", "]", "+=", "(", "last_precision", "+", "current_precision", ")", "/", "2.0", "/", "float", "(", "num_correct", ")", "\n", "\n", "", "", "", "CMC", "=", "np", ".", "mean", "(", "cmc", ",", "axis", "=", "1", ")", "\n", "MAP", "=", "np", ".", "mean", "(", "ap", ")", "\n", "return", "CMC", "*", "100", ",", "MAP", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.occupy_gpu_memory": [[216, 252], ["int", "range", "int", "subprocess.check_output", "dict", "torch.max_memory_cached", "int", "zip", "print", "int", "int", "torch.zeros", "torch.zeros", "torch.zeros.pin_memory", "torch.zeros.cuda", "print", "subprocess.check_output.strip().split", "range", "len", "len", "torch.device", "torch.device", "subprocess.check_output.strip", "torch.memory_cached"], "function", ["None"], ["", "def", "occupy_gpu_memory", "(", "gpu_ids", ",", "maximum_usage", "=", "None", ",", "buffer_memory", "=", "2000", ")", ":", "\n", "    ", "\"\"\"\n    As pytorch is dynamic, you might wanna take enough GPU memory to avoid OOM when you run your code\n    in a messy server.\n    if maximum_usage is specified, this function will return a dummy buffer which takes memory of\n    (current_available_memory - (maximum_usage - current_usage) - buffer_memory) MB.\n    otherwise, maximum_usage would be replaced by maximum usage till now, which is returned by\n    torch.cuda.max_memory_cached()\n    :param gpu_ids:\n    :param maximum_usage: float, measured in MB\n    :param buffer_memory: float, measured in MB\n    :return:\n    \"\"\"", "\n", "n_gpu", "=", "int", "(", "(", "len", "(", "gpu_ids", ")", "-", "1", ")", "/", "2", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "n_gpu", ")", ":", "\n", "        ", "gpu_id", "=", "int", "(", "gpu_ids", "[", "i", "*", "2", "]", ")", "\n", "if", "maximum_usage", "is", "None", ":", "\n", "            ", "maximum_usage", "=", "cutorch", ".", "max_memory_cached", "(", ")", "\n", "", "result", "=", "subprocess", ".", "check_output", "(", "\n", "[", "\n", "'nvidia-smi'", ",", "'--query-gpu=memory.free'", ",", "\n", "'--format=csv,nounits,noheader'", "]", ")", "\n", "# Convert lines into a dictionary", "\n", "gpu_memory", "=", "[", "int", "(", "x", ")", "for", "x", "in", "result", ".", "strip", "(", ")", ".", "split", "(", "b'\\n'", ")", "]", "\n", "gpu_memory_map", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "gpu_memory", ")", ")", ",", "gpu_memory", ")", ")", "\n", "available_memory", "=", "gpu_memory_map", "[", "gpu_id", "]", "\n", "if", "available_memory", "<", "buffer_memory", "+", "1000", ":", "\n", "            ", "print", "(", "'Gpu memory has been mostly occupied (although maybe not by you)!'", ")", "\n", "", "else", ":", "\n", "            ", "memory_to_occupy", "=", "int", "(", "(", "available_memory", "-", "(", "maximum_usage", "-", "cutorch", ".", "memory_cached", "(", "i", ")", "/", "1024", "/", "1024", ")", "-", "buffer_memory", ")", ")", "\n", "dim", "=", "int", "(", "memory_to_occupy", "*", "1024", "*", "1024", "*", "8", "/", "32", ")", "\n", "x", "=", "torch", ".", "zeros", "(", "dim", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "x", ".", "pin_memory", "(", ")", "\n", "x_", "=", "x", ".", "cuda", "(", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "print", "(", "'Occupied {}MB extra gpu memory in gpu{}.'", ".", "format", "(", "memory_to_occupy", ",", "gpu_id", ")", ")", "\n", "del", "x_", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.save_checkpoint": [[254, 264], ["torch.save", "torch.save", "os.path.isdir", "os.mkdir", "torch.save", "torch.save", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "trainer", ",", "epoch", ",", "save_path", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "logger", "=", "trainer", ".", "logger", "\n", "trainer", ".", "logger", "=", "None", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", "\n", "", "torch", ".", "save", "(", "(", "trainer", ",", "epoch", ")", ",", "save_path", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_path", "=", "save_path", "+", "'.best'", "\n", "torch", ".", "save", "(", "(", "trainer", ",", "epoch", ")", ",", "best_path", ")", "\n", "", "trainer", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.load_checkpoint": [[266, 296], ["os.path.isfile", "logger.print_log", "torch.load", "torch.load", "vars", "vars", "vars.items", "logger.print_log", "logger.print_log"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.Logger.print_log"], ["", "def", "load_checkpoint", "(", "args", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    load a checkpoint (containing a trainer and an epoch number) and assign a logger to the loaded trainer.\n    the differences between the loaded trainer.args and input args would be print to logger.\n    :param args:\n    :param logger:\n    :return:\n    \"\"\"", "\n", "load_path", "=", "args", ".", "resume", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "load_path", ")", "\n", "logger", ".", "print_log", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "load_path", ")", ")", "\n", "(", "trainer", ",", "epoch", ")", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "trainer", ".", "logger", "=", "logger", "\n", "\n", "old_args", "=", "trainer", ".", "args", "\n", "trainer", ".", "args", "=", "args", "\n", "\n", "attributes", "=", "vars", "(", "args", ")", "\n", "old_attributes", "=", "vars", "(", "old_args", ")", "\n", "for", "name", ",", "value", "in", "attributes", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "==", "'resume'", "or", "name", "==", "'gpu'", ":", "\n", "            ", "continue", "\n", "", "if", "name", "in", "old_attributes", ":", "\n", "            ", "old_value", "=", "old_attributes", "[", "name", "]", "\n", "if", "old_value", "!=", "value", ":", "\n", "                ", "logger", ".", "print_log", "(", "\"args.{} was {} but now is replaced by the newly specified one: {}.\"", ".", "format", "(", "name", ",", "old_value", ",", "\n", "value", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "print_log", "(", "\"args.{} was not specified in the checkpoint.\"", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "trainer", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.compute_accuracy": [[298, 310], ["torch.argmax", "torch.argmax", "torch.sum().item", "torch.sum().item", "torch.numel", "torch.numel", "float", "float", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "compute_accuracy", "(", "predictions", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    compute classification accuracy, measured by percentage.\n    :param predictions: tensor. size = N*d\n    :param labels: tensor. size = N\n    :return: python number, the computed accuracy\n    \"\"\"", "\n", "predicted_labels", "=", "torch", ".", "argmax", "(", "predictions", ",", "dim", "=", "1", ")", "\n", "n_correct", "=", "torch", ".", "sum", "(", "predicted_labels", "==", "labels", ")", ".", "item", "(", ")", "\n", "batch_size", "=", "torch", ".", "numel", "(", "labels", ")", "\n", "acc", "=", "float", "(", "n_correct", ")", "/", "float", "(", "batch_size", ")", "\n", "return", "acc", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.eval_acc": [[312, 322], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.argsort"], "function", ["None"], ["", "def", "eval_acc", "(", "dist", ",", "gallery_labels", ",", "probe_labels", ")", ":", "\n", "    ", "gallery_labels", "=", "np", ".", "asarray", "(", "gallery_labels", ")", "\n", "probe_labels", "=", "np", ".", "asarray", "(", "probe_labels", ")", "\n", "dist", "=", "np", ".", "asarray", "(", "dist", ")", "\n", "\n", "ranking_table", "=", "np", ".", "argsort", "(", "dist", ",", "axis", "=", "0", ")", "\n", "r1_idx", "=", "ranking_table", "[", "0", "]", "\n", "infered_labels", "=", "gallery_labels", "[", "r1_idx", "]", "\n", "acc", "=", "(", "infered_labels", "==", "probe_labels", ")", ".", "mean", "(", ")", "*", "100", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.partition_params": [[324, 354], ["set", "set.difference", "list", "list", "set", "module.modules", "module.parameters", "set", "isinstance", "isinstance", "isinstance", "set.update", "module.__getattr__", "module.__getattr__.modules", "set", "set.update", "m.parameters", "set", "m.parameters"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.AverageMeter.update"], ["", "def", "partition_params", "(", "module", ",", "strategy", ",", "*", "desired_modules", ")", ":", "\n", "    ", "\"\"\"\n    partition params into desired part and the residual\n    :param module:\n    :param strategy: choices are: ['bn', 'specified'].\n    'bn': desired_params = bn_params\n    'specified': desired_params = all params within desired_modules\n    :param desired_modules: strings, each corresponds to a specific module\n    :return: two lists\n    \"\"\"", "\n", "if", "strategy", "==", "'bn'", ":", "\n", "        ", "desired_params_set", "=", "set", "(", ")", "\n", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", "or", "\n", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "\n", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "                ", "desired_params_set", ".", "update", "(", "set", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "", "elif", "strategy", "==", "'specified'", ":", "\n", "        ", "desired_params_set", "=", "set", "(", ")", "\n", "for", "module_name", "in", "desired_modules", ":", "\n", "            ", "sub_module", "=", "module", ".", "__getattr__", "(", "module_name", ")", "\n", "for", "m", "in", "sub_module", ".", "modules", "(", ")", ":", "\n", "                ", "desired_params_set", ".", "update", "(", "set", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "assert", "False", ",", "'unknown strategy: {}'", ".", "format", "(", "strategy", ")", "\n", "", "all_params_set", "=", "set", "(", "module", ".", "parameters", "(", ")", ")", "\n", "other_params_set", "=", "all_params_set", ".", "difference", "(", "desired_params_set", ")", "\n", "desired_params", "=", "list", "(", "desired_params_set", ")", "\n", "other_params", "=", "list", "(", "other_params_set", ")", "\n", "return", "desired_params", ",", "other_params", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.get_reid_dataloaders": [[356, 387], ["ReIDdatasets.Market", "ReIDdatasets.Market", "ReIDdatasets.Market", "torchvision.Compose", "torchvision.Compose", "ReIDdatasets.Market.turn_on_transform", "ReIDdatasets.Market.turn_on_transform", "ReIDdatasets.Market.turn_on_transform", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ReIDdatasets.Market.return_mean", "ReIDdatasets.Market.return_std", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.return_mean", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.return_std"], ["", "def", "get_reid_dataloaders", "(", "dataset", ",", "img_size", ",", "crop_size", ",", "padding", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    get train/gallery/probe dataloaders.\n    :return:\n    \"\"\"", "\n", "\n", "train_data", "=", "Market", "(", "'{}.mat'", ".", "format", "(", "dataset", ")", ",", "state", "=", "'train'", ")", "\n", "gallery_data", "=", "Market", "(", "'{}.mat'", ".", "format", "(", "dataset", ")", ",", "state", "=", "'gallery'", ")", "\n", "probe_data", "=", "Market", "(", "'{}.mat'", ".", "format", "(", "dataset", ")", ",", "state", "=", "'probe'", ")", "\n", "\n", "mean", "=", "train_data", ".", "return_mean", "(", ")", "/", "255.0", "\n", "std", "=", "train_data", ".", "return_std", "(", ")", "/", "255.0", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "Resize", "(", "img_size", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "crop_size", ",", "padding", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "img_size", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "\n", "train_data", ".", "turn_on_transform", "(", "transform", "=", "train_transform", ")", "\n", "gallery_data", ".", "turn_on_transform", "(", "transform", "=", "test_transform", ")", "\n", "probe_data", ".", "turn_on_transform", "(", "transform", "=", "test_transform", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "gallery_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "gallery_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "probe_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "probe_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "gallery_loader", ",", "probe_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.get_mpie_dataloaders": [[389, 433], ["ReIDdatasets.MultiPie", "ReIDdatasets.MultiPie", "ReIDdatasets.MultiPie", "numpy.array", "numpy.array", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Compose", "torchvision.Compose", "ReIDdatasets.MultiPie.turn_on_transform", "ReIDdatasets.MultiPie.turn_on_transform", "ReIDdatasets.MultiPie.turn_on_transform", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform"], ["", "def", "get_mpie_dataloaders", "(", "dataset_path", ",", "img_size", ",", "crop_size", ",", "padding", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    get train/gallery/probe dataloaders.\n    :return:\n    \"\"\"", "\n", "\n", "train_data", "=", "MultiPie", "(", "dataset_path", ",", "state", "=", "'train'", ")", "\n", "gallery_data", "=", "MultiPie", "(", "dataset_path", ",", "state", "=", "'gallery'", ")", "\n", "probe_data", "=", "MultiPie", "(", "dataset_path", ",", "state", "=", "'probe'", ")", "\n", "\n", "mean", "=", "np", ".", "array", "(", "[", "91.4953", ",", "103.8827", ",", "131.0912", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "# mean = train_data.return_mean() / 255", "\n", "# std = train_data.return_std() / 255", "\n", "# mean = np.array([0.485, 0.456, 0.406])", "\n", "# std = np.array([0.229, 0.224, 0.225])", "\n", "\n", "\"\"\"Assuming using CAFFE pretrained model, thus transform input to BGR,\n    and do not divide std.\"\"\"", "\n", "\n", "back_to_256", "=", "transforms", ".", "Lambda", "(", "lambda", "tensor", ":", "tensor", "*", "255", ")", "\n", "to_bgr", "=", "transforms", ".", "Lambda", "(", "lambda", "tensor", ":", "tensor", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "Resize", "(", "img_size", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "crop_size", ",", "padding", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "back_to_256", ",", "to_bgr", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "# transforms.Normalize(mean, std)])", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "img_size", ")", ",", "transforms", ".", "CenterCrop", "(", "crop_size", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "back_to_256", ",", "to_bgr", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "# transforms.Normalize(mean, std)])", "\n", "\n", "train_data", ".", "turn_on_transform", "(", "transform", "=", "train_transform", ")", "\n", "gallery_data", ".", "turn_on_transform", "(", "transform", "=", "test_transform", ")", "\n", "probe_data", ".", "turn_on_transform", "(", "transform", "=", "test_transform", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "gallery_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "gallery_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "probe_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "probe_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "gallery_loader", ",", "probe_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.get_cfp_dataloaders": [[435, 470], ["ReIDdatasets.CFP", "ReIDdatasets.CFP", "ReIDdatasets.CFP.return_protocol", "numpy.array", "numpy.array", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Compose", "torchvision.Compose", "ReIDdatasets.CFP.turn_on_transform", "ReIDdatasets.CFP.turn_on_transform", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "range"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.return_protocol", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform"], ["", "def", "get_cfp_dataloaders", "(", "dataset_path", ",", "img_size", ",", "crop_size", ",", "padding", ",", "batch_size", ",", "test_set", ")", ":", "\n", "    ", "\"\"\"\n    get train/gallery/probe dataloaders.\n    :return:\n    \"\"\"", "\n", "\n", "train_data", "=", "CFP", "(", "dataset_path", ",", "[", "x", "for", "x", "in", "range", "(", "10", ")", "if", "x", "!=", "test_set", "]", ")", "\n", "test_data", "=", "CFP", "(", "dataset_path", ",", "[", "test_set", "]", ")", "\n", "protocol", "=", "test_data", ".", "return_protocol", "(", ")", "\n", "\n", "mean", "=", "np", ".", "array", "(", "[", "91.4953", ",", "103.8827", ",", "131.0912", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.0", ",", "1.0", "]", ")", "\n", "\n", "\"\"\"Assuming using CAFFE pretrained model, thus transform input to BGR,\n    and do not divide std.\"\"\"", "\n", "\n", "back_to_256", "=", "transforms", ".", "Lambda", "(", "lambda", "tensor", ":", "tensor", "*", "255", ")", "\n", "to_bgr", "=", "transforms", ".", "Lambda", "(", "lambda", "tensor", ":", "tensor", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "Resize", "(", "img_size", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "crop_size", ",", "padding", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "back_to_256", ",", "to_bgr", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "img_size", ")", ",", "transforms", ".", "CenterCrop", "(", "crop_size", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "back_to_256", ",", "to_bgr", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "\n", "train_data", ".", "turn_on_transform", "(", "transform", "=", "train_transform", ")", "\n", "test_data", ".", "turn_on_transform", "(", "transform", "=", "test_transform", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "protocol", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.eval_CFP": [[472, 504], ["torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.max", "delta.argmin", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "sum_y.dot", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "eval_CFP", "(", "sim_same", ",", "sim_diff", ")", ":", "\n", "    ", "\"\"\"\n    :param sim_same: 1d tensor, every entry is a similarity\n    :param sim_diff: 1d tensor, every entry is a similarity\n    :return: acc, EER, AUC\n    \"\"\"", "\n", "\n", "FAR", "=", "[", "]", "\n", "FRR", "=", "[", "]", "\n", "TAR", "=", "[", "]", "\n", "FP_acc", "=", "[", "]", "\n", "for", "threshold", "in", "torch", ".", "arange", "(", "0.0", ",", "1.0", ",", "0.01", ")", ":", "\n", "        ", "true_p", "=", "(", "sim_same", ">=", "threshold", ")", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "Tensor", ")", "\n", "false_n", "=", "(", "sim_same", "<", "threshold", ")", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "Tensor", ")", "\n", "true_n", "=", "(", "sim_diff", "<", "threshold", ")", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "Tensor", ")", "\n", "false_p", "=", "(", "sim_diff", ">=", "threshold", ")", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "Tensor", ")", "\n", "FP_acc", ".", "append", "(", "true_p", "/", "len", "(", "sim_same", ")", "/", "2", "+", "true_n", "/", "len", "(", "sim_diff", ")", "/", "2", ")", "\n", "FAR", ".", "append", "(", "false_p", "/", "len", "(", "sim_diff", ")", ")", "\n", "FRR", ".", "append", "(", "false_n", "/", "len", "(", "sim_same", ")", ")", "\n", "TAR", ".", "append", "(", "true_p", "/", "len", "(", "sim_same", ")", ")", "\n", "", "FAR", "=", "torch", ".", "stack", "(", "FAR", ")", "\n", "FRR", "=", "torch", ".", "stack", "(", "FRR", ")", "\n", "TAR", "=", "torch", ".", "stack", "(", "TAR", ")", "\n", "FP_acc", "=", "torch", ".", "stack", "(", "FP_acc", ")", "\n", "acc", "=", "FP_acc", ".", "max", "(", ")", "\n", "delta", "=", "(", "FAR", "-", "FRR", ")", ".", "abs", "(", ")", "\n", "EER_idx", "=", "delta", ".", "argmin", "(", ")", "\n", "EER", "=", "FAR", "[", "EER_idx", "]", "/", "2", "+", "FRR", "[", "EER_idx", "]", "/", "2", "\n", "sum_y", "=", "TAR", "[", ":", "-", "1", "]", "+", "TAR", "[", "1", ":", "]", "\n", "delta_x", "=", "FAR", "[", ":", "-", "1", "]", "-", "FAR", "[", "1", ":", "]", "\n", "AUC", "=", "sum_y", ".", "dot", "(", "delta_x", ")", "/", "2", "\n", "return", "acc", ",", "EER", ",", "AUC", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.find_wrong_match": [[506, 552], ["range", "numpy.argsort", "numpy.nonzero", "prb_idx.append", "gal_idx.append", "correct_indicators.append"], "function", ["None"], ["", "def", "find_wrong_match", "(", "dist", ",", "gallery_labels", ",", "probe_labels", ",", "gallery_views", "=", "None", ",", "probe_views", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    find the probe samples which result in a wrong match at rank-1.\n    :param dist: 2-d np array, shape=(num_gallery, num_probe), distance matrix.\n    :param gallery_labels: np array, shape=(num_gallery,)\n    :param probe_labels:\n    :param gallery_views: np array, shape=(num_gallery,) if specified, for any probe image,\n    the gallery correct matches from the same view are ignored.\n    :param probe_views: must be specified if gallery_views are specified.\n    :return:\n    prb_idx: list of int, length == n_found_wrong_prb\n    gal_idx: list of np array, each of which associating with the element in prb_idx\n    correct_indicators: list of np array corresponding to gal_idx, indicating whether that gal is a correct match.\n    \"\"\"", "\n", "is_view_sensitive", "=", "False", "\n", "num_probe", "=", "probe_labels", ".", "shape", "[", "0", "]", "\n", "if", "gallery_views", "is", "not", "None", "or", "probe_views", "is", "not", "None", ":", "\n", "        ", "assert", "gallery_views", "is", "not", "None", "and", "probe_views", "is", "not", "None", ",", "'gallery_views and probe_views must be specified together. \\n'", "\n", "is_view_sensitive", "=", "True", "\n", "", "prb_idx", "=", "[", "]", "\n", "gal_idx", "=", "[", "]", "\n", "correct_indicators", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_probe", ")", ":", "\n", "        ", "dist_", "=", "dist", "[", ":", ",", "i", "]", "\n", "probe_label", "=", "probe_labels", "[", "i", "]", "\n", "gallery_labels_", "=", "gallery_labels", "\n", "if", "is_view_sensitive", ":", "\n", "            ", "probe_view", "=", "probe_views", "[", "i", "]", "\n", "is_from_same_view", "=", "gallery_views", "==", "probe_view", "\n", "is_correct", "=", "gallery_labels", "==", "probe_label", "\n", "should_be_excluded", "=", "is_from_same_view", "&", "is_correct", "\n", "dist_", "=", "dist_", "[", "~", "should_be_excluded", "]", "\n", "gallery_labels_", "=", "gallery_labels_", "[", "~", "should_be_excluded", "]", "\n", "", "ranking_list", "=", "np", ".", "argsort", "(", "dist_", ")", "\n", "inference_list", "=", "gallery_labels_", "[", "ranking_list", "]", "\n", "positions_correct_tuple", "=", "np", ".", "nonzero", "(", "probe_label", "==", "inference_list", ")", "\n", "positions_correct", "=", "positions_correct_tuple", "[", "0", "]", "\n", "pos_first_correct", "=", "positions_correct", "[", "0", "]", "\n", "if", "pos_first_correct", "!=", "0", ":", "\n", "            ", "prb_idx", ".", "append", "(", "i", ")", "\n", "gal_idx", ".", "append", "(", "ranking_list", ")", "\n", "correct_indicators", ".", "append", "(", "probe_label", "==", "inference_list", ")", "\n", "\n", "", "", "return", "prb_idx", ",", "gal_idx", ",", "correct_indicators", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.plot_ranking_imgs": [[554, 630], ["tuple", "gal_dataset.turn_off_transform", "prb_dataset.turn_off_transform", "torchvision.Compose", "os.path.join", "torchvision.utils.save_image", "torchvision.utils.save_image", "print", "len", "len", "map", "len", "len", "len", "torchvision.Resize", "torchvision.ToTensor", "len", "random.sample", "list", "transforms.Compose.", "imgs.append", "min", "range", "random.sample", "list", "transforms.Compose.", "imgs.append", "min", "zip", "range", "utils.time_string", "int", "list", "zip", "len", "transforms.Compose.", "imgs.append", "imgs.append", "list", "zip", "len", "transforms.Compose.", "imgs.append", "imgs.append", "zip", "numpy.zeros_like", "zip", "gal_img[].zero_", "gal_img[].fill_", "gal_img[].zero_", "gal_img[].fill_", "gal_img[].zero_", "gal_img[].zero_", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_off_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_off_transform", "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.time_string"], ["", "def", "plot_ranking_imgs", "(", "gal_dataset", ",", "prb_dataset", ",", "gal_idx", ",", "prb_idx", ",", "n_gal", "=", "8", ",", "size", "=", "(", "256", ",", "128", ")", ",", "save_path", "=", "''", ",", "\n", "correct_indicators", "=", "None", ",", "sample_prb", "=", "False", ",", "n_prb", "=", "8", ")", ":", "\n", "    ", "\"\"\"\n    plot ranking imgs and save it.\n    :param gal_dataset: should support indexing and return a tuple, in which the first element is an img,\n           represented as np array\n    :param prb_dataset:\n    :param gal_idx: list of np.array, each of which corresponds to the element in prb_idx\n    :param prb_idx: list of int, indexing the prb_dataset\n    :param n_gal: number of gallery imgs shown in a row (for a probe).\n    :param size: resize all shown imgs\n    :param save_path: directory to save; the file name is ranking_(time string).png\n    :param correct_indicators: list of np array corresponding to gal_idx, indicating whether that\n           gal is a correct match. if specified, each correct match will has a small green box in the upper-left.\n    :param sample_prb: if True, the prb_idx is randomly sampled n_prb samples; otherwise, keep the order of prb_idx\n    and plot all the images specified in prb_idx.\n    :param n_prb: if sample_prb is True, we sample n_prb probe images.\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "prb_idx", ")", "==", "len", "(", "gal_idx", ")", "\n", "if", "correct_indicators", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "prb_idx", ")", "==", "len", "(", "correct_indicators", ")", "\n", "", "box_size", "=", "tuple", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", "/", "12.0", ")", ",", "size", ")", ")", "\n", "\n", "is_gal_on", "=", "gal_dataset", ".", "on_transform", "\n", "is_prb_on", "=", "prb_dataset", ".", "on_transform", "\n", "gal_dataset", ".", "turn_off_transform", "(", ")", "\n", "prb_dataset", ".", "turn_off_transform", "(", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "size", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "n_prb", "=", "len", "(", "prb_idx", ")", "if", "n_prb", ">", "len", "(", "prb_idx", ")", "else", "n_prb", "\n", "if", "correct_indicators", "is", "None", ":", "\n", "        ", "if", "sample_prb", ":", "\n", "            ", "used", "=", "sample", "(", "list", "(", "zip", "(", "prb_idx", ",", "gal_idx", ")", ")", ",", "n_prb", ")", "\n", "", "else", ":", "\n", "            ", "used", "=", "list", "(", "zip", "(", "prb_idx", ",", "gal_idx", ")", ")", "\n", "", "imgs", "=", "[", "]", "\n", "for", "p_idx", ",", "g_idx_array", "in", "used", ":", "\n", "            ", "prb_img", "=", "transform", "(", "prb_dataset", "[", "p_idx", "]", "[", "0", "]", ")", "\n", "imgs", ".", "append", "(", "prb_img", ")", "\n", "n_gal_used", "=", "min", "(", "n_gal", ",", "len", "(", "g_idx_array", ")", ")", "\n", "for", "g_idx", "in", "g_idx_array", "[", ":", "n_gal_used", "]", ":", "\n", "                ", "gal_img", "=", "transform", "(", "gal_dataset", "[", "g_idx", "]", "[", "0", "]", ")", "\n", "imgs", ".", "append", "(", "gal_img", ")", "\n", "", "for", "i", "in", "range", "(", "n_gal", "-", "n_gal_used", ")", ":", "\n", "                ", "imgs", ".", "append", "(", "np", ".", "zeros_like", "(", "prb_img", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "sample_prb", ":", "\n", "            ", "used", "=", "sample", "(", "list", "(", "zip", "(", "prb_idx", ",", "gal_idx", ",", "correct_indicators", ")", ")", ",", "n_prb", ")", "\n", "", "else", ":", "\n", "            ", "used", "=", "list", "(", "zip", "(", "prb_idx", ",", "gal_idx", ",", "correct_indicators", ")", ")", "\n", "", "imgs", "=", "[", "]", "\n", "for", "p_idx", ",", "g_idx_array", ",", "correct_ind", "in", "used", ":", "\n", "            ", "prb_img", "=", "transform", "(", "prb_dataset", "[", "p_idx", "]", "[", "0", "]", ")", "\n", "imgs", ".", "append", "(", "prb_img", ")", "\n", "n_gal_used", "=", "min", "(", "n_gal", ",", "len", "(", "g_idx_array", ")", ")", "\n", "for", "g_idx", ",", "is_correct_match", "in", "zip", "(", "g_idx_array", "[", ":", "n_gal_used", "]", ",", "correct_ind", "[", ":", "n_gal_used", "]", ")", ":", "\n", "                ", "gal_img", "=", "transform", "(", "gal_dataset", "[", "g_idx", "]", "[", "0", "]", ")", "\n", "if", "is_correct_match", ":", "\n", "                    ", "gal_img", "[", "0", ",", ":", "box_size", "[", "0", "]", ",", ":", "box_size", "[", "1", "]", "]", ".", "zero_", "(", ")", "\n", "gal_img", "[", "1", ",", ":", "box_size", "[", "0", "]", ",", ":", "box_size", "[", "1", "]", "]", ".", "fill_", "(", "1.0", ")", "\n", "gal_img", "[", "2", ",", ":", "box_size", "[", "0", "]", ",", ":", "box_size", "[", "1", "]", "]", ".", "zero_", "(", ")", "\n", "", "else", ":", "\n", "                    ", "gal_img", "[", "0", ",", ":", "box_size", "[", "0", "]", ",", ":", "box_size", "[", "1", "]", "]", ".", "fill_", "(", "1.0", ")", "\n", "gal_img", "[", "1", ",", ":", "box_size", "[", "0", "]", ",", ":", "box_size", "[", "1", "]", "]", ".", "zero_", "(", ")", "\n", "gal_img", "[", "2", ",", ":", "box_size", "[", "0", "]", ",", ":", "box_size", "[", "1", "]", "]", ".", "zero_", "(", ")", "\n", "", "imgs", ".", "append", "(", "gal_img", ")", "\n", "", "for", "i", "in", "range", "(", "n_gal", "-", "n_gal_used", ")", ":", "\n", "                ", "imgs", ".", "append", "(", "np", ".", "zeros_like", "(", "prb_img", ")", ")", "\n", "\n", "", "", "", "filename", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'ranking_{}.png'", ".", "format", "(", "time_string", "(", ")", ")", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "imgs", ",", "filename", ",", "nrow", "=", "n_gal", "+", "1", ")", "\n", "print", "(", "'saved ranking images into {}'", ".", "format", "(", "filename", ")", ")", "\n", "gal_dataset", ".", "on_transform", "=", "is_gal_on", "\n", "prb_dataset", ".", "on_transform", "=", "is_prb_on", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.parse_pretrained_checkpoint": [[632, 667], ["isinstance", "print", "isinstance", "print", "isinstance", "print", "net.state_dict.pop", "print", "net.module.state_dict", "net.state_dict", "type", "net.state_dict.pop"], "function", ["None"], ["", "def", "parse_pretrained_checkpoint", "(", "checkpoint", ",", "num_classes", ",", "fc_layer_name", "=", "'fc'", ",", "is_preserve_fc", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param checkpoint: OrderedDict (state_dict) or a tuple (checkpoint)\n    :param num_classes:\n    :param fc_layer_name:\n    :param is_preserve_fc: if True, when fc layer output dimension is different from num_classes,\n    we still preserve the parameters by removing additional dim or adding randomly init missing dim.\n    :return: state_dict: a state dict whose fc layer is processed,\n    i.e. if the fc output is not num_classes, remove the fc weight and fc bias (if exists)\n    if is_preserve_fc=False; otherwise preserve the weights by adding or removing dimensions.\n    \"\"\"", "\n", "if", "isinstance", "(", "checkpoint", ",", "OrderedDict", ")", ":", "\n", "        ", "print", "(", "'loaded a state dict.'", ")", "\n", "state_dict", "=", "checkpoint", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "tuple", ")", ":", "\n", "        ", "print", "(", "'loaded a checkpoint.'", ")", "\n", "net", "=", "checkpoint", "[", "0", "]", ".", "net", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "state_dict", "=", "net", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "False", ",", "'unknown type {}\\n'", ".", "format", "(", "type", "(", "checkpoint", ")", ")", "\n", "", "fc_weight_name", "=", "'{}.weight'", ".", "format", "(", "fc_layer_name", ")", "\n", "try", ":", "\n", "        ", "fc_weight", "=", "state_dict", "[", "fc_weight_name", "]", "\n", "output_dim", "=", "fc_weight", ".", "shape", "[", "0", "]", "\n", "if", "output_dim", "!=", "num_classes", ":", "\n", "            ", "print", "(", "'The output dim not match the specified num_classes. fc param is removed.\\n'", ")", "\n", "state_dict", ".", "pop", "(", "fc_weight_name", ")", "\n", "if", "'{}.bias'", ".", "format", "(", "fc_layer_name", ")", "in", "state_dict", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'{}.bias'", ".", "format", "(", "fc_layer_name", ")", ")", "\n", "", "", "", "except", "KeyError", ":", "\n", "        ", "print", "(", "'parse_pretrained_checkpoint: No fc weights found.'", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.pair_idx_to_dist_idx": [[669, 679], ["index.astype", "numpy.sum", "len"], "function", ["None"], ["", "def", "pair_idx_to_dist_idx", "(", "d", ",", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"\n    :param d: numer of elements\n    :param i: np.array. i < j in every element\n    :param j: np.array\n    :return:\n    \"\"\"", "\n", "assert", "np", ".", "sum", "(", "i", "<", "j", ")", "==", "len", "(", "i", ")", "\n", "index", "=", "d", "*", "i", "-", "i", "*", "(", "i", "+", "1", ")", "/", "2", "+", "j", "-", "1", "-", "i", "\n", "return", "index", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.dist_idx_to_pair_idx": [[681, 693], ["numpy.floor().astype", "numpy.floor", "numpy.sqrt"], "function", ["None"], ["", "def", "dist_idx_to_pair_idx", "(", "d", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    :param d: number of samples\n    :param i: np.array\n    :return:\n    \"\"\"", "\n", "if", "i", ".", "size", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "b", "=", "1", "-", "2", "*", "d", "\n", "x", "=", "np", ".", "floor", "(", "(", "-", "b", "-", "np", ".", "sqrt", "(", "b", "**", "2", "-", "8", "*", "i", ")", ")", "/", "2", ")", ".", "astype", "(", "int", ")", "\n", "y", "=", "(", "i", "+", "x", "*", "(", "b", "+", "x", "+", "2", ")", "/", "2", "+", "1", ")", ".", "astype", "(", "int", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.int2onehot": [[695, 706], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "int2onehot", "(", "labels", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"\n    :param labels: torch.Tensor, shape=(BS,)\n    :param num_classes: int, the dimension of returned label vectors\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "onehot_labels", "=", "torch", ".", "zeros", "(", "batch_size", ",", "num_classes", ")", ".", "cuda", "(", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "batch_size", ")", "\n", "onehot_labels", "[", "idx", ",", "labels", "]", "=", "1", "\n", "return", "onehot_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.test": [[708, 713], ["torch.tensor().cuda", "torch.tensor().cuda", "utils.int2onehot", "print", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.utils.int2onehot"], ["", "def", "test", "(", ")", ":", "\n", "    ", "labels", "=", "torch", ".", "tensor", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ")", ".", "cuda", "(", ")", "\n", "onehot", "=", "int2onehot", "(", "labels", ",", "10", ")", "\n", "print", "(", "onehot", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.__init__": [[10, 36], ["torch.Dataset.__init__", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "sets", ",", "transform", "=", "None", ",", "require_views", "=", "True", ")", ":", "\n", "        ", "super", "(", "CFP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "require_views", "=", "require_views", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "on_transform", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "on_transform", "=", "False", "\n", "", "images", ",", "labels", ",", "views", ",", "protocol", "=", "torch", ".", "load", "(", "root", ")", "\n", "self", ".", "sets", "=", "sets", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "views", "=", "[", "]", "\n", "for", "set", "in", "sets", ":", "\n", "            ", "begin", "=", "set", "*", "500", "\n", "end", "=", "begin", "+", "500", "\n", "self", ".", "images", "=", "self", ".", "images", "+", "images", "[", "begin", ":", "end", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "+", "labels", "[", "begin", ":", "end", "]", "\n", "self", ".", "views", "=", "self", ".", "views", "+", "views", "[", "begin", ":", "end", "]", "\n", "begin_", "=", "set", "*", "200", "+", "5000", "\n", "end_", "=", "begin_", "+", "200", "\n", "self", ".", "images", "=", "self", ".", "images", "+", "images", "[", "begin_", ":", "end_", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "+", "labels", "[", "begin_", ":", "end_", "]", "\n", "self", ".", "views", "=", "self", ".", "views", "+", "views", "[", "begin_", ":", "end_", "]", "\n", "self", ".", "protocol", "=", "protocol", "[", "set", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.return_protocol": [[37, 39], ["None"], "methods", ["None"], ["", "", "def", "return_protocol", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "protocol", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.return_mean": [[40, 49], ["numpy.asarray", "mean.append", "[].mean", "channel_mean.append", "numpy.asarray().mean", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "return_mean", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "mean", "=", "[", "]", "\n", "for", "i", "in", "axis", ":", "\n", "            ", "channel_mean", "=", "[", "]", "\n", "for", "img", "in", "self", ".", "images", ":", "\n", "                ", "m", "=", "np", ".", "asarray", "(", "img", ")", "[", ":", ",", ":", ",", "i", "]", ".", "mean", "(", ")", "\n", "channel_mean", ".", "append", "(", "m", ")", "\n", "", "mean", ".", "append", "(", "np", ".", "asarray", "(", "channel_mean", ")", ".", "mean", "(", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.return_std": [[50, 59], ["numpy.asarray", "std.append", "[].std", "channel_std.append", "numpy.asarray().std", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "return_std", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "std", "=", "[", "]", "\n", "for", "i", "in", "axis", ":", "\n", "            ", "channel_std", "=", "[", "]", "\n", "for", "img", "in", "self", ".", "images", ":", "\n", "                ", "m", "=", "np", ".", "asarray", "(", "img", ")", "[", ":", ",", ":", ",", "i", "]", ".", "std", "(", ")", "\n", "channel_std", ".", "append", "(", "m", ")", "\n", "", "std", ".", "append", "(", "np", ".", "asarray", "(", "channel_std", ")", ".", "std", "(", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.return_num_class": [[60, 62], ["numpy.size", "numpy.unique", "numpy.asarray"], "methods", ["None"], ["", "def", "return_num_class", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "size", "(", "np", ".", "unique", "(", "np", ".", "asarray", "(", "self", ".", "labels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.turn_on_transform": [[63, 68], ["None"], "methods", ["None"], ["", "def", "turn_on_transform", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "True", "\n", "if", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "", "assert", "self", ".", "transform", "is", "not", "None", ",", "'Transform not specified.'", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.turn_off_transform": [[69, 71], ["None"], "methods", ["None"], ["", "def", "turn_off_transform", "(", "self", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.CFP.__getitem__": [[75, 85], ["ReIDdatasets.CFP.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", ",", "view", "=", "self", ".", "images", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", ",", "self", ".", "views", "[", "index", "]", "\n", "\n", "if", "self", ".", "on_transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "require_views", ":", "\n", "            ", "return", "img", ",", "label", ",", "view", ",", "index", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.__init__": [[88, 100], ["torch.Dataset.__init__", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "state", "=", "'train'", ",", "transform", "=", "None", ",", "require_views", "=", "True", ")", ":", "\n", "        ", "super", "(", "MultiPie", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "require_views", "=", "require_views", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "on_transform", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "on_transform", "=", "False", "\n", "", "dataset", "=", "torch", ".", "load", "(", "root", ")", "\n", "self", ".", "images", ",", "self", ".", "labels", ",", "self", ".", "views", "=", "dataset", "[", "state", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.return_mean": [[101, 110], ["numpy.asarray", "mean.append", "[].mean", "channel_mean.append", "numpy.asarray().mean", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "return_mean", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "mean", "=", "[", "]", "\n", "for", "i", "in", "axis", ":", "\n", "            ", "channel_mean", "=", "[", "]", "\n", "for", "img", "in", "self", ".", "images", ":", "\n", "                ", "m", "=", "np", ".", "asarray", "(", "img", ")", "[", ":", ",", ":", ",", "i", "]", ".", "mean", "(", ")", "\n", "channel_mean", ".", "append", "(", "m", ")", "\n", "", "mean", ".", "append", "(", "np", ".", "asarray", "(", "channel_mean", ")", ".", "mean", "(", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.return_std": [[111, 120], ["numpy.asarray", "std.append", "[].std", "channel_std.append", "numpy.asarray().std", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "return_std", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "std", "=", "[", "]", "\n", "for", "i", "in", "axis", ":", "\n", "            ", "channel_std", "=", "[", "]", "\n", "for", "img", "in", "self", ".", "images", ":", "\n", "                ", "m", "=", "np", ".", "asarray", "(", "img", ")", "[", ":", ",", ":", ",", "i", "]", ".", "std", "(", ")", "\n", "channel_std", ".", "append", "(", "m", ")", "\n", "", "std", ".", "append", "(", "np", ".", "asarray", "(", "channel_std", ")", ".", "std", "(", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.return_num_class": [[121, 123], ["numpy.size", "numpy.unique", "numpy.asarray"], "methods", ["None"], ["", "def", "return_num_class", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "size", "(", "np", ".", "unique", "(", "np", ".", "asarray", "(", "self", ".", "labels", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.turn_on_transform": [[124, 129], ["None"], "methods", ["None"], ["", "def", "turn_on_transform", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "True", "\n", "if", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "", "assert", "self", ".", "transform", "is", "not", "None", ",", "'Transform not specified.'", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.turn_off_transform": [[130, 132], ["None"], "methods", ["None"], ["", "def", "turn_off_transform", "(", "self", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.__len__": [[133, 135], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.MultiPie.__getitem__": [[136, 146], ["ReIDdatasets.MultiPie.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", ",", "view", "=", "self", ".", "images", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", ",", "self", ".", "views", "[", "index", "]", "\n", "\n", "if", "self", ".", "on_transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "require_views", ":", "\n", "            ", "return", "img", ",", "label", ",", "view", ",", "index", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.__init__": [[149, 195], ["torch.Dataset.__init__", "h5py.File", "list", "h5py.File.items", "numpy.transpose", "numpy.squeeze", "numpy.squeeze", "numpy.transpose", "numpy.squeeze", "numpy.squeeze", "numpy.transpose", "numpy.squeeze", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "state", "=", "'train'", ",", "transform", "=", "None", ",", "require_views", "=", "True", ")", ":", "\n", "        ", "super", "(", "Market", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "state", "=", "state", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "require_views", "=", "require_views", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "on_transform", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "on_transform", "=", "False", "\n", "\n", "", "f", "=", "h5py", ".", "File", "(", "self", ".", "root", ",", "'r'", ")", "\n", "variables", "=", "list", "(", "f", ".", "items", "(", ")", ")", "\n", "# [0]: gallery_data", "\n", "# [1]: gallery_labels", "\n", "# [2]: gallery_views", "\n", "# [3]: probe_data", "\n", "# [4]: probe_labels", "\n", "# [5]: probe_views", "\n", "# [6]: train_data", "\n", "# [7]: train_labels", "\n", "# [8]: train_views", "\n", "\n", "if", "self", ".", "state", "==", "'train'", ":", "\n", "            ", "_", ",", "temp", "=", "variables", "[", "6", "]", "\n", "self", ".", "data", "=", "np", ".", "transpose", "(", "temp", ".", "value", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "_", ",", "temp", "=", "variables", "[", "7", "]", "\n", "self", ".", "labels", "=", "np", ".", "squeeze", "(", "temp", ".", "value", ")", "\n", "_", ",", "temp", "=", "variables", "[", "8", "]", "\n", "self", ".", "views", "=", "np", ".", "squeeze", "(", "temp", ".", "value", ")", "\n", "", "elif", "self", ".", "state", "==", "'gallery'", ":", "\n", "            ", "_", ",", "temp", "=", "variables", "[", "0", "]", "\n", "self", ".", "data", "=", "np", ".", "transpose", "(", "temp", ".", "value", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "_", ",", "temp", "=", "variables", "[", "1", "]", "\n", "self", ".", "labels", "=", "np", ".", "squeeze", "(", "temp", ".", "value", ")", "\n", "_", ",", "temp", "=", "variables", "[", "2", "]", "\n", "self", ".", "views", "=", "np", ".", "squeeze", "(", "temp", ".", "value", ")", "\n", "", "elif", "self", ".", "state", "==", "'probe'", ":", "\n", "            ", "_", ",", "temp", "=", "variables", "[", "3", "]", "\n", "self", ".", "data", "=", "np", ".", "transpose", "(", "temp", ".", "value", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "_", ",", "temp", "=", "variables", "[", "4", "]", "\n", "self", ".", "labels", "=", "np", ".", "squeeze", "(", "temp", ".", "value", ")", "\n", "_", ",", "temp", "=", "variables", "[", "5", "]", "\n", "self", ".", "views", "=", "np", ".", "squeeze", "(", "temp", ".", "value", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Unknown state: {}\\n'", ".", "format", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.return_mean": [[196, 198], ["numpy.mean"], "methods", ["None"], ["", "", "def", "return_mean", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "data", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.return_std": [[199, 201], ["numpy.std"], "methods", ["None"], ["", "def", "return_std", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "return", "np", ".", "std", "(", "self", ".", "data", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.return_num_class": [[202, 204], ["numpy.size", "numpy.unique"], "methods", ["None"], ["", "def", "return_num_class", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "size", "(", "np", ".", "unique", "(", "self", ".", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.turn_on_transform": [[205, 210], ["None"], "methods", ["None"], ["", "def", "turn_on_transform", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "True", "\n", "if", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "", "assert", "self", ".", "transform", "is", "not", "None", ",", "'Transform not specified.'", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.turn_off_transform": [[211, 213], ["None"], "methods", ["None"], ["", "def", "turn_off_transform", "(", "self", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.__len__": [[214, 216], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.Market.__getitem__": [[217, 229], ["PIL.Image.fromarray", "ReIDdatasets.Market.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", ",", "view", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", ",", "self", ".", "views", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "on_transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "require_views", ":", "\n", "            ", "return", "img", ",", "label", ",", "view", ",", "index", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__": [[232, 251], ["torch.Dataset.__init__", "h5py.File", "list", "numpy.transpose", "numpy.squeeze", "h5py.File.items"], "methods", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "require_views", "=", "False", ")", ":", "\n", "        ", "super", "(", "FullTraining", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "require_views", "=", "require_views", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "on_transform", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "on_transform", "=", "False", "\n", "\n", "", "f", "=", "h5py", ".", "File", "(", "self", ".", "root", ",", "'r'", ")", "\n", "variables", "=", "list", "(", "f", ".", "items", "(", ")", ")", "\n", "# [0]: data", "\n", "# [1]: labels", "\n", "\n", "_", ",", "temp", "=", "variables", "[", "0", "]", "\n", "self", ".", "data", "=", "np", ".", "transpose", "(", "temp", ".", "value", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "_", ",", "temp", "=", "variables", "[", "1", "]", "\n", "self", ".", "labels", "=", "np", ".", "squeeze", "(", "temp", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.return_mean": [[252, 257], ["numpy.array", "numpy.std"], "methods", ["None"], ["", "def", "return_mean", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "if", "'MSMT17'", "in", "self", ".", "root", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "79.2386", ",", "73.9793", ",", "77.2493", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "std", "(", "self", ".", "data", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.return_std": [[258, 263], ["numpy.array", "numpy.std"], "methods", ["None"], ["", "", "def", "return_std", "(", "self", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "        ", "if", "'MSMT17'", "in", "self", ".", "root", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "67.2012", ",", "63.9191", ",", "61.8367", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "std", "(", "self", ".", "data", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.return_num_class": [[264, 266], ["numpy.size", "numpy.unique"], "methods", ["None"], ["", "", "def", "return_num_class", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "size", "(", "np", ".", "unique", "(", "self", ".", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_on_transform": [[267, 272], ["None"], "methods", ["None"], ["", "def", "turn_on_transform", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "True", "\n", "if", "transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "", "assert", "self", ".", "transform", "is", "not", "None", ",", "'Transform not specified.'", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.turn_off_transform": [[273, 275], ["None"], "methods", ["None"], ["", "def", "turn_off_transform", "(", "self", ")", ":", "\n", "        ", "self", ".", "on_transform", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__len__": [[276, 278], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__getitem__": [[279, 288], ["PIL.Image.fromarray", "ReIDdatasets.FullTraining.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "on_transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.main": [[290, 296], ["ReIDdatasets.FullTraining", "print", "matplotlib.imshow", "matplotlib.show", "ReIDdatasets.FullTraining.__len__"], "function", ["home.repos.pwc.inspect_result.KovenYu_state-information.src.ReIDdatasets.FullTraining.__len__"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "Market_dataset", "=", "FullTraining", "(", "'data/Market.mat'", ")", "\n", "print", "(", "Market_dataset", ".", "__len__", "(", ")", ")", "\n", "img", ",", "label", "=", "Market_dataset", "[", "0", "]", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]]}