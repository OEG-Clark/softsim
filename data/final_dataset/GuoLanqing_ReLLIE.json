{"home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State.State.__init__": [[7, 10], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "move_range", ")", ":", "\n", "        ", "self", ".", "image", "=", "np", ".", "zeros", "(", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "move_range", "=", "move_range", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State.State.reset": [[11, 13], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "image", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State.State.step": [[14, 78], ["act.astype", "numpy.zeros"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "act", ")", ":", "\n", "        ", "neutral", "=", "6", "\n", "move", "=", "act", ".", "astype", "(", "np", ".", "float32", ")", "\n", "moves", "=", "(", "move", "-", "neutral", ")", "/", "20", "\n", "moved_image", "=", "np", ".", "zeros", "(", "self", ".", "image", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# de = move[:, 3:, :, :]", "\n", "r", "=", "self", ".", "image", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "g", "=", "self", ".", "image", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "b", "=", "self", ".", "image", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "moved_image", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "r", "+", "(", "moves", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "*", "r", "*", "(", "1", "-", "r", ")", "\n", "moved_image", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "g", "+", "(", "0.1", "*", "moves", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+", "0.9", "*", "moves", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "*", "g", "*", "(", "1", "-", "g", ")", "\n", "moved_image", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "b", "+", "(", "0.1", "*", "moves", "[", ":", ",", "2", ",", ":", ",", ":", "]", "+", "0.9", "*", "moves", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "*", "b", "*", "(", "1", "-", "b", ")", "\n", "\n", "# gaussian = np.zeros(self.image.shape, self.image.dtype)", "\n", "# bilateral = np.zeros(self.image.shape, self.image.dtype)", "\n", "# median = np.zeros(self.image.shape, self.image.dtype)", "\n", "# b, c, h, w = self.image.shape", "\n", "# # for i in range(0, b):", "\n", "# #     if np.sum(de[i] == 0) > 0:", "\n", "# #         gaussian[i] = cv2.GaussianBlur(moved_image[i], ksize=(5, 5), sigmaX=0.5)", "\n", "# #     if np.sum(de[i] == 1) > 0:", "\n", "# #         bilateral[i] = cv2.bilateralFilter(moved_image[i], d=5, sigmaColor=0.1, sigmaSpace=5)", "\n", "# #     if np.sum(de[i] == 2) > 0:", "\n", "# #         median[i] = cv2.medianBlur(moved_image[i], ksize=5)", "\n", "#", "\n", "# self.image = np.where(de == 0, gaussian, moved_image)", "\n", "# self.image = np.where(de == 1, bilateral, moved_image)", "\n", "# self.image = np.where(de == 2, median, moved_image)", "\n", "'''\n        gaussian = np.zeros(self.image.shape, self.image.dtype)\n        bilateral = np.zeros(self.image.shape, self.image.dtype)\n        median = np.zeros(self.image.shape, self.image.dtype)\n        b, c, h, w = self.image.shape\n        gaussian = np.zeros(self.image.shape, self.image.dtype)\n        gaussian2 = np.zeros(self.image.shape, self.image.dtype)\n        bilateral = np.zeros(self.image.shape, self.image.dtype)\n        bilateral2 = np.zeros(self.image.shape, self.image.dtype)\n        median = np.zeros(self.image.shape, self.image.dtype)\n        box = np.zeros(self.image.shape, self.image.dtype)\n        b, c, h, w = self.image.shape\n        for i in range(0,b):\n            if np.sum(act[i]==self.move_range) > 0:\n                gaussian[i,0] = cv2.GaussianBlur(self.image[i,0], ksize=(5,5), sigmaX=0.5)\n            if np.sum(act[i]==self.move_range+1) > 0:\n                bilateral[i,0] = cv2.bilateralFilter(self.image[i,0], d=5, sigmaColor=0.1, sigmaSpace=5)\n            if np.sum(act[i]==self.move_range+2) > 0:\n                median[i,0] = cv2.medianBlur(self.image[i,0], ksize=5)\n            if np.sum(act[i]==self.move_range+3) > 0:\n                gaussian2[i,0] = cv2.GaussianBlur(self.image[i,0], ksize=(5,5), sigmaX=1.5)\n            if np.sum(act[i]==self.move_range+4) > 0:\n                bilateral2[i,0] = cv2.bilateralFilter(self.image[i,0], d=5, sigmaColor=1.0, sigmaSpace=5)\n            if np.sum(act[i]==self.move_range+5) > 0:\n                box[i,0] = cv2.boxFilter(self.image[i,0], ddepth=-1, ksize=(5,5))\n        '''", "\n", "self", ".", "image", "=", "0.8", "*", "moved_image", "+", "0.2", "*", "self", ".", "image", "\n", "\n", "'''\n        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range, gaussian, self.image)\n        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+1, bilateral, self.image)\n        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+2, median, self.image)\n        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+3, gaussian2, self.image)\n        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+4, bilateral2, self.image)\n        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+5, box, self.image)\n        '''", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.models.UpSampleFeatures.__init__": [[21, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "UpSampleFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.models.UpSampleFeatures.forward": [[23, 25], ["functions.upsamplefeatures"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "functions", ".", "upsamplefeatures", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.models.IntermediateDnCNN.__init__": [[31, 66], ["torch.Module.__init__", "layers.append", "layers.append", "range", "layers.append", "torch.Sequential", "torch.Conv2d", "torch.ReLU", "layers.append", "layers.append", "layers.append", "torch.Conv2d", "Exception", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["def", "__init__", "(", "self", ",", "input_features", ",", "middle_features", ",", "num_conv_layers", ")", ":", "\n", "\t\t", "super", "(", "IntermediateDnCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "padding", "=", "1", "\n", "self", ".", "input_features", "=", "input_features", "\n", "self", ".", "num_conv_layers", "=", "num_conv_layers", "\n", "self", ".", "middle_features", "=", "middle_features", "\n", "if", "self", ".", "input_features", "==", "5", ":", "\n", "\t\t\t", "self", ".", "output_features", "=", "4", "#Grayscale image", "\n", "", "elif", "self", ".", "input_features", "==", "15", ":", "\n", "\t\t\t", "self", ".", "output_features", "=", "12", "#RGB image", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'Invalid number of input features'", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_features", ",", "out_channels", "=", "self", ".", "middle_features", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_conv_layers", "-", "2", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "middle_features", ",", "out_channels", "=", "self", ".", "middle_features", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "self", ".", "middle_features", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "middle_features", ",", "out_channels", "=", "self", ".", "output_features", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "itermediate_dncnn", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.models.IntermediateDnCNN.forward": [[66, 69], ["models.IntermediateDnCNN.itermediate_dncnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "itermediate_dncnn", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.models.FFDNet.__init__": [[74, 97], ["torch.Module.__init__", "models.IntermediateDnCNN", "models.UpSampleFeatures", "Exception"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["def", "__init__", "(", "self", ",", "num_input_channels", ")", ":", "\n", "\t\t", "super", "(", "FFDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_input_channels", "=", "num_input_channels", "\n", "if", "self", ".", "num_input_channels", "==", "1", ":", "\n", "# Grayscale image", "\n", "\t\t\t", "self", ".", "num_feature_maps", "=", "64", "\n", "self", ".", "num_conv_layers", "=", "15", "\n", "self", ".", "downsampled_channels", "=", "5", "\n", "self", ".", "output_features", "=", "4", "\n", "", "elif", "self", ".", "num_input_channels", "==", "3", ":", "\n", "# RGB image", "\n", "\t\t\t", "self", ".", "num_feature_maps", "=", "96", "\n", "self", ".", "num_conv_layers", "=", "12", "\n", "self", ".", "downsampled_channels", "=", "15", "\n", "self", ".", "output_features", "=", "12", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Exception", "(", "'Invalid number of input features'", ")", "\n", "\n", "", "self", ".", "intermediate_dncnn", "=", "IntermediateDnCNN", "(", "input_features", "=", "self", ".", "downsampled_channels", ",", "middle_features", "=", "self", ".", "num_feature_maps", ",", "num_conv_layers", "=", "self", ".", "num_conv_layers", ")", "\n", "self", ".", "upsamplefeatures", "=", "UpSampleFeatures", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.models.FFDNet.forward": [[98, 105], ["functions.concatenate_input_noise_map", "torch.autograd.Variable", "models.FFDNet.intermediate_dncnn", "models.FFDNet.upsamplefeatures"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.functions.concatenate_input_noise_map"], ["", "def", "forward", "(", "self", ",", "x", ",", "noise_sigma", ")", ":", "\n", "\t\t", "concat_noise_x", "=", "functions", ".", "concatenate_input_noise_map", "(", "x", ".", "data", ",", "noise_sigma", ".", "data", ")", "\n", "concat_noise_x", "=", "Variable", "(", "concat_noise_x", ")", "\n", "h_dncnn", "=", "self", ".", "intermediate_dncnn", "(", "concat_noise_x", ")", "\n", "pred_noise", "=", "self", ".", "upsamplefeatures", "(", "h_dncnn", ")", "\n", "return", "pred_noise", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.__init__": [[15, 19], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "move_range", ",", "model", ")", ":", "\n", "        ", "self", ".", "image", "=", "np", ".", "zeros", "(", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "move_range", "=", "move_range", "\n", "self", ".", "net", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.reset": [[20, 24], ["numpy.where"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "image", "=", "x", "\n", "self", ".", "raw", "=", "x", "*", "255", "\n", "self", ".", "raw", "[", "np", ".", "where", "(", "self", ".", "raw", "<=", "2", ")", "]", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_el": [[25, 38], ["act.astype", "numpy.zeros"], "methods", ["None"], ["", "def", "step_el", "(", "self", ",", "act", ")", ":", "\n", "        ", "neutral", "=", "6", "\n", "move", "=", "act", ".", "astype", "(", "np", ".", "float32", ")", "\n", "moves", "=", "(", "move", "-", "neutral", ")", "/", "20", "\n", "moved_image", "=", "np", ".", "zeros", "(", "self", ".", "image", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# de = move[:, 3:, :, :]", "\n", "r", "=", "self", ".", "image", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "g", "=", "self", ".", "image", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "b", "=", "self", ".", "image", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "moved_image", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "r", "+", "(", "moves", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "*", "r", "*", "(", "1", "-", "r", ")", "\n", "moved_image", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "g", "+", "(", "0.1", "*", "moves", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+", "0.9", "*", "moves", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "*", "g", "*", "(", "1", "-", "g", ")", "\n", "moved_image", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "b", "+", "(", "0.1", "*", "moves", "[", ":", ",", "2", ",", ":", ",", ":", "]", "+", "0.9", "*", "moves", "[", ":", ",", "0", ",", ":", ",", ":", "]", ")", "*", "b", "*", "(", "1", "-", "b", ")", "\n", "self", ".", "image", "=", "0.8", "*", "moved_image", "+", "0.2", "*", "self", ".", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_de": [[39, 90], ["act_b.sum", "checker.sum.sum.sum", "range", "len", "numpy.expand_dims", "numpy.expand_dims", "torch.Tensor", "torch.autograd.Variable.astype", "State_de.State_de.net", "torch.clamp", "torch.clamp.cpu().detach().numpy", "numpy.concatenate", "numpy.concatenate", "torch.no_grad", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.where", "torch.autograd.Variable.type", "torch.FloatTensor().type", "torch.clamp.cpu().detach", "numpy.max", "numpy.min", "numpy.min", "torch.FloatTensor", "torch.clamp.cpu", "numpy.max"], "methods", ["None"], ["", "def", "step_de", "(", "self", ",", "act_b", ")", ":", "\n", "        ", "pix_num", "=", "act_b", ".", "shape", "[", "1", "]", "*", "act_b", ".", "shape", "[", "2", "]", "\n", "threshold", "=", "pix_num", "\n", "checker", "=", "act_b", ".", "sum", "(", "1", ")", "\n", "checker", "=", "checker", ".", "sum", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "checker", ")", ")", ":", "\n", "# if checker[i] < threshold:", "\n", "#     self.image[i] = self.image[i]", "\n", "# else:", "\n", "            ", "sh_im", "=", "self", ".", "image", ".", "shape", "\n", "imorig", "=", "np", ".", "expand_dims", "(", "self", ".", "image", "[", "i", "]", ",", "0", ")", "\n", "imorig_float", "=", "imorig", "*", "255", "\n", "lowimg", "=", "np", ".", "expand_dims", "(", "self", ".", "raw", "[", "i", "]", ",", "0", ")", "\n", "if", "sh_im", "[", "2", "]", "%", "2", "==", "1", ":", "\n", "                ", "expanded_h", "=", "True", "\n", "imorig", "=", "np", ".", "concatenate", "(", "(", "imorig", ",", "imorig", "[", ":", ",", ":", ",", "-", "1", ",", ":", "]", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "if", "sh_im", "[", "3", "]", "%", "2", "==", "1", ":", "\n", "                ", "expanded_w", "=", "True", "\n", "imorig", "=", "np", ".", "concatenate", "(", "(", "imorig", ",", "imorig", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "3", ")", "\n", "\n", "# imorig = normalize(imorig_float)", "\n", "", "imorig", "=", "torch", ".", "Tensor", "(", "imorig", ")", "\n", "\n", "# Sets data type according to CPU or GPU modes", "\n", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "\n", "# noise level map", "\n", "nsigma", "=", "(", "imorig_float", "-", "lowimg", ")", "/", "lowimg", "\n", "nsigma", "=", "0", "+", "(", "np", ".", "max", "(", "nsigma", ")", "*", "2", "-", "0", ")", "*", "(", "nsigma", "-", "np", ".", "min", "(", "nsigma", ")", ")", "/", "(", "np", ".", "max", "(", "nsigma", ")", "-", "np", ".", "min", "(", "nsigma", ")", ")", "\n", "nsigma", "[", "np", ".", "where", "(", "nsigma", "<", "0", ")", "]", "=", "0", "\n", "nsigma", "=", "nsigma", "/", "255", "\n", "nsigma", ".", "astype", "(", "'int'", ")", "\n", "nsigma", "=", "nsigma", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n", "# Test mode", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# PyTorch v0.4.0", "\n", "                ", "imorig", "=", "Variable", "(", "imorig", ".", "type", "(", "dtype", ")", ")", "\n", "nsigma", "=", "Variable", "(", "\n", "torch", ".", "FloatTensor", "(", "nsigma", ")", ".", "type", "(", "dtype", ")", ")", "\n", "# Estimate noise and subtract it to the input image", "\n", "", "im_noise_estim", "=", "self", ".", "net", "(", "imorig", ",", "nsigma", ")", "\n", "outim", "=", "torch", ".", "clamp", "(", "imorig", "-", "im_noise_estim", ",", "0.", ",", "1.", ")", "\n", "# outim = outim * 0.9 + imorig * 0.1", "\n", "# output = np.squeeze(outim.cpu().detach().numpy()).transpose([2, 1, 0])", "\n", "# output = (output * 255).astype('uint8')", "\n", "# im = Image.fromarray(output, 'RGB')", "\n", "# im.save('1.png')", "\n", "self", ".", "image", "[", "i", "]", "=", "outim", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "# self.image[i] = 0.8 * denoised_image + 0.2 * self.image[i]", ""]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.test_el.test": [[40, 76], ["mini_batch_loader.MiniBatchLoader.count_paths", "State.State", "range", "sys.stdout.flush", "loader.load_testing_data", "State.State.reset", "range", "agent.stop_episode", "np.maximum", "np.minimum", "np.squeeze", "np.transpose", "cv2.imwrite", "np.array", "np.zeros", "State.State.image.copy", "agent.act", "State.State.step", "img_path.split", "range", "np.mean", "np.power", "str"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.count_paths", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_testing_data", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.reset", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State.State.step"], ["def", "test", "(", "loader", ",", "loader2", ",", "agent", ",", "fout", ")", ":", "\n", "    ", "sum_psnr", "=", "0", "\n", "sum_reward", "=", "0", "\n", "test_data_size", "=", "MiniBatchLoader", ".", "count_paths", "(", "TESTING_DATA_PATH", ")", "\n", "current_state", "=", "State", ".", "State", "(", "(", "TEST_BATCH_SIZE", ",", "1", ",", "CROP_SIZE", ",", "CROP_SIZE", ")", ",", "MOVE_RANGE", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "test_data_size", ",", "TEST_BATCH_SIZE", ")", ":", "\n", "        ", "raw_x", "=", "loader", ".", "load_testing_data", "(", "np", ".", "array", "(", "range", "(", "i", ",", "i", "+", "TEST_BATCH_SIZE", ")", ")", ")", "\n", "# label = loader2.load_testing_data(np.array(range(i, i+TEST_BATCH_SIZE)))", "\n", "current_state", ".", "reset", "(", "raw_x", ")", "\n", "reward", "=", "np", ".", "zeros", "(", "raw_x", ".", "shape", ",", "raw_x", ".", "dtype", ")", "*", "255", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "EPISODE_LEN", ")", ":", "\n", "            ", "previous_image", "=", "current_state", ".", "image", ".", "copy", "(", ")", "\n", "action", "=", "agent", ".", "act", "(", "current_state", ".", "image", ")", "\n", "current_state", ".", "step", "(", "action", ")", "\n", "# reward = np.square(label - previous_image)*255 - np.square(label - current_state.image)*255", "\n", "sum_reward", "+=", "np", ".", "mean", "(", "reward", ")", "*", "np", ".", "power", "(", "GAMMA", ",", "t", ")", "\n", "\n", "", "agent", ".", "stop_episode", "(", ")", "\n", "\n", "# I = np.maximum(0,label)", "\n", "# I = np.minimum(1,I)", "\n", "p", "=", "np", ".", "maximum", "(", "0", ",", "current_state", ".", "image", ")", "\n", "p", "=", "np", ".", "minimum", "(", "1", ",", "p", ")", "\n", "# I = (I*255+0.5).astype(np.uint8)", "\n", "p", "=", "(", "p", "*", "255", "+", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# sum_psnr += cv2.PSNR(p, I)", "\n", "p", "=", "np", ".", "squeeze", "(", "p", ",", "axis", "=", "0", ")", "\n", "p", "=", "np", ".", "transpose", "(", "p", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "img_path", "=", "loader", ".", "testing_path_infos", "[", "i", "]", "\n", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "2", "]", "\n", "cv2", ".", "imwrite", "(", "'./result_ex2/'", "+", "str", "(", "i", ")", "+", "'_output.png'", ",", "p", ")", "\n", "\n", "# print(\"test total reward {a}, PSNR {b}\".format(a=sum_reward*255/test_data_size, b=sum_psnr/test_data_size))", "\n", "# fout.write(\"test total reward {a}, PSNR {b}\\n\".format(a=sum_reward*255/test_data_size, b=sum_psnr/test_data_size))", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.test_el.main": [[78, 111], ["mini_batch_loader.MiniBatchLoader", "mini_batch_loader.MiniBatchLoader", "chainer.cuda.get_device_from_id().use", "State.State", "MyFCN_el.MyFcn", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "pixelwise_a3c_el.PixelWiseA3C", "chainer.serializers.load_npz", "pixelwise_a3c_el.PixelWiseA3C.model.to_gpu", "test_el.test", "chainer.cuda.get_device_from_id"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.test.test"], ["", "def", "main", "(", "fout", ")", ":", "\n", "# _/_/_/ load dataset _/_/_/", "\n", "    ", "mini_batch_loader", "=", "MiniBatchLoader", "(", "\n", "TRAINING_DATA_PATH", ",", "\n", "TESTING_DATA_PATH", ",", "\n", "IMAGE_DIR_PATH", ",", "\n", "CROP_SIZE", ")", "\n", "\n", "mini_batch_loader_label", "=", "MiniBatchLoader", "(", "\n", "label_DATA_PATH", ",", "\n", "label_DATA_PATH", ",", "\n", "IMAGE_DIR_PATH", ",", "\n", "CROP_SIZE", ")", "\n", "\n", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "GPU_ID", ")", ".", "use", "(", ")", "\n", "\n", "\n", "current_state", "=", "State", ".", "State", "(", "(", "TRAIN_BATCH_SIZE", ",", "1", ",", "CROP_SIZE", ",", "CROP_SIZE", ")", ",", "MOVE_RANGE", ")", "\n", "\n", "# load myfcn model", "\n", "model", "=", "MyFcn", "(", "N_ACTIONS", ")", "\n", "\n", "# _/_/_/ setup _/_/_/", "\n", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "LEARNING_RATE", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "\n", "agent", "=", "PixelWiseA3C", "(", "model", ",", "optimizer", ",", "EPISODE_LEN", ",", "GAMMA", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "'./pretrained/model.npz'", ",", "agent", ".", "model", ")", "\n", "agent", ".", "act_deterministically", "=", "True", "\n", "agent", ".", "model", ".", "to_gpu", "(", ")", "\n", "\n", "# _/_/_/ testing _/_/_/", "\n", "test", "(", "mini_batch_loader", ",", "mini_batch_loader_label", ",", "agent", ",", "fout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.__init__": [[75, 130], ["isinstance", "copy.deepcopy", "chainerrl.misc.async_.assert_params_not_shared", "pixelwise_a3c_de.PixelWiseA3C.shared_model.to_gpu"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "t_max", ",", "gamma", ",", "beta", "=", "1e-2", ",", "\n", "process_idx", "=", "0", ",", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "pi_loss_coef", "=", "1.0", ",", "v_loss_coef", "=", "0.5", ",", "\n", "keep_loss_scale_same", "=", "False", ",", "\n", "normalize_grad_by_t_max", "=", "False", ",", "\n", "use_average_reward", "=", "False", ",", "average_reward_tau", "=", "1e-2", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "average_entropy_decay", "=", "0.999", ",", "\n", "average_value_decay", "=", "0.999", ",", "\n", "batch_states", "=", "batch_states", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "model", ",", "A3CModel", ")", "\n", "# Globally shared model", "\n", "self", ".", "shared_model", "=", "model", "\n", "\n", "# Thread specific model", "\n", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "shared_model", ")", "\n", "async_", ".", "assert_params_not_shared", "(", "self", ".", "shared_model", ",", "self", ".", "model", ")", "\n", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "pi_loss_coef", "=", "pi_loss_coef", "\n", "self", ".", "v_loss_coef", "=", "v_loss_coef", "\n", "self", ".", "keep_loss_scale_same", "=", "keep_loss_scale_same", "\n", "self", ".", "normalize_grad_by_t_max", "=", "normalize_grad_by_t_max", "\n", "self", ".", "use_average_reward", "=", "use_average_reward", "\n", "self", ".", "average_reward_tau", "=", "average_reward_tau", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "average_value_decay", "=", "average_value_decay", "\n", "self", ".", "average_entropy_decay", "=", "average_entropy_decay", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "t_start", "=", "0", "\n", "self", ".", "past_action_log_prob", "=", "{", "}", "\n", "self", ".", "past_action_entropy", "=", "{", "}", "\n", "self", ".", "past_states", "=", "{", "}", "\n", "self", ".", "past_rewards", "=", "{", "}", "\n", "self", ".", "past_values", "=", "{", "}", "\n", "self", ".", "average_reward", "=", "0", "\n", "# A3C won't use a explorer, but this arrtibute is referenced by run_dqn", "\n", "self", ".", "explorer", "=", "None", "\n", "\n", "# Stats", "\n", "self", ".", "average_value", "=", "0", "\n", "self", ".", "average_entropy", "=", "0", "\n", "\n", "#######################", "\n", "self", ".", "shared_model", ".", "to_gpu", "(", ")", "\n", "chainerrl", ".", "distribution", ".", "CategoricalDistribution", ".", "mylog_prob", "=", "mylog_prob", "\n", "chainerrl", ".", "distribution", ".", "CategoricalDistribution", ".", "myentropy", "=", "myentropy", "\n", "#######################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.sync_parameters": [[132, 135], ["chainerrl.misc.copy_param.copy_param"], "methods", ["None"], ["", "def", "sync_parameters", "(", "self", ")", ":", "\n", "        ", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "model", ",", "\n", "source_link", "=", "self", ".", "shared_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.shared_attributes": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shared_attributes", "(", "self", ")", ":", "\n", "        ", "return", "(", "'shared_model'", ",", "'optimizer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.update": [[140, 231], ["reversed", "chainer.functions.mean", "pixelwise_a3c_de.PixelWiseA3C.model.cleargrads", "chainer.functions.mean.backward", "pixelwise_a3c_de.PixelWiseA3C.shared_model.cleargrads", "chainerrl.misc.copy_param.copy_grad", "pixelwise_a3c_de.PixelWiseA3C.optimizer.update", "pixelwise_a3c_de.PixelWiseA3C.sync_parameters", "isinstance", "chainer.functions.cast", "range", "logger.debug", "sum", "logger.debug", "logger.debug", "pixelwise_a3c_de.PixelWiseA3C.model.unchain_backward", "chainerrl.recurrent.state_kept", "pixelwise_a3c_de.PixelWiseA3C.model.pi_and_v", "chainer.functions.cast", "chainer.functions.reshape", "float", "numpy.sum", "numpy.square", "pixelwise_a3c_de.PixelWiseA3C.optimizer.target.params"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.functions.UpSampleFeaturesFunction.backward", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.sync_parameters", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.pi_and_v"], ["", "def", "update", "(", "self", ",", "statevar", ")", ":", "\n", "        ", "assert", "self", ".", "t_start", "<", "self", ".", "t", "\n", "\n", "if", "statevar", "is", "None", ":", "\n", "            ", "R", "=", "0", "\n", "", "else", ":", "\n", "            ", "with", "state_kept", "(", "self", ".", "model", ")", ":", "\n", "                ", "_", ",", "vout", "=", "self", ".", "model", ".", "pi_and_v", "(", "statevar", ")", "\n", "#######################", "\n", "", "R", "=", "F", ".", "cast", "(", "vout", ".", "data", ",", "'float32'", ")", "\n", "#R = float(vout.data)", "\n", "#######################", "\n", "\n", "", "pi_loss", "=", "0", "\n", "v_loss", "=", "0", "\n", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "t_start", ",", "self", ".", "t", ")", ")", ":", "\n", "            ", "R", "*=", "self", ".", "gamma", "\n", "R", "+=", "self", ".", "past_rewards", "[", "i", "]", "\n", "if", "self", ".", "use_average_reward", ":", "\n", "                ", "R", "-=", "self", ".", "average_reward", "\n", "", "v", "=", "self", ".", "past_values", "[", "i", "]", "\n", "advantage", "=", "R", "-", "v", "\n", "if", "self", ".", "use_average_reward", ":", "\n", "                ", "self", ".", "average_reward", "+=", "self", ".", "average_reward_tau", "*", "float", "(", "advantage", ".", "data", ")", "\n", "# Accumulate gradients of policy", "\n", "", "log_prob", "=", "self", ".", "past_action_log_prob", "[", "i", "]", "\n", "entropy", "=", "self", ".", "past_action_entropy", "[", "i", "]", "\n", "\n", "# Log probability is increased proportionally to advantage", "\n", "##############################", "\n", "pi_loss", "-=", "log_prob", "*", "F", ".", "cast", "(", "advantage", ".", "data", ",", "'float32'", ")", "\n", "#pi_loss -= log_prob * float(advantage.data)", "\n", "##############################", "\n", "# Entropy is maximized", "\n", "pi_loss", "-=", "self", ".", "beta", "*", "entropy", "\n", "# Accumulate gradients of value function", "\n", "v_loss", "+=", "(", "v", "-", "R", ")", "**", "2", "/", "2", "\n", "\n", "", "if", "self", ".", "pi_loss_coef", "!=", "1.0", ":", "\n", "            ", "pi_loss", "*=", "self", ".", "pi_loss_coef", "\n", "\n", "", "if", "self", ".", "v_loss_coef", "!=", "1.0", ":", "\n", "            ", "v_loss", "*=", "self", ".", "v_loss_coef", "\n", "\n", "# Normalize the loss of sequences truncated by terminal states", "\n", "", "if", "self", ".", "keep_loss_scale_same", "and", "self", ".", "t", "-", "self", ".", "t_start", "<", "self", ".", "t_max", ":", "\n", "            ", "factor", "=", "self", ".", "t_max", "/", "(", "self", ".", "t", "-", "self", ".", "t_start", ")", "\n", "pi_loss", "*=", "factor", "\n", "v_loss", "*=", "factor", "\n", "\n", "", "if", "self", ".", "normalize_grad_by_t_max", ":", "\n", "            ", "pi_loss", "/=", "self", ".", "t", "-", "self", ".", "t_start", "\n", "v_loss", "/=", "self", ".", "t", "-", "self", ".", "t_start", "\n", "\n", "", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "'pi_loss:%s v_loss:%s'", ",", "pi_loss", ".", "data", ",", "v_loss", ".", "data", ")", "\n", "\n", "##########################", "\n", "#total_loss = pi_loss + F.reshape(v_loss, pi_loss.data.shape)", "\n", "", "total_loss", "=", "F", ".", "mean", "(", "pi_loss", "+", "F", ".", "reshape", "(", "v_loss", ",", "pi_loss", ".", "data", ".", "shape", ")", ")", "\n", "##########################", "\n", "\n", "# Compute gradients using thread-specific model", "\n", "self", ".", "model", ".", "cleargrads", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "# Copy the gradients to the globally shared model", "\n", "self", ".", "shared_model", ".", "cleargrads", "(", ")", "\n", "copy_param", ".", "copy_grad", "(", "\n", "target_link", "=", "self", ".", "shared_model", ",", "source_link", "=", "self", ".", "model", ")", "\n", "# Update the globally shared model", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "norm", "=", "sum", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "param", ".", "grad", ")", ")", "\n", "for", "param", "in", "self", ".", "optimizer", ".", "target", ".", "params", "(", ")", ")", "\n", "logger", ".", "debug", "(", "'grad norm:%s'", ",", "norm", ")", "\n", "", "self", ".", "optimizer", ".", "update", "(", ")", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "'update'", ")", "\n", "\n", "", "self", ".", "sync_parameters", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "Recurrent", ")", ":", "\n", "            ", "self", ".", "model", ".", "unchain_backward", "(", ")", "\n", "\n", "", "self", ".", "past_action_log_prob", "=", "{", "}", "\n", "self", ".", "past_action_entropy", "=", "{", "}", "\n", "self", ".", "past_states", "=", "{", "}", "\n", "self", ".", "past_rewards", "=", "{", "}", "\n", "self", ".", "past_values", "=", "{", "}", "\n", "\n", "self", ".", "t_start", "=", "self", ".", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.act_and_train": [[232, 277], ["chainer.cuda.to_gpu", "chainer.cuda.to_gpu", "pixelwise_a3c_de.PixelWiseA3C.model.pi_and_v", "de.mylog_prob", "chainer.cuda.to_cpu", "pixelwise_a3c_de.PixelWiseA3C.update", "de.sample", "logger.debug"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.pi_and_v", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.mylog_prob", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update"], ["", "def", "act_and_train", "(", "self", ",", "state", ",", "reward", ")", ":", "\n", "#########################", "\n", "#statevar = self.batch_states([state], np, self.phi)", "\n", "        ", "statevar", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "state", ")", "\n", "\n", "#self.past_rewards[self.t - 1] = reward", "\n", "self", ".", "past_rewards", "[", "self", ".", "t", "-", "1", "]", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "reward", ")", "\n", "##########################", "\n", "\n", "if", "self", ".", "t", "-", "self", ".", "t_start", "==", "self", ".", "t_max", ":", "\n", "            ", "self", ".", "update", "(", "statevar", ")", "\n", "\n", "", "self", ".", "past_states", "[", "self", ".", "t", "]", "=", "statevar", "\n", "de", ",", "vout", "=", "self", ".", "model", ".", "pi_and_v", "(", "statevar", ")", "\n", "action", "=", "de", ".", "sample", "(", ")", ".", "data", "\n", "\n", "# Do not backprop through sampled actions", "\n", "###############################", "\n", "#self.past_action_log_prob[self.t] = pout.log_prob(action)", "\n", "self", ".", "past_action_log_prob", "[", "self", ".", "t", "]", "=", "de", ".", "mylog_prob", "(", "action", ")", "\n", "#self.past_action_entropy[self.t] = pout.entropy", "\n", "self", ".", "past_action_entropy", "[", "self", ".", "t", "]", "=", "de", ".", "myentropy", "\n", "#################################", "\n", "self", ".", "past_values", "[", "self", ".", "t", "]", "=", "vout", "\n", "self", ".", "t", "+=", "1", "\n", "#################################", "\n", "#action = action[0]", "\n", "#################################", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "'t:%s r:%s a:%s pout_r:%s pout_g:%s pout_b:%s'", ",", "\n", "self", ".", "t", ",", "reward", ",", "action", ",", "de", ")", "\n", "# Update stats", "\n", "#self.average_value += (", "\n", "#    (1 - self.average_value_decay) *", "\n", "#    (F.cast(vout.data, 'float32') - self.average_value))", "\n", "#############################", "\n", "#(float(vout.data[0]) - self.average_value))", "\n", "#############################", "\n", "#self.average_entropy += (", "\n", "#    (1 - self.average_entropy_decay) *", "\n", "#    (F.cast(pout.entropy.data, 'float32') - self.average_entropy))", "\n", "#############################", "\n", "#(float(pout.entropy.data[0]) - self.average_entropy))", "\n", "#return action", "\n", "", "return", "chainer", ".", "cuda", ".", "to_cpu", "(", "action", ")", "\n", "#############################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.act": [[279, 294], ["chainer.no_backprop_mode", "chainer.cuda.to_gpu", "pixelwise_a3c_de.PixelWiseA3C.model.pi_and_v", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "de.sample"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.pi_and_v"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "# Use the process-local model for acting", "\n", "        ", "with", "chainer", ".", "no_backprop_mode", "(", ")", ":", "\n", "#########################", "\n", "#statevar = self.batch_states([obs], np, self.phi)", "\n", "            ", "statevar", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "obs", ")", "\n", "de", ",", "_", "=", "self", ".", "model", ".", "pi_and_v", "(", "statevar", ")", "\n", "if", "self", ".", "act_deterministically", ":", "\n", "#return pout.most_probable.data[0]", "\n", "\n", "                ", "return", "chainer", ".", "cuda", ".", "to_cpu", "(", "de", ".", "most_probable", ".", "data", ")", "\n", "", "else", ":", "\n", "#return pout.sample().data[0]", "\n", "\n", "                ", "return", "chainer", ".", "cuda", ".", "to_cpu", "(", "de", ".", "sample", "(", ")", ".", "data", ")", "\n", "#########################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.stop_episode_and_train": [[296, 310], ["chainer.cuda.to_gpu", "isinstance", "pixelwise_a3c_de.PixelWiseA3C.update", "chainer.cuda.to_gpu", "pixelwise_a3c_de.PixelWiseA3C.update", "pixelwise_a3c_de.PixelWiseA3C.model.reset_state"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update"], ["", "", "", "def", "stop_episode_and_train", "(", "self", ",", "state", ",", "reward", ",", "done", "=", "False", ")", ":", "\n", "#########################", "\n", "#self.past_rewards[self.t - 1] = reward", "\n", "        ", "self", ".", "past_rewards", "[", "self", ".", "t", "-", "1", "]", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "reward", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "update", "(", "None", ")", "\n", "", "else", ":", "\n", "#statevar = self.batch_states([state], np, self.phi)", "\n", "            ", "statevar", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "state", ")", "\n", "########################", "\n", "self", ".", "update", "(", "statevar", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "Recurrent", ")", ":", "\n", "            ", "self", ".", "model", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.stop_episode": [[311, 314], ["isinstance", "pixelwise_a3c_de.PixelWiseA3C.model.reset_state"], "methods", ["None"], ["", "", "def", "stop_episode", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "model", ",", "Recurrent", ")", ":", "\n", "            ", "self", ".", "model", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.load": [[315, 319], ["super().load", "chainerrl.misc.copy_param.copy_param"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.load"], ["", "", "def", "load", "(", "self", ",", "dirname", ")", ":", "\n", "        ", "super", "(", ")", ".", "load", "(", "dirname", ")", "\n", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "shared_model", ",", "\n", "source_link", "=", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.PixelWiseA3C.get_statistics": [[320, 324], ["None"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "'average_value'", ",", "self", ".", "average_value", ")", ",", "\n", "(", "'average_entropy'", ",", "self", ".", "average_entropy", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.myentropy": [[32, 36], ["chainer.force_backprop_mode", "chainer.functions.stack", "chainer.functions.sum"], "function", ["None"], ["@", "cached_property", "\n", "def", "myentropy", "(", "self", ")", ":", "\n", "    ", "with", "chainer", ".", "force_backprop_mode", "(", ")", ":", "\n", "        ", "return", "F", ".", "stack", "(", "[", "-", "F", ".", "sum", "(", "self", ".", "all_prob", "*", "self", ".", "all_log_prob", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", "\n", "#######################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_de.mylog_prob": [[39, 46], ["chainer.functions.transpose", "chainer.functions.reshape", "chainer.functions.select_item", "chainer.functions.reshape", "chainer.functions.reshape"], "function", ["None"], ["", "", "def", "mylog_prob", "(", "self", ",", "x", ")", ":", "\n", "    ", "n_batch", ",", "n_actions", ",", "h", ",", "w", "=", "self", ".", "all_log_prob", ".", "shape", "\n", "p_trans", "=", "F", ".", "transpose", "(", "self", ".", "all_log_prob", ",", "axes", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "p_trans", "=", "F", ".", "reshape", "(", "p_trans", ",", "(", "-", "1", ",", "n_actions", ")", ")", "\n", "x_reshape", "=", "F", ".", "reshape", "(", "x", ",", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "selected_p", "=", "F", ".", "select_item", "(", "p_trans", ",", "x_reshape", ")", "\n", "return", "F", ".", "reshape", "(", "selected_p", ",", "(", "n_batch", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "##########################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.__init__": [[8, 15], ["mini_batch_loader.MiniBatchLoader.read_paths", "mini_batch_loader.MiniBatchLoader.read_paths"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.read_paths", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.read_paths"], ["    ", "def", "__init__", "(", "self", ",", "train_path", ",", "test_path", ",", "image_dir_path", ",", "crop_size", ")", ":", "\n", "\n", "# load data paths", "\n", "        ", "self", ".", "training_path_infos", "=", "self", ".", "read_paths", "(", "train_path", ",", "image_dir_path", ")", "\n", "self", ".", "testing_path_infos", "=", "self", ".", "read_paths", "(", "test_path", ",", "image_dir_path", ")", "\n", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.path_label_generator": [[17, 24], ["open", "line.strip.strip.strip", "os.path.join", "os.path.isfile"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "path_label_generator", "(", "txt_path", ",", "src_path", ")", ":", "\n", "        ", "for", "line", "in", "open", "(", "txt_path", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "src_full_path", "=", "os", ".", "path", ".", "join", "(", "src_path", ",", "line", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "src_full_path", ")", ":", "\n", "                ", "yield", "src_full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.count_paths": [[26, 32], ["open"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "count_paths", "(", "path", ")", ":", "\n", "        ", "c", "=", "0", "\n", "for", "_", "in", "open", "(", "path", ")", ":", "\n", "            ", "c", "+=", "1", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.read_paths": [[34, 40], ["mini_batch_loader.MiniBatchLoader.path_label_generator", "cs.append"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.path_label_generator"], ["", "@", "staticmethod", "\n", "def", "read_paths", "(", "txt_path", ",", "src_path", ")", ":", "\n", "        ", "cs", "=", "[", "]", "\n", "for", "pair", "in", "MiniBatchLoader", ".", "path_label_generator", "(", "txt_path", ",", "src_path", ")", ":", "\n", "            ", "cs", ".", "append", "(", "pair", ")", "\n", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_training_data": [[41, 43], ["mini_batch_loader.MiniBatchLoader.load_data"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_data"], ["", "def", "load_training_data", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "load_data", "(", "self", ".", "training_path_infos", ",", "indices", ",", "augment", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_testing_data": [[44, 46], ["mini_batch_loader.MiniBatchLoader.load_data"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_data"], ["", "def", "load_testing_data", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "load_data", "(", "self", ".", "testing_path_infos", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_data": [[48, 96], ["len", "numpy.zeros().astype", "enumerate", "cv2.imread", "numpy.random.randint", "numpy.random.randint", "numpy.transpose", "enumerate", "numpy.zeros().astype", "numpy.transpose", "RuntimeError", "numpy.zeros", "RuntimeError", "numpy.random.rand", "numpy.fliplr", "numpy.random.rand", "cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.imread", "numpy.random.rand", "numpy.random.rand", "RuntimeError", "numpy.zeros"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "path_infos", ",", "indices", ",", "augment", "=", "False", ")", ":", "\n", "        ", "mini_batch_size", "=", "len", "(", "indices", ")", "\n", "in_channels", "=", "3", "\n", "\n", "if", "augment", ":", "\n", "            ", "xs", "=", "np", ".", "zeros", "(", "(", "mini_batch_size", ",", "in_channels", ",", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "                ", "path", "=", "path_infos", "[", "index", "]", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "if", "img", "is", "None", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"invalid image: {i}\"", ".", "format", "(", "i", "=", "path", ")", ")", "\n", "", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "                    ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "                    ", "angle", "=", "10", "*", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "                        ", "angle", "*=", "-", "1", "\n", "", "M", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "w", "/", "2", ",", "h", "/", "2", ")", ",", "angle", ",", "1", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "rand_range_h", "=", "h", "-", "self", ".", "crop_size", "\n", "rand_range_w", "=", "w", "-", "self", ".", "crop_size", "\n", "x_offset", "=", "np", ".", "random", ".", "randint", "(", "rand_range_w", ")", "\n", "y_offset", "=", "np", ".", "random", ".", "randint", "(", "rand_range_h", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", "[", "y_offset", ":", "y_offset", "+", "self", ".", "crop_size", ",", "x_offset", ":", "x_offset", "+", "self", ".", "crop_size", "]", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "xs", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "(", "img", "/", "255", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "", "elif", "mini_batch_size", "==", "1", ":", "\n", "            ", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "                ", "path", "=", "path_infos", "[", "index", "]", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "if", "img", "is", "None", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"invalid image: {i}\"", ".", "format", "(", "i", "=", "path", ")", ")", "\n", "\n", "", "", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "xs", "=", "np", ".", "zeros", "(", "(", "mini_batch_size", ",", "in_channels", ",", "h", ",", "w", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "xs", "[", "0", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "transpose", "(", "(", "img", "/", "255", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"mini batch size must be 1 when testing\"", ")", "\n", "\n", "", "return", "xs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.train.test": [[42, 78], ["mini_batch_loader.MiniBatchLoader.count_paths", "State_de.State_de", "range", "print", "fout.write", "sys.stdout.flush", "loader1.load_testing_data", "loader2.load_testing_data", "State_de.State_de.reset", "range", "agent_el.stop_episode", "agent_de.stop_episode", "np.maximum", "np.minimum", "np.maximum", "np.minimum", "cv2.PSNR", "np.squeeze", "np.transpose", "cv2.imwrite", "np.array", "np.array", "np.zeros", "State_de.State_de.image.copy", "agent_el.act", "State_de.State_de.step_el", "agent_de.act", "State_de.State_de.step_de", "range", "range", "np.mean", "np.power", "np.square", "np.square", "str"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.count_paths", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_testing_data", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_testing_data", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.reset", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_el", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_de"], ["def", "test", "(", "loader1", ",", "loader2", ",", "agent_el", ",", "agent_de", ",", "fout", ",", "model", ")", ":", "\n", "    ", "sum_psnr", "=", "0", "\n", "sum_reward", "=", "0", "\n", "test_data_size", "=", "MiniBatchLoader", ".", "count_paths", "(", "TESTING_DATA_PATH", ")", "\n", "current_state", "=", "State_de", ".", "State_de", "(", "(", "TEST_BATCH_SIZE", ",", "1", ",", "CROP_SIZE", ",", "CROP_SIZE", ")", ",", "MOVE_RANGE", ",", "model", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "test_data_size", ",", "TEST_BATCH_SIZE", ")", ":", "\n", "        ", "raw_x", "=", "loader1", ".", "load_testing_data", "(", "np", ".", "array", "(", "range", "(", "i", ",", "i", "+", "TEST_BATCH_SIZE", ")", ")", ")", "\n", "label", "=", "loader2", ".", "load_testing_data", "(", "np", ".", "array", "(", "range", "(", "i", ",", "i", "+", "TEST_BATCH_SIZE", ")", ")", ")", "\n", "#raw_n = np.random.normal(MEAN,SIGMA,raw_x.shape).astype(raw_x.dtype)/255", "\n", "current_state", ".", "reset", "(", "raw_x", ")", "\n", "reward", "=", "np", ".", "zeros", "(", "raw_x", ".", "shape", ",", "raw_x", ".", "dtype", ")", "*", "255", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "EPISODE_LEN", ")", ":", "\n", "            ", "previous_image", "=", "current_state", ".", "image", ".", "copy", "(", ")", "\n", "action_el", "=", "agent_el", ".", "act", "(", "current_state", ".", "image", ")", "\n", "current_state", ".", "step_el", "(", "action_el", ")", "\n", "action_de", "=", "agent_de", ".", "act", "(", "current_state", ".", "image", ")", "\n", "current_state", ".", "step_de", "(", "action_de", ")", "\n", "reward", "=", "np", ".", "square", "(", "label", "-", "previous_image", ")", "*", "255", "-", "np", ".", "square", "(", "label", "-", "current_state", ".", "image", ")", "*", "255", "\n", "sum_reward", "+=", "np", ".", "mean", "(", "reward", ")", "*", "np", ".", "power", "(", "GAMMA", ",", "t", ")", "\n", "", "agent_el", ".", "stop_episode", "(", ")", "\n", "agent_de", ".", "stop_episode", "(", ")", "\n", "\n", "I", "=", "np", ".", "maximum", "(", "0", ",", "label", ")", "\n", "I", "=", "np", ".", "minimum", "(", "1", ",", "I", ")", "\n", "p", "=", "np", ".", "maximum", "(", "0", ",", "current_state", ".", "image", ")", "\n", "p", "=", "np", ".", "minimum", "(", "1", ",", "p", ")", "\n", "I", "=", "(", "I", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "p", "=", "(", "p", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sum_psnr", "+=", "cv2", ".", "PSNR", "(", "p", ",", "I", ")", "\n", "p", "=", "np", ".", "squeeze", "(", "p", ",", "axis", "=", "0", ")", "\n", "p", "=", "np", ".", "transpose", "(", "p", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'./result/'", "+", "str", "(", "i", ")", "+", "'_output.png'", ",", "p", ")", "\n", "", "print", "(", "\"test total reward {a}, PSNR {b}\"", ".", "format", "(", "a", "=", "sum_reward", "*", "255", "/", "test_data_size", ",", "b", "=", "sum_psnr", "/", "test_data_size", ")", ")", "\n", "fout", ".", "write", "(", "\"test total reward {a}, PSNR {b}\\n\"", ".", "format", "(", "a", "=", "sum_reward", "*", "255", "/", "test_data_size", ",", "b", "=", "sum_psnr", "/", "test_data_size", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.train.main": [[80, 212], ["mini_batch_loader.MiniBatchLoader", "mini_batch_loader.MiniBatchLoader", "pixelwise_a3c_el.chainer.cuda.get_device_from_id().use", "os.path.join", "print", "models.FFDNet", "torch.load", "torch.load", "torch.DataParallel().cuda", "nn.DataParallel().cuda.load_state_dict", "nn.DataParallel().cuda.eval", "State_de.State_de", "MyFCN_el.MyFcn", "pixelwise_a3c_el.chainer.optimizers.Adam", "pixelwise_a3c_el.chainer.optimizers.Adam.setup", "pixelwise_a3c_el.PixelWiseA3C", "pixelwise_a3c_el.PixelWiseA3C.model.to_gpu", "MyFCN_de.MyFcn_denoise", "pixelwise_a3c_de.chainer.optimizers.Adam", "pixelwise_a3c_de.chainer.optimizers.Adam.setup", "pixelwise_a3c_de.PixelWiseA3C", "pixelwise_a3c_de.PixelWiseA3C.model.to_gpu", "mini_batch_loader.MiniBatchLoader.count_paths", "np.random.permutation", "Myloss.L_spa", "Myloss.L_TV", "Myloss.L_exp", "Myloss.L_color_rate", "range", "os.path.abspath", "print", "fout.write", "sys.stdout.flush", "mini_batch_loader.MiniBatchLoader.load_training_data", "State_de.State_de.reset", "np.zeros", "np.zeros", "range", "pixelwise_a3c_el.PixelWiseA3C.stop_episode_and_train", "pixelwise_a3c_de.PixelWiseA3C.stop_episode_and_train", "print", "fout.write", "sys.stdout.flush", "pixelwise_a3c_el.chainer.cuda.get_device_from_id", "os.path.dirname", "torch.DataParallel", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "State_de.State_de.image.copy", "pixelwise_a3c_el.PixelWiseA3C.act_and_train", "State_de.State_de.step_el", "pixelwise_a3c_de.PixelWiseA3C.act_and_train", "State_de.State_de.step_de", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.mean", "torch.mean", "reward.cpu().numpy", "train.test", "pixelwise_a3c_el.PixelWiseA3C.save", "np.random.permutation", "Myloss.L_spa.", "Myloss.L_TV.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "np.mean", "np.power", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Myloss.L_exp.", "Myloss.L_color_rate.", "reward.cpu", "str"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.load", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.load", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.count_paths", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_training_data", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.reset", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode_and_train", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode_and_train", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act_and_train", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_el", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act_and_train", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_de", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.test.test"], ["", "def", "main", "(", "fout", ")", ":", "\n", "#_/_/_/ load dataset _/_/_/ ", "\n", "    ", "mini_batch_loader", "=", "MiniBatchLoader", "(", "\n", "TRAINING_DATA_PATH", ",", "\n", "TRAINING_DATA_PATH", ",", "\n", "IMAGE_DIR_PATH", ",", "\n", "CROP_SIZE", ")", "\n", "mini_batch_loader_label", "=", "MiniBatchLoader", "(", "\n", "label_DATA_PATH", ",", "\n", "label_DATA_PATH", ",", "\n", "IMAGE_DIR_PATH", ",", "\n", "CROP_SIZE", ")", "\n", "\n", "pixelwise_a3c_el", ".", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "GPU_ID", ")", ".", "use", "(", ")", "\n", "\n", "# load ffdnet", "\n", "in_ch", "=", "3", "\n", "model_fn", "=", "'FFDNet_models/net_rgb.pth'", "\n", "# Absolute path to model file", "\n", "model_fn", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ",", "model_fn", ")", "\n", "# Create model", "\n", "print", "(", "'Loading model ...\\n'", ")", "\n", "net", "=", "FFDNet", "(", "num_input_channels", "=", "in_ch", ")", "\n", "\n", "# Load saved weights", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_fn", ")", "\n", "device_ids", "=", "[", "GPU_ID", "]", "\n", "model", "=", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "device_ids", ")", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "current_state", "=", "State_de", ".", "State_de", "(", "(", "TRAIN_BATCH_SIZE", ",", "1", ",", "CROP_SIZE", ",", "CROP_SIZE", ")", ",", "MOVE_RANGE", ",", "model", ")", "\n", "\n", "# load pretrained myfcn model for el", "\n", "\n", "\n", "\n", "# load myfcn model", "\n", "model_el", "=", "MyFCN_el", ".", "MyFcn", "(", "N_ACTIONS", ")", "\n", "\n", "# _/_/_/ setup _/_/_/", "\n", "optimizer_el", "=", "pixelwise_a3c_el", ".", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "LEARNING_RATE", ")", "\n", "optimizer_el", ".", "setup", "(", "model_el", ")", "\n", "\n", "agent_el", "=", "pixelwise_a3c_el", ".", "PixelWiseA3C", "(", "model_el", ",", "optimizer_el", ",", "EPISODE_LEN", ",", "GAMMA", ")", "\n", "# pixelwise_a3c.chainer.serializers.load_npz('./model/ex52_8000/model.npz', agent_el.model)", "\n", "# agent_el.act_deterministically = True", "\n", "agent_el", ".", "model", ".", "to_gpu", "(", ")", "\n", "\n", "# load myfcn model for de", "\n", "model_de", "=", "MyFCN_de", ".", "MyFcn_denoise", "(", "2", ")", "\n", "\n", "# _/_/_/ setup _/_/_/", "\n", "\n", "optimizer_de", "=", "pixelwise_a3c_de", ".", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "LEARNING_RATE", ")", "\n", "optimizer_de", ".", "setup", "(", "model_de", ")", "\n", "\n", "agent_de", "=", "pixelwise_a3c_de", ".", "PixelWiseA3C", "(", "model_de", ",", "optimizer_de", ",", "EPISODE_LEN", ",", "GAMMA", ")", "\n", "agent_de", ".", "model", ".", "to_gpu", "(", ")", "\n", "\n", "#_/_/_/ training _/_/_/", "\n", "\n", "train_data_size", "=", "MiniBatchLoader", ".", "count_paths", "(", "TRAINING_DATA_PATH", ")", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "train_data_size", ")", "\n", "i", "=", "0", "\n", "#L_color = Myloss.L_color()", "\n", "L_spa", "=", "Myloss", ".", "L_spa", "(", ")", "\n", "L_TV", "=", "Myloss", ".", "L_TV", "(", ")", "\n", "L_exp", "=", "Myloss", ".", "L_exp", "(", "16", ",", "0.6", ")", "\n", "L_color_rate", "=", "Myloss", ".", "L_color_rate", "(", ")", "\n", "for", "episode", "in", "range", "(", "1", ",", "N_EPISODES", "+", "1", ")", ":", "\n", "# display current episode", "\n", "        ", "print", "(", "\"episode %d\"", "%", "episode", ")", "\n", "fout", ".", "write", "(", "\"episode %d\\n\"", "%", "episode", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "# load images", "\n", "r", "=", "indices", "[", "i", ":", "i", "+", "TRAIN_BATCH_SIZE", "]", "\n", "raw_x", "=", "mini_batch_loader", ".", "load_training_data", "(", "r", ")", "\n", "# generate noise", "\n", "#raw_n = np.random.normal(MEAN,SIGMA,raw_x.shape).astype(raw_x.dtype)/255", "\n", "# initialize the current state and reward", "\n", "current_state", ".", "reset", "(", "raw_x", ")", "\n", "reward_de", "=", "np", ".", "zeros", "(", "raw_x", ".", "shape", ",", "raw_x", ".", "dtype", ")", "\n", "action_value", "=", "np", ".", "zeros", "(", "raw_x", ".", "shape", ",", "raw_x", ".", "dtype", ")", "\n", "sum_reward", "=", "0", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "EPISODE_LEN", ")", ":", "\n", "            ", "raw_tensor", "=", "torch", ".", "from_numpy", "(", "raw_x", ")", ".", "cuda", "(", ")", "\n", "previous_image", "=", "current_state", ".", "image", ".", "copy", "(", ")", "\n", "action_el", "=", "agent_el", ".", "act_and_train", "(", "current_state", ".", "image", ",", "reward_de", ")", "\n", "action_value", "=", "(", "action_el", "-", "6", ")", "/", "20", "\n", "current_state", ".", "step_el", "(", "action_el", ")", "\n", "action_de", "=", "agent_de", ".", "act_and_train", "(", "current_state", ".", "image", ",", "reward_de", ")", "\n", "current_state", ".", "step_de", "(", "action_de", ")", "\n", "previous_image_tensor", "=", "torch", ".", "from_numpy", "(", "previous_image", ")", ".", "cuda", "(", ")", "\n", "current_state_tensor", "=", "torch", ".", "from_numpy", "(", "current_state", ".", "image", ")", ".", "cuda", "(", ")", "\n", "action_tensor", "=", "torch", ".", "from_numpy", "(", "action_value", ")", ".", "cuda", "(", ")", "\n", "loss_spa_cur", "=", "torch", ".", "mean", "(", "L_spa", "(", "current_state_tensor", ",", "raw_tensor", ")", ")", "\n", "# loss_col_cur = 50 * torch.mean(L_color(current_state_tensor))", "\n", "Loss_TV_cur", "=", "200", "*", "L_TV", "(", "action_tensor", ")", "\n", "loss_exp_cur", "=", "80", "*", "torch", ".", "mean", "(", "L_exp", "(", "current_state_tensor", ")", ")", "\n", "loss_col_rate_pre", "=", "20", "*", "torch", ".", "mean", "(", "L_color_rate", "(", "previous_image_tensor", ",", "current_state_tensor", ")", ")", "\n", "# reward_previous = loss_spa_pre + loss_col_pre + loss_exp_pre + Loss_TV_pre + loss_col_rate_pre", "\n", "reward_current", "=", "loss_spa_cur", "+", "loss_exp_cur", "+", "Loss_TV_cur", "+", "loss_col_rate_pre", "\n", "reward", "=", "-", "reward_current", "\n", "reward_de", "=", "reward", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sum_reward", "+=", "np", ".", "mean", "(", "reward_de", ")", "*", "np", ".", "power", "(", "GAMMA", ",", "t", ")", "\n", "\n", "", "agent_el", ".", "stop_episode_and_train", "(", "current_state", ".", "image", ",", "reward_de", ",", "True", ")", "\n", "agent_de", ".", "stop_episode_and_train", "(", "current_state", ".", "image", ",", "reward_de", ",", "True", ")", "\n", "\n", "print", "(", "\"train total reward {a}\"", ".", "format", "(", "a", "=", "sum_reward", ")", ")", "\n", "fout", ".", "write", "(", "\"train total reward {a}\\n\"", ".", "format", "(", "a", "=", "sum_reward", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "episode", "%", "TEST_EPISODES", "==", "0", ":", "\n", "#_/_/_/ testing _/_/_/", "\n", "            ", "test", "(", "mini_batch_loader", ",", "mini_batch_loader_label", ",", "agent_el", ",", "agent_de", ",", "fout", ",", "model", ")", "\n", "\n", "", "if", "episode", "%", "SNAPSHOT_EPISODES", "==", "0", ":", "\n", "            ", "agent_el", ".", "save", "(", "SAVE_PATH", "+", "str", "(", "episode", ")", ")", "\n", "\n", "", "if", "i", "+", "TRAIN_BATCH_SIZE", ">=", "train_data_size", ":", "\n", "            ", "i", "=", "0", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "train_data_size", ")", "\n", "", "else", ":", "\n", "            ", "i", "+=", "TRAIN_BATCH_SIZE", "\n", "\n", "", "if", "i", "+", "2", "*", "TRAIN_BATCH_SIZE", ">=", "train_data_size", ":", "\n", "            ", "i", "=", "train_data_size", "-", "TRAIN_BATCH_SIZE", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.dataset.Dataset.__init__": [[149, 168], ["torch.Dataset.__init__", "list", "h5py.File.close", "h5py.File", "h5py.File", "h5py.File.keys", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["def", "__init__", "(", "self", ",", "train", "=", "True", ",", "gray_mode", "=", "False", ",", "shuffle", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "gray_mode", "=", "gray_mode", "\n", "if", "not", "self", ".", "gray_mode", ":", "\n", "\t\t\t", "self", ".", "traindbf", "=", "'train_rgb.h5'", "\n", "self", ".", "valdbf", "=", "'val_rgb.h5'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "traindbf", "=", "'train_gray.h5'", "\n", "self", ".", "valdbf", "=", "'val_gray.h5'", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "\t\t\t", "h5f", "=", "h5py", ".", "File", "(", "self", ".", "traindbf", ",", "'r'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "h5f", "=", "h5py", ".", "File", "(", "self", ".", "valdbf", ",", "'r'", ")", "\n", "", "self", ".", "keys", "=", "list", "(", "h5f", ".", "keys", "(", ")", ")", "\n", "if", "shuffle", ":", "\n", "\t\t\t", "random", ".", "shuffle", "(", "self", ".", "keys", ")", "\n", "", "h5f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.dataset.Dataset.__len__": [[169, 171], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.dataset.Dataset.__getitem__": [[172, 181], ["numpy.array", "h5py.File.close", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "h5py.File", "h5py.File"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "if", "self", ".", "train", ":", "\n", "\t\t\t", "h5f", "=", "h5py", ".", "File", "(", "self", ".", "traindbf", ",", "'r'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "h5f", "=", "h5py", ".", "File", "(", "self", ".", "valdbf", ",", "'r'", ")", "\n", "", "key", "=", "self", ".", "keys", "[", "index", "]", "\n", "data", "=", "np", ".", "array", "(", "h5f", "[", "key", "]", ")", "\n", "h5f", ".", "close", "(", ")", "\n", "return", "torch", ".", "Tensor", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.dataset.img_to_patches": [[24, 46], ["numpy.zeros", "range", "np.zeros.reshape", "range", "numpy.array().reshape", "numpy.array"], "function", ["None"], ["def", "img_to_patches", "(", "img", ",", "win", ",", "stride", "=", "1", ")", ":", "\n", "\t", "r\"\"\"Converts an image to an array of patches.\n\n\tArgs:\n\t\timg: a numpy array containing a CxHxW RGB (C=3) or grayscale (C=1)\n\t\t\timage\n\t\twin: size of the output patches\n\t\tstride: int. stride\n\t\"\"\"", "\n", "k", "=", "0", "\n", "endc", "=", "img", ".", "shape", "[", "0", "]", "\n", "endw", "=", "img", ".", "shape", "[", "1", "]", "\n", "endh", "=", "img", ".", "shape", "[", "2", "]", "\n", "patch", "=", "img", "[", ":", ",", "0", ":", "endw", "-", "win", "+", "0", "+", "1", ":", "stride", ",", "0", ":", "endh", "-", "win", "+", "0", "+", "1", ":", "stride", "]", "\n", "total_pat_num", "=", "patch", ".", "shape", "[", "1", "]", "*", "patch", ".", "shape", "[", "2", "]", "\n", "res", "=", "np", ".", "zeros", "(", "[", "endc", ",", "win", "*", "win", ",", "total_pat_num", "]", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "win", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "win", ")", ":", "\n", "\t\t\t", "patch", "=", "img", "[", ":", ",", "i", ":", "endw", "-", "win", "+", "i", "+", "1", ":", "stride", ",", "j", ":", "endh", "-", "win", "+", "j", "+", "1", ":", "stride", "]", "\n", "res", "[", ":", ",", "k", ",", ":", "]", "=", "np", ".", "array", "(", "patch", "[", ":", "]", ")", ".", "reshape", "(", "endc", ",", "total_pat_num", ")", "\n", "k", "=", "k", "+", "1", "\n", "", "", "return", "res", ".", "reshape", "(", "[", "endc", ",", "win", ",", "win", ",", "total_pat_num", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.dataset.prepare_data": [[47, 145], ["print", "files.sort", "print", "files.sort", "h5py.File", "enumerate", "h5py.File.close", "print", "print", "print", "files.extend", "print", "print", "h5py.File", "files.extend", "print", "cv2.imread", "utils.normalize", "h5py.File.create_dataset", "glob.glob", "cv2.imread", "glob.glob", "cv2.cvtColor().transpose", "cv2.cvtColor", "numpy.expand_dims", "str", "os.path.join", "os.path.join", "len", "cv2.resize", "utils.normalize", "dataset.img_to_patches", "print", "range", "os.path.join", "os.path.join", "cv2.cvtColor().transpose", "cv2.cvtColor", "numpy.expand_dims", "utils.data_augmentation", "h5py.File.create_dataset", "range", "cv2.cvtColor", "patches[].copy", "numpy.random.randint", "str", "utils.data_augmentation", "h5py.File.create_dataset", "cv2.cvtColor", "numpy.random.randint", "str"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.normalize", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.normalize", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.dataset.img_to_patches", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.data_augmentation", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.data_augmentation"], ["", "def", "prepare_data", "(", "data_path", ",", "val_data_path", ",", "patch_size", ",", "stride", ",", "max_num_patches", "=", "None", ",", "aug_times", "=", "1", ",", "gray_mode", "=", "False", ")", ":", "\n", "\t", "r\"\"\"Builds the training and validations datasets by scanning the\n\tcorresponding directories for images and extracting\tpatches from them.\n\n\tArgs:\n\t\tdata_path: path containing the training image dataset\n\t\tval_data_path: path containing the validation image dataset\n\t\tpatch_size: size of the patches to extract from the images\n\t\tstride: size of stride to extract patches\n\t\tstride: size of stride to extract patches\n\t\tmax_num_patches: maximum number of patches to extract\n\t\taug_times: number of times to augment the available data minus one\n\t\tgray_mode: build the databases composed of grayscale patches\n\t\"\"\"", "\n", "# training database", "\n", "print", "(", "'> Training database'", ")", "\n", "scales", "=", "[", "1", ",", "0.9", ",", "0.8", ",", "0.7", "]", "\n", "types", "=", "(", "'*.bmp'", ",", "'*.png'", ")", "\n", "files", "=", "[", "]", "\n", "for", "tp", "in", "types", ":", "\n", "\t\t", "files", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "tp", ")", ")", ")", "\n", "", "files", ".", "sort", "(", ")", "\n", "\n", "if", "gray_mode", ":", "\n", "\t\t", "traindbf", "=", "'train_gray.h5'", "\n", "valdbf", "=", "'val_gray.h5'", "\n", "", "else", ":", "\n", "\t\t", "traindbf", "=", "'train_rgb.h5'", "\n", "valdbf", "=", "'val_rgb.h5'", "\n", "\n", "", "if", "max_num_patches", "is", "None", ":", "\n", "\t\t", "max_num_patches", "=", "5000000", "\n", "print", "(", "\"\\tMaximum number of patches not set\"", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "\"\\tMaximum number of patches set to {}\"", ".", "format", "(", "max_num_patches", ")", ")", "\n", "", "train_num", "=", "0", "\n", "i", "=", "0", "\n", "with", "h5py", ".", "File", "(", "traindbf", ",", "'w'", ")", "as", "h5f", ":", "\n", "\t\t", "while", "i", "<", "len", "(", "files", ")", "and", "train_num", "<", "max_num_patches", ":", "\n", "\t\t\t", "imgor", "=", "cv2", ".", "imread", "(", "files", "[", "i", "]", ")", "\n", "# h, w, c = img.shape", "\n", "for", "sca", "in", "scales", ":", "\n", "\t\t\t\t", "img", "=", "cv2", ".", "resize", "(", "imgor", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "sca", ",", "fy", "=", "sca", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "if", "not", "gray_mode", ":", "\n", "# CxHxW RGB image", "\n", "\t\t\t\t\t", "img", "=", "(", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "# CxHxW grayscale image (C=1)", "\n", "\t\t\t\t\t", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "0", ")", "\n", "", "img", "=", "normalize", "(", "img", ")", "\n", "patches", "=", "img_to_patches", "(", "img", ",", "win", "=", "patch_size", ",", "stride", "=", "stride", ")", "\n", "print", "(", "\"\\tfile: %s scale %.1f # samples: %d\"", "%", "(", "files", "[", "i", "]", ",", "sca", ",", "patches", ".", "shape", "[", "3", "]", "*", "aug_times", ")", ")", "\n", "for", "nx", "in", "range", "(", "patches", ".", "shape", "[", "3", "]", ")", ":", "\n", "\t\t\t\t\t", "data", "=", "data_augmentation", "(", "patches", "[", ":", ",", ":", ",", ":", ",", "nx", "]", ".", "copy", "(", ")", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "7", ")", ")", "\n", "h5f", ".", "create_dataset", "(", "str", "(", "train_num", ")", ",", "data", "=", "data", ")", "\n", "train_num", "+=", "1", "\n", "for", "mx", "in", "range", "(", "aug_times", "-", "1", ")", ":", "\n", "\t\t\t\t\t\t", "data_aug", "=", "data_augmentation", "(", "data", ",", "np", ".", "random", ".", "randint", "(", "1", ",", "4", ")", ")", "\n", "h5f", ".", "create_dataset", "(", "str", "(", "train_num", ")", "+", "\"_aug_%d\"", "%", "(", "mx", "+", "1", ")", ",", "data", "=", "data_aug", ")", "\n", "train_num", "+=", "1", "\n", "", "", "", "i", "+=", "1", "\n", "\n", "# validation database", "\n", "", "", "print", "(", "'\\n> Validation database'", ")", "\n", "files", "=", "[", "]", "\n", "for", "tp", "in", "types", ":", "\n", "\t\t", "files", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "val_data_path", ",", "tp", ")", ")", ")", "\n", "", "files", ".", "sort", "(", ")", "\n", "h5f", "=", "h5py", ".", "File", "(", "valdbf", ",", "'w'", ")", "\n", "val_num", "=", "0", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "files", ")", ":", "\n", "\t\t", "print", "(", "\"\\tfile: %s\"", "%", "item", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "item", ")", "\n", "if", "not", "gray_mode", ":", "\n", "# C. H. W, RGB image", "\n", "\t\t\t", "img", "=", "(", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "# C, H, W grayscale image (C=1)", "\n", "\t\t\t", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "0", ")", "\n", "", "img", "=", "normalize", "(", "img", ")", "\n", "h5f", ".", "create_dataset", "(", "str", "(", "val_num", ")", ",", "data", "=", "img", ")", "\n", "val_num", "+=", "1", "\n", "", "h5f", ".", "close", "(", ")", "\n", "\n", "print", "(", "'\\n> Total'", ")", "\n", "print", "(", "'\\ttraining set, # samples %d'", "%", "train_num", ")", "\n", "print", "(", "'\\tvalidation set, # samples %d\\n'", "%", "val_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_color.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L_color", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_color.forward": [[14, 25], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "mean_rgb", "=", "torch", ".", "mean", "(", "x", ",", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "mr", ",", "mg", ",", "mb", "=", "torch", ".", "split", "(", "mean_rgb", ",", "1", ",", "dim", "=", "1", ")", "\n", "Drg", "=", "torch", ".", "pow", "(", "mr", "-", "mg", ",", "2", ")", "\n", "Drb", "=", "torch", ".", "pow", "(", "mr", "-", "mb", ",", "2", ")", "\n", "Dgb", "=", "torch", ".", "pow", "(", "mb", "-", "mg", ",", "2", ")", "\n", "k", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "Drg", ",", "2", ")", "+", "torch", ".", "pow", "(", "Drb", ",", "2", ")", "+", "torch", ".", "pow", "(", "Dgb", ",", "2", ")", ",", "0.5", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_color_rate.__init__": [[28, 30], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L_color_rate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_color_rate.forward": [[31, 49], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "mr_pre.int", "mg_pre.int", "mr_cur.int", "mg_cur.int", "mr_pre.int", "mb_pre.int", "mr_cur.int", "mb_cur.int", "mg_pre.int", "mb_pre.int", "mg_cur.int", "mb_cur.int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pre", ",", "cur", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "pre", ".", "shape", "\n", "\n", "# mean_rgb_pre = torch.mean(pre, [2, 3], keepdim=True)", "\n", "mr_pre", ",", "mg_pre", ",", "mb_pre", "=", "torch", ".", "split", "(", "pre", "*", "255", ",", "1", ",", "dim", "=", "1", ")", "\n", "# mean_rgb_cur = torch.mean(cur, [2, 3], keepdim=True)", "\n", "mr_cur", ",", "mg_cur", ",", "mb_cur", "=", "torch", ".", "split", "(", "cur", "*", "255", ",", "1", ",", "dim", "=", "1", ")", "\n", "\n", "Drg", "=", "torch", ".", "pow", "(", "mr_pre", ".", "int", "(", ")", "//", "mg_pre", ".", "int", "(", ")", "-", "mr_cur", ".", "int", "(", ")", "//", "mg_cur", ".", "int", "(", ")", ",", "2", ")", ".", "sum", "(", ")", "/", "255.0", "**", "2", "\n", "Drb", "=", "torch", ".", "pow", "(", "mr_pre", ".", "int", "(", ")", "//", "mb_pre", ".", "int", "(", ")", "-", "mr_cur", ".", "int", "(", ")", "//", "mb_cur", ".", "int", "(", ")", ",", "2", ")", ".", "sum", "(", ")", "/", "255.0", "**", "2", "\n", "Dgb", "=", "torch", ".", "pow", "(", "mg_pre", ".", "int", "(", ")", "//", "mb_pre", ".", "int", "(", ")", "-", "mg_cur", ".", "int", "(", ")", "//", "mb_cur", ".", "int", "(", ")", ",", "2", ")", ".", "sum", "(", ")", "/", "255.0", "**", "2", "\n", "\n", "# Drg_pre = torch.pow(mr_pre - mg_pre, 2)", "\n", "# Drb_pre = torch.pow(mr_pre - mb_pre, 2)", "\n", "# Dgb = torch.pow(mb_pre - mg_pre, 2)", "\n", "k", "=", "torch", ".", "pow", "(", "Drg", "+", "Drb", "+", "Dgb", ",", "0.5", ")", "\n", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_spa.__init__": [[52, 64], ["torch.Module.__init__", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.FloatTensor().cuda().unsqueeze().unsqueeze", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda().unsqueeze", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L_spa", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(1)kernel = torch.FloatTensor(kernel).unsqueeze(0).unsqueeze(0)", "\n", "kernel_left", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kernel_right", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "-", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kernel_up", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kernel_down", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "weight_left", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_left", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "weight_right", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_right", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "weight_up", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_up", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "weight_down", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_down", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_spa.forward": [[65, 98], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Myloss.L_spa.pool", "Myloss.L_spa.pool", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "org", ",", "enhance", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "org", ".", "shape", "\n", "\n", "org_mean", "=", "torch", ".", "mean", "(", "org", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "enhance_mean", "=", "torch", ".", "mean", "(", "enhance", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "org_pool", "=", "self", ".", "pool", "(", "org_mean", ")", "\n", "enhance_pool", "=", "self", ".", "pool", "(", "enhance_mean", ")", "\n", "\n", "weight_diff", "=", "torch", ".", "max", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", "+", "10000", "*", "torch", ".", "min", "(", "org_pool", "-", "torch", ".", "FloatTensor", "(", "[", "0.3", "]", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", "\n", "E_1", "=", "torch", ".", "mul", "(", "torch", ".", "sign", "(", "enhance_pool", "-", "torch", ".", "FloatTensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", ",", "enhance_pool", "-", "org_pool", ")", "\n", "\n", "D_org_letf", "=", "F", ".", "conv2d", "(", "org_pool", ",", "self", ".", "weight_left", ",", "padding", "=", "1", ")", "\n", "D_org_right", "=", "F", ".", "conv2d", "(", "org_pool", ",", "self", ".", "weight_right", ",", "padding", "=", "1", ")", "\n", "D_org_up", "=", "F", ".", "conv2d", "(", "org_pool", ",", "self", ".", "weight_up", ",", "padding", "=", "1", ")", "\n", "D_org_down", "=", "F", ".", "conv2d", "(", "org_pool", ",", "self", ".", "weight_down", ",", "padding", "=", "1", ")", "\n", "\n", "D_enhance_letf", "=", "F", ".", "conv2d", "(", "enhance_pool", ",", "self", ".", "weight_left", ",", "padding", "=", "1", ")", "\n", "D_enhance_right", "=", "F", ".", "conv2d", "(", "enhance_pool", ",", "self", ".", "weight_right", ",", "padding", "=", "1", ")", "\n", "D_enhance_up", "=", "F", ".", "conv2d", "(", "enhance_pool", ",", "self", ".", "weight_up", ",", "padding", "=", "1", ")", "\n", "D_enhance_down", "=", "F", ".", "conv2d", "(", "enhance_pool", ",", "self", ".", "weight_down", ",", "padding", "=", "1", ")", "\n", "\n", "D_left", "=", "torch", ".", "pow", "(", "D_org_letf", "-", "D_enhance_letf", ",", "2", ")", "\n", "D_right", "=", "torch", ".", "pow", "(", "D_org_right", "-", "D_enhance_right", ",", "2", ")", "\n", "D_up", "=", "torch", ".", "pow", "(", "D_org_up", "-", "D_enhance_up", ",", "2", ")", "\n", "D_down", "=", "torch", ".", "pow", "(", "D_org_down", "-", "D_enhance_down", ",", "2", ")", "\n", "E", "=", "(", "D_left", "+", "D_right", "+", "D_up", "+", "D_down", ")", "\n", "# E = 25*(D_left + D_right + D_up +D_down)", "\n", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_exp.__init__": [[102, 107], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "patch_size", ",", "mean_val", ")", ":", "\n", "        ", "super", "(", "L_exp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(1)", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "patch_size", ")", "\n", "self", ".", "mean_val", "=", "mean_val", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_exp.forward": [[108, 115], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Myloss.L_exp.pool", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "mean", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "d", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "mean", "-", "torch", ".", "FloatTensor", "(", "[", "self", ".", "mean_val", "]", ")", ".", "cuda", "(", ")", ",", "2", ")", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_TV.__init__": [[118, 121], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "TVLoss_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "L_TV", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "TVLoss_weight", "=", "TVLoss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.L_TV.forward": [[122, 131], ["torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "x.size", "x.size", "x.size", "x.size", "x.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "h_x", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "w_x", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "count_h", "=", "(", "x", ".", "size", "(", ")", "[", "2", "]", "-", "1", ")", "*", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "count_w", "=", "x", ".", "size", "(", ")", "[", "2", "]", "*", "(", "x", ".", "size", "(", ")", "[", "3", "]", "-", "1", ")", "\n", "h_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "h_x", "-", "1", ",", ":", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "w_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "-", "1", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "return", "self", ".", "TVLoss_weight", "*", "2", "*", "(", "h_tv", "/", "count_h", "+", "w_tv", "/", "count_w", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.Sa_Loss.__init__": [[134, 136], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Sa_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(1)", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.Sa_Loss.forward": [[138, 153], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# self.grad = np.ones(x.shape,dtype=np.float32)", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# x_de = x.cpu().detach().numpy()", "\n", "r", ",", "g", ",", "b", "=", "torch", ".", "split", "(", "x", ",", "1", ",", "dim", "=", "1", ")", "\n", "mean_rgb", "=", "torch", ".", "mean", "(", "x", ",", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "mr", ",", "mg", ",", "mb", "=", "torch", ".", "split", "(", "mean_rgb", ",", "1", ",", "dim", "=", "1", ")", "\n", "Dr", "=", "r", "-", "mr", "\n", "Dg", "=", "g", "-", "mg", "\n", "Db", "=", "b", "-", "mb", "\n", "k", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "Dr", ",", "2", ")", "+", "torch", ".", "pow", "(", "Db", ",", "2", ")", "+", "torch", ".", "pow", "(", "Dg", ",", "2", ")", ",", "0.5", ")", "\n", "# print(k)", "\n", "\n", "k", "=", "torch", ".", "mean", "(", "k", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.perception_loss.__init__": [[156, 176], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "range", "range", "Myloss.perception_loss.parameters", "torchvision.models.vgg.vgg16", "Myloss.perception_loss.to_relu_1_2.add_module", "Myloss.perception_loss.to_relu_2_2.add_module", "Myloss.perception_loss.to_relu_3_3.add_module", "Myloss.perception_loss.to_relu_4_3.add_module", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "perception_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "vgg16", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "to_relu_1_2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "to_relu_2_2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "to_relu_3_3", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "to_relu_4_3", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "to_relu_1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "to_relu_2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "to_relu_3_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "to_relu_4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "# don't need the gradients, just want the features", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.Myloss.perception_loss.forward": [[177, 188], ["Myloss.perception_loss.to_relu_1_2", "Myloss.perception_loss.to_relu_2_2", "Myloss.perception_loss.to_relu_3_3", "Myloss.perception_loss.to_relu_4_3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "to_relu_1_2", "(", "x", ")", "\n", "h_relu_1_2", "=", "h", "\n", "h", "=", "self", ".", "to_relu_2_2", "(", "h", ")", "\n", "h_relu_2_2", "=", "h", "\n", "h", "=", "self", ".", "to_relu_3_3", "(", "h", ")", "\n", "h_relu_3_3", "=", "h", "\n", "h", "=", "self", ".", "to_relu_4_3", "(", "h", ")", "\n", "h_relu_4_3", "=", "h", "\n", "# out = (h_relu_1_2, h_relu_2_2, h_relu_3_3, h_relu_4_3)", "\n", "return", "h_relu_4_3", "", "", "", ""]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.functions.UpSampleFeaturesFunction.forward": [[63, 83], ["input.size", "input.type", "torch.zeros().type", "range", "torch.zeros"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "\t\t", "N", ",", "Cin", ",", "Hin", ",", "Win", "=", "input", ".", "size", "(", ")", "\n", "dtype", "=", "input", ".", "type", "(", ")", "\n", "sca", "=", "2", "\n", "sca2", "=", "sca", "*", "sca", "\n", "Cout", "=", "Cin", "//", "sca2", "\n", "Hout", "=", "Hin", "*", "sca", "\n", "Wout", "=", "Win", "*", "sca", "\n", "idxL", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "1", "]", "]", "\n", "\n", "assert", "(", "Cin", "%", "sca2", "==", "0", ")", ",", "'Invalid input dimensions: number of channels should be divisible by 4'", "\n", "\n", "result", "=", "torch", ".", "zeros", "(", "(", "N", ",", "Cout", ",", "Hout", ",", "Wout", ")", ")", ".", "type", "(", "dtype", ")", "\n", "for", "idx", "in", "range", "(", "sca2", ")", ":", "\n", "\t\t\t", "result", "[", ":", ",", ":", ",", "idxL", "[", "idx", "]", "[", "0", "]", ":", ":", "sca", ",", "idxL", "[", "idx", "]", "[", "1", "]", ":", ":", "sca", "]", "=", "input", "[", ":", ",", "idx", ":", "Cin", ":", "sca2", ",", ":", ",", ":", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.functions.UpSampleFeaturesFunction.backward": [[84, 103], ["grad_output.size", "grad_output.data.type", "torch.zeros().type", "range", "torch.autograd.Variable", "torch.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\t\t", "N", ",", "Cg_out", ",", "Hg_out", ",", "Wg_out", "=", "grad_output", ".", "size", "(", ")", "\n", "dtype", "=", "grad_output", ".", "data", ".", "type", "(", ")", "\n", "sca", "=", "2", "\n", "sca2", "=", "sca", "*", "sca", "\n", "Cg_in", "=", "sca2", "*", "Cg_out", "\n", "Hg_in", "=", "Hg_out", "//", "sca", "\n", "Wg_in", "=", "Wg_out", "//", "sca", "\n", "idxL", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "1", "]", "]", "\n", "\n", "# Build output", "\n", "grad_input", "=", "torch", ".", "zeros", "(", "(", "N", ",", "Cg_in", ",", "Hg_in", ",", "Wg_in", ")", ")", ".", "type", "(", "dtype", ")", "\n", "# Populate output", "\n", "for", "idx", "in", "range", "(", "sca2", ")", ":", "\n", "\t\t\t", "grad_input", "[", ":", ",", "idx", ":", "Cg_in", ":", "sca2", ",", ":", ",", ":", "]", "=", "grad_output", ".", "data", "[", ":", ",", ":", ",", "idxL", "[", "idx", "]", "[", "0", "]", ":", ":", "sca", ",", "idxL", "[", "idx", "]", "[", "1", "]", ":", ":", "sca", "]", "\n", "\n", "", "return", "Variable", "(", "grad_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.functions.concatenate_input_noise_map": [[16, 55], ["input.size", "input.type", "noise_sigma.view", "range", "torch.cat", "torch.cuda.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.cuda.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["def", "concatenate_input_noise_map", "(", "input", ",", "noise_sigma", ")", ":", "\n", "\t", "r\"\"\"Implements the first layer of FFDNet. This function returns a\n\ttorch.autograd.Variable composed of the concatenation of the downsampled\n\tinput image and the noise map. Each image of the batch of size CxHxW gets\n\tconverted to an array of size 4*CxH/2xW/2. Each of the pixels of the\n\tnon-overlapped 2x2 patches of the input image are placed in the new array\n\talong the first dimension.\n\n\tArgs:\n\t\tinput: batch containing CxHxW images\n\t\tnoise_sigma: the value of the pixels of the CxH/2xW/2 noise map\n\t\"\"\"", "\n", "# noise_sigma is a list of length batch_size", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "input", ".", "size", "(", ")", "\n", "dtype", "=", "input", ".", "type", "(", ")", "\n", "sca", "=", "2", "\n", "sca2", "=", "sca", "*", "sca", "\n", "Cout", "=", "sca2", "*", "C", "\n", "Hout", "=", "H", "//", "sca", "\n", "Wout", "=", "W", "//", "sca", "\n", "idxL", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "1", "]", "]", "\n", "\n", "# Fill the downsampled image with zeros", "\n", "if", "'cuda'", "in", "dtype", ":", "\n", "\t\t", "downsampledfeatures", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "N", ",", "Cout", ",", "Hout", ",", "Wout", ")", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "\t\t", "downsampledfeatures", "=", "torch", ".", "FloatTensor", "(", "N", ",", "Cout", ",", "Hout", ",", "Wout", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "# Build the CxH/2xW/2 noise map", "\n", "", "noise_map", "=", "noise_sigma", ".", "view", "(", "N", ",", "C", ",", "Hout", ",", "Wout", ")", "\n", "# noise_map = noise_sigma.view(N, 1, 1, 1).repeat(1, C, Hout, Wout)", "\n", "\n", "# Populate output", "\n", "for", "idx", "in", "range", "(", "sca2", ")", ":", "\n", "\t\t", "downsampledfeatures", "[", ":", ",", "idx", ":", "Cout", ":", "sca2", ",", ":", ",", ":", "]", "=", "input", "[", ":", ",", ":", ",", "idxL", "[", "idx", "]", "[", "0", "]", ":", ":", "sca", ",", "idxL", "[", "idx", "]", "[", "1", "]", ":", ":", "sca", "]", "\n", "\n", "# concatenate de-interleaved mosaic with noise map", "\n", "", "return", "torch", ".", "cat", "(", "(", "noise_map", ",", "downsampledfeatures", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.test.test": [[42, 79], ["mini_batch_loader.MiniBatchLoader.count_paths", "State_de.State_de", "range", "print", "fout.write", "sys.stdout.flush", "loader1.load_testing_data", "loader2.load_testing_data", "State_de.State_de.reset", "range", "agent_de.stop_episode", "np.maximum", "np.minimum", "np.maximum", "np.minimum", "cv2.PSNR", "np.squeeze", "np.transpose", "cv2.imwrite", "np.array", "np.array", "np.zeros", "State_de.State_de.image.copy", "agent_el.act", "State_de.State_de.step_el", "range", "range", "agent_de.act", "State_de.State_de.step_de", "np.mean", "np.power", "np.square", "np.square", "str"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.count_paths", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_testing_data", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.mini_batch_loader.MiniBatchLoader.load_testing_data", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.reset", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_el", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.State_de.State_de.step_de"], ["def", "test", "(", "loader1", ",", "loader2", ",", "agent_el", ",", "agent_de", ",", "fout", ",", "model", ")", ":", "\n", "    ", "sum_psnr", "=", "0", "\n", "sum_reward", "=", "0", "\n", "test_data_size", "=", "MiniBatchLoader", ".", "count_paths", "(", "TESTING_DATA_PATH", ")", "\n", "current_state", "=", "State_de", ".", "State_de", "(", "(", "TEST_BATCH_SIZE", ",", "1", ",", "CROP_SIZE", ",", "CROP_SIZE", ")", ",", "MOVE_RANGE", ",", "model", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "test_data_size", ",", "TEST_BATCH_SIZE", ")", ":", "\n", "        ", "raw_x", "=", "loader1", ".", "load_testing_data", "(", "np", ".", "array", "(", "range", "(", "i", ",", "i", "+", "TEST_BATCH_SIZE", ")", ")", ")", "\n", "label", "=", "loader2", ".", "load_testing_data", "(", "np", ".", "array", "(", "range", "(", "i", ",", "i", "+", "TEST_BATCH_SIZE", ")", ")", ")", "\n", "#raw_n = np.random.normal(MEAN,SIGMA,raw_x.shape).astype(raw_x.dtype)/255", "\n", "current_state", ".", "reset", "(", "raw_x", ")", "\n", "reward", "=", "np", ".", "zeros", "(", "raw_x", ".", "shape", ",", "raw_x", ".", "dtype", ")", "*", "255", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "EPISODE_LEN", ")", ":", "\n", "            ", "previous_image", "=", "current_state", ".", "image", ".", "copy", "(", ")", "\n", "action_el", "=", "agent_el", ".", "act", "(", "current_state", ".", "image", ")", "\n", "current_state", ".", "step_el", "(", "action_el", ")", "\n", "if", "t", ">", "4", ":", "\n", "                ", "action_de", "=", "agent_de", ".", "act", "(", "current_state", ".", "image", ")", "\n", "current_state", ".", "step_de", "(", "action_de", ")", "\n", "", "reward", "=", "np", ".", "square", "(", "label", "-", "previous_image", ")", "*", "255", "-", "np", ".", "square", "(", "label", "-", "current_state", ".", "image", ")", "*", "255", "\n", "sum_reward", "+=", "np", ".", "mean", "(", "reward", ")", "*", "np", ".", "power", "(", "GAMMA", ",", "t", ")", "\n", "\n", "", "agent_de", ".", "stop_episode", "(", ")", "\n", "\n", "I", "=", "np", ".", "maximum", "(", "0", ",", "label", ")", "\n", "I", "=", "np", ".", "minimum", "(", "1", ",", "I", ")", "\n", "p", "=", "np", ".", "maximum", "(", "0", ",", "current_state", ".", "image", ")", "\n", "p", "=", "np", ".", "minimum", "(", "1", ",", "p", ")", "\n", "I", "=", "(", "I", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "p", "=", "(", "p", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "sum_psnr", "+=", "cv2", ".", "PSNR", "(", "p", ",", "I", ")", "\n", "p", "=", "np", ".", "squeeze", "(", "p", ",", "axis", "=", "0", ")", "\n", "p", "=", "np", ".", "transpose", "(", "p", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'./result_ex2/'", "+", "str", "(", "i", ")", "+", "'_output.png'", ",", "p", ")", "\n", "", "print", "(", "\"test total reward {a}, PSNR {b}\"", ".", "format", "(", "a", "=", "sum_reward", "*", "255", "/", "test_data_size", ",", "b", "=", "sum_psnr", "/", "test_data_size", ")", ")", "\n", "fout", ".", "write", "(", "\"test total reward {a}, PSNR {b}\\n\"", ".", "format", "(", "a", "=", "sum_reward", "*", "255", "/", "test_data_size", ",", "b", "=", "sum_psnr", "/", "test_data_size", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.test.main": [[81, 142], ["mini_batch_loader.MiniBatchLoader", "mini_batch_loader.MiniBatchLoader", "pixelwise_a3c_el.chainer.cuda.get_device_from_id().use", "os.path.join", "print", "models.FFDNet", "torch.load", "torch.load", "torch.DataParallel().cuda", "nn.DataParallel().cuda.load_state_dict", "nn.DataParallel().cuda.eval", "State_de.State_de", "MyFCN_el.MyFcn", "pixelwise_a3c_el.chainer.optimizers.Adam", "pixelwise_a3c_el.chainer.optimizers.Adam.setup", "pixelwise_a3c_el.PixelWiseA3C", "pixelwise_a3c_el.chainer.serializers.load_npz", "pixelwise_a3c_el.PixelWiseA3C.model.to_gpu", "MyFCN_de.MyFcn_denoise", "pixelwise_a3c_de.chainer.optimizers.Adam", "pixelwise_a3c_de.chainer.optimizers.Adam.setup", "pixelwise_a3c_de.PixelWiseA3C", "pixelwise_a3c_de.chainer.serializers.load_npz", "pixelwise_a3c_de.PixelWiseA3C.model.to_gpu", "test.test", "os.path.abspath", "pixelwise_a3c_el.chainer.cuda.get_device_from_id", "os.path.dirname", "torch.DataParallel"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.load", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.load", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.test.test"], ["", "def", "main", "(", "fout", ")", ":", "\n", "#_/_/_/ load dataset _/_/_/", "\n", "    ", "mini_batch_loader", "=", "MiniBatchLoader", "(", "\n", "TRAINING_DATA_PATH", ",", "\n", "TRAINING_DATA_PATH", ",", "\n", "IMAGE_DIR_PATH", ",", "\n", "CROP_SIZE", ")", "\n", "mini_batch_loader_label", "=", "MiniBatchLoader", "(", "\n", "label_DATA_PATH", ",", "\n", "label_DATA_PATH", ",", "\n", "IMAGE_DIR_PATH", ",", "\n", "CROP_SIZE", ")", "\n", "\n", "pixelwise_a3c_el", ".", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "GPU_ID", ")", ".", "use", "(", ")", "\n", "\n", "# load ffdnet", "\n", "in_ch", "=", "3", "\n", "model_fn", "=", "'FFDNet_models/net_rgb.pth'", "\n", "# Absolute path to model file", "\n", "model_fn", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ",", "model_fn", ")", "\n", "# Create model", "\n", "print", "(", "'Loading model ...\\n'", ")", "\n", "net", "=", "FFDNet", "(", "num_input_channels", "=", "in_ch", ")", "\n", "\n", "# Load saved weights", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_fn", ")", "\n", "device_ids", "=", "[", "GPU_ID", "]", "\n", "model", "=", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "device_ids", ")", ".", "cuda", "(", ")", "\n", "# model = net.cuda()", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "current_state", "=", "State_de", ".", "State_de", "(", "(", "TRAIN_BATCH_SIZE", ",", "1", ",", "CROP_SIZE", ",", "CROP_SIZE", ")", ",", "MOVE_RANGE", ",", "model", ")", "\n", "\n", "# load myfcn model", "\n", "model_el", "=", "MyFCN_el", ".", "MyFcn", "(", "N_ACTIONS", ")", "\n", "\n", "# _/_/_/ setup _/_/_/", "\n", "optimizer_el", "=", "pixelwise_a3c_el", ".", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "LEARNING_RATE", ")", "\n", "optimizer_el", ".", "setup", "(", "model_el", ")", "\n", "\n", "agent_el", "=", "pixelwise_a3c_el", ".", "PixelWiseA3C", "(", "model_el", ",", "optimizer_el", ",", "EPISODE_LEN", ",", "GAMMA", ")", "\n", "pixelwise_a3c_el", ".", "chainer", ".", "serializers", ".", "load_npz", "(", "'./pretrained/model.npz'", ",", "agent_el", ".", "model", ")", "\n", "agent_el", ".", "act_deterministically", "=", "True", "\n", "agent_el", ".", "model", ".", "to_gpu", "(", ")", "\n", "\n", "# load myfcn model for denoising", "\n", "model_de", "=", "MyFCN_de", ".", "MyFcn_denoise", "(", "2", ")", "\n", "\n", "# _/_/_/ setup _/_/_/", "\n", "\n", "optimizer_de", "=", "pixelwise_a3c_de", ".", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "LEARNING_RATE", ")", "\n", "optimizer_de", ".", "setup", "(", "model_de", ")", "\n", "\n", "agent_de", "=", "pixelwise_a3c_de", ".", "PixelWiseA3C", "(", "model_de", ",", "optimizer_de", ",", "EPISODE_LEN", ",", "GAMMA", ")", "\n", "pixelwise_a3c_de", ".", "chainer", ".", "serializers", ".", "load_npz", "(", "'./pretrained/init_denoising.npz'", ",", "agent_de", ".", "model", ")", "\n", "agent_de", ".", "act_deterministically", "=", "True", "\n", "agent_de", ".", "model", ".", "to_gpu", "(", ")", "\n", "\n", "test", "(", "mini_batch_loader", ",", "mini_batch_loader_label", ",", "agent_el", ",", "agent_de", ",", "fout", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_de.DilatedConvBlock.__init__": [[14, 21], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.DilatedConvolution2D", "chainer.DilatedConvolution2D", "chainer.DilatedConvolution2D"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_factor", ")", ":", "\n", "        ", "super", "(", "DilatedConvBlock", ",", "self", ")", ".", "__init__", "(", "\n", "diconv", "=", "L", ".", "DilatedConvolution2D", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "d_factor", ",", "dilate", "=", "d_factor", ",", "nobias", "=", "False", ")", ",", "\n", "#bn=L.BatchNormalization(64)", "\n", ")", "\n", "\n", "self", ".", "train", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_de.DilatedConvBlock.__call__": [[22, 26], ["chainer.relu", "chainer.relu", "chainer.relu", "MyFCN_de.DilatedConvBlock.diconv"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "diconv", "(", "x", ")", ")", "\n", "#h = F.relu(self.bn(self.diconv(x)))", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_de.MyFcn_denoise.__init__": [[30, 46], ["chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "MyFCN_de.DilatedConvBlock", "MyFCN_de.DilatedConvBlock", "MyFCN_de.DilatedConvBlock", "MyFCN_de.DilatedConvBlock", "MyFCN_de.DilatedConvBlock", "chainerrl.policies.SoftmaxPolicy", "MyFCN_de.DilatedConvBlock", "MyFCN_de.DilatedConvBlock", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_actions", ")", ":", "\n", "        ", "w", "=", "chainer", ".", "initializers", ".", "HeNormal", "(", ")", "\n", "#net = CaffeFunction('../initial_weight/zhang_cvpr17_denoise_15_gray.caffemodel')", "\n", "super", "(", "MyFcn_denoise", ",", "self", ")", ".", "__init__", "(", "\n", "conv1", "=", "L", ".", "Convolution2D", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ",", "\n", "diconv2", "=", "DilatedConvBlock", "(", "2", ")", ",", "\n", "diconv3", "=", "DilatedConvBlock", "(", "3", ")", ",", "\n", "diconv4", "=", "DilatedConvBlock", "(", "4", ")", ",", "\n", "diconv5_pi", "=", "DilatedConvBlock", "(", "3", ")", ",", "\n", "diconv6_pi", "=", "DilatedConvBlock", "(", "2", ")", ",", "\n", "conv7_pi", "=", "chainerrl", ".", "policies", ".", "SoftmaxPolicy", "(", "L", ".", "Convolution2D", "(", "64", ",", "n_actions", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ")", ",", "\n", "diconv5_V", "=", "DilatedConvBlock", "(", "3", ")", ",", "\n", "diconv6_V", "=", "DilatedConvBlock", "(", "2", ")", ",", "\n", "conv7_V", "=", "L", ".", "Convolution2D", "(", "64", ",", "1", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "train", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_de.MyFcn_denoise.pi_and_v": [[47, 61], ["chainer.relu", "chainer.relu", "chainer.relu", "MyFCN_de.MyFcn_denoise.diconv2", "MyFCN_de.MyFcn_denoise.diconv3", "MyFCN_de.MyFcn_denoise.diconv4", "MyFCN_de.MyFcn_denoise.diconv5_pi", "MyFCN_de.MyFcn_denoise.diconv6_pi", "MyFCN_de.MyFcn_denoise.conv7_pi", "MyFCN_de.MyFcn_denoise.diconv5_V", "MyFCN_de.MyFcn_denoise.diconv6_V", "MyFCN_de.MyFcn_denoise.conv7_V", "MyFCN_de.MyFcn_denoise.conv1"], "methods", ["None"], ["", "def", "pi_and_v", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "diconv2", "(", "h", ")", "\n", "h", "=", "self", ".", "diconv3", "(", "h", ")", "\n", "h", "=", "self", ".", "diconv4", "(", "h", ")", "\n", "h_pi", "=", "self", ".", "diconv5_pi", "(", "h", ")", "\n", "h_pi", "=", "self", ".", "diconv6_pi", "(", "h_pi", ")", "\n", "de", "=", "self", ".", "conv7_pi", "(", "h_pi", ")", "\n", "#pout = np.concatenate((pout_r,pout_g,pout_b), axis=1)", "\n", "h_V", "=", "self", ".", "diconv5_V", "(", "h", ")", "\n", "h_V", "=", "self", ".", "diconv6_V", "(", "h_V", ")", "\n", "vout", "=", "self", ".", "conv7_V", "(", "h_V", ")", "\n", "\n", "return", "de", ",", "vout", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.__init__": [[75, 130], ["isinstance", "copy.deepcopy", "chainerrl.misc.async_.assert_params_not_shared", "pixelwise_a3c_el.PixelWiseA3C.shared_model.to_gpu"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "optimizer", ",", "t_max", ",", "gamma", ",", "beta", "=", "1e-2", ",", "\n", "process_idx", "=", "0", ",", "phi", "=", "lambda", "x", ":", "x", ",", "\n", "pi_loss_coef", "=", "1.0", ",", "v_loss_coef", "=", "0.5", ",", "\n", "keep_loss_scale_same", "=", "False", ",", "\n", "normalize_grad_by_t_max", "=", "False", ",", "\n", "use_average_reward", "=", "False", ",", "average_reward_tau", "=", "1e-2", ",", "\n", "act_deterministically", "=", "False", ",", "\n", "average_entropy_decay", "=", "0.999", ",", "\n", "average_value_decay", "=", "0.999", ",", "\n", "batch_states", "=", "batch_states", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "model", ",", "A3CModel", ")", "\n", "# Globally shared model", "\n", "self", ".", "shared_model", "=", "model", "\n", "\n", "# Thread specific model", "\n", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "shared_model", ")", "\n", "async_", ".", "assert_params_not_shared", "(", "self", ".", "shared_model", ",", "self", ".", "model", ")", "\n", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "t_max", "=", "t_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "phi", "=", "phi", "\n", "self", ".", "pi_loss_coef", "=", "pi_loss_coef", "\n", "self", ".", "v_loss_coef", "=", "v_loss_coef", "\n", "self", ".", "keep_loss_scale_same", "=", "keep_loss_scale_same", "\n", "self", ".", "normalize_grad_by_t_max", "=", "normalize_grad_by_t_max", "\n", "self", ".", "use_average_reward", "=", "use_average_reward", "\n", "self", ".", "average_reward_tau", "=", "average_reward_tau", "\n", "self", ".", "act_deterministically", "=", "act_deterministically", "\n", "self", ".", "average_value_decay", "=", "average_value_decay", "\n", "self", ".", "average_entropy_decay", "=", "average_entropy_decay", "\n", "self", ".", "batch_states", "=", "batch_states", "\n", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "t_start", "=", "0", "\n", "self", ".", "past_action_log_prob", "=", "{", "}", "\n", "self", ".", "past_action_entropy", "=", "{", "}", "\n", "self", ".", "past_states", "=", "{", "}", "\n", "self", ".", "past_rewards", "=", "{", "}", "\n", "self", ".", "past_values", "=", "{", "}", "\n", "self", ".", "average_reward", "=", "0", "\n", "# A3C won't use a explorer, but this arrtibute is referenced by run_dqn", "\n", "self", ".", "explorer", "=", "None", "\n", "\n", "# Stats", "\n", "self", ".", "average_value", "=", "0", "\n", "self", ".", "average_entropy", "=", "0", "\n", "\n", "#######################", "\n", "self", ".", "shared_model", ".", "to_gpu", "(", ")", "\n", "chainerrl", ".", "distribution", ".", "CategoricalDistribution", ".", "mylog_prob", "=", "mylog_prob", "\n", "chainerrl", ".", "distribution", ".", "CategoricalDistribution", ".", "myentropy", "=", "myentropy", "\n", "#######################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.sync_parameters": [[132, 135], ["chainerrl.misc.copy_param.copy_param"], "methods", ["None"], ["", "def", "sync_parameters", "(", "self", ")", ":", "\n", "        ", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "model", ",", "\n", "source_link", "=", "self", ".", "shared_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.shared_attributes": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shared_attributes", "(", "self", ")", ":", "\n", "        ", "return", "(", "'shared_model'", ",", "'optimizer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update": [[140, 231], ["reversed", "chainer.functions.mean", "pixelwise_a3c_el.PixelWiseA3C.model.cleargrads", "chainer.functions.mean.backward", "pixelwise_a3c_el.PixelWiseA3C.shared_model.cleargrads", "chainerrl.misc.copy_param.copy_grad", "pixelwise_a3c_el.PixelWiseA3C.optimizer.update", "pixelwise_a3c_el.PixelWiseA3C.sync_parameters", "isinstance", "chainer.functions.cast", "range", "logger.debug", "sum", "logger.debug", "logger.debug", "pixelwise_a3c_el.PixelWiseA3C.model.unchain_backward", "chainerrl.recurrent.state_kept", "pixelwise_a3c_el.PixelWiseA3C.model.pi_and_v", "chainer.functions.cast", "chainer.functions.reshape", "float", "numpy.sum", "numpy.square", "pixelwise_a3c_el.PixelWiseA3C.optimizer.target.params"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.functions.UpSampleFeaturesFunction.backward", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.sync_parameters", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.pi_and_v"], ["", "def", "update", "(", "self", ",", "statevar", ")", ":", "\n", "        ", "assert", "self", ".", "t_start", "<", "self", ".", "t", "\n", "\n", "if", "statevar", "is", "None", ":", "\n", "            ", "R", "=", "0", "\n", "", "else", ":", "\n", "            ", "with", "state_kept", "(", "self", ".", "model", ")", ":", "\n", "                ", "_", ",", "vout", "=", "self", ".", "model", ".", "pi_and_v", "(", "statevar", ")", "\n", "#######################", "\n", "", "R", "=", "F", ".", "cast", "(", "vout", ".", "data", ",", "'float32'", ")", "\n", "#R = float(vout.data)", "\n", "#######################", "\n", "\n", "", "pi_loss", "=", "0", "\n", "v_loss", "=", "0", "\n", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "t_start", ",", "self", ".", "t", ")", ")", ":", "\n", "            ", "R", "*=", "self", ".", "gamma", "\n", "R", "+=", "self", ".", "past_rewards", "[", "i", "]", "\n", "if", "self", ".", "use_average_reward", ":", "\n", "                ", "R", "-=", "self", ".", "average_reward", "\n", "", "v", "=", "self", ".", "past_values", "[", "i", "]", "\n", "advantage", "=", "R", "-", "v", "\n", "if", "self", ".", "use_average_reward", ":", "\n", "                ", "self", ".", "average_reward", "+=", "self", ".", "average_reward_tau", "*", "float", "(", "advantage", ".", "data", ")", "\n", "# Accumulate gradients of policy", "\n", "", "log_prob", "=", "self", ".", "past_action_log_prob", "[", "i", "]", "\n", "entropy", "=", "self", ".", "past_action_entropy", "[", "i", "]", "\n", "\n", "# Log probability is increased proportionally to advantage", "\n", "##############################", "\n", "pi_loss", "-=", "log_prob", "*", "F", ".", "cast", "(", "advantage", ".", "data", ",", "'float32'", ")", "\n", "#pi_loss -= log_prob * float(advantage.data)", "\n", "##############################", "\n", "# Entropy is maximized", "\n", "pi_loss", "-=", "self", ".", "beta", "*", "entropy", "\n", "# Accumulate gradients of value function", "\n", "v_loss", "+=", "(", "v", "-", "R", ")", "**", "2", "/", "2", "\n", "\n", "", "if", "self", ".", "pi_loss_coef", "!=", "1.0", ":", "\n", "            ", "pi_loss", "*=", "self", ".", "pi_loss_coef", "\n", "\n", "", "if", "self", ".", "v_loss_coef", "!=", "1.0", ":", "\n", "            ", "v_loss", "*=", "self", ".", "v_loss_coef", "\n", "\n", "# Normalize the loss of sequences truncated by terminal states", "\n", "", "if", "self", ".", "keep_loss_scale_same", "and", "self", ".", "t", "-", "self", ".", "t_start", "<", "self", ".", "t_max", ":", "\n", "            ", "factor", "=", "self", ".", "t_max", "/", "(", "self", ".", "t", "-", "self", ".", "t_start", ")", "\n", "pi_loss", "*=", "factor", "\n", "v_loss", "*=", "factor", "\n", "\n", "", "if", "self", ".", "normalize_grad_by_t_max", ":", "\n", "            ", "pi_loss", "/=", "self", ".", "t", "-", "self", ".", "t_start", "\n", "v_loss", "/=", "self", ".", "t", "-", "self", ".", "t_start", "\n", "\n", "", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "'pi_loss:%s v_loss:%s'", ",", "pi_loss", ".", "data", ",", "v_loss", ".", "data", ")", "\n", "\n", "##########################", "\n", "#total_loss = pi_loss + F.reshape(v_loss, pi_loss.data.shape)", "\n", "", "total_loss", "=", "F", ".", "mean", "(", "pi_loss", "+", "F", ".", "reshape", "(", "v_loss", ",", "pi_loss", ".", "data", ".", "shape", ")", ")", "\n", "##########################", "\n", "\n", "# Compute gradients using thread-specific model", "\n", "self", ".", "model", ".", "cleargrads", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "# Copy the gradients to the globally shared model", "\n", "self", ".", "shared_model", ".", "cleargrads", "(", ")", "\n", "copy_param", ".", "copy_grad", "(", "\n", "target_link", "=", "self", ".", "shared_model", ",", "source_link", "=", "self", ".", "model", ")", "\n", "# Update the globally shared model", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "norm", "=", "sum", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "param", ".", "grad", ")", ")", "\n", "for", "param", "in", "self", ".", "optimizer", ".", "target", ".", "params", "(", ")", ")", "\n", "logger", ".", "debug", "(", "'grad norm:%s'", ",", "norm", ")", "\n", "", "self", ".", "optimizer", ".", "update", "(", ")", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "'update'", ")", "\n", "\n", "", "self", ".", "sync_parameters", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "Recurrent", ")", ":", "\n", "            ", "self", ".", "model", ".", "unchain_backward", "(", ")", "\n", "\n", "", "self", ".", "past_action_log_prob", "=", "{", "}", "\n", "self", ".", "past_action_entropy", "=", "{", "}", "\n", "self", ".", "past_states", "=", "{", "}", "\n", "self", ".", "past_rewards", "=", "{", "}", "\n", "self", ".", "past_values", "=", "{", "}", "\n", "\n", "self", ".", "t_start", "=", "self", ".", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act_and_train": [[232, 278], ["chainer.cuda.to_gpu", "chainer.cuda.to_gpu", "pixelwise_a3c_el.PixelWiseA3C.model.pi_and_v", "numpy.concatenate", "chainer.cuda.to_cpu", "pixelwise_a3c_el.PixelWiseA3C.update", "pout_r.sample", "pout_g.sample", "pout_r.sample", "pout_b.mylog_prob", "logger.debug", "pout_r.mylog_prob", "pout_g.mylog_prob"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.pi_and_v", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.mylog_prob", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.mylog_prob", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.mylog_prob"], ["", "def", "act_and_train", "(", "self", ",", "state", ",", "reward", ")", ":", "\n", "#########################", "\n", "#statevar = self.batch_states([state], np, self.phi)", "\n", "        ", "statevar", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "state", ")", "\n", "\n", "#self.past_rewards[self.t - 1] = reward", "\n", "self", ".", "past_rewards", "[", "self", ".", "t", "-", "1", "]", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "reward", ")", "\n", "##########################", "\n", "\n", "if", "self", ".", "t", "-", "self", ".", "t_start", "==", "self", ".", "t_max", ":", "\n", "            ", "self", ".", "update", "(", "statevar", ")", "\n", "\n", "", "self", ".", "past_states", "[", "self", ".", "t", "]", "=", "statevar", "\n", "pout_r", ",", "pout_g", ",", "pout_b", ",", "vout", "=", "self", ".", "model", ".", "pi_and_v", "(", "statevar", ")", "\n", "action_r", "=", "pout_r", ".", "sample", "(", ")", ".", "data", "\n", "action_g", "=", "pout_g", ".", "sample", "(", ")", ".", "data", "\n", "action_b", "=", "pout_r", ".", "sample", "(", ")", ".", "data", "\n", "action", "=", "np", ".", "concatenate", "(", "(", "action_r", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "action_g", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "action_b", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "# Do not backprop through sampled actions", "\n", "###############################", "\n", "#self.past_action_log_prob[self.t] = pout.log_prob(action)", "\n", "self", ".", "past_action_log_prob", "[", "self", ".", "t", "]", "=", "pout_r", ".", "mylog_prob", "(", "action_r", ")", "+", "pout_g", ".", "mylog_prob", "(", "action_g", ")", "+", "pout_b", ".", "mylog_prob", "(", "action_b", ")", "\n", "#self.past_action_entropy[self.t] = pout.entropy", "\n", "self", ".", "past_action_entropy", "[", "self", ".", "t", "]", "=", "pout_r", ".", "myentropy", "+", "pout_g", ".", "myentropy", "+", "pout_b", ".", "myentropy", "\n", "#################################", "\n", "self", ".", "past_values", "[", "self", ".", "t", "]", "=", "vout", "\n", "self", ".", "t", "+=", "1", "\n", "#################################", "\n", "#action = action[0]", "\n", "#################################", "\n", "if", "self", ".", "process_idx", "==", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "'t:%s r:%s a:%s pout_r:%s pout_g:%s pout_b:%s'", ",", "\n", "self", ".", "t", ",", "reward", ",", "action", ",", "pout_r", ",", "pout_g", ",", "pout_b", ")", "\n", "# Update stats", "\n", "#self.average_value += (", "\n", "#    (1 - self.average_value_decay) *", "\n", "#    (F.cast(vout.data, 'float32') - self.average_value))", "\n", "#############################", "\n", "#(float(vout.data[0]) - self.average_value))", "\n", "#############################", "\n", "#self.average_entropy += (", "\n", "#    (1 - self.average_entropy_decay) *", "\n", "#    (F.cast(pout.entropy.data, 'float32') - self.average_entropy))", "\n", "#############################", "\n", "#(float(pout.entropy.data[0]) - self.average_entropy))", "\n", "#return action", "\n", "", "return", "chainer", ".", "cuda", ".", "to_cpu", "(", "action", ")", "\n", "#############################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.act": [[280, 299], ["chainer.no_backprop_mode", "chainer.cuda.to_gpu", "pixelwise_a3c_el.PixelWiseA3C.model.pi_and_v", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "numpy.concatenate", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "numpy.concatenate", "pout_r.sample", "pout_g.sample", "pout_b.sample"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.pi_and_v"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "# Use the process-local model for acting", "\n", "        ", "with", "chainer", ".", "no_backprop_mode", "(", ")", ":", "\n", "#########################", "\n", "#statevar = self.batch_states([obs], np, self.phi)", "\n", "            ", "statevar", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "obs", ")", "\n", "pout_r", ",", "pout_g", ",", "pout_b", ",", "_", "=", "self", ".", "model", ".", "pi_and_v", "(", "statevar", ")", "\n", "if", "self", ".", "act_deterministically", ":", "\n", "#return pout.most_probable.data[0]", "\n", "                ", "a_r", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "pout_r", ".", "most_probable", ".", "data", ")", "\n", "a_g", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "pout_g", ".", "most_probable", ".", "data", ")", "\n", "a_b", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "pout_b", ".", "most_probable", ".", "data", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "a_r", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "a_g", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "a_b", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "#return pout.sample().data[0]", "\n", "                ", "a_r", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "pout_r", ".", "sample", "(", ")", ".", "data", ")", "\n", "a_g", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "pout_g", ".", "sample", "(", ")", ".", "data", ")", "\n", "a_b", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "pout_b", ".", "sample", "(", ")", ".", "data", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "a_r", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "a_g", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "a_b", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "#########################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode_and_train": [[301, 315], ["chainer.cuda.to_gpu", "isinstance", "pixelwise_a3c_el.PixelWiseA3C.update", "chainer.cuda.to_gpu", "pixelwise_a3c_el.PixelWiseA3C.update", "pixelwise_a3c_el.PixelWiseA3C.model.reset_state"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.update"], ["", "", "", "def", "stop_episode_and_train", "(", "self", ",", "state", ",", "reward", ",", "done", "=", "False", ")", ":", "\n", "#########################", "\n", "#self.past_rewards[self.t - 1] = reward", "\n", "        ", "self", ".", "past_rewards", "[", "self", ".", "t", "-", "1", "]", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "reward", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "update", "(", "None", ")", "\n", "", "else", ":", "\n", "#statevar = self.batch_states([state], np, self.phi)", "\n", "            ", "statevar", "=", "chainer", ".", "cuda", ".", "to_gpu", "(", "state", ")", "\n", "########################", "\n", "self", ".", "update", "(", "statevar", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "Recurrent", ")", ":", "\n", "            ", "self", ".", "model", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.stop_episode": [[316, 319], ["isinstance", "pixelwise_a3c_el.PixelWiseA3C.model.reset_state"], "methods", ["None"], ["", "", "def", "stop_episode", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "model", ",", "Recurrent", ")", ":", "\n", "            ", "self", ".", "model", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.load": [[320, 324], ["super().load", "chainerrl.misc.copy_param.copy_param"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.load"], ["", "", "def", "load", "(", "self", ",", "dirname", ")", ":", "\n", "        ", "super", "(", ")", ".", "load", "(", "dirname", ")", "\n", "copy_param", ".", "copy_param", "(", "target_link", "=", "self", ".", "shared_model", ",", "\n", "source_link", "=", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.PixelWiseA3C.get_statistics": [[325, 329], ["None"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "'average_value'", ",", "self", ".", "average_value", ")", ",", "\n", "(", "'average_entropy'", ",", "self", ".", "average_entropy", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.myentropy": [[32, 36], ["chainer.force_backprop_mode", "chainer.functions.stack", "chainer.functions.sum"], "function", ["None"], ["@", "cached_property", "\n", "def", "myentropy", "(", "self", ")", ":", "\n", "    ", "with", "chainer", ".", "force_backprop_mode", "(", ")", ":", "\n", "        ", "return", "F", ".", "stack", "(", "[", "-", "F", ".", "sum", "(", "self", ".", "all_prob", "*", "self", ".", "all_log_prob", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", "\n", "#######################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.pixelwise_a3c_el.mylog_prob": [[39, 46], ["chainer.functions.transpose", "chainer.functions.reshape", "chainer.functions.select_item", "chainer.functions.reshape", "chainer.functions.reshape"], "function", ["None"], ["", "", "def", "mylog_prob", "(", "self", ",", "x", ")", ":", "\n", "    ", "n_batch", ",", "n_actions", ",", "h", ",", "w", "=", "self", ".", "all_log_prob", ".", "shape", "\n", "p_trans", "=", "F", ".", "transpose", "(", "self", ".", "all_log_prob", ",", "axes", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "p_trans", "=", "F", ".", "reshape", "(", "p_trans", ",", "(", "-", "1", ",", "n_actions", ")", ")", "\n", "x_reshape", "=", "F", ".", "reshape", "(", "x", ",", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "\n", "selected_p", "=", "F", ".", "select_item", "(", "p_trans", ",", "x_reshape", ")", "\n", "return", "F", ".", "reshape", "(", "selected_p", ",", "(", "n_batch", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "##########################", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.weights_init_kaiming": [[23, 40], ["classname.find", "torch.init.kaiming_normal", "classname.find", "torch.init.kaiming_normal", "classname.find", "lyr.weight.data.normal_().clamp_", "torch.init.constant", "lyr.weight.data.normal_", "math.sqrt"], "function", ["None"], ["def", "weights_init_kaiming", "(", "lyr", ")", ":", "\n", "\t", "r\"\"\"Initializes weights of the model according to the \"He\" initialization\n\tmethod described in \"Delving deep into rectifiers: Surpassing human-level\n    performance on ImageNet classification\" - He, K. et al. (2015), using a\n    normal distribution.\n\tThis function is to be called by the torch.nn.Module.apply() method,\n\twhich applies weights_init_kaiming() to every layer of the model.\n\t\"\"\"", "\n", "classname", "=", "lyr", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "\t\t", "nn", ".", "init", ".", "kaiming_normal", "(", "lyr", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "\t\t", "nn", ".", "init", ".", "kaiming_normal", "(", "lyr", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "\t\t", "lyr", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "math", ".", "sqrt", "(", "2.", "/", "9.", "/", "64.", ")", ")", ".", "clamp_", "(", "-", "0.025", ",", "0.025", ")", "\n", "nn", ".", "init", ".", "constant", "(", "lyr", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.batch_psnr": [[41, 59], ["img.data.cpu().numpy().astype", "imclean.data.cpu().numpy().astype", "range", "skimage.measure.simple_metrics.compare_psnr", "img.data.cpu().numpy", "imclean.data.cpu().numpy", "img.data.cpu", "imclean.data.cpu"], "function", ["None"], ["", "", "def", "batch_psnr", "(", "img", ",", "imclean", ",", "data_range", ")", ":", "\n", "\t", "r\"\"\"\n\tComputes the PSNR along the batch dimension (not pixel-wise)\n\n\tArgs:\n\t\timg: a `torch.Tensor` containing the restored image\n\t\timclean: a `torch.Tensor` containing the reference image\n\t\tdata_range: The data range of the input image (distance between\n\t\t\tminimum and maximum possible values). By default, this is estimated\n\t\t\tfrom the image data-type.\n\t\"\"\"", "\n", "img_cpu", "=", "img", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "imgclean", "=", "imclean", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "psnr", "=", "0", "\n", "for", "i", "in", "range", "(", "img_cpu", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "psnr", "+=", "compare_psnr", "(", "imgclean", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "img_cpu", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "data_range", "=", "data_range", ")", "\n", "", "return", "psnr", "/", "img_cpu", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.data_augmentation": [[60, 106], ["numpy.transpose", "numpy.transpose", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.flipud", "numpy.rot90", "numpy.rot90", "numpy.flipud", "Exception"], "function", ["None"], ["", "def", "data_augmentation", "(", "image", ",", "mode", ")", ":", "\n", "\t", "r\"\"\"Performs dat augmentation of the input image\n\n\tArgs:\n\t\timage: a cv2 (OpenCV) image\n\t\tmode: int. Choice of transformation to apply to the image\n\t\t\t0 - no transformation\n\t\t\t1 - flip up and down\n\t\t\t2 - rotate counterwise 90 degree\n\t\t\t3 - rotate 90 degree and flip up and down\n\t\t\t4 - rotate 180 degree\n\t\t\t5 - rotate 180 degree and flip\n\t\t\t6 - rotate 270 degree\n\t\t\t7 - rotate 270 degree and flip\n\t\"\"\"", "\n", "out", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "mode", "==", "0", ":", "\n", "# original", "\n", "\t\t", "out", "=", "out", "\n", "", "elif", "mode", "==", "1", ":", "\n", "# flip up and down", "\n", "\t\t", "out", "=", "np", ".", "flipud", "(", "out", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "# rotate counterwise 90 degree", "\n", "\t\t", "out", "=", "np", ".", "rot90", "(", "out", ")", "\n", "", "elif", "mode", "==", "3", ":", "\n", "# rotate 90 degree and flip up and down", "\n", "\t\t", "out", "=", "np", ".", "rot90", "(", "out", ")", "\n", "out", "=", "np", ".", "flipud", "(", "out", ")", "\n", "", "elif", "mode", "==", "4", ":", "\n", "# rotate 180 degree", "\n", "\t\t", "out", "=", "np", ".", "rot90", "(", "out", ",", "k", "=", "2", ")", "\n", "", "elif", "mode", "==", "5", ":", "\n", "# rotate 180 degree and flip", "\n", "\t\t", "out", "=", "np", ".", "rot90", "(", "out", ",", "k", "=", "2", ")", "\n", "out", "=", "np", ".", "flipud", "(", "out", ")", "\n", "", "elif", "mode", "==", "6", ":", "\n", "# rotate 270 degree", "\n", "\t\t", "out", "=", "np", ".", "rot90", "(", "out", ",", "k", "=", "3", ")", "\n", "", "elif", "mode", "==", "7", ":", "\n", "# rotate 270 degree and flip", "\n", "\t\t", "out", "=", "np", ".", "rot90", "(", "out", ",", "k", "=", "3", ")", "\n", "out", "=", "np", ".", "flipud", "(", "out", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "Exception", "(", "'Invalid choice of image transformation'", ")", "\n", "", "return", "np", ".", "transpose", "(", "out", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.variable_to_cv2_image": [[107, 123], ["varim.size", "cv2.cvtColor", "Exception", "varim.data.cpu().numpy", "cv2.cvtColor.transpose", "varim.data.cpu", "varim.data.cpu().numpy", "varim.data.cpu"], "function", ["None"], ["", "def", "variable_to_cv2_image", "(", "varim", ")", ":", "\n", "\t", "r\"\"\"Converts a torch.autograd.Variable to an OpenCV image\n\n\tArgs:\n\t\tvarim: a torch.autograd.Variable\n\t\"\"\"", "\n", "nchannels", "=", "varim", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "nchannels", "==", "1", ":", "\n", "\t\t", "res", "=", "(", "varim", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", "]", "*", "255.", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "elif", "nchannels", "==", "3", ":", "\n", "\t\t", "res", "=", "varim", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "res", "=", "cv2", ".", "cvtColor", "(", "res", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "res", "=", "(", "res", "*", "255.", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "Exception", "(", "'Number of color channels not supported'", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.get_git_revision_short_hash": [[124, 128], ["subprocess.check_output().strip", "subprocess.check_output"], "function", ["None"], ["", "def", "get_git_revision_short_hash", "(", ")", ":", "\n", "\t", "r\"\"\"Returns the current Git commit.\n\t\"\"\"", "\n", "return", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--short'", ",", "'HEAD'", "]", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.init_logger": [[129, 153], ["logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.info", "join", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.error", "utils.get_git_revision_short_hash"], "function", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.get_git_revision_short_hash"], ["", "def", "init_logger", "(", "argdict", ")", ":", "\n", "\t", "r\"\"\"Initializes a logging.Logger to save all the running parameters to a\n\tlog file\n\n\tArgs:\n\t\targdict: dictionary of parameters to be logged\n\t\"\"\"", "\n", "from", "os", ".", "path", "import", "join", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "join", "(", "argdict", ".", "log_dir", ",", "'log.txt'", ")", ",", "mode", "=", "'a'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "try", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Commit: {}\"", ".", "format", "(", "get_git_revision_short_hash", "(", ")", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "logger", ".", "error", "(", "\"Couldn't get commit number: {}\"", ".", "format", "(", "e", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Arguments: \"", ")", "\n", "for", "k", "in", "argdict", ".", "__dict__", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"\\t{}: {}\"", ".", "format", "(", "k", ",", "argdict", ".", "__dict__", "[", "k", "]", ")", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.init_logger_ipol": [[154, 169], ["logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "init_logger_ipol", "(", ")", ":", "\n", "\t", "r\"\"\"Initializes a logging.Logger in order to log the results after\n\ttesting a model\n\n\tArgs:\n\t\tresult_dir: path to the folder with the denoising results\n\t\"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'testlog'", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "'out.txt'", ",", "mode", "=", "'w'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.init_logger_test": [[170, 187], ["logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "join"], "function", ["None"], ["", "def", "init_logger_test", "(", "result_dir", ")", ":", "\n", "\t", "r\"\"\"Initializes a logging.Logger in order to log the results after testing\n\ta model\n\n\tArgs:\n\t\tresult_dir: path to the folder with the denoising results\n\t\"\"\"", "\n", "from", "os", ".", "path", "import", "join", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'testlog'", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "join", "(", "result_dir", ",", "'log.txt'", ")", ",", "mode", "=", "'a'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.normalize": [[188, 195], ["numpy.float32"], "function", ["None"], ["", "def", "normalize", "(", "data", ")", ":", "\n", "\t", "r\"\"\"Normalizes a unit8 image to a float32 image in the range [0, 1]\n\n\tArgs:\n\t\tdata: a unint8 numpy array to normalize from [0, 255] to [0, 1]\n\t\"\"\"", "\n", "return", "np", ".", "float32", "(", "data", "/", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.svd_orthogonalization": [[196, 229], ["classname.find", "lyr.weight.data.clone", "np.dot.size", "lyr.weight.data.type", "np.dot.permute().contiguous().view", "np.dot.cpu().numpy", "numpy.linalg.svd", "numpy.dot", "torch.Tensor().view().permute().type", "torch.Tensor().view().permute().type", "np.dot.permute().contiguous", "np.dot.cpu", "torch.Tensor().view().permute", "torch.Tensor().view().permute", "np.dot.permute", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "svd_orthogonalization", "(", "lyr", ")", ":", "\n", "\t", "r\"\"\"Applies regularization to the training by performing the\n\torthogonalization technique described in the paper \"FFDNet:\tToward a fast\n\tand flexible solution for CNN based image denoising.\" Zhang et al. (2017).\n\tFor each Conv layer in the model, the method replaces the matrix whose columns\n\tare the filters of the layer by new filters which are orthogonal to each other.\n\tThis is achieved by setting the singular values of a SVD decomposition to 1.\n\n\tThis function is to be called by the torch.nn.Module.apply() method,\n\twhich applies svd_orthogonalization() to every layer of the model.\n\t\"\"\"", "\n", "classname", "=", "lyr", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "\t\t", "weights", "=", "lyr", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "c_out", ",", "c_in", ",", "f1", ",", "f2", "=", "weights", ".", "size", "(", ")", "\n", "dtype", "=", "lyr", ".", "weight", ".", "data", ".", "type", "(", ")", "\n", "\n", "# Reshape filters to columns", "\n", "# From (c_out, c_in, f1, f2)  to (f1*f2*c_in, c_out)", "\n", "weights", "=", "weights", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "f1", "*", "f2", "*", "c_in", ",", "c_out", ")", "\n", "\n", "# Convert filter matrix to numpy array", "\n", "weights", "=", "weights", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# SVD decomposition and orthogonalization", "\n", "mat_u", ",", "_", ",", "mat_vh", "=", "np", ".", "linalg", ".", "svd", "(", "weights", ",", "full_matrices", "=", "False", ")", "\n", "weights", "=", "np", ".", "dot", "(", "mat_u", ",", "mat_vh", ")", "\n", "\n", "# As full_matrices=False we don't need to set s[:] = 1 and do mat_u*s", "\n", "lyr", ".", "weight", ".", "data", "=", "torch", ".", "Tensor", "(", "weights", ")", ".", "view", "(", "f1", ",", "f2", ",", "c_in", ",", "c_out", ")", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", ".", "type", "(", "dtype", ")", "\n", "", "else", ":", "\n", "\t\t", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.remove_dataparallel_wrapper": [[230, 245], ["OrderedDict", "state_dict.items"], "function", ["None"], ["", "", "def", "remove_dataparallel_wrapper", "(", "state_dict", ")", ":", "\n", "\t", "r\"\"\"Converts a DataParallel model to a normal one by removing the \"module.\"\n\twrapper in the module dictionary\n\n\tArgs:\n\t\tstate_dict: a torch.nn.DataParallel state dictionary\n\t\"\"\"", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "vl", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "\t\t", "name", "=", "k", "[", "7", ":", "]", "# remove 'module.' of DataParallel", "\n", "new_state_dict", "[", "name", "]", "=", "vl", "\n", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.utils.is_rgb": [[246, 258], ["imread", "print", "print", "len", "numpy.allclose", "numpy.allclose"], "function", ["None"], ["", "def", "is_rgb", "(", "im_path", ")", ":", "\n", "\t", "r\"\"\" Returns True if the image in im_path is an RGB image\n\t\"\"\"", "\n", "from", "skimage", ".", "io", "import", "imread", "\n", "rgb", "=", "False", "\n", "im", "=", "imread", "(", "im_path", ")", "\n", "if", "(", "len", "(", "im", ".", "shape", ")", "==", "3", ")", ":", "\n", "\t\t", "if", "not", "(", "np", ".", "allclose", "(", "im", "[", "...", ",", "0", "]", ",", "im", "[", "...", ",", "1", "]", ")", "and", "np", ".", "allclose", "(", "im", "[", "...", ",", "2", "]", ",", "im", "[", "...", ",", "1", "]", ")", ")", ":", "\n", "\t\t\t", "rgb", "=", "True", "\n", "", "", "print", "(", "\"rgb: {}\"", ".", "format", "(", "rgb", ")", ")", "\n", "print", "(", "\"im shape: {}\"", ".", "format", "(", "im", ".", "shape", ")", ")", "\n", "return", "rgb", "\n", "", ""]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.DilatedConvBlock.__init__": [[15, 23], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.DilatedConvolution2D", "chainer.DilatedConvolution2D", "chainer.DilatedConvolution2D"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_factor", ")", ":", "\n", "        ", "super", "(", "DilatedConvBlock", ",", "self", ")", ".", "__init__", "(", "\n", "diconv", "=", "L", ".", "DilatedConvolution2D", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "d_factor", ",", "\n", "dilate", "=", "d_factor", ",", "nobias", "=", "False", ")", ",", "\n", "# bn=L.BatchNormalization(64)", "\n", ")", "\n", "\n", "self", ".", "train", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.DilatedConvBlock.__call__": [[24, 28], ["chainer.relu", "chainer.relu", "chainer.relu", "MyFCN_el.DilatedConvBlock.diconv"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "diconv", "(", "x", ")", ")", "\n", "# h = F.relu(self.bn(self.diconv(x)))", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__": [[32, 53], ["chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "MyFCN_el.DilatedConvBlock", "MyFCN_el.DilatedConvBlock", "MyFCN_el.DilatedConvBlock", "MyFCN_el.DilatedConvBlock", "MyFCN_el.DilatedConvBlock", "chainerrl.policies.SoftmaxPolicy", "chainerrl.policies.SoftmaxPolicy", "chainerrl.policies.SoftmaxPolicy", "MyFCN_el.DilatedConvBlock", "MyFCN_el.DilatedConvBlock", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__", "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_actions", ")", ":", "\n", "        ", "w", "=", "chainer", ".", "initializers", ".", "HeNormal", "(", ")", "\n", "# net = CaffeFunction('../initial_weight/zhang_cvpr17_denoise_15_gray.caffemodel')", "\n", "super", "(", "MyFcn", ",", "self", ")", ".", "__init__", "(", "\n", "conv1", "=", "L", ".", "Convolution2D", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ",", "\n", "diconv2", "=", "DilatedConvBlock", "(", "2", ")", ",", "\n", "diconv3", "=", "DilatedConvBlock", "(", "3", ")", ",", "\n", "diconv4", "=", "DilatedConvBlock", "(", "4", ")", ",", "\n", "diconv5_pi", "=", "DilatedConvBlock", "(", "3", ")", ",", "\n", "diconv6_pi", "=", "DilatedConvBlock", "(", "2", ")", ",", "\n", "conv7_r_pi", "=", "chainerrl", ".", "policies", ".", "SoftmaxPolicy", "(", "\n", "L", ".", "Convolution2D", "(", "64", ",", "n_actions", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ")", ",", "\n", "conv7_g_pi", "=", "chainerrl", ".", "policies", ".", "SoftmaxPolicy", "(", "\n", "L", ".", "Convolution2D", "(", "64", ",", "n_actions", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ")", ",", "\n", "conv7_b_pi", "=", "chainerrl", ".", "policies", ".", "SoftmaxPolicy", "(", "\n", "L", ".", "Convolution2D", "(", "64", ",", "n_actions", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ")", ",", "\n", "diconv5_V", "=", "DilatedConvBlock", "(", "3", ")", ",", "\n", "diconv6_V", "=", "DilatedConvBlock", "(", "2", ")", ",", "\n", "conv7_V", "=", "L", ".", "Convolution2D", "(", "64", ",", "1", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "nobias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "train", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.GuoLanqing_ReLLIE.None.MyFCN_el.MyFcn.pi_and_v": [[54, 70], ["chainer.relu", "chainer.relu", "chainer.relu", "MyFCN_el.MyFcn.diconv2", "MyFCN_el.MyFcn.diconv3", "MyFCN_el.MyFcn.diconv4", "MyFCN_el.MyFcn.diconv5_pi", "MyFCN_el.MyFcn.diconv6_pi", "MyFCN_el.MyFcn.conv7_r_pi", "MyFCN_el.MyFcn.conv7_g_pi", "MyFCN_el.MyFcn.conv7_b_pi", "MyFCN_el.MyFcn.diconv5_V", "MyFCN_el.MyFcn.diconv6_V", "MyFCN_el.MyFcn.conv7_V", "MyFCN_el.MyFcn.conv1"], "methods", ["None"], ["", "def", "pi_and_v", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "diconv2", "(", "h", ")", "\n", "h", "=", "self", ".", "diconv3", "(", "h", ")", "\n", "h", "=", "self", ".", "diconv4", "(", "h", ")", "\n", "h_pi", "=", "self", ".", "diconv5_pi", "(", "h", ")", "\n", "h_pi", "=", "self", ".", "diconv6_pi", "(", "h_pi", ")", "\n", "pout_r", "=", "self", ".", "conv7_r_pi", "(", "h_pi", ")", "\n", "pout_g", "=", "self", ".", "conv7_g_pi", "(", "h_pi", ")", "\n", "pout_b", "=", "self", ".", "conv7_b_pi", "(", "h_pi", ")", "\n", "# pout = np.concatenate((pout_r,pout_g,pout_b), axis=1)", "\n", "h_V", "=", "self", ".", "diconv5_V", "(", "h", ")", "\n", "h_V", "=", "self", ".", "diconv6_V", "(", "h_V", ")", "\n", "vout", "=", "self", ".", "conv7_V", "(", "h_V", ")", "\n", "\n", "return", "pout_r", ",", "pout_g", ",", "pout_b", ",", "vout", "\n", "\n"]]}