{"home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Timer.__init__": [[14, 19], ["core.Timer.synch", "time.time"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "synch", "=", "None", ")", ":", "\n", "    ", "self", ".", "synch", "=", "synch", "or", "(", "lambda", ":", "None", ")", "\n", "self", ".", "synch", "(", ")", "\n", "self", ".", "times", "=", "[", "time", ".", "time", "(", ")", "]", "\n", "self", ".", "total_time", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Timer.__call__": [[20, 27], ["core.Timer.synch", "core.Timer.times.append", "time.time"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append"], ["", "def", "__call__", "(", "self", ",", "include_in_total", "=", "True", ")", ":", "\n", "    ", "self", ".", "synch", "(", ")", "\n", "self", ".", "times", ".", "append", "(", "time", ".", "time", "(", ")", ")", "\n", "delta_t", "=", "self", ".", "times", "[", "-", "1", "]", "-", "self", ".", "times", "[", "-", "2", "]", "\n", "if", "include_in_total", ":", "\n", "      ", "self", ".", "total_time", "+=", "delta_t", "\n", "", "return", "delta_t", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.TableLogger.append": [[33, 40], ["print", "hasattr", "output.keys", "print", "isinstance"], "methods", ["None"], ["  ", "def", "append", "(", "self", ",", "output", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "self", ",", "'keys'", ")", ":", "\n", "      ", "self", ".", "keys", "=", "output", ".", "keys", "(", ")", "\n", "print", "(", "*", "(", "f'{k:>12s}'", "for", "k", "in", "self", ".", "keys", ")", ")", "\n", "", "filtered", "=", "[", "output", "[", "k", "]", "for", "k", "in", "self", ".", "keys", "]", "\n", "print", "(", "*", "(", "f'{v:12.4f}'", "if", "isinstance", "(", "v", ",", "np", ".", "float", ")", "else", "f'{v:12}'", "\n", "for", "v", "in", "filtered", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Crop.__call__": [[82, 84], ["None"], "methods", ["None"], ["  ", "def", "__call__", "(", "self", ",", "x", ",", "x0", ",", "y0", ")", ":", "\n", "    ", "return", "x", "[", ":", ",", "y0", ":", "y0", "+", "self", ".", "h", ",", "x0", ":", "x0", "+", "self", ".", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Crop.options": [[85, 88], ["range", "range"], "methods", ["None"], ["", "def", "options", "(", "self", ",", "x_shape", ")", ":", "\n", "    ", "C", ",", "H", ",", "W", "=", "x_shape", "\n", "return", "{", "'x0'", ":", "range", "(", "W", "+", "1", "-", "self", ".", "w", ")", ",", "'y0'", ":", "range", "(", "H", "+", "1", "-", "self", ".", "h", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Crop.output_shape": [[89, 92], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "x_shape", ")", ":", "\n", "    ", "C", ",", "H", ",", "W", "=", "x_shape", "\n", "return", "(", "C", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.FlipLR.__call__": [[95, 97], ["x[].copy"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.copy"], ["  ", "def", "__call__", "(", "self", ",", "x", ",", "choice", ")", ":", "\n", "    ", "return", "x", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "if", "choice", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.FlipLR.options": [[98, 100], ["None"], "methods", ["None"], ["", "def", "options", "(", "self", ",", "x_shape", ")", ":", "\n", "    ", "return", "{", "'choice'", ":", "[", "True", ",", "False", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Cutout.__call__": [[103, 107], ["x.copy.copy.copy", "x[].fill"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.copy"], ["  ", "def", "__call__", "(", "self", ",", "x", ",", "x0", ",", "y0", ")", ":", "\n", "    ", "x", "=", "x", ".", "copy", "(", ")", "\n", "x", "[", ":", ",", "y0", ":", "y0", "+", "self", ".", "h", ",", "x0", ":", "x0", "+", "self", ".", "w", "]", ".", "fill", "(", "0.0", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Cutout.options": [[108, 111], ["range", "range"], "methods", ["None"], ["", "def", "options", "(", "self", ",", "x_shape", ")", ":", "\n", "    ", "C", ",", "H", ",", "W", "=", "x_shape", "\n", "return", "{", "'x0'", ":", "range", "(", "W", "+", "1", "-", "self", ".", "w", ")", ",", "'y0'", ":", "range", "(", "H", "+", "1", "-", "self", ".", "h", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Transform.__init__": [[114, 117], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "dataset", ",", "transforms", ")", ":", "\n", "    ", "self", ".", "dataset", ",", "self", ".", "transforms", "=", "dataset", ",", "transforms", "\n", "self", ".", "choices", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Transform.__len__": [[118, 120], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Transform.__getitem__": [[121, 127], ["zip", "f", "choices.items"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "data", ",", "labels", "=", "self", ".", "dataset", "[", "index", "]", "\n", "for", "choices", ",", "f", "in", "zip", "(", "self", ".", "choices", ",", "self", ".", "transforms", ")", ":", "\n", "      ", "args", "=", "{", "k", ":", "v", "[", "index", "]", "for", "(", "k", ",", "v", ")", "in", "choices", ".", "items", "(", ")", "}", "\n", "data", "=", "f", "(", "data", ",", "**", "args", ")", "\n", "", "return", "data", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Transform.set_random_choices": [[128, 139], ["len", "t.options", "core.Transform.choices.append", "hasattr", "t.output_shape", "numpy.random.choice", "t.options.items"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Cutout.options", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Crop.output_shape"], ["", "def", "set_random_choices", "(", "self", ")", ":", "\n", "    ", "self", ".", "choices", "=", "[", "]", "\n", "x_shape", "=", "self", ".", "dataset", "[", "0", "]", "[", "0", "]", ".", "shape", "\n", "N", "=", "len", "(", "self", ")", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "      ", "options", "=", "t", ".", "options", "(", "x_shape", ")", "\n", "x_shape", "=", "t", ".", "output_shape", "(", "x_shape", ")", "if", "hasattr", "(", "t", ",", "\n", "'output_shape'", ")", "else", "x_shape", "\n", "self", ".", "choices", ".", "append", "(", "\n", "{", "k", ":", "np", ".", "random", ".", "choice", "(", "v", ",", "size", "=", "N", ")", "\n", "for", "(", "k", ",", "v", ")", "in", "options", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.PiecewiseLinear.__call__": [[194, 196], ["numpy.interp"], "methods", ["None"], ["  ", "def", "__call__", "(", "self", ",", "t", ")", ":", "\n", "    ", "return", "np", ".", "interp", "(", "[", "t", "]", ",", "self", ".", "knots", ",", "self", ".", "vals", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.__init__": [[199, 201], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "    ", "self", ".", "_stats", "=", "{", "k", ":", "[", "]", "for", "k", "in", "keys", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append": [[202, 205], ["core.StatsLogger._stats.items", "v.append", "output[].detach"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append"], ["", "def", "append", "(", "self", ",", "output", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "self", ".", "_stats", ".", "items", "(", ")", ":", "\n", "      ", "v", ".", "append", "(", "output", "[", "k", "]", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.stats": [[206, 208], ["core.cat"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.cat"], ["", "", "def", "stats", "(", "self", ",", "key", ")", ":", "\n", "    ", "return", "cat", "(", "*", "self", ".", "_stats", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean": [[209, 211], ["numpy.mean", "core.to_numpy", "core.StatsLogger.stats"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.to_numpy", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.stats"], ["", "def", "mean", "(", "self", ",", "key", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "to_numpy", "(", "self", ".", "stats", "(", "key", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.ColorMap.__missing__": [[282, 285], ["len", "len"], "methods", ["None"], ["def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "    ", "self", "[", "key", "]", "=", "self", ".", "palette", "[", "len", "(", "self", ")", "%", "len", "(", "self", ".", "palette", ")", "]", "\n", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.DotGraph.__init__": [[324, 332], ["core.build_graph", "build_graph.items", "build_graph.items", "get_params", "type", "type"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.build_graph"], ["def", "__init__", "(", "self", ",", "net", ",", "size", "=", "15", ",", "direction", "=", "'LR'", ")", ":", "\n", "    ", "graph", "=", "build_graph", "(", "net", ")", "\n", "self", ".", "nodes", "=", "[", "(", "k", ",", "{", "\n", "'tooltip'", ":", "'%s %.1000r'", "%", "(", "type", "(", "n", ")", ".", "__name__", ",", "get_params", "(", "n", ")", ")", ",", "\n", "'fillcolor'", ":", "'#'", "+", "self", ".", "colors", "[", "type", "(", "n", ")", "]", ",", "\n", "}", ")", "for", "k", ",", "(", "n", ",", "i", ")", "in", "graph", ".", "items", "(", ")", "]", "\n", "self", ".", "edges", "=", "[", "(", "src", ",", "k", ",", "{", "}", ")", "for", "(", "k", ",", "(", "n", ",", "i", ")", ")", "in", "graph", ".", "items", "(", ")", "for", "src", "in", "i", "]", "\n", "self", ".", "size", ",", "self", ".", "direction", "=", "size", ",", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.DotGraph.dot_graph": [[333, 339], ["core.make_pydot"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.make_pydot"], ["", "def", "dot_graph", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "make_pydot", "(", "self", ".", "nodes", ",", "\n", "self", ".", "edges", ",", "\n", "size", "=", "self", ".", "size", ",", "\n", "direction", "=", "self", ".", "direction", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.DotGraph.svg": [[340, 342], ["core.DotGraph.dot_graph().create().decode", "core.DotGraph.dot_graph().create", "core.DotGraph.dot_graph"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.DotGraph.dot_graph"], ["", "def", "svg", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "dot_graph", "(", "**", "kwargs", ")", ".", "create", "(", "format", "=", "'svg'", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.normalise": [[54, 59], ["numpy.array"], "function", ["None"], ["def", "normalise", "(", "x", ",", "mean", "=", "cifar10_mean", ",", "std", "=", "cifar10_std", ")", ":", "\n", "  ", "x", ",", "mean", ",", "std", "=", "[", "np", ".", "array", "(", "a", ",", "np", ".", "float32", ")", "for", "a", "in", "(", "x", ",", "mean", ",", "std", ")", "]", "\n", "x", "-=", "mean", "*", "255", "\n", "x", "*=", "1.0", "/", "(", "255", "*", "std", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.normalise2": [[61, 65], ["numpy.array"], "function", ["None"], ["", "def", "normalise2", "(", "x", ",", "mean", "=", "cifar10_mean", ",", "std", "=", "cifar10_std", ")", ":", "\n", "  ", "x", ",", "mean", ",", "std", "=", "[", "np", ".", "array", "(", "a", ",", "np", ".", "float32", ")", "for", "a", "in", "(", "x", ",", "mean", ",", "std", ")", "]", "\n", "x", "*=", "1.0", "/", "(", "255", "*", "std", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.pad": [[67, 70], ["numpy.pad"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.pad"], ["", "def", "pad", "(", "x", ",", "border", "=", "4", ")", ":", "\n", "  ", "return", "np", ".", "pad", "(", "x", ",", "[", "(", "0", ",", "0", ")", ",", "(", "border", ",", "border", ")", ",", "(", "border", ",", "border", ")", ",", "(", "0", ",", "0", ")", "]", ",", "\n", "mode", "=", "'reflect'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.transpose": [[72, 74], ["x.transpose", "source.index"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.transpose"], ["", "def", "transpose", "(", "x", ",", "source", "=", "'NHWC'", ",", "target", "=", "'NCHW'", ")", ":", "\n", "  ", "return", "x", ".", "transpose", "(", "[", "source", ".", "index", "(", "d", ")", "for", "d", "in", "target", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.path_iter": [[148, 152], ["nested_dict.items", "isinstance", "core.path_iter"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.path_iter"], ["def", "path_iter", "(", "nested_dict", ",", "pfx", "=", "(", ")", ")", ":", "\n", "  ", "for", "name", ",", "val", "in", "nested_dict", ".", "items", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "val", ",", "dict", ")", ":", "yield", "from", "path_iter", "(", "val", ",", "(", "*", "pfx", ",", "name", ")", ")", "\n", "else", ":", "yield", "(", "(", "*", "pfx", ",", "name", ")", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.build_graph": [[163, 175], ["dict", "core.path_iter", "sep.join", "isinstance", "zip", "dict.keys", "isinstance", "enumerate", "tuple", "isinstance", "sep.join", "dict.keys", "with_default_inputs", "parts", "dict.values"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.path_iter"], ["def", "build_graph", "(", "net", ")", ":", "\n", "  ", "net", "=", "dict", "(", "path_iter", "(", "net", ")", ")", "\n", "default_inputs", "=", "[", "[", "(", "'input'", ",", ")", "]", "]", "+", "[", "[", "k", "]", "for", "k", "in", "net", ".", "keys", "(", ")", "]", "\n", "with_default_inputs", "=", "lambda", "vals", ":", "(", "val", "if", "isinstance", "(", "val", ",", "tuple", ")", "else", "\n", "(", "val", ",", "default_inputs", "[", "idx", "]", ")", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "vals", ")", ")", "\n", "parts", "=", "lambda", "path", ",", "pfx", ":", "tuple", "(", "pfx", ")", "+", "path", ".", "parts", "if", "isinstance", "(", "\n", "path", ",", "RelativePath", ")", "else", "(", "path", ",", ")", "if", "isinstance", "(", "path", ",", "str", ")", "else", "path", "\n", "return", "{", "\n", "sep", ".", "join", "(", "(", "*", "pfx", ",", "name", ")", ")", ":", "(", "val", ",", "[", "sep", ".", "join", "(", "parts", "(", "x", ",", "pfx", ")", ")", "for", "x", "in", "inputs", "]", ")", "\n", "for", "(", "*", "pfx", ",", "name", ")", ",", "(", "\n", "val", ",", "inputs", ")", "in", "zip", "(", "net", ".", "keys", "(", ")", ",", "with_default_inputs", "(", "net", ".", "values", "(", ")", ")", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.cat": [[183, 186], ["None"], "function", ["None"], ["", "@", "singledispatch", "\n", "def", "cat", "(", "*", "xs", ")", ":", "\n", "  ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.to_numpy": [[188, 191], ["None"], "function", ["None"], ["", "@", "singledispatch", "\n", "def", "to_numpy", "(", "x", ")", ":", "\n", "  ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.run_batches": [[213, 224], ["model.train", "core.StatsLogger", "model", "stats.append", "output[].sum().backward", "optimizer_step", "model.zero_grad", "output[].sum"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append"], ["", "", "def", "run_batches", "(", "model", ",", "batches", ",", "training", ",", "optimizer_step", "=", "None", ",", "stats", "=", "None", ")", ":", "\n", "  ", "stats", "=", "stats", "or", "StatsLogger", "(", "(", "'loss'", ",", "'correct'", ")", ")", "\n", "model", ".", "train", "(", "training", ")", "\n", "for", "batch", "in", "batches", ":", "\n", "    ", "output", "=", "model", "(", "batch", ")", "\n", "stats", ".", "append", "(", "output", ")", "\n", "if", "training", ":", "\n", "      ", "output", "[", "'loss'", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "optimizer_step", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train_epoch": [[226, 244], ["core.run_batches", "timer", "core.run_batches", "timer", "train_stats.mean", "train_stats.mean", "test_stats.mean", "test_stats.mean"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.run_batches", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.run_batches", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean"], ["", "def", "train_epoch", "(", "model", ",", "\n", "train_batches", ",", "\n", "test_batches", ",", "\n", "optimizer_step", ",", "\n", "timer", ",", "\n", "test_time_in_total", "=", "True", ")", ":", "\n", "  ", "train_stats", ",", "train_time", "=", "run_batches", "(", "model", ",", "train_batches", ",", "True", ",", "\n", "optimizer_step", ")", ",", "timer", "(", ")", "\n", "test_stats", ",", "test_time", "=", "run_batches", "(", "model", ",", "test_batches", ",", "\n", "False", ")", ",", "timer", "(", "test_time_in_total", ")", "\n", "return", "{", "\n", "'train time'", ":", "train_time", ",", "\n", "'train loss'", ":", "train_stats", ".", "mean", "(", "'loss'", ")", ",", "\n", "'train acc'", ":", "train_stats", ".", "mean", "(", "'correct'", ")", ",", "\n", "'test time'", ":", "test_time", ",", "\n", "'test loss'", ":", "test_stats", ".", "mean", "(", "'loss'", ")", ",", "\n", "'test acc'", ":", "test_stats", ".", "mean", "(", "'correct'", ")", ",", "\n", "'total time'", ":", "timer", ".", "total_time", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train": [[247, 271], ["range", "core.Timer", "core.train_epoch", "union", "logger.append", "optimizer.param_values"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train_epoch", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.param_values"], ["", "def", "train", "(", "model", ",", "\n", "optimizer", ",", "\n", "train_batches", ",", "\n", "test_batches", ",", "\n", "epochs", ",", "\n", "loggers", "=", "(", ")", ",", "\n", "test_time_in_total", "=", "True", ",", "\n", "timer", "=", "None", ")", ":", "\n", "  ", "timer", "=", "timer", "or", "Timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "    ", "epoch_stats", "=", "train_epoch", "(", "model", ",", "\n", "train_batches", ",", "\n", "test_batches", ",", "\n", "optimizer", ".", "step", ",", "\n", "timer", ",", "\n", "test_time_in_total", "=", "test_time_in_total", ")", "\n", "summary", "=", "union", "(", "\n", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'lr'", ":", "optimizer", ".", "param_values", "(", ")", "[", "'lr'", "]", "*", "train_batches", ".", "batch_size", "\n", "}", ",", "epoch_stats", ")", "\n", "for", "logger", "in", "loggers", ":", "\n", "      ", "logger", ".", "append", "(", "summary", ")", "\n", "", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.make_pydot": [[287, 313], ["Subgraphs", "pydot.Dot", "pydot.Dot.set_node_defaults", "tuple", "subgraphs[].add_node", "pydot.Dot.add_edge", "pydot.Cluster", "core..add_subgraph", "node.split", "pydot.Node", "pydot.Edge", "sep.join", "stub", "stub", "parent", "parent"], "function", ["None"], ["", "", "def", "make_pydot", "(", "nodes", ",", "edges", ",", "direction", "=", "'LR'", ",", "sep", "=", "sep", ",", "**", "kwargs", ")", ":", "\n", "  ", "import", "pydot", "\n", "parent", "=", "lambda", "path", ":", "path", "[", ":", "-", "1", "]", "\n", "stub", "=", "lambda", "path", ":", "path", "[", "-", "1", "]", "\n", "\n", "class", "Subgraphs", "(", "dict", ")", ":", "\n", "    ", "def", "__missing__", "(", "self", ",", "path", ")", ":", "\n", "      ", "subgraph", "=", "pydot", ".", "Cluster", "(", "sep", ".", "join", "(", "path", ")", ",", "\n", "label", "=", "stub", "(", "path", ")", ",", "\n", "style", "=", "'rounded, filled'", ",", "\n", "fillcolor", "=", "'#77777744'", ")", "\n", "self", "[", "parent", "(", "path", ")", "]", ".", "add_subgraph", "(", "subgraph", ")", "\n", "return", "subgraph", "\n", "\n", "", "", "subgraphs", "=", "Subgraphs", "(", ")", "\n", "subgraphs", "[", "(", ")", "]", "=", "g", "=", "pydot", ".", "Dot", "(", "rankdir", "=", "direction", ",", "directed", "=", "True", ",", "**", "kwargs", ")", "\n", "g", ".", "set_node_defaults", "(", "shape", "=", "'box'", ",", "\n", "style", "=", "'rounded, filled'", ",", "\n", "fillcolor", "=", "'#ffffff'", ")", "\n", "for", "node", ",", "attr", "in", "nodes", ":", "\n", "    ", "path", "=", "tuple", "(", "node", ".", "split", "(", "sep", ")", ")", "\n", "subgraphs", "[", "parent", "(", "path", ")", "]", ".", "add_node", "(", "\n", "pydot", ".", "Node", "(", "name", "=", "node", ",", "label", "=", "stub", "(", "path", ")", ",", "**", "attr", ")", ")", "\n", "", "for", "src", ",", "dst", ",", "attr", "in", "edges", ":", "\n", "    ", "g", ".", "add_edge", "(", "pydot", ".", "Edge", "(", "src", ",", "dst", ",", "**", "attr", ")", ")", "\n", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.remove_by_type": [[357, 364], ["core.build_graph", "build_graph.items", "isinstance", "build_graph.items", "walk", "isinstance"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.build_graph"], ["def", "remove_by_type", "(", "net", ",", "node_type", ")", ":", "\n", "#remove identity nodes for more compact visualisations", "\n", "  ", "graph", "=", "build_graph", "(", "net", ")", "\n", "remap", "=", "{", "k", ":", "i", "[", "0", "]", "for", "k", ",", "(", "v", ",", "i", ")", "in", "graph", ".", "items", "(", ")", "if", "isinstance", "(", "v", ",", "node_type", ")", "}", "\n", "return", "{", "\n", "k", ":", "(", "v", ",", "[", "walk", "(", "remap", ",", "x", ")", "for", "x", "in", "i", "]", ")", "\n", "for", "k", ",", "(", "v", ",", "i", ")", "in", "graph", ".", "items", "(", ")", "if", "not", "isinstance", "(", "v", ",", "node_type", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_pgd.initialize_weights": [[47, 58], ["isinstance", "module.weight.data.normal_", "isinstance", "math.sqrt", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_", "isinstance", "module.bias.data.zero_"], "function", ["None"], ["def", "initialize_weights", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "n", "=", "module", ".", "kernel_size", "[", "0", "]", "*", "module", ".", "kernel_size", "[", "1", "]", "*", "module", ".", "out_channels", "\n", "module", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "      ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_pgd.attack_pgd": [[60, 117], ["torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "range", "torch.rand_like.detach", "delta[].uniform_", "delta[].uniform_", "delta[].uniform_", "model", "torch.cross_entropy", "F.cross_entropy.backward", "torch.rand_like.grad.detach", "evaluate.clamp", "torch.rand_like.grad.zero_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "[].item", "[].item", "[].item", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "evaluate.norms_p().clamp", "evaluate.clamp", "[].item", "[].item", "[].item", "torch.distributions.laplace.Laplace", "laplace.Laplace.sample", "evaluate.norms_l1().clamp", "evaluate.norms_p", "evaluate.norms_p().clamp", "evaluate.proj_l1ball", "torch.rand_like.detach", "torch.rand_like.new_tensor", "torch.rand_like.new_tensor", "evaluate.norms_l1", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "evaluate.norms_p", "torch.rand_like.detach", "evaluate.norms_p", "evaluate.l1_dir_topk", "epsilon.detach().cpu().numpy", "torch.rand_like.detach", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach().cpu", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach", "epsilon.detach"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_l1ball", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_l1", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.l1_dir_topk"], ["", "", "def", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "norm", ",", "dataset", ",", "params", "=", "None", ")", ":", "\n", "  ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", ".", "cuda", "(", ")", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "    ", "if", "dataset", "==", "\"cifar10\"", "or", "dataset", "==", "\"svhn\"", ":", "\n", "      ", "epsilon", "=", "(", "8", "/", "255.", ")", "/", "std", "\n", "", "else", ":", "\n", "      ", "epsilon", "=", "(", "4", "/", "255.", ")", "/", "std", "\n", "", "attack_iters", "=", "10", "\n", "alpha", "=", "(", "1", "/", "255.", ")", "/", "std", "\n", "delta", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "    ", "if", "dataset", "==", "\"cifar10\"", "or", "dataset", "==", "\"svhn\"", ":", "\n", "      ", "epsilon", "=", "(", "128", "/", "255.", ")", "/", "std", "\n", "", "else", ":", "\n", "      ", "epsilon", "=", "(", "80", "/", "255.", ")", "/", "std", "\n", "", "attack_iters", "=", "10", "\n", "alpha", "=", "(", "30.", "/", "255.", ")", "/", "std", "\n", "delta", "=", "torch", ".", "rand_like", "(", "X", ",", "requires_grad", "=", "True", ")", "\n", "delta", ".", "data", "*=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_p", "(", "\n", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "    ", "epsilon", "=", "(", "2000", "/", "255.", ")", "/", "std", "\n", "attack_iters", "=", "20", "\n", "alpha", "=", "(", "255.", "/", "255.", ")", "/", "std", "\n", "ini", "=", "laplace", ".", "Laplace", "(", "loc", "=", "delta", ".", "new_tensor", "(", "0", ")", ",", "scale", "=", "delta", ".", "new_tensor", "(", "1", ")", ")", "\n", "delta", ".", "data", "=", "ini", ".", "sample", "(", "delta", ".", "data", ".", "shape", ")", "\n", "delta", ".", "data", "=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_l1", "(", "\n", "delta", ".", "detach", "(", ")", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "delta", ".", "requires_grad", "=", "True", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "    ", "output", "=", "model", "(", "X", "+", "delta", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "      ", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", "+", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "-", "epsilon", ",", "\n", "epsilon", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "      ", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "grad", "/", "norms_p", "(", "grad", ",", "2.0", ")", "\n", "delta", ".", "data", "*=", "epsilon", "/", "norms_p", "(", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "\n", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "      ", "k", "=", "99", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "l1_dir_topk", "(", "grad", ",", "delta", ".", "data", ",", "X", ",", "k", ")", "\n", "delta", ".", "data", "=", "proj_l1ball", "(", "delta", ".", "data", ",", "\n", "epsilon", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "\n", "device", "=", "device", ")", "\n", "", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", ",", "lower_limit", "-", "X", ",", "upper_limit", "-", "X", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_pgd.attack_msd": [[119, 178], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "range", "torch.zeros_like.detach", "loss.backward", "torch.zeros_like.grad.zero_", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.CrossEntropyLoss", "model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "evaluate.clamp", "evaluate.clamp", "evaluate.proj_l1ball", "evaluate.clamp", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "torch.zeros().to().float", "evaluate.norms_p().clamp", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "evaluate.norms", "evaluate.l1_dir_topk", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.CrossEntropyLoss", "model", "evaluate.norms_p", "delta_l_2.detach", "torch.zeros_like.grad.sign", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_l1ball", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.l1_dir_topk", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p"], ["", "def", "attack_msd", "(", "model", ",", "\n", "X", ",", "\n", "y", ",", "\n", "opt", ",", "\n", "dataset", ",", "\n", "epsilon_l_inf", "=", "8.", "/", "255", ",", "\n", "epsilon_l_2", "=", "128.", "/", "255", ",", "\n", "epsilon_l_1", "=", "2000.", "/", "255", ",", "\n", "alpha_l_inf", "=", "1.", "/", "255", ",", "\n", "alpha_l_2", "=", "25.", "/", "255", ",", "\n", "alpha_l_1", "=", "255.", "/", "255", ",", "\n", "num_iter", "=", "20", ",", "\n", "device", "=", "\"cuda:0\"", ")", ":", "\n", "  ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ",", "requires_grad", "=", "True", ")", "\n", "max_delta", "=", "torch", ".", "zeros_like", "(", "X", ")", "\n", "max_max_delta", "=", "torch", ".", "zeros_like", "(", "X", ")", "\n", "max_loss", "=", "torch", ".", "zeros", "(", "y", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "y", ".", "device", ")", ".", "float", "(", ")", "\n", "max_max_loss", "=", "torch", ".", "zeros", "(", "y", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "y", ".", "device", ")", ".", "float", "(", ")", "\n", "alpha_l_1_default", "=", "alpha_l_1", "\n", "\n", "for", "t", "in", "range", "(", "num_iter", ")", ":", "\n", "    ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "model", "(", "X", "+", "delta", ")", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#For L_2", "\n", "      ", "delta_l_2", "=", "delta", ".", "data", "+", "alpha_l_2", "*", "delta", ".", "grad", "/", "norms", "(", "delta", ".", "grad", ")", "\n", "delta_l_2", "*=", "epsilon_l_2", "/", "norms_p", "(", "delta_l_2", ".", "detach", "(", ")", ",", "\n", "2.0", ")", ".", "clamp", "(", "min", "=", "epsilon_l_2", ")", "\n", "\n", "delta_l_2", ".", "data", "=", "clamp", "(", "delta_l_2", ".", "data", ",", "lower_limit", "-", "X", ",", "upper_limit", "-", "X", ")", "\n", "\n", "#For L_inf", "\n", "delta_l_inf", "=", "(", "delta", ".", "data", "+", "alpha_l_inf", "*", "delta", ".", "grad", ".", "sign", "(", ")", ")", ".", "clamp", "(", "\n", "-", "epsilon_l_inf", ",", "epsilon_l_inf", ")", "\n", "delta_l_inf", ".", "data", "=", "clamp", "(", "delta_l_inf", ".", "data", ",", "lower_limit", "-", "X", ",", "\n", "upper_limit", "-", "X", ")", "\n", "\n", "#For L1", "\n", "k", "=", "99", "\n", "delta_l_1", "=", "delta", ".", "data", "+", "alpha_l_1", "*", "l1_dir_topk", "(", "delta", ".", "grad", ",", "delta", ".", "data", ",", "\n", "X", ",", "k", ")", "\n", "delta_l_1", "=", "proj_l1ball", "(", "delta_l_1", ",", "epsilon_l_1", ",", "device", ")", "\n", "delta_l_1", ".", "data", "=", "clamp", "(", "delta_l_1", ".", "data", ",", "lower_limit", "-", "X", ",", "upper_limit", "-", "X", ")", "\n", "\n", "#Compare", "\n", "delta_tup", "=", "(", "delta_l_1", ",", "delta_l_2", ",", "delta_l_inf", ")", "\n", "max_loss", "=", "torch", ".", "zeros", "(", "y", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "y", ".", "device", ")", ".", "float", "(", ")", "\n", "for", "delta_temp", "in", "delta_tup", ":", "\n", "        ", "loss_temp", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "model", "(", "X", "+", "\n", "delta_temp", ")", ",", "y", ")", "\n", "max_delta", "[", "loss_temp", ">=", "max_loss", "]", "=", "delta_temp", "[", "loss_temp", ">=", "max_loss", "]", "\n", "max_loss", "=", "torch", ".", "max", "(", "max_loss", ",", "loss_temp", ")", "\n", "", "delta", ".", "data", "=", "max_delta", ".", "data", "\n", "max_max_delta", "[", "max_loss", ">", "max_max_loss", "]", "=", "max_delta", "[", "\n", "max_loss", ">", "max_max_loss", "]", "\n", "max_max_loss", "[", "max_loss", ">", "max_max_loss", "]", "=", "max_loss", "[", "max_loss", ">", "max_max_loss", "]", "\n", "", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "\n", "", "return", "max_max_delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_pgd.get_loaders": [[180, 242], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_loaders", "(", "dir_", ",", "batch_size", ",", "dataset", ")", ":", "\n", "  ", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cifar10_mean", ",", "cifar10_std", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "64", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "num_workers", "=", "2", "\n", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "train_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/train'", ",", "\n", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/val'", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_pgd.get_args": [[244, 268], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'../cifar-data'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'cifar10'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-max'", ",", "default", "=", "0.21", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--attack'", ",", "\n", "default", "=", "'pgd'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'pgd'", ",", "'fgsm'", ",", "'free'", ",", "'none'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_type'", ",", "default", "=", "'none'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "default", "=", "'linf'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--attack-iters'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--restarts'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pgd-alpha'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--fname'", ",", "default", "=", "'cifar_model_free1'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--width-factor'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'WideResNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--js_weight'", ",", "default", "=", "16", ",", "type", "=", "float", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_pgd.main": [[270, 412], ["train_pgd.get_args", "logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "time.time", "train_pgd.get_loaders", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "preact_resnet.resnet50.apply", "preact_resnet.resnet50.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "logger.info", "range", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "wideresnet.WideResNet", "preact_resnet.resnet50.params", "time.time", "enumerate", "copy.deepcopy", "time.time", "print", "preact_resnet.resnet50", "ValueError", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "numpy.interp", "lr_schedule", "torch.optim.SGD.param_groups[].update", "y.size", "preact_resnet.resnet50.state_dict", "X.cuda", "y.cuda", "preact_resnet.resnet50", "nn.CrossEntropyLoss.", "torch.optim.SGD.zero_grad", "criterion.backward", "torch.utils.clip_grad_norm_", "torch.optim.SGD.step", "criterion.item", "y.size", "train_pgd.attack_pgd", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "evaluate.clamp", "preact_resnet.resnet50.parameters", "preact_resnet.resnet50", "preact_resnet.resnet50", "preact_resnet.resnet50", "attack_pgd.view", "attack_pgd.view", "attack_pgd.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.max", "attack_pgd.view", "preact_resnet.resnet50", "nn.CrossEntropyLoss.", "torch.optim.SGD.zero_grad", "criterion.backward", "torch.utils.clip_grad_norm_", "torch.optim.SGD.step", "len", "train_pgd.attack_msd", "evaluate.clamp", "evaluate.clamp", "evaluate.clamp", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "tuple", "tuple", "evaluate.clamp", "preact_resnet.resnet50.parameters", "preact_resnet.resnet50", "nn.CrossEntropyLoss.", "preact_resnet.resnet50", "nn.CrossEntropyLoss.", "preact_resnet.resnet50", "nn.CrossEntropyLoss.", "torch.optim.SGD.zero_grad", "criterion.backward", "torch.utils.clip_grad_norm_", "torch.optim.SGD.step", "random.choices", "train_pgd.attack_pgd", "evaluate.clamp", "evaluate.clamp", "evaluate.clamp", "preact_resnet.resnet50.parameters", "train_pgd.attack_pgd", "train_pgd.attack_pgd", "train_pgd.attack_pgd", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "X.size", "model.max", "X.size", "X.size", "X.size", "X.size", "X.size", "X.size", "X.size"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_args", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_loaders", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.step", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.step", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_pgd.attack_msd", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.step", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd"], ["", "def", "main", "(", ")", ":", "\n", "  ", "args", "=", "get_args", "(", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "data_dir", "=", "args", ".", "dataset", "+", "\"-data\"", "\n", "if", "args", ".", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "args", ".", "n_classes", "=", "200", "\n", "", "else", ":", "\n", "    ", "args", ".", "n_classes", "=", "10", "\n", "\n", "", "start_start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loaders", "(", "args", ".", "data_dir", ",", "args", ".", "batch_size", ",", "\n", "args", ".", "dataset", ")", "\n", "\n", "epsilon", "=", "(", "args", ".", "epsilon", "/", "255.", ")", "/", "std", "\n", "pgd_alpha", "=", "(", "args", ".", "pgd_alpha", "/", "255.", ")", "/", "std", "\n", "\n", "if", "args", ".", "model", "==", "'WideResNet'", ":", "\n", "    ", "model", "=", "WideResNet", "(", "28", ",", "10", ",", "widen_factor", "=", "args", ".", "width_factor", ",", "dropRate", "=", "0.0", ")", "\n", "", "elif", "args", ".", "model", "==", "'resnet50'", ":", "\n", "    ", "model", "=", "ResNet50", "(", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown model\"", ")", "\n", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "apply", "(", "initialize_weights", ")", "\n", "model", ".", "train", "(", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "params", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr_max", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "epochs", "=", "args", ".", "epochs", "\n", "\n", "lr_schedule", "=", "lambda", "t", ":", "np", ".", "interp", "(", "\n", "[", "t", "]", ",", "[", "0", ",", "args", ".", "epochs", "*", "2", "//", "5", ",", "args", ".", "epochs", "]", ",", "[", "0", ",", "args", ".", "lr_max", ",", "0", "]", ")", "[", "0", "]", "\n", "\n", "logger", ".", "info", "(", "'Epoch \\t Time \\t LR \\t \\t Train Loss \\t Train Acc'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "train_n", "=", "0", "\n", "for", "i", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "      ", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "lr", "=", "lr_schedule", "(", "epoch", "+", "(", "i", "+", "1", ")", "/", "len", "(", "train_loader", ")", ")", "\n", "opt", ".", "param_groups", "[", "0", "]", ".", "update", "(", "lr", "=", "lr", ")", "\n", "\n", "if", "args", ".", "attack", "==", "'pgd'", ":", "\n", "        ", "if", "args", ".", "attack_type", "==", "\"none\"", ":", "\n", "          ", "delta", "=", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "args", ".", "norm", ",", "args", ".", "dataset", ")", "\n", "", "elif", "args", ".", "attack_type", "==", "\"msd\"", ":", "\n", "          ", "delta", "=", "attack_msd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "args", ".", "dataset", ")", "\n", "", "elif", "args", ".", "attack_type", "==", "\"random\"", ":", "\n", "          ", "norms_list", "=", "[", "\"linf\"", ",", "\"l1\"", ",", "\"l2\"", "]", "\n", "curr_norm", "=", "random", ".", "choices", "(", "norms_list", ")", "\n", "delta", "=", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "curr_norm", "[", "0", "]", ",", "args", ".", "dataset", ")", "\n", "", "elif", "args", ".", "attack_type", "==", "\"max\"", "or", "args", ".", "attack_type", "==", "\"avg\"", "or", "args", ".", "attack_type", "==", "\"avg_loss\"", ":", "\n", "          ", "norms_list", "=", "[", "\"linf\"", ",", "\"l1\"", ",", "\"l2\"", "]", "\n", "delta_linf", "=", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "norms_list", "[", "0", "]", ",", "\n", "args", ".", "dataset", ")", "\n", "delta_l1", "=", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "norms_list", "[", "1", "]", ",", "args", ".", "dataset", ")", "\n", "delta_l2", "=", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "norms_list", "[", "2", "]", ",", "args", ".", "dataset", ")", "\n", "\n", "", "", "elif", "args", ".", "attack", "==", "'none'", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", "\n", "\n", "", "if", "args", ".", "attack_type", "==", "\"none\"", "or", "args", ".", "attack_type", "==", "\"random\"", "or", "args", ".", "attack_type", "==", "\"msd\"", ":", "\n", "        ", "output", "=", "model", "(", "clamp", "(", "X", "+", "delta", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "y", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "0.5", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "elif", "args", ".", "attack_type", "==", "\"max\"", ":", "\n", "        ", "output_linf", "=", "model", "(", "\n", "clamp", "(", "X", "+", "delta_linf", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "output_l1", "=", "model", "(", "\n", "clamp", "(", "X", "+", "delta_l1", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "output_l2", "=", "model", "(", "\n", "clamp", "(", "X", "+", "delta_l2", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "loss_linf", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "output_linf", ",", "y", ")", "\n", "loss_l1", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "output_l1", ",", "y", ")", "\n", "loss_l2", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "output_l2", ",", "y", ")", "\n", "\n", "delta_l1", "=", "delta_l1", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "delta_l2", "=", "delta_l2", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "delta_linf", "=", "delta_linf", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "\n", "loss_list", "=", "[", "loss_l1", ",", "loss_l2", ",", "loss_linf", "]", "\n", "delta_list", "=", "[", "delta_l1", ",", "delta_l2", ",", "delta_linf", "]", "\n", "loss_arr", "=", "torch", ".", "stack", "(", "tuple", "(", "loss_list", ")", ")", "\n", "delta_arr", "=", "torch", ".", "stack", "(", "tuple", "(", "delta_list", ")", ")", "\n", "max_loss", "=", "loss_arr", ".", "max", "(", "dim", "=", "0", ")", "\n", "delta", "=", "delta_arr", "[", "max_loss", "[", "1", "]", ",", "torch", ".", "arange", "(", "batch_size", ")", ",", "0", "]", "\n", "delta", "=", "delta", ".", "view", "(", "batch_size", ",", "3", ",", "X", ".", "shape", "[", "2", "]", ",", "X", ".", "shape", "[", "3", "]", ")", "\n", "\n", "output", "=", "model", "(", "clamp", "(", "X", "+", "delta", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "y", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "0.5", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "elif", "args", ".", "attack_type", "==", "\"avg_loss\"", ":", "\n", "        ", "output", "=", "model", "(", "\n", "clamp", "(", "X", "+", "delta_linf", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "loss_linf", "=", "criterion", "(", "output", ",", "y", ")", "\n", "output_l1", "=", "model", "(", "\n", "clamp", "(", "X", "+", "delta_l1", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "loss_l1", "=", "criterion", "(", "output_l1", ",", "y", ")", "\n", "output_l2", "=", "model", "(", "\n", "clamp", "(", "X", "+", "delta_l2", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "loss_l2", "=", "criterion", "(", "output_l2", ",", "y", ")", "\n", "loss", "=", "(", "loss_linf", "+", "loss_l1", "+", "loss_l2", ")", "/", "3", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "0.5", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "y", ".", "size", "(", "0", ")", "\n", "train_acc", "+=", "(", "output", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "train_n", "+=", "y", ".", "size", "(", "0", ")", "\n", "\n", "", "best_state_dict", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "train_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'%d \\t %.1f \\t %.4f \\t %.4f \\t %.4f'", "%", "\n", "(", "epoch", ",", "(", "train_time", "-", "start_time", ")", "/", "60", ",", "lr", ",", "train_loss", "/", "train_n", ",", "\n", "train_acc", "/", "train_n", ")", ")", "\n", "", "torch", ".", "save", "(", "best_state_dict", ",", "args", ".", "fname", "+", "'.pth'", ")", "\n", "logger", ".", "info", "(", "'Total train time: %.4f minutes'", ",", "\n", "(", "train_time", "-", "start_start_time", ")", "/", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp": [[38, 40], ["torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["def", "clamp", "(", "X", ",", "lower_limit", ",", "upper_limit", ")", ":", "\n", "  ", "return", "torch", ".", "max", "(", "torch", ".", "min", "(", "X", ",", "upper_limit", ")", ",", "lower_limit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms": [[42, 44], ["Z.view().norm", "Z.view"], "function", ["None"], ["", "def", "norms", "(", "Z", ")", ":", "\n", "  ", "return", "Z", ".", "view", "(", "Z", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "norm", "(", "dim", "=", "1", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p": [[46, 48], ["Z.view().norm", "Z.view"], "function", ["None"], ["", "def", "norms_p", "(", "Z", ",", "order", ")", ":", "\n", "  ", "return", "Z", ".", "view", "(", "Z", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "norm", "(", "p", "=", "order", ",", "dim", "=", "1", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_l1": [[50, 52], ["Z.view().abs().sum", "Z.view().abs", "Z.view"], "function", ["None"], ["", "def", "norms_l1", "(", "Z", ")", ":", "\n", "  ", "return", "Z", ".", "view", "(", "Z", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.l1_dir_topk": [[54, 71], ["grad.detach().cpu().numpy.detach().cpu().numpy", "numpy.abs", "numpy.sign", "numpy.percentile", "numpy.sum", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to.view", "grad.detach().cpu().numpy.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "grad.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "l1_dir_topk", "(", "grad", ",", "delta", ",", "X", ",", "k", "=", "20", ")", ":", "\n", "  ", "X_curr", "=", "X", "+", "delta", "\n", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "channels", "=", "X", ".", "shape", "[", "1", "]", "\n", "pix", "=", "X", ".", "shape", "[", "2", "]", "\n", "\n", "grad", "=", "grad", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "abs_grad", "=", "np", ".", "abs", "(", "grad", ")", "\n", "sign", "=", "np", ".", "sign", "(", "grad", ")", "\n", "\n", "max_abs_grad", "=", "np", ".", "percentile", "(", "abs_grad", ",", "k", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "tied_for_max", "=", "(", "abs_grad", ">=", "max_abs_grad", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "num_ties", "=", "np", ".", "sum", "(", "tied_for_max", ",", "(", "1", ",", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "optimal_perturbation", "=", "sign", "*", "tied_for_max", "/", "num_ties", "\n", "\n", "optimal_perturbation", "=", "torch", ".", "from_numpy", "(", "optimal_perturbation", ")", ".", "to", "(", "device", ")", "\n", "return", "optimal_perturbation", ".", "view", "(", "batch_size", ",", "channels", ",", "pix", ",", "pix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_l1ball": [[73, 82], ["x.abs", "evaluate.proj_simplex", "y.view.view", "x.sign", "x.abs.sum"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_simplex"], ["", "def", "proj_l1ball", "(", "x", ",", "epsilon", "=", "12", ",", "device", "=", "\"cuda:1\"", ")", ":", "\n", "  ", "assert", "epsilon", ">", "0", "\n", "u", "=", "x", ".", "abs", "(", ")", "\n", "if", "(", "u", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "<=", "epsilon", ")", ".", "all", "(", ")", ":", "\n", "    ", "return", "x", "\n", "", "y", "=", "proj_simplex", "(", "u", ",", "s", "=", "epsilon", ",", "device", "=", "device", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "y", "*=", "x", ".", "sign", "(", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_simplex": [[84, 105], ["v.view", "torch.sort", "torch.sort", "torch.sort", "comp.cumsum.cumsum", "comp.cumsum", "torch.argmax", "torch.argmax", "torch.argmax", "rho.view.view", "torch.HalfTensor().to", "torch.HalfTensor().to", "torch.HalfTensor().to", "torch.div", "torch.div", "torch.div", "theta.view.view", "torch.arange().float().to", "torch.arange().float().to", "torch.arange().float().to", "torch.HalfTensor().to.float", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "rho.view.float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "v.float", "torch.arange", "torch.arange", "torch.arange", "range"], "function", ["None"], ["", "def", "proj_simplex", "(", "v", ",", "s", "=", "1", ",", "device", "=", "\"cuda:1\"", ")", ":", "\n", "  ", "assert", "s", ">", "0", ",", "\"Radius s must be strictly positive (%d <= 0)\"", "%", "s", "\n", "batch_size", "=", "v", ".", "shape", "[", "0", "]", "\n", "u", "=", "v", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "n", "=", "u", ".", "shape", "[", "2", "]", "\n", "u", ",", "indices", "=", "torch", ".", "sort", "(", "u", ",", "descending", "=", "True", ")", "\n", "cssv", "=", "u", ".", "cumsum", "(", "dim", "=", "2", ")", "\n", "vec", "=", "u", "*", "torch", ".", "arange", "(", "1", ",", "n", "+", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "comp", "=", "(", "vec", ">", "(", "cssv", "-", "s", ")", ")", ".", "half", "(", ")", "\n", "u", "=", "comp", ".", "cumsum", "(", "dim", "=", "2", ")", "\n", "w", "=", "(", "comp", "-", "1", ")", ".", "cumsum", "(", "dim", "=", "2", ")", "\n", "u", "=", "u", "+", "w", "\n", "rho", "=", "torch", ".", "argmax", "(", "u", ",", "dim", "=", "2", ")", "\n", "rho", "=", "rho", ".", "view", "(", "batch_size", ")", "\n", "c", "=", "torch", ".", "HalfTensor", "(", "[", "cssv", "[", "i", ",", "0", ",", "rho", "[", "i", "]", "]", "\n", "for", "i", "in", "range", "(", "cssv", ".", "shape", "[", "0", "]", ")", "]", ")", ".", "to", "(", "device", ")", "\n", "c", "=", "c", "-", "s", "\n", "theta", "=", "torch", ".", "div", "(", "c", ".", "float", "(", ")", ",", "(", "rho", ".", "float", "(", ")", "+", "1", ")", ")", "\n", "theta", "=", "theta", ".", "view", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "w", "=", "(", "v", ".", "float", "(", ")", "-", "theta", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.attack_pgd": [[107, 173], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "range", "torch.rand_like.detach", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "range", "torch.cross_entropy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "delta[].uniform_", "delta[].uniform_", "delta[].uniform_", "model", "torch.cross_entropy", "F.cross_entropy.backward", "torch.rand_like.grad.detach", "evaluate.clamp", "torch.rand_like.grad.zero_", "model", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "[].item", "[].item", "[].item", "torch.rand_like", "torch.rand_like", "torch.rand_like", "norms_p().clamp", "evaluate.clamp", "[].item", "[].item", "[].item", "torch.distributions.laplace.Laplace", "laplace.Laplace.sample", "norms_l1().clamp", "model.max", "evaluate.norms_p", "norms_p().clamp", "torch.rand_like.detach", "torch.rand_like.new_tensor", "torch.rand_like.new_tensor", "evaluate.norms_l1", "torch.sign", "torch.sign", "torch.sign", "evaluate.norms", "evaluate.proj_l1ball", "torch.rand_like.detach", "evaluate.norms_p", "evaluate.l1_dir_topk", "epsilon.detach().cpu().numpy", "torch.rand_like.detach", "evaluate.norms_l1", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach().cpu().numpy", "epsilon.detach", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_l1", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_l1ball", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.l1_dir_topk", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_l1"], ["", "def", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "norm", ",", "dataset", ",", "restarts", "=", "1", ",", "version", "=", "0", ")", ":", "\n", "  ", "max_loss", "=", "torch", ".", "zeros", "(", "y", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "max_delta", "=", "torch", ".", "zeros_like", "(", "X", ")", ".", "cuda", "(", ")", "\n", "for", "_", "in", "range", "(", "restarts", ")", ":", "\n", "    ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", ".", "cuda", "(", ")", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "      ", "if", "dataset", "!=", "\"tinyimagenet\"", ":", "\n", "        ", "epsilon", "=", "(", "8", "/", "255.", ")", "/", "std", "\n", "", "else", ":", "\n", "        ", "epsilon", "=", "(", "4", "/", "255.", ")", "/", "std", "\n", "", "attack_iters", "=", "50", "\n", "alpha", "=", "(", "1.", "/", "255.", ")", "/", "std", "\n", "delta", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "      ", "if", "dataset", "!=", "\"tinyimagenet\"", ":", "\n", "        ", "epsilon", "=", "(", "128.", "/", "255.", ")", "/", "std", "\n", "", "else", ":", "\n", "        ", "epsilon", "=", "(", "80", "/", "255.", ")", "/", "std", "\n", "", "attack_iters", "=", "50", "\n", "alpha", "=", "(", "25.", "/", "255.", ")", "/", "std", "\n", "delta", "=", "torch", ".", "rand_like", "(", "X", ",", "requires_grad", "=", "True", ")", "\n", "delta", ".", "data", "*=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_p", "(", "\n", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "      ", "epsilon", "=", "(", "2000", "/", "255.", ")", "/", "std", "\n", "attack_iters", "=", "100", "\n", "alpha", "=", "(", "255.", "/", "255.", ")", "/", "std", "\n", "ini", "=", "laplace", ".", "Laplace", "(", "loc", "=", "delta", ".", "new_tensor", "(", "0", ")", ",", "scale", "=", "delta", ".", "new_tensor", "(", "1", ")", ")", "\n", "delta", ".", "data", "=", "ini", ".", "sample", "(", "delta", ".", "data", ".", "shape", ")", "\n", "delta", ".", "data", "=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_l1", "(", "delta", ".", "detach", "(", ")", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "delta", ".", "requires_grad", "=", "True", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "      ", "output", "=", "model", "(", "X", "+", "delta", ")", "\n", "incorrect", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", "!=", "y", "\n", "correct", "=", "(", "~", "incorrect", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "half", "(", ")", "\n", "correct", "=", "1.0", "if", "version", "==", "0", "else", "correct", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "        ", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", "+", "correct", "*", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "\n", "-", "epsilon", ",", "epsilon", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "        ", "delta", ".", "data", "=", "delta", ".", "data", "+", "correct", "*", "alpha", "*", "grad", "/", "norms", "(", "grad", ")", "\n", "delta", ".", "data", "*=", "epsilon", "/", "norms_p", "(", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "\n", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "        ", "k", "=", "99", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "correct", "*", "alpha", "*", "l1_dir_topk", "(", "\n", "grad", ",", "delta", ".", "data", ",", "X", ",", "k", ")", "\n", "if", "(", "norms_l1", "(", "delta", ")", ">", "epsilon", ")", ".", "any", "(", ")", ":", "\n", "          ", "delta", ".", "data", "=", "proj_l1ball", "(", "delta", ".", "data", ",", "\n", "epsilon", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "\n", "device", "=", "device", ")", "\n", "", "", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", ",", "lower_limit", "-", "X", ",", "upper_limit", "-", "X", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "", "all_loss", "=", "F", ".", "cross_entropy", "(", "model", "(", "X", "+", "delta", ")", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.get_loaders": [[175, 235], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_loaders", "(", "dir_", ",", "batch_size", ",", "dataset", ")", ":", "\n", "  ", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cifar10_mean", ",", "cifar10_std", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "64", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "num_workers", "=", "2", "\n", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "train_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/train'", ",", "\n", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/val'", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.get_args": [[237, 260], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "26", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'../cifar-data'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'cifar100'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--fname'", ",", "default", "=", "'cifar_linf_pgd'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--attack'", ",", "\n", "default", "=", "'pgd'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'pgd'", ",", "'fgsm'", ",", "'ddn'", ",", "'none'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_lib'", ",", "default", "=", "'custom'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "default", "=", "'linf'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "default", "=", "8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--attack-iters'", ",", "default", "=", "200", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--restarts'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--width-factor'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'WideResNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "default", "=", "'linf'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_cal'", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.get_attack": [[262, 293], ["foolbox.SaltAndPepperNoiseAttack", "foolbox.EADAttack", "foolbox.SparseL1DescentAttack", "foolbox.L2PGD", "foolbox.L2RepeatedAdditiveGaussianNoiseAttack", "foolbox.L2CarliniWagnerAttack", "foolbox.L2BrendelBethgeAttack", "foolbox.FGSM", "foolbox.LinfPGD", "foolbox.MomentumIterativeAttack", "foolbox.LinfinityBrendelBethgeAttack", "Exception"], "function", ["None"], ["", "def", "get_attack", "(", "fmodel", ",", "attack", ",", "init_attack", "=", "None", ")", ":", "\n", "# L0", "\n", "  ", "if", "attack", "==", "'SAPA'", ":", "\n", "    ", "A", "=", "fa", ".", "SaltAndPepperNoiseAttack", "(", ")", "\n", "", "elif", "attack", "==", "'EAD'", ":", "\n", "    ", "A", "=", "fa", ".", "EADAttack", "(", "decision_rule", "=", "'L1'", ",", "binary_search_steps", "=", "5", ",", "steps", "=", "1000", ")", "\n", "", "elif", "attack", "==", "\"PGDL1\"", ":", "\n", "    ", "A", "=", "fa", ".", "SparseL1DescentAttack", "(", ")", "\n", "\n", "# L2", "\n", "", "elif", "'PGDL2'", "in", "attack", ":", "\n", "    ", "A", "=", "fa", ".", "L2PGD", "(", ")", "\n", "", "elif", "attack", "==", "'AGNA'", ":", "\n", "    ", "A", "=", "fa", ".", "L2RepeatedAdditiveGaussianNoiseAttack", "(", ")", "\n", "", "elif", "attack", "==", "\"CWL2\"", ":", "\n", "    ", "A", "=", "fa", ".", "L2CarliniWagnerAttack", "(", "binary_search_steps", "=", "5", ",", "steps", "=", "200", ")", "\n", "", "elif", "attack", "==", "\"BBL2\"", ":", "\n", "    ", "A", "=", "fa", ".", "L2BrendelBethgeAttack", "(", "init_attack", "=", "init_attack", ")", "\n", "\n", "# L inf", "\n", "", "elif", "'FGSM'", "in", "attack", "and", "not", "'IFGSM'", "in", "attack", ":", "\n", "    ", "A", "=", "fa", ".", "FGSM", "(", ")", "\n", "", "elif", "'PGDLinf'", "in", "attack", ":", "\n", "    ", "A", "=", "fa", ".", "LinfPGD", "(", ")", "\n", "", "elif", "'MIM'", "in", "attack", ":", "\n", "    ", "A", "=", "fa", ".", "MomentumIterativeAttack", "(", ")", "\n", "", "elif", "attack", "==", "\"BBLinf\"", ":", "\n", "    ", "A", "=", "fa", ".", "LinfinityBrendelBethgeAttack", "(", "init_attack", "=", "init_attack", ")", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.main": [[295, 453], ["evaluate.get_args", "logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "evaluate.get_loaders", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "wideresnet.WideResNet.load_state_dict", "wideresnet.WideResNet.eval", "wideresnet.WideResNet.float", "preact_resnet.resnet50.cuda", "numpy.ones", "tqdm.tqdm", "print", "print", "wideresnet.WideResNet", "ValueError", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "enumerate", "foolbox.PyTorchModel", "range", "preact_resnet.resnet50", "X.cuda", "y.cuda", "X[].view", "y[].long().view", "evaluate.attack_pgd", "torch.no_grad", "torch.no_grad", "torch.no_grad", "wideresnet.WideResNet.", "wideresnet.WideResNet.", "len", "time.time", "numpy.ones", "iter().next", "foolbox.attacks.DatasetAttack", "fb.attacks.DatasetAttack.feed", "tqdm.tqdm", "print", "numpy.ones", "tqdm.tqdm", "print", "images.cuda", "labels.cuda", "evaluate.get_attack", "evaluate.get_attack", "enumerate", "X[].view", "y[].long().view", "autoattack.AutoAttack", "enumerate", "X[].view", "y[].long().view", "autoattack.AutoAttack.run_standard_evaluation", "wideresnet.WideResNet.", "torch.cross_entropy", "y[].long", "iter", "X.cuda", "y.cuda", "get_attack.", "success.cpu().numpy().astype.cpu().numpy().astype", "wideresnet.WideResNet.", "autoattack.AutoAttack", "X.cuda", "y.cuda", "y[].long", "success.cpu().numpy().astype.mean", "success.cpu().numpy().astype.mean", "print", "y[].long", "model.max", "model.max", "success.cpu().numpy().astype.cpu().numpy", "model.max", "success.cpu().numpy().astype.cpu", "model.max", "model.max"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_args", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_loaders", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.get_attack", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.get_attack", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.mean"], ["", "def", "main", "(", ")", ":", "\n", "  ", "args", "=", "get_args", "(", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "data_dir", "=", "args", ".", "dataset", "+", "\"-data\"", "\n", "train_loader", ",", "test_loader", "=", "get_loaders", "(", "args", ".", "data_dir", ",", "args", ".", "batch_size", ",", "\n", "args", ".", "dataset", ")", "\n", "\n", "epsilon", "=", "(", "args", ".", "epsilon", "/", "255.", ")", "/", "std", "\n", "alpha", "=", "(", "args", ".", "alpha", "/", "255.", ")", "/", "std", "\n", "\n", "if", "args", ".", "model", "==", "'resnet50'", ":", "\n", "    ", "model", "=", "ResNet50", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'WideResNet'", ":", "\n", "    ", "model", "=", "WideResNet", "(", "28", ",", "10", ",", "widen_factor", "=", "args", ".", "width_factor", ",", "dropRate", "=", "0.0", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown model\"", ")", "\n", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "fname", "+", "args", ".", "model_type", "+", "'.pth'", ",", "\n", "map_location", "=", "'cuda:0'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "float", "(", ")", "\n", "\n", "total_adv_loss", "=", "0", "\n", "total_adv_acc", "=", "0", "\n", "total_clean_loss", "=", "0", "\n", "total_clean_acc", "=", "0", "\n", "total", "=", "0", "\n", "\n", "if", "args", ".", "attack_lib", "==", "'custom'", ":", "\n", "    ", "x_adv", "=", "[", "]", "\n", "total", "=", "0", "\n", "max_check", "=", "1000", "\n", "output", "=", "np", ".", "ones", "(", "(", "max_check", "+", "1", ")", ")", "\n", "for", "i", ",", "(", "X", ",", "y", ")", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "      ", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "if", "args", ".", "attack", "==", "'pgd'", ":", "\n", "        ", "image", "=", "X", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "view", "(", "1", ",", "3", ",", "X", ".", "shape", "[", "2", "]", ",", "X", ".", "shape", "[", "3", "]", ")", "\n", "label", "=", "y", "[", "0", "]", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "delta", "=", "attack_pgd", "(", "model", ",", "image", ",", "label", ",", "args", ".", "norm", ",", "args", ".", "dataset", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output_adv", "=", "model", "(", "image", "+", "delta", ")", "\n", "output_clean", "=", "model", "(", "image", ")", "\n", "total_adv_acc", "+=", "(", "output_adv", ".", "max", "(", "1", ")", "[", "1", "]", "==", "label", ")", ".", "item", "(", ")", "\n", "total_clean_acc", "+=", "(", "output_clean", ".", "max", "(", "1", ")", "[", "1", "]", "==", "label", ")", ".", "item", "(", ")", "\n", "output", "[", "total", "]", "=", "(", "output_adv", ".", "max", "(", "1", ")", "[", "1", "]", "==", "label", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\n", "np", ".", "float32", ")", "\n", "total", "+=", "1", "\n", "\n", "", "if", "(", "total", ">=", "max_check", ")", ":", "\n", "        ", "break", "\n", "\n", "", "", "print", "(", "'Test Adversarial Acc: %.4f'", "%", "(", "total_adv_acc", "/", "total", ")", ")", "\n", "print", "(", "'Test Clean Acc: %.4f'", "%", "(", "total_clean_acc", "/", "total", ")", ")", "\n", "\n", "", "elif", "args", ".", "attack_lib", "==", "\"foolbox\"", ":", "\n", "    ", "fmodel", "=", "fb", ".", "PyTorchModel", "(", "model", ",", "bounds", "=", "(", "0", ",", "1", ")", ",", "device", "=", "device", ")", "\n", "attacks_list", "=", "[", "\n", "\"PGDLinf\"", ",", "\"BBLinf\"", ",", "\"PGDL1\"", ",", "\"EAD\"", ",", "\"SAPA\"", ",", "'BBL2'", ",", "'CWL2'", ",", "'AGNA'", ",", "\n", "'PGDL2'", "\n", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "attacks_list", ")", ")", ":", "\n", "      ", "start", "=", "time", ".", "time", "(", ")", "\n", "attack_name", "=", "attacks_list", "[", "j", "]", "\n", "if", "attack_name", "in", "linf_attacks", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "          ", "epsilons", "=", "[", "4.", "/", "255", "]", "\n", "", "else", ":", "\n", "          ", "epsilons", "=", "[", "8.", "/", "255", "]", "\n", "", "", "elif", "attack_name", "in", "l2_attacks", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "          ", "epsilons", "=", "[", "80.", "/", "255", "]", "\n", "", "else", ":", "\n", "          ", "epsilons", "=", "[", "128.", "/", "255", "]", "\n", "", "", "elif", "attack_name", "in", "l1_attacks", ":", "\n", "        ", "epsilons", "=", "[", "2000.", "/", "255", "]", "\n", "", "total", "=", "0", "\n", "robust_accuracy", "=", "0", "\n", "total_adv_acc", "=", "0", "\n", "max_check", "=", "1000", "\n", "output", "=", "np", ".", "ones", "(", "(", "max_check", "+", "1", ")", ")", "\n", "images", ",", "labels", "=", "iter", "(", "test_loader", ")", ".", "next", "(", ")", "\n", "images", ",", "labels", "=", "images", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "batches", "=", "[", "(", "images", "[", ":", "10", "]", ",", "labels", "[", ":", "10", "]", ")", "]", "\n", "init_attack", "=", "fb", ".", "attacks", ".", "DatasetAttack", "(", ")", "\n", "init_attack", ".", "feed", "(", "fmodel", ",", "batches", "[", "0", "]", "[", "0", "]", ")", "# feed 1st batch of inputs", "\n", "if", "args", ".", "dataset", "!=", "\"tinyimagenet\"", ":", "\n", "        ", "attack", "=", "get_attack", "(", "fmodel", ",", "attacks_list", "[", "j", "]", ",", "init_attack", ")", "\n", "", "else", ":", "\n", "        ", "attack", "=", "get_attack", "(", "fmodel", ",", "attacks_list", "[", "j", "]", ")", "\n", "\n", "", "for", "i", ",", "(", "X", ",", "y", ")", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "        ", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "image", "=", "X", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "view", "(", "1", ",", "3", ",", "X", ".", "shape", "[", "2", "]", ",", "X", ".", "shape", "[", "3", "]", ")", "\n", "label", "=", "y", "[", "0", "]", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "try", ":", "\n", "          ", "advs", ",", "_", ",", "success", "=", "attack", "(", "fmodel", ",", "image", ",", "label", ",", "epsilons", "=", "epsilons", ")", "\n", "success", "=", "success", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "robust_accuracy", "+=", "1", "-", "success", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "output", "[", "total", "]", "=", "1", "-", "success", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "total", "+=", "1", "\n", "output_adv", "=", "model", "(", "advs", "[", "0", "]", ")", "\n", "# make_model_diagrams(output_adv, label)", "\n", "", "except", "Exception", "as", "e", ":", "\n", "          ", "output", "[", "total", "]", "=", "1.0", "\n", "print", "(", "\"assertion error\"", ",", "e", ")", "\n", "total", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "(", "total", ">=", "max_check", ")", ":", "\n", "          ", "break", "\n", "\n", "", "", "print", "(", "\"Robust accuracy for attack %s: %.4f %.4f\"", "%", "\n", "(", "attacks_list", "[", "j", "]", ",", "robust_accuracy", "/", "total", ",", "total", ")", ")", "\n", "\n", "", "", "elif", "args", ".", "attack_lib", "==", "\"autoattack\"", ":", "\n", "    ", "if", "args", ".", "norm", "==", "\"linf\"", ":", "\n", "      ", "if", "args", ".", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "        ", "epsilon", "=", "4.", "/", "255", "\n", "", "else", ":", "\n", "        ", "epsilon", "=", "8.", "/", "255", "\n", "", "adversary", "=", "AutoAttack", "(", "model", ",", "\n", "norm", "=", "'Linf'", ",", "\n", "eps", "=", "epsilon", ",", "\n", "version", "=", "'standard'", ")", "\n", "", "elif", "args", ".", "norm", "==", "\"l2\"", ":", "\n", "      ", "if", "args", ".", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "        ", "epsilon", "=", "80.", "/", "255", "\n", "", "else", ":", "\n", "        ", "epsilon", "=", "128.", "/", "255", "\n", "", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'L2'", ",", "eps", "=", "epsilon", ",", "version", "=", "'standard'", ")", "\n", "", "max_check", "=", "1000", "\n", "output", "=", "np", ".", "ones", "(", "(", "max_check", "+", "1", ")", ")", "\n", "total", "=", "0", "\n", "for", "i", ",", "(", "X", ",", "y", ")", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "      ", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "image", "=", "X", "[", "0", ",", ":", ",", ":", ",", ":", "]", ".", "view", "(", "1", ",", "3", ",", "X", ".", "shape", "[", "2", "]", ",", "X", ".", "shape", "[", "3", "]", ")", "\n", "label", "=", "y", "[", "0", "]", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "adv_X", "=", "adversary", ".", "run_standard_evaluation", "(", "image", ",", "\n", "label", ",", "\n", "bs", "=", "image", ".", "shape", "[", "0", "]", ")", "\n", "output_adv", "=", "model", "(", "adv_X", ")", "\n", "loss_adv", "=", "F", ".", "cross_entropy", "(", "output_adv", ",", "label", ")", "\n", "total_adv_acc", "+=", "(", "output_adv", ".", "max", "(", "1", ")", "[", "1", "]", "==", "label", ")", ".", "item", "(", ")", "\n", "output", "[", "total", "]", "=", "(", "output_adv", ".", "max", "(", "1", ")", "[", "1", "]", "==", "label", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\n", "np", ".", "float32", ")", "\n", "total", "+=", "1", "\n", "\n", "if", "(", "total", ">=", "max_check", ")", ":", "\n", "        ", "break", "\n", "", "", "print", "(", "'Test Adversarial Acc: %.4f'", "%", "(", "total_adv_acc", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.wideresnet.BasicBlock.__init__": [[9, 36], ["layers.MetaModule.__init__", "layers.MetaBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.MetaConv2d", "layers.MetaConv2d"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "MetaBatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "MetaConv2d", "(", "out_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "MetaConv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.wideresnet.BasicBlock.forward": [[37, 47], ["wideresnet.BasicBlock.relu2", "wideresnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.conv1", "wideresnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "not", "self", ".", "equalInOut", ":", "\n", "      ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "      ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.wideresnet.NetworkBlock.__init__": [[50, 60], ["layers.MetaModule.__init__", "wideresnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActResNet._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "\n", "nb_layers", ",", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "block", ",", "\n", "stride", ",", "\n", "dropRate", "=", "0.0", ")", ":", "\n", "    ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "\n", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.wideresnet.NetworkBlock._make_layer": [[61, 69], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "\n", "dropRate", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "      ", "layers", ".", "append", "(", "\n", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "\n", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.wideresnet.NetworkBlock.forward": [[70, 72], ["wideresnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.wideresnet.WideResNet.__init__": [[75, 111], ["layers.MetaModule.__init__", "layers.MetaConv2d", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "layers.MetaBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.MetaLinear", "wideresnet.WideResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "    ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "3", ",", "\n", "nChannels", "[", "0", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "\n", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "\n", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "\n", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "MetaLinear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "MetaConv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "MetaBatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "MetaLinear", ")", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.wideresnet.WideResNet.forward": [[112, 121], ["wideresnet.WideResNet.conv1", "wideresnet.WideResNet.block1", "wideresnet.WideResNet.block2", "wideresnet.WideResNet.block3", "wideresnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wideresnet.WideResNet.fc", "wideresnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.params": [[17, 20], ["layers.MetaModule.named_params"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_params"], ["  ", "def", "params", "(", "self", ")", ":", "\n", "    ", "for", "name", ",", "param", "in", "self", ".", "named_params", "(", "self", ")", ":", "\n", "      ", "yield", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_leaves": [[21, 23], ["None"], "methods", ["None"], ["", "", "def", "named_leaves", "(", "self", ")", ":", "\n", "    ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_submodules": [[24, 26], ["None"], "methods", ["None"], ["", "def", "named_submodules", "(", "self", ")", ":", "\n", "    ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_params": [[27, 46], ["hasattr", "curr_module.named_children", "set", "curr_module.named_leaves", "curr_module._parameters.items", "layers.MetaModule.named_params", "set.add", "set.add"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaBatchNorm2d.named_leaves", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_params"], ["", "def", "named_params", "(", "self", ",", "curr_module", "=", "None", ",", "memo", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "if", "memo", "is", "None", ":", "\n", "      ", "memo", "=", "set", "(", ")", "\n", "\n", "", "if", "hasattr", "(", "curr_module", ",", "'named_leaves'", ")", ":", "\n", "      ", "for", "name", ",", "p", "in", "curr_module", ".", "named_leaves", "(", ")", ":", "\n", "        ", "if", "p", "is", "not", "None", "and", "p", "not", "in", "memo", ":", "\n", "          ", "memo", ".", "add", "(", "p", ")", "\n", "yield", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "name", ",", "p", "\n", "", "", "", "else", ":", "\n", "      ", "for", "name", ",", "p", "in", "curr_module", ".", "_parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "p", "is", "not", "None", "and", "p", "not", "in", "memo", ":", "\n", "          ", "memo", ".", "add", "(", "p", ")", "\n", "yield", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "name", ",", "p", "\n", "\n", "", "", "", "for", "mname", ",", "module", "in", "curr_module", ".", "named_children", "(", ")", ":", "\n", "      ", "submodule_prefix", "=", "prefix", "+", "(", "'.'", "if", "prefix", "else", "''", ")", "+", "mname", "\n", "for", "name", ",", "p", "in", "self", ".", "named_params", "(", "module", ",", "memo", ",", "submodule_prefix", ")", ":", "\n", "        ", "yield", "name", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.update_params": [[47, 75], ["zip", "layers.MetaModule.named_params", "layers.MetaModule.named_params", "layers.MetaModule.set_param", "layers.to_var", "layers.MetaModule.set_param", "param.detach_.detach_.detach_", "layers.MetaModule.set_param", "layers.to_var", "to_var.detach", "to_var.detach"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.set_param", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.set_param", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.set_param", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var"], ["", "", "", "def", "update_params", "(", "self", ",", "\n", "lr_inner", ",", "\n", "first_order", "=", "False", ",", "\n", "source_params", "=", "None", ",", "\n", "detach", "=", "False", ")", ":", "\n", "    ", "if", "source_params", "is", "not", "None", ":", "\n", "      ", "for", "tgt", ",", "src", "in", "zip", "(", "self", ".", "named_params", "(", "self", ")", ",", "source_params", ")", ":", "\n", "        ", "name_t", ",", "param_t", "=", "tgt", "\n", "# name_s, param_s = src", "\n", "# grad = param_s.grad", "\n", "# name_s, param_s = src", "\n", "grad", "=", "src", "\n", "if", "first_order", ":", "\n", "          ", "grad", "=", "to_var", "(", "grad", ".", "detach", "(", ")", ".", "data", ")", "\n", "", "tmp", "=", "param_t", "-", "lr_inner", "*", "grad", "\n", "self", ".", "set_param", "(", "self", ",", "name_t", ",", "tmp", ")", "\n", "", "", "else", ":", "\n", "      ", "for", "name", ",", "param", "in", "self", ".", "named_params", "(", "self", ")", ":", "\n", "        ", "if", "not", "detach", ":", "\n", "          ", "grad", "=", "param", ".", "grad", "\n", "if", "first_order", ":", "\n", "            ", "grad", "=", "to_var", "(", "grad", ".", "detach", "(", ")", ".", "data", ")", "\n", "", "tmp", "=", "param", "-", "lr_inner", "*", "grad", "\n", "self", ".", "set_param", "(", "self", ",", "name", ",", "tmp", ")", "\n", "", "else", ":", "\n", "          ", "param", "=", "param", ".", "detach_", "(", "\n", ")", "# https://blog.csdn.net/qq_39709535/article/details/81866686", "\n", "self", ".", "set_param", "(", "self", ",", "name", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.set_param": [[76, 87], ["name.split", "curr_mod.named_children", "setattr", "layers.MetaModule.set_param"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.set_param"], ["", "", "", "", "def", "set_param", "(", "self", ",", "curr_mod", ",", "name", ",", "param", ")", ":", "\n", "    ", "if", "'.'", "in", "name", ":", "\n", "      ", "n", "=", "name", ".", "split", "(", "'.'", ")", "\n", "module_name", "=", "n", "[", "0", "]", "\n", "rest", "=", "'.'", ".", "join", "(", "n", "[", "1", ":", "]", ")", "\n", "for", "name", ",", "mod", "in", "curr_mod", ".", "named_children", "(", ")", ":", "\n", "        ", "if", "module_name", "==", "name", ":", "\n", "          ", "self", ".", "set_param", "(", "mod", ",", "rest", ",", "param", ")", "\n", "break", "\n", "", "", "", "else", ":", "\n", "      ", "setattr", "(", "curr_mod", ",", "name", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.detach_params": [[88, 91], ["layers.MetaModule.named_params", "layers.MetaModule.set_param", "param.detach"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.set_param"], ["", "", "def", "detach_params", "(", "self", ")", ":", "\n", "    ", "for", "name", ",", "param", "in", "self", ".", "named_params", "(", "self", ")", ":", "\n", "      ", "self", ".", "set_param", "(", "self", ",", "name", ",", "param", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.copy": [[92, 97], ["other.named_params", "layers.MetaModule.set_param", "layers.to_var", "to_var.data.clone"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.named_params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.set_param", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var"], ["", "", "def", "copy", "(", "self", ",", "other", ",", "same_var", "=", "False", ")", ":", "\n", "    ", "for", "name", ",", "param", "in", "other", ".", "named_params", "(", ")", ":", "\n", "      ", "if", "not", "same_var", ":", "\n", "        ", "param", "=", "to_var", "(", "param", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "self", ".", "set_param", "(", "name", ",", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaLinear.__init__": [[100, 106], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "layers.MetaLinear.register_buffer", "layers.MetaLinear.register_buffer", "layers.to_var", "layers.to_var"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var"], ["  ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "Linear", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "\n", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaLinear.forward": [[107, 109], ["torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaLinear.named_leaves": [[110, 112], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "    ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaConv2d.__init__": [[115, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.MetaConv2d.register_buffer", "layers.to_var", "layers.MetaConv2d.register_buffer", "layers.MetaConv2d.register_buffer", "layers.to_var"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var"], ["  ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "Conv2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "in_channels", "=", "ignore", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "ignore", ".", "out_channels", "\n", "self", ".", "stride", "=", "ignore", ".", "stride", "\n", "self", ".", "padding", "=", "ignore", ".", "padding", "\n", "self", ".", "dilation", "=", "ignore", ".", "dilation", "\n", "self", ".", "groups", "=", "ignore", ".", "groups", "\n", "self", ".", "kernel_size", "=", "ignore", ".", "kernel_size", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "\n", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "if", "ignore", ".", "bias", "is", "not", "None", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "\n", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaConv2d.forward": [[133, 136], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaConv2d.named_leaves": [[137, 139], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "    ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaConvTranspose2d.__init__": [[142, 157], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "layers.MetaConvTranspose2d.register_buffer", "layers.to_var", "layers.MetaConvTranspose2d.register_buffer", "layers.MetaConvTranspose2d.register_buffer", "layers.to_var"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var"], ["  ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "ConvTranspose2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "stride", "=", "ignore", ".", "stride", "\n", "self", ".", "padding", "=", "ignore", ".", "padding", "\n", "self", ".", "dilation", "=", "ignore", ".", "dilation", "\n", "self", ".", "groups", "=", "ignore", ".", "groups", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "\n", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "if", "ignore", ".", "bias", "is", "not", "None", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "\n", "requires_grad", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaConvTranspose2d.forward": [[158, 163], ["layers.MetaConvTranspose2d._output_padding", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "output_size", "=", "None", ")", ":", "\n", "    ", "output_padding", "=", "self", ".", "_output_padding", "(", "x", ",", "output_size", ")", "\n", "return", "F", ".", "conv_transpose2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "output_padding", ",", "self", ".", "groups", ",", "\n", "self", ".", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaConvTranspose2d.named_leaves": [[164, 166], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "    ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaBatchNorm2d.__init__": [[169, 190], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.MetaBatchNorm2d.register_buffer", "layers.MetaBatchNorm2d.register_buffer", "layers.MetaBatchNorm2d.register_buffer", "layers.MetaBatchNorm2d.register_buffer", "layers.MetaBatchNorm2d.register_parameter", "layers.MetaBatchNorm2d.register_parameter", "layers.to_var", "layers.to_var", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var"], ["  ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "ignore", "=", "nn", ".", "BatchNorm2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_features", "=", "ignore", ".", "num_features", "\n", "self", ".", "eps", "=", "ignore", ".", "eps", "\n", "self", ".", "momentum", "=", "ignore", ".", "momentum", "\n", "self", ".", "affine", "=", "ignore", ".", "affine", "\n", "self", ".", "track_running_stats", "=", "ignore", ".", "track_running_stats", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'weight'", ",", "\n", "to_var", "(", "ignore", ".", "weight", ".", "data", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "to_var", "(", "ignore", ".", "bias", ".", "data", ",", "\n", "requires_grad", "=", "True", ")", ")", "\n", "\n", "", "if", "self", ".", "track_running_stats", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "self", ".", "num_features", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "register_parameter", "(", "'running_mean'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'running_var'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaBatchNorm2d.forward": [[191, 196], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.batch_norm", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.batch_norm", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.batch_norm", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.batch_norm"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "self", ".", "training", "\n", "or", "not", "self", ".", "track_running_stats", ",", "self", ".", "momentum", ",", "\n", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaBatchNorm2d.named_leaves": [[197, 199], ["None"], "methods", ["None"], ["", "def", "named_leaves", "(", "self", ")", ":", "\n", "    ", "return", "[", "(", "'weight'", ",", "self", ".", "weight", ")", ",", "(", "'bias'", ",", "self", ".", "bias", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.LambdaLayer.__init__": [[209, 212], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "    ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.LambdaLayer.forward": [[213, 215], ["layers.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.BasicBlock.__init__": [[220, 248], ["torch.Module.__init__", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "layers.MetaConv2d", "layers.MetaBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.pad", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.pad", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.pad", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.pad"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "MetaConv2d", "(", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "MetaBatchNorm2d", "(", "planes", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "      ", "if", "option", "==", "'A'", ":", "\n", "        ", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "\n", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "        ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "MetaBatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.BasicBlock.forward": [[249, 255], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "layers.BasicBlock.bn2", "layers.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "layers.BasicBlock.bn1", "layers.BasicBlock.conv2", "layers.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.ResNet32.__init__": [[258, 273], ["torch.Module.__init__", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "layers.ResNet32._make_layer", "layers.ResNet32._make_layer", "layers.ResNet32._make_layer", "layers.MetaLinear", "layers.ResNet32.apply"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActResNet._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "block", "=", "BasicBlock", ",", "num_blocks", "=", "[", "5", ",", "5", ",", "5", "]", ")", ":", "\n", "    ", "super", "(", "ResNet32", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "3", ",", "\n", "16", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "MetaLinear", "(", "64", ",", "num_classes", ")", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.ResNet32._make_layer": [[274, 282], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "    ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.ResNet32.forward": [[283, 292], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "layers.ResNet32.layer1", "layers.ResNet32.layer2", "layers.ResNet32.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "layers.ResNet32.view", "layers.ResNet32.linear", "layers.ResNet32.bn1", "layers.ResNet32.size", "layers.ResNet32.conv1", "layers.ResNet32.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.to_var": [[9, 13], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda"], "function", ["None"], ["def", "to_var", "(", "x", ",", "requires_grad", "=", "True", ")", ":", "\n", "  ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ",", "requires_grad", "=", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers._weights_init": [[201, 206], ["isinstance", "isinstance", "torch.kaiming_normal"], "function", ["None"], ["", "", "def", "_weights_init", "(", "m", ")", ":", "\n", "  ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "isinstance", "(", "m", ",", "MetaLinear", ")", "or", "isinstance", "(", "m", ",", "MetaConv2d", ")", ":", "\n", "    ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Batches.__init__": [[85, 101], ["torch.utils.data.DataLoader"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "batch_size", ",", "\n", "shuffle", ",", "\n", "set_random_choices", "=", "False", ",", "\n", "num_workers", "=", "0", ",", "\n", "drop_last", "=", "False", ")", ":", "\n", "    ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "set_random_choices", "=", "set_random_choices", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Batches.__iter__": [[102, 109], ["torch_backend.Batches.dataset.set_random_choices", "x.to().half", "y.to().long", "x.to", "y.to"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.Transform.set_random_choices", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Network.half"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "set_random_choices", ":", "\n", "      ", "self", ".", "dataset", ".", "set_random_choices", "(", ")", "\n", "", "return", "(", "{", "\n", "'input'", ":", "x", ".", "to", "(", "device", ")", ".", "half", "(", ")", ",", "\n", "'target'", ":", "y", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "}", "for", "(", "x", ",", "y", ")", "in", "self", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Batches.__len__": [[110, 112], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Identity.forward": [[120, 122], ["None"], "methods", ["None"], ["  ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Mul.__init__": [[125, 128], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "weight", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Mul.__call__": [[129, 131], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "*", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Flatten.forward": [[134, 136], ["x.view", "x.size", "x.size"], "methods", ["None"], ["  ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Add.forward": [[139, 141], ["None"], "methods", ["None"], ["  ", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "    ", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Concat.forward": [[144, 146], ["torch.cat"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.cat"], ["  ", "def", "forward", "(", "self", ",", "*", "xs", ")", ":", "\n", "    ", "return", "torch", ".", "cat", "(", "xs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Correct.forward": [[149, 151], ["classifier.max"], "methods", ["None"], ["  ", "def", "forward", "(", "self", ",", "classifier", ",", "target", ")", ":", "\n", "    ", "return", "classifier", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "==", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Network.__init__": [[172, 177], ["core.build_graph", "torch.nn.Module.__init__", "torch_backend.Network.graph.items", "setattr"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.build_graph", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "net", ")", ":", "\n", "    ", "self", ".", "graph", "=", "build_graph", "(", "net", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "for", "n", ",", "(", "v", ",", "_", ")", "in", "self", ".", "graph", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "n", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Network.forward": [[178, 183], ["dict", "torch_backend.Network.graph.items", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "self", ".", "cache", "=", "dict", "(", "inputs", ")", "\n", "for", "n", ",", "(", "_", ",", "i", ")", "in", "self", ".", "graph", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "cache", "[", "n", "]", "=", "getattr", "(", "self", ",", "n", ")", "(", "*", "[", "self", ".", "cache", "[", "x", "]", "for", "x", "in", "i", "]", ")", "\n", "", "return", "self", ".", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Network.half": [[184, 189], ["torch_backend.Network.children", "isinstance", "module.half"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Network.half"], ["", "def", "half", "(", "self", ")", ":", "\n", "    ", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "      ", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "half", "(", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.__init__": [[196, 201], ["optimizer", "torch_backend.TorchOptimiser.param_values"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.param_values"], ["  ", "def", "__init__", "(", "self", ",", "weights", ",", "optimizer", ",", "step_number", "=", "0", ",", "**", "opt_params", ")", ":", "\n", "    ", "self", ".", "weights", "=", "weights", "\n", "self", ".", "step_number", "=", "step_number", "\n", "self", ".", "opt_params", "=", "opt_params", "\n", "self", ".", "_opt", "=", "optimizer", "(", "weights", ",", "**", "self", ".", "param_values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.param_values": [[202, 206], ["callable", "v", "torch_backend.TorchOptimiser.opt_params.items"], "methods", ["None"], ["", "def", "param_values", "(", "self", ")", ":", "\n", "    ", "return", "{", "\n", "k", ":", "v", "(", "self", ".", "step_number", ")", "if", "callable", "(", "v", ")", "else", "v", "\n", "for", "k", ",", "v", "in", "self", ".", "opt_params", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.step": [[208, 212], ["torch_backend.TorchOptimiser._opt.param_groups[].update", "torch_backend.TorchOptimiser._opt.step", "torch_backend.TorchOptimiser.param_values"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.step", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.param_values"], ["", "def", "step", "(", "self", ")", ":", "\n", "    ", "self", ".", "step_number", "+=", "1", "\n", "self", ".", "_opt", ".", "param_groups", "[", "0", "]", ".", "update", "(", "**", "self", ".", "param_values", "(", ")", ")", "\n", "self", ".", "_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.__repr__": [[213, 215], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "repr", "(", "self", ".", "_opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend._": [[16, 19], ["core.to_numpy.register", "x.detach().cpu().numpy", "x.detach().cpu", "x.detach"], "function", ["None"], ["", "@", "to_numpy", ".", "register", "(", "torch", ".", "Tensor", ")", "\n", "def", "_", "(", "x", ")", ":", "\n", "  ", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.warmup_cudnn": [[21, 34], ["model.train", "model", "o[].sum().backward", "model.zero_grad", "torch.cuda.synchronize", "torch.Tensor().cuda().half", "torch.LongTensor().cuda", "o[].sum", "torch.Tensor().cuda", "torch.LongTensor", "numpy.random.randint", "torch.Tensor", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.Network.half"], ["", "def", "warmup_cudnn", "(", "model", ",", "batch_size", ")", ":", "\n", "#run forward and backward pass of the model on a batch of random inputs", "\n", "#to allow benchmarking of cudnn kernels", "\n", "  ", "batch", "=", "{", "\n", "'input'", ":", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "rand", "(", "batch_size", ",", "3", ",", "32", ",", "\n", "32", ")", ")", ".", "cuda", "(", ")", ".", "half", "(", ")", ",", "\n", "'target'", ":", "torch", ".", "LongTensor", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "10", ",", "batch_size", ")", ")", ".", "cuda", "(", ")", "\n", "}", "\n", "model", ".", "train", "(", "True", ")", "\n", "o", "=", "model", "(", "batch", ")", "\n", "o", "[", "'loss'", "]", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.cifar10": [[41, 56], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10"], "function", ["None"], ["", "def", "cifar10", "(", "root", ")", ":", "\n", "  ", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ")", "\n", "test_set", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "root", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ")", "\n", "return", "{", "\n", "'train'", ":", "{", "\n", "'data'", ":", "train_set", ".", "data", ",", "\n", "'labels'", ":", "train_set", ".", "targets", "\n", "}", ",", "\n", "'test'", ":", "{", "\n", "'data'", ":", "test_set", ".", "data", ",", "\n", "'labels'", ":", "test_set", ".", "targets", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.cifar100": [[60, 75], ["torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100"], "function", ["None"], ["", "def", "cifar100", "(", "root", ")", ":", "\n", "  ", "train_set", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ")", "\n", "test_set", "=", "torchvision", ".", "datasets", ".", "CIFAR100", "(", "root", "=", "root", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ")", "\n", "return", "{", "\n", "'train'", ":", "{", "\n", "'data'", ":", "train_set", ".", "data", ",", "\n", "'labels'", ":", "train_set", ".", "targets", "\n", "}", ",", "\n", "'test'", ":", "{", "\n", "'data'", ":", "test_set", ".", "data", ",", "\n", "'labels'", ":", "test_set", ".", "targets", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.batch_norm": [[153, 169], ["torch.nn.BatchNorm2d", "nn.BatchNorm2d.bias.data.fill_", "nn.BatchNorm2d.weight.data.fill_"], "function", ["None"], ["", "", "def", "batch_norm", "(", "num_channels", ",", "\n", "bn_bias_init", "=", "None", ",", "\n", "bn_bias_freeze", "=", "False", ",", "\n", "bn_weight_init", "=", "None", ",", "\n", "bn_weight_freeze", "=", "False", ")", ":", "\n", "  ", "m", "=", "nn", ".", "BatchNorm2d", "(", "num_channels", ")", "\n", "if", "bn_bias_init", "is", "not", "None", ":", "\n", "    ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "bn_bias_init", ")", "\n", "", "if", "bn_bias_freeze", ":", "\n", "    ", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "if", "bn_weight_init", "is", "not", "None", ":", "\n", "    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "bn_weight_init", ")", "\n", "", "if", "bn_weight_freeze", ":", "\n", "    ", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD": [[217, 230], ["torch_backend.TorchOptimiser"], "function", ["None"], ["", "", "def", "SGD", "(", "weights", ",", "\n", "lr", "=", "0", ",", "\n", "momentum", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "\n", "dampening", "=", "0", ",", "\n", "nesterov", "=", "False", ")", ":", "\n", "  ", "return", "TorchOptimiser", "(", "weights", ",", "\n", "torch", ".", "optim", ".", "SGD", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "dampening", "=", "dampening", ",", "\n", "nesterov", "=", "nesterov", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.initialize_weights": [[44, 55], ["isinstance", "module.weight.data.normal_", "isinstance", "math.sqrt", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_", "isinstance", "module.bias.data.zero_"], "function", ["None"], ["def", "initialize_weights", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "n", "=", "module", ".", "kernel_size", "[", "0", "]", "*", "module", ".", "kernel_size", "[", "1", "]", "*", "module", ".", "out_channels", "\n", "module", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "      ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.weight_reset": [[57, 60], ["isinstance", "isinstance", "m.reset_parameters"], "function", ["None"], ["", "", "def", "weight_reset", "(", "m", ")", ":", "\n", "  ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "    ", "m", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.fix_perturbation_size": [[62, 100], ["torch.Parameter().cuda", "evaluate.proj_l1ball.pow().flatten", "torch.where().flatten", "torch.where().flatten", "torch.where().flatten", "torch.where().flatten", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.cumsum().flip", "torch.cumsum().flip", "torch.cumsum().flip", "torch.cumsum().flip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.where", "torch.where", "torch.where", "torch.where", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "eta.reshape.reshape", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.clamp().view", "torch.where().flatten.pow", "torch.max", "torch.max", "torch.max", "torch.max", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.Parameter", "evaluate.proj_l1ball.pow", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "c.long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "evaluate.proj_l1ball", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "delta.pow().flatten.gather", "len", "ks.flip"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.cat", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.cat", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.cat", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.cat", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_l1ball", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp"], ["", "", "def", "fix_perturbation_size", "(", "x0", ",", "delta", ",", "norm", ")", ":", "\n", "  ", "\"\"\"\n    calculates eta such that\n        norm(clip(x0 + eta * delta, 0, 1)) == epsilon\n    assumes x0 and delta to have a batch dimension\n    and epsilon to be a scalar\n    \"\"\"", "\n", "if", "norm", "==", "\"l2\"", ":", "\n", "    ", "epsilon", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "128", "/", "255.", "]", ")", ",", "\n", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "n", ",", "ch", ",", "nx", ",", "ny", "=", "x0", ".", "shape", "\n", "assert", "delta", ".", "shape", "[", "0", "]", "==", "n", "\n", "delta2", "=", "delta", ".", "pow", "(", "2", ")", ".", "flatten", "(", "1", ")", "\n", "space", "=", "torch", ".", "where", "(", "delta", ">=", "0", ",", "1", "-", "x0", ",", "x0", ")", ".", "flatten", "(", "1", ")", "\n", "f2", "=", "space", ".", "pow", "(", "2", ")", "/", "torch", ".", "max", "(", "delta2", ",", "1e-20", "*", "torch", ".", "ones_like", "(", "delta2", ")", ")", "\n", "f2_sorted", ",", "ks", "=", "torch", ".", "sort", "(", "f2", ",", "dim", "=", "-", "1", ")", "\n", "m", "=", "torch", ".", "cumsum", "(", "delta2", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "ks", ".", "flip", "(", "dims", "=", "(", "1", ",", ")", ")", ")", ",", "\n", "dim", "=", "-", "1", ")", ".", "flip", "(", "dims", "=", "(", "1", ",", ")", ")", "\n", "dx", "=", "f2_sorted", "[", ":", ",", "1", ":", "]", "-", "f2_sorted", "[", ":", ",", ":", "-", "1", "]", "\n", "dx", "=", "torch", ".", "cat", "(", "(", "f2_sorted", "[", ":", ",", ":", "1", "]", ",", "dx", ")", ",", "dim", "=", "-", "1", ")", "\n", "dy", "=", "m", "*", "dx", "\n", "y", "=", "torch", ".", "cumsum", "(", "dy", ",", "dim", "=", "-", "1", ")", "\n", "c", "=", "y", ">=", "epsilon", "**", "2", "\n", "f", "=", "torch", ".", "arange", "(", "c", ".", "shape", "[", "-", "1", "]", ",", "0", ",", "-", "1", ",", "device", "=", "c", ".", "device", ")", "\n", "v", ",", "j", "=", "torch", ".", "max", "(", "c", ".", "long", "(", ")", "*", "f", ",", "dim", "=", "-", "1", ")", "\n", "rows", "=", "torch", ".", "arange", "(", "0", ",", "n", ")", "\n", "eta2", "=", "f2_sorted", "[", "rows", ",", "j", "]", "-", "(", "y", "[", "rows", ",", "j", "]", "-", "epsilon", "**", "2", ")", "/", "m", "[", "rows", ",", "j", "]", "\n", "eta2", "=", "torch", ".", "where", "(", "v", "==", "0", ",", "f2_sorted", "[", ":", ",", "-", "1", "]", ",", "eta2", ")", "\n", "eta", "=", "torch", ".", "sqrt", "(", "eta2", ")", "\n", "eta", "=", "eta", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "(", "len", "(", "x0", ".", "shape", ")", "-", "1", ")", ")", "\n", "return", "torch", ".", "clamp", "(", "eta", "*", "delta", "+", "x0", ",", "0", ",", "1", ")", ".", "view", "(", "n", ",", "ch", ",", "nx", ",", "ny", ")", "\n", "", "elif", "norm", "==", "\"linf\"", ":", "\n", "    ", "epsilon", "=", "8", "/", "255.", "\n", "curr_delta", "=", "torch", ".", "clamp", "(", "delta", ",", "-", "epsilon", ",", "epsilon", ")", "\n", "return", "torch", ".", "clamp", "(", "x0", "+", "curr_delta", ",", "0", ",", "1", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "    ", "delta", "=", "proj_l1ball", "(", "delta", ",", "epsilon", "=", "2000", "/", "255.", ",", "device", "=", "device", ")", "\n", "return", "torch", ".", "clamp", "(", "delta", "+", "x0", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.attack_pgd": [[102, 160], ["torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "range", "torch.rand_like.detach", "delta[].uniform_", "delta[].uniform_", "delta[].uniform_", "model", "torch.cross_entropy", "F.cross_entropy.backward", "torch.rand_like.grad.detach", "evaluate.clamp", "torch.rand_like.grad.zero_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "[].item", "[].item", "[].item", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "evaluate.norms_p().clamp", "evaluate.clamp", "[].item", "[].item", "[].item", "torch.distributions.laplace.Laplace", "laplace.Laplace.sample", "evaluate.norms_l1().clamp", "evaluate.norms_p", "evaluate.norms_p().clamp", "evaluate.proj_l1ball", "torch.rand_like.detach", "torch.rand_like.new_tensor", "torch.rand_like.new_tensor", "evaluate.norms_l1", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "evaluate.norms_p", "torch.rand_like.detach", "evaluate.norms_p", "evaluate.l1_dir_topk", "epsilon.detach().cpu().numpy", "torch.rand_like.detach", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach().cpu", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach", "epsilon.detach"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_l1ball", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_l1", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.l1_dir_topk"], ["", "", "def", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "norm", ",", "dataset", ",", "params", "=", "None", ")", ":", "\n", "  ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", ".", "cuda", "(", ")", "\n", "#order = 3", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "    ", "if", "dataset", "==", "\"cifar10\"", "or", "dataset", "==", "\"svhn\"", ":", "\n", "      ", "epsilon", "=", "(", "8", "/", "255.", ")", "/", "std", "\n", "", "else", ":", "\n", "      ", "epsilon", "=", "(", "4", "/", "255.", ")", "/", "std", "\n", "", "attack_iters", "=", "10", "\n", "alpha", "=", "(", "1", "/", "255.", ")", "/", "std", "\n", "delta", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "    ", "if", "dataset", "==", "\"cifar10\"", "or", "dataset", "==", "\"svhn\"", ":", "\n", "      ", "epsilon", "=", "(", "128", "/", "255.", ")", "/", "std", "\n", "", "else", ":", "\n", "      ", "epsilon", "=", "(", "80", "/", "255.", ")", "/", "std", "\n", "", "attack_iters", "=", "10", "\n", "alpha", "=", "(", "30.", "/", "255.", ")", "/", "std", "\n", "delta", "=", "torch", ".", "rand_like", "(", "X", ",", "requires_grad", "=", "True", ")", "\n", "delta", ".", "data", "*=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_p", "(", "\n", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "    ", "epsilon", "=", "(", "2000", "/", "255.", ")", "/", "std", "\n", "attack_iters", "=", "20", "\n", "alpha", "=", "(", "255.", "/", "255.", ")", "/", "std", "\n", "ini", "=", "laplace", ".", "Laplace", "(", "loc", "=", "delta", ".", "new_tensor", "(", "0", ")", ",", "scale", "=", "delta", ".", "new_tensor", "(", "1", ")", ")", "\n", "delta", ".", "data", "=", "ini", ".", "sample", "(", "delta", ".", "data", ".", "shape", ")", "\n", "delta", ".", "data", "=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_l1", "(", "\n", "delta", ".", "detach", "(", ")", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "delta", ".", "requires_grad", "=", "True", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "    ", "output", "=", "model", "(", "X", "+", "delta", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad", "=", "delta", ".", "grad", ".", "detach", "(", ")", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "      ", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", "+", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "-", "epsilon", ",", "\n", "epsilon", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "      ", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "grad", "/", "norms_p", "(", "grad", ",", "2.0", ")", "\n", "delta", ".", "data", "*=", "epsilon", "/", "norms_p", "(", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "\n", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "      ", "k", "=", "99", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "l1_dir_topk", "(", "grad", ",", "delta", ".", "data", ",", "X", ",", "k", ")", "\n", "delta", ".", "data", "=", "proj_l1ball", "(", "delta", ".", "data", ",", "\n", "epsilon", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "\n", "device", "=", "device", ")", "\n", "", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", ",", "lower_limit", "-", "X", ",", "upper_limit", "-", "X", ")", "\n", "delta", ".", "grad", ".", "zero_", "(", ")", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.get_loaders": [[162, 257], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "datasets.SemiSupervisedDataset", "datasets.SemiSupervisedDataset", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "datasets.SemiSupervisedDataset", "datasets.SemiSupervisedDataset", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_loaders", "(", "dir_", ",", "batch_size", ",", "dataset", ",", "rst", ")", ":", "\n", "  ", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cifar10_mean", ",", "cifar10_std", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "64", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "num_workers", "=", "2", "\n", "if", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "if", "not", "rst", ":", "\n", "      ", "train_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "train_dataset", "=", "SemiSupervisedDataset", "(", "base_dataset", "=", "dataset", ",", "\n", "add_svhn_extra", "=", "True", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "aux_data_filename", "=", "None", ",", "\n", "add_aux_labels", "=", "True", ",", "\n", "aux_take_amount", "=", "None", ")", "\n", "test_dataset", "=", "SemiSupervisedDataset", "(", "base_dataset", "=", "dataset", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "", "", "elif", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "if", "not", "rst", ":", "\n", "      ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "train_dataset", "=", "SemiSupervisedDataset", "(", "\n", "base_dataset", "=", "dataset", ",", "\n", "add_svhn_extra", "=", "False", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "aux_data_filename", "=", "'ti_500K_pseudo_labeled.pickle'", ",", "\n", "add_aux_labels", "=", "True", ",", "\n", "aux_take_amount", "=", "None", ")", "\n", "test_dataset", "=", "SemiSupervisedDataset", "(", "base_dataset", "=", "dataset", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/train'", ",", "\n", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/val'", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.get_args": [[259, 284], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'../cifar-data'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'cifar10'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--total_epochs'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-max'", ",", "default", "=", "0.21", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--inner-lr-max'", ",", "default", "=", "0.31", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--attack'", ",", "\n", "default", "=", "'pgd'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'pgd'", ",", "'fgsm'", ",", "'free'", ",", "'none'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--attack-iters'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--js_weight'", ",", "default", "=", "12", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--restarts'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pgd-alpha'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--fname'", ",", "default", "=", "'mng_ac'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--rst'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--width-factor'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'WideResNet'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.main": [[286, 412], ["train_MNG.get_args", "logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "time.time", "train_MNG.get_loaders", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "preact_resnet.NoiseResNet3x3Conv().cuda", "NoiseResNet3x3Conv().cuda.apply", "ResNet50().cuda.apply", "ResNet50().cuda.train", "NoiseResNet3x3Conv().cuda.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "logger.info", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "wideresnet.WideResNet().cuda", "ResNet50().cuda.params", "NoiseResNet3x3Conv().cuda.parameters", "time.time", "enumerate", "copy.deepcopy", "copy.deepcopy", "time.time", "print", "preact_resnet.resnet50.cuda", "ValueError", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "preact_resnet.NoiseResNet3x3Conv", "numpy.interp", "ResNet50().cuda.train", "lr_schedule", "torch.optim.SGD.param_groups[].update", "torch.optim.SGD.param_groups[].update", "random.sample", "copy.deepcopy", "train_MNG.attack_pgd", "evaluate.clamp", "NoiseResNet3x3Conv().cuda.", "train_MNG.fix_perturbation_size", "copy.deepcopy.", "torch.cross_entropy", "copy.deepcopy.zero_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "copy.deepcopy.update_params", "copy.deepcopy.", "torch.cross_entropy", "F.cross_entropy.item", "torch.optim.SGD.zero_grad", "F.cross_entropy.backward", "torch.optim.SGD.step", "ResNet50().cuda.", "ResNet50().cuda.", "ResNet50().cuda.", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.clamp().log", "torch.optim.SGD.zero_grad", "loss.backward", "torch.optim.SGD.step", "loss.item", "y.size", "ResNet50().cuda.state_dict", "NoiseResNet3x3Conv().cuda.state_dict", "wideresnet.WideResNet", "X.cuda", "y.cuda", "copy.deepcopy.params", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "NoiseResNet3x3Conv().cuda.", "train_MNG.fix_perturbation_size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cross_entropy", "preact_resnet.resnet50", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.kl_div", "len", "torch.kl_div", "torch.kl_div", "X.size", "meta_model.max"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_args", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_loaders", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.fix_perturbation_size", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.update_params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.step", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.TorchOptimiser.step", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.params", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_MNG.fix_perturbation_size", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp"], ["", "def", "main", "(", ")", ":", "\n", "  ", "args", "=", "get_args", "(", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "data_dir", "=", "args", ".", "dataset", "+", "\"-data\"", "\n", "if", "args", ".", "dataset", "!=", "\"tinyimagenet\"", ":", "\n", "    ", "args", ".", "n_classes", "=", "10", "\n", "", "else", ":", "\n", "    ", "args", ".", "n_classes", "=", "200", "\n", "\n", "", "start_start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loaders", "(", "args", ".", "data_dir", ",", "args", ".", "batch_size", ",", "\n", "args", ".", "dataset", ",", "args", ".", "rst", ")", "\n", "\n", "epsilon", "=", "(", "args", ".", "epsilon", "/", "255.", ")", "/", "std", "\n", "pgd_alpha", "=", "(", "args", ".", "pgd_alpha", "/", "255.", ")", "/", "std", "\n", "\n", "if", "args", ".", "model", "==", "'WideResNet'", ":", "\n", "    ", "model", "=", "WideResNet", "(", "28", ",", "10", ",", "widen_factor", "=", "args", ".", "width_factor", ",", "\n", "dropRate", "=", "0.0", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'resnet50'", ":", "\n", "    ", "model", "=", "ResNet50", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown model\"", ")", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "mng", "=", "NoiseResNet3x3Conv", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "mng", ".", "apply", "(", "initialize_weights", ")", "\n", "model", ".", "apply", "(", "initialize_weights", ")", "\n", "model", ".", "train", "(", ")", "\n", "mng", ".", "train", "(", ")", "\n", "outer_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "params", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr_max", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "mng_opt", "=", "torch", ".", "optim", ".", "SGD", "(", "mng", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr_max", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "epochs", "=", "args", ".", "epochs", "\n", "\n", "lr_schedule", "=", "lambda", "t", ":", "np", ".", "interp", "(", "\n", "[", "t", "]", ",", "[", "0", ",", "args", ".", "epochs", "*", "2", "//", "5", ",", "args", ".", "epochs", "]", ",", "[", "0", ",", "args", ".", "lr_max", ",", "0", "]", ")", "[", "0", "]", "\n", "\n", "logger", ".", "info", "(", "'\\t Epoch \\t Time \\t Train Loss \\t Train Acc \\t Meta loss'", ")", "\n", "criterion_kl", "=", "torch", ".", "nn", ".", "KLDivLoss", "(", "size_average", "=", "False", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "0", "\n", "meta_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "train_n", "=", "0", "\n", "for", "i", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "      ", "model", ".", "train", "(", ")", "\n", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "lr", "=", "lr_schedule", "(", "epoch", "+", "(", "i", "+", "1", ")", "/", "len", "(", "train_loader", ")", ")", "\n", "outer_opt", ".", "param_groups", "[", "0", "]", ".", "update", "(", "lr", "=", "lr", ")", "\n", "mng_opt", ".", "param_groups", "[", "0", "]", ".", "update", "(", "lr", "=", "lr", ")", "\n", "\n", "norms_list", "=", "[", "\"linf\"", ",", "\"l1\"", ",", "\"l2\"", "]", "\n", "curr_norm", "=", "random", ".", "sample", "(", "norms_list", ",", "k", "=", "1", ")", "\n", "\n", "meta_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "delta_linf", "=", "attack_pgd", "(", "meta_model", ",", "X", ",", "y", ",", "outer_opt", ",", "curr_norm", "[", "0", "]", ",", "\n", "args", ".", "dataset", ")", "\n", "adv_X", "=", "clamp", "(", "X", "+", "delta_linf", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", "\n", "delta_img", "=", "mng", "(", "X", ")", "\n", "img", "=", "fix_perturbation_size", "(", "X", ",", "delta_img", ",", "curr_norm", "[", "0", "]", ")", "\n", "logits_aug", "=", "meta_model", "(", "img", ")", "\n", "inner_loss", "=", "F", ".", "cross_entropy", "(", "logits_aug", ",", "y", ")", "\n", "\n", "meta_model", ".", "zero_grad", "(", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "inner_loss", ",", "(", "meta_model", ".", "params", "(", ")", ")", ",", "\n", "create_graph", "=", "True", ")", "\n", "meta_model", ".", "update_params", "(", "lr_inner", "=", "lr", ",", "source_params", "=", "grads", ")", "\n", "del", "grads", "\n", "\n", "outputs", "=", "meta_model", "(", "adv_X", ")", "\n", "mng_loss", "=", "F", ".", "cross_entropy", "(", "outputs", ",", "y", ")", "\n", "meta_loss", "+=", "mng_loss", ".", "item", "(", ")", "\n", "mng_opt", ".", "zero_grad", "(", ")", "\n", "mng_loss", ".", "backward", "(", ")", "\n", "mng_opt", ".", "step", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "delta_img", "=", "mng", "(", "X", ")", "\n", "img", "=", "fix_perturbation_size", "(", "X", ",", "delta_img", ",", "curr_norm", "[", "0", "]", ")", "\n", "\n", "", "logits_clean", "=", "model", "(", "X", ")", "\n", "logits_aug", "=", "model", "(", "img", ")", "\n", "logits_adv", "=", "model", "(", "adv_X", ")", "\n", "\n", "p_clean", ",", "p_adv", ",", "p_aug1", "=", "F", ".", "softmax", "(", "logits_clean", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "\n", "logits_adv", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "logits_aug", ",", "dim", "=", "1", ")", "\n", "p_mixture", "=", "torch", ".", "clamp", "(", "(", "p_clean", "+", "p_adv", "+", "p_aug1", ")", "/", "3.", ",", "1e-7", ",", "1", ")", ".", "log", "(", ")", "\n", "js_loss", "=", "(", "F", ".", "kl_div", "(", "p_mixture", ",", "p_clean", ",", "reduction", "=", "'batchmean'", ")", "+", "\n", "F", ".", "kl_div", "(", "p_mixture", ",", "p_adv", ",", "reduction", "=", "'batchmean'", ")", "+", "\n", "F", ".", "kl_div", "(", "p_mixture", ",", "p_aug1", ",", "reduction", "=", "'batchmean'", ")", ")", "/", "3.", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits_adv", ",", "y", ")", "+", "(", "args", ".", "js_weight", "*", "js_loss", ")", "\n", "\n", "outer_opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "outer_opt", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "train_acc", "+=", "(", "outputs", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "train_n", "+=", "y", ".", "size", "(", "0", ")", "\n", "\n", "", "best_state_dict", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "gen_dict", "=", "copy", ".", "deepcopy", "(", "mng", ".", "state_dict", "(", ")", ")", "\n", "\n", "train_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'\\t %d \\t %.4f \\t %.4f \\t %.4f \\t %.4f'", "%", "\n", "(", "epoch", ",", "(", "train_time", "-", "start_time", ")", "/", "60", ",", "train_loss", "/", "train_n", ",", "\n", "train_acc", "/", "train_n", ",", "meta_loss", "/", "train_n", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "best_state_dict", ",", "args", ".", "fname", "+", "'.pth'", ")", "\n", "torch", ".", "save", "(", "gen_dict", ",", "'test'", "+", "'.pth'", ")", "\n", "logger", ".", "info", "(", "'Total train time: %.4f minutes'", ",", "\n", "(", "train_time", "-", "start_start_time", ")", "/", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActBlock.__init__": [[15, 39], ["layers.MetaModule.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.MetaConv2d"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "blockConv1", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "MetaBatchNorm2d", "(", "planes", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "blockConv2", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "MetaBatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "      ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "in_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActBlock.forward": [[40, 47], ["preact_resnet.PreActBlock.blockConv1", "preact_resnet.PreActBlock.blockConv2", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "params", "=", "None", ")", ":", "\n", "    ", "identity", "=", "x", "\n", "x", "=", "self", ".", "blockConv1", "(", "x", ")", "\n", "x", "=", "self", ".", "blockConv2", "(", "x", ")", "\n", "x", "+=", "self", ".", "shortcut", "(", "identity", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "x", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActBottleneck.__init__": [[53, 79], ["layers.MetaModule.__init__", "layers.MetaBatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.MetaConv2d", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.MetaConv2d"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "blockConv1", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "MetaBatchNorm2d", "(", "planes", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "blockConv2", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "MetaBatchNorm2d", "(", "planes", ")", ")", "\n", "self", ".", "blockConv3", "=", "MetaConv2d", "(", "planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "      ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "MetaConv2d", "(", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActBottleneck.forward": [[80, 88], ["preact_resnet.PreActBottleneck.blockConv1", "preact_resnet.PreActBottleneck.blockConv2", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "params", "=", "None", ")", ":", "\n", "    ", "identity", "=", "x", "\n", "x", "=", "self", ".", "blockConv1", "(", "x", ")", "\n", "x", "=", "self", ".", "blockConv2", "(", "x", ")", "\n", "x", "=", "self", ".", "blockConv3", "\n", "x", "+=", "self", ".", "shortcut", "(", "identity", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "x", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActResNet.__init__": [[91, 110], ["layers.MetaModule.__init__", "layers.MetaConv2d", "layers.MetaBatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.MetaLinear", "preact_resnet.PreActBlock", "preact_resnet.PreActBlock", "preact_resnet.PreActBlock", "preact_resnet.PreActBlock", "preact_resnet.PreActBlock", "preact_resnet.PreActBlock", "preact_resnet.PreActBlock", "preact_resnet.PreActBlock"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "MetaConv2d", "(", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "MetaBatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "PreActBlock", "(", "self", ".", "in_planes", ",", "64", ")", ",", "\n", "PreActBlock", "(", "self", ".", "in_planes", ",", "64", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "PreActBlock", "(", "64", ",", "128", ",", "2", ")", ",", "PreActBlock", "(", "128", ",", "128", ")", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "PreActBlock", "(", "128", ",", "256", ",", "2", ")", ",", "\n", "PreActBlock", "(", "256", ",", "256", ")", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "PreActBlock", "(", "256", ",", "512", ",", "2", ")", ",", "\n", "PreActBlock", "(", "512", ",", "512", ")", ")", "\n", "self", ".", "linear", "=", "MetaLinear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActResNet._make_layer": [[111, 118], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.StatsLogger.append"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ",", "params", ")", ":", "\n", "    ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.PreActResNet.forward": [[119, 129], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.bn1", "preact_resnet.PreActResNet.size", "preact_resnet.PreActResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "params", "=", "None", ",", "vis", "=", "False", ",", "vul", "=", "False", ")", ":", "\n", "    ", "out_1", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out_2", "=", "self", ".", "layer1", "(", "out_1", ")", "\n", "out_3", "=", "self", ".", "layer2", "(", "out_2", ")", "\n", "out_4", "=", "self", ".", "layer3", "(", "out_3", ")", "\n", "out_5", "=", "self", ".", "layer4", "(", "out_4", ")", "\n", "out_6", "=", "F", ".", "avg_pool2d", "(", "out_5", ",", "4", ")", "\n", "out_6", "=", "out_6", ".", "view", "(", "out_6", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out_6", "=", "self", ".", "linear", "(", "out_6", ")", "\n", "return", "out_6", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.NoiseResNet3x3Conv.__init__": [[136, 158], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channels", "=", "3", ",", "custom_init", "=", "True", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_2d_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "20", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "conv_2d_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "20", ",", "\n", "out_channels", "=", "20", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "conv_2d_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "20", ",", "\n", "out_channels", "=", "20", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "conv_2d_4", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "20", ",", "\n", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.NoiseResNet3x3Conv.forward": [[159, 168], ["torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.empty().normal_", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "preact_resnet.NoiseResNet3x3Conv.conv_2d_1", "preact_resnet.NoiseResNet3x3Conv.conv_2d_2", "preact_resnet.NoiseResNet3x3Conv.conv_2d_3", "preact_resnet.NoiseResNet3x3Conv.conv_2d_4", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "bs", ",", "ch", ",", "nx", ",", "ny", "=", "x", ".", "shape", "\n", "x", "=", "torch", ".", "empty", "(", "(", "bs", ",", "ch", ",", "nx", "+", "2", ",", "ny", "+", "2", ")", ",", "device", "=", "x", ".", "device", ")", ".", "normal_", "(", ")", "\n", "residual", "=", "x", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv_2d_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv_2d_2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv_2d_3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv_2d_4", "(", "x", ")", "+", "residual", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.resnet50": [[131, 133], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "n_classes", "=", "200", ")", ":", "\n", "  ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.preact_resnet.test": [[170, 174], ["ResNet50", "ResNet50.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "  ", "net", "=", "ResNet50", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "64", ",", "64", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.losses.entropy_loss": [[17, 21], ["torch.softmax", "torch.log_softmax"], "function", ["None"], ["def", "entropy_loss", "(", "unlabeled_logits", ")", ":", "\n", "  ", "unlabeled_probs", "=", "F", ".", "softmax", "(", "unlabeled_logits", ",", "dim", "=", "1", ")", "\n", "return", "-", "(", "unlabeled_probs", "*", "\n", "F", ".", "log_softmax", "(", "unlabeled_logits", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.losses.trades_loss": [[23, 98], ["torch.KLDivLoss", "model.eval", "len", "model.train", "optimizer.zero_grad", "torch.autograd.Variable", "torch.log_softmax", "model", "torch.cross_entropy", "torch.softmax", "model", "torch.cross_entropy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "x_natural.detach", "torch.clamp", "torch.clamp", "torch.clamp", "model", "nn.KLDivLoss.", "torch.sum", "torch.sum", "torch.sum", "losses.entropy_loss", "torch.tensor", "torch.tensor", "torch.tensor", "range", "ValueError", "ValueError", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "nn.KLDivLoss.", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.log_softmax", "torch.softmax", "torch.sign", "torch.sign", "torch.sign", "model", "model", "grad.detach", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.losses.entropy_loss", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp"], ["", "def", "trades_loss", "(", "model", ",", "\n", "x_natural", ",", "\n", "y", ",", "\n", "optimizer", ",", "\n", "step_size", "=", "0.003", ",", "\n", "epsilon", "=", "0.031", ",", "\n", "perturb_steps", "=", "10", ",", "\n", "beta", "=", "6.0", ",", "\n", "adversarial", "=", "True", ",", "\n", "distance", "=", "'l_inf'", ",", "\n", "entropy_weight", "=", "0", ")", ":", "\n", "  ", "\"\"\"The TRADES KL-robustness regularization term proposed by\n       Zhang et al., with added support for stability training and entropy\n       regularization\"\"\"", "\n", "if", "beta", "==", "0", ":", "\n", "    ", "logits", "=", "model", "(", "x_natural", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "inf", "=", "torch", ".", "Tensor", "(", "[", "np", ".", "inf", "]", ")", "\n", "zero", "=", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", "\n", "return", "loss", ",", "loss", ",", "inf", ",", "zero", "\n", "\n", "# define KL-loss", "\n", "", "criterion_kl", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'sum'", ")", "\n", "model", ".", "eval", "(", ")", "# moving to eval mode to freeze batchnorm stats", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "# generate adversarial example", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "0.", "# the + 0. is for copying the tensor", "\n", "if", "adversarial", ":", "\n", "    ", "if", "distance", "==", "'l_inf'", ":", "\n", "      ", "x_adv", "+=", "0.001", "*", "torch", ".", "randn", "(", "x_natural", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "        ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "          ", "loss_kl", "=", "criterion_kl", "(", "F", ".", "log_softmax", "(", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "model", "(", "x_natural", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_kl", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "x_natural", "-", "epsilon", ")", ",", "\n", "x_natural", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'No support for distance %s in adversarial '", "\n", "'training'", "%", "distance", ")", "\n", "", "", "else", ":", "\n", "    ", "if", "distance", "==", "'l_2'", ":", "\n", "      ", "x_adv", "=", "x_adv", "+", "epsilon", "*", "torch", ".", "randn_like", "(", "x_adv", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'No support for distance %s in stability '", "\n", "'training'", "%", "distance", ")", "\n", "\n", "", "", "model", ".", "train", "(", ")", "# moving to train mode to update batchnorm stats", "\n", "\n", "# zero gradient", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "logits_adv", "=", "F", ".", "log_softmax", "(", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "model", "(", "x_natural", ")", "\n", "\n", "loss_natural", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ",", "ignore_index", "=", "-", "1", ")", "\n", "p_natural", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "loss_robust", "=", "criterion_kl", "(", "logits_adv", ",", "p_natural", ")", "/", "batch_size", "\n", "\n", "loss", "=", "loss_natural", "+", "beta", "*", "loss_robust", "\n", "\n", "is_unlabeled", "=", "(", "y", "==", "-", "1", ")", "\n", "if", "torch", ".", "sum", "(", "is_unlabeled", ")", ">", "0", ":", "\n", "    ", "logits_unlabeled", "=", "logits", "[", "is_unlabeled", "]", "\n", "loss_entropy_unlabeled", "=", "entropy_loss", "(", "logits_unlabeled", ")", "\n", "loss", "=", "loss", "+", "entropy_weight", "*", "loss_entropy_unlabeled", "\n", "", "else", ":", "\n", "    ", "loss_entropy_unlabeled", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.losses.noise_loss": [[100, 109], ["model", "torch.cross_entropy", "x_noise.clamp.clamp", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp"], ["", "def", "noise_loss", "(", "model", ",", "x_natural", ",", "y", ",", "epsilon", "=", "0.25", ",", "clamp_x", "=", "True", ")", ":", "\n", "  ", "\"\"\"Augmenting the input with random noise as in Cohen et al.\"\"\"", "\n", "# logits_natural = model(x_natural)", "\n", "x_noise", "=", "x_natural", "+", "epsilon", "*", "torch", ".", "randn_like", "(", "x_natural", ")", "\n", "if", "clamp_x", ":", "\n", "    ", "x_noise", "=", "x_noise", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "", "logits_noise", "=", "model", "(", "x_noise", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits_noise", ",", "y", ",", "ignore_index", "=", "-", "1", ")", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.initialize_weights": [[44, 55], ["isinstance", "module.weight.data.normal_", "isinstance", "math.sqrt", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_", "isinstance", "module.bias.data.zero_"], "function", ["None"], ["def", "initialize_weights", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "n", "=", "module", ".", "kernel_size", "[", "0", "]", "*", "module", ".", "kernel_size", "[", "1", "]", "*", "module", ".", "out_channels", "\n", "module", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "      ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.attack_pgd": [[57, 115], ["torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.KLDivLoss", "range", "torch.rand_like.detach", "delta[].uniform_", "delta[].uniform_", "delta[].uniform_", "evaluate.clamp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "[].item", "[].item", "[].item", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "evaluate.norms_p().clamp", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "nn.KLDivLoss.", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "evaluate.clamp", "[].item", "[].item", "[].item", "torch.distributions.laplace.Laplace", "laplace.Laplace.sample", "evaluate.norms_l1().clamp", "torch.log_softmax", "torch.softmax", "evaluate.norms_p", "model", "model", "evaluate.norms_p().clamp", "evaluate.proj_l1ball", "torch.rand_like.detach", "torch.rand_like.new_tensor", "torch.rand_like.new_tensor", "evaluate.norms_l1", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "evaluate.norms_p", "torch.rand_like.detach", "evaluate.norms_p", "evaluate.l1_dir_topk", "epsilon.detach().cpu().numpy", "torch.rand_like.detach", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu().numpy", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach().cpu", "epsilon.detach().cpu", "epsilon.detach", "epsilon.detach", "epsilon.detach"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.clamp", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.proj_l1ball", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_l1", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.norms_p", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.evaluate.l1_dir_topk"], ["", "", "def", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "norm", ",", "dataset", ",", "params", "=", "None", ")", ":", "\n", "  ", "delta", "=", "torch", ".", "zeros_like", "(", "X", ")", ".", "cuda", "(", ")", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "    ", "if", "dataset", "==", "\"cifar10\"", "or", "dataset", "==", "\"svhn\"", ":", "\n", "      ", "epsilon", "=", "(", "8", "/", "255.", ")", "/", "std", "\n", "attack_iters", "=", "10", "\n", "alpha", "=", "(", "1.", "/", "255.", ")", "/", "std", "\n", "", "else", ":", "\n", "      ", "epsilon", "=", "(", "4", "/", "255.", ")", "/", "std", "\n", "attack_iters", "=", "10", "\n", "alpha", "=", "(", "1", "/", "255.", ")", "/", "std", "\n", "", "delta", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "delta", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "uniform_", "(", "-", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "\n", "epsilon", "[", "2", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "    ", "epsilon", "=", "(", "80", "/", "255.", ")", "/", "std", "\n", "attack_iters", "=", "10", "\n", "alpha", "=", "(", "25.", "/", "255.", ")", "/", "std", "\n", "delta", "=", "torch", ".", "rand_like", "(", "X", ",", "requires_grad", "=", "True", ")", "\n", "delta", ".", "data", "*=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_p", "(", "\n", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "    ", "epsilon", "=", "(", "2000", "/", "255.", ")", "/", "std", "\n", "attack_iters", "=", "20", "\n", "alpha", "=", "(", "255.", "/", "255.", ")", "/", "std", "\n", "ini", "=", "laplace", ".", "Laplace", "(", "loc", "=", "delta", ".", "new_tensor", "(", "0", ")", ",", "scale", "=", "delta", ".", "new_tensor", "(", "1", ")", ")", "\n", "delta", ".", "data", "=", "ini", ".", "sample", "(", "delta", ".", "data", ".", "shape", ")", "\n", "delta", ".", "data", "=", "(", "2.0", "*", "delta", ".", "data", "-", "1.0", ")", "*", "epsilon", "\n", "delta", ".", "data", "/=", "norms_l1", "(", "\n", "delta", ".", "detach", "(", ")", ")", ".", "clamp", "(", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "delta", ".", "requires_grad", "=", "True", "\n", "criterion_kl", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'sum'", ")", "\n", "for", "_", "in", "range", "(", "attack_iters", ")", ":", "\n", "    ", "X_adv", "=", "X", "+", "delta", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "      ", "loss", "=", "criterion_kl", "(", "F", ".", "log_softmax", "(", "model", "(", "X_adv", ")", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "model", "(", "X", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "X_adv", "]", ")", "[", "0", "]", "\n", "if", "norm", "==", "\"linf\"", ":", "\n", "      ", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", "+", "alpha", "*", "torch", ".", "sign", "(", "grad", ")", ",", "-", "epsilon", ",", "\n", "epsilon", ")", "\n", "", "elif", "norm", "==", "\"l2\"", ":", "\n", "      ", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "grad", "/", "norms_p", "(", "grad", ",", "2.0", ")", "\n", "delta", ".", "data", "*=", "epsilon", "/", "norms_p", "(", "delta", ".", "detach", "(", ")", ",", "2.0", ")", ".", "clamp", "(", "\n", "min", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "", "elif", "norm", "==", "\"l1\"", ":", "\n", "      ", "k", "=", "99", "\n", "delta", ".", "data", "=", "delta", ".", "data", "+", "alpha", "*", "l1_dir_topk", "(", "grad", ",", "delta", ".", "data", ",", "X", ",", "k", ")", "\n", "delta", ".", "data", "=", "proj_l1ball", "(", "delta", ".", "data", ",", "\n", "epsilon", "=", "epsilon", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "\n", "device", "=", "device", ")", "\n", "", "delta", ".", "data", "=", "clamp", "(", "delta", ".", "data", ",", "lower_limit", "-", "X", ",", "upper_limit", "-", "X", ")", "\n", "", "return", "delta", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_loaders": [[117, 211], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "datasets.SemiSupervisedDataset", "datasets.SemiSupervisedDataset", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "datasets.SemiSupervisedDataset", "datasets.SemiSupervisedDataset", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_loaders", "(", "dir_", ",", "batch_size", ",", "dataset", ",", "rst", ")", ":", "\n", "  ", "if", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "cifar10_mean", ",", "cifar10_std", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "64", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "num_workers", "=", "2", "\n", "if", "dataset", "==", "\"svhn\"", ":", "\n", "    ", "if", "not", "rst", ":", "\n", "      ", "train_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "SVHN", "(", "dir_", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "train_dataset", "=", "SemiSupervisedDataset", "(", "base_dataset", "=", "dataset", ",", "\n", "add_svhn_extra", "=", "True", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "aux_data_filename", "=", "None", ",", "\n", "add_aux_labels", "=", "True", ",", "\n", "aux_take_amount", "=", "None", ")", "\n", "test_dataset", "=", "SemiSupervisedDataset", "(", "base_dataset", "=", "dataset", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "", "", "elif", "dataset", "==", "\"cifar10\"", ":", "\n", "    ", "if", "not", "rst", ":", "\n", "      ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "True", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "train_dataset", "=", "SemiSupervisedDataset", "(", "\n", "base_dataset", "=", "dataset", ",", "\n", "add_svhn_extra", "=", "False", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", "aux_data_filename", "=", "'ti_500K_pseudo_labeled.pickle'", ",", "\n", "add_aux_labels", "=", "True", ",", "\n", "aux_take_amount", "=", "None", ")", "\n", "test_dataset", "=", "SemiSupervisedDataset", "(", "base_dataset", "=", "dataset", ",", "\n", "root", "=", "dir_", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "test_transform", ")", "\n", "", "", "elif", "dataset", "==", "\"tinyimagenet\"", ":", "\n", "    ", "train_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/train'", ",", "\n", "transform", "=", "train_transform", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "dir_", "+", "'/val'", ",", "\n", "transform", "=", "test_transform", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_args": [[213, 249], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "2048", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "default", "=", "'../cifar-data'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'cifar10'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-schedule'", ",", "\n", "default", "=", "'cyclic'", ",", "\n", "choices", "=", "[", "'cyclic'", ",", "'piecewise'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-max'", ",", "default", "=", "0.21", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--attack'", ",", "\n", "default", "=", "'pgd'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'pgd'", ",", "'fgsm'", ",", "'free'", ",", "'none'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--attack_type'", ",", "\n", "default", "=", "'none'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'none'", ",", "'random'", ",", "'max'", ",", "'avg'", ",", "'avg_loss'", ",", "'meta'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "default", "=", "'linf'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--attack-iters'", ",", "default", "=", "8", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--restarts'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pgd-alpha'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--fgsm-alpha'", ",", "default", "=", "1.25", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--fgsm-init'", ",", "\n", "default", "=", "'random'", ",", "\n", "choices", "=", "[", "'zero'", ",", "'random'", ",", "'previous'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--fname'", ",", "default", "=", "'cifar_model_free1'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--width-factor'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'WideResNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--rst'", ",", "default", "=", "False", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--overfit-check'", ",", "action", "=", "'store_true'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.main": [[251, 347], ["train_semi.get_args", "logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "time.time", "train_semi.get_loaders", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "WideResNet().cuda.apply", "WideResNet().cuda.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "logger.info", "torch.KLDivLoss", "range", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "preact_resnet.resnet50.cuda", "WideResNet().cuda.params", "time.time", "enumerate", "copy.deepcopy", "time.time", "print", "wideresnet.WideResNet().cuda", "ValueError", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "train_semi.main.lr_schedule"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_args", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.train_semi.get_loaders", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.core.train", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.torch_backend.SGD", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.layers.MetaModule.params"], ["", "def", "main", "(", ")", ":", "\n", "  ", "args", "=", "get_args", "(", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", ".", "data_dir", "=", "args", ".", "dataset", "+", "\"-data\"", "\n", "args", ".", "n_classes", "=", "10", "\n", "\n", "start_start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loaders", "(", "args", ".", "data_dir", ",", "args", ".", "batch_size", ",", "\n", "args", ".", "dataset", ",", "args", ".", "rst", ")", "\n", "\n", "epsilon", "=", "(", "args", ".", "epsilon", "/", "255.", ")", "/", "std", "\n", "pgd_alpha", "=", "(", "args", ".", "pgd_alpha", "/", "255.", ")", "/", "std", "\n", "\n", "if", "args", ".", "model", "==", "'resnet50'", ":", "\n", "    ", "model", "=", "ResNet50", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'WideResNet'", ":", "\n", "    ", "model", "=", "WideResNet", "(", "28", ",", "10", ",", "widen_factor", "=", "args", ".", "width_factor", ",", "\n", "dropRate", "=", "0.0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown model\"", ")", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "apply", "(", "initialize_weights", ")", "\n", "model", ".", "train", "(", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "params", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr_max", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "epochs", "=", "args", ".", "epochs", "\n", "\n", "if", "args", ".", "lr_schedule", "==", "'cyclic'", ":", "\n", "    ", "lr_schedule", "=", "lambda", "t", ":", "np", ".", "interp", "(", "\n", "[", "t", "]", ",", "[", "0", ",", "args", ".", "epochs", "*", "2", "//", "5", ",", "args", ".", "epochs", "]", ",", "[", "0", ",", "args", ".", "lr_max", ",", "0", "]", ")", "[", "0", "]", "\n", "", "elif", "args", ".", "lr_schedule", "==", "'piecewise'", ":", "\n", "\n", "    ", "def", "lr_schedule", "(", "t", ")", ":", "\n", "      ", "if", "t", "/", "args", ".", "epochs", "<", "0.5", ":", "\n", "        ", "return", "args", ".", "lr_max", "\n", "", "elif", "t", "/", "args", ".", "epochs", "<", "0.75", ":", "\n", "        ", "return", "args", ".", "lr_max", "/", "10.", "\n", "", "else", ":", "\n", "        ", "return", "args", ".", "lr_max", "/", "100.", "\n", "\n", "", "", "", "prev_robust_acc", "=", "0.", "\n", "logger", ".", "info", "(", "'Epoch \\t Time \\t LR \\t \\t Train Loss \\t Train Acc'", ")", "\n", "criterion_kl", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_loss", "=", "0", "\n", "train_acc", "=", "0", "\n", "train_n", "=", "0", "\n", "for", "i", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "      ", "X", ",", "y", "=", "X", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "lr", "=", "lr_schedule", "(", "epoch", "+", "(", "i", "+", "1", ")", "/", "len", "(", "train_loader", ")", ")", "\n", "opt", ".", "param_groups", "[", "0", "]", ".", "update", "(", "lr", "=", "lr", ")", "\n", "\n", "output", "=", "model", "(", "X", ")", "\n", "norms_list", "=", "[", "\"linf\"", ",", "\"l1\"", "]", "\n", "curr_norm", "=", "random", ".", "choices", "(", "norms_list", ")", "\n", "delta", "=", "attack_pgd", "(", "model", ",", "X", ",", "y", ",", "opt", ",", "curr_norm", "[", "0", "]", ",", "args", ".", "dataset", ")", "\n", "output", "=", "model", "(", "clamp", "(", "X", "+", "delta", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", ")", "\n", "x_adv", "=", "clamp", "(", "X", "+", "delta", "[", ":", "X", ".", "size", "(", "0", ")", "]", ",", "lower_limit", ",", "upper_limit", ")", "\n", "\n", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "logits_adv", "=", "F", ".", "log_softmax", "(", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", "\n", "logits", "=", "model", "(", "X", ")", "\n", "\n", "loss_natural", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ",", "ignore_index", "=", "-", "1", ")", "\n", "p_natural", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "loss_robust", "=", "criterion_kl", "(", "logits_adv", ",", "p_natural", ")", "/", "args", ".", "batch_size", "\n", "loss", "=", "loss_natural", "+", "6", "*", "loss_robust", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "0.5", ")", "\n", "opt", ".", "step", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "y", ".", "size", "(", "0", ")", "\n", "train_acc", "+=", "(", "output", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "train_n", "+=", "y", ".", "size", "(", "0", ")", "\n", "\n", "", "best_state_dict", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "train_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'%d \\t %.1f \\t %.4f \\t %.4f \\t %.4f'", "%", "\n", "(", "epoch", ",", "(", "train_time", "-", "start_time", ")", "/", "60", ",", "lr", ",", "train_loss", "/", "train_n", ",", "\n", "train_acc", "/", "train_n", ")", ")", "\n", "", "torch", ".", "save", "(", "best_state_dict", ",", "args", ".", "fname", "+", "'.pth'", ")", "\n", "logger", ".", "info", "(", "'Total train time: %.4f minutes'", ",", "\n", "(", "train_time", "-", "start_start_time", ")", "/", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.__init__": [[22, 129], ["torchvision.datasets.CIFAR10", "list", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "list", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "list", "ValueError", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "logging.getLogger", "logging.getLogger.info", "range", "os.path.join", "print", "len", "numpy.concatenate", "torchvision.datasets.SemiSupervisedDataset.unsup_indices.extend", "len", "len", "len", "tuple", "numpy.shape", "range", "len", "tuple", "numpy.shape", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "numpy.concatenate", "torchvision.datasets.SemiSupervisedDataset.targets.extend", "len", "len", "len", "open", "pickle.load", "numpy.random.get_state", "numpy.random.seed", "numpy.random.choice", "numpy.random.set_state", "logging.getLogger", "logging.getLogger.info", "torchvision.datasets.SemiSupervisedDataset.targets.extend", "torchvision.datasets.SemiSupervisedDataset.targets.extend", "range", "zip", "len", "zip", "len", "len", "len", "len", "numpy.unique", "numpy.unique"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "\n", "base_dataset", "=", "'cifar10'", ",", "\n", "take_amount", "=", "None", ",", "\n", "take_amount_seed", "=", "13", ",", "\n", "add_svhn_extra", "=", "False", ",", "\n", "aux_data_filename", "=", "None", ",", "\n", "add_aux_labels", "=", "False", ",", "\n", "aux_take_amount", "=", "None", ",", "\n", "train", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"A dataset with auxiliary pseudo-labeled data\"\"\"", "\n", "\n", "if", "base_dataset", "==", "'cifar10'", ":", "\n", "      ", "self", ".", "dataset", "=", "CIFAR10", "(", "train", "=", "train", ",", "**", "kwargs", ")", "\n", "", "elif", "base_dataset", "==", "'svhn'", ":", "\n", "      ", "if", "train", ":", "\n", "        ", "self", ".", "dataset", "=", "SVHN", "(", "split", "=", "'train'", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "dataset", "=", "SVHN", "(", "split", "=", "'test'", ",", "**", "kwargs", ")", "\n", "# because torchvision is annoying", "\n", "", "self", ".", "dataset", ".", "targets", "=", "self", ".", "dataset", ".", "labels", "\n", "self", ".", "targets", "=", "list", "(", "self", ".", "targets", ")", "\n", "\n", "if", "train", "and", "add_svhn_extra", ":", "\n", "        ", "svhn_extra", "=", "SVHN", "(", "split", "=", "'extra'", ",", "**", "kwargs", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "data", ",", "svhn_extra", ".", "data", "]", ")", "\n", "self", ".", "targets", ".", "extend", "(", "svhn_extra", ".", "labels", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Dataset %s not supported'", "%", "base_dataset", ")", "\n", "", "self", ".", "base_dataset", "=", "base_dataset", "\n", "self", ".", "train", "=", "train", "\n", "\n", "if", "self", ".", "train", ":", "\n", "      ", "if", "take_amount", "is", "not", "None", ":", "\n", "        ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "sup_indices", ")", ",", "\n", "take_amount", ",", "\n", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\n", "'Randomly taking only %d/%d examples from training'", "\n", "' set, seed=%d, indices=%s'", ",", "take_amount", ",", "len", "(", "self", ".", "sup_indices", ")", ",", "\n", "take_amount_seed", ",", "take_inds", ")", "\n", "self", ".", "targets", "=", "self", ".", "targets", "[", "take_inds", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n", "if", "aux_data_filename", "is", "not", "None", ":", "\n", "        ", "aux_path", "=", "os", ".", "path", ".", "join", "(", "kwargs", "[", "'root'", "]", ",", "aux_data_filename", ")", "\n", "print", "(", "\"Loading data from %s\"", "%", "aux_path", ")", "\n", "with", "open", "(", "aux_path", ",", "'rb'", ")", "as", "f", ":", "\n", "          ", "aux", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "aux_data", "=", "aux", "[", "'data'", "]", "\n", "aux_targets", "=", "aux", "[", "'extrapolated_targets'", "]", "\n", "orig_len", "=", "len", "(", "self", ".", "data", ")", "\n", "\n", "if", "aux_take_amount", "is", "not", "None", ":", "\n", "          ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "take_amount_seed", ")", "\n", "take_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "aux_data", ")", ",", "\n", "aux_take_amount", ",", "\n", "replace", "=", "False", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\n", "'Randomly taking only %d/%d examples from aux data'", "\n", "' set, seed=%d, indices=%s'", ",", "aux_take_amount", ",", "len", "(", "aux_data", ")", ",", "\n", "take_amount_seed", ",", "take_inds", ")", "\n", "aux_data", "=", "aux_data", "[", "take_inds", "]", "\n", "aux_targets", "=", "aux_targets", "[", "take_inds", "]", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "aux_data", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "not", "add_aux_labels", ":", "\n", "          ", "self", ".", "targets", ".", "extend", "(", "[", "-", "1", "]", "*", "len", "(", "aux_data", ")", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "targets", ".", "extend", "(", "aux_targets", ")", "\n", "# note that we use unsup indices to track the labeled datapoints", "\n", "# whose labels are \"fake\"", "\n", "", "self", ".", "unsup_indices", ".", "extend", "(", "range", "(", "orig_len", ",", "orig_len", "+", "len", "(", "aux_data", ")", ")", ")", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\"Training set\"", ")", "\n", "logger", ".", "info", "(", "\"Number of training samples: %d\"", ",", "len", "(", "self", ".", "targets", ")", ")", "\n", "logger", ".", "info", "(", "\"Number of supervised samples: %d\"", ",", "len", "(", "self", ".", "sup_indices", ")", ")", "\n", "logger", ".", "info", "(", "\"Number of unsup samples: %d\"", ",", "len", "(", "self", ".", "unsup_indices", ")", ")", "\n", "logger", ".", "info", "(", "\"Label (and pseudo-label) histogram: %s\"", ",", "\n", "tuple", "(", "zip", "(", "*", "np", ".", "unique", "(", "self", ".", "targets", ",", "return_counts", "=", "True", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Shape of training data: %s\"", ",", "np", ".", "shape", "(", "self", ".", "data", ")", ")", "\n", "\n", "# Test set", "\n", "", "else", ":", "\n", "      ", "self", ".", "sup_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "targets", ")", ")", ")", "\n", "self", ".", "unsup_indices", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "\"Test set\"", ")", "\n", "logger", ".", "info", "(", "\"Number of samples: %d\"", ",", "len", "(", "self", ".", "targets", ")", ")", "\n", "logger", ".", "info", "(", "\"Label histogram: %s\"", ",", "\n", "tuple", "(", "zip", "(", "*", "np", ".", "unique", "(", "self", ".", "targets", ",", "return_counts", "=", "True", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Shape of data: %s\"", ",", "np", ".", "shape", "(", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.data": [[134, 137], ["None"], "methods", ["None"], ["", "@", "data", ".", "setter", "\n", "def", "data", "(", "self", ",", "value", ")", ":", "\n", "    ", "self", ".", "dataset", ".", "data", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.targets": [[142, 145], ["None"], "methods", ["None"], ["", "@", "targets", ".", "setter", "\n", "def", "targets", "(", "self", ",", "value", ")", ":", "\n", "    ", "self", ".", "dataset", ".", "targets", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.__len__": [[146, 148], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.__getitem__": [[149, 152], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "    ", "self", ".", "dataset", ".", "labels", "=", "self", ".", "targets", "# because torchvision is annoying", "\n", "return", "self", ".", "dataset", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.__repr__": [[153, 168], ["torchvision.datasets.SemiSupervisedDataset.__len__", "torchvision.datasets.SemiSupervisedDataset.dataset.transform.__repr__().replace", "torchvision.datasets.SemiSupervisedDataset.dataset.target_transform.__repr__().replace", "torchvision.datasets.SemiSupervisedDataset.dataset.transform.__repr__", "torchvision.datasets.SemiSupervisedDataset.dataset.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__len__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.__repr__", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedDataset.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "fmt_str", "=", "'Semisupervised Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Training: {}\\n'", ".", "format", "(", "self", ".", "train", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "dataset", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "\n", "tmp", ",", "\n", "self", ".", "dataset", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "\n", "tmp", ",", "\n", "self", ".", "dataset", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "\n", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__": [[172, 195], ["int", "torch.utils.data.Sampler.__init__", "int", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__init__"], ["def", "__init__", "(", "self", ",", "\n", "sup_inds", ",", "\n", "unsup_inds", ",", "\n", "batch_size", ",", "\n", "unsup_fraction", "=", "0.5", ",", "\n", "num_batches", "=", "None", ")", ":", "\n", "    ", "if", "unsup_fraction", "is", "None", "or", "unsup_fraction", "<", "0", ":", "\n", "      ", "self", ".", "sup_inds", "=", "sup_inds", "+", "unsup_inds", "\n", "unsup_fraction", "=", "0.0", "\n", "", "else", ":", "\n", "      ", "self", ".", "sup_inds", "=", "sup_inds", "\n", "self", ".", "unsup_inds", "=", "unsup_inds", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "unsup_batch_size", "=", "int", "(", "batch_size", "*", "unsup_fraction", ")", "\n", "self", ".", "sup_batch_size", "=", "batch_size", "-", "unsup_batch_size", "\n", "\n", "if", "num_batches", "is", "not", "None", ":", "\n", "      ", "self", ".", "num_batches", "=", "num_batches", "\n", "", "else", ":", "\n", "      ", "self", ".", "num_batches", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "sup_inds", ")", "/", "self", ".", "sup_batch_size", ")", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__iter__": [[196, 218], ["range", "len", "numpy.random.shuffle", "torch.randperm", "batch.extend", "len", "torch.randint", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "batch_counter", "=", "0", "\n", "while", "batch_counter", "<", "self", ".", "num_batches", ":", "\n", "      ", "sup_inds_shuffled", "=", "[", "\n", "self", ".", "sup_inds", "[", "i", "]", "for", "i", "in", "torch", ".", "randperm", "(", "len", "(", "self", ".", "sup_inds", ")", ")", "\n", "]", "\n", "for", "sup_k", "in", "range", "(", "0", ",", "len", "(", "self", ".", "sup_inds", ")", ",", "self", ".", "sup_batch_size", ")", ":", "\n", "        ", "if", "batch_counter", "==", "self", ".", "num_batches", ":", "\n", "          ", "break", "\n", "", "batch", "=", "sup_inds_shuffled", "[", "sup_k", ":", "(", "sup_k", "+", "self", ".", "sup_batch_size", ")", "]", "\n", "if", "self", ".", "sup_batch_size", "<", "self", ".", "batch_size", ":", "\n", "          ", "batch", ".", "extend", "(", "[", "\n", "self", ".", "unsup_inds", "[", "i", "]", "\n", "for", "i", "in", "torch", ".", "randint", "(", "high", "=", "len", "(", "self", ".", "unsup_inds", ")", ",", "\n", "size", "=", "(", "self", ".", "batch_size", "-", "len", "(", "batch", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", "\n", "]", ")", "\n", "# this shuffle operation is very important, without it", "\n", "# batch-norm / DataParallel hell ensues", "\n", "", "np", ".", "random", ".", "shuffle", "(", "batch", ")", "\n", "yield", "batch", "\n", "batch_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.SemiSupervisedSampler.__len__": [[219, 221], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.setup_data_loader": [[223, 232], ["datasets.setup_imagenetc_data_loader", "datasets.setup_imagenet_data_loader", "datasets.setup_sin_data_loader", "ValueError"], "function", ["home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.setup_imagenetc_data_loader", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.setup_imagenet_data_loader", "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.setup_sin_data_loader"], ["", "", "def", "setup_data_loader", "(", "dataset", ",", "args", ")", ":", "\n", "  ", "if", "dataset", "==", "'ImageNet-C'", "or", "dataset", "==", "'IN-C'", ":", "\n", "    ", "return", "setup_imagenetc_data_loader", "(", "args", ")", "\n", "", "elif", "dataset", "==", "'ImageNet'", "or", "dataset", "==", "'IN'", ":", "\n", "    ", "return", "setup_imagenet_data_loader", "(", "args", ")", "\n", "", "elif", "dataset", "==", "'SIN'", ":", "\n", "    ", "return", "setup_sin_data_loader", "(", "args", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "f'Dataset {dataset} is not available'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.setup_imagenet_data_loader": [[234, 278], ["os.path.join", "os.path.join", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "numpy.random.choice", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "torch.utils.data.Subset", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "setup_imagenet_data_loader", "(", "args", ")", ":", "\n", "  ", "n_worker", "=", "30", "\n", "datadir", "=", "'/w14/dataset/ILSVRC2012/'", "\n", "test_batch_size", "=", "100", "\n", "test_subset_size", "=", "1000", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'val1'", ")", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'train'", ")", "\n", "print", "(", "valdir", ",", "traindir", ")", "\n", "\n", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "val_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "traindir", ",", "train_transforms", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "n_worker", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "valdir", ",", "val_transforms", ")", "\n", "indices_subsample", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "val_dataset", ")", ",", "\n", "test_subset_size", ",", "\n", "replace", "=", "False", ")", "\n", "test_loader_subsample", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", "=", "val_dataset", ",", "indices", "=", "indices_subsample", ")", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "n_worker", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "n_worker", ")", "\n", "train_loader_retrain", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "n_worker", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "test_loader_subsample", ",", "train_loader_retrain", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.setup_imagenetc_data_loader": [[280, 315], ["data_loaders_names.items", "range", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "str", "str", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "setup_imagenetc_data_loader", "(", "args", ")", ":", "\n", "  ", "workers", "=", "30", "\n", "data_loaders_names", "=", "{", "\n", "'Brightness'", ":", "'brightness'", ",", "\n", "'Contrast'", ":", "'contrast'", ",", "\n", "'Defocus Blur'", ":", "'defocus_blur'", ",", "\n", "'Elastic Transform'", ":", "'elastic_transform'", ",", "\n", "'Fog'", ":", "'fog'", ",", "\n", "'Frost'", ":", "'frost'", ",", "\n", "'Gaussian Noise'", ":", "'gaussian_noise'", ",", "\n", "'Glass Blur'", ":", "'glass_blur'", ",", "\n", "'Impulse Noise'", ":", "'impulse_noise'", ",", "\n", "'JPEG Compression'", ":", "'jpeg_compression'", ",", "\n", "'Motion Blur'", ":", "'motion_blur'", ",", "\n", "'Pixelate'", ":", "'pixelate'", ",", "\n", "'Shot Noise'", ":", "'shot_noise'", ",", "\n", "'Snow'", ":", "'snow'", ",", "\n", "'Zoom Blur'", ":", "'zoom_blur'", "\n", "}", "\n", "\n", "data_loaders", "=", "{", "}", "\n", "for", "name", ",", "path", "in", "data_loaders_names", ".", "items", "(", ")", ":", "\n", "    ", "data_loaders", "[", "name", "]", "=", "{", "}", "\n", "for", "severity", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "      ", "dset", "=", "datasets", ".", "ImageFolder", "(", "\n", "args", ".", "imagenetc_path", "+", "path", "+", "'/'", "+", "str", "(", "severity", ")", "+", "'/'", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", ")", "\n", "data_loaders", "[", "name", "]", "[", "str", "(", "severity", ")", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "n_worker", ")", "\n", "", "", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.divyam3897_MNG_AC.None.datasets.setup_sin_data_loader": [[317, 333], ["osp.join", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "setup_sin_data_loader", "(", "args", ")", ":", "\n", "  ", "n_worker", "=", "args", ".", "workers", "\n", "traindir", "=", "osp", ".", "join", "(", "args", ".", "datadir_sin", ",", "'train'", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "sin_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "n_worker", ")", "\n", "\n", "return", "train_loader", "\n", "", ""]]}